  logic [31:0] _000_;
  logic [31:0] _000__t ;
  logic [31:0] _000__r ;
  logic [31:0] _000__c ;
  logic [31:0] _000__x ;
  logic [31:0] _001_;
  logic [31:0] _001__t ;
  logic [31:0] _001__r ;
  logic [31:0] _001__c ;
  logic [31:0] _001__x ;
  logic [31:0] _002_;
  logic [31:0] _002__t ;
  logic [31:0] _002__r ;
  logic [31:0] _002__c ;
  logic [31:0] _002__x ;
  logic [31:0] _003_;
  logic [31:0] _003__t ;
  logic [31:0] _003__r ;
  logic [31:0] _003__c ;
  logic [31:0] _003__x ;
  logic [31:0] _004_;
  logic [31:0] _004__t ;
  logic [31:0] _004__r ;
  logic [31:0] _004__c ;
  logic [31:0] _004__x ;
  logic [31:0] _005_;
  logic [31:0] _005__t ;
  logic [31:0] _005__r ;
  logic [31:0] _005__c ;
  logic [31:0] _005__x ;
  logic [31:0] _006_;
  logic [31:0] _006__t ;
  logic [31:0] _006__r ;
  logic [31:0] _006__c ;
  logic [31:0] _006__x ;
  logic [31:0] _007_;
  logic [31:0] _007__t ;
  logic [31:0] _007__r ;
  logic [31:0] _007__c ;
  logic [31:0] _007__x ;
  logic [31:0] _008_;
  logic [31:0] _008__t ;
  logic [31:0] _008__r ;
  logic [31:0] _008__c ;
  logic [31:0] _008__x ;
  logic _009_;
  logic _009__t ;
  logic _009__r ;
  logic _009__c ;
  logic _009__x ;
  logic [31:0] _010_;
  logic [31:0] _010__t ;
  logic [31:0] _010__r ;
  logic [31:0] _010__c ;
  logic [31:0] _010__x ;
  logic [6:0] _011_;
  logic [6:0] _011__t ;
  logic [6:0] _011__r ;
  logic [6:0] _011__c ;
  logic [6:0] _011__x ;
  logic [1:0] _012_;
  logic [1:0] _012__t ;
  logic [1:0] _012__r ;
  logic [1:0] _012__c ;
  logic [1:0] _012__x ;
  logic [30:0] _013_;
  logic [30:0] _013__t ;
  logic [30:0] _013__r ;
  logic [30:0] _013__c ;
  logic [30:0] _013__x ;
  logic [31:0] _014_;
  logic [31:0] _014__t ;
  logic [31:0] _014__r ;
  logic [31:0] _014__c ;
  logic [31:0] _014__x ;
  logic [31:0] _015_;
  logic [31:0] _015__t ;
  logic [31:0] _015__r ;
  logic [31:0] _015__c ;
  logic [31:0] _015__x ;
  logic [28:0] _016_;
  logic [28:0] _016__t ;
  logic [28:0] _016__r ;
  logic [28:0] _016__c ;
  logic [28:0] _016__x ;
  logic [31:0] _017_;
  logic [31:0] _017__t ;
  logic [31:0] _017__r ;
  logic [31:0] _017__c ;
  logic [31:0] _017__x ;
  logic _018_;
  logic _018__t ;
  logic _018__r ;
  logic _018__c ;
  logic _018__x ;
  logic _019_;
  logic _019__t ;
  logic _019__r ;
  logic _019__c ;
  logic _019__x ;
  logic [31:0] _020_;
  logic [31:0] _020__t ;
  logic [31:0] _020__r ;
  logic [31:0] _020__c ;
  logic [31:0] _020__x ;
  logic [31:0] _021_;
  logic [31:0] _021__t ;
  logic [31:0] _021__r ;
  logic [31:0] _021__c ;
  logic [31:0] _021__x ;
  logic [31:0] _022_;
  logic [31:0] _022__t ;
  logic [31:0] _022__r ;
  logic [31:0] _022__c ;
  logic [31:0] _022__x ;
  logic [31:0] _023_;
  logic [31:0] _023__t ;
  logic [31:0] _023__r ;
  logic [31:0] _023__c ;
  logic [31:0] _023__x ;
  logic [31:0] _024_;
  logic [31:0] _024__t ;
  logic [31:0] _024__r ;
  logic [31:0] _024__c ;
  logic [31:0] _024__x ;
  logic [31:0] _025_;
  logic [31:0] _025__t ;
  logic [31:0] _025__r ;
  logic [31:0] _025__c ;
  logic [31:0] _025__x ;
  logic [31:0] _026_;
  logic [31:0] _026__t ;
  logic [31:0] _026__r ;
  logic [31:0] _026__c ;
  logic [31:0] _026__x ;
  logic [31:0] _027_;
  logic [31:0] _027__t ;
  logic [31:0] _027__r ;
  logic [31:0] _027__c ;
  logic [31:0] _027__x ;
  logic [31:0] _028_;
  logic [31:0] _028__t ;
  logic [31:0] _028__r ;
  logic [31:0] _028__c ;
  logic [31:0] _028__x ;
  logic _029_;
  logic _029__t ;
  logic _029__r ;
  logic _029__c ;
  logic _029__x ;
  logic [31:0] _030_;
  logic [31:0] _030__t ;
  logic [31:0] _030__r ;
  logic [31:0] _030__c ;
  logic [31:0] _030__x ;
  logic [31:0] _031_;
  logic [31:0] _031__t ;
  logic [31:0] _031__r ;
  logic [31:0] _031__c ;
  logic [31:0] _031__x ;
  logic [31:0] _032_;
  logic [31:0] _032__t ;
  logic [31:0] _032__r ;
  logic [31:0] _032__c ;
  logic [31:0] _032__x ;
  logic _033_;
  logic _033__t ;
  logic _033__r ;
  logic _033__c ;
  logic _033__x ;
  logic [31:0] _034_;
  logic [31:0] _034__t ;
  logic [31:0] _034__r ;
  logic [31:0] _034__c ;
  logic [31:0] _034__x ;
  logic [31:0] _035_;
  logic [31:0] _035__t ;
  logic [31:0] _035__r ;
  logic [31:0] _035__c ;
  logic [31:0] _035__x ;
  logic [31:0] _036_;
  logic [31:0] _036__t ;
  logic [31:0] _036__r ;
  logic [31:0] _036__c ;
  logic [31:0] _036__x ;
  logic [31:0] _037_;
  logic [31:0] _037__t ;
  logic [31:0] _037__r ;
  logic [31:0] _037__c ;
  logic [31:0] _037__x ;
  logic [1:0] _038_;
  logic [1:0] _038__t ;
  logic [1:0] _038__r ;
  logic [1:0] _038__c ;
  logic [1:0] _038__x ;
  logic _039_;
  logic _039__t ;
  logic _039__r ;
  logic _039__c ;
  logic _039__x ;
  logic [31:0] _040_;
  logic [31:0] _040__t ;
  logic [31:0] _040__r ;
  logic [31:0] _040__c ;
  logic [31:0] _040__x ;
  logic [31:0] _041_;
  logic [31:0] _041__t ;
  logic [31:0] _041__r ;
  logic [31:0] _041__c ;
  logic [31:0] _041__x ;
  logic [31:0] _042_;
  logic [31:0] _042__t ;
  logic [31:0] _042__r ;
  logic [31:0] _042__c ;
  logic [31:0] _042__x ;
  logic [31:0] _043_;
  logic [31:0] _043__t ;
  logic [31:0] _043__r ;
  logic [31:0] _043__c ;
  logic [31:0] _043__x ;
  logic [31:0] _044_;
  logic [31:0] _044__t ;
  logic [31:0] _044__r ;
  logic [31:0] _044__c ;
  logic [31:0] _044__x ;
  logic [31:0] _045_;
  logic [31:0] _045__t ;
  logic [31:0] _045__r ;
  logic [31:0] _045__c ;
  logic [31:0] _045__x ;
  logic [31:0] _046_;
  logic [31:0] _046__t ;
  logic [31:0] _046__r ;
  logic [31:0] _046__c ;
  logic [31:0] _046__x ;
  logic [31:0] _047_;
  logic [31:0] _047__t ;
  logic [31:0] _047__r ;
  logic [31:0] _047__c ;
  logic [31:0] _047__x ;
  logic [31:0] _048_;
  logic [31:0] _048__t ;
  logic [31:0] _048__r ;
  logic [31:0] _048__c ;
  logic [31:0] _048__x ;
  logic [31:0] _049_;
  logic [31:0] _049__t ;
  logic [31:0] _049__r ;
  logic [31:0] _049__c ;
  logic [31:0] _049__x ;
  logic [31:0] _050_;
  logic [31:0] _050__t ;
  logic [31:0] _050__r ;
  logic [31:0] _050__c ;
  logic [31:0] _050__x ;
  logic [6:0] _051_;
  logic [6:0] _051__t ;
  logic [6:0] _051__r ;
  logic [6:0] _051__c ;
  logic [6:0] _051__x ;
  logic [31:0] _052_;
  logic [31:0] _052__t ;
  logic [31:0] _052__r ;
  logic [31:0] _052__c ;
  logic [31:0] _052__x ;
  logic [31:0] _053_;
  logic [31:0] _053__t ;
  logic [31:0] _053__r ;
  logic [31:0] _053__c ;
  logic [31:0] _053__x ;
  logic _054_;
  logic _054__t ;
  logic _054__r ;
  logic _054__c ;
  logic _054__x ;
  logic _055_;
  logic _055__t ;
  logic _055__r ;
  logic _055__c ;
  logic _055__x ;
  logic _056_;
  logic _056__t ;
  logic _056__r ;
  logic _056__c ;
  logic _056__x ;
  logic _057_;
  logic _057__t ;
  logic _057__r ;
  logic _057__c ;
  logic _057__x ;
  logic _058_;
  logic _058__t ;
  logic _058__r ;
  logic _058__c ;
  logic _058__x ;
  logic _059_;
  logic _059__t ;
  logic _059__r ;
  logic _059__c ;
  logic _059__x ;
  logic _060_;
  logic _060__t ;
  logic _060__r ;
  logic _060__c ;
  logic _060__x ;
  logic _061_;
  logic _061__t ;
  logic _061__r ;
  logic _061__c ;
  logic _061__x ;
  logic _062_;
  logic _062__t ;
  logic _062__r ;
  logic _062__c ;
  logic _062__x ;
  logic [31:0] _063_;
  logic [31:0] _063__t ;
  logic [31:0] _063__r ;
  logic [31:0] _063__c ;
  logic [31:0] _063__x ;
  logic [31:0] _064_;
  logic [31:0] _064__t ;
  logic [31:0] _064__r ;
  logic [31:0] _064__c ;
  logic [31:0] _064__x ;
  logic [31:0] _065_;
  logic [31:0] _065__t ;
  logic [31:0] _065__r ;
  logic [31:0] _065__c ;
  logic [31:0] _065__x ;
  logic [31:0] _066_;
  logic [31:0] _066__t ;
  logic [31:0] _066__r ;
  logic [31:0] _066__c ;
  logic [31:0] _066__x ;
  logic _067_;
  logic _067__t ;
  logic _067__r ;
  logic _067__c ;
  logic _067__x ;
  logic _068_;
  logic _068__t ;
  logic _068__r ;
  logic _068__c ;
  logic _068__x ;
  logic _069_;
  logic _069__t ;
  logic _069__r ;
  logic _069__c ;
  logic _069__x ;
  logic _070_;
  logic _070__t ;
  logic _070__r ;
  logic _070__c ;
  logic _070__x ;
  logic [6:0] _071_;
  logic [6:0] _071__t ;
  logic [6:0] _071__r ;
  logic [6:0] _071__c ;
  logic [6:0] _071__x ;
  logic [31:0] _072_;
  logic [31:0] _072__t ;
  logic [31:0] _072__r ;
  logic [31:0] _072__c ;
  logic [31:0] _072__x ;
  logic [31:0] _073_;
  logic [31:0] _073__t ;
  logic [31:0] _073__r ;
  logic [31:0] _073__c ;
  logic [31:0] _073__x ;
  logic [31:0] _074_;
  logic [31:0] _074__t ;
  logic [31:0] _074__r ;
  logic [31:0] _074__c ;
  logic [31:0] _074__x ;
  logic [31:0] _075_;
  logic [31:0] _075__t ;
  logic [31:0] _075__r ;
  logic [31:0] _075__c ;
  logic [31:0] _075__x ;
  logic [31:0] _076_;
  logic [31:0] _076__t ;
  logic [31:0] _076__r ;
  logic [31:0] _076__c ;
  logic [31:0] _076__x ;
  logic [31:0] _077_;
  logic [31:0] _077__t ;
  logic [31:0] _077__r ;
  logic [31:0] _077__c ;
  logic [31:0] _077__x ;
  logic [31:0] _078_;
  logic [31:0] _078__t ;
  logic [31:0] _078__r ;
  logic [31:0] _078__c ;
  logic [31:0] _078__x ;
  logic [31:0] _079_;
  logic [31:0] _079__t ;
  logic [31:0] _079__r ;
  logic [31:0] _079__c ;
  logic [31:0] _079__x ;
  logic [31:0] _080_;
  logic [31:0] _080__t ;
  logic [31:0] _080__r ;
  logic [31:0] _080__c ;
  logic [31:0] _080__x ;
  logic [31:0] _081_;
  logic [31:0] _081__t ;
  logic [31:0] _081__r ;
  logic [31:0] _081__c ;
  logic [31:0] _081__x ;
  logic [31:0] _082_;
  logic [31:0] _082__t ;
  logic [31:0] _082__r ;
  logic [31:0] _082__c ;
  logic [31:0] _082__x ;
  logic [31:0] _083_;
  logic [31:0] _083__t ;
  logic [31:0] _083__r ;
  logic [31:0] _083__c ;
  logic [31:0] _083__x ;
  logic [31:0] _084_;
  logic [31:0] _084__t ;
  logic [31:0] _084__r ;
  logic [31:0] _084__c ;
  logic [31:0] _084__x ;
  logic [31:0] _085_;
  logic [31:0] _085__t ;
  logic [31:0] _085__r ;
  logic [31:0] _085__c ;
  logic [31:0] _085__x ;
  logic [31:0] _086_;
  logic [31:0] _086__t ;
  logic [31:0] _086__r ;
  logic [31:0] _086__c ;
  logic [31:0] _086__x ;
  logic [31:0] _087_;
  logic [31:0] _087__t ;
  logic [31:0] _087__r ;
  logic [31:0] _087__c ;
  logic [31:0] _087__x ;
  logic _088_;
  logic _088__t ;
  logic _088__r ;
  logic _088__c ;
  logic _088__x ;
  logic [31:0] _089_;
  logic [31:0] _089__t ;
  logic [31:0] _089__r ;
  logic [31:0] _089__c ;
  logic [31:0] _089__x ;
  logic _090_;
  logic _090__t ;
  logic _090__r ;
  logic _090__c ;
  logic _090__x ;
  logic _091_;
  logic _091__t ;
  logic _091__r ;
  logic _091__c ;
  logic _091__x ;
  logic [31:0] _092_;
  logic [31:0] _092__t ;
  logic [31:0] _092__r ;
  logic [31:0] _092__c ;
  logic [31:0] _092__x ;
  logic [31:0] _093_;
  logic [31:0] _093__t ;
  logic [31:0] _093__r ;
  logic [31:0] _093__c ;
  logic [31:0] _093__x ;
  logic [31:0] _094_;
  logic [31:0] _094__t ;
  logic [31:0] _094__r ;
  logic [31:0] _094__c ;
  logic [31:0] _094__x ;
  logic [31:0] _095_;
  logic [31:0] _095__t ;
  logic [31:0] _095__r ;
  logic [31:0] _095__c ;
  logic [31:0] _095__x ;
  logic [31:0] _096_;
  logic [31:0] _096__t ;
  logic [31:0] _096__r ;
  logic [31:0] _096__c ;
  logic [31:0] _096__x ;
  logic [31:0] _097_;
  logic [31:0] _097__t ;
  logic [31:0] _097__r ;
  logic [31:0] _097__c ;
  logic [31:0] _097__x ;
  logic [31:0] _098_;
  logic [31:0] _098__t ;
  logic [31:0] _098__r ;
  logic [31:0] _098__c ;
  logic [31:0] _098__x ;
  logic [31:0] _099_;
  logic [31:0] _099__t ;
  logic [31:0] _099__r ;
  logic [31:0] _099__c ;
  logic [31:0] _099__x ;
  logic [31:0] _100_;
  logic [31:0] _100__t ;
  logic [31:0] _100__r ;
  logic [31:0] _100__c ;
  logic [31:0] _100__x ;
  logic [31:0] _101_;
  logic [31:0] _101__t ;
  logic [31:0] _101__r ;
  logic [31:0] _101__c ;
  logic [31:0] _101__x ;
  logic [31:0] _102_;
  logic [31:0] _102__t ;
  logic [31:0] _102__r ;
  logic [31:0] _102__c ;
  logic [31:0] _102__x ;
  logic [31:0] _103_;
  logic [31:0] _103__t ;
  logic [31:0] _103__r ;
  logic [31:0] _103__c ;
  logic [31:0] _103__x ;
  logic [31:0] _104_;
  logic [31:0] _104__t ;
  logic [31:0] _104__r ;
  logic [31:0] _104__c ;
  logic [31:0] _104__x ;
  logic [31:0] _105_;
  logic [31:0] _105__t ;
  logic [31:0] _105__r ;
  logic [31:0] _105__c ;
  logic [31:0] _105__x ;
  logic [31:0] _106_;
  logic [31:0] _106__t ;
  logic [31:0] _106__r ;
  logic [31:0] _106__c ;
  logic [31:0] _106__x ;
  logic [31:0] _107_;
  logic [31:0] _107__t ;
  logic [31:0] _107__r ;
  logic [31:0] _107__c ;
  logic [31:0] _107__x ;
  logic _108_;
  logic _108__t ;
  logic _108__r ;
  logic _108__c ;
  logic _108__x ;
  logic _109_;
  logic _109__t ;
  logic _109__r ;
  logic _109__c ;
  logic _109__x ;
  logic [6:0] _110_;
  logic [6:0] _110__t ;
  logic [6:0] _110__r ;
  logic [6:0] _110__c ;
  logic [6:0] _110__x ;
  logic _111_;
  logic _111__t ;
  logic _111__r ;
  logic _111__c ;
  logic _111__x ;
  logic _112_;
  logic _112__t ;
  logic _112__r ;
  logic _112__c ;
  logic _112__x ;
  logic _113_;
  logic _113__t ;
  logic _113__r ;
  logic _113__c ;
  logic _113__x ;
  logic _114_;
  logic _114__t ;
  logic _114__r ;
  logic _114__c ;
  logic _114__x ;
  logic _115_;
  logic _115__t ;
  logic _115__r ;
  logic _115__c ;
  logic _115__x ;
  logic _116_;
  logic _116__t ;
  logic _116__r ;
  logic _116__c ;
  logic _116__x ;
  logic _117_;
  logic _117__t ;
  logic _117__r ;
  logic _117__c ;
  logic _117__x ;
  logic _118_;
  logic _118__t ;
  logic _118__r ;
  logic _118__c ;
  logic _118__x ;
  logic _119_;
  logic _119__t ;
  logic _119__r ;
  logic _119__c ;
  logic _119__x ;
  logic _120_;
  logic _120__t ;
  logic _120__r ;
  logic _120__c ;
  logic _120__x ;
  logic _121_;
  logic _121__t ;
  logic _121__r ;
  logic _121__c ;
  logic _121__x ;
  logic _122_;
  logic _122__t ;
  logic _122__r ;
  logic _122__c ;
  logic _122__x ;
  logic _123_;
  logic _123__t ;
  logic _123__r ;
  logic _123__c ;
  logic _123__x ;
  logic _124_;
  logic _124__t ;
  logic _124__r ;
  logic _124__c ;
  logic _124__x ;
  logic _125_;
  logic _125__t ;
  logic _125__r ;
  logic _125__c ;
  logic _125__x ;
  logic _126_;
  logic _126__t ;
  logic _126__r ;
  logic _126__c ;
  logic _126__x ;
  logic _127_;
  logic _127__t ;
  logic _127__r ;
  logic _127__c ;
  logic _127__x ;
  logic _128_;
  logic _128__t ;
  logic _128__r ;
  logic _128__c ;
  logic _128__x ;
  logic _129_;
  logic _129__t ;
  logic _129__r ;
  logic _129__c ;
  logic _129__x ;
  logic _130_;
  logic _130__t ;
  logic _130__r ;
  logic _130__c ;
  logic _130__x ;
  logic [31:0] _131_;
  logic [31:0] _131__t ;
  logic [31:0] _131__r ;
  logic [31:0] _131__c ;
  logic [31:0] _131__x ;
  logic [31:0] _132_;
  logic [31:0] _132__t ;
  logic [31:0] _132__r ;
  logic [31:0] _132__c ;
  logic [31:0] _132__x ;
  logic [31:0] _133_;
  logic [31:0] _133__t ;
  logic [31:0] _133__r ;
  logic [31:0] _133__c ;
  logic [31:0] _133__x ;
  logic [31:0] _134_;
  logic [31:0] _134__t ;
  logic [31:0] _134__r ;
  logic [31:0] _134__c ;
  logic [31:0] _134__x ;
  logic [31:0] _135_;
  logic [31:0] _135__t ;
  logic [31:0] _135__r ;
  logic [31:0] _135__c ;
  logic [31:0] _135__x ;
  logic [31:0] _136_;
  logic [31:0] _136__t ;
  logic [31:0] _136__r ;
  logic [31:0] _136__c ;
  logic [31:0] _136__x ;
  logic [31:0] _137_;
  logic [31:0] _137__t ;
  logic [31:0] _137__r ;
  logic [31:0] _137__c ;
  logic [31:0] _137__x ;
  logic [31:0] H0_new;
  logic [31:0] H0_new_t ;
  logic [31:0] H0_new_r ;
  logic [31:0] H0_new_c ;
  logic [31:0] H0_new_x ;
  logic [31:0] H0_reg;
  logic [31:0]  H0_reg_t ;
  logic H0_reg_t_1bit ;
  logic H0_reg_t_flag ;
  output logic H0_reg_r_flag ;
  logic [31:0]  H0_reg_r ;
  logic H0_reg_x ;
  logic [31:0]  H0_reg_c ;
  logic H0_reg_reset ;
  logic [31:0] H1_new;
  logic [31:0] H1_new_t ;
  logic [31:0] H1_new_r ;
  logic [31:0] H1_new_c ;
  logic [31:0] H1_new_x ;
  logic [31:0] H1_reg;
  logic [31:0]  H1_reg_t ;
  logic H1_reg_t_1bit ;
  logic H1_reg_t_flag ;
  output logic H1_reg_r_flag ;
  logic [31:0]  H1_reg_r ;
  logic H1_reg_x ;
  logic [31:0]  H1_reg_c ;
  logic H1_reg_reset ;
  logic [31:0] H2_new;
  logic [31:0] H2_new_t ;
  logic [31:0] H2_new_r ;
  logic [31:0] H2_new_c ;
  logic [31:0] H2_new_x ;
  logic [31:0] H2_reg;
  logic [31:0]  H2_reg_t ;
  logic H2_reg_t_1bit ;
  logic H2_reg_t_flag ;
  output logic H2_reg_r_flag ;
  logic [31:0]  H2_reg_r ;
  logic H2_reg_x ;
  logic [31:0]  H2_reg_c ;
  logic H2_reg_reset ;
  logic [31:0] H3_new;
  logic [31:0] H3_new_t ;
  logic [31:0] H3_new_r ;
  logic [31:0] H3_new_c ;
  logic [31:0] H3_new_x ;
  logic [31:0] H3_reg;
  logic [31:0]  H3_reg_t ;
  logic H3_reg_t_1bit ;
  logic H3_reg_t_flag ;
  output logic H3_reg_r_flag ;
  logic [31:0]  H3_reg_r ;
  logic H3_reg_x ;
  logic [31:0]  H3_reg_c ;
  logic H3_reg_reset ;
  logic [31:0] H4_new;
  logic [31:0] H4_new_t ;
  logic [31:0] H4_new_r ;
  logic [31:0] H4_new_c ;
  logic [31:0] H4_new_x ;
  logic [31:0] H4_reg;
  logic [31:0]  H4_reg_t ;
  logic H4_reg_t_1bit ;
  logic H4_reg_t_flag ;
  output logic H4_reg_r_flag ;
  logic [31:0]  H4_reg_r ;
  logic H4_reg_x ;
  logic [31:0]  H4_reg_c ;
  logic H4_reg_reset ;
  logic H_we;
  logic H_we_t ;
  logic H_we_r ;
  logic H_we_c ;
  logic H_we_x ;
  logic a_e_we;
  logic a_e_we_t ;
  logic a_e_we_r ;
  logic a_e_we_c ;
  logic a_e_we_x ;
  logic [31:0] a_new;
  logic [31:0] a_new_t ;
  logic [31:0] a_new_r ;
  logic [31:0] a_new_c ;
  logic [31:0] a_new_x ;
  logic [31:0] a_reg;
  logic [31:0]  a_reg_t ;
  logic a_reg_t_1bit ;
  logic a_reg_t_flag ;
  output logic a_reg_r_flag ;
  logic [31:0]  a_reg_r ;
  logic a_reg_x ;
  logic [31:0]  a_reg_c ;
  logic a_reg_reset ;
  logic [31:0] b_new;
  logic [31:0] b_new_t ;
  logic [31:0] b_new_r ;
  logic [31:0] b_new_c ;
  logic [31:0] b_new_x ;
  logic [31:0] b_reg;
  logic [31:0]  b_reg_t ;
  logic b_reg_t_1bit ;
  logic b_reg_t_flag ;
  output logic b_reg_r_flag ;
  logic [31:0]  b_reg_r ;
  logic b_reg_x ;
  logic [31:0]  b_reg_c ;
  logic b_reg_reset ;
  input [511:0] block;
  input [511:0] block_t ;
  logic [31:0] c_new;
  logic [31:0] c_new_t ;
  logic [31:0] c_new_r ;
  logic [31:0] c_new_c ;
  logic [31:0] c_new_x ;
  logic [31:0] c_reg;
  logic [31:0]  c_reg_t ;
  logic c_reg_t_1bit ;
  logic c_reg_t_flag ;
  output logic c_reg_r_flag ;
  logic [31:0]  c_reg_r ;
  logic c_reg_x ;
  logic [31:0]  c_reg_c ;
  logic c_reg_reset ;
  input clk;
  input clk_t ;
  logic [31:0] d_new;
  logic [31:0] d_new_t ;
  logic [31:0] d_new_r ;
  logic [31:0] d_new_c ;
  logic [31:0] d_new_x ;
  logic [31:0] d_reg;
  logic [31:0]  d_reg_t ;
  logic d_reg_t_1bit ;
  logic d_reg_t_flag ;
  output logic d_reg_r_flag ;
  logic [31:0]  d_reg_r ;
  logic d_reg_x ;
  logic [31:0]  d_reg_c ;
  logic d_reg_reset ;
  output [159:0] digest;
  logic [159:0] digest_t ;
  logic [159:0] digest_r ;
  logic [159:0] digest_c ;
  logic [159:0] digest_x ;
  assign digest_x = 160'b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111 ;
  logic digest_init;
  logic digest_init_t ;
  logic digest_init_r ;
  logic digest_init_c ;
  logic digest_init_x ;
  logic digest_update;
  logic digest_update_t ;
  logic digest_update_r ;
  logic digest_update_c ;
  logic digest_update_x ;
  output digest_valid;
  logic digest_valid_t ;
  logic digest_valid_r ;
  logic digest_valid_c ;
  logic digest_valid_x ;
  assign digest_valid_x = 1'b1 ;
  logic digest_valid_new;
  logic digest_valid_new_t ;
  logic digest_valid_new_r ;
  logic digest_valid_new_c ;
  logic digest_valid_new_x ;
  logic digest_valid_reg;
  logic  digest_valid_reg_t ;
  logic digest_valid_reg_t_1bit ;
  logic digest_valid_reg_t_flag ;
  output logic digest_valid_reg_r_flag ;
  logic  digest_valid_reg_r ;
  logic digest_valid_reg_x ;
  logic  digest_valid_reg_c ;
  logic digest_valid_reg_reset ;
  logic digest_valid_we;
  logic digest_valid_we_t ;
  logic digest_valid_we_r ;
  logic digest_valid_we_c ;
  logic digest_valid_we_x ;
  logic [31:0] e_new;
  logic [31:0] e_new_t ;
  logic [31:0] e_new_r ;
  logic [31:0] e_new_c ;
  logic [31:0] e_new_x ;
  logic [31:0] e_reg;
  logic [31:0]  e_reg_t ;
  logic e_reg_t_1bit ;
  logic e_reg_t_flag ;
  output logic e_reg_r_flag ;
  logic [31:0]  e_reg_r ;
  logic e_reg_x ;
  logic [31:0]  e_reg_c ;
  logic e_reg_reset ;
  logic first_block;
  logic first_block_t ;
  logic first_block_r ;
  logic first_block_c ;
  logic first_block_x ;
  input init;
  input init_t ;
  input next;
  input next_t ;
  output ready;
  logic ready_t ;
  logic ready_r ;
  logic ready_c ;
  logic ready_x ;
  assign ready_x = 1'b1 ;
  logic ready_flag;
  logic ready_flag_t ;
  logic ready_flag_r ;
  logic ready_flag_c ;
  logic ready_flag_x ;
  input reset_n;
  input reset_n_t ;
  logic round_ctr_inc;
  logic round_ctr_inc_t ;
  logic round_ctr_inc_r ;
  logic round_ctr_inc_c ;
  logic round_ctr_inc_x ;
  logic [6:0] round_ctr_new;
  logic [6:0] round_ctr_new_t ;
  logic [6:0] round_ctr_new_r ;
  logic [6:0] round_ctr_new_c ;
  logic [6:0] round_ctr_new_x ;
  logic [6:0] round_ctr_reg;
  logic [6:0]  round_ctr_reg_t ;
  logic round_ctr_reg_t_1bit ;
  logic round_ctr_reg_t_flag ;
  output logic round_ctr_reg_r_flag ;
  logic [6:0]  round_ctr_reg_r ;
  logic round_ctr_reg_x ;
  logic [6:0]  round_ctr_reg_c ;
  logic round_ctr_reg_reset ;
  logic round_ctr_rst;
  logic round_ctr_rst_t ;
  logic round_ctr_rst_r ;
  logic round_ctr_rst_c ;
  logic round_ctr_rst_x ;
  logic round_ctr_we;
  logic round_ctr_we_t ;
  logic round_ctr_we_r ;
  logic round_ctr_we_c ;
  logic round_ctr_we_x ;
  logic [1:0] sha1_ctrl_new;
  logic [1:0] sha1_ctrl_new_t ;
  logic [1:0] sha1_ctrl_new_r ;
  logic [1:0] sha1_ctrl_new_c ;
  logic [1:0] sha1_ctrl_new_x ;
  logic [1:0] sha1_ctrl_reg;
  logic [1:0]  sha1_ctrl_reg_t ;
  logic sha1_ctrl_reg_t_1bit ;
  logic sha1_ctrl_reg_t_flag ;
  output logic sha1_ctrl_reg_r_flag ;
  logic [1:0]  sha1_ctrl_reg_r ;
  logic sha1_ctrl_reg_x ;
  logic [1:0]  sha1_ctrl_reg_c ;
  logic sha1_ctrl_reg_reset ;
  logic sha1_ctrl_we;
  logic sha1_ctrl_we_t ;
  logic sha1_ctrl_we_r ;
  logic sha1_ctrl_we_c ;
  logic sha1_ctrl_we_x ;
  logic state_init;
  logic state_init_t ;
  logic state_init_r ;
  logic state_init_c ;
  logic state_init_x ;
  logic state_update;
  logic state_update_t ;
  logic state_update_r ;
  logic state_update_c ;
  logic state_update_x ;
  logic [31:0] w;
  logic [31:0] w_t ;
  logic [31:0] w_r ;
  logic [31:0] w_c ;
  logic [31:0] w_x ;
  logic w_init;
  logic w_init_t ;
  logic w_init_r ;
  logic w_init_c ;
  logic w_init_x ;
  logic [511:0] \w_mem_inst.block ;
  logic [511:0] \w_mem_inst.block_t ;
  logic [511:0] \w_mem_inst.block_r ;
  logic [511:0] \w_mem_inst.block_c ;
  logic [511:0] \w_mem_inst.block_x ;
  logic \w_mem_inst.clk ;
  logic \w_mem_inst.clk_t ;
  logic \w_mem_inst.clk_r ;
  logic \w_mem_inst.clk_c ;
  logic \w_mem_inst.clk_x ;
  logic \w_mem_inst.init ;
  logic \w_mem_inst.init_t ;
  logic \w_mem_inst.init_r ;
  logic \w_mem_inst.init_c ;
  logic \w_mem_inst.init_x ;
  logic \w_mem_inst.next ;
  logic \w_mem_inst.next_t ;
  logic \w_mem_inst.next_r ;
  logic \w_mem_inst.next_c ;
  logic \w_mem_inst.next_x ;
  logic \w_mem_inst.reset_n ;
  logic \w_mem_inst.reset_n_t ;
  logic \w_mem_inst.reset_n_r ;
  logic \w_mem_inst.reset_n_c ;
  logic \w_mem_inst.reset_n_x ;
  logic \w_mem_inst.sha1_w_mem_ctrl_new ;
  logic \w_mem_inst.sha1_w_mem_ctrl_new_t ;
  logic \w_mem_inst.sha1_w_mem_ctrl_new_r ;
  logic \w_mem_inst.sha1_w_mem_ctrl_new_c ;
  logic \w_mem_inst.sha1_w_mem_ctrl_new_x ;
  logic \w_mem_inst.sha1_w_mem_ctrl_reg ;
  logic  \w_mem_inst.sha1_w_mem_ctrl_reg_t ;
  logic \w_mem_inst.sha1_w_mem_ctrl_reg_t_1bit ;
  logic \w_mem_inst.sha1_w_mem_ctrl_reg_t_flag ;
  output logic \w_mem_inst.sha1_w_mem_ctrl_reg_r_flag ;
  logic  \w_mem_inst.sha1_w_mem_ctrl_reg_r ;
  logic \w_mem_inst.sha1_w_mem_ctrl_reg_x ;
  logic  \w_mem_inst.sha1_w_mem_ctrl_reg_c ;
  logic \w_mem_inst.sha1_w_mem_ctrl_reg_reset ;
  logic \w_mem_inst.sha1_w_mem_ctrl_we ;
  logic \w_mem_inst.sha1_w_mem_ctrl_we_t ;
  logic \w_mem_inst.sha1_w_mem_ctrl_we_r ;
  logic \w_mem_inst.sha1_w_mem_ctrl_we_c ;
  logic \w_mem_inst.sha1_w_mem_ctrl_we_x ;
  logic [31:0] \w_mem_inst.w ;
  logic [31:0] \w_mem_inst.w_t ;
  logic [31:0] \w_mem_inst.w_r ;
  logic [31:0] \w_mem_inst.w_c ;
  logic [31:0] \w_mem_inst.w_x ;
  logic [31:0] \w_mem_inst.w_0 ;
  logic [31:0] \w_mem_inst.w_0_t ;
  logic [31:0] \w_mem_inst.w_0_r ;
  logic [31:0] \w_mem_inst.w_0_c ;
  logic [31:0] \w_mem_inst.w_0_x ;
  logic [31:0] \w_mem_inst.w_13 ;
  logic [31:0] \w_mem_inst.w_13_t ;
  logic [31:0] \w_mem_inst.w_13_r ;
  logic [31:0] \w_mem_inst.w_13_c ;
  logic [31:0] \w_mem_inst.w_13_x ;
  logic [31:0] \w_mem_inst.w_16 ;
  logic [31:0] \w_mem_inst.w_16_t ;
  logic [31:0] \w_mem_inst.w_16_r ;
  logic [31:0] \w_mem_inst.w_16_c ;
  logic [31:0] \w_mem_inst.w_16_x ;
  logic [31:0] \w_mem_inst.w_2 ;
  logic [31:0] \w_mem_inst.w_2_t ;
  logic [31:0] \w_mem_inst.w_2_r ;
  logic [31:0] \w_mem_inst.w_2_c ;
  logic [31:0] \w_mem_inst.w_2_x ;
  logic [31:0] \w_mem_inst.w_8 ;
  logic [31:0] \w_mem_inst.w_8_t ;
  logic [31:0] \w_mem_inst.w_8_r ;
  logic [31:0] \w_mem_inst.w_8_c ;
  logic [31:0] \w_mem_inst.w_8_x ;
  logic \w_mem_inst.w_ctr_inc ;
  logic \w_mem_inst.w_ctr_inc_t ;
  logic \w_mem_inst.w_ctr_inc_r ;
  logic \w_mem_inst.w_ctr_inc_c ;
  logic \w_mem_inst.w_ctr_inc_x ;
  logic [6:0] \w_mem_inst.w_ctr_new ;
  logic [6:0] \w_mem_inst.w_ctr_new_t ;
  logic [6:0] \w_mem_inst.w_ctr_new_r ;
  logic [6:0] \w_mem_inst.w_ctr_new_c ;
  logic [6:0] \w_mem_inst.w_ctr_new_x ;
  logic [6:0] \w_mem_inst.w_ctr_reg ;
  logic [6:0]  \w_mem_inst.w_ctr_reg_t ;
  logic \w_mem_inst.w_ctr_reg_t_1bit ;
  logic \w_mem_inst.w_ctr_reg_t_flag ;
  output logic \w_mem_inst.w_ctr_reg_r_flag ;
  logic [6:0]  \w_mem_inst.w_ctr_reg_r ;
  logic \w_mem_inst.w_ctr_reg_x ;
  logic [6:0]  \w_mem_inst.w_ctr_reg_c ;
  logic \w_mem_inst.w_ctr_reg_reset ;
  logic \w_mem_inst.w_ctr_rst ;
  logic \w_mem_inst.w_ctr_rst_t ;
  logic \w_mem_inst.w_ctr_rst_r ;
  logic \w_mem_inst.w_ctr_rst_c ;
  logic \w_mem_inst.w_ctr_rst_x ;
  logic \w_mem_inst.w_ctr_we ;
  logic \w_mem_inst.w_ctr_we_t ;
  logic \w_mem_inst.w_ctr_we_r ;
  logic \w_mem_inst.w_ctr_we_c ;
  logic \w_mem_inst.w_ctr_we_x ;
  logic [31:0] \w_mem_inst.w_mem00_new ;
  logic [31:0] \w_mem_inst.w_mem00_new_t ;
  logic [31:0] \w_mem_inst.w_mem00_new_r ;
  logic [31:0] \w_mem_inst.w_mem00_new_c ;
  logic [31:0] \w_mem_inst.w_mem00_new_x ;
  logic [31:0] \w_mem_inst.w_mem01_new ;
  logic [31:0] \w_mem_inst.w_mem01_new_t ;
  logic [31:0] \w_mem_inst.w_mem01_new_r ;
  logic [31:0] \w_mem_inst.w_mem01_new_c ;
  logic [31:0] \w_mem_inst.w_mem01_new_x ;
  logic [31:0] \w_mem_inst.w_mem02_new ;
  logic [31:0] \w_mem_inst.w_mem02_new_t ;
  logic [31:0] \w_mem_inst.w_mem02_new_r ;
  logic [31:0] \w_mem_inst.w_mem02_new_c ;
  logic [31:0] \w_mem_inst.w_mem02_new_x ;
  logic [31:0] \w_mem_inst.w_mem03_new ;
  logic [31:0] \w_mem_inst.w_mem03_new_t ;
  logic [31:0] \w_mem_inst.w_mem03_new_r ;
  logic [31:0] \w_mem_inst.w_mem03_new_c ;
  logic [31:0] \w_mem_inst.w_mem03_new_x ;
  logic [31:0] \w_mem_inst.w_mem04_new ;
  logic [31:0] \w_mem_inst.w_mem04_new_t ;
  logic [31:0] \w_mem_inst.w_mem04_new_r ;
  logic [31:0] \w_mem_inst.w_mem04_new_c ;
  logic [31:0] \w_mem_inst.w_mem04_new_x ;
  logic [31:0] \w_mem_inst.w_mem05_new ;
  logic [31:0] \w_mem_inst.w_mem05_new_t ;
  logic [31:0] \w_mem_inst.w_mem05_new_r ;
  logic [31:0] \w_mem_inst.w_mem05_new_c ;
  logic [31:0] \w_mem_inst.w_mem05_new_x ;
  logic [31:0] \w_mem_inst.w_mem06_new ;
  logic [31:0] \w_mem_inst.w_mem06_new_t ;
  logic [31:0] \w_mem_inst.w_mem06_new_r ;
  logic [31:0] \w_mem_inst.w_mem06_new_c ;
  logic [31:0] \w_mem_inst.w_mem06_new_x ;
  logic [31:0] \w_mem_inst.w_mem07_new ;
  logic [31:0] \w_mem_inst.w_mem07_new_t ;
  logic [31:0] \w_mem_inst.w_mem07_new_r ;
  logic [31:0] \w_mem_inst.w_mem07_new_c ;
  logic [31:0] \w_mem_inst.w_mem07_new_x ;
  logic [31:0] \w_mem_inst.w_mem08_new ;
  logic [31:0] \w_mem_inst.w_mem08_new_t ;
  logic [31:0] \w_mem_inst.w_mem08_new_r ;
  logic [31:0] \w_mem_inst.w_mem08_new_c ;
  logic [31:0] \w_mem_inst.w_mem08_new_x ;
  logic [31:0] \w_mem_inst.w_mem09_new ;
  logic [31:0] \w_mem_inst.w_mem09_new_t ;
  logic [31:0] \w_mem_inst.w_mem09_new_r ;
  logic [31:0] \w_mem_inst.w_mem09_new_c ;
  logic [31:0] \w_mem_inst.w_mem09_new_x ;
  logic [31:0] \w_mem_inst.w_mem10_new ;
  logic [31:0] \w_mem_inst.w_mem10_new_t ;
  logic [31:0] \w_mem_inst.w_mem10_new_r ;
  logic [31:0] \w_mem_inst.w_mem10_new_c ;
  logic [31:0] \w_mem_inst.w_mem10_new_x ;
  logic [31:0] \w_mem_inst.w_mem11_new ;
  logic [31:0] \w_mem_inst.w_mem11_new_t ;
  logic [31:0] \w_mem_inst.w_mem11_new_r ;
  logic [31:0] \w_mem_inst.w_mem11_new_c ;
  logic [31:0] \w_mem_inst.w_mem11_new_x ;
  logic [31:0] \w_mem_inst.w_mem12_new ;
  logic [31:0] \w_mem_inst.w_mem12_new_t ;
  logic [31:0] \w_mem_inst.w_mem12_new_r ;
  logic [31:0] \w_mem_inst.w_mem12_new_c ;
  logic [31:0] \w_mem_inst.w_mem12_new_x ;
  logic [31:0] \w_mem_inst.w_mem13_new ;
  logic [31:0] \w_mem_inst.w_mem13_new_t ;
  logic [31:0] \w_mem_inst.w_mem13_new_r ;
  logic [31:0] \w_mem_inst.w_mem13_new_c ;
  logic [31:0] \w_mem_inst.w_mem13_new_x ;
  logic [31:0] \w_mem_inst.w_mem14_new ;
  logic [31:0] \w_mem_inst.w_mem14_new_t ;
  logic [31:0] \w_mem_inst.w_mem14_new_r ;
  logic [31:0] \w_mem_inst.w_mem14_new_c ;
  logic [31:0] \w_mem_inst.w_mem14_new_x ;
  logic [31:0] \w_mem_inst.w_mem15_new ;
  logic [31:0] \w_mem_inst.w_mem15_new_t ;
  logic [31:0] \w_mem_inst.w_mem15_new_r ;
  logic [31:0] \w_mem_inst.w_mem15_new_c ;
  logic [31:0] \w_mem_inst.w_mem15_new_x ;
  logic [31:0] \w_mem_inst.w_mem[0] ;
  logic [31:0]  \w_mem_inst.w_mem[0]_t ;
  logic \w_mem_inst.w_mem[0]_t_1bit ;
  logic \w_mem_inst.w_mem[0]_t_flag ;
  output logic \w_mem_inst.w_mem[0]_r_flag ;
  logic [31:0]  \w_mem_inst.w_mem[0]_r ;
  logic \w_mem_inst.w_mem[0]_x ;
  logic [31:0]  \w_mem_inst.w_mem[0]_c ;
  logic \w_mem_inst.w_mem[0]_reset ;
  logic [31:0] \w_mem_inst.w_mem[10] ;
  logic [31:0]  \w_mem_inst.w_mem[10]_t ;
  logic \w_mem_inst.w_mem[10]_t_1bit ;
  logic \w_mem_inst.w_mem[10]_t_flag ;
  output logic \w_mem_inst.w_mem[10]_r_flag ;
  logic [31:0]  \w_mem_inst.w_mem[10]_r ;
  logic \w_mem_inst.w_mem[10]_x ;
  logic [31:0]  \w_mem_inst.w_mem[10]_c ;
  logic \w_mem_inst.w_mem[10]_reset ;
  logic [31:0] \w_mem_inst.w_mem[11] ;
  logic [31:0]  \w_mem_inst.w_mem[11]_t ;
  logic \w_mem_inst.w_mem[11]_t_1bit ;
  logic \w_mem_inst.w_mem[11]_t_flag ;
  output logic \w_mem_inst.w_mem[11]_r_flag ;
  logic [31:0]  \w_mem_inst.w_mem[11]_r ;
  logic \w_mem_inst.w_mem[11]_x ;
  logic [31:0]  \w_mem_inst.w_mem[11]_c ;
  logic \w_mem_inst.w_mem[11]_reset ;
  logic [31:0] \w_mem_inst.w_mem[12] ;
  logic [31:0]  \w_mem_inst.w_mem[12]_t ;
  logic \w_mem_inst.w_mem[12]_t_1bit ;
  logic \w_mem_inst.w_mem[12]_t_flag ;
  output logic \w_mem_inst.w_mem[12]_r_flag ;
  logic [31:0]  \w_mem_inst.w_mem[12]_r ;
  logic \w_mem_inst.w_mem[12]_x ;
  logic [31:0]  \w_mem_inst.w_mem[12]_c ;
  logic \w_mem_inst.w_mem[12]_reset ;
  logic [31:0] \w_mem_inst.w_mem[13] ;
  logic [31:0]  \w_mem_inst.w_mem[13]_t ;
  logic \w_mem_inst.w_mem[13]_t_1bit ;
  logic \w_mem_inst.w_mem[13]_t_flag ;
  output logic \w_mem_inst.w_mem[13]_r_flag ;
  logic [31:0]  \w_mem_inst.w_mem[13]_r ;
  logic \w_mem_inst.w_mem[13]_x ;
  logic [31:0]  \w_mem_inst.w_mem[13]_c ;
  logic \w_mem_inst.w_mem[13]_reset ;
  logic [31:0] \w_mem_inst.w_mem[14] ;
  logic [31:0]  \w_mem_inst.w_mem[14]_t ;
  logic \w_mem_inst.w_mem[14]_t_1bit ;
  logic \w_mem_inst.w_mem[14]_t_flag ;
  output logic \w_mem_inst.w_mem[14]_r_flag ;
  logic [31:0]  \w_mem_inst.w_mem[14]_r ;
  logic \w_mem_inst.w_mem[14]_x ;
  logic [31:0]  \w_mem_inst.w_mem[14]_c ;
  logic \w_mem_inst.w_mem[14]_reset ;
  logic [31:0] \w_mem_inst.w_mem[15] ;
  logic [31:0]  \w_mem_inst.w_mem[15]_t ;
  logic \w_mem_inst.w_mem[15]_t_1bit ;
  logic \w_mem_inst.w_mem[15]_t_flag ;
  output logic \w_mem_inst.w_mem[15]_r_flag ;
  logic [31:0]  \w_mem_inst.w_mem[15]_r ;
  logic \w_mem_inst.w_mem[15]_x ;
  logic [31:0]  \w_mem_inst.w_mem[15]_c ;
  logic \w_mem_inst.w_mem[15]_reset ;
  logic [31:0] \w_mem_inst.w_mem[1] ;
  logic [31:0]  \w_mem_inst.w_mem[1]_t ;
  logic \w_mem_inst.w_mem[1]_t_1bit ;
  logic \w_mem_inst.w_mem[1]_t_flag ;
  output logic \w_mem_inst.w_mem[1]_r_flag ;
  logic [31:0]  \w_mem_inst.w_mem[1]_r ;
  logic \w_mem_inst.w_mem[1]_x ;
  logic [31:0]  \w_mem_inst.w_mem[1]_c ;
  logic \w_mem_inst.w_mem[1]_reset ;
  logic [31:0] \w_mem_inst.w_mem[2] ;
  logic [31:0]  \w_mem_inst.w_mem[2]_t ;
  logic \w_mem_inst.w_mem[2]_t_1bit ;
  logic \w_mem_inst.w_mem[2]_t_flag ;
  output logic \w_mem_inst.w_mem[2]_r_flag ;
  logic [31:0]  \w_mem_inst.w_mem[2]_r ;
  logic \w_mem_inst.w_mem[2]_x ;
  logic [31:0]  \w_mem_inst.w_mem[2]_c ;
  logic \w_mem_inst.w_mem[2]_reset ;
  logic [31:0] \w_mem_inst.w_mem[3] ;
  logic [31:0]  \w_mem_inst.w_mem[3]_t ;
  logic \w_mem_inst.w_mem[3]_t_1bit ;
  logic \w_mem_inst.w_mem[3]_t_flag ;
  output logic \w_mem_inst.w_mem[3]_r_flag ;
  logic [31:0]  \w_mem_inst.w_mem[3]_r ;
  logic \w_mem_inst.w_mem[3]_x ;
  logic [31:0]  \w_mem_inst.w_mem[3]_c ;
  logic \w_mem_inst.w_mem[3]_reset ;
  logic [31:0] \w_mem_inst.w_mem[4] ;
  logic [31:0]  \w_mem_inst.w_mem[4]_t ;
  logic \w_mem_inst.w_mem[4]_t_1bit ;
  logic \w_mem_inst.w_mem[4]_t_flag ;
  output logic \w_mem_inst.w_mem[4]_r_flag ;
  logic [31:0]  \w_mem_inst.w_mem[4]_r ;
  logic \w_mem_inst.w_mem[4]_x ;
  logic [31:0]  \w_mem_inst.w_mem[4]_c ;
  logic \w_mem_inst.w_mem[4]_reset ;
  logic [31:0] \w_mem_inst.w_mem[5] ;
  logic [31:0]  \w_mem_inst.w_mem[5]_t ;
  logic \w_mem_inst.w_mem[5]_t_1bit ;
  logic \w_mem_inst.w_mem[5]_t_flag ;
  output logic \w_mem_inst.w_mem[5]_r_flag ;
  logic [31:0]  \w_mem_inst.w_mem[5]_r ;
  logic \w_mem_inst.w_mem[5]_x ;
  logic [31:0]  \w_mem_inst.w_mem[5]_c ;
  logic \w_mem_inst.w_mem[5]_reset ;
  logic [31:0] \w_mem_inst.w_mem[6] ;
  logic [31:0]  \w_mem_inst.w_mem[6]_t ;
  logic \w_mem_inst.w_mem[6]_t_1bit ;
  logic \w_mem_inst.w_mem[6]_t_flag ;
  output logic \w_mem_inst.w_mem[6]_r_flag ;
  logic [31:0]  \w_mem_inst.w_mem[6]_r ;
  logic \w_mem_inst.w_mem[6]_x ;
  logic [31:0]  \w_mem_inst.w_mem[6]_c ;
  logic \w_mem_inst.w_mem[6]_reset ;
  logic [31:0] \w_mem_inst.w_mem[7] ;
  logic [31:0]  \w_mem_inst.w_mem[7]_t ;
  logic \w_mem_inst.w_mem[7]_t_1bit ;
  logic \w_mem_inst.w_mem[7]_t_flag ;
  output logic \w_mem_inst.w_mem[7]_r_flag ;
  logic [31:0]  \w_mem_inst.w_mem[7]_r ;
  logic \w_mem_inst.w_mem[7]_x ;
  logic [31:0]  \w_mem_inst.w_mem[7]_c ;
  logic \w_mem_inst.w_mem[7]_reset ;
  logic [31:0] \w_mem_inst.w_mem[8] ;
  logic [31:0]  \w_mem_inst.w_mem[8]_t ;
  logic \w_mem_inst.w_mem[8]_t_1bit ;
  logic \w_mem_inst.w_mem[8]_t_flag ;
  output logic \w_mem_inst.w_mem[8]_r_flag ;
  logic [31:0]  \w_mem_inst.w_mem[8]_r ;
  logic \w_mem_inst.w_mem[8]_x ;
  logic [31:0]  \w_mem_inst.w_mem[8]_c ;
  logic \w_mem_inst.w_mem[8]_reset ;
  logic [31:0] \w_mem_inst.w_mem[9] ;
  logic [31:0]  \w_mem_inst.w_mem[9]_t ;
  logic \w_mem_inst.w_mem[9]_t_1bit ;
  logic \w_mem_inst.w_mem[9]_t_flag ;
  output logic \w_mem_inst.w_mem[9]_r_flag ;
  logic [31:0]  \w_mem_inst.w_mem[9]_r ;
  logic \w_mem_inst.w_mem[9]_x ;
  logic [31:0]  \w_mem_inst.w_mem[9]_c ;
  logic \w_mem_inst.w_mem[9]_reset ;
  logic \w_mem_inst.w_mem_we ;
  logic \w_mem_inst.w_mem_we_t ;
  logic \w_mem_inst.w_mem_we_r ;
  logic \w_mem_inst.w_mem_we_c ;
  logic \w_mem_inst.w_mem_we_x ;
  logic [31:0] \w_mem_inst.w_new ;
  logic [31:0] \w_mem_inst.w_new_t ;
  logic [31:0] \w_mem_inst.w_new_r ;
  logic [31:0] \w_mem_inst.w_new_c ;
  logic [31:0] \w_mem_inst.w_new_x ;
  logic [31:0] \w_mem_inst.w_tmp ;
  logic [31:0] \w_mem_inst.w_tmp_t ;
  logic [31:0] \w_mem_inst.w_tmp_r ;
  logic [31:0] \w_mem_inst.w_tmp_c ;
  logic [31:0] \w_mem_inst.w_tmp_x ;
  logic w_next;
  logic w_next_t ;
  logic w_next_r ;
  logic w_next_c ;
  logic w_next_x ;
  assign _042_ = H0_reg + a_reg;
  logic [32-1:0] H0_reg_c0 ;
  logic [32-1:0] H0_reg_r0 ;
  logic [32-1:0] H0_reg_x0 ;
  logic [32-1:0] a_reg_c0 ;
  logic [32-1:0] a_reg_r0 ;
  logic [32-1:0] a_reg_x0 ;
  assign _042__t = H0_reg_t | a_reg_t ;
  assign H0_reg_c0 = _042__c ;
  assign H0_reg_r0 = _042__r | ( _042__c & a_reg_t );
  assign H0_reg_x0 = _042__x ;
  assign a_reg_c0 = _042__c ;
  assign a_reg_r0 = _042__r | ( _042__c & H0_reg_t );
  assign a_reg_x0 = _042__x ;
  assign _043_ = H1_reg + b_reg;
  logic [32-1:0] H1_reg_c0 ;
  logic [32-1:0] H1_reg_r0 ;
  logic [32-1:0] H1_reg_x0 ;
  logic [32-1:0] b_reg_c0 ;
  logic [32-1:0] b_reg_r0 ;
  logic [32-1:0] b_reg_x0 ;
  assign _043__t = H1_reg_t | b_reg_t ;
  assign H1_reg_c0 = _043__c ;
  assign H1_reg_r0 = _043__r | ( _043__c & b_reg_t );
  assign H1_reg_x0 = _043__x ;
  assign b_reg_c0 = _043__c ;
  assign b_reg_r0 = _043__r | ( _043__c & H1_reg_t );
  assign b_reg_x0 = _043__x ;
  assign _044_ = H2_reg + c_reg;
  logic [32-1:0] H2_reg_c0 ;
  logic [32-1:0] H2_reg_r0 ;
  logic [32-1:0] H2_reg_x0 ;
  logic [32-1:0] c_reg_c0 ;
  logic [32-1:0] c_reg_r0 ;
  logic [32-1:0] c_reg_x0 ;
  assign _044__t = H2_reg_t | c_reg_t ;
  assign H2_reg_c0 = _044__c ;
  assign H2_reg_r0 = _044__r | ( _044__c & c_reg_t );
  assign H2_reg_x0 = _044__x ;
  assign c_reg_c0 = _044__c ;
  assign c_reg_r0 = _044__r | ( _044__c & H2_reg_t );
  assign c_reg_x0 = _044__x ;
  assign _045_ = H3_reg + d_reg;
  logic [32-1:0] H3_reg_c0 ;
  logic [32-1:0] H3_reg_r0 ;
  logic [32-1:0] H3_reg_x0 ;
  logic [32-1:0] d_reg_c0 ;
  logic [32-1:0] d_reg_r0 ;
  logic [32-1:0] d_reg_x0 ;
  assign _045__t = H3_reg_t | d_reg_t ;
  assign H3_reg_c0 = _045__c ;
  assign H3_reg_r0 = _045__r | ( _045__c & d_reg_t );
  assign H3_reg_x0 = _045__x ;
  assign d_reg_c0 = _045__c ;
  assign d_reg_r0 = _045__r | ( _045__c & H3_reg_t );
  assign d_reg_x0 = _045__x ;
  assign _046_ = H4_reg + e_reg;
  logic [32-1:0] H4_reg_c0 ;
  logic [32-1:0] H4_reg_r0 ;
  logic [32-1:0] H4_reg_x0 ;
  logic [32-1:0] e_reg_c0 ;
  logic [32-1:0] e_reg_r0 ;
  logic [32-1:0] e_reg_x0 ;
  assign _046__t = H4_reg_t | e_reg_t ;
  assign H4_reg_c0 = _046__c ;
  assign H4_reg_r0 = _046__r | ( _046__c & e_reg_t );
  assign H4_reg_x0 = _046__x ;
  assign e_reg_c0 = _046__c ;
  assign e_reg_r0 = _046__r | ( _046__c & H4_reg_t );
  assign e_reg_x0 = _046__x ;
  logic [31:0] fangyuan0;
  logic [31:0] fangyuan0_t ;
  logic [31:0] fangyuan0_r ;
  logic [31:0] fangyuan0_c ;
  logic [31:0] fangyuan0_x ;
  assign fangyuan0 = { a_reg[26:0], a_reg[31:27] };
  assign fangyuan0_t = {  a_reg_t [26:0] , a_reg_t [31:27]  };
  logic [32-1:0] a_reg_r1 ;
  logic [32-1:0] a_reg_x1 ;
  logic [32-1:0] a_reg_c1 ;
  assign a_reg_r1 [26:0] = fangyuan0_r [31:5] ;
  assign a_reg_x1 [26:0] = fangyuan0_x [31:5] ;
  assign a_reg_c1 [26:0] = fangyuan0_c [31:5] ;
  assign a_reg_r1 [31:27] = 0;
  assign a_reg_x1 [31:27] = 0;
  assign a_reg_c1 [31:27] = 0;
  logic [32-1:0] a_reg_r2 ;
  logic [32-1:0] a_reg_x2 ;
  logic [32-1:0] a_reg_c2 ;
  assign a_reg_r2 [31:27] = fangyuan0_r [4:0] ;
  assign a_reg_x2 [31:27] = fangyuan0_x [4:0] ;
  assign a_reg_c2 [31:27] = fangyuan0_c [4:0] ;
  assign a_reg_r2 [26:0] = 0;
  assign a_reg_x2 [26:0] = 0;
  assign a_reg_c2 [26:0] = 0;
  assign _047_ = fangyuan0 + e_reg;
  logic [32-1:0] fangyuan0_c0 ;
  logic [32-1:0] fangyuan0_r0 ;
  logic [32-1:0] fangyuan0_x0 ;
  logic [32-1:0] e_reg_c1 ;
  logic [32-1:0] e_reg_r1 ;
  logic [32-1:0] e_reg_x1 ;
  assign _047__t = fangyuan0_t | e_reg_t ;
  assign fangyuan0_c0 = _047__c ;
  assign fangyuan0_r0 = _047__r | ( _047__c & e_reg_t );
  assign fangyuan0_x0 = _047__x ;
  assign e_reg_c1 = _047__c ;
  assign e_reg_r1 = _047__r | ( _047__c & fangyuan0_t );
  assign e_reg_x1 = _047__x ;
  assign _048_ = _047_ + _031_;
  logic [32-1:0] _047__c0 ;
  logic [32-1:0] _047__r0 ;
  logic [32-1:0] _047__x0 ;
  logic [32-1:0] _031__c0 ;
  logic [32-1:0] _031__r0 ;
  logic [32-1:0] _031__x0 ;
  assign _048__t = _047__t | _031__t ;
  assign _047__c0 = _048__c ;
  assign _047__r0 = _048__r | ( _048__c & _031__t );
  assign _047__x0 = _048__x ;
  assign _031__c0 = _048__c ;
  assign _031__r0 = _048__r | ( _048__c & _047__t );
  assign _031__x0 = _048__x ;
  assign _049_ = _048_ + _032_;
  logic [32-1:0] _048__c0 ;
  logic [32-1:0] _048__r0 ;
  logic [32-1:0] _048__x0 ;
  logic [32-1:0] _032__c0 ;
  logic [32-1:0] _032__r0 ;
  logic [32-1:0] _032__x0 ;
  assign _049__t = _048__t | _032__t ;
  assign _048__c0 = _049__c ;
  assign _048__r0 = _049__r | ( _049__c & _032__t );
  assign _048__x0 = _049__x ;
  assign _032__c0 = _049__c ;
  assign _032__r0 = _049__r | ( _049__c & _048__t );
  assign _032__x0 = _049__x ;
  assign _050_ = _049_ + w;
  logic [32-1:0] _049__c0 ;
  logic [32-1:0] _049__r0 ;
  logic [32-1:0] _049__x0 ;
  logic [32-1:0] w_c0 ;
  logic [32-1:0] w_r0 ;
  logic [32-1:0] w_x0 ;
  assign _050__t = _049__t | w_t ;
  assign _049__c0 = _050__c ;
  assign _049__r0 = _050__r | ( _050__c & w_t );
  assign _049__x0 = _050__x ;
  assign w_c0 = _050__c ;
  assign w_r0 = _050__r | ( _050__c & _049__t );
  assign w_x0 = _050__x ;
  assign _051_ = round_ctr_reg + 1'b1;
  logic [7-1:0] round_ctr_reg_c0 ;
  logic [7-1:0] round_ctr_reg_r0 ;
  logic [7-1:0] round_ctr_reg_x0 ;
  assign _051__t = round_ctr_reg_t ;
  assign round_ctr_reg_c0 = _051__c ;
  assign round_ctr_reg_r0 = _051__r ;
  assign round_ctr_reg_x0 = _051__x ;
  assign _052_ = b_reg & c_reg;
  logic [32-1:0] b_reg_c1 ;
  logic [32-1:0] b_reg_r1 ;
  logic [32-1:0] b_reg_x1 ;
  logic [32-1:0] c_reg_c1 ;
  logic [32-1:0] c_reg_r1 ;
  logic [32-1:0] c_reg_x1 ;
  assign _052__t = b_reg_t | c_reg_t ;
  assign b_reg_c1 = _052__c ;
  assign b_reg_r1 = _052__r | ( _052__c & c_reg_t );
  assign b_reg_x1 = _052__x ;
  assign c_reg_c1 = _052__c ;
  assign c_reg_r1 = _052__r | ( _052__c & b_reg_t );
  assign c_reg_x1 = _052__x ;
  assign _053_ = _063_ & d_reg;
  logic [32-1:0] _063__c0 ;
  logic [32-1:0] _063__r0 ;
  logic [32-1:0] _063__x0 ;
  logic [32-1:0] d_reg_c1 ;
  logic [32-1:0] d_reg_r1 ;
  logic [32-1:0] d_reg_x1 ;
  assign _053__t = _063__t | d_reg_t ;
  assign _063__c0 = _053__c ;
  assign _063__r0 = _053__r | ( _053__c & d_reg_t );
  assign _063__x0 = _053__x ;
  assign d_reg_c1 = _053__c ;
  assign d_reg_r1 = _053__r | ( _053__c & _063__t );
  assign d_reg_x1 = _053__x ;
  assign _054_ = round_ctr_reg == 7'b1001111;
  logic [7-1:0] round_ctr_reg_c1 ;
  logic [7-1:0] round_ctr_reg_r1 ;
  logic [7-1:0] round_ctr_reg_x1 ;
  assign _054__t = round_ctr_reg_t ;
  assign round_ctr_reg_c1 = { 7{ _054__c }} ;
  assign round_ctr_reg_r1 = { 7{ _054__r }} ;
  assign round_ctr_reg_x1 = { 7{ _054__x }} ;
  assign _055_ = round_ctr_reg >= 5'b10100;
  logic [7-1:0] round_ctr_reg_c2 ;
  logic [7-1:0] round_ctr_reg_r2 ;
  logic [7-1:0] round_ctr_reg_x2 ;
  assign _055__t = round_ctr_reg_t ;
  assign round_ctr_reg_c2 = { 7{ _055__c }} ;
  assign round_ctr_reg_r2 = { 7{ _055__r }} ;
  assign round_ctr_reg_x2 = { 7{ _055__x }} ;
  assign _056_ = round_ctr_reg >= 6'b101000;
  logic [7-1:0] round_ctr_reg_c3 ;
  logic [7-1:0] round_ctr_reg_r3 ;
  logic [7-1:0] round_ctr_reg_x3 ;
  assign _056__t = round_ctr_reg_t ;
  assign round_ctr_reg_c3 = { 7{ _056__c }} ;
  assign round_ctr_reg_r3 = { 7{ _056__r }} ;
  assign round_ctr_reg_x3 = { 7{ _056__x }} ;
  assign _057_ = round_ctr_reg >= 6'b111100;
  logic [7-1:0] round_ctr_reg_c4 ;
  logic [7-1:0] round_ctr_reg_r4 ;
  logic [7-1:0] round_ctr_reg_x4 ;
  assign _057__t = round_ctr_reg_t ;
  assign round_ctr_reg_c4 = { 7{ _057__c }} ;
  assign round_ctr_reg_r4 = { 7{ _057__r }} ;
  assign round_ctr_reg_x4 = { 7{ _057__x }} ;
  assign _058_ = round_ctr_reg <= 5'b10011;
  logic [7-1:0] round_ctr_reg_c5 ;
  logic [7-1:0] round_ctr_reg_r5 ;
  logic [7-1:0] round_ctr_reg_x5 ;
  assign _058__t = round_ctr_reg_t ;
  assign round_ctr_reg_c5 = { 7{ _058__c }} ;
  assign round_ctr_reg_r5 = { 7{ _058__r }} ;
  assign round_ctr_reg_x5 = { 7{ _058__x }} ;
  assign _059_ = round_ctr_reg <= 6'b100111;
  logic [7-1:0] round_ctr_reg_c6 ;
  logic [7-1:0] round_ctr_reg_r6 ;
  logic [7-1:0] round_ctr_reg_x6 ;
  assign _059__t = round_ctr_reg_t ;
  assign round_ctr_reg_c6 = { 7{ _059__c }} ;
  assign round_ctr_reg_r6 = { 7{ _059__r }} ;
  assign round_ctr_reg_x6 = { 7{ _059__x }} ;
  assign _060_ = round_ctr_reg <= 6'b111011;
  logic [7-1:0] round_ctr_reg_c7 ;
  logic [7-1:0] round_ctr_reg_r7 ;
  logic [7-1:0] round_ctr_reg_x7 ;
  assign _060__t = round_ctr_reg_t ;
  assign round_ctr_reg_c7 = { 7{ _060__c }} ;
  assign round_ctr_reg_r7 = { 7{ _060__r }} ;
  assign round_ctr_reg_x7 = { 7{ _060__x }} ;
  assign _061_ = _055_ && _059_;
  logic [1-1:0] _055__c0 ;
  logic [1-1:0] _055__r0 ;
  logic [1-1:0] _055__x0 ;
  logic [1-1:0] _059__c0 ;
  logic [1-1:0] _059__r0 ;
  logic [1-1:0] _059__x0 ;
  assign _061__t = _055__t | _059__t ;
  assign _055__c0 = _061__c ;
  assign _055__r0 = _061__r | ( _061__c & _059__t );
  assign _055__x0 = _061__x ;
  assign _059__c0 = _061__c ;
  assign _059__r0 = _061__r | ( _061__c & _055__t );
  assign _059__x0 = _061__x ;
  assign _062_ = _056_ && _060_;
  logic [1-1:0] _056__c0 ;
  logic [1-1:0] _056__r0 ;
  logic [1-1:0] _056__x0 ;
  logic [1-1:0] _060__c0 ;
  logic [1-1:0] _060__r0 ;
  logic [1-1:0] _060__x0 ;
  assign _062__t = _056__t | _060__t ;
  assign _056__c0 = _062__c ;
  assign _056__r0 = _062__r | ( _062__c & _060__t );
  assign _056__x0 = _062__x ;
  assign _060__c0 = _062__c ;
  assign _060__r0 = _062__r | ( _062__c & _056__t );
  assign _060__x0 = _062__x ;
  assign _063_ = ~ b_reg;
  logic [32-1:0] b_reg_c2 ;
  logic [32-1:0] b_reg_r2 ;
  logic [32-1:0] b_reg_x2 ;
  assign _063__t = b_reg_t ;
  assign b_reg_c2 = _063__c ;
  assign b_reg_r2 = _063__r ;
  assign b_reg_x2 = _063__x ;
  assign _064_ = b_reg | c_reg;
  logic [32-1:0] b_reg_c3 ;
  logic [32-1:0] b_reg_r3 ;
  logic [32-1:0] b_reg_x3 ;
  logic [32-1:0] c_reg_c2 ;
  logic [32-1:0] c_reg_r2 ;
  logic [32-1:0] c_reg_x2 ;
  assign _064__t = b_reg_t | c_reg_t ;
  assign b_reg_c3 = _064__c ;
  assign b_reg_r3 = _064__r | ( _064__c & c_reg_t );
  assign b_reg_x3 = _064__x ;
  assign c_reg_c2 = _064__c ;
  assign c_reg_r2 = _064__r | ( _064__c & b_reg_t );
  assign c_reg_x2 = _064__x ;
  assign _065_ = b_reg | d_reg;
  logic [32-1:0] b_reg_c4 ;
  logic [32-1:0] b_reg_r4 ;
  logic [32-1:0] b_reg_x4 ;
  logic [32-1:0] d_reg_c2 ;
  logic [32-1:0] d_reg_r2 ;
  logic [32-1:0] d_reg_x2 ;
  assign _065__t = b_reg_t | d_reg_t ;
  assign b_reg_c4 = _065__c ;
  assign b_reg_r4 = _065__r | ( _065__c & d_reg_t );
  assign b_reg_x4 = _065__x ;
  assign d_reg_c2 = _065__c ;
  assign d_reg_r2 = _065__r | ( _065__c & b_reg_t );
  assign d_reg_x2 = _065__x ;
  assign _066_ = c_reg | d_reg;
  logic [32-1:0] c_reg_c3 ;
  logic [32-1:0] c_reg_r3 ;
  logic [32-1:0] c_reg_x3 ;
  logic [32-1:0] d_reg_c3 ;
  logic [32-1:0] d_reg_r3 ;
  logic [32-1:0] d_reg_x3 ;
  assign _066__t = c_reg_t | d_reg_t ;
  assign c_reg_c3 = _066__c ;
  assign c_reg_r3 = _066__r | ( _066__c & d_reg_t );
  assign c_reg_x3 = _066__x ;
  assign d_reg_c3 = _066__c ;
  assign d_reg_r3 = _066__r | ( _066__c & c_reg_t );
  assign d_reg_x3 = _066__x ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      a_reg <= 32'd0;
    else
      a_reg <= _005_;
  logic [32-1:0] _005__x0 ;
  logic [32-1:0] _005__r0 ;
  logic [32-1:0] _005__c0 ;
  assign _005__x0 = { 32{ a_reg != _005_ }} | { 32{ a_reg_reset }} ;
  assign _005__r0 = 0 ;
  assign _005__c0 = 0 ;
  always @( posedge clk )
      a_reg_t 		<= !reset_n ? 0 : | ( _005__t & _005__x0 );
  always @( posedge clk )
      a_reg_t_flag 	<= !reset_n ? 0 : a_reg_t_flag ? 1 : | ( _005__t & _005__x0 );
  always @( posedge clk )
      a_reg_r_flag 	<= !reset_n ? 0 : a_reg_r_flag ? 1 : a_reg_t_flag ? 0 : | a_reg_r ;
  always @( posedge clk )
      a_reg_reset 	<= !reset_n ? 1 : (_005__t & _005__x0) ? 0 : a_reg_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      b_reg <= 32'd0;
    else
      b_reg <= _006_;
  logic [32-1:0] _006__x0 ;
  logic [32-1:0] _006__r0 ;
  logic [32-1:0] _006__c0 ;
  assign _006__x0 = { 32{ b_reg != _006_ }} | { 32{ b_reg_reset }} ;
  assign _006__r0 = 0 ;
  assign _006__c0 = 0 ;
  always @( posedge clk )
      b_reg_t 		<= !reset_n ? 0 : | ( _006__t & _006__x0 );
  always @( posedge clk )
      b_reg_t_flag 	<= !reset_n ? 0 : b_reg_t_flag ? 1 : | ( _006__t & _006__x0 );
  always @( posedge clk )
      b_reg_r_flag 	<= !reset_n ? 0 : b_reg_r_flag ? 1 : b_reg_t_flag ? 0 : | b_reg_r ;
  always @( posedge clk )
      b_reg_reset 	<= !reset_n ? 1 : (_006__t & _006__x0) ? 0 : b_reg_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      c_reg <= 32'd0;
    else
      c_reg <= _007_;
  logic [32-1:0] _007__x0 ;
  logic [32-1:0] _007__r0 ;
  logic [32-1:0] _007__c0 ;
  assign _007__x0 = { 32{ c_reg != _007_ }} | { 32{ c_reg_reset }} ;
  assign _007__r0 = 0 ;
  assign _007__c0 = 0 ;
  always @( posedge clk )
      c_reg_t 		<= !reset_n ? 0 : | ( _007__t & _007__x0 );
  always @( posedge clk )
      c_reg_t_flag 	<= !reset_n ? 0 : c_reg_t_flag ? 1 : | ( _007__t & _007__x0 );
  always @( posedge clk )
      c_reg_r_flag 	<= !reset_n ? 0 : c_reg_r_flag ? 1 : c_reg_t_flag ? 0 : | c_reg_r ;
  always @( posedge clk )
      c_reg_reset 	<= !reset_n ? 1 : (_007__t & _007__x0) ? 0 : c_reg_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      d_reg <= 32'd0;
    else
      d_reg <= _008_;
  logic [32-1:0] _008__x0 ;
  logic [32-1:0] _008__r0 ;
  logic [32-1:0] _008__c0 ;
  assign _008__x0 = { 32{ d_reg != _008_ }} | { 32{ d_reg_reset }} ;
  assign _008__r0 = 0 ;
  assign _008__c0 = 0 ;
  always @( posedge clk )
      d_reg_t 		<= !reset_n ? 0 : | ( _008__t & _008__x0 );
  always @( posedge clk )
      d_reg_t_flag 	<= !reset_n ? 0 : d_reg_t_flag ? 1 : | ( _008__t & _008__x0 );
  always @( posedge clk )
      d_reg_r_flag 	<= !reset_n ? 0 : d_reg_r_flag ? 1 : d_reg_t_flag ? 0 : | d_reg_r ;
  always @( posedge clk )
      d_reg_reset 	<= !reset_n ? 1 : (_008__t & _008__x0) ? 0 : d_reg_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      e_reg <= 32'd0;
    else
      e_reg <= _010_;
  logic [32-1:0] _010__x0 ;
  logic [32-1:0] _010__r0 ;
  logic [32-1:0] _010__c0 ;
  assign _010__x0 = { 32{ e_reg != _010_ }} | { 32{ e_reg_reset }} ;
  assign _010__r0 = 0 ;
  assign _010__c0 = 0 ;
  always @( posedge clk )
      e_reg_t 		<= !reset_n ? 0 : | ( _010__t & _010__x0 );
  always @( posedge clk )
      e_reg_t_flag 	<= !reset_n ? 0 : e_reg_t_flag ? 1 : | ( _010__t & _010__x0 );
  always @( posedge clk )
      e_reg_r_flag 	<= !reset_n ? 0 : e_reg_r_flag ? 1 : e_reg_t_flag ? 0 : | e_reg_r ;
  always @( posedge clk )
      e_reg_reset 	<= !reset_n ? 1 : (_010__t & _010__x0) ? 0 : e_reg_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      H0_reg <= 32'd0;
    else
      H0_reg <= _000_;
  logic [32-1:0] _000__x0 ;
  logic [32-1:0] _000__r0 ;
  logic [32-1:0] _000__c0 ;
  assign _000__x0 = { 32{ H0_reg != _000_ }} | { 32{ H0_reg_reset }} ;
  assign _000__r0 = 0 ;
  assign _000__c0 = 0 ;
  always @( posedge clk )
      H0_reg_t 		<= !reset_n ? 0 : | ( _000__t & _000__x0 );
  always @( posedge clk )
      H0_reg_t_flag 	<= !reset_n ? 0 : H0_reg_t_flag ? 1 : | ( _000__t & _000__x0 );
  always @( posedge clk )
      H0_reg_r_flag 	<= !reset_n ? 0 : H0_reg_r_flag ? 1 : H0_reg_t_flag ? 0 : | H0_reg_r ;
  always @( posedge clk )
      H0_reg_reset 	<= !reset_n ? 1 : (_000__t & _000__x0) ? 0 : H0_reg_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      H1_reg <= 32'd0;
    else
      H1_reg <= _001_;
  logic [32-1:0] _001__x0 ;
  logic [32-1:0] _001__r0 ;
  logic [32-1:0] _001__c0 ;
  assign _001__x0 = { 32{ H1_reg != _001_ }} | { 32{ H1_reg_reset }} ;
  assign _001__r0 = 0 ;
  assign _001__c0 = 0 ;
  always @( posedge clk )
      H1_reg_t 		<= !reset_n ? 0 : | ( _001__t & _001__x0 );
  always @( posedge clk )
      H1_reg_t_flag 	<= !reset_n ? 0 : H1_reg_t_flag ? 1 : | ( _001__t & _001__x0 );
  always @( posedge clk )
      H1_reg_r_flag 	<= !reset_n ? 0 : H1_reg_r_flag ? 1 : H1_reg_t_flag ? 0 : | H1_reg_r ;
  always @( posedge clk )
      H1_reg_reset 	<= !reset_n ? 1 : (_001__t & _001__x0) ? 0 : H1_reg_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      H2_reg <= 32'd0;
    else
      H2_reg <= _002_;
  logic [32-1:0] _002__x0 ;
  logic [32-1:0] _002__r0 ;
  logic [32-1:0] _002__c0 ;
  assign _002__x0 = { 32{ H2_reg != _002_ }} | { 32{ H2_reg_reset }} ;
  assign _002__r0 = 0 ;
  assign _002__c0 = 0 ;
  always @( posedge clk )
      H2_reg_t 		<= !reset_n ? 0 : | ( _002__t & _002__x0 );
  always @( posedge clk )
      H2_reg_t_flag 	<= !reset_n ? 0 : H2_reg_t_flag ? 1 : | ( _002__t & _002__x0 );
  always @( posedge clk )
      H2_reg_r_flag 	<= !reset_n ? 0 : H2_reg_r_flag ? 1 : H2_reg_t_flag ? 0 : | H2_reg_r ;
  always @( posedge clk )
      H2_reg_reset 	<= !reset_n ? 1 : (_002__t & _002__x0) ? 0 : H2_reg_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      H3_reg <= 32'd0;
    else
      H3_reg <= _003_;
  logic [32-1:0] _003__x0 ;
  logic [32-1:0] _003__r0 ;
  logic [32-1:0] _003__c0 ;
  assign _003__x0 = { 32{ H3_reg != _003_ }} | { 32{ H3_reg_reset }} ;
  assign _003__r0 = 0 ;
  assign _003__c0 = 0 ;
  always @( posedge clk )
      H3_reg_t 		<= !reset_n ? 0 : | ( _003__t & _003__x0 );
  always @( posedge clk )
      H3_reg_t_flag 	<= !reset_n ? 0 : H3_reg_t_flag ? 1 : | ( _003__t & _003__x0 );
  always @( posedge clk )
      H3_reg_r_flag 	<= !reset_n ? 0 : H3_reg_r_flag ? 1 : H3_reg_t_flag ? 0 : | H3_reg_r ;
  always @( posedge clk )
      H3_reg_reset 	<= !reset_n ? 1 : (_003__t & _003__x0) ? 0 : H3_reg_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      H4_reg <= 32'd0;
    else
      H4_reg <= _004_;
  logic [32-1:0] _004__x0 ;
  logic [32-1:0] _004__r0 ;
  logic [32-1:0] _004__c0 ;
  assign _004__x0 = { 32{ H4_reg != _004_ }} | { 32{ H4_reg_reset }} ;
  assign _004__r0 = 0 ;
  assign _004__c0 = 0 ;
  always @( posedge clk )
      H4_reg_t 		<= !reset_n ? 0 : | ( _004__t & _004__x0 );
  always @( posedge clk )
      H4_reg_t_flag 	<= !reset_n ? 0 : H4_reg_t_flag ? 1 : | ( _004__t & _004__x0 );
  always @( posedge clk )
      H4_reg_r_flag 	<= !reset_n ? 0 : H4_reg_r_flag ? 1 : H4_reg_t_flag ? 0 : | H4_reg_r ;
  always @( posedge clk )
      H4_reg_reset 	<= !reset_n ? 1 : (_004__t & _004__x0) ? 0 : H4_reg_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      round_ctr_reg <= 7'b0000000;
    else
      round_ctr_reg <= _011_;
  logic [7-1:0] _011__x0 ;
  logic [7-1:0] _011__r0 ;
  logic [7-1:0] _011__c0 ;
  assign _011__x0 = { 7{ round_ctr_reg != _011_ }} | { 7{ round_ctr_reg_reset }} ;
  assign _011__r0 = 0 ;
  assign _011__c0 = 0 ;
  always @( posedge clk )
      round_ctr_reg_t 		<= !reset_n ? 0 : | ( _011__t & _011__x0 );
  always @( posedge clk )
      round_ctr_reg_t_flag 	<= !reset_n ? 0 : round_ctr_reg_t_flag ? 1 : | ( _011__t & _011__x0 );
  always @( posedge clk )
      round_ctr_reg_r_flag 	<= !reset_n ? 0 : round_ctr_reg_r_flag ? 1 : round_ctr_reg_t_flag ? 0 : | round_ctr_reg_r ;
  always @( posedge clk )
      round_ctr_reg_reset 	<= !reset_n ? 1 : (_011__t & _011__x0) ? 0 : round_ctr_reg_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      digest_valid_reg <= 1'b0;
    else
      digest_valid_reg <= _009_;
  logic [1-1:0] _009__x0 ;
  logic [1-1:0] _009__r0 ;
  logic [1-1:0] _009__c0 ;
  assign _009__x0 = { 1{ digest_valid_reg != _009_ }} | { 1{ digest_valid_reg_reset }} ;
  assign _009__r0 = 0 ;
  assign _009__c0 = 0 ;
  always @( posedge clk )
      digest_valid_reg_t 		<= !reset_n ? 0 : | ( _009__t & _009__x0 );
  always @( posedge clk )
      digest_valid_reg_t_flag 	<= !reset_n ? 0 : digest_valid_reg_t_flag ? 1 : | ( _009__t & _009__x0 );
  always @( posedge clk )
      digest_valid_reg_r_flag 	<= !reset_n ? 0 : digest_valid_reg_r_flag ? 1 : digest_valid_reg_t_flag ? 0 : | digest_valid_reg_r ;
  always @( posedge clk )
      digest_valid_reg_reset 	<= !reset_n ? 1 : (_009__t & _009__x0) ? 0 : digest_valid_reg_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      sha1_ctrl_reg <= 2'b00;
    else
      sha1_ctrl_reg <= _012_;
  logic [2-1:0] _012__x0 ;
  logic [2-1:0] _012__r0 ;
  logic [2-1:0] _012__c0 ;
  assign _012__x0 = { 2{ sha1_ctrl_reg != _012_ }} | { 2{ sha1_ctrl_reg_reset }} ;
  assign _012__r0 = 0 ;
  assign _012__c0 = 0 ;
  always @( posedge clk )
      sha1_ctrl_reg_t 		<= !reset_n ? 0 : | ( _012__t & _012__x0 );
  always @( posedge clk )
      sha1_ctrl_reg_t_flag 	<= !reset_n ? 0 : sha1_ctrl_reg_t_flag ? 1 : | ( _012__t & _012__x0 );
  always @( posedge clk )
      sha1_ctrl_reg_r_flag 	<= !reset_n ? 0 : sha1_ctrl_reg_r_flag ? 1 : sha1_ctrl_reg_t_flag ? 0 : | sha1_ctrl_reg_r ;
  always @( posedge clk )
      sha1_ctrl_reg_reset 	<= !reset_n ? 1 : (_012__t & _012__x0) ? 0 : sha1_ctrl_reg_reset ;
  assign _039_ = _054_ ? 1'b1 : 1'b0;
  logic [1-1:0] _054__c0 ;
  logic [1-1:0] _054__r0 ;
  logic [1-1:0] _054__x0 ;
  logic [1-1:0] _054__r0_tmp ;
  assign _054__c0 = 1;
  assign _054__x0 = | _039__x ;
  assign _054__r0 = | _054__r0_tmp ;
  assign _039__t = { 1{ _054__t }} ;
  assign _054__r0_tmp = _039__r ;
  assign _067_ = sha1_ctrl_reg == 1'b1;
  logic [2-1:0] sha1_ctrl_reg_c0 ;
  logic [2-1:0] sha1_ctrl_reg_r0 ;
  logic [2-1:0] sha1_ctrl_reg_x0 ;
  assign _067__t = sha1_ctrl_reg_t ;
  assign sha1_ctrl_reg_c0 = { 2{ _067__c }} ;
  assign sha1_ctrl_reg_r0 = { 2{ _067__r }} ;
  assign sha1_ctrl_reg_x0 = { 2{ _067__x }} ;
  assign _038_ = _054_ ? 2'b10 : 2'b00;
  logic [1-1:0] _054__c1 ;
  logic [1-1:0] _054__r1 ;
  logic [1-1:0] _054__x1 ;
  logic [2-1:0] _054__r1_tmp ;
  assign _054__c1 = 1;
  assign _054__x1 = | _038__x ;
  assign _054__r1 = | _054__r1_tmp ;
  assign _038__t = { 2{ _054__t }} ;
  assign _054__r1_tmp = _038__r ;
  assign _068_ = ! sha1_ctrl_reg;
  logic [2-1:0] sha1_ctrl_reg_c1 ;
  logic [2-1:0] sha1_ctrl_reg_r1 ;
  logic [2-1:0] sha1_ctrl_reg_x1 ;
  assign _068__t = sha1_ctrl_reg_t ;
  assign sha1_ctrl_reg_c1 = _068__c ;
  assign sha1_ctrl_reg_r1 = _068__r ;
  assign sha1_ctrl_reg_x1 = _068__x ;
  assign _033_ = next ? 1'b1 : _029_;
  logic [1-1:0] next_c0 ;
  logic [1-1:0] next_r0 ;
  logic [1-1:0] next_x0 ;
  logic [1-1:0] next_r0_tmp ;
  assign next_c0 = 1;
  assign next_x0 = | _033__x ;
  assign next_r0 = | next_r0_tmp ;
  logic [1-1:0] _029__c0 ;
  logic [1-1:0] _029__r0 ;
  logic [1-1:0] _029__x0 ;
  assign _029__c0 = { 1{ !next }};
  assign _029__r0 = { 1{ !next }} & _033__r ;
  assign _029__x0 = _033__x ;
  assign _033__t = next ? { 1{ next_t }} : ( { 1{ next_t }} | _029__t );
  assign next_r0_tmp = _033__r | ( { 1{ !next }} & _029__t );
  assign _029_ = init ? 1'b1 : 1'b0;
  logic [1-1:0] init_c0 ;
  logic [1-1:0] init_r0 ;
  logic [1-1:0] init_x0 ;
  logic [1-1:0] init_r0_tmp ;
  assign init_c0 = 1;
  assign init_x0 = | _029__x ;
  assign init_r0 = | init_r0_tmp ;
  assign _029__t = { 1{ init_t }} ;
  assign init_r0_tmp = _029__r ;
  logic [2:0] fangyuan1;
  logic [2:0] fangyuan1_t ;
  logic [2:0] fangyuan1_r ;
  logic [2:0] fangyuan1_c ;
  logic [2:0] fangyuan1_x ;
  assign fangyuan1 = { _033_, _039_, 1'b1 };
  assign fangyuan1_t = {  _033__t , _039__t , 1'h0  };
  logic [1-1:0] _033__r0 ;
  logic [1-1:0] _033__x0 ;
  logic [1-1:0] _033__c0 ;
  assign _033__r0 = fangyuan1_r [2:2] ;
  assign _033__x0 = fangyuan1_x [2:2] ;
  assign _033__c0 = fangyuan1_c [2:2] ;
  logic [1-1:0] _039__r0 ;
  logic [1-1:0] _039__x0 ;
  logic [1-1:0] _039__c0 ;
  assign _039__r0 = fangyuan1_r [1:1] ;
  assign _039__x0 = fangyuan1_x [1:1] ;
  assign _039__c0 = fangyuan1_c [1:1] ;
  logic [2:0] fangyuan2;
  logic [2:0] fangyuan2_t ;
  logic [2:0] fangyuan2_r ;
  logic [2:0] fangyuan2_c ;
  logic [2:0] fangyuan2_x ;
  assign fangyuan2 = { _068_, _067_, _069_ };
  assign fangyuan2_t = {  _068__t , _067__t , _069__t  };
  logic [1-1:0] _068__r0 ;
  logic [1-1:0] _068__x0 ;
  logic [1-1:0] _068__c0 ;
  assign _068__r0 = fangyuan2_r [2:2] ;
  assign _068__x0 = fangyuan2_x [2:2] ;
  assign _068__c0 = fangyuan2_c [2:2] ;
  logic [1-1:0] _067__r0 ;
  logic [1-1:0] _067__x0 ;
  logic [1-1:0] _067__c0 ;
  assign _067__r0 = fangyuan2_r [1:1] ;
  assign _067__x0 = fangyuan2_x [1:1] ;
  assign _067__c0 = fangyuan2_c [1:1] ;
  logic [1-1:0] _069__r0 ;
  logic [1-1:0] _069__x0 ;
  logic [1-1:0] _069__c0 ;
  assign _069__r0 = fangyuan2_r [0:0] ;
  assign _069__x0 = fangyuan2_x [0:0] ;
  assign _069__c0 = fangyuan2_c [0:0] ;
  always @(1'b0 or fangyuan1 or fangyuan2) begin
    casez (fangyuan2)
      3'b??1 :
        sha1_ctrl_we = fangyuan1 [0:0] ;
      3'b?1? :
        sha1_ctrl_we = fangyuan1 [1:1] ;
      3'b1?? :
        sha1_ctrl_we = fangyuan1 [2:2] ;
      default:
        sha1_ctrl_we = 1'b0 ;
    endcase
  end
    always @( fangyuan1_t or fangyuan2_t or fangyuan2 ) begin
      casez (fangyuan2)
        3'b??1 :
          sha1_ctrl_we_t = fangyuan1_t  [0:0] | { 1{ | fangyuan2_t }} ;
        3'b?1? :
          sha1_ctrl_we_t = fangyuan1_t  [1:1] | { 1{ | fangyuan2_t }} ;
        3'b1?? :
          sha1_ctrl_we_t = fangyuan1_t  [2:2] | { 1{ | fangyuan2_t }} ;
        default:
          sha1_ctrl_we_t = { 1{ | fangyuan2_t }} ;
      endcase
    end
    reg [3-1:0] fangyuan2_r0 ;
    reg [3-1:0] fangyuan2_x0 ;
    reg [3-1:0] fangyuan2_c0 ;
    reg [3-1:0] fangyuan1_r0 ;
    reg [3-1:0] fangyuan1_x0 ;
    reg [3-1:0] fangyuan1_c0 ;
    always @( sha1_ctrl_we_r or fangyuan2 ) begin
      fangyuan2_r0 = { 3{ | sha1_ctrl_we_r }} ;
      fangyuan1_r0 = 0 ;
      casez (fangyuan2)
        3'b??1 :
          fangyuan1_r0 [0:0] = sha1_ctrl_we_r ;
        3'b?1? :
          fangyuan1_r0 [1:1] = sha1_ctrl_we_r ;
        3'b1?? :
          fangyuan1_r0 [2:2] = sha1_ctrl_we_r ;
      endcase
    end
    always @( sha1_ctrl_we_x or fangyuan2 ) begin
      fangyuan2_x0 = { 3{ | sha1_ctrl_we_x }} ;
      fangyuan1_x0 = 0 ;
      casez (fangyuan2)
        3'b??1 :
          fangyuan1_x0 [0:0] = sha1_ctrl_we_x ;
        3'b?1? :
          fangyuan1_x0 [1:1] = sha1_ctrl_we_x ;
        3'b1?? :
          fangyuan1_x0 [2:2] = sha1_ctrl_we_x ;
      endcase
    end
    always @( sha1_ctrl_we_c or fangyuan2 ) begin
      fangyuan2_c0 = { 3{ 1'b1 }} ;
      fangyuan1_c0 = 0 ;
      casez (fangyuan2)
        3'b??1 :
          fangyuan1_c0 [0:0] = sha1_ctrl_we_c ;
        3'b?1? :
          fangyuan1_c0 [1:1] = sha1_ctrl_we_c ;
        3'b1?? :
          fangyuan1_c0 [2:2] = sha1_ctrl_we_c ;
      endcase
    end
  assign _069_ = sha1_ctrl_reg == 2'b10;
  logic [2-1:0] sha1_ctrl_reg_c2 ;
  logic [2-1:0] sha1_ctrl_reg_r2 ;
  logic [2-1:0] sha1_ctrl_reg_x2 ;
  assign _069__t = sha1_ctrl_reg_t ;
  assign sha1_ctrl_reg_c2 = { 2{ _069__c }} ;
  assign sha1_ctrl_reg_r2 = { 2{ _069__r }} ;
  assign sha1_ctrl_reg_x2 = { 2{ _069__x }} ;
  logic [3:0] fangyuan3;
  logic [3:0] fangyuan3_t ;
  logic [3:0] fangyuan3_r ;
  logic [3:0] fangyuan3_c ;
  logic [3:0] fangyuan3_x ;
  assign fangyuan3 = { 1'b0, _033_, _038_ };
  assign fangyuan3_t = {  1'h0 , _033__t , _038__t  };
  logic [1-1:0] _033__r1 ;
  logic [1-1:0] _033__x1 ;
  logic [1-1:0] _033__c1 ;
  assign _033__r1 = fangyuan3_r [2:2] ;
  assign _033__x1 = fangyuan3_x [2:2] ;
  assign _033__c1 = fangyuan3_c [2:2] ;
  logic [2-1:0] _038__r0 ;
  logic [2-1:0] _038__x0 ;
  logic [2-1:0] _038__c0 ;
  assign _038__r0 = fangyuan3_r [1:0] ;
  assign _038__x0 = fangyuan3_x [1:0] ;
  assign _038__c0 = fangyuan3_c [1:0] ;
  logic [1:0] fangyuan4;
  logic [1:0] fangyuan4_t ;
  logic [1:0] fangyuan4_r ;
  logic [1:0] fangyuan4_c ;
  logic [1:0] fangyuan4_x ;
  assign fangyuan4 = { _068_, _067_ };
  assign fangyuan4_t = {  _068__t , _067__t  };
  logic [1-1:0] _068__r1 ;
  logic [1-1:0] _068__x1 ;
  logic [1-1:0] _068__c1 ;
  assign _068__r1 = fangyuan4_r [1:1] ;
  assign _068__x1 = fangyuan4_x [1:1] ;
  assign _068__c1 = fangyuan4_c [1:1] ;
  logic [1-1:0] _067__r1 ;
  logic [1-1:0] _067__x1 ;
  logic [1-1:0] _067__c1 ;
  assign _067__r1 = fangyuan4_r [0:0] ;
  assign _067__x1 = fangyuan4_x [0:0] ;
  assign _067__c1 = fangyuan4_c [0:0] ;
  always @(2'b00 or fangyuan3 or fangyuan4) begin
    casez (fangyuan4)
      2'b?1 :
        sha1_ctrl_new = fangyuan3 [1:0] ;
      2'b1? :
        sha1_ctrl_new = fangyuan3 [3:2] ;
      default:
        sha1_ctrl_new = 2'b00 ;
    endcase
  end
    always @( fangyuan3_t or fangyuan4_t or fangyuan4 ) begin
      casez (fangyuan4)
        2'b?1 :
          sha1_ctrl_new_t = fangyuan3_t  [1:0] | { 2{ | fangyuan4_t }} ;
        2'b1? :
          sha1_ctrl_new_t = fangyuan3_t  [3:2] | { 2{ | fangyuan4_t }} ;
        default:
          sha1_ctrl_new_t = { 2{ | fangyuan4_t }} ;
      endcase
    end
    reg [2-1:0] fangyuan4_r0 ;
    reg [2-1:0] fangyuan4_x0 ;
    reg [2-1:0] fangyuan4_c0 ;
    reg [4-1:0] fangyuan3_r0 ;
    reg [4-1:0] fangyuan3_x0 ;
    reg [4-1:0] fangyuan3_c0 ;
    always @( sha1_ctrl_new_r or fangyuan4 ) begin
      fangyuan4_r0 = { 2{ | sha1_ctrl_new_r }} ;
      fangyuan3_r0 = 0 ;
      casez (fangyuan4)
        2'b?1 :
          fangyuan3_r0 [1:0] = sha1_ctrl_new_r ;
        2'b1? :
          fangyuan3_r0 [3:2] = sha1_ctrl_new_r ;
      endcase
    end
    always @( sha1_ctrl_new_x or fangyuan4 ) begin
      fangyuan4_x0 = { 2{ | sha1_ctrl_new_x }} ;
      fangyuan3_x0 = 0 ;
      casez (fangyuan4)
        2'b?1 :
          fangyuan3_x0 [1:0] = sha1_ctrl_new_x ;
        2'b1? :
          fangyuan3_x0 [3:2] = sha1_ctrl_new_x ;
      endcase
    end
    always @( sha1_ctrl_new_c or fangyuan4 ) begin
      fangyuan4_c0 = { 2{ 1'b1 }} ;
      fangyuan3_c0 = 0 ;
      casez (fangyuan4)
        2'b?1 :
          fangyuan3_c0 [1:0] = sha1_ctrl_new_c ;
        2'b1? :
          fangyuan3_c0 [3:2] = sha1_ctrl_new_c ;
      endcase
    end
  logic [1:0] fangyuan5;
  logic [1:0] fangyuan5_t ;
  logic [1:0] fangyuan5_r ;
  logic [1:0] fangyuan5_c ;
  logic [1:0] fangyuan5_x ;
  assign fangyuan5 = { _033_, 1'b1 };
  assign fangyuan5_t = {  _033__t , 1'h0  };
  logic [1-1:0] _033__r2 ;
  logic [1-1:0] _033__x2 ;
  logic [1-1:0] _033__c2 ;
  assign _033__r2 = fangyuan5_r [1:1] ;
  assign _033__x2 = fangyuan5_x [1:1] ;
  assign _033__c2 = fangyuan5_c [1:1] ;
  logic [1:0] fangyuan6;
  logic [1:0] fangyuan6_t ;
  logic [1:0] fangyuan6_r ;
  logic [1:0] fangyuan6_c ;
  logic [1:0] fangyuan6_x ;
  assign fangyuan6 = { _068_, _069_ };
  assign fangyuan6_t = {  _068__t , _069__t  };
  logic [1-1:0] _068__r2 ;
  logic [1-1:0] _068__x2 ;
  logic [1-1:0] _068__c2 ;
  assign _068__r2 = fangyuan6_r [1:1] ;
  assign _068__x2 = fangyuan6_x [1:1] ;
  assign _068__c2 = fangyuan6_c [1:1] ;
  logic [1-1:0] _069__r1 ;
  logic [1-1:0] _069__x1 ;
  logic [1-1:0] _069__c1 ;
  assign _069__r1 = fangyuan6_r [0:0] ;
  assign _069__x1 = fangyuan6_x [0:0] ;
  assign _069__c1 = fangyuan6_c [0:0] ;
  always @(1'b0 or fangyuan5 or fangyuan6) begin
    casez (fangyuan6)
      2'b?1 :
        digest_valid_we = fangyuan5 [0:0] ;
      2'b1? :
        digest_valid_we = fangyuan5 [1:1] ;
      default:
        digest_valid_we = 1'b0 ;
    endcase
  end
    always @( fangyuan5_t or fangyuan6_t or fangyuan6 ) begin
      casez (fangyuan6)
        2'b?1 :
          digest_valid_we_t = fangyuan5_t  [0:0] | { 1{ | fangyuan6_t }} ;
        2'b1? :
          digest_valid_we_t = fangyuan5_t  [1:1] | { 1{ | fangyuan6_t }} ;
        default:
          digest_valid_we_t = { 1{ | fangyuan6_t }} ;
      endcase
    end
    reg [2-1:0] fangyuan6_r0 ;
    reg [2-1:0] fangyuan6_x0 ;
    reg [2-1:0] fangyuan6_c0 ;
    reg [2-1:0] fangyuan5_r0 ;
    reg [2-1:0] fangyuan5_x0 ;
    reg [2-1:0] fangyuan5_c0 ;
    always @( digest_valid_we_r or fangyuan6 ) begin
      fangyuan6_r0 = { 2{ | digest_valid_we_r }} ;
      fangyuan5_r0 = 0 ;
      casez (fangyuan6)
        2'b?1 :
          fangyuan5_r0 [0:0] = digest_valid_we_r ;
        2'b1? :
          fangyuan5_r0 [1:1] = digest_valid_we_r ;
      endcase
    end
    always @( digest_valid_we_x or fangyuan6 ) begin
      fangyuan6_x0 = { 2{ | digest_valid_we_x }} ;
      fangyuan5_x0 = 0 ;
      casez (fangyuan6)
        2'b?1 :
          fangyuan5_x0 [0:0] = digest_valid_we_x ;
        2'b1? :
          fangyuan5_x0 [1:1] = digest_valid_we_x ;
      endcase
    end
    always @( digest_valid_we_c or fangyuan6 ) begin
      fangyuan6_c0 = { 2{ 1'b1 }} ;
      fangyuan5_c0 = 0 ;
      casez (fangyuan6)
        2'b?1 :
          fangyuan5_c0 [0:0] = digest_valid_we_c ;
        2'b1? :
          fangyuan5_c0 [1:1] = digest_valid_we_c ;
      endcase
    end
  assign digest_update = _069_ ? 1'b1 : 1'b0;
  logic [1-1:0] _069__c2 ;
  logic [1-1:0] _069__r2 ;
  logic [1-1:0] _069__x2 ;
  logic [1-1:0] _069__r2_tmp ;
  assign _069__c2 = 1;
  assign _069__x2 = | digest_update_x ;
  assign _069__r2 = | _069__r2_tmp ;
  assign digest_update_t = { 1{ _069__t }} ;
  assign _069__r2_tmp = digest_update_r ;
  assign round_ctr_rst = _068_ ? _033_ : 1'b0;
  logic [1-1:0] _068__c3 ;
  logic [1-1:0] _068__r3 ;
  logic [1-1:0] _068__x3 ;
  logic [1-1:0] _068__r3_tmp ;
  assign _068__c3 = 1;
  assign _068__x3 = | round_ctr_rst_x ;
  assign _068__r3 = | _068__r3_tmp ;
  logic [1-1:0] _033__c3 ;
  logic [1-1:0] _033__r3 ;
  logic [1-1:0] _033__x3 ;
  assign _033__c3 = { 1{ _068_ }} ;
  assign _033__r3 = { 1{ _068_ }} & round_ctr_rst_r ;
  assign _033__x3 = round_ctr_rst_x ;
  assign round_ctr_rst_t = _068_ ? ( { 1{ _068__t }} | _033__t ) : { 1{ _068__t }};
  assign _068__r3_tmp = round_ctr_rst_r | ( { 1{ _068_ }} & _033__t );
  assign digest_init = _068_ ? _029_ : 1'b0;
  logic [1-1:0] _068__c4 ;
  logic [1-1:0] _068__r4 ;
  logic [1-1:0] _068__x4 ;
  logic [1-1:0] _068__r4_tmp ;
  assign _068__c4 = 1;
  assign _068__x4 = | digest_init_x ;
  assign _068__r4 = | _068__r4_tmp ;
  logic [1-1:0] _029__c1 ;
  logic [1-1:0] _029__r1 ;
  logic [1-1:0] _029__x1 ;
  assign _029__c1 = { 1{ _068_ }} ;
  assign _029__r1 = { 1{ _068_ }} & digest_init_r ;
  assign _029__x1 = digest_init_x ;
  assign digest_init_t = _068_ ? ( { 1{ _068__t }} | _029__t ) : { 1{ _068__t }};
  assign _068__r4_tmp = digest_init_r | ( { 1{ _068_ }} & _029__t );
  assign ready = _068_ ? 1'b1 : 1'b0;
  logic [1-1:0] _068__c5 ;
  logic [1-1:0] _068__r5 ;
  logic [1-1:0] _068__x5 ;
  logic [1-1:0] _068__r5_tmp ;
  assign _068__c5 = 1;
  assign _068__x5 = | ready_x ;
  assign _068__r5 = | _068__r5_tmp ;
  assign ready_t = { 1{ _068__t }} ;
  assign _068__r5_tmp = ready_r ;
  assign round_ctr_inc = _067_ ? 1'b1 : 1'b0;
  logic [1-1:0] _067__c2 ;
  logic [1-1:0] _067__r2 ;
  logic [1-1:0] _067__x2 ;
  logic [1-1:0] _067__r2_tmp ;
  assign _067__c2 = 1;
  assign _067__x2 = | round_ctr_inc_x ;
  assign _067__r2 = | _067__r2_tmp ;
  assign round_ctr_inc_t = { 1{ _067__t }} ;
  assign _067__r2_tmp = round_ctr_inc_r ;
  assign a_e_we = round_ctr_inc ? 1'b1 : _019_;
  logic [1-1:0] round_ctr_inc_c0 ;
  logic [1-1:0] round_ctr_inc_r0 ;
  logic [1-1:0] round_ctr_inc_x0 ;
  logic [1-1:0] round_ctr_inc_r0_tmp ;
  assign round_ctr_inc_c0 = 1;
  assign round_ctr_inc_x0 = | a_e_we_x ;
  assign round_ctr_inc_r0 = | round_ctr_inc_r0_tmp ;
  logic [1-1:0] _019__c0 ;
  logic [1-1:0] _019__r0 ;
  logic [1-1:0] _019__x0 ;
  assign _019__c0 = { 1{ !round_ctr_inc }};
  assign _019__r0 = { 1{ !round_ctr_inc }} & a_e_we_r ;
  assign _019__x0 = a_e_we_x ;
  assign a_e_we_t = round_ctr_inc ? { 1{ round_ctr_inc_t }} : ( { 1{ round_ctr_inc_t }} | _019__t );
  assign round_ctr_inc_r0_tmp = a_e_we_r | ( { 1{ !round_ctr_inc }} & _019__t );
  assign round_ctr_new = round_ctr_inc ? _051_ : 7'b0000000;
  logic [1-1:0] round_ctr_inc_c1 ;
  logic [1-1:0] round_ctr_inc_r1 ;
  logic [1-1:0] round_ctr_inc_x1 ;
  logic [7-1:0] round_ctr_inc_r1_tmp ;
  assign round_ctr_inc_c1 = 1;
  assign round_ctr_inc_x1 = | round_ctr_new_x ;
  assign round_ctr_inc_r1 = | round_ctr_inc_r1_tmp ;
  logic [7-1:0] _051__c0 ;
  logic [7-1:0] _051__r0 ;
  logic [7-1:0] _051__x0 ;
  assign _051__c0 = { 7{ round_ctr_inc }} ;
  assign _051__r0 = { 7{ round_ctr_inc }} & round_ctr_new_r ;
  assign _051__x0 = round_ctr_new_x ;
  assign round_ctr_new_t = round_ctr_inc ? ( { 7{ round_ctr_inc_t }} | _051__t ) : { 7{ round_ctr_inc_t }};
  assign round_ctr_inc_r1_tmp = round_ctr_new_r | ( { 7{ round_ctr_inc }} & _051__t );
  assign _019_ = round_ctr_rst ? 1'b1 : 1'b0;
  logic [1-1:0] round_ctr_rst_c0 ;
  logic [1-1:0] round_ctr_rst_r0 ;
  logic [1-1:0] round_ctr_rst_x0 ;
  logic [1-1:0] round_ctr_rst_r0_tmp ;
  assign round_ctr_rst_c0 = 1;
  assign round_ctr_rst_x0 = | _019__x ;
  assign round_ctr_rst_r0 = | round_ctr_rst_r0_tmp ;
  assign _019__t = { 1{ round_ctr_rst_t }} ;
  assign round_ctr_rst_r0_tmp = _019__r ;
  assign _040_ = _057_ ? _135_ : 32'd0;
  logic [1-1:0] _057__c0 ;
  logic [1-1:0] _057__r0 ;
  logic [1-1:0] _057__x0 ;
  logic [32-1:0] _057__r0_tmp ;
  assign _057__c0 = 1;
  assign _057__x0 = | _040__x ;
  assign _057__r0 = | _057__r0_tmp ;
  logic [32-1:0] _135__c0 ;
  logic [32-1:0] _135__r0 ;
  logic [32-1:0] _135__x0 ;
  assign _135__c0 = { 32{ _057_ }} ;
  assign _135__r0 = { 32{ _057_ }} & _040__r ;
  assign _135__x0 = _040__x ;
  assign _040__t = _057_ ? ( { 32{ _057__t }} | _135__t ) : { 32{ _057__t }};
  assign _057__r0_tmp = _040__r | ( { 32{ _057_ }} & _135__t );
  assign _041_ = _057_ ? 32'd3395469782 : 32'd0;
  logic [1-1:0] _057__c1 ;
  logic [1-1:0] _057__r1 ;
  logic [1-1:0] _057__x1 ;
  logic [32-1:0] _057__r1_tmp ;
  assign _057__c1 = 1;
  assign _057__x1 = | _041__x ;
  assign _057__r1 = | _057__r1_tmp ;
  assign _041__t = { 32{ _057__t }} ;
  assign _057__r1_tmp = _041__r ;
  assign _036_ = _062_ ? _137_ : _040_;
  logic [1-1:0] _062__c0 ;
  logic [1-1:0] _062__r0 ;
  logic [1-1:0] _062__x0 ;
  logic [32-1:0] _062__r0_tmp ;
  assign _062__c0 = 1;
  assign _062__x0 = | _036__x ;
  assign _062__r0 = | _062__r0_tmp ;
  assign _036__t = _062_ ? ( { 32{ _062__t }} | _137__t ) : ( { 32{ _062__t }} | _040__t );
  assign _062__r0_tmp = _036__r | ( { 32{ _062_ }} & _137__t | { 32{ !_062_ }} & _040__t );
  logic [32-1:0] _137__c0 ;
  logic [32-1:0] _137__r0 ;
  logic [32-1:0] _137__x0 ;
  assign _137__c0 = { 32{ _062_ }};
  assign _137__r0 = { 32{ _062_ }} & _036__r ;
  assign _137__x0 = _036__x ;
  logic [32-1:0] _040__c0 ;
  logic [32-1:0] _040__r0 ;
  logic [32-1:0] _040__x0 ;
  assign _040__c0 = { 32{ !_062_ }} ;
  assign _040__r0 = { 32{ !_062_ }} & _036__r ;
  assign _040__x0 = _036__x ;
  assign _037_ = _062_ ? 32'd2400959708 : _041_;
  logic [1-1:0] _062__c1 ;
  logic [1-1:0] _062__r1 ;
  logic [1-1:0] _062__x1 ;
  logic [32-1:0] _062__r1_tmp ;
  assign _062__c1 = 1;
  assign _062__x1 = | _037__x ;
  assign _062__r1 = | _062__r1_tmp ;
  logic [32-1:0] _041__c0 ;
  logic [32-1:0] _041__r0 ;
  logic [32-1:0] _041__x0 ;
  assign _041__c0 = { 32{ !_062_ }};
  assign _041__r0 = { 32{ !_062_ }} & _037__r ;
  assign _041__x0 = _037__x ;
  assign _037__t = _062_ ? { 32{ _062__t }} : ( { 32{ _062__t }} | _041__t );
  assign _062__r1_tmp = _037__r | ( { 32{ !_062_ }} & _041__t );
  assign _034_ = _061_ ? _135_ : _036_;
  logic [1-1:0] _061__c0 ;
  logic [1-1:0] _061__r0 ;
  logic [1-1:0] _061__x0 ;
  logic [32-1:0] _061__r0_tmp ;
  assign _061__c0 = 1;
  assign _061__x0 = | _034__x ;
  assign _061__r0 = | _061__r0_tmp ;
  assign _034__t = _061_ ? ( { 32{ _061__t }} | _135__t ) : ( { 32{ _061__t }} | _036__t );
  assign _061__r0_tmp = _034__r | ( { 32{ _061_ }} & _135__t | { 32{ !_061_ }} & _036__t );
  logic [32-1:0] _135__c1 ;
  logic [32-1:0] _135__r1 ;
  logic [32-1:0] _135__x1 ;
  assign _135__c1 = { 32{ _061_ }};
  assign _135__r1 = { 32{ _061_ }} & _034__r ;
  assign _135__x1 = _034__x ;
  logic [32-1:0] _036__c0 ;
  logic [32-1:0] _036__r0 ;
  logic [32-1:0] _036__x0 ;
  assign _036__c0 = { 32{ !_061_ }} ;
  assign _036__r0 = { 32{ !_061_ }} & _034__r ;
  assign _036__x0 = _034__x ;
  assign _035_ = _061_ ? 32'd1859775393 : _037_;
  logic [1-1:0] _061__c1 ;
  logic [1-1:0] _061__r1 ;
  logic [1-1:0] _061__x1 ;
  logic [32-1:0] _061__r1_tmp ;
  assign _061__c1 = 1;
  assign _061__x1 = | _035__x ;
  assign _061__r1 = | _061__r1_tmp ;
  logic [32-1:0] _037__c0 ;
  logic [32-1:0] _037__r0 ;
  logic [32-1:0] _037__x0 ;
  assign _037__c0 = { 32{ !_061_ }};
  assign _037__r0 = { 32{ !_061_ }} & _035__r ;
  assign _037__x0 = _035__x ;
  assign _035__t = _061_ ? { 32{ _061__t }} : ( { 32{ _061__t }} | _037__t );
  assign _061__r1_tmp = _035__r | ( { 32{ !_061_ }} & _037__t );
  assign _031_ = _058_ ? _133_ : _034_;
  logic [1-1:0] _058__c0 ;
  logic [1-1:0] _058__r0 ;
  logic [1-1:0] _058__x0 ;
  logic [32-1:0] _058__r0_tmp ;
  assign _058__c0 = 1;
  assign _058__x0 = | _031__x ;
  assign _058__r0 = | _058__r0_tmp ;
  assign _031__t = _058_ ? ( { 32{ _058__t }} | _133__t ) : ( { 32{ _058__t }} | _034__t );
  assign _058__r0_tmp = _031__r | ( { 32{ _058_ }} & _133__t | { 32{ !_058_ }} & _034__t );
  logic [32-1:0] _133__c0 ;
  logic [32-1:0] _133__r0 ;
  logic [32-1:0] _133__x0 ;
  assign _133__c0 = { 32{ _058_ }};
  assign _133__r0 = { 32{ _058_ }} & _031__r ;
  assign _133__x0 = _031__x ;
  logic [32-1:0] _034__c0 ;
  logic [32-1:0] _034__r0 ;
  logic [32-1:0] _034__x0 ;
  assign _034__c0 = { 32{ !_058_ }} ;
  assign _034__r0 = { 32{ !_058_ }} & _031__r ;
  assign _034__x0 = _031__x ;
  assign _032_ = _058_ ? 32'd1518500249 : _035_;
  logic [1-1:0] _058__c1 ;
  logic [1-1:0] _058__r1 ;
  logic [1-1:0] _058__x1 ;
  logic [32-1:0] _058__r1_tmp ;
  assign _058__c1 = 1;
  assign _058__x1 = | _032__x ;
  assign _058__r1 = | _058__r1_tmp ;
  logic [32-1:0] _035__c0 ;
  logic [32-1:0] _035__r0 ;
  logic [32-1:0] _035__x0 ;
  assign _035__c0 = { 32{ !_058_ }};
  assign _035__r0 = { 32{ !_058_ }} & _032__r ;
  assign _035__x0 = _032__x ;
  assign _032__t = _058_ ? { 32{ _058__t }} : ( { 32{ _058__t }} | _035__t );
  assign _058__r1_tmp = _032__r | ( { 32{ !_058_ }} & _035__t );
  assign e_new = round_ctr_inc ? d_reg : _024_;
  logic [1-1:0] round_ctr_inc_c2 ;
  logic [1-1:0] round_ctr_inc_r2 ;
  logic [1-1:0] round_ctr_inc_x2 ;
  logic [32-1:0] round_ctr_inc_r2_tmp ;
  assign round_ctr_inc_c2 = 1;
  assign round_ctr_inc_x2 = | e_new_x ;
  assign round_ctr_inc_r2 = | round_ctr_inc_r2_tmp ;
  assign e_new_t = round_ctr_inc ? ( { 32{ round_ctr_inc_t }} | d_reg_t ) : ( { 32{ round_ctr_inc_t }} | _024__t );
  assign round_ctr_inc_r2_tmp = e_new_r | ( { 32{ round_ctr_inc }} & d_reg_t | { 32{ !round_ctr_inc }} & _024__t );
  logic [32-1:0] d_reg_c4 ;
  logic [32-1:0] d_reg_r4 ;
  logic [32-1:0] d_reg_x4 ;
  assign d_reg_c4 = { 32{ round_ctr_inc }};
  assign d_reg_r4 = { 32{ round_ctr_inc }} & e_new_r ;
  assign d_reg_x4 = e_new_x ;
  logic [32-1:0] _024__c0 ;
  logic [32-1:0] _024__r0 ;
  logic [32-1:0] _024__x0 ;
  assign _024__c0 = { 32{ !round_ctr_inc }} ;
  assign _024__r0 = { 32{ !round_ctr_inc }} & e_new_r ;
  assign _024__x0 = e_new_x ;
  assign d_new = round_ctr_inc ? c_reg : _023_;
  logic [1-1:0] round_ctr_inc_c3 ;
  logic [1-1:0] round_ctr_inc_r3 ;
  logic [1-1:0] round_ctr_inc_x3 ;
  logic [32-1:0] round_ctr_inc_r3_tmp ;
  assign round_ctr_inc_c3 = 1;
  assign round_ctr_inc_x3 = | d_new_x ;
  assign round_ctr_inc_r3 = | round_ctr_inc_r3_tmp ;
  assign d_new_t = round_ctr_inc ? ( { 32{ round_ctr_inc_t }} | c_reg_t ) : ( { 32{ round_ctr_inc_t }} | _023__t );
  assign round_ctr_inc_r3_tmp = d_new_r | ( { 32{ round_ctr_inc }} & c_reg_t | { 32{ !round_ctr_inc }} & _023__t );
  logic [32-1:0] c_reg_c4 ;
  logic [32-1:0] c_reg_r4 ;
  logic [32-1:0] c_reg_x4 ;
  assign c_reg_c4 = { 32{ round_ctr_inc }};
  assign c_reg_r4 = { 32{ round_ctr_inc }} & d_new_r ;
  assign c_reg_x4 = d_new_x ;
  logic [32-1:0] _023__c0 ;
  logic [32-1:0] _023__r0 ;
  logic [32-1:0] _023__x0 ;
  assign _023__c0 = { 32{ !round_ctr_inc }} ;
  assign _023__r0 = { 32{ !round_ctr_inc }} & d_new_r ;
  assign _023__x0 = d_new_x ;
  logic [31:0] fangyuan7;
  logic [31:0] fangyuan7_t ;
  logic [31:0] fangyuan7_r ;
  logic [31:0] fangyuan7_c ;
  logic [31:0] fangyuan7_x ;
  assign fangyuan7 = { b_reg[1:0], b_reg[31:2] };
  assign fangyuan7_t = {  b_reg_t [1:0] , b_reg_t [31:2]  };
  logic [32-1:0] b_reg_r5 ;
  logic [32-1:0] b_reg_x5 ;
  logic [32-1:0] b_reg_c5 ;
  assign b_reg_r5 [1:0] = fangyuan7_r [31:30] ;
  assign b_reg_x5 [1:0] = fangyuan7_x [31:30] ;
  assign b_reg_c5 [1:0] = fangyuan7_c [31:30] ;
  assign b_reg_r5 [31:2] = 0;
  assign b_reg_x5 [31:2] = 0;
  assign b_reg_c5 [31:2] = 0;
  logic [32-1:0] b_reg_r6 ;
  logic [32-1:0] b_reg_x6 ;
  logic [32-1:0] b_reg_c6 ;
  assign b_reg_r6 [31:2] = fangyuan7_r [29:0] ;
  assign b_reg_x6 [31:2] = fangyuan7_x [29:0] ;
  assign b_reg_c6 [31:2] = fangyuan7_c [29:0] ;
  assign b_reg_r6 [1:0] = 0;
  assign b_reg_x6 [1:0] = 0;
  assign b_reg_c6 [1:0] = 0;
  assign c_new = round_ctr_inc ? fangyuan7 : _022_;
  logic [1-1:0] round_ctr_inc_c4 ;
  logic [1-1:0] round_ctr_inc_r4 ;
  logic [1-1:0] round_ctr_inc_x4 ;
  logic [32-1:0] round_ctr_inc_r4_tmp ;
  assign round_ctr_inc_c4 = 1;
  assign round_ctr_inc_x4 = | c_new_x ;
  assign round_ctr_inc_r4 = | round_ctr_inc_r4_tmp ;
  assign c_new_t = round_ctr_inc ? ( { 32{ round_ctr_inc_t }} | fangyuan7_t ) : ( { 32{ round_ctr_inc_t }} | _022__t );
  assign round_ctr_inc_r4_tmp = c_new_r | ( { 32{ round_ctr_inc }} & fangyuan7_t | { 32{ !round_ctr_inc }} & _022__t );
  logic [32-1:0] fangyuan7_c0 ;
  logic [32-1:0] fangyuan7_r0 ;
  logic [32-1:0] fangyuan7_x0 ;
  assign fangyuan7_c0 = { 32{ round_ctr_inc }};
  assign fangyuan7_r0 = { 32{ round_ctr_inc }} & c_new_r ;
  assign fangyuan7_x0 = c_new_x ;
  logic [32-1:0] _022__c0 ;
  logic [32-1:0] _022__r0 ;
  logic [32-1:0] _022__x0 ;
  assign _022__c0 = { 32{ !round_ctr_inc }} ;
  assign _022__r0 = { 32{ !round_ctr_inc }} & c_new_r ;
  assign _022__x0 = c_new_x ;
  assign b_new = round_ctr_inc ? a_reg : _021_;
  logic [1-1:0] round_ctr_inc_c5 ;
  logic [1-1:0] round_ctr_inc_r5 ;
  logic [1-1:0] round_ctr_inc_x5 ;
  logic [32-1:0] round_ctr_inc_r5_tmp ;
  assign round_ctr_inc_c5 = 1;
  assign round_ctr_inc_x5 = | b_new_x ;
  assign round_ctr_inc_r5 = | round_ctr_inc_r5_tmp ;
  assign b_new_t = round_ctr_inc ? ( { 32{ round_ctr_inc_t }} | a_reg_t ) : ( { 32{ round_ctr_inc_t }} | _021__t );
  assign round_ctr_inc_r5_tmp = b_new_r | ( { 32{ round_ctr_inc }} & a_reg_t | { 32{ !round_ctr_inc }} & _021__t );
  logic [32-1:0] a_reg_c3 ;
  logic [32-1:0] a_reg_r3 ;
  logic [32-1:0] a_reg_x3 ;
  assign a_reg_c3 = { 32{ round_ctr_inc }};
  assign a_reg_r3 = { 32{ round_ctr_inc }} & b_new_r ;
  assign a_reg_x3 = b_new_x ;
  logic [32-1:0] _021__c0 ;
  logic [32-1:0] _021__r0 ;
  logic [32-1:0] _021__x0 ;
  assign _021__c0 = { 32{ !round_ctr_inc }} ;
  assign _021__r0 = { 32{ !round_ctr_inc }} & b_new_r ;
  assign _021__x0 = b_new_x ;
  assign a_new = round_ctr_inc ? _050_ : _020_;
  logic [1-1:0] round_ctr_inc_c6 ;
  logic [1-1:0] round_ctr_inc_r6 ;
  logic [1-1:0] round_ctr_inc_x6 ;
  logic [32-1:0] round_ctr_inc_r6_tmp ;
  assign round_ctr_inc_c6 = 1;
  assign round_ctr_inc_x6 = | a_new_x ;
  assign round_ctr_inc_r6 = | round_ctr_inc_r6_tmp ;
  assign a_new_t = round_ctr_inc ? ( { 32{ round_ctr_inc_t }} | _050__t ) : ( { 32{ round_ctr_inc_t }} | _020__t );
  assign round_ctr_inc_r6_tmp = a_new_r | ( { 32{ round_ctr_inc }} & _050__t | { 32{ !round_ctr_inc }} & _020__t );
  logic [32-1:0] _050__c0 ;
  logic [32-1:0] _050__r0 ;
  logic [32-1:0] _050__x0 ;
  assign _050__c0 = { 32{ round_ctr_inc }};
  assign _050__r0 = { 32{ round_ctr_inc }} & a_new_r ;
  assign _050__x0 = a_new_x ;
  logic [32-1:0] _020__c0 ;
  logic [32-1:0] _020__r0 ;
  logic [32-1:0] _020__x0 ;
  assign _020__c0 = { 32{ !round_ctr_inc }} ;
  assign _020__r0 = { 32{ !round_ctr_inc }} & a_new_r ;
  assign _020__x0 = a_new_x ;
  assign _030_ = digest_init ? 32'd3285377520 : H4_reg;
  logic [1-1:0] digest_init_c0 ;
  logic [1-1:0] digest_init_r0 ;
  logic [1-1:0] digest_init_x0 ;
  logic [32-1:0] digest_init_r0_tmp ;
  assign digest_init_c0 = 1;
  assign digest_init_x0 = | _030__x ;
  assign digest_init_r0 = | digest_init_r0_tmp ;
  logic [32-1:0] H4_reg_c1 ;
  logic [32-1:0] H4_reg_r1 ;
  logic [32-1:0] H4_reg_x1 ;
  assign H4_reg_c1 = { 32{ !digest_init }};
  assign H4_reg_r1 = { 32{ !digest_init }} & _030__r ;
  assign H4_reg_x1 = _030__x ;
  assign _030__t = digest_init ? { 32{ digest_init_t }} : ( { 32{ digest_init_t }} | H4_reg_t );
  assign digest_init_r0_tmp = _030__r | ( { 32{ !digest_init }} & H4_reg_t );
  assign _028_ = digest_init ? 32'd271733878 : H3_reg;
  logic [1-1:0] digest_init_c1 ;
  logic [1-1:0] digest_init_r1 ;
  logic [1-1:0] digest_init_x1 ;
  logic [32-1:0] digest_init_r1_tmp ;
  assign digest_init_c1 = 1;
  assign digest_init_x1 = | _028__x ;
  assign digest_init_r1 = | digest_init_r1_tmp ;
  logic [32-1:0] H3_reg_c1 ;
  logic [32-1:0] H3_reg_r1 ;
  logic [32-1:0] H3_reg_x1 ;
  assign H3_reg_c1 = { 32{ !digest_init }};
  assign H3_reg_r1 = { 32{ !digest_init }} & _028__r ;
  assign H3_reg_x1 = _028__x ;
  assign _028__t = digest_init ? { 32{ digest_init_t }} : ( { 32{ digest_init_t }} | H3_reg_t );
  assign digest_init_r1_tmp = _028__r | ( { 32{ !digest_init }} & H3_reg_t );
  assign _027_ = digest_init ? 32'd2562383102 : H2_reg;
  logic [1-1:0] digest_init_c2 ;
  logic [1-1:0] digest_init_r2 ;
  logic [1-1:0] digest_init_x2 ;
  logic [32-1:0] digest_init_r2_tmp ;
  assign digest_init_c2 = 1;
  assign digest_init_x2 = | _027__x ;
  assign digest_init_r2 = | digest_init_r2_tmp ;
  logic [32-1:0] H2_reg_c1 ;
  logic [32-1:0] H2_reg_r1 ;
  logic [32-1:0] H2_reg_x1 ;
  assign H2_reg_c1 = { 32{ !digest_init }};
  assign H2_reg_r1 = { 32{ !digest_init }} & _027__r ;
  assign H2_reg_x1 = _027__x ;
  assign _027__t = digest_init ? { 32{ digest_init_t }} : ( { 32{ digest_init_t }} | H2_reg_t );
  assign digest_init_r2_tmp = _027__r | ( { 32{ !digest_init }} & H2_reg_t );
  assign _026_ = digest_init ? 32'd4023233417 : H1_reg;
  logic [1-1:0] digest_init_c3 ;
  logic [1-1:0] digest_init_r3 ;
  logic [1-1:0] digest_init_x3 ;
  logic [32-1:0] digest_init_r3_tmp ;
  assign digest_init_c3 = 1;
  assign digest_init_x3 = | _026__x ;
  assign digest_init_r3 = | digest_init_r3_tmp ;
  logic [32-1:0] H1_reg_c1 ;
  logic [32-1:0] H1_reg_r1 ;
  logic [32-1:0] H1_reg_x1 ;
  assign H1_reg_c1 = { 32{ !digest_init }};
  assign H1_reg_r1 = { 32{ !digest_init }} & _026__r ;
  assign H1_reg_x1 = _026__x ;
  assign _026__t = digest_init ? { 32{ digest_init_t }} : ( { 32{ digest_init_t }} | H1_reg_t );
  assign digest_init_r3_tmp = _026__r | ( { 32{ !digest_init }} & H1_reg_t );
  assign _025_ = digest_init ? 32'd1732584193 : H0_reg;
  logic [1-1:0] digest_init_c4 ;
  logic [1-1:0] digest_init_r4 ;
  logic [1-1:0] digest_init_x4 ;
  logic [32-1:0] digest_init_r4_tmp ;
  assign digest_init_c4 = 1;
  assign digest_init_x4 = | _025__x ;
  assign digest_init_r4 = | digest_init_r4_tmp ;
  logic [32-1:0] H0_reg_c1 ;
  logic [32-1:0] H0_reg_r1 ;
  logic [32-1:0] H0_reg_x1 ;
  assign H0_reg_c1 = { 32{ !digest_init }};
  assign H0_reg_r1 = { 32{ !digest_init }} & _025__r ;
  assign H0_reg_x1 = _025__x ;
  assign _025__t = digest_init ? { 32{ digest_init_t }} : ( { 32{ digest_init_t }} | H0_reg_t );
  assign digest_init_r4_tmp = _025__r | ( { 32{ !digest_init }} & H0_reg_t );
  assign _024_ = round_ctr_rst ? _030_ : 32'd0;
  logic [1-1:0] round_ctr_rst_c1 ;
  logic [1-1:0] round_ctr_rst_r1 ;
  logic [1-1:0] round_ctr_rst_x1 ;
  logic [32-1:0] round_ctr_rst_r1_tmp ;
  assign round_ctr_rst_c1 = 1;
  assign round_ctr_rst_x1 = | _024__x ;
  assign round_ctr_rst_r1 = | round_ctr_rst_r1_tmp ;
  logic [32-1:0] _030__c0 ;
  logic [32-1:0] _030__r0 ;
  logic [32-1:0] _030__x0 ;
  assign _030__c0 = { 32{ round_ctr_rst }} ;
  assign _030__r0 = { 32{ round_ctr_rst }} & _024__r ;
  assign _030__x0 = _024__x ;
  assign _024__t = round_ctr_rst ? ( { 32{ round_ctr_rst_t }} | _030__t ) : { 32{ round_ctr_rst_t }};
  assign round_ctr_rst_r1_tmp = _024__r | ( { 32{ round_ctr_rst }} & _030__t );
  assign _023_ = round_ctr_rst ? _028_ : 32'd0;
  logic [1-1:0] round_ctr_rst_c2 ;
  logic [1-1:0] round_ctr_rst_r2 ;
  logic [1-1:0] round_ctr_rst_x2 ;
  logic [32-1:0] round_ctr_rst_r2_tmp ;
  assign round_ctr_rst_c2 = 1;
  assign round_ctr_rst_x2 = | _023__x ;
  assign round_ctr_rst_r2 = | round_ctr_rst_r2_tmp ;
  logic [32-1:0] _028__c0 ;
  logic [32-1:0] _028__r0 ;
  logic [32-1:0] _028__x0 ;
  assign _028__c0 = { 32{ round_ctr_rst }} ;
  assign _028__r0 = { 32{ round_ctr_rst }} & _023__r ;
  assign _028__x0 = _023__x ;
  assign _023__t = round_ctr_rst ? ( { 32{ round_ctr_rst_t }} | _028__t ) : { 32{ round_ctr_rst_t }};
  assign round_ctr_rst_r2_tmp = _023__r | ( { 32{ round_ctr_rst }} & _028__t );
  assign _022_ = round_ctr_rst ? _027_ : 32'd0;
  logic [1-1:0] round_ctr_rst_c3 ;
  logic [1-1:0] round_ctr_rst_r3 ;
  logic [1-1:0] round_ctr_rst_x3 ;
  logic [32-1:0] round_ctr_rst_r3_tmp ;
  assign round_ctr_rst_c3 = 1;
  assign round_ctr_rst_x3 = | _022__x ;
  assign round_ctr_rst_r3 = | round_ctr_rst_r3_tmp ;
  logic [32-1:0] _027__c0 ;
  logic [32-1:0] _027__r0 ;
  logic [32-1:0] _027__x0 ;
  assign _027__c0 = { 32{ round_ctr_rst }} ;
  assign _027__r0 = { 32{ round_ctr_rst }} & _022__r ;
  assign _027__x0 = _022__x ;
  assign _022__t = round_ctr_rst ? ( { 32{ round_ctr_rst_t }} | _027__t ) : { 32{ round_ctr_rst_t }};
  assign round_ctr_rst_r3_tmp = _022__r | ( { 32{ round_ctr_rst }} & _027__t );
  assign _021_ = round_ctr_rst ? _026_ : 32'd0;
  logic [1-1:0] round_ctr_rst_c4 ;
  logic [1-1:0] round_ctr_rst_r4 ;
  logic [1-1:0] round_ctr_rst_x4 ;
  logic [32-1:0] round_ctr_rst_r4_tmp ;
  assign round_ctr_rst_c4 = 1;
  assign round_ctr_rst_x4 = | _021__x ;
  assign round_ctr_rst_r4 = | round_ctr_rst_r4_tmp ;
  logic [32-1:0] _026__c0 ;
  logic [32-1:0] _026__r0 ;
  logic [32-1:0] _026__x0 ;
  assign _026__c0 = { 32{ round_ctr_rst }} ;
  assign _026__r0 = { 32{ round_ctr_rst }} & _021__r ;
  assign _026__x0 = _021__x ;
  assign _021__t = round_ctr_rst ? ( { 32{ round_ctr_rst_t }} | _026__t ) : { 32{ round_ctr_rst_t }};
  assign round_ctr_rst_r4_tmp = _021__r | ( { 32{ round_ctr_rst }} & _026__t );
  assign _020_ = round_ctr_rst ? _025_ : 32'd0;
  logic [1-1:0] round_ctr_rst_c5 ;
  logic [1-1:0] round_ctr_rst_r5 ;
  logic [1-1:0] round_ctr_rst_x5 ;
  logic [32-1:0] round_ctr_rst_r5_tmp ;
  assign round_ctr_rst_c5 = 1;
  assign round_ctr_rst_x5 = | _020__x ;
  assign round_ctr_rst_r5 = | round_ctr_rst_r5_tmp ;
  logic [32-1:0] _025__c0 ;
  logic [32-1:0] _025__r0 ;
  logic [32-1:0] _025__x0 ;
  assign _025__c0 = { 32{ round_ctr_rst }} ;
  assign _025__r0 = { 32{ round_ctr_rst }} & _020__r ;
  assign _025__x0 = _020__x ;
  assign _020__t = round_ctr_rst ? ( { 32{ round_ctr_rst_t }} | _025__t ) : { 32{ round_ctr_rst_t }};
  assign round_ctr_rst_r5_tmp = _020__r | ( { 32{ round_ctr_rst }} & _025__t );
  assign H_we = digest_update ? 1'b1 : _018_;
  logic [1-1:0] digest_update_c0 ;
  logic [1-1:0] digest_update_r0 ;
  logic [1-1:0] digest_update_x0 ;
  logic [1-1:0] digest_update_r0_tmp ;
  assign digest_update_c0 = 1;
  assign digest_update_x0 = | H_we_x ;
  assign digest_update_r0 = | digest_update_r0_tmp ;
  logic [1-1:0] _018__c0 ;
  logic [1-1:0] _018__r0 ;
  logic [1-1:0] _018__x0 ;
  assign _018__c0 = { 1{ !digest_update }};
  assign _018__r0 = { 1{ !digest_update }} & H_we_r ;
  assign _018__x0 = H_we_x ;
  assign H_we_t = digest_update ? { 1{ digest_update_t }} : ( { 1{ digest_update_t }} | _018__t );
  assign digest_update_r0_tmp = H_we_r | ( { 1{ !digest_update }} & _018__t );
  assign H4_new = digest_update ? _046_ : _017_;
  logic [1-1:0] digest_update_c1 ;
  logic [1-1:0] digest_update_r1 ;
  logic [1-1:0] digest_update_x1 ;
  logic [32-1:0] digest_update_r1_tmp ;
  assign digest_update_c1 = 1;
  assign digest_update_x1 = | H4_new_x ;
  assign digest_update_r1 = | digest_update_r1_tmp ;
  assign H4_new_t = digest_update ? ( { 32{ digest_update_t }} | _046__t ) : ( { 32{ digest_update_t }} | _017__t );
  assign digest_update_r1_tmp = H4_new_r | ( { 32{ digest_update }} & _046__t | { 32{ !digest_update }} & _017__t );
  logic [32-1:0] _046__c0 ;
  logic [32-1:0] _046__r0 ;
  logic [32-1:0] _046__x0 ;
  assign _046__c0 = { 32{ digest_update }};
  assign _046__r0 = { 32{ digest_update }} & H4_new_r ;
  assign _046__x0 = H4_new_x ;
  logic [32-1:0] _017__c0 ;
  logic [32-1:0] _017__r0 ;
  logic [32-1:0] _017__x0 ;
  assign _017__c0 = { 32{ !digest_update }} ;
  assign _017__r0 = { 32{ !digest_update }} & H4_new_r ;
  assign _017__x0 = H4_new_x ;
  logic [31:0] fangyuan8;
  logic [31:0] fangyuan8_t ;
  logic [31:0] fangyuan8_r ;
  logic [31:0] fangyuan8_c ;
  logic [31:0] fangyuan8_x ;
  assign fangyuan8 = { 3'b000, _016_ };
  assign fangyuan8_t = {  3'h0 , _016__t  };
  logic [29-1:0] _016__r0 ;
  logic [29-1:0] _016__x0 ;
  logic [29-1:0] _016__c0 ;
  assign _016__r0 = fangyuan8_r [28:0] ;
  assign _016__x0 = fangyuan8_x [28:0] ;
  assign _016__c0 = fangyuan8_c [28:0] ;
  assign H3_new = digest_update ? _045_ : fangyuan8;
  logic [1-1:0] digest_update_c2 ;
  logic [1-1:0] digest_update_r2 ;
  logic [1-1:0] digest_update_x2 ;
  logic [32-1:0] digest_update_r2_tmp ;
  assign digest_update_c2 = 1;
  assign digest_update_x2 = | H3_new_x ;
  assign digest_update_r2 = | digest_update_r2_tmp ;
  assign H3_new_t = digest_update ? ( { 32{ digest_update_t }} | _045__t ) : ( { 32{ digest_update_t }} | fangyuan8_t );
  assign digest_update_r2_tmp = H3_new_r | ( { 32{ digest_update }} & _045__t | { 32{ !digest_update }} & fangyuan8_t );
  logic [32-1:0] _045__c0 ;
  logic [32-1:0] _045__r0 ;
  logic [32-1:0] _045__x0 ;
  assign _045__c0 = { 32{ digest_update }};
  assign _045__r0 = { 32{ digest_update }} & H3_new_r ;
  assign _045__x0 = H3_new_x ;
  logic [32-1:0] fangyuan8_c0 ;
  logic [32-1:0] fangyuan8_r0 ;
  logic [32-1:0] fangyuan8_x0 ;
  assign fangyuan8_c0 = { 32{ !digest_update }} ;
  assign fangyuan8_r0 = { 32{ !digest_update }} & H3_new_r ;
  assign fangyuan8_x0 = H3_new_x ;
  assign H2_new = digest_update ? _044_ : _015_;
  logic [1-1:0] digest_update_c3 ;
  logic [1-1:0] digest_update_r3 ;
  logic [1-1:0] digest_update_x3 ;
  logic [32-1:0] digest_update_r3_tmp ;
  assign digest_update_c3 = 1;
  assign digest_update_x3 = | H2_new_x ;
  assign digest_update_r3 = | digest_update_r3_tmp ;
  assign H2_new_t = digest_update ? ( { 32{ digest_update_t }} | _044__t ) : ( { 32{ digest_update_t }} | _015__t );
  assign digest_update_r3_tmp = H2_new_r | ( { 32{ digest_update }} & _044__t | { 32{ !digest_update }} & _015__t );
  logic [32-1:0] _044__c0 ;
  logic [32-1:0] _044__r0 ;
  logic [32-1:0] _044__x0 ;
  assign _044__c0 = { 32{ digest_update }};
  assign _044__r0 = { 32{ digest_update }} & H2_new_r ;
  assign _044__x0 = H2_new_x ;
  logic [32-1:0] _015__c0 ;
  logic [32-1:0] _015__r0 ;
  logic [32-1:0] _015__x0 ;
  assign _015__c0 = { 32{ !digest_update }} ;
  assign _015__r0 = { 32{ !digest_update }} & H2_new_r ;
  assign _015__x0 = H2_new_x ;
  assign H1_new = digest_update ? _043_ : _014_;
  logic [1-1:0] digest_update_c4 ;
  logic [1-1:0] digest_update_r4 ;
  logic [1-1:0] digest_update_x4 ;
  logic [32-1:0] digest_update_r4_tmp ;
  assign digest_update_c4 = 1;
  assign digest_update_x4 = | H1_new_x ;
  assign digest_update_r4 = | digest_update_r4_tmp ;
  assign H1_new_t = digest_update ? ( { 32{ digest_update_t }} | _043__t ) : ( { 32{ digest_update_t }} | _014__t );
  assign digest_update_r4_tmp = H1_new_r | ( { 32{ digest_update }} & _043__t | { 32{ !digest_update }} & _014__t );
  logic [32-1:0] _043__c0 ;
  logic [32-1:0] _043__r0 ;
  logic [32-1:0] _043__x0 ;
  assign _043__c0 = { 32{ digest_update }};
  assign _043__r0 = { 32{ digest_update }} & H1_new_r ;
  assign _043__x0 = H1_new_x ;
  logic [32-1:0] _014__c0 ;
  logic [32-1:0] _014__r0 ;
  logic [32-1:0] _014__x0 ;
  assign _014__c0 = { 32{ !digest_update }} ;
  assign _014__r0 = { 32{ !digest_update }} & H1_new_r ;
  assign _014__x0 = H1_new_x ;
  logic [31:0] fangyuan9;
  logic [31:0] fangyuan9_t ;
  logic [31:0] fangyuan9_r ;
  logic [31:0] fangyuan9_c ;
  logic [31:0] fangyuan9_x ;
  assign fangyuan9 = { 1'b0, _013_ };
  assign fangyuan9_t = {  1'h0 , _013__t  };
  logic [31-1:0] _013__r0 ;
  logic [31-1:0] _013__x0 ;
  logic [31-1:0] _013__c0 ;
  assign _013__r0 = fangyuan9_r [30:0] ;
  assign _013__x0 = fangyuan9_x [30:0] ;
  assign _013__c0 = fangyuan9_c [30:0] ;
  assign H0_new = digest_update ? _042_ : fangyuan9;
  logic [1-1:0] digest_update_c5 ;
  logic [1-1:0] digest_update_r5 ;
  logic [1-1:0] digest_update_x5 ;
  logic [32-1:0] digest_update_r5_tmp ;
  assign digest_update_c5 = 1;
  assign digest_update_x5 = | H0_new_x ;
  assign digest_update_r5 = | digest_update_r5_tmp ;
  assign H0_new_t = digest_update ? ( { 32{ digest_update_t }} | _042__t ) : ( { 32{ digest_update_t }} | fangyuan9_t );
  assign digest_update_r5_tmp = H0_new_r | ( { 32{ digest_update }} & _042__t | { 32{ !digest_update }} & fangyuan9_t );
  logic [32-1:0] _042__c0 ;
  logic [32-1:0] _042__r0 ;
  logic [32-1:0] _042__x0 ;
  assign _042__c0 = { 32{ digest_update }};
  assign _042__r0 = { 32{ digest_update }} & H0_new_r ;
  assign _042__x0 = H0_new_x ;
  logic [32-1:0] fangyuan9_c0 ;
  logic [32-1:0] fangyuan9_r0 ;
  logic [32-1:0] fangyuan9_x0 ;
  assign fangyuan9_c0 = { 32{ !digest_update }} ;
  assign fangyuan9_r0 = { 32{ !digest_update }} & H0_new_r ;
  assign fangyuan9_x0 = H0_new_x ;
  assign _018_ = digest_init ? 1'b1 : 1'b0;
  logic [1-1:0] digest_init_c5 ;
  logic [1-1:0] digest_init_r5 ;
  logic [1-1:0] digest_init_x5 ;
  logic [1-1:0] digest_init_r5_tmp ;
  assign digest_init_c5 = 1;
  assign digest_init_x5 = | _018__x ;
  assign digest_init_r5 = | digest_init_r5_tmp ;
  assign _018__t = { 1{ digest_init_t }} ;
  assign digest_init_r5_tmp = _018__r ;
  assign _017_ = digest_init ? 32'd3285377520 : 32'd0;
  logic [1-1:0] digest_init_c6 ;
  logic [1-1:0] digest_init_r6 ;
  logic [1-1:0] digest_init_x6 ;
  logic [32-1:0] digest_init_r6_tmp ;
  assign digest_init_c6 = 1;
  assign digest_init_x6 = | _017__x ;
  assign digest_init_r6 = | digest_init_r6_tmp ;
  assign _017__t = { 32{ digest_init_t }} ;
  assign digest_init_r6_tmp = _017__r ;
  assign _016_ = digest_init ? 29'b10000001100100101010001110110 : 29'b00000000000000000000000000000;
  logic [1-1:0] digest_init_c7 ;
  logic [1-1:0] digest_init_r7 ;
  logic [1-1:0] digest_init_x7 ;
  logic [29-1:0] digest_init_r7_tmp ;
  assign digest_init_c7 = 1;
  assign digest_init_x7 = | _016__x ;
  assign digest_init_r7 = | digest_init_r7_tmp ;
  assign _016__t = { 29{ digest_init_t }} ;
  assign digest_init_r7_tmp = _016__r ;
  assign _015_ = digest_init ? 32'd2562383102 : 32'd0;
  logic [1-1:0] digest_init_c8 ;
  logic [1-1:0] digest_init_r8 ;
  logic [1-1:0] digest_init_x8 ;
  logic [32-1:0] digest_init_r8_tmp ;
  assign digest_init_c8 = 1;
  assign digest_init_x8 = | _015__x ;
  assign digest_init_r8 = | digest_init_r8_tmp ;
  assign _015__t = { 32{ digest_init_t }} ;
  assign digest_init_r8_tmp = _015__r ;
  assign _014_ = digest_init ? 32'd4023233417 : 32'd0;
  logic [1-1:0] digest_init_c9 ;
  logic [1-1:0] digest_init_r9 ;
  logic [1-1:0] digest_init_x9 ;
  logic [32-1:0] digest_init_r9_tmp ;
  assign digest_init_c9 = 1;
  assign digest_init_x9 = | _014__x ;
  assign digest_init_r9 = | digest_init_r9_tmp ;
  assign _014__t = { 32{ digest_init_t }} ;
  assign digest_init_r9_tmp = _014__r ;
  assign _013_ = digest_init ? 31'b1100111010001010010001100000001 : 31'b0000000000000000000000000000000;
  logic [1-1:0] digest_init_c10 ;
  logic [1-1:0] digest_init_r10 ;
  logic [1-1:0] digest_init_x10 ;
  logic [31-1:0] digest_init_r10_tmp ;
  assign digest_init_c10 = 1;
  assign digest_init_x10 = | _013__x ;
  assign digest_init_r10 = | digest_init_r10_tmp ;
  assign _013__t = { 31{ digest_init_t }} ;
  assign digest_init_r10_tmp = _013__r ;
  assign _012_ = sha1_ctrl_we ? sha1_ctrl_new : sha1_ctrl_reg;
  logic [1-1:0] sha1_ctrl_we_c0 ;
  logic [1-1:0] sha1_ctrl_we_r0 ;
  logic [1-1:0] sha1_ctrl_we_x0 ;
  logic [2-1:0] sha1_ctrl_we_r0_tmp ;
  assign sha1_ctrl_we_c0 = 1;
  assign sha1_ctrl_we_x0 = | _012__x ;
  assign sha1_ctrl_we_r0 = | sha1_ctrl_we_r0_tmp ;
  assign _012__t = sha1_ctrl_we ? ( { 2{ sha1_ctrl_we_t }} | sha1_ctrl_new_t ) : ( { 2{ sha1_ctrl_we_t }} | sha1_ctrl_reg_t );
  assign sha1_ctrl_we_r0_tmp = _012__r | ( { 2{ sha1_ctrl_we }} & sha1_ctrl_new_t | { 2{ !sha1_ctrl_we }} & sha1_ctrl_reg_t );
  logic [2-1:0] sha1_ctrl_new_c0 ;
  logic [2-1:0] sha1_ctrl_new_r0 ;
  logic [2-1:0] sha1_ctrl_new_x0 ;
  assign sha1_ctrl_new_c0 = { 2{ sha1_ctrl_we }};
  assign sha1_ctrl_new_r0 = { 2{ sha1_ctrl_we }} & _012__r ;
  assign sha1_ctrl_new_x0 = _012__x ;
  logic [2-1:0] sha1_ctrl_reg_c3 ;
  logic [2-1:0] sha1_ctrl_reg_r3 ;
  logic [2-1:0] sha1_ctrl_reg_x3 ;
  assign sha1_ctrl_reg_c3 = { 2{ !sha1_ctrl_we }} ;
  assign sha1_ctrl_reg_r3 = { 2{ !sha1_ctrl_we }} & _012__r ;
  assign sha1_ctrl_reg_x3 = _012__x ;
  assign _009_ = digest_valid_we ? digest_update : digest_valid_reg;
  logic [1-1:0] digest_valid_we_c0 ;
  logic [1-1:0] digest_valid_we_r0 ;
  logic [1-1:0] digest_valid_we_x0 ;
  logic [1-1:0] digest_valid_we_r0_tmp ;
  assign digest_valid_we_c0 = 1;
  assign digest_valid_we_x0 = | _009__x ;
  assign digest_valid_we_r0 = | digest_valid_we_r0_tmp ;
  assign _009__t = digest_valid_we ? ( { 1{ digest_valid_we_t }} | digest_update_t ) : ( { 1{ digest_valid_we_t }} | digest_valid_reg_t );
  assign digest_valid_we_r0_tmp = _009__r | ( { 1{ digest_valid_we }} & digest_update_t | { 1{ !digest_valid_we }} & digest_valid_reg_t );
  logic [1-1:0] digest_update_c6 ;
  logic [1-1:0] digest_update_r6 ;
  logic [1-1:0] digest_update_x6 ;
  assign digest_update_c6 = { 1{ digest_valid_we }};
  assign digest_update_r6 = { 1{ digest_valid_we }} & _009__r ;
  assign digest_update_x6 = _009__x ;
  logic [1-1:0] digest_valid_reg_c0 ;
  logic [1-1:0] digest_valid_reg_r0 ;
  logic [1-1:0] digest_valid_reg_x0 ;
  assign digest_valid_reg_c0 = { 1{ !digest_valid_we }} ;
  assign digest_valid_reg_r0 = { 1{ !digest_valid_we }} & _009__r ;
  assign digest_valid_reg_x0 = _009__x ;
  assign _011_ = a_e_we ? round_ctr_new : round_ctr_reg;
  logic [1-1:0] a_e_we_c0 ;
  logic [1-1:0] a_e_we_r0 ;
  logic [1-1:0] a_e_we_x0 ;
  logic [7-1:0] a_e_we_r0_tmp ;
  assign a_e_we_c0 = 1;
  assign a_e_we_x0 = | _011__x ;
  assign a_e_we_r0 = | a_e_we_r0_tmp ;
  assign _011__t = a_e_we ? ( { 7{ a_e_we_t }} | round_ctr_new_t ) : ( { 7{ a_e_we_t }} | round_ctr_reg_t );
  assign a_e_we_r0_tmp = _011__r | ( { 7{ a_e_we }} & round_ctr_new_t | { 7{ !a_e_we }} & round_ctr_reg_t );
  logic [7-1:0] round_ctr_new_c0 ;
  logic [7-1:0] round_ctr_new_r0 ;
  logic [7-1:0] round_ctr_new_x0 ;
  assign round_ctr_new_c0 = { 7{ a_e_we }};
  assign round_ctr_new_r0 = { 7{ a_e_we }} & _011__r ;
  assign round_ctr_new_x0 = _011__x ;
  logic [7-1:0] round_ctr_reg_c8 ;
  logic [7-1:0] round_ctr_reg_r8 ;
  logic [7-1:0] round_ctr_reg_x8 ;
  assign round_ctr_reg_c8 = { 7{ !a_e_we }} ;
  assign round_ctr_reg_r8 = { 7{ !a_e_we }} & _011__r ;
  assign round_ctr_reg_x8 = _011__x ;
  assign _004_ = H_we ? H4_new : H4_reg;
  logic [1-1:0] H_we_c0 ;
  logic [1-1:0] H_we_r0 ;
  logic [1-1:0] H_we_x0 ;
  logic [32-1:0] H_we_r0_tmp ;
  assign H_we_c0 = 1;
  assign H_we_x0 = | _004__x ;
  assign H_we_r0 = | H_we_r0_tmp ;
  assign _004__t = H_we ? ( { 32{ H_we_t }} | H4_new_t ) : ( { 32{ H_we_t }} | H4_reg_t );
  assign H_we_r0_tmp = _004__r | ( { 32{ H_we }} & H4_new_t | { 32{ !H_we }} & H4_reg_t );
  logic [32-1:0] H4_new_c0 ;
  logic [32-1:0] H4_new_r0 ;
  logic [32-1:0] H4_new_x0 ;
  assign H4_new_c0 = { 32{ H_we }};
  assign H4_new_r0 = { 32{ H_we }} & _004__r ;
  assign H4_new_x0 = _004__x ;
  logic [32-1:0] H4_reg_c2 ;
  logic [32-1:0] H4_reg_r2 ;
  logic [32-1:0] H4_reg_x2 ;
  assign H4_reg_c2 = { 32{ !H_we }} ;
  assign H4_reg_r2 = { 32{ !H_we }} & _004__r ;
  assign H4_reg_x2 = _004__x ;
  assign _003_ = H_we ? H3_new : H3_reg;
  logic [1-1:0] H_we_c1 ;
  logic [1-1:0] H_we_r1 ;
  logic [1-1:0] H_we_x1 ;
  logic [32-1:0] H_we_r1_tmp ;
  assign H_we_c1 = 1;
  assign H_we_x1 = | _003__x ;
  assign H_we_r1 = | H_we_r1_tmp ;
  assign _003__t = H_we ? ( { 32{ H_we_t }} | H3_new_t ) : ( { 32{ H_we_t }} | H3_reg_t );
  assign H_we_r1_tmp = _003__r | ( { 32{ H_we }} & H3_new_t | { 32{ !H_we }} & H3_reg_t );
  logic [32-1:0] H3_new_c0 ;
  logic [32-1:0] H3_new_r0 ;
  logic [32-1:0] H3_new_x0 ;
  assign H3_new_c0 = { 32{ H_we }};
  assign H3_new_r0 = { 32{ H_we }} & _003__r ;
  assign H3_new_x0 = _003__x ;
  logic [32-1:0] H3_reg_c2 ;
  logic [32-1:0] H3_reg_r2 ;
  logic [32-1:0] H3_reg_x2 ;
  assign H3_reg_c2 = { 32{ !H_we }} ;
  assign H3_reg_r2 = { 32{ !H_we }} & _003__r ;
  assign H3_reg_x2 = _003__x ;
  assign _002_ = H_we ? H2_new : H2_reg;
  logic [1-1:0] H_we_c2 ;
  logic [1-1:0] H_we_r2 ;
  logic [1-1:0] H_we_x2 ;
  logic [32-1:0] H_we_r2_tmp ;
  assign H_we_c2 = 1;
  assign H_we_x2 = | _002__x ;
  assign H_we_r2 = | H_we_r2_tmp ;
  assign _002__t = H_we ? ( { 32{ H_we_t }} | H2_new_t ) : ( { 32{ H_we_t }} | H2_reg_t );
  assign H_we_r2_tmp = _002__r | ( { 32{ H_we }} & H2_new_t | { 32{ !H_we }} & H2_reg_t );
  logic [32-1:0] H2_new_c0 ;
  logic [32-1:0] H2_new_r0 ;
  logic [32-1:0] H2_new_x0 ;
  assign H2_new_c0 = { 32{ H_we }};
  assign H2_new_r0 = { 32{ H_we }} & _002__r ;
  assign H2_new_x0 = _002__x ;
  logic [32-1:0] H2_reg_c2 ;
  logic [32-1:0] H2_reg_r2 ;
  logic [32-1:0] H2_reg_x2 ;
  assign H2_reg_c2 = { 32{ !H_we }} ;
  assign H2_reg_r2 = { 32{ !H_we }} & _002__r ;
  assign H2_reg_x2 = _002__x ;
  assign _001_ = H_we ? H1_new : H1_reg;
  logic [1-1:0] H_we_c3 ;
  logic [1-1:0] H_we_r3 ;
  logic [1-1:0] H_we_x3 ;
  logic [32-1:0] H_we_r3_tmp ;
  assign H_we_c3 = 1;
  assign H_we_x3 = | _001__x ;
  assign H_we_r3 = | H_we_r3_tmp ;
  assign _001__t = H_we ? ( { 32{ H_we_t }} | H1_new_t ) : ( { 32{ H_we_t }} | H1_reg_t );
  assign H_we_r3_tmp = _001__r | ( { 32{ H_we }} & H1_new_t | { 32{ !H_we }} & H1_reg_t );
  logic [32-1:0] H1_new_c0 ;
  logic [32-1:0] H1_new_r0 ;
  logic [32-1:0] H1_new_x0 ;
  assign H1_new_c0 = { 32{ H_we }};
  assign H1_new_r0 = { 32{ H_we }} & _001__r ;
  assign H1_new_x0 = _001__x ;
  logic [32-1:0] H1_reg_c2 ;
  logic [32-1:0] H1_reg_r2 ;
  logic [32-1:0] H1_reg_x2 ;
  assign H1_reg_c2 = { 32{ !H_we }} ;
  assign H1_reg_r2 = { 32{ !H_we }} & _001__r ;
  assign H1_reg_x2 = _001__x ;
  assign _000_ = H_we ? H0_new : H0_reg;
  logic [1-1:0] H_we_c4 ;
  logic [1-1:0] H_we_r4 ;
  logic [1-1:0] H_we_x4 ;
  logic [32-1:0] H_we_r4_tmp ;
  assign H_we_c4 = 1;
  assign H_we_x4 = | _000__x ;
  assign H_we_r4 = | H_we_r4_tmp ;
  assign _000__t = H_we ? ( { 32{ H_we_t }} | H0_new_t ) : ( { 32{ H_we_t }} | H0_reg_t );
  assign H_we_r4_tmp = _000__r | ( { 32{ H_we }} & H0_new_t | { 32{ !H_we }} & H0_reg_t );
  logic [32-1:0] H0_new_c0 ;
  logic [32-1:0] H0_new_r0 ;
  logic [32-1:0] H0_new_x0 ;
  assign H0_new_c0 = { 32{ H_we }};
  assign H0_new_r0 = { 32{ H_we }} & _000__r ;
  assign H0_new_x0 = _000__x ;
  logic [32-1:0] H0_reg_c2 ;
  logic [32-1:0] H0_reg_r2 ;
  logic [32-1:0] H0_reg_x2 ;
  assign H0_reg_c2 = { 32{ !H_we }} ;
  assign H0_reg_r2 = { 32{ !H_we }} & _000__r ;
  assign H0_reg_x2 = _000__x ;
  assign _010_ = a_e_we ? e_new : e_reg;
  logic [1-1:0] a_e_we_c1 ;
  logic [1-1:0] a_e_we_r1 ;
  logic [1-1:0] a_e_we_x1 ;
  logic [32-1:0] a_e_we_r1_tmp ;
  assign a_e_we_c1 = 1;
  assign a_e_we_x1 = | _010__x ;
  assign a_e_we_r1 = | a_e_we_r1_tmp ;
  assign _010__t = a_e_we ? ( { 32{ a_e_we_t }} | e_new_t ) : ( { 32{ a_e_we_t }} | e_reg_t );
  assign a_e_we_r1_tmp = _010__r | ( { 32{ a_e_we }} & e_new_t | { 32{ !a_e_we }} & e_reg_t );
  logic [32-1:0] e_new_c0 ;
  logic [32-1:0] e_new_r0 ;
  logic [32-1:0] e_new_x0 ;
  assign e_new_c0 = { 32{ a_e_we }};
  assign e_new_r0 = { 32{ a_e_we }} & _010__r ;
  assign e_new_x0 = _010__x ;
  logic [32-1:0] e_reg_c2 ;
  logic [32-1:0] e_reg_r2 ;
  logic [32-1:0] e_reg_x2 ;
  assign e_reg_c2 = { 32{ !a_e_we }} ;
  assign e_reg_r2 = { 32{ !a_e_we }} & _010__r ;
  assign e_reg_x2 = _010__x ;
  assign _008_ = a_e_we ? d_new : d_reg;
  logic [1-1:0] a_e_we_c2 ;
  logic [1-1:0] a_e_we_r2 ;
  logic [1-1:0] a_e_we_x2 ;
  logic [32-1:0] a_e_we_r2_tmp ;
  assign a_e_we_c2 = 1;
  assign a_e_we_x2 = | _008__x ;
  assign a_e_we_r2 = | a_e_we_r2_tmp ;
  assign _008__t = a_e_we ? ( { 32{ a_e_we_t }} | d_new_t ) : ( { 32{ a_e_we_t }} | d_reg_t );
  assign a_e_we_r2_tmp = _008__r | ( { 32{ a_e_we }} & d_new_t | { 32{ !a_e_we }} & d_reg_t );
  logic [32-1:0] d_new_c0 ;
  logic [32-1:0] d_new_r0 ;
  logic [32-1:0] d_new_x0 ;
  assign d_new_c0 = { 32{ a_e_we }};
  assign d_new_r0 = { 32{ a_e_we }} & _008__r ;
  assign d_new_x0 = _008__x ;
  logic [32-1:0] d_reg_c5 ;
  logic [32-1:0] d_reg_r5 ;
  logic [32-1:0] d_reg_x5 ;
  assign d_reg_c5 = { 32{ !a_e_we }} ;
  assign d_reg_r5 = { 32{ !a_e_we }} & _008__r ;
  assign d_reg_x5 = _008__x ;
  assign _007_ = a_e_we ? c_new : c_reg;
  logic [1-1:0] a_e_we_c3 ;
  logic [1-1:0] a_e_we_r3 ;
  logic [1-1:0] a_e_we_x3 ;
  logic [32-1:0] a_e_we_r3_tmp ;
  assign a_e_we_c3 = 1;
  assign a_e_we_x3 = | _007__x ;
  assign a_e_we_r3 = | a_e_we_r3_tmp ;
  assign _007__t = a_e_we ? ( { 32{ a_e_we_t }} | c_new_t ) : ( { 32{ a_e_we_t }} | c_reg_t );
  assign a_e_we_r3_tmp = _007__r | ( { 32{ a_e_we }} & c_new_t | { 32{ !a_e_we }} & c_reg_t );
  logic [32-1:0] c_new_c0 ;
  logic [32-1:0] c_new_r0 ;
  logic [32-1:0] c_new_x0 ;
  assign c_new_c0 = { 32{ a_e_we }};
  assign c_new_r0 = { 32{ a_e_we }} & _007__r ;
  assign c_new_x0 = _007__x ;
  logic [32-1:0] c_reg_c5 ;
  logic [32-1:0] c_reg_r5 ;
  logic [32-1:0] c_reg_x5 ;
  assign c_reg_c5 = { 32{ !a_e_we }} ;
  assign c_reg_r5 = { 32{ !a_e_we }} & _007__r ;
  assign c_reg_x5 = _007__x ;
  assign _006_ = a_e_we ? b_new : b_reg;
  logic [1-1:0] a_e_we_c4 ;
  logic [1-1:0] a_e_we_r4 ;
  logic [1-1:0] a_e_we_x4 ;
  logic [32-1:0] a_e_we_r4_tmp ;
  assign a_e_we_c4 = 1;
  assign a_e_we_x4 = | _006__x ;
  assign a_e_we_r4 = | a_e_we_r4_tmp ;
  assign _006__t = a_e_we ? ( { 32{ a_e_we_t }} | b_new_t ) : ( { 32{ a_e_we_t }} | b_reg_t );
  assign a_e_we_r4_tmp = _006__r | ( { 32{ a_e_we }} & b_new_t | { 32{ !a_e_we }} & b_reg_t );
  logic [32-1:0] b_new_c0 ;
  logic [32-1:0] b_new_r0 ;
  logic [32-1:0] b_new_x0 ;
  assign b_new_c0 = { 32{ a_e_we }};
  assign b_new_r0 = { 32{ a_e_we }} & _006__r ;
  assign b_new_x0 = _006__x ;
  logic [32-1:0] b_reg_c7 ;
  logic [32-1:0] b_reg_r7 ;
  logic [32-1:0] b_reg_x7 ;
  assign b_reg_c7 = { 32{ !a_e_we }} ;
  assign b_reg_r7 = { 32{ !a_e_we }} & _006__r ;
  assign b_reg_x7 = _006__x ;
  assign _005_ = a_e_we ? a_new : a_reg;
  logic [1-1:0] a_e_we_c5 ;
  logic [1-1:0] a_e_we_r5 ;
  logic [1-1:0] a_e_we_x5 ;
  logic [32-1:0] a_e_we_r5_tmp ;
  assign a_e_we_c5 = 1;
  assign a_e_we_x5 = | _005__x ;
  assign a_e_we_r5 = | a_e_we_r5_tmp ;
  assign _005__t = a_e_we ? ( { 32{ a_e_we_t }} | a_new_t ) : ( { 32{ a_e_we_t }} | a_reg_t );
  assign a_e_we_r5_tmp = _005__r | ( { 32{ a_e_we }} & a_new_t | { 32{ !a_e_we }} & a_reg_t );
  logic [32-1:0] a_new_c0 ;
  logic [32-1:0] a_new_r0 ;
  logic [32-1:0] a_new_x0 ;
  assign a_new_c0 = { 32{ a_e_we }};
  assign a_new_r0 = { 32{ a_e_we }} & _005__r ;
  assign a_new_x0 = _005__x ;
  logic [32-1:0] a_reg_c4 ;
  logic [32-1:0] a_reg_r4 ;
  logic [32-1:0] a_reg_x4 ;
  assign a_reg_c4 = { 32{ !a_e_we }} ;
  assign a_reg_r4 = { 32{ !a_e_we }} & _005__r ;
  assign a_reg_x4 = _005__x ;
  assign _110_ = \w_mem_inst.w_ctr_reg + 1'b1;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_c0 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_r0 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_x0 ;
  assign _110__t = \w_mem_inst.w_ctr_reg_t ;
  assign \w_mem_inst.w_ctr_reg_c0 = _110__c ;
  assign \w_mem_inst.w_ctr_reg_r0 = _110__r ;
  assign \w_mem_inst.w_ctr_reg_x0 = _110__x ;
  assign _111_ = \w_mem_inst.w_ctr_reg == 7'b1001111;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_c1 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_r1 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_x1 ;
  assign _111__t = \w_mem_inst.w_ctr_reg_t ;
  assign \w_mem_inst.w_ctr_reg_c1 = { 7{ _111__c }} ;
  assign \w_mem_inst.w_ctr_reg_r1 = { 7{ _111__r }} ;
  assign \w_mem_inst.w_ctr_reg_x1 = { 7{ _111__x }} ;
  assign _112_ = \w_mem_inst.w_ctr_reg > 4'b1111;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_c2 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_r2 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_x2 ;
  assign _112__t = \w_mem_inst.w_ctr_reg_t ;
  assign \w_mem_inst.w_ctr_reg_c2 = { 7{ _112__c }} ;
  assign \w_mem_inst.w_ctr_reg_r2 = { 7{ _112__r }} ;
  assign \w_mem_inst.w_ctr_reg_x2 = { 7{ _112__x }} ;
  assign _113_ = \w_mem_inst.w_ctr_reg < 5'b10000;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_c3 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_r3 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_x3 ;
  assign _113__t = \w_mem_inst.w_ctr_reg_t ;
  assign \w_mem_inst.w_ctr_reg_c3 = { 7{ _113__c }} ;
  assign \w_mem_inst.w_ctr_reg_r3 = { 7{ _113__r }} ;
  assign \w_mem_inst.w_ctr_reg_x3 = { 7{ _113__x }} ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_ctr_reg <= 7'b0000000;
    else
      \w_mem_inst.w_ctr_reg <= _071_;
  logic [7-1:0] _071__x0 ;
  logic [7-1:0] _071__r0 ;
  logic [7-1:0] _071__c0 ;
  assign _071__x0 = { 7{ \w_mem_inst.w_ctr_reg != _071_ }} | { 7{ \w_mem_inst.w_ctr_reg_reset }} ;
  assign _071__r0 = 0 ;
  assign _071__c0 = 0 ;
  always @( posedge clk )
      \w_mem_inst.w_ctr_reg_t 		<= !reset_n ? 0 : | ( _071__t & _071__x0 );
  always @( posedge clk )
      \w_mem_inst.w_ctr_reg_t_flag 	<= !reset_n ? 0 : \w_mem_inst.w_ctr_reg_t_flag ? 1 : | ( _071__t & _071__x0 );
  always @( posedge clk )
      \w_mem_inst.w_ctr_reg_r_flag 	<= !reset_n ? 0 : \w_mem_inst.w_ctr_reg_r_flag ? 1 : \w_mem_inst.w_ctr_reg_t_flag ? 0 : | \w_mem_inst.w_ctr_reg_r ;
  always @( posedge clk )
      \w_mem_inst.w_ctr_reg_reset 	<= !reset_n ? 1 : (_071__t & _071__x0) ? 0 : \w_mem_inst.w_ctr_reg_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.sha1_w_mem_ctrl_reg <= 1'b0;
    else
      \w_mem_inst.sha1_w_mem_ctrl_reg <= _070_;
  logic [1-1:0] _070__x0 ;
  logic [1-1:0] _070__r0 ;
  logic [1-1:0] _070__c0 ;
  assign _070__x0 = { 1{ \w_mem_inst.sha1_w_mem_ctrl_reg != _070_ }} | { 1{ \w_mem_inst.sha1_w_mem_ctrl_reg_reset }} ;
  assign _070__r0 = 0 ;
  assign _070__c0 = 0 ;
  always @( posedge clk )
      \w_mem_inst.sha1_w_mem_ctrl_reg_t 		<= !reset_n ? 0 : | ( _070__t & _070__x0 );
  always @( posedge clk )
      \w_mem_inst.sha1_w_mem_ctrl_reg_t_flag 	<= !reset_n ? 0 : \w_mem_inst.sha1_w_mem_ctrl_reg_t_flag ? 1 : | ( _070__t & _070__x0 );
  always @( posedge clk )
      \w_mem_inst.sha1_w_mem_ctrl_reg_r_flag 	<= !reset_n ? 0 : \w_mem_inst.sha1_w_mem_ctrl_reg_r_flag ? 1 : \w_mem_inst.sha1_w_mem_ctrl_reg_t_flag ? 0 : | \w_mem_inst.sha1_w_mem_ctrl_reg_r ;
  always @( posedge clk )
      \w_mem_inst.sha1_w_mem_ctrl_reg_reset 	<= !reset_n ? 1 : (_070__t & _070__x0) ? 0 : \w_mem_inst.sha1_w_mem_ctrl_reg_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[0] <= 32'd0;
    else
      \w_mem_inst.w_mem[0] <= _072_;
  logic [32-1:0] _072__x0 ;
  logic [32-1:0] _072__r0 ;
  logic [32-1:0] _072__c0 ;
  assign _072__x0 = { 32{ \w_mem_inst.w_mem[0] != _072_ }} | { 32{ \w_mem_inst.w_mem[0]_reset }} ;
  assign _072__r0 = 0 ;
  assign _072__c0 = 0 ;
  always @( posedge clk )
      \w_mem_inst.w_mem[0]_t 		<= !reset_n ? 0 : | ( _072__t & _072__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[0]_t_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[0]_t_flag ? 1 : | ( _072__t & _072__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[0]_r_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[0]_r_flag ? 1 : \w_mem_inst.w_mem[0]_t_flag ? 0 : | \w_mem_inst.w_mem[0]_r ;
  always @( posedge clk )
      \w_mem_inst.w_mem[0]_reset 	<= !reset_n ? 1 : (_072__t & _072__x0) ? 0 : \w_mem_inst.w_mem[0]_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[1] <= 32'd0;
    else
      \w_mem_inst.w_mem[1] <= _079_;
  logic [32-1:0] _079__x0 ;
  logic [32-1:0] _079__r0 ;
  logic [32-1:0] _079__c0 ;
  assign _079__x0 = { 32{ \w_mem_inst.w_mem[1] != _079_ }} | { 32{ \w_mem_inst.w_mem[1]_reset }} ;
  assign _079__r0 = 0 ;
  assign _079__c0 = 0 ;
  always @( posedge clk )
      \w_mem_inst.w_mem[1]_t 		<= !reset_n ? 0 : | ( _079__t & _079__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[1]_t_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[1]_t_flag ? 1 : | ( _079__t & _079__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[1]_r_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[1]_r_flag ? 1 : \w_mem_inst.w_mem[1]_t_flag ? 0 : | \w_mem_inst.w_mem[1]_r ;
  always @( posedge clk )
      \w_mem_inst.w_mem[1]_reset 	<= !reset_n ? 1 : (_079__t & _079__x0) ? 0 : \w_mem_inst.w_mem[1]_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[2] <= 32'd0;
    else
      \w_mem_inst.w_mem[2] <= _080_;
  logic [32-1:0] _080__x0 ;
  logic [32-1:0] _080__r0 ;
  logic [32-1:0] _080__c0 ;
  assign _080__x0 = { 32{ \w_mem_inst.w_mem[2] != _080_ }} | { 32{ \w_mem_inst.w_mem[2]_reset }} ;
  assign _080__r0 = 0 ;
  assign _080__c0 = 0 ;
  always @( posedge clk )
      \w_mem_inst.w_mem[2]_t 		<= !reset_n ? 0 : | ( _080__t & _080__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[2]_t_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[2]_t_flag ? 1 : | ( _080__t & _080__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[2]_r_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[2]_r_flag ? 1 : \w_mem_inst.w_mem[2]_t_flag ? 0 : | \w_mem_inst.w_mem[2]_r ;
  always @( posedge clk )
      \w_mem_inst.w_mem[2]_reset 	<= !reset_n ? 1 : (_080__t & _080__x0) ? 0 : \w_mem_inst.w_mem[2]_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[3] <= 32'd0;
    else
      \w_mem_inst.w_mem[3] <= _081_;
  logic [32-1:0] _081__x0 ;
  logic [32-1:0] _081__r0 ;
  logic [32-1:0] _081__c0 ;
  assign _081__x0 = { 32{ \w_mem_inst.w_mem[3] != _081_ }} | { 32{ \w_mem_inst.w_mem[3]_reset }} ;
  assign _081__r0 = 0 ;
  assign _081__c0 = 0 ;
  always @( posedge clk )
      \w_mem_inst.w_mem[3]_t 		<= !reset_n ? 0 : | ( _081__t & _081__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[3]_t_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[3]_t_flag ? 1 : | ( _081__t & _081__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[3]_r_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[3]_r_flag ? 1 : \w_mem_inst.w_mem[3]_t_flag ? 0 : | \w_mem_inst.w_mem[3]_r ;
  always @( posedge clk )
      \w_mem_inst.w_mem[3]_reset 	<= !reset_n ? 1 : (_081__t & _081__x0) ? 0 : \w_mem_inst.w_mem[3]_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[4] <= 32'd0;
    else
      \w_mem_inst.w_mem[4] <= _082_;
  logic [32-1:0] _082__x0 ;
  logic [32-1:0] _082__r0 ;
  logic [32-1:0] _082__c0 ;
  assign _082__x0 = { 32{ \w_mem_inst.w_mem[4] != _082_ }} | { 32{ \w_mem_inst.w_mem[4]_reset }} ;
  assign _082__r0 = 0 ;
  assign _082__c0 = 0 ;
  always @( posedge clk )
      \w_mem_inst.w_mem[4]_t 		<= !reset_n ? 0 : | ( _082__t & _082__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[4]_t_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[4]_t_flag ? 1 : | ( _082__t & _082__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[4]_r_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[4]_r_flag ? 1 : \w_mem_inst.w_mem[4]_t_flag ? 0 : | \w_mem_inst.w_mem[4]_r ;
  always @( posedge clk )
      \w_mem_inst.w_mem[4]_reset 	<= !reset_n ? 1 : (_082__t & _082__x0) ? 0 : \w_mem_inst.w_mem[4]_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[5] <= 32'd0;
    else
      \w_mem_inst.w_mem[5] <= _083_;
  logic [32-1:0] _083__x0 ;
  logic [32-1:0] _083__r0 ;
  logic [32-1:0] _083__c0 ;
  assign _083__x0 = { 32{ \w_mem_inst.w_mem[5] != _083_ }} | { 32{ \w_mem_inst.w_mem[5]_reset }} ;
  assign _083__r0 = 0 ;
  assign _083__c0 = 0 ;
  always @( posedge clk )
      \w_mem_inst.w_mem[5]_t 		<= !reset_n ? 0 : | ( _083__t & _083__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[5]_t_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[5]_t_flag ? 1 : | ( _083__t & _083__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[5]_r_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[5]_r_flag ? 1 : \w_mem_inst.w_mem[5]_t_flag ? 0 : | \w_mem_inst.w_mem[5]_r ;
  always @( posedge clk )
      \w_mem_inst.w_mem[5]_reset 	<= !reset_n ? 1 : (_083__t & _083__x0) ? 0 : \w_mem_inst.w_mem[5]_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[6] <= 32'd0;
    else
      \w_mem_inst.w_mem[6] <= _084_;
  logic [32-1:0] _084__x0 ;
  logic [32-1:0] _084__r0 ;
  logic [32-1:0] _084__c0 ;
  assign _084__x0 = { 32{ \w_mem_inst.w_mem[6] != _084_ }} | { 32{ \w_mem_inst.w_mem[6]_reset }} ;
  assign _084__r0 = 0 ;
  assign _084__c0 = 0 ;
  always @( posedge clk )
      \w_mem_inst.w_mem[6]_t 		<= !reset_n ? 0 : | ( _084__t & _084__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[6]_t_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[6]_t_flag ? 1 : | ( _084__t & _084__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[6]_r_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[6]_r_flag ? 1 : \w_mem_inst.w_mem[6]_t_flag ? 0 : | \w_mem_inst.w_mem[6]_r ;
  always @( posedge clk )
      \w_mem_inst.w_mem[6]_reset 	<= !reset_n ? 1 : (_084__t & _084__x0) ? 0 : \w_mem_inst.w_mem[6]_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[7] <= 32'd0;
    else
      \w_mem_inst.w_mem[7] <= _085_;
  logic [32-1:0] _085__x0 ;
  logic [32-1:0] _085__r0 ;
  logic [32-1:0] _085__c0 ;
  assign _085__x0 = { 32{ \w_mem_inst.w_mem[7] != _085_ }} | { 32{ \w_mem_inst.w_mem[7]_reset }} ;
  assign _085__r0 = 0 ;
  assign _085__c0 = 0 ;
  always @( posedge clk )
      \w_mem_inst.w_mem[7]_t 		<= !reset_n ? 0 : | ( _085__t & _085__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[7]_t_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[7]_t_flag ? 1 : | ( _085__t & _085__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[7]_r_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[7]_r_flag ? 1 : \w_mem_inst.w_mem[7]_t_flag ? 0 : | \w_mem_inst.w_mem[7]_r ;
  always @( posedge clk )
      \w_mem_inst.w_mem[7]_reset 	<= !reset_n ? 1 : (_085__t & _085__x0) ? 0 : \w_mem_inst.w_mem[7]_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[8] <= 32'd0;
    else
      \w_mem_inst.w_mem[8] <= _086_;
  logic [32-1:0] _086__x0 ;
  logic [32-1:0] _086__r0 ;
  logic [32-1:0] _086__c0 ;
  assign _086__x0 = { 32{ \w_mem_inst.w_mem[8] != _086_ }} | { 32{ \w_mem_inst.w_mem[8]_reset }} ;
  assign _086__r0 = 0 ;
  assign _086__c0 = 0 ;
  always @( posedge clk )
      \w_mem_inst.w_mem[8]_t 		<= !reset_n ? 0 : | ( _086__t & _086__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[8]_t_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[8]_t_flag ? 1 : | ( _086__t & _086__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[8]_r_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[8]_r_flag ? 1 : \w_mem_inst.w_mem[8]_t_flag ? 0 : | \w_mem_inst.w_mem[8]_r ;
  always @( posedge clk )
      \w_mem_inst.w_mem[8]_reset 	<= !reset_n ? 1 : (_086__t & _086__x0) ? 0 : \w_mem_inst.w_mem[8]_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[9] <= 32'd0;
    else
      \w_mem_inst.w_mem[9] <= _087_;
  logic [32-1:0] _087__x0 ;
  logic [32-1:0] _087__r0 ;
  logic [32-1:0] _087__c0 ;
  assign _087__x0 = { 32{ \w_mem_inst.w_mem[9] != _087_ }} | { 32{ \w_mem_inst.w_mem[9]_reset }} ;
  assign _087__r0 = 0 ;
  assign _087__c0 = 0 ;
  always @( posedge clk )
      \w_mem_inst.w_mem[9]_t 		<= !reset_n ? 0 : | ( _087__t & _087__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[9]_t_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[9]_t_flag ? 1 : | ( _087__t & _087__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[9]_r_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[9]_r_flag ? 1 : \w_mem_inst.w_mem[9]_t_flag ? 0 : | \w_mem_inst.w_mem[9]_r ;
  always @( posedge clk )
      \w_mem_inst.w_mem[9]_reset 	<= !reset_n ? 1 : (_087__t & _087__x0) ? 0 : \w_mem_inst.w_mem[9]_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[10] <= 32'd0;
    else
      \w_mem_inst.w_mem[10] <= _073_;
  logic [32-1:0] _073__x0 ;
  logic [32-1:0] _073__r0 ;
  logic [32-1:0] _073__c0 ;
  assign _073__x0 = { 32{ \w_mem_inst.w_mem[10] != _073_ }} | { 32{ \w_mem_inst.w_mem[10]_reset }} ;
  assign _073__r0 = 0 ;
  assign _073__c0 = 0 ;
  always @( posedge clk )
      \w_mem_inst.w_mem[10]_t 		<= !reset_n ? 0 : | ( _073__t & _073__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[10]_t_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[10]_t_flag ? 1 : | ( _073__t & _073__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[10]_r_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[10]_r_flag ? 1 : \w_mem_inst.w_mem[10]_t_flag ? 0 : | \w_mem_inst.w_mem[10]_r ;
  always @( posedge clk )
      \w_mem_inst.w_mem[10]_reset 	<= !reset_n ? 1 : (_073__t & _073__x0) ? 0 : \w_mem_inst.w_mem[10]_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[11] <= 32'd0;
    else
      \w_mem_inst.w_mem[11] <= _074_;
  logic [32-1:0] _074__x0 ;
  logic [32-1:0] _074__r0 ;
  logic [32-1:0] _074__c0 ;
  assign _074__x0 = { 32{ \w_mem_inst.w_mem[11] != _074_ }} | { 32{ \w_mem_inst.w_mem[11]_reset }} ;
  assign _074__r0 = 0 ;
  assign _074__c0 = 0 ;
  always @( posedge clk )
      \w_mem_inst.w_mem[11]_t 		<= !reset_n ? 0 : | ( _074__t & _074__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[11]_t_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[11]_t_flag ? 1 : | ( _074__t & _074__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[11]_r_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[11]_r_flag ? 1 : \w_mem_inst.w_mem[11]_t_flag ? 0 : | \w_mem_inst.w_mem[11]_r ;
  always @( posedge clk )
      \w_mem_inst.w_mem[11]_reset 	<= !reset_n ? 1 : (_074__t & _074__x0) ? 0 : \w_mem_inst.w_mem[11]_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[12] <= 32'd0;
    else
      \w_mem_inst.w_mem[12] <= _075_;
  logic [32-1:0] _075__x0 ;
  logic [32-1:0] _075__r0 ;
  logic [32-1:0] _075__c0 ;
  assign _075__x0 = { 32{ \w_mem_inst.w_mem[12] != _075_ }} | { 32{ \w_mem_inst.w_mem[12]_reset }} ;
  assign _075__r0 = 0 ;
  assign _075__c0 = 0 ;
  always @( posedge clk )
      \w_mem_inst.w_mem[12]_t 		<= !reset_n ? 0 : | ( _075__t & _075__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[12]_t_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[12]_t_flag ? 1 : | ( _075__t & _075__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[12]_r_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[12]_r_flag ? 1 : \w_mem_inst.w_mem[12]_t_flag ? 0 : | \w_mem_inst.w_mem[12]_r ;
  always @( posedge clk )
      \w_mem_inst.w_mem[12]_reset 	<= !reset_n ? 1 : (_075__t & _075__x0) ? 0 : \w_mem_inst.w_mem[12]_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[13] <= 32'd0;
    else
      \w_mem_inst.w_mem[13] <= _076_;
  logic [32-1:0] _076__x0 ;
  logic [32-1:0] _076__r0 ;
  logic [32-1:0] _076__c0 ;
  assign _076__x0 = { 32{ \w_mem_inst.w_mem[13] != _076_ }} | { 32{ \w_mem_inst.w_mem[13]_reset }} ;
  assign _076__r0 = 0 ;
  assign _076__c0 = 0 ;
  always @( posedge clk )
      \w_mem_inst.w_mem[13]_t 		<= !reset_n ? 0 : | ( _076__t & _076__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[13]_t_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[13]_t_flag ? 1 : | ( _076__t & _076__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[13]_r_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[13]_r_flag ? 1 : \w_mem_inst.w_mem[13]_t_flag ? 0 : | \w_mem_inst.w_mem[13]_r ;
  always @( posedge clk )
      \w_mem_inst.w_mem[13]_reset 	<= !reset_n ? 1 : (_076__t & _076__x0) ? 0 : \w_mem_inst.w_mem[13]_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[14] <= 32'd0;
    else
      \w_mem_inst.w_mem[14] <= _077_;
  logic [32-1:0] _077__x0 ;
  logic [32-1:0] _077__r0 ;
  logic [32-1:0] _077__c0 ;
  assign _077__x0 = { 32{ \w_mem_inst.w_mem[14] != _077_ }} | { 32{ \w_mem_inst.w_mem[14]_reset }} ;
  assign _077__r0 = 0 ;
  assign _077__c0 = 0 ;
  always @( posedge clk )
      \w_mem_inst.w_mem[14]_t 		<= !reset_n ? 0 : | ( _077__t & _077__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[14]_t_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[14]_t_flag ? 1 : | ( _077__t & _077__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[14]_r_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[14]_r_flag ? 1 : \w_mem_inst.w_mem[14]_t_flag ? 0 : | \w_mem_inst.w_mem[14]_r ;
  always @( posedge clk )
      \w_mem_inst.w_mem[14]_reset 	<= !reset_n ? 1 : (_077__t & _077__x0) ? 0 : \w_mem_inst.w_mem[14]_reset ;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem_inst.w_mem[15] <= 32'd0;
    else
      \w_mem_inst.w_mem[15] <= _078_;
  logic [32-1:0] _078__x0 ;
  logic [32-1:0] _078__r0 ;
  logic [32-1:0] _078__c0 ;
  assign _078__x0 = { 32{ \w_mem_inst.w_mem[15] != _078_ }} | { 32{ \w_mem_inst.w_mem[15]_reset }} ;
  assign _078__r0 = 0 ;
  assign _078__c0 = 0 ;
  always @( posedge clk )
      \w_mem_inst.w_mem[15]_t 		<= !reset_n ? 0 : | ( _078__t & _078__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[15]_t_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[15]_t_flag ? 1 : | ( _078__t & _078__x0 );
  always @( posedge clk )
      \w_mem_inst.w_mem[15]_r_flag 	<= !reset_n ? 0 : \w_mem_inst.w_mem[15]_r_flag ? 1 : \w_mem_inst.w_mem[15]_t_flag ? 0 : | \w_mem_inst.w_mem[15]_r ;
  always @( posedge clk )
      \w_mem_inst.w_mem[15]_reset 	<= !reset_n ? 1 : (_078__t & _078__x0) ? 0 : \w_mem_inst.w_mem[15]_reset ;
  assign _109_ = _111_ ? 1'b1 : 1'b0;
  logic [1-1:0] _111__c0 ;
  logic [1-1:0] _111__r0 ;
  logic [1-1:0] _111__x0 ;
  logic [1-1:0] _111__r0_tmp ;
  assign _111__c0 = 1;
  assign _111__x0 = | _109__x ;
  assign _111__r0 = | _111__r0_tmp ;
  assign _109__t = { 1{ _111__t }} ;
  assign _111__r0_tmp = _109__r ;
  assign _091_ = round_ctr_inc ? 1'b1 : 1'b0;
  logic [1-1:0] round_ctr_inc_c7 ;
  logic [1-1:0] round_ctr_inc_r7 ;
  logic [1-1:0] round_ctr_inc_x7 ;
  logic [1-1:0] round_ctr_inc_r7_tmp ;
  assign round_ctr_inc_c7 = 1;
  assign round_ctr_inc_x7 = | _091__x ;
  assign round_ctr_inc_r7 = | round_ctr_inc_r7_tmp ;
  assign _091__t = { 1{ round_ctr_inc_t }} ;
  assign round_ctr_inc_r7_tmp = _091__r ;
  assign _090_ = round_ctr_rst ? 1'b1 : 1'b0;
  logic [1-1:0] round_ctr_rst_c6 ;
  logic [1-1:0] round_ctr_rst_r6 ;
  logic [1-1:0] round_ctr_rst_x6 ;
  logic [1-1:0] round_ctr_rst_r6_tmp ;
  assign round_ctr_rst_c6 = 1;
  assign round_ctr_rst_x6 = | _090__x ;
  assign round_ctr_rst_r6 = | round_ctr_rst_r6_tmp ;
  assign _090__t = { 1{ round_ctr_rst_t }} ;
  assign round_ctr_rst_r6_tmp = _090__r ;
  logic [1:0] fangyuan10;
  logic [1:0] fangyuan10_t ;
  logic [1:0] fangyuan10_r ;
  logic [1:0] fangyuan10_c ;
  logic [1:0] fangyuan10_x ;
  assign fangyuan10 = { _090_, _109_ };
  assign fangyuan10_t = {  _090__t , _109__t  };
  logic [1-1:0] _090__r0 ;
  logic [1-1:0] _090__x0 ;
  logic [1-1:0] _090__c0 ;
  assign _090__r0 = fangyuan10_r [1:1] ;
  assign _090__x0 = fangyuan10_x [1:1] ;
  assign _090__c0 = fangyuan10_c [1:1] ;
  logic [1-1:0] _109__r0 ;
  logic [1-1:0] _109__x0 ;
  logic [1-1:0] _109__c0 ;
  assign _109__r0 = fangyuan10_r [0:0] ;
  assign _109__x0 = fangyuan10_x [0:0] ;
  assign _109__c0 = fangyuan10_c [0:0] ;
  logic [1:0] fangyuan11;
  logic [1:0] fangyuan11_t ;
  logic [1:0] fangyuan11_r ;
  logic [1:0] fangyuan11_c ;
  logic [1:0] fangyuan11_x ;
  assign fangyuan11 = { _114_, \w_mem_inst.sha1_w_mem_ctrl_reg };
  assign fangyuan11_t = {  _114__t , \w_mem_inst.sha1_w_mem_ctrl_reg_t  };
  logic [1-1:0] _114__r0 ;
  logic [1-1:0] _114__x0 ;
  logic [1-1:0] _114__c0 ;
  assign _114__r0 = fangyuan11_r [1:1] ;
  assign _114__x0 = fangyuan11_x [1:1] ;
  assign _114__c0 = fangyuan11_c [1:1] ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_reg_r0 ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_reg_x0 ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_reg_c0 ;
  assign \w_mem_inst.sha1_w_mem_ctrl_reg_r0 = fangyuan11_r [0:0] ;
  assign \w_mem_inst.sha1_w_mem_ctrl_reg_x0 = fangyuan11_x [0:0] ;
  assign \w_mem_inst.sha1_w_mem_ctrl_reg_c0 = fangyuan11_c [0:0] ;
  always @(1'bx or fangyuan10 or fangyuan11) begin
    casez (fangyuan11)
      2'b?1 :
        \w_mem_inst.sha1_w_mem_ctrl_we = fangyuan10 [0:0] ;
      2'b1? :
        \w_mem_inst.sha1_w_mem_ctrl_we = fangyuan10 [1:1] ;
      default:
        \w_mem_inst.sha1_w_mem_ctrl_we = 1'bx ;
    endcase
  end
    always @( fangyuan10_t or fangyuan11_t or fangyuan11 ) begin
      casez (fangyuan11)
        2'b?1 :
          \w_mem_inst.sha1_w_mem_ctrl_we_t = fangyuan10_t  [0:0] | { 1{ | fangyuan11_t }} ;
        2'b1? :
          \w_mem_inst.sha1_w_mem_ctrl_we_t = fangyuan10_t  [1:1] | { 1{ | fangyuan11_t }} ;
        default:
          \w_mem_inst.sha1_w_mem_ctrl_we_t = { 1{ | fangyuan11_t }} ;
      endcase
    end
    reg [2-1:0] fangyuan11_r0 ;
    reg [2-1:0] fangyuan11_x0 ;
    reg [2-1:0] fangyuan11_c0 ;
    reg [2-1:0] fangyuan10_r0 ;
    reg [2-1:0] fangyuan10_x0 ;
    reg [2-1:0] fangyuan10_c0 ;
    always @( \w_mem_inst.sha1_w_mem_ctrl_we_r or fangyuan11 ) begin
      fangyuan11_r0 = { 2{ | \w_mem_inst.sha1_w_mem_ctrl_we_r }} ;
      fangyuan10_r0 = 0 ;
      casez (fangyuan11)
        2'b?1 :
          fangyuan10_r0 [0:0] = \w_mem_inst.sha1_w_mem_ctrl_we_r ;
        2'b1? :
          fangyuan10_r0 [1:1] = \w_mem_inst.sha1_w_mem_ctrl_we_r ;
      endcase
    end
    always @( \w_mem_inst.sha1_w_mem_ctrl_we_x or fangyuan11 ) begin
      fangyuan11_x0 = { 2{ | \w_mem_inst.sha1_w_mem_ctrl_we_x }} ;
      fangyuan10_x0 = 0 ;
      casez (fangyuan11)
        2'b?1 :
          fangyuan10_x0 [0:0] = \w_mem_inst.sha1_w_mem_ctrl_we_x ;
        2'b1? :
          fangyuan10_x0 [1:1] = \w_mem_inst.sha1_w_mem_ctrl_we_x ;
      endcase
    end
    always @( \w_mem_inst.sha1_w_mem_ctrl_we_c or fangyuan11 ) begin
      fangyuan11_c0 = { 2{ 1'b1 }} ;
      fangyuan10_c0 = 0 ;
      casez (fangyuan11)
        2'b?1 :
          fangyuan10_c0 [0:0] = \w_mem_inst.sha1_w_mem_ctrl_we_c ;
        2'b1? :
          fangyuan10_c0 [1:1] = \w_mem_inst.sha1_w_mem_ctrl_we_c ;
      endcase
    end
  assign _114_ = ~ \w_mem_inst.sha1_w_mem_ctrl_reg ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_reg_c1 ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_reg_r1 ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_reg_x1 ;
  assign _114__t = \w_mem_inst.sha1_w_mem_ctrl_reg_t ;
  assign \w_mem_inst.sha1_w_mem_ctrl_reg_c1 = _114__c ;
  assign \w_mem_inst.sha1_w_mem_ctrl_reg_r1 = _114__r ;
  assign \w_mem_inst.sha1_w_mem_ctrl_reg_x1 = _114__x ;
  logic [1:0] fangyuan12;
  logic [1:0] fangyuan12_t ;
  logic [1:0] fangyuan12_r ;
  logic [1:0] fangyuan12_c ;
  logic [1:0] fangyuan12_x ;
  assign fangyuan12 = { _090_, 1'b0 };
  assign fangyuan12_t = {  _090__t , 1'h0  };
  logic [1-1:0] _090__r1 ;
  logic [1-1:0] _090__x1 ;
  logic [1-1:0] _090__c1 ;
  assign _090__r1 = fangyuan12_r [1:1] ;
  assign _090__x1 = fangyuan12_x [1:1] ;
  assign _090__c1 = fangyuan12_c [1:1] ;
  logic [1:0] fangyuan13;
  logic [1:0] fangyuan13_t ;
  logic [1:0] fangyuan13_r ;
  logic [1:0] fangyuan13_c ;
  logic [1:0] fangyuan13_x ;
  assign fangyuan13 = { _114_, \w_mem_inst.sha1_w_mem_ctrl_reg };
  assign fangyuan13_t = {  _114__t , \w_mem_inst.sha1_w_mem_ctrl_reg_t  };
  logic [1-1:0] _114__r1 ;
  logic [1-1:0] _114__x1 ;
  logic [1-1:0] _114__c1 ;
  assign _114__r1 = fangyuan13_r [1:1] ;
  assign _114__x1 = fangyuan13_x [1:1] ;
  assign _114__c1 = fangyuan13_c [1:1] ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_reg_r2 ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_reg_x2 ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_reg_c2 ;
  assign \w_mem_inst.sha1_w_mem_ctrl_reg_r2 = fangyuan13_r [0:0] ;
  assign \w_mem_inst.sha1_w_mem_ctrl_reg_x2 = fangyuan13_x [0:0] ;
  assign \w_mem_inst.sha1_w_mem_ctrl_reg_c2 = fangyuan13_c [0:0] ;
  always @(1'bx or fangyuan12 or fangyuan13) begin
    casez (fangyuan13)
      2'b?1 :
        \w_mem_inst.sha1_w_mem_ctrl_new = fangyuan12 [0:0] ;
      2'b1? :
        \w_mem_inst.sha1_w_mem_ctrl_new = fangyuan12 [1:1] ;
      default:
        \w_mem_inst.sha1_w_mem_ctrl_new = 1'bx ;
    endcase
  end
    always @( fangyuan12_t or fangyuan13_t or fangyuan13 ) begin
      casez (fangyuan13)
        2'b?1 :
          \w_mem_inst.sha1_w_mem_ctrl_new_t = fangyuan12_t  [0:0] | { 1{ | fangyuan13_t }} ;
        2'b1? :
          \w_mem_inst.sha1_w_mem_ctrl_new_t = fangyuan12_t  [1:1] | { 1{ | fangyuan13_t }} ;
        default:
          \w_mem_inst.sha1_w_mem_ctrl_new_t = { 1{ | fangyuan13_t }} ;
      endcase
    end
    reg [2-1:0] fangyuan13_r0 ;
    reg [2-1:0] fangyuan13_x0 ;
    reg [2-1:0] fangyuan13_c0 ;
    reg [2-1:0] fangyuan12_r0 ;
    reg [2-1:0] fangyuan12_x0 ;
    reg [2-1:0] fangyuan12_c0 ;
    always @( \w_mem_inst.sha1_w_mem_ctrl_new_r or fangyuan13 ) begin
      fangyuan13_r0 = { 2{ | \w_mem_inst.sha1_w_mem_ctrl_new_r }} ;
      fangyuan12_r0 = 0 ;
      casez (fangyuan13)
        2'b?1 :
          fangyuan12_r0 [0:0] = \w_mem_inst.sha1_w_mem_ctrl_new_r ;
        2'b1? :
          fangyuan12_r0 [1:1] = \w_mem_inst.sha1_w_mem_ctrl_new_r ;
      endcase
    end
    always @( \w_mem_inst.sha1_w_mem_ctrl_new_x or fangyuan13 ) begin
      fangyuan13_x0 = { 2{ | \w_mem_inst.sha1_w_mem_ctrl_new_x }} ;
      fangyuan12_x0 = 0 ;
      casez (fangyuan13)
        2'b?1 :
          fangyuan12_x0 [0:0] = \w_mem_inst.sha1_w_mem_ctrl_new_x ;
        2'b1? :
          fangyuan12_x0 [1:1] = \w_mem_inst.sha1_w_mem_ctrl_new_x ;
      endcase
    end
    always @( \w_mem_inst.sha1_w_mem_ctrl_new_c or fangyuan13 ) begin
      fangyuan13_c0 = { 2{ 1'b1 }} ;
      fangyuan12_c0 = 0 ;
      casez (fangyuan13)
        2'b?1 :
          fangyuan12_c0 [0:0] = \w_mem_inst.sha1_w_mem_ctrl_new_c ;
        2'b1? :
          fangyuan12_c0 [1:1] = \w_mem_inst.sha1_w_mem_ctrl_new_c ;
      endcase
    end
  logic [1:0] fangyuan14;
  logic [1:0] fangyuan14_t ;
  logic [1:0] fangyuan14_r ;
  logic [1:0] fangyuan14_c ;
  logic [1:0] fangyuan14_x ;
  assign fangyuan14 = { 1'b0, _091_ };
  assign fangyuan14_t = {  1'h0 , _091__t  };
  logic [1-1:0] _091__r0 ;
  logic [1-1:0] _091__x0 ;
  logic [1-1:0] _091__c0 ;
  assign _091__r0 = fangyuan14_r [0:0] ;
  assign _091__x0 = fangyuan14_x [0:0] ;
  assign _091__c0 = fangyuan14_c [0:0] ;
  logic [1:0] fangyuan15;
  logic [1:0] fangyuan15_t ;
  logic [1:0] fangyuan15_r ;
  logic [1:0] fangyuan15_c ;
  logic [1:0] fangyuan15_x ;
  assign fangyuan15 = { _114_, \w_mem_inst.sha1_w_mem_ctrl_reg };
  assign fangyuan15_t = {  _114__t , \w_mem_inst.sha1_w_mem_ctrl_reg_t  };
  logic [1-1:0] _114__r2 ;
  logic [1-1:0] _114__x2 ;
  logic [1-1:0] _114__c2 ;
  assign _114__r2 = fangyuan15_r [1:1] ;
  assign _114__x2 = fangyuan15_x [1:1] ;
  assign _114__c2 = fangyuan15_c [1:1] ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_reg_r3 ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_reg_x3 ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_reg_c3 ;
  assign \w_mem_inst.sha1_w_mem_ctrl_reg_r3 = fangyuan15_r [0:0] ;
  assign \w_mem_inst.sha1_w_mem_ctrl_reg_x3 = fangyuan15_x [0:0] ;
  assign \w_mem_inst.sha1_w_mem_ctrl_reg_c3 = fangyuan15_c [0:0] ;
  always @(1'bx or fangyuan14 or fangyuan15) begin
    casez (fangyuan15)
      2'b?1 :
        \w_mem_inst.w_ctr_inc = fangyuan14 [0:0] ;
      2'b1? :
        \w_mem_inst.w_ctr_inc = fangyuan14 [1:1] ;
      default:
        \w_mem_inst.w_ctr_inc = 1'bx ;
    endcase
  end
    always @( fangyuan14_t or fangyuan15_t or fangyuan15 ) begin
      casez (fangyuan15)
        2'b?1 :
          \w_mem_inst.w_ctr_inc_t = fangyuan14_t  [0:0] | { 1{ | fangyuan15_t }} ;
        2'b1? :
          \w_mem_inst.w_ctr_inc_t = fangyuan14_t  [1:1] | { 1{ | fangyuan15_t }} ;
        default:
          \w_mem_inst.w_ctr_inc_t = { 1{ | fangyuan15_t }} ;
      endcase
    end
    reg [2-1:0] fangyuan15_r0 ;
    reg [2-1:0] fangyuan15_x0 ;
    reg [2-1:0] fangyuan15_c0 ;
    reg [2-1:0] fangyuan14_r0 ;
    reg [2-1:0] fangyuan14_x0 ;
    reg [2-1:0] fangyuan14_c0 ;
    always @( \w_mem_inst.w_ctr_inc_r or fangyuan15 ) begin
      fangyuan15_r0 = { 2{ | \w_mem_inst.w_ctr_inc_r }} ;
      fangyuan14_r0 = 0 ;
      casez (fangyuan15)
        2'b?1 :
          fangyuan14_r0 [0:0] = \w_mem_inst.w_ctr_inc_r ;
        2'b1? :
          fangyuan14_r0 [1:1] = \w_mem_inst.w_ctr_inc_r ;
      endcase
    end
    always @( \w_mem_inst.w_ctr_inc_x or fangyuan15 ) begin
      fangyuan15_x0 = { 2{ | \w_mem_inst.w_ctr_inc_x }} ;
      fangyuan14_x0 = 0 ;
      casez (fangyuan15)
        2'b?1 :
          fangyuan14_x0 [0:0] = \w_mem_inst.w_ctr_inc_x ;
        2'b1? :
          fangyuan14_x0 [1:1] = \w_mem_inst.w_ctr_inc_x ;
      endcase
    end
    always @( \w_mem_inst.w_ctr_inc_c or fangyuan15 ) begin
      fangyuan15_c0 = { 2{ 1'b1 }} ;
      fangyuan14_c0 = 0 ;
      casez (fangyuan15)
        2'b?1 :
          fangyuan14_c0 [0:0] = \w_mem_inst.w_ctr_inc_c ;
        2'b1? :
          fangyuan14_c0 [1:1] = \w_mem_inst.w_ctr_inc_c ;
      endcase
    end
  assign \w_mem_inst.w_ctr_we = \w_mem_inst.w_ctr_inc ? 1'b1 : _088_;
  logic [1-1:0] \w_mem_inst.w_ctr_inc_c0 ;
  logic [1-1:0] \w_mem_inst.w_ctr_inc_r0 ;
  logic [1-1:0] \w_mem_inst.w_ctr_inc_x0 ;
  logic [1-1:0] \w_mem_inst.w_ctr_inc_r0_tmp ;
  assign \w_mem_inst.w_ctr_inc_c0 = 1;
  assign \w_mem_inst.w_ctr_inc_x0 = | \w_mem_inst.w_ctr_we_x ;
  assign \w_mem_inst.w_ctr_inc_r0 = | \w_mem_inst.w_ctr_inc_r0_tmp ;
  logic [1-1:0] _088__c0 ;
  logic [1-1:0] _088__r0 ;
  logic [1-1:0] _088__x0 ;
  assign _088__c0 = { 1{ !\w_mem_inst.w_ctr_inc }};
  assign _088__r0 = { 1{ !\w_mem_inst.w_ctr_inc }} & \w_mem_inst.w_ctr_we_r ;
  assign _088__x0 = \w_mem_inst.w_ctr_we_x ;
  assign \w_mem_inst.w_ctr_we_t = \w_mem_inst.w_ctr_inc ? { 1{ \w_mem_inst.w_ctr_inc_t }} : ( { 1{ \w_mem_inst.w_ctr_inc_t }} | _088__t );
  assign \w_mem_inst.w_ctr_inc_r0_tmp = \w_mem_inst.w_ctr_we_r | ( { 1{ !\w_mem_inst.w_ctr_inc }} & _088__t );
  assign \w_mem_inst.w_ctr_new = \w_mem_inst.w_ctr_inc ? _110_ : 7'b0000000;
  logic [1-1:0] \w_mem_inst.w_ctr_inc_c1 ;
  logic [1-1:0] \w_mem_inst.w_ctr_inc_r1 ;
  logic [1-1:0] \w_mem_inst.w_ctr_inc_x1 ;
  logic [7-1:0] \w_mem_inst.w_ctr_inc_r1_tmp ;
  assign \w_mem_inst.w_ctr_inc_c1 = 1;
  assign \w_mem_inst.w_ctr_inc_x1 = | \w_mem_inst.w_ctr_new_x ;
  assign \w_mem_inst.w_ctr_inc_r1 = | \w_mem_inst.w_ctr_inc_r1_tmp ;
  logic [7-1:0] _110__c0 ;
  logic [7-1:0] _110__r0 ;
  logic [7-1:0] _110__x0 ;
  assign _110__c0 = { 7{ \w_mem_inst.w_ctr_inc }} ;
  assign _110__r0 = { 7{ \w_mem_inst.w_ctr_inc }} & \w_mem_inst.w_ctr_new_r ;
  assign _110__x0 = \w_mem_inst.w_ctr_new_x ;
  assign \w_mem_inst.w_ctr_new_t = \w_mem_inst.w_ctr_inc ? ( { 7{ \w_mem_inst.w_ctr_inc_t }} | _110__t ) : { 7{ \w_mem_inst.w_ctr_inc_t }};
  assign \w_mem_inst.w_ctr_inc_r1_tmp = \w_mem_inst.w_ctr_new_r | ( { 7{ \w_mem_inst.w_ctr_inc }} & _110__t );
  assign _088_ = \w_mem_inst.sha1_w_mem_ctrl_new ? 1'b1 : 1'b0;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_new_c0 ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_new_r0 ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_new_x0 ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_new_r0_tmp ;
  assign \w_mem_inst.sha1_w_mem_ctrl_new_c0 = 1;
  assign \w_mem_inst.sha1_w_mem_ctrl_new_x0 = | _088__x ;
  assign \w_mem_inst.sha1_w_mem_ctrl_new_r0 = | \w_mem_inst.sha1_w_mem_ctrl_new_r0_tmp ;
  assign _088__t = { 1{ \w_mem_inst.sha1_w_mem_ctrl_new_t }} ;
  assign \w_mem_inst.sha1_w_mem_ctrl_new_r0_tmp = _088__r ;
  assign _108_ = _112_ ? 1'b1 : 1'b0;
  logic [1-1:0] _112__c0 ;
  logic [1-1:0] _112__r0 ;
  logic [1-1:0] _112__x0 ;
  logic [1-1:0] _112__r0_tmp ;
  assign _112__c0 = 1;
  assign _112__x0 = | _108__x ;
  assign _112__r0 = | _112__r0_tmp ;
  assign _108__t = { 1{ _112__t }} ;
  assign _112__r0_tmp = _108__r ;
  logic [31:0] fangyuan16;
  logic [31:0] fangyuan16_t ;
  logic [31:0] fangyuan16_r ;
  logic [31:0] fangyuan16_c ;
  logic [31:0] fangyuan16_x ;
  assign fangyuan16 = { \w_mem_inst.w_16 [30:0], \w_mem_inst.w_16 [31] };
  assign fangyuan16_t = {  \w_mem_inst.w_16_t [30:0] , \w_mem_inst.w_16_t [31]  };
  logic [32-1:0] \w_mem_inst.w_16_r0 ;
  logic [32-1:0] \w_mem_inst.w_16_x0 ;
  logic [32-1:0] \w_mem_inst.w_16_c0 ;
  assign \w_mem_inst.w_16_r0 [30:0] = fangyuan16_r [31:1] ;
  assign \w_mem_inst.w_16_x0 [30:0] = fangyuan16_x [31:1] ;
  assign \w_mem_inst.w_16_c0 [30:0] = fangyuan16_c [31:1] ;
  assign \w_mem_inst.w_16_r0 [31:31] = 0;
  assign \w_mem_inst.w_16_x0 [31:31] = 0;
  assign \w_mem_inst.w_16_c0 [31:31] = 0;
  logic [32-1:0] \w_mem_inst.w_16_r1 ;
  logic [32-1:0] \w_mem_inst.w_16_x1 ;
  logic [32-1:0] \w_mem_inst.w_16_c1 ;
  assign \w_mem_inst.w_16_r1 [31] = fangyuan16_r [0:0] ;
  assign \w_mem_inst.w_16_x1 [31] = fangyuan16_x [0:0] ;
  assign \w_mem_inst.w_16_c1 [31] = fangyuan16_c [0:0] ;
  assign \w_mem_inst.w_16_r1 [30:0] = 0;
  assign \w_mem_inst.w_16_x1 [30:0] = 0;
  assign \w_mem_inst.w_16_c1 [30:0] = 0;
  assign _107_ = _112_ ? fangyuan16 : 32'd0;
  logic [1-1:0] _112__c1 ;
  logic [1-1:0] _112__r1 ;
  logic [1-1:0] _112__x1 ;
  logic [32-1:0] _112__r1_tmp ;
  assign _112__c1 = 1;
  assign _112__x1 = | _107__x ;
  assign _112__r1 = | _112__r1_tmp ;
  logic [32-1:0] fangyuan16_c0 ;
  logic [32-1:0] fangyuan16_r0 ;
  logic [32-1:0] fangyuan16_x0 ;
  assign fangyuan16_c0 = { 32{ _112_ }} ;
  assign fangyuan16_r0 = { 32{ _112_ }} & _107__r ;
  assign fangyuan16_x0 = _107__x ;
  assign _107__t = _112_ ? ( { 32{ _112__t }} | fangyuan16_t ) : { 32{ _112__t }};
  assign _112__r1_tmp = _107__r | ( { 32{ _112_ }} & fangyuan16_t );
  assign _106_ = _112_ ? \w_mem_inst.w_mem[15] : 32'd0;
  logic [1-1:0] _112__c2 ;
  logic [1-1:0] _112__r2 ;
  logic [1-1:0] _112__x2 ;
  logic [32-1:0] _112__r2_tmp ;
  assign _112__c2 = 1;
  assign _112__x2 = | _106__x ;
  assign _112__r2 = | _112__r2_tmp ;
  logic [32-1:0] \w_mem_inst.w_mem[15]_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem[15]_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem[15]_x0 ;
  assign \w_mem_inst.w_mem[15]_c0 = { 32{ _112_ }} ;
  assign \w_mem_inst.w_mem[15]_r0 = { 32{ _112_ }} & _106__r ;
  assign \w_mem_inst.w_mem[15]_x0 = _106__x ;
  assign _106__t = _112_ ? ( { 32{ _112__t }} | \w_mem_inst.w_mem[15]_t ) : { 32{ _112__t }};
  assign _112__r2_tmp = _106__r | ( { 32{ _112_ }} & \w_mem_inst.w_mem[15]_t );
  assign _105_ = _112_ ? \w_mem_inst.w_mem[14] : 32'd0;
  logic [1-1:0] _112__c3 ;
  logic [1-1:0] _112__r3 ;
  logic [1-1:0] _112__x3 ;
  logic [32-1:0] _112__r3_tmp ;
  assign _112__c3 = 1;
  assign _112__x3 = | _105__x ;
  assign _112__r3 = | _112__r3_tmp ;
  logic [32-1:0] \w_mem_inst.w_mem[14]_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem[14]_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem[14]_x0 ;
  assign \w_mem_inst.w_mem[14]_c0 = { 32{ _112_ }} ;
  assign \w_mem_inst.w_mem[14]_r0 = { 32{ _112_ }} & _105__r ;
  assign \w_mem_inst.w_mem[14]_x0 = _105__x ;
  assign _105__t = _112_ ? ( { 32{ _112__t }} | \w_mem_inst.w_mem[14]_t ) : { 32{ _112__t }};
  assign _112__r3_tmp = _105__r | ( { 32{ _112_ }} & \w_mem_inst.w_mem[14]_t );
  assign _104_ = _112_ ? \w_mem_inst.w_mem[13] : 32'd0;
  logic [1-1:0] _112__c4 ;
  logic [1-1:0] _112__r4 ;
  logic [1-1:0] _112__x4 ;
  logic [32-1:0] _112__r4_tmp ;
  assign _112__c4 = 1;
  assign _112__x4 = | _104__x ;
  assign _112__r4 = | _112__r4_tmp ;
  logic [32-1:0] \w_mem_inst.w_mem[13]_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem[13]_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem[13]_x0 ;
  assign \w_mem_inst.w_mem[13]_c0 = { 32{ _112_ }} ;
  assign \w_mem_inst.w_mem[13]_r0 = { 32{ _112_ }} & _104__r ;
  assign \w_mem_inst.w_mem[13]_x0 = _104__x ;
  assign _104__t = _112_ ? ( { 32{ _112__t }} | \w_mem_inst.w_mem[13]_t ) : { 32{ _112__t }};
  assign _112__r4_tmp = _104__r | ( { 32{ _112_ }} & \w_mem_inst.w_mem[13]_t );
  assign _103_ = _112_ ? \w_mem_inst.w_mem[12] : 32'd0;
  logic [1-1:0] _112__c5 ;
  logic [1-1:0] _112__r5 ;
  logic [1-1:0] _112__x5 ;
  logic [32-1:0] _112__r5_tmp ;
  assign _112__c5 = 1;
  assign _112__x5 = | _103__x ;
  assign _112__r5 = | _112__r5_tmp ;
  logic [32-1:0] \w_mem_inst.w_mem[12]_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem[12]_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem[12]_x0 ;
  assign \w_mem_inst.w_mem[12]_c0 = { 32{ _112_ }} ;
  assign \w_mem_inst.w_mem[12]_r0 = { 32{ _112_ }} & _103__r ;
  assign \w_mem_inst.w_mem[12]_x0 = _103__x ;
  assign _103__t = _112_ ? ( { 32{ _112__t }} | \w_mem_inst.w_mem[12]_t ) : { 32{ _112__t }};
  assign _112__r5_tmp = _103__r | ( { 32{ _112_ }} & \w_mem_inst.w_mem[12]_t );
  assign _102_ = _112_ ? \w_mem_inst.w_mem[11] : 32'd0;
  logic [1-1:0] _112__c6 ;
  logic [1-1:0] _112__r6 ;
  logic [1-1:0] _112__x6 ;
  logic [32-1:0] _112__r6_tmp ;
  assign _112__c6 = 1;
  assign _112__x6 = | _102__x ;
  assign _112__r6 = | _112__r6_tmp ;
  logic [32-1:0] \w_mem_inst.w_mem[11]_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem[11]_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem[11]_x0 ;
  assign \w_mem_inst.w_mem[11]_c0 = { 32{ _112_ }} ;
  assign \w_mem_inst.w_mem[11]_r0 = { 32{ _112_ }} & _102__r ;
  assign \w_mem_inst.w_mem[11]_x0 = _102__x ;
  assign _102__t = _112_ ? ( { 32{ _112__t }} | \w_mem_inst.w_mem[11]_t ) : { 32{ _112__t }};
  assign _112__r6_tmp = _102__r | ( { 32{ _112_ }} & \w_mem_inst.w_mem[11]_t );
  assign _101_ = _112_ ? \w_mem_inst.w_mem[10] : 32'd0;
  logic [1-1:0] _112__c7 ;
  logic [1-1:0] _112__r7 ;
  logic [1-1:0] _112__x7 ;
  logic [32-1:0] _112__r7_tmp ;
  assign _112__c7 = 1;
  assign _112__x7 = | _101__x ;
  assign _112__r7 = | _112__r7_tmp ;
  logic [32-1:0] \w_mem_inst.w_mem[10]_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem[10]_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem[10]_x0 ;
  assign \w_mem_inst.w_mem[10]_c0 = { 32{ _112_ }} ;
  assign \w_mem_inst.w_mem[10]_r0 = { 32{ _112_ }} & _101__r ;
  assign \w_mem_inst.w_mem[10]_x0 = _101__x ;
  assign _101__t = _112_ ? ( { 32{ _112__t }} | \w_mem_inst.w_mem[10]_t ) : { 32{ _112__t }};
  assign _112__r7_tmp = _101__r | ( { 32{ _112_ }} & \w_mem_inst.w_mem[10]_t );
  assign _100_ = _112_ ? \w_mem_inst.w_mem[9] : 32'd0;
  logic [1-1:0] _112__c8 ;
  logic [1-1:0] _112__r8 ;
  logic [1-1:0] _112__x8 ;
  logic [32-1:0] _112__r8_tmp ;
  assign _112__c8 = 1;
  assign _112__x8 = | _100__x ;
  assign _112__r8 = | _112__r8_tmp ;
  logic [32-1:0] \w_mem_inst.w_mem[9]_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem[9]_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem[9]_x0 ;
  assign \w_mem_inst.w_mem[9]_c0 = { 32{ _112_ }} ;
  assign \w_mem_inst.w_mem[9]_r0 = { 32{ _112_ }} & _100__r ;
  assign \w_mem_inst.w_mem[9]_x0 = _100__x ;
  assign _100__t = _112_ ? ( { 32{ _112__t }} | \w_mem_inst.w_mem[9]_t ) : { 32{ _112__t }};
  assign _112__r8_tmp = _100__r | ( { 32{ _112_ }} & \w_mem_inst.w_mem[9]_t );
  assign _099_ = _112_ ? \w_mem_inst.w_mem[8] : 32'd0;
  logic [1-1:0] _112__c9 ;
  logic [1-1:0] _112__r9 ;
  logic [1-1:0] _112__x9 ;
  logic [32-1:0] _112__r9_tmp ;
  assign _112__c9 = 1;
  assign _112__x9 = | _099__x ;
  assign _112__r9 = | _112__r9_tmp ;
  logic [32-1:0] \w_mem_inst.w_mem[8]_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem[8]_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem[8]_x0 ;
  assign \w_mem_inst.w_mem[8]_c0 = { 32{ _112_ }} ;
  assign \w_mem_inst.w_mem[8]_r0 = { 32{ _112_ }} & _099__r ;
  assign \w_mem_inst.w_mem[8]_x0 = _099__x ;
  assign _099__t = _112_ ? ( { 32{ _112__t }} | \w_mem_inst.w_mem[8]_t ) : { 32{ _112__t }};
  assign _112__r9_tmp = _099__r | ( { 32{ _112_ }} & \w_mem_inst.w_mem[8]_t );
  assign _098_ = _112_ ? \w_mem_inst.w_mem[7] : 32'd0;
  logic [1-1:0] _112__c10 ;
  logic [1-1:0] _112__r10 ;
  logic [1-1:0] _112__x10 ;
  logic [32-1:0] _112__r10_tmp ;
  assign _112__c10 = 1;
  assign _112__x10 = | _098__x ;
  assign _112__r10 = | _112__r10_tmp ;
  logic [32-1:0] \w_mem_inst.w_mem[7]_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem[7]_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem[7]_x0 ;
  assign \w_mem_inst.w_mem[7]_c0 = { 32{ _112_ }} ;
  assign \w_mem_inst.w_mem[7]_r0 = { 32{ _112_ }} & _098__r ;
  assign \w_mem_inst.w_mem[7]_x0 = _098__x ;
  assign _098__t = _112_ ? ( { 32{ _112__t }} | \w_mem_inst.w_mem[7]_t ) : { 32{ _112__t }};
  assign _112__r10_tmp = _098__r | ( { 32{ _112_ }} & \w_mem_inst.w_mem[7]_t );
  assign _097_ = _112_ ? \w_mem_inst.w_mem[6] : 32'd0;
  logic [1-1:0] _112__c11 ;
  logic [1-1:0] _112__r11 ;
  logic [1-1:0] _112__x11 ;
  logic [32-1:0] _112__r11_tmp ;
  assign _112__c11 = 1;
  assign _112__x11 = | _097__x ;
  assign _112__r11 = | _112__r11_tmp ;
  logic [32-1:0] \w_mem_inst.w_mem[6]_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem[6]_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem[6]_x0 ;
  assign \w_mem_inst.w_mem[6]_c0 = { 32{ _112_ }} ;
  assign \w_mem_inst.w_mem[6]_r0 = { 32{ _112_ }} & _097__r ;
  assign \w_mem_inst.w_mem[6]_x0 = _097__x ;
  assign _097__t = _112_ ? ( { 32{ _112__t }} | \w_mem_inst.w_mem[6]_t ) : { 32{ _112__t }};
  assign _112__r11_tmp = _097__r | ( { 32{ _112_ }} & \w_mem_inst.w_mem[6]_t );
  assign _096_ = _112_ ? \w_mem_inst.w_mem[5] : 32'd0;
  logic [1-1:0] _112__c12 ;
  logic [1-1:0] _112__r12 ;
  logic [1-1:0] _112__x12 ;
  logic [32-1:0] _112__r12_tmp ;
  assign _112__c12 = 1;
  assign _112__x12 = | _096__x ;
  assign _112__r12 = | _112__r12_tmp ;
  logic [32-1:0] \w_mem_inst.w_mem[5]_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem[5]_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem[5]_x0 ;
  assign \w_mem_inst.w_mem[5]_c0 = { 32{ _112_ }} ;
  assign \w_mem_inst.w_mem[5]_r0 = { 32{ _112_ }} & _096__r ;
  assign \w_mem_inst.w_mem[5]_x0 = _096__x ;
  assign _096__t = _112_ ? ( { 32{ _112__t }} | \w_mem_inst.w_mem[5]_t ) : { 32{ _112__t }};
  assign _112__r12_tmp = _096__r | ( { 32{ _112_ }} & \w_mem_inst.w_mem[5]_t );
  assign _095_ = _112_ ? \w_mem_inst.w_mem[4] : 32'd0;
  logic [1-1:0] _112__c13 ;
  logic [1-1:0] _112__r13 ;
  logic [1-1:0] _112__x13 ;
  logic [32-1:0] _112__r13_tmp ;
  assign _112__c13 = 1;
  assign _112__x13 = | _095__x ;
  assign _112__r13 = | _112__r13_tmp ;
  logic [32-1:0] \w_mem_inst.w_mem[4]_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem[4]_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem[4]_x0 ;
  assign \w_mem_inst.w_mem[4]_c0 = { 32{ _112_ }} ;
  assign \w_mem_inst.w_mem[4]_r0 = { 32{ _112_ }} & _095__r ;
  assign \w_mem_inst.w_mem[4]_x0 = _095__x ;
  assign _095__t = _112_ ? ( { 32{ _112__t }} | \w_mem_inst.w_mem[4]_t ) : { 32{ _112__t }};
  assign _112__r13_tmp = _095__r | ( { 32{ _112_ }} & \w_mem_inst.w_mem[4]_t );
  assign _094_ = _112_ ? \w_mem_inst.w_mem[3] : 32'd0;
  logic [1-1:0] _112__c14 ;
  logic [1-1:0] _112__r14 ;
  logic [1-1:0] _112__x14 ;
  logic [32-1:0] _112__r14_tmp ;
  assign _112__c14 = 1;
  assign _112__x14 = | _094__x ;
  assign _112__r14 = | _112__r14_tmp ;
  logic [32-1:0] \w_mem_inst.w_mem[3]_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem[3]_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem[3]_x0 ;
  assign \w_mem_inst.w_mem[3]_c0 = { 32{ _112_ }} ;
  assign \w_mem_inst.w_mem[3]_r0 = { 32{ _112_ }} & _094__r ;
  assign \w_mem_inst.w_mem[3]_x0 = _094__x ;
  assign _094__t = _112_ ? ( { 32{ _112__t }} | \w_mem_inst.w_mem[3]_t ) : { 32{ _112__t }};
  assign _112__r14_tmp = _094__r | ( { 32{ _112_ }} & \w_mem_inst.w_mem[3]_t );
  assign _093_ = _112_ ? \w_mem_inst.w_mem[2] : 32'd0;
  logic [1-1:0] _112__c15 ;
  logic [1-1:0] _112__r15 ;
  logic [1-1:0] _112__x15 ;
  logic [32-1:0] _112__r15_tmp ;
  assign _112__c15 = 1;
  assign _112__x15 = | _093__x ;
  assign _112__r15 = | _112__r15_tmp ;
  logic [32-1:0] \w_mem_inst.w_mem[2]_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem[2]_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem[2]_x0 ;
  assign \w_mem_inst.w_mem[2]_c0 = { 32{ _112_ }} ;
  assign \w_mem_inst.w_mem[2]_r0 = { 32{ _112_ }} & _093__r ;
  assign \w_mem_inst.w_mem[2]_x0 = _093__x ;
  assign _093__t = _112_ ? ( { 32{ _112__t }} | \w_mem_inst.w_mem[2]_t ) : { 32{ _112__t }};
  assign _112__r15_tmp = _093__r | ( { 32{ _112_ }} & \w_mem_inst.w_mem[2]_t );
  assign _092_ = _112_ ? \w_mem_inst.w_mem[1] : 32'd0;
  logic [1-1:0] _112__c16 ;
  logic [1-1:0] _112__r16 ;
  logic [1-1:0] _112__x16 ;
  logic [32-1:0] _112__r16_tmp ;
  assign _112__c16 = 1;
  assign _112__x16 = | _092__x ;
  assign _112__r16 = | _112__r16_tmp ;
  logic [32-1:0] \w_mem_inst.w_mem[1]_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem[1]_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem[1]_x0 ;
  assign \w_mem_inst.w_mem[1]_c0 = { 32{ _112_ }} ;
  assign \w_mem_inst.w_mem[1]_r0 = { 32{ _112_ }} & _092__r ;
  assign \w_mem_inst.w_mem[1]_x0 = _092__x ;
  assign _092__t = _112_ ? ( { 32{ _112__t }} | \w_mem_inst.w_mem[1]_t ) : { 32{ _112__t }};
  assign _112__r16_tmp = _092__r | ( { 32{ _112_ }} & \w_mem_inst.w_mem[1]_t );
  assign \w_mem_inst.w_mem_we = round_ctr_rst ? 1'b1 : _108_;
  logic [1-1:0] round_ctr_rst_c7 ;
  logic [1-1:0] round_ctr_rst_r7 ;
  logic [1-1:0] round_ctr_rst_x7 ;
  logic [1-1:0] round_ctr_rst_r7_tmp ;
  assign round_ctr_rst_c7 = 1;
  assign round_ctr_rst_x7 = | \w_mem_inst.w_mem_we_x ;
  assign round_ctr_rst_r7 = | round_ctr_rst_r7_tmp ;
  logic [1-1:0] _108__c0 ;
  logic [1-1:0] _108__r0 ;
  logic [1-1:0] _108__x0 ;
  assign _108__c0 = { 1{ !round_ctr_rst }};
  assign _108__r0 = { 1{ !round_ctr_rst }} & \w_mem_inst.w_mem_we_r ;
  assign _108__x0 = \w_mem_inst.w_mem_we_x ;
  assign \w_mem_inst.w_mem_we_t = round_ctr_rst ? { 1{ round_ctr_rst_t }} : ( { 1{ round_ctr_rst_t }} | _108__t );
  assign round_ctr_rst_r7_tmp = \w_mem_inst.w_mem_we_r | ( { 1{ !round_ctr_rst }} & _108__t );
  assign \w_mem_inst.w_mem15_new = round_ctr_rst ? block[31:0] : _107_;
  logic [1-1:0] round_ctr_rst_c8 ;
  logic [1-1:0] round_ctr_rst_r8 ;
  logic [1-1:0] round_ctr_rst_x8 ;
  logic [32-1:0] round_ctr_rst_r8_tmp ;
  assign round_ctr_rst_c8 = 1;
  assign round_ctr_rst_x8 = | \w_mem_inst.w_mem15_new_x ;
  assign round_ctr_rst_r8 = | round_ctr_rst_r8_tmp ;
  assign \w_mem_inst.w_mem15_new_t = round_ctr_rst ? ( { 32{ round_ctr_rst_t }} | block_t [31:0] ) : ( { 32{ round_ctr_rst_t }} | _107__t );
  assign round_ctr_rst_r8_tmp = \w_mem_inst.w_mem15_new_r | ( { 32{ round_ctr_rst }} & block_t [31:0] | { 32{ !round_ctr_rst }} & _107__t );
  logic [512-1:0] block_c0 ;
  logic [512-1:0] block_r0 ;
  logic [512-1:0] block_x0 ;
  assign block_c0 [31:0] = { 32{ round_ctr_rst }};
  assign block_r0 [31:0] = { 32{ round_ctr_rst }} & \w_mem_inst.w_mem15_new_r ;
  assign block_x0 [31:0] = \w_mem_inst.w_mem15_new_x ;
  logic [32-1:0] _107__c0 ;
  logic [32-1:0] _107__r0 ;
  logic [32-1:0] _107__x0 ;
  assign _107__c0 = { 32{ !round_ctr_rst }} ;
  assign _107__r0 = { 32{ !round_ctr_rst }} & \w_mem_inst.w_mem15_new_r ;
  assign _107__x0 = \w_mem_inst.w_mem15_new_x ;
  assign block_c0 [511:32] = 0;
  assign block_r0 [511:32] = 0;
  assign block_x0 [511:32] = 0;
  assign \w_mem_inst.w_mem14_new = round_ctr_rst ? block[63:32] : _106_;
  logic [1-1:0] round_ctr_rst_c9 ;
  logic [1-1:0] round_ctr_rst_r9 ;
  logic [1-1:0] round_ctr_rst_x9 ;
  logic [32-1:0] round_ctr_rst_r9_tmp ;
  assign round_ctr_rst_c9 = 1;
  assign round_ctr_rst_x9 = | \w_mem_inst.w_mem14_new_x ;
  assign round_ctr_rst_r9 = | round_ctr_rst_r9_tmp ;
  assign \w_mem_inst.w_mem14_new_t = round_ctr_rst ? ( { 32{ round_ctr_rst_t }} | block_t [63:32] ) : ( { 32{ round_ctr_rst_t }} | _106__t );
  assign round_ctr_rst_r9_tmp = \w_mem_inst.w_mem14_new_r | ( { 32{ round_ctr_rst }} & block_t [63:32] | { 32{ !round_ctr_rst }} & _106__t );
  logic [512-1:0] block_c1 ;
  logic [512-1:0] block_r1 ;
  logic [512-1:0] block_x1 ;
  assign block_c1 [63:32] = { 32{ round_ctr_rst }};
  assign block_r1 [63:32] = { 32{ round_ctr_rst }} & \w_mem_inst.w_mem14_new_r ;
  assign block_x1 [63:32] = \w_mem_inst.w_mem14_new_x ;
  logic [32-1:0] _106__c0 ;
  logic [32-1:0] _106__r0 ;
  logic [32-1:0] _106__x0 ;
  assign _106__c0 = { 32{ !round_ctr_rst }} ;
  assign _106__r0 = { 32{ !round_ctr_rst }} & \w_mem_inst.w_mem14_new_r ;
  assign _106__x0 = \w_mem_inst.w_mem14_new_x ;
  assign block_c1 [511:64] = 0;
  assign block_c1 [31:0] = 0;
  assign block_r1 [511:64] = 0;
  assign block_r1 [31:0] = 0;
  assign block_x1 [511:64] = 0;
  assign block_x1 [31:0] = 0;
  assign \w_mem_inst.w_mem13_new = round_ctr_rst ? block[95:64] : _105_;
  logic [1-1:0] round_ctr_rst_c10 ;
  logic [1-1:0] round_ctr_rst_r10 ;
  logic [1-1:0] round_ctr_rst_x10 ;
  logic [32-1:0] round_ctr_rst_r10_tmp ;
  assign round_ctr_rst_c10 = 1;
  assign round_ctr_rst_x10 = | \w_mem_inst.w_mem13_new_x ;
  assign round_ctr_rst_r10 = | round_ctr_rst_r10_tmp ;
  assign \w_mem_inst.w_mem13_new_t = round_ctr_rst ? ( { 32{ round_ctr_rst_t }} | block_t [95:64] ) : ( { 32{ round_ctr_rst_t }} | _105__t );
  assign round_ctr_rst_r10_tmp = \w_mem_inst.w_mem13_new_r | ( { 32{ round_ctr_rst }} & block_t [95:64] | { 32{ !round_ctr_rst }} & _105__t );
  logic [512-1:0] block_c2 ;
  logic [512-1:0] block_r2 ;
  logic [512-1:0] block_x2 ;
  assign block_c2 [95:64] = { 32{ round_ctr_rst }};
  assign block_r2 [95:64] = { 32{ round_ctr_rst }} & \w_mem_inst.w_mem13_new_r ;
  assign block_x2 [95:64] = \w_mem_inst.w_mem13_new_x ;
  logic [32-1:0] _105__c0 ;
  logic [32-1:0] _105__r0 ;
  logic [32-1:0] _105__x0 ;
  assign _105__c0 = { 32{ !round_ctr_rst }} ;
  assign _105__r0 = { 32{ !round_ctr_rst }} & \w_mem_inst.w_mem13_new_r ;
  assign _105__x0 = \w_mem_inst.w_mem13_new_x ;
  assign block_c2 [511:96] = 0;
  assign block_c2 [63:0] = 0;
  assign block_r2 [511:96] = 0;
  assign block_r2 [63:0] = 0;
  assign block_x2 [511:96] = 0;
  assign block_x2 [63:0] = 0;
  assign \w_mem_inst.w_mem12_new = round_ctr_rst ? block[127:96] : _104_;
  logic [1-1:0] round_ctr_rst_c11 ;
  logic [1-1:0] round_ctr_rst_r11 ;
  logic [1-1:0] round_ctr_rst_x11 ;
  logic [32-1:0] round_ctr_rst_r11_tmp ;
  assign round_ctr_rst_c11 = 1;
  assign round_ctr_rst_x11 = | \w_mem_inst.w_mem12_new_x ;
  assign round_ctr_rst_r11 = | round_ctr_rst_r11_tmp ;
  assign \w_mem_inst.w_mem12_new_t = round_ctr_rst ? ( { 32{ round_ctr_rst_t }} | block_t [127:96] ) : ( { 32{ round_ctr_rst_t }} | _104__t );
  assign round_ctr_rst_r11_tmp = \w_mem_inst.w_mem12_new_r | ( { 32{ round_ctr_rst }} & block_t [127:96] | { 32{ !round_ctr_rst }} & _104__t );
  logic [512-1:0] block_c3 ;
  logic [512-1:0] block_r3 ;
  logic [512-1:0] block_x3 ;
  assign block_c3 [127:96] = { 32{ round_ctr_rst }};
  assign block_r3 [127:96] = { 32{ round_ctr_rst }} & \w_mem_inst.w_mem12_new_r ;
  assign block_x3 [127:96] = \w_mem_inst.w_mem12_new_x ;
  logic [32-1:0] _104__c0 ;
  logic [32-1:0] _104__r0 ;
  logic [32-1:0] _104__x0 ;
  assign _104__c0 = { 32{ !round_ctr_rst }} ;
  assign _104__r0 = { 32{ !round_ctr_rst }} & \w_mem_inst.w_mem12_new_r ;
  assign _104__x0 = \w_mem_inst.w_mem12_new_x ;
  assign block_c3 [511:128] = 0;
  assign block_c3 [95:0] = 0;
  assign block_r3 [511:128] = 0;
  assign block_r3 [95:0] = 0;
  assign block_x3 [511:128] = 0;
  assign block_x3 [95:0] = 0;
  assign \w_mem_inst.w_mem11_new = round_ctr_rst ? block[159:128] : _103_;
  logic [1-1:0] round_ctr_rst_c12 ;
  logic [1-1:0] round_ctr_rst_r12 ;
  logic [1-1:0] round_ctr_rst_x12 ;
  logic [32-1:0] round_ctr_rst_r12_tmp ;
  assign round_ctr_rst_c12 = 1;
  assign round_ctr_rst_x12 = | \w_mem_inst.w_mem11_new_x ;
  assign round_ctr_rst_r12 = | round_ctr_rst_r12_tmp ;
  assign \w_mem_inst.w_mem11_new_t = round_ctr_rst ? ( { 32{ round_ctr_rst_t }} | block_t [159:128] ) : ( { 32{ round_ctr_rst_t }} | _103__t );
  assign round_ctr_rst_r12_tmp = \w_mem_inst.w_mem11_new_r | ( { 32{ round_ctr_rst }} & block_t [159:128] | { 32{ !round_ctr_rst }} & _103__t );
  logic [512-1:0] block_c4 ;
  logic [512-1:0] block_r4 ;
  logic [512-1:0] block_x4 ;
  assign block_c4 [159:128] = { 32{ round_ctr_rst }};
  assign block_r4 [159:128] = { 32{ round_ctr_rst }} & \w_mem_inst.w_mem11_new_r ;
  assign block_x4 [159:128] = \w_mem_inst.w_mem11_new_x ;
  logic [32-1:0] _103__c0 ;
  logic [32-1:0] _103__r0 ;
  logic [32-1:0] _103__x0 ;
  assign _103__c0 = { 32{ !round_ctr_rst }} ;
  assign _103__r0 = { 32{ !round_ctr_rst }} & \w_mem_inst.w_mem11_new_r ;
  assign _103__x0 = \w_mem_inst.w_mem11_new_x ;
  assign block_c4 [511:160] = 0;
  assign block_c4 [127:0] = 0;
  assign block_r4 [511:160] = 0;
  assign block_r4 [127:0] = 0;
  assign block_x4 [511:160] = 0;
  assign block_x4 [127:0] = 0;
  assign \w_mem_inst.w_mem10_new = round_ctr_rst ? block[191:160] : _102_;
  logic [1-1:0] round_ctr_rst_c13 ;
  logic [1-1:0] round_ctr_rst_r13 ;
  logic [1-1:0] round_ctr_rst_x13 ;
  logic [32-1:0] round_ctr_rst_r13_tmp ;
  assign round_ctr_rst_c13 = 1;
  assign round_ctr_rst_x13 = | \w_mem_inst.w_mem10_new_x ;
  assign round_ctr_rst_r13 = | round_ctr_rst_r13_tmp ;
  assign \w_mem_inst.w_mem10_new_t = round_ctr_rst ? ( { 32{ round_ctr_rst_t }} | block_t [191:160] ) : ( { 32{ round_ctr_rst_t }} | _102__t );
  assign round_ctr_rst_r13_tmp = \w_mem_inst.w_mem10_new_r | ( { 32{ round_ctr_rst }} & block_t [191:160] | { 32{ !round_ctr_rst }} & _102__t );
  logic [512-1:0] block_c5 ;
  logic [512-1:0] block_r5 ;
  logic [512-1:0] block_x5 ;
  assign block_c5 [191:160] = { 32{ round_ctr_rst }};
  assign block_r5 [191:160] = { 32{ round_ctr_rst }} & \w_mem_inst.w_mem10_new_r ;
  assign block_x5 [191:160] = \w_mem_inst.w_mem10_new_x ;
  logic [32-1:0] _102__c0 ;
  logic [32-1:0] _102__r0 ;
  logic [32-1:0] _102__x0 ;
  assign _102__c0 = { 32{ !round_ctr_rst }} ;
  assign _102__r0 = { 32{ !round_ctr_rst }} & \w_mem_inst.w_mem10_new_r ;
  assign _102__x0 = \w_mem_inst.w_mem10_new_x ;
  assign block_c5 [511:192] = 0;
  assign block_c5 [159:0] = 0;
  assign block_r5 [511:192] = 0;
  assign block_r5 [159:0] = 0;
  assign block_x5 [511:192] = 0;
  assign block_x5 [159:0] = 0;
  assign \w_mem_inst.w_mem09_new = round_ctr_rst ? block[223:192] : _101_;
  logic [1-1:0] round_ctr_rst_c14 ;
  logic [1-1:0] round_ctr_rst_r14 ;
  logic [1-1:0] round_ctr_rst_x14 ;
  logic [32-1:0] round_ctr_rst_r14_tmp ;
  assign round_ctr_rst_c14 = 1;
  assign round_ctr_rst_x14 = | \w_mem_inst.w_mem09_new_x ;
  assign round_ctr_rst_r14 = | round_ctr_rst_r14_tmp ;
  assign \w_mem_inst.w_mem09_new_t = round_ctr_rst ? ( { 32{ round_ctr_rst_t }} | block_t [223:192] ) : ( { 32{ round_ctr_rst_t }} | _101__t );
  assign round_ctr_rst_r14_tmp = \w_mem_inst.w_mem09_new_r | ( { 32{ round_ctr_rst }} & block_t [223:192] | { 32{ !round_ctr_rst }} & _101__t );
  logic [512-1:0] block_c6 ;
  logic [512-1:0] block_r6 ;
  logic [512-1:0] block_x6 ;
  assign block_c6 [223:192] = { 32{ round_ctr_rst }};
  assign block_r6 [223:192] = { 32{ round_ctr_rst }} & \w_mem_inst.w_mem09_new_r ;
  assign block_x6 [223:192] = \w_mem_inst.w_mem09_new_x ;
  logic [32-1:0] _101__c0 ;
  logic [32-1:0] _101__r0 ;
  logic [32-1:0] _101__x0 ;
  assign _101__c0 = { 32{ !round_ctr_rst }} ;
  assign _101__r0 = { 32{ !round_ctr_rst }} & \w_mem_inst.w_mem09_new_r ;
  assign _101__x0 = \w_mem_inst.w_mem09_new_x ;
  assign block_c6 [511:224] = 0;
  assign block_c6 [191:0] = 0;
  assign block_r6 [511:224] = 0;
  assign block_r6 [191:0] = 0;
  assign block_x6 [511:224] = 0;
  assign block_x6 [191:0] = 0;
  assign \w_mem_inst.w_mem08_new = round_ctr_rst ? block[255:224] : _100_;
  logic [1-1:0] round_ctr_rst_c15 ;
  logic [1-1:0] round_ctr_rst_r15 ;
  logic [1-1:0] round_ctr_rst_x15 ;
  logic [32-1:0] round_ctr_rst_r15_tmp ;
  assign round_ctr_rst_c15 = 1;
  assign round_ctr_rst_x15 = | \w_mem_inst.w_mem08_new_x ;
  assign round_ctr_rst_r15 = | round_ctr_rst_r15_tmp ;
  assign \w_mem_inst.w_mem08_new_t = round_ctr_rst ? ( { 32{ round_ctr_rst_t }} | block_t [255:224] ) : ( { 32{ round_ctr_rst_t }} | _100__t );
  assign round_ctr_rst_r15_tmp = \w_mem_inst.w_mem08_new_r | ( { 32{ round_ctr_rst }} & block_t [255:224] | { 32{ !round_ctr_rst }} & _100__t );
  logic [512-1:0] block_c7 ;
  logic [512-1:0] block_r7 ;
  logic [512-1:0] block_x7 ;
  assign block_c7 [255:224] = { 32{ round_ctr_rst }};
  assign block_r7 [255:224] = { 32{ round_ctr_rst }} & \w_mem_inst.w_mem08_new_r ;
  assign block_x7 [255:224] = \w_mem_inst.w_mem08_new_x ;
  logic [32-1:0] _100__c0 ;
  logic [32-1:0] _100__r0 ;
  logic [32-1:0] _100__x0 ;
  assign _100__c0 = { 32{ !round_ctr_rst }} ;
  assign _100__r0 = { 32{ !round_ctr_rst }} & \w_mem_inst.w_mem08_new_r ;
  assign _100__x0 = \w_mem_inst.w_mem08_new_x ;
  assign block_c7 [511:256] = 0;
  assign block_c7 [223:0] = 0;
  assign block_r7 [511:256] = 0;
  assign block_r7 [223:0] = 0;
  assign block_x7 [511:256] = 0;
  assign block_x7 [223:0] = 0;
  assign \w_mem_inst.w_mem07_new = round_ctr_rst ? block[287:256] : _099_;
  logic [1-1:0] round_ctr_rst_c16 ;
  logic [1-1:0] round_ctr_rst_r16 ;
  logic [1-1:0] round_ctr_rst_x16 ;
  logic [32-1:0] round_ctr_rst_r16_tmp ;
  assign round_ctr_rst_c16 = 1;
  assign round_ctr_rst_x16 = | \w_mem_inst.w_mem07_new_x ;
  assign round_ctr_rst_r16 = | round_ctr_rst_r16_tmp ;
  assign \w_mem_inst.w_mem07_new_t = round_ctr_rst ? ( { 32{ round_ctr_rst_t }} | block_t [287:256] ) : ( { 32{ round_ctr_rst_t }} | _099__t );
  assign round_ctr_rst_r16_tmp = \w_mem_inst.w_mem07_new_r | ( { 32{ round_ctr_rst }} & block_t [287:256] | { 32{ !round_ctr_rst }} & _099__t );
  logic [512-1:0] block_c8 ;
  logic [512-1:0] block_r8 ;
  logic [512-1:0] block_x8 ;
  assign block_c8 [287:256] = { 32{ round_ctr_rst }};
  assign block_r8 [287:256] = { 32{ round_ctr_rst }} & \w_mem_inst.w_mem07_new_r ;
  assign block_x8 [287:256] = \w_mem_inst.w_mem07_new_x ;
  logic [32-1:0] _099__c0 ;
  logic [32-1:0] _099__r0 ;
  logic [32-1:0] _099__x0 ;
  assign _099__c0 = { 32{ !round_ctr_rst }} ;
  assign _099__r0 = { 32{ !round_ctr_rst }} & \w_mem_inst.w_mem07_new_r ;
  assign _099__x0 = \w_mem_inst.w_mem07_new_x ;
  assign block_c8 [511:288] = 0;
  assign block_c8 [255:0] = 0;
  assign block_r8 [511:288] = 0;
  assign block_r8 [255:0] = 0;
  assign block_x8 [511:288] = 0;
  assign block_x8 [255:0] = 0;
  assign \w_mem_inst.w_mem06_new = round_ctr_rst ? block[319:288] : _098_;
  logic [1-1:0] round_ctr_rst_c17 ;
  logic [1-1:0] round_ctr_rst_r17 ;
  logic [1-1:0] round_ctr_rst_x17 ;
  logic [32-1:0] round_ctr_rst_r17_tmp ;
  assign round_ctr_rst_c17 = 1;
  assign round_ctr_rst_x17 = | \w_mem_inst.w_mem06_new_x ;
  assign round_ctr_rst_r17 = | round_ctr_rst_r17_tmp ;
  assign \w_mem_inst.w_mem06_new_t = round_ctr_rst ? ( { 32{ round_ctr_rst_t }} | block_t [319:288] ) : ( { 32{ round_ctr_rst_t }} | _098__t );
  assign round_ctr_rst_r17_tmp = \w_mem_inst.w_mem06_new_r | ( { 32{ round_ctr_rst }} & block_t [319:288] | { 32{ !round_ctr_rst }} & _098__t );
  logic [512-1:0] block_c9 ;
  logic [512-1:0] block_r9 ;
  logic [512-1:0] block_x9 ;
  assign block_c9 [319:288] = { 32{ round_ctr_rst }};
  assign block_r9 [319:288] = { 32{ round_ctr_rst }} & \w_mem_inst.w_mem06_new_r ;
  assign block_x9 [319:288] = \w_mem_inst.w_mem06_new_x ;
  logic [32-1:0] _098__c0 ;
  logic [32-1:0] _098__r0 ;
  logic [32-1:0] _098__x0 ;
  assign _098__c0 = { 32{ !round_ctr_rst }} ;
  assign _098__r0 = { 32{ !round_ctr_rst }} & \w_mem_inst.w_mem06_new_r ;
  assign _098__x0 = \w_mem_inst.w_mem06_new_x ;
  assign block_c9 [511:320] = 0;
  assign block_c9 [287:0] = 0;
  assign block_r9 [511:320] = 0;
  assign block_r9 [287:0] = 0;
  assign block_x9 [511:320] = 0;
  assign block_x9 [287:0] = 0;
  assign \w_mem_inst.w_mem05_new = round_ctr_rst ? block[351:320] : _097_;
  logic [1-1:0] round_ctr_rst_c18 ;
  logic [1-1:0] round_ctr_rst_r18 ;
  logic [1-1:0] round_ctr_rst_x18 ;
  logic [32-1:0] round_ctr_rst_r18_tmp ;
  assign round_ctr_rst_c18 = 1;
  assign round_ctr_rst_x18 = | \w_mem_inst.w_mem05_new_x ;
  assign round_ctr_rst_r18 = | round_ctr_rst_r18_tmp ;
  assign \w_mem_inst.w_mem05_new_t = round_ctr_rst ? ( { 32{ round_ctr_rst_t }} | block_t [351:320] ) : ( { 32{ round_ctr_rst_t }} | _097__t );
  assign round_ctr_rst_r18_tmp = \w_mem_inst.w_mem05_new_r | ( { 32{ round_ctr_rst }} & block_t [351:320] | { 32{ !round_ctr_rst }} & _097__t );
  logic [512-1:0] block_c10 ;
  logic [512-1:0] block_r10 ;
  logic [512-1:0] block_x10 ;
  assign block_c10 [351:320] = { 32{ round_ctr_rst }};
  assign block_r10 [351:320] = { 32{ round_ctr_rst }} & \w_mem_inst.w_mem05_new_r ;
  assign block_x10 [351:320] = \w_mem_inst.w_mem05_new_x ;
  logic [32-1:0] _097__c0 ;
  logic [32-1:0] _097__r0 ;
  logic [32-1:0] _097__x0 ;
  assign _097__c0 = { 32{ !round_ctr_rst }} ;
  assign _097__r0 = { 32{ !round_ctr_rst }} & \w_mem_inst.w_mem05_new_r ;
  assign _097__x0 = \w_mem_inst.w_mem05_new_x ;
  assign block_c10 [511:352] = 0;
  assign block_c10 [319:0] = 0;
  assign block_r10 [511:352] = 0;
  assign block_r10 [319:0] = 0;
  assign block_x10 [511:352] = 0;
  assign block_x10 [319:0] = 0;
  assign \w_mem_inst.w_mem04_new = round_ctr_rst ? block[383:352] : _096_;
  logic [1-1:0] round_ctr_rst_c19 ;
  logic [1-1:0] round_ctr_rst_r19 ;
  logic [1-1:0] round_ctr_rst_x19 ;
  logic [32-1:0] round_ctr_rst_r19_tmp ;
  assign round_ctr_rst_c19 = 1;
  assign round_ctr_rst_x19 = | \w_mem_inst.w_mem04_new_x ;
  assign round_ctr_rst_r19 = | round_ctr_rst_r19_tmp ;
  assign \w_mem_inst.w_mem04_new_t = round_ctr_rst ? ( { 32{ round_ctr_rst_t }} | block_t [383:352] ) : ( { 32{ round_ctr_rst_t }} | _096__t );
  assign round_ctr_rst_r19_tmp = \w_mem_inst.w_mem04_new_r | ( { 32{ round_ctr_rst }} & block_t [383:352] | { 32{ !round_ctr_rst }} & _096__t );
  logic [512-1:0] block_c11 ;
  logic [512-1:0] block_r11 ;
  logic [512-1:0] block_x11 ;
  assign block_c11 [383:352] = { 32{ round_ctr_rst }};
  assign block_r11 [383:352] = { 32{ round_ctr_rst }} & \w_mem_inst.w_mem04_new_r ;
  assign block_x11 [383:352] = \w_mem_inst.w_mem04_new_x ;
  logic [32-1:0] _096__c0 ;
  logic [32-1:0] _096__r0 ;
  logic [32-1:0] _096__x0 ;
  assign _096__c0 = { 32{ !round_ctr_rst }} ;
  assign _096__r0 = { 32{ !round_ctr_rst }} & \w_mem_inst.w_mem04_new_r ;
  assign _096__x0 = \w_mem_inst.w_mem04_new_x ;
  assign block_c11 [511:384] = 0;
  assign block_c11 [351:0] = 0;
  assign block_r11 [511:384] = 0;
  assign block_r11 [351:0] = 0;
  assign block_x11 [511:384] = 0;
  assign block_x11 [351:0] = 0;
  assign \w_mem_inst.w_mem03_new = round_ctr_rst ? block[415:384] : _095_;
  logic [1-1:0] round_ctr_rst_c20 ;
  logic [1-1:0] round_ctr_rst_r20 ;
  logic [1-1:0] round_ctr_rst_x20 ;
  logic [32-1:0] round_ctr_rst_r20_tmp ;
  assign round_ctr_rst_c20 = 1;
  assign round_ctr_rst_x20 = | \w_mem_inst.w_mem03_new_x ;
  assign round_ctr_rst_r20 = | round_ctr_rst_r20_tmp ;
  assign \w_mem_inst.w_mem03_new_t = round_ctr_rst ? ( { 32{ round_ctr_rst_t }} | block_t [415:384] ) : ( { 32{ round_ctr_rst_t }} | _095__t );
  assign round_ctr_rst_r20_tmp = \w_mem_inst.w_mem03_new_r | ( { 32{ round_ctr_rst }} & block_t [415:384] | { 32{ !round_ctr_rst }} & _095__t );
  logic [512-1:0] block_c12 ;
  logic [512-1:0] block_r12 ;
  logic [512-1:0] block_x12 ;
  assign block_c12 [415:384] = { 32{ round_ctr_rst }};
  assign block_r12 [415:384] = { 32{ round_ctr_rst }} & \w_mem_inst.w_mem03_new_r ;
  assign block_x12 [415:384] = \w_mem_inst.w_mem03_new_x ;
  logic [32-1:0] _095__c0 ;
  logic [32-1:0] _095__r0 ;
  logic [32-1:0] _095__x0 ;
  assign _095__c0 = { 32{ !round_ctr_rst }} ;
  assign _095__r0 = { 32{ !round_ctr_rst }} & \w_mem_inst.w_mem03_new_r ;
  assign _095__x0 = \w_mem_inst.w_mem03_new_x ;
  assign block_c12 [511:416] = 0;
  assign block_c12 [383:0] = 0;
  assign block_r12 [511:416] = 0;
  assign block_r12 [383:0] = 0;
  assign block_x12 [511:416] = 0;
  assign block_x12 [383:0] = 0;
  assign \w_mem_inst.w_mem02_new = round_ctr_rst ? block[447:416] : _094_;
  logic [1-1:0] round_ctr_rst_c21 ;
  logic [1-1:0] round_ctr_rst_r21 ;
  logic [1-1:0] round_ctr_rst_x21 ;
  logic [32-1:0] round_ctr_rst_r21_tmp ;
  assign round_ctr_rst_c21 = 1;
  assign round_ctr_rst_x21 = | \w_mem_inst.w_mem02_new_x ;
  assign round_ctr_rst_r21 = | round_ctr_rst_r21_tmp ;
  assign \w_mem_inst.w_mem02_new_t = round_ctr_rst ? ( { 32{ round_ctr_rst_t }} | block_t [447:416] ) : ( { 32{ round_ctr_rst_t }} | _094__t );
  assign round_ctr_rst_r21_tmp = \w_mem_inst.w_mem02_new_r | ( { 32{ round_ctr_rst }} & block_t [447:416] | { 32{ !round_ctr_rst }} & _094__t );
  logic [512-1:0] block_c13 ;
  logic [512-1:0] block_r13 ;
  logic [512-1:0] block_x13 ;
  assign block_c13 [447:416] = { 32{ round_ctr_rst }};
  assign block_r13 [447:416] = { 32{ round_ctr_rst }} & \w_mem_inst.w_mem02_new_r ;
  assign block_x13 [447:416] = \w_mem_inst.w_mem02_new_x ;
  logic [32-1:0] _094__c0 ;
  logic [32-1:0] _094__r0 ;
  logic [32-1:0] _094__x0 ;
  assign _094__c0 = { 32{ !round_ctr_rst }} ;
  assign _094__r0 = { 32{ !round_ctr_rst }} & \w_mem_inst.w_mem02_new_r ;
  assign _094__x0 = \w_mem_inst.w_mem02_new_x ;
  assign block_c13 [511:448] = 0;
  assign block_c13 [415:0] = 0;
  assign block_r13 [511:448] = 0;
  assign block_r13 [415:0] = 0;
  assign block_x13 [511:448] = 0;
  assign block_x13 [415:0] = 0;
  assign \w_mem_inst.w_mem01_new = round_ctr_rst ? block[479:448] : _093_;
  logic [1-1:0] round_ctr_rst_c22 ;
  logic [1-1:0] round_ctr_rst_r22 ;
  logic [1-1:0] round_ctr_rst_x22 ;
  logic [32-1:0] round_ctr_rst_r22_tmp ;
  assign round_ctr_rst_c22 = 1;
  assign round_ctr_rst_x22 = | \w_mem_inst.w_mem01_new_x ;
  assign round_ctr_rst_r22 = | round_ctr_rst_r22_tmp ;
  assign \w_mem_inst.w_mem01_new_t = round_ctr_rst ? ( { 32{ round_ctr_rst_t }} | block_t [479:448] ) : ( { 32{ round_ctr_rst_t }} | _093__t );
  assign round_ctr_rst_r22_tmp = \w_mem_inst.w_mem01_new_r | ( { 32{ round_ctr_rst }} & block_t [479:448] | { 32{ !round_ctr_rst }} & _093__t );
  logic [512-1:0] block_c14 ;
  logic [512-1:0] block_r14 ;
  logic [512-1:0] block_x14 ;
  assign block_c14 [479:448] = { 32{ round_ctr_rst }};
  assign block_r14 [479:448] = { 32{ round_ctr_rst }} & \w_mem_inst.w_mem01_new_r ;
  assign block_x14 [479:448] = \w_mem_inst.w_mem01_new_x ;
  logic [32-1:0] _093__c0 ;
  logic [32-1:0] _093__r0 ;
  logic [32-1:0] _093__x0 ;
  assign _093__c0 = { 32{ !round_ctr_rst }} ;
  assign _093__r0 = { 32{ !round_ctr_rst }} & \w_mem_inst.w_mem01_new_r ;
  assign _093__x0 = \w_mem_inst.w_mem01_new_x ;
  assign block_c14 [511:480] = 0;
  assign block_c14 [447:0] = 0;
  assign block_r14 [511:480] = 0;
  assign block_r14 [447:0] = 0;
  assign block_x14 [511:480] = 0;
  assign block_x14 [447:0] = 0;
  assign \w_mem_inst.w_mem00_new = round_ctr_rst ? block[511:480] : _092_;
  logic [1-1:0] round_ctr_rst_c23 ;
  logic [1-1:0] round_ctr_rst_r23 ;
  logic [1-1:0] round_ctr_rst_x23 ;
  logic [32-1:0] round_ctr_rst_r23_tmp ;
  assign round_ctr_rst_c23 = 1;
  assign round_ctr_rst_x23 = | \w_mem_inst.w_mem00_new_x ;
  assign round_ctr_rst_r23 = | round_ctr_rst_r23_tmp ;
  assign \w_mem_inst.w_mem00_new_t = round_ctr_rst ? ( { 32{ round_ctr_rst_t }} | block_t [511:480] ) : ( { 32{ round_ctr_rst_t }} | _092__t );
  assign round_ctr_rst_r23_tmp = \w_mem_inst.w_mem00_new_r | ( { 32{ round_ctr_rst }} & block_t [511:480] | { 32{ !round_ctr_rst }} & _092__t );
  logic [512-1:0] block_c15 ;
  logic [512-1:0] block_r15 ;
  logic [512-1:0] block_x15 ;
  assign block_c15 [511:480] = { 32{ round_ctr_rst }};
  assign block_r15 [511:480] = { 32{ round_ctr_rst }} & \w_mem_inst.w_mem00_new_r ;
  assign block_x15 [511:480] = \w_mem_inst.w_mem00_new_x ;
  logic [32-1:0] _092__c0 ;
  logic [32-1:0] _092__r0 ;
  logic [32-1:0] _092__x0 ;
  assign _092__c0 = { 32{ !round_ctr_rst }} ;
  assign _092__r0 = { 32{ !round_ctr_rst }} & \w_mem_inst.w_mem00_new_r ;
  assign _092__x0 = \w_mem_inst.w_mem00_new_x ;
  assign block_c15 [479:0] = 0;
  assign block_r15 [479:0] = 0;
  assign block_x15 [479:0] = 0;
  logic [511:0] fangyuan17;
  logic [511:0] fangyuan17_t ;
  logic [511:0] fangyuan17_r ;
  logic [511:0] fangyuan17_c ;
  logic [511:0] fangyuan17_x ;
  assign fangyuan17 = { \w_mem_inst.w_mem[0] , \w_mem_inst.w_mem[1] , \w_mem_inst.w_mem[2] , \w_mem_inst.w_mem[3] , \w_mem_inst.w_mem[4] , \w_mem_inst.w_mem[5] , \w_mem_inst.w_mem[6] , \w_mem_inst.w_mem[7] , \w_mem_inst.w_mem[8] , \w_mem_inst.w_mem[9] , \w_mem_inst.w_mem[10] , \w_mem_inst.w_mem[11] , \w_mem_inst.w_mem[12] , \w_mem_inst.w_mem[13] , \w_mem_inst.w_mem[14] , \w_mem_inst.w_mem[15] };
  assign fangyuan17_t = {  \w_mem_inst.w_mem[0]_t , \w_mem_inst.w_mem[1]_t , \w_mem_inst.w_mem[2]_t , \w_mem_inst.w_mem[3]_t , \w_mem_inst.w_mem[4]_t , \w_mem_inst.w_mem[5]_t , \w_mem_inst.w_mem[6]_t , \w_mem_inst.w_mem[7]_t , \w_mem_inst.w_mem[8]_t , \w_mem_inst.w_mem[9]_t , \w_mem_inst.w_mem[10]_t , \w_mem_inst.w_mem[11]_t , \w_mem_inst.w_mem[12]_t , \w_mem_inst.w_mem[13]_t , \w_mem_inst.w_mem[14]_t , \w_mem_inst.w_mem[15]_t  };
  logic [32-1:0] \w_mem_inst.w_mem[0]_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem[0]_x0 ;
  logic [32-1:0] \w_mem_inst.w_mem[0]_c0 ;
  assign \w_mem_inst.w_mem[0]_r0 = fangyuan17_r [511:480] ;
  assign \w_mem_inst.w_mem[0]_x0 = fangyuan17_x [511:480] ;
  assign \w_mem_inst.w_mem[0]_c0 = fangyuan17_c [511:480] ;
  logic [32-1:0] \w_mem_inst.w_mem[1]_r1 ;
  logic [32-1:0] \w_mem_inst.w_mem[1]_x1 ;
  logic [32-1:0] \w_mem_inst.w_mem[1]_c1 ;
  assign \w_mem_inst.w_mem[1]_r1 = fangyuan17_r [479:448] ;
  assign \w_mem_inst.w_mem[1]_x1 = fangyuan17_x [479:448] ;
  assign \w_mem_inst.w_mem[1]_c1 = fangyuan17_c [479:448] ;
  logic [32-1:0] \w_mem_inst.w_mem[2]_r1 ;
  logic [32-1:0] \w_mem_inst.w_mem[2]_x1 ;
  logic [32-1:0] \w_mem_inst.w_mem[2]_c1 ;
  assign \w_mem_inst.w_mem[2]_r1 = fangyuan17_r [447:416] ;
  assign \w_mem_inst.w_mem[2]_x1 = fangyuan17_x [447:416] ;
  assign \w_mem_inst.w_mem[2]_c1 = fangyuan17_c [447:416] ;
  logic [32-1:0] \w_mem_inst.w_mem[3]_r1 ;
  logic [32-1:0] \w_mem_inst.w_mem[3]_x1 ;
  logic [32-1:0] \w_mem_inst.w_mem[3]_c1 ;
  assign \w_mem_inst.w_mem[3]_r1 = fangyuan17_r [415:384] ;
  assign \w_mem_inst.w_mem[3]_x1 = fangyuan17_x [415:384] ;
  assign \w_mem_inst.w_mem[3]_c1 = fangyuan17_c [415:384] ;
  logic [32-1:0] \w_mem_inst.w_mem[4]_r1 ;
  logic [32-1:0] \w_mem_inst.w_mem[4]_x1 ;
  logic [32-1:0] \w_mem_inst.w_mem[4]_c1 ;
  assign \w_mem_inst.w_mem[4]_r1 = fangyuan17_r [383:352] ;
  assign \w_mem_inst.w_mem[4]_x1 = fangyuan17_x [383:352] ;
  assign \w_mem_inst.w_mem[4]_c1 = fangyuan17_c [383:352] ;
  logic [32-1:0] \w_mem_inst.w_mem[5]_r1 ;
  logic [32-1:0] \w_mem_inst.w_mem[5]_x1 ;
  logic [32-1:0] \w_mem_inst.w_mem[5]_c1 ;
  assign \w_mem_inst.w_mem[5]_r1 = fangyuan17_r [351:320] ;
  assign \w_mem_inst.w_mem[5]_x1 = fangyuan17_x [351:320] ;
  assign \w_mem_inst.w_mem[5]_c1 = fangyuan17_c [351:320] ;
  logic [32-1:0] \w_mem_inst.w_mem[6]_r1 ;
  logic [32-1:0] \w_mem_inst.w_mem[6]_x1 ;
  logic [32-1:0] \w_mem_inst.w_mem[6]_c1 ;
  assign \w_mem_inst.w_mem[6]_r1 = fangyuan17_r [319:288] ;
  assign \w_mem_inst.w_mem[6]_x1 = fangyuan17_x [319:288] ;
  assign \w_mem_inst.w_mem[6]_c1 = fangyuan17_c [319:288] ;
  logic [32-1:0] \w_mem_inst.w_mem[7]_r1 ;
  logic [32-1:0] \w_mem_inst.w_mem[7]_x1 ;
  logic [32-1:0] \w_mem_inst.w_mem[7]_c1 ;
  assign \w_mem_inst.w_mem[7]_r1 = fangyuan17_r [287:256] ;
  assign \w_mem_inst.w_mem[7]_x1 = fangyuan17_x [287:256] ;
  assign \w_mem_inst.w_mem[7]_c1 = fangyuan17_c [287:256] ;
  logic [32-1:0] \w_mem_inst.w_mem[8]_r1 ;
  logic [32-1:0] \w_mem_inst.w_mem[8]_x1 ;
  logic [32-1:0] \w_mem_inst.w_mem[8]_c1 ;
  assign \w_mem_inst.w_mem[8]_r1 = fangyuan17_r [255:224] ;
  assign \w_mem_inst.w_mem[8]_x1 = fangyuan17_x [255:224] ;
  assign \w_mem_inst.w_mem[8]_c1 = fangyuan17_c [255:224] ;
  logic [32-1:0] \w_mem_inst.w_mem[9]_r1 ;
  logic [32-1:0] \w_mem_inst.w_mem[9]_x1 ;
  logic [32-1:0] \w_mem_inst.w_mem[9]_c1 ;
  assign \w_mem_inst.w_mem[9]_r1 = fangyuan17_r [223:192] ;
  assign \w_mem_inst.w_mem[9]_x1 = fangyuan17_x [223:192] ;
  assign \w_mem_inst.w_mem[9]_c1 = fangyuan17_c [223:192] ;
  logic [32-1:0] \w_mem_inst.w_mem[10]_r1 ;
  logic [32-1:0] \w_mem_inst.w_mem[10]_x1 ;
  logic [32-1:0] \w_mem_inst.w_mem[10]_c1 ;
  assign \w_mem_inst.w_mem[10]_r1 = fangyuan17_r [191:160] ;
  assign \w_mem_inst.w_mem[10]_x1 = fangyuan17_x [191:160] ;
  assign \w_mem_inst.w_mem[10]_c1 = fangyuan17_c [191:160] ;
  logic [32-1:0] \w_mem_inst.w_mem[11]_r1 ;
  logic [32-1:0] \w_mem_inst.w_mem[11]_x1 ;
  logic [32-1:0] \w_mem_inst.w_mem[11]_c1 ;
  assign \w_mem_inst.w_mem[11]_r1 = fangyuan17_r [159:128] ;
  assign \w_mem_inst.w_mem[11]_x1 = fangyuan17_x [159:128] ;
  assign \w_mem_inst.w_mem[11]_c1 = fangyuan17_c [159:128] ;
  logic [32-1:0] \w_mem_inst.w_mem[12]_r1 ;
  logic [32-1:0] \w_mem_inst.w_mem[12]_x1 ;
  logic [32-1:0] \w_mem_inst.w_mem[12]_c1 ;
  assign \w_mem_inst.w_mem[12]_r1 = fangyuan17_r [127:96] ;
  assign \w_mem_inst.w_mem[12]_x1 = fangyuan17_x [127:96] ;
  assign \w_mem_inst.w_mem[12]_c1 = fangyuan17_c [127:96] ;
  logic [32-1:0] \w_mem_inst.w_mem[13]_r1 ;
  logic [32-1:0] \w_mem_inst.w_mem[13]_x1 ;
  logic [32-1:0] \w_mem_inst.w_mem[13]_c1 ;
  assign \w_mem_inst.w_mem[13]_r1 = fangyuan17_r [95:64] ;
  assign \w_mem_inst.w_mem[13]_x1 = fangyuan17_x [95:64] ;
  assign \w_mem_inst.w_mem[13]_c1 = fangyuan17_c [95:64] ;
  logic [32-1:0] \w_mem_inst.w_mem[14]_r1 ;
  logic [32-1:0] \w_mem_inst.w_mem[14]_x1 ;
  logic [32-1:0] \w_mem_inst.w_mem[14]_c1 ;
  assign \w_mem_inst.w_mem[14]_r1 = fangyuan17_r [63:32] ;
  assign \w_mem_inst.w_mem[14]_x1 = fangyuan17_x [63:32] ;
  assign \w_mem_inst.w_mem[14]_c1 = fangyuan17_c [63:32] ;
  logic [32-1:0] \w_mem_inst.w_mem[15]_r1 ;
  logic [32-1:0] \w_mem_inst.w_mem[15]_x1 ;
  logic [32-1:0] \w_mem_inst.w_mem[15]_c1 ;
  assign \w_mem_inst.w_mem[15]_r1 = fangyuan17_r [31:0] ;
  assign \w_mem_inst.w_mem[15]_x1 = fangyuan17_x [31:0] ;
  assign \w_mem_inst.w_mem[15]_c1 = fangyuan17_c [31:0] ;
  logic [15:0] fangyuan18;
  logic [15:0] fangyuan18_t ;
  logic [15:0] fangyuan18_r ;
  logic [15:0] fangyuan18_c ;
  logic [15:0] fangyuan18_x ;
  assign fangyuan18 = { _130_, _129_, _128_, _127_, _126_, _125_, _124_, _123_, _122_, _121_, _120_, _119_, _118_, _117_, _116_, _115_ };
  assign fangyuan18_t = {  _130__t , _129__t , _128__t , _127__t , _126__t , _125__t , _124__t , _123__t , _122__t , _121__t , _120__t , _119__t , _118__t , _117__t , _116__t , _115__t  };
  logic [1-1:0] _130__r0 ;
  logic [1-1:0] _130__x0 ;
  logic [1-1:0] _130__c0 ;
  assign _130__r0 = fangyuan18_r [15:15] ;
  assign _130__x0 = fangyuan18_x [15:15] ;
  assign _130__c0 = fangyuan18_c [15:15] ;
  logic [1-1:0] _129__r0 ;
  logic [1-1:0] _129__x0 ;
  logic [1-1:0] _129__c0 ;
  assign _129__r0 = fangyuan18_r [14:14] ;
  assign _129__x0 = fangyuan18_x [14:14] ;
  assign _129__c0 = fangyuan18_c [14:14] ;
  logic [1-1:0] _128__r0 ;
  logic [1-1:0] _128__x0 ;
  logic [1-1:0] _128__c0 ;
  assign _128__r0 = fangyuan18_r [13:13] ;
  assign _128__x0 = fangyuan18_x [13:13] ;
  assign _128__c0 = fangyuan18_c [13:13] ;
  logic [1-1:0] _127__r0 ;
  logic [1-1:0] _127__x0 ;
  logic [1-1:0] _127__c0 ;
  assign _127__r0 = fangyuan18_r [12:12] ;
  assign _127__x0 = fangyuan18_x [12:12] ;
  assign _127__c0 = fangyuan18_c [12:12] ;
  logic [1-1:0] _126__r0 ;
  logic [1-1:0] _126__x0 ;
  logic [1-1:0] _126__c0 ;
  assign _126__r0 = fangyuan18_r [11:11] ;
  assign _126__x0 = fangyuan18_x [11:11] ;
  assign _126__c0 = fangyuan18_c [11:11] ;
  logic [1-1:0] _125__r0 ;
  logic [1-1:0] _125__x0 ;
  logic [1-1:0] _125__c0 ;
  assign _125__r0 = fangyuan18_r [10:10] ;
  assign _125__x0 = fangyuan18_x [10:10] ;
  assign _125__c0 = fangyuan18_c [10:10] ;
  logic [1-1:0] _124__r0 ;
  logic [1-1:0] _124__x0 ;
  logic [1-1:0] _124__c0 ;
  assign _124__r0 = fangyuan18_r [9:9] ;
  assign _124__x0 = fangyuan18_x [9:9] ;
  assign _124__c0 = fangyuan18_c [9:9] ;
  logic [1-1:0] _123__r0 ;
  logic [1-1:0] _123__x0 ;
  logic [1-1:0] _123__c0 ;
  assign _123__r0 = fangyuan18_r [8:8] ;
  assign _123__x0 = fangyuan18_x [8:8] ;
  assign _123__c0 = fangyuan18_c [8:8] ;
  logic [1-1:0] _122__r0 ;
  logic [1-1:0] _122__x0 ;
  logic [1-1:0] _122__c0 ;
  assign _122__r0 = fangyuan18_r [7:7] ;
  assign _122__x0 = fangyuan18_x [7:7] ;
  assign _122__c0 = fangyuan18_c [7:7] ;
  logic [1-1:0] _121__r0 ;
  logic [1-1:0] _121__x0 ;
  logic [1-1:0] _121__c0 ;
  assign _121__r0 = fangyuan18_r [6:6] ;
  assign _121__x0 = fangyuan18_x [6:6] ;
  assign _121__c0 = fangyuan18_c [6:6] ;
  logic [1-1:0] _120__r0 ;
  logic [1-1:0] _120__x0 ;
  logic [1-1:0] _120__c0 ;
  assign _120__r0 = fangyuan18_r [5:5] ;
  assign _120__x0 = fangyuan18_x [5:5] ;
  assign _120__c0 = fangyuan18_c [5:5] ;
  logic [1-1:0] _119__r0 ;
  logic [1-1:0] _119__x0 ;
  logic [1-1:0] _119__c0 ;
  assign _119__r0 = fangyuan18_r [4:4] ;
  assign _119__x0 = fangyuan18_x [4:4] ;
  assign _119__c0 = fangyuan18_c [4:4] ;
  logic [1-1:0] _118__r0 ;
  logic [1-1:0] _118__x0 ;
  logic [1-1:0] _118__c0 ;
  assign _118__r0 = fangyuan18_r [3:3] ;
  assign _118__x0 = fangyuan18_x [3:3] ;
  assign _118__c0 = fangyuan18_c [3:3] ;
  logic [1-1:0] _117__r0 ;
  logic [1-1:0] _117__x0 ;
  logic [1-1:0] _117__c0 ;
  assign _117__r0 = fangyuan18_r [2:2] ;
  assign _117__x0 = fangyuan18_x [2:2] ;
  assign _117__c0 = fangyuan18_c [2:2] ;
  logic [1-1:0] _116__r0 ;
  logic [1-1:0] _116__x0 ;
  logic [1-1:0] _116__c0 ;
  assign _116__r0 = fangyuan18_r [1:1] ;
  assign _116__x0 = fangyuan18_x [1:1] ;
  assign _116__c0 = fangyuan18_c [1:1] ;
  logic [1-1:0] _115__r0 ;
  logic [1-1:0] _115__x0 ;
  logic [1-1:0] _115__c0 ;
  assign _115__r0 = fangyuan18_r [0:0] ;
  assign _115__x0 = fangyuan18_x [0:0] ;
  assign _115__c0 = fangyuan18_c [0:0] ;
  always @(32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx or fangyuan17 or fangyuan18) begin
    casez (fangyuan18)
      16'b???????????????1 :
        _089_ = fangyuan17 [31:0] ;
      16'b??????????????1? :
        _089_ = fangyuan17 [63:32] ;
      16'b?????????????1?? :
        _089_ = fangyuan17 [95:64] ;
      16'b????????????1??? :
        _089_ = fangyuan17 [127:96] ;
      16'b???????????1???? :
        _089_ = fangyuan17 [159:128] ;
      16'b??????????1????? :
        _089_ = fangyuan17 [191:160] ;
      16'b?????????1?????? :
        _089_ = fangyuan17 [223:192] ;
      16'b????????1??????? :
        _089_ = fangyuan17 [255:224] ;
      16'b???????1???????? :
        _089_ = fangyuan17 [287:256] ;
      16'b??????1????????? :
        _089_ = fangyuan17 [319:288] ;
      16'b?????1?????????? :
        _089_ = fangyuan17 [351:320] ;
      16'b????1??????????? :
        _089_ = fangyuan17 [383:352] ;
      16'b???1???????????? :
        _089_ = fangyuan17 [415:384] ;
      16'b??1????????????? :
        _089_ = fangyuan17 [447:416] ;
      16'b?1?????????????? :
        _089_ = fangyuan17 [479:448] ;
      16'b1??????????????? :
        _089_ = fangyuan17 [511:480] ;
      default:
        _089_ = 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ;
    endcase
  end
    always @( fangyuan17_t or fangyuan18_t or fangyuan18 ) begin
      casez (fangyuan18)
        16'b???????????????1 :
          _089__t = fangyuan17_t  [31:0] | { 32{ | fangyuan18_t }} ;
        16'b??????????????1? :
          _089__t = fangyuan17_t  [63:32] | { 32{ | fangyuan18_t }} ;
        16'b?????????????1?? :
          _089__t = fangyuan17_t  [95:64] | { 32{ | fangyuan18_t }} ;
        16'b????????????1??? :
          _089__t = fangyuan17_t  [127:96] | { 32{ | fangyuan18_t }} ;
        16'b???????????1???? :
          _089__t = fangyuan17_t  [159:128] | { 32{ | fangyuan18_t }} ;
        16'b??????????1????? :
          _089__t = fangyuan17_t  [191:160] | { 32{ | fangyuan18_t }} ;
        16'b?????????1?????? :
          _089__t = fangyuan17_t  [223:192] | { 32{ | fangyuan18_t }} ;
        16'b????????1??????? :
          _089__t = fangyuan17_t  [255:224] | { 32{ | fangyuan18_t }} ;
        16'b???????1???????? :
          _089__t = fangyuan17_t  [287:256] | { 32{ | fangyuan18_t }} ;
        16'b??????1????????? :
          _089__t = fangyuan17_t  [319:288] | { 32{ | fangyuan18_t }} ;
        16'b?????1?????????? :
          _089__t = fangyuan17_t  [351:320] | { 32{ | fangyuan18_t }} ;
        16'b????1??????????? :
          _089__t = fangyuan17_t  [383:352] | { 32{ | fangyuan18_t }} ;
        16'b???1???????????? :
          _089__t = fangyuan17_t  [415:384] | { 32{ | fangyuan18_t }} ;
        16'b??1????????????? :
          _089__t = fangyuan17_t  [447:416] | { 32{ | fangyuan18_t }} ;
        16'b?1?????????????? :
          _089__t = fangyuan17_t  [479:448] | { 32{ | fangyuan18_t }} ;
        16'b1??????????????? :
          _089__t = fangyuan17_t  [511:480] | { 32{ | fangyuan18_t }} ;
        default:
          _089__t = { 32{ | fangyuan18_t }} ;
      endcase
    end
    reg [16-1:0] fangyuan18_r0 ;
    reg [16-1:0] fangyuan18_x0 ;
    reg [16-1:0] fangyuan18_c0 ;
    reg [512-1:0] fangyuan17_r0 ;
    reg [512-1:0] fangyuan17_x0 ;
    reg [512-1:0] fangyuan17_c0 ;
    always @( _089__r or fangyuan18 ) begin
      fangyuan18_r0 = { 16{ | _089__r }} ;
      fangyuan17_r0 = 0 ;
      casez (fangyuan18)
        16'b???????????????1 :
          fangyuan17_r0 [31:0] = _089__r ;
        16'b??????????????1? :
          fangyuan17_r0 [63:32] = _089__r ;
        16'b?????????????1?? :
          fangyuan17_r0 [95:64] = _089__r ;
        16'b????????????1??? :
          fangyuan17_r0 [127:96] = _089__r ;
        16'b???????????1???? :
          fangyuan17_r0 [159:128] = _089__r ;
        16'b??????????1????? :
          fangyuan17_r0 [191:160] = _089__r ;
        16'b?????????1?????? :
          fangyuan17_r0 [223:192] = _089__r ;
        16'b????????1??????? :
          fangyuan17_r0 [255:224] = _089__r ;
        16'b???????1???????? :
          fangyuan17_r0 [287:256] = _089__r ;
        16'b??????1????????? :
          fangyuan17_r0 [319:288] = _089__r ;
        16'b?????1?????????? :
          fangyuan17_r0 [351:320] = _089__r ;
        16'b????1??????????? :
          fangyuan17_r0 [383:352] = _089__r ;
        16'b???1???????????? :
          fangyuan17_r0 [415:384] = _089__r ;
        16'b??1????????????? :
          fangyuan17_r0 [447:416] = _089__r ;
        16'b?1?????????????? :
          fangyuan17_r0 [479:448] = _089__r ;
        16'b1??????????????? :
          fangyuan17_r0 [511:480] = _089__r ;
      endcase
    end
    always @( _089__x or fangyuan18 ) begin
      fangyuan18_x0 = { 16{ | _089__x }} ;
      fangyuan17_x0 = 0 ;
      casez (fangyuan18)
        16'b???????????????1 :
          fangyuan17_x0 [31:0] = _089__x ;
        16'b??????????????1? :
          fangyuan17_x0 [63:32] = _089__x ;
        16'b?????????????1?? :
          fangyuan17_x0 [95:64] = _089__x ;
        16'b????????????1??? :
          fangyuan17_x0 [127:96] = _089__x ;
        16'b???????????1???? :
          fangyuan17_x0 [159:128] = _089__x ;
        16'b??????????1????? :
          fangyuan17_x0 [191:160] = _089__x ;
        16'b?????????1?????? :
          fangyuan17_x0 [223:192] = _089__x ;
        16'b????????1??????? :
          fangyuan17_x0 [255:224] = _089__x ;
        16'b???????1???????? :
          fangyuan17_x0 [287:256] = _089__x ;
        16'b??????1????????? :
          fangyuan17_x0 [319:288] = _089__x ;
        16'b?????1?????????? :
          fangyuan17_x0 [351:320] = _089__x ;
        16'b????1??????????? :
          fangyuan17_x0 [383:352] = _089__x ;
        16'b???1???????????? :
          fangyuan17_x0 [415:384] = _089__x ;
        16'b??1????????????? :
          fangyuan17_x0 [447:416] = _089__x ;
        16'b?1?????????????? :
          fangyuan17_x0 [479:448] = _089__x ;
        16'b1??????????????? :
          fangyuan17_x0 [511:480] = _089__x ;
      endcase
    end
    always @( _089__c or fangyuan18 ) begin
      fangyuan18_c0 = { 16{ 1'b1 }} ;
      fangyuan17_c0 = 0 ;
      casez (fangyuan18)
        16'b???????????????1 :
          fangyuan17_c0 [31:0] = _089__c ;
        16'b??????????????1? :
          fangyuan17_c0 [63:32] = _089__c ;
        16'b?????????????1?? :
          fangyuan17_c0 [95:64] = _089__c ;
        16'b????????????1??? :
          fangyuan17_c0 [127:96] = _089__c ;
        16'b???????????1???? :
          fangyuan17_c0 [159:128] = _089__c ;
        16'b??????????1????? :
          fangyuan17_c0 [191:160] = _089__c ;
        16'b?????????1?????? :
          fangyuan17_c0 [223:192] = _089__c ;
        16'b????????1??????? :
          fangyuan17_c0 [255:224] = _089__c ;
        16'b???????1???????? :
          fangyuan17_c0 [287:256] = _089__c ;
        16'b??????1????????? :
          fangyuan17_c0 [319:288] = _089__c ;
        16'b?????1?????????? :
          fangyuan17_c0 [351:320] = _089__c ;
        16'b????1??????????? :
          fangyuan17_c0 [383:352] = _089__c ;
        16'b???1???????????? :
          fangyuan17_c0 [415:384] = _089__c ;
        16'b??1????????????? :
          fangyuan17_c0 [447:416] = _089__c ;
        16'b?1?????????????? :
          fangyuan17_c0 [479:448] = _089__c ;
        16'b1??????????????? :
          fangyuan17_c0 [511:480] = _089__c ;
      endcase
    end
  assign _115_ = \w_mem_inst.w_ctr_reg [3:0] == 4'b1111;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_c4 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_r4 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_x4 ;
  assign _115__t = \w_mem_inst.w_ctr_reg_t [3:0] ;
  assign \w_mem_inst.w_ctr_reg_c4 [3:0] = { 4{ _115__c }} ;
  assign \w_mem_inst.w_ctr_reg_r4 [3:0] = { 4{ _115__r }} ;
  assign \w_mem_inst.w_ctr_reg_x4 [3:0] = { 4{ _115__x }} ;
  assign \w_mem_inst.w_ctr_reg_c4 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_r4 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_x4 [6:4] = 0;
  assign _116_ = \w_mem_inst.w_ctr_reg [3:0] == 4'b1110;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_c5 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_r5 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_x5 ;
  assign _116__t = \w_mem_inst.w_ctr_reg_t [3:0] ;
  assign \w_mem_inst.w_ctr_reg_c5 [3:0] = { 4{ _116__c }} ;
  assign \w_mem_inst.w_ctr_reg_r5 [3:0] = { 4{ _116__r }} ;
  assign \w_mem_inst.w_ctr_reg_x5 [3:0] = { 4{ _116__x }} ;
  assign \w_mem_inst.w_ctr_reg_c5 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_r5 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_x5 [6:4] = 0;
  assign _117_ = \w_mem_inst.w_ctr_reg [3:0] == 4'b1101;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_c6 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_r6 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_x6 ;
  assign _117__t = \w_mem_inst.w_ctr_reg_t [3:0] ;
  assign \w_mem_inst.w_ctr_reg_c6 [3:0] = { 4{ _117__c }} ;
  assign \w_mem_inst.w_ctr_reg_r6 [3:0] = { 4{ _117__r }} ;
  assign \w_mem_inst.w_ctr_reg_x6 [3:0] = { 4{ _117__x }} ;
  assign \w_mem_inst.w_ctr_reg_c6 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_r6 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_x6 [6:4] = 0;
  assign _118_ = \w_mem_inst.w_ctr_reg [3:0] == 4'b1100;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_c7 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_r7 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_x7 ;
  assign _118__t = \w_mem_inst.w_ctr_reg_t [3:0] ;
  assign \w_mem_inst.w_ctr_reg_c7 [3:0] = { 4{ _118__c }} ;
  assign \w_mem_inst.w_ctr_reg_r7 [3:0] = { 4{ _118__r }} ;
  assign \w_mem_inst.w_ctr_reg_x7 [3:0] = { 4{ _118__x }} ;
  assign \w_mem_inst.w_ctr_reg_c7 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_r7 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_x7 [6:4] = 0;
  assign _119_ = \w_mem_inst.w_ctr_reg [3:0] == 4'b1011;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_c8 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_r8 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_x8 ;
  assign _119__t = \w_mem_inst.w_ctr_reg_t [3:0] ;
  assign \w_mem_inst.w_ctr_reg_c8 [3:0] = { 4{ _119__c }} ;
  assign \w_mem_inst.w_ctr_reg_r8 [3:0] = { 4{ _119__r }} ;
  assign \w_mem_inst.w_ctr_reg_x8 [3:0] = { 4{ _119__x }} ;
  assign \w_mem_inst.w_ctr_reg_c8 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_r8 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_x8 [6:4] = 0;
  assign _120_ = \w_mem_inst.w_ctr_reg [3:0] == 4'b1010;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_c9 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_r9 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_x9 ;
  assign _120__t = \w_mem_inst.w_ctr_reg_t [3:0] ;
  assign \w_mem_inst.w_ctr_reg_c9 [3:0] = { 4{ _120__c }} ;
  assign \w_mem_inst.w_ctr_reg_r9 [3:0] = { 4{ _120__r }} ;
  assign \w_mem_inst.w_ctr_reg_x9 [3:0] = { 4{ _120__x }} ;
  assign \w_mem_inst.w_ctr_reg_c9 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_r9 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_x9 [6:4] = 0;
  assign _121_ = \w_mem_inst.w_ctr_reg [3:0] == 4'b1001;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_c10 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_r10 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_x10 ;
  assign _121__t = \w_mem_inst.w_ctr_reg_t [3:0] ;
  assign \w_mem_inst.w_ctr_reg_c10 [3:0] = { 4{ _121__c }} ;
  assign \w_mem_inst.w_ctr_reg_r10 [3:0] = { 4{ _121__r }} ;
  assign \w_mem_inst.w_ctr_reg_x10 [3:0] = { 4{ _121__x }} ;
  assign \w_mem_inst.w_ctr_reg_c10 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_r10 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_x10 [6:4] = 0;
  assign _122_ = \w_mem_inst.w_ctr_reg [3:0] == 4'b1000;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_c11 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_r11 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_x11 ;
  assign _122__t = \w_mem_inst.w_ctr_reg_t [3:0] ;
  assign \w_mem_inst.w_ctr_reg_c11 [3:0] = { 4{ _122__c }} ;
  assign \w_mem_inst.w_ctr_reg_r11 [3:0] = { 4{ _122__r }} ;
  assign \w_mem_inst.w_ctr_reg_x11 [3:0] = { 4{ _122__x }} ;
  assign \w_mem_inst.w_ctr_reg_c11 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_r11 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_x11 [6:4] = 0;
  assign _123_ = \w_mem_inst.w_ctr_reg [3:0] == 3'b111;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_c12 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_r12 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_x12 ;
  assign _123__t = \w_mem_inst.w_ctr_reg_t [3:0] ;
  assign \w_mem_inst.w_ctr_reg_c12 [3:0] = { 4{ _123__c }} ;
  assign \w_mem_inst.w_ctr_reg_r12 [3:0] = { 4{ _123__r }} ;
  assign \w_mem_inst.w_ctr_reg_x12 [3:0] = { 4{ _123__x }} ;
  assign \w_mem_inst.w_ctr_reg_c12 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_r12 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_x12 [6:4] = 0;
  assign _124_ = \w_mem_inst.w_ctr_reg [3:0] == 3'b110;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_c13 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_r13 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_x13 ;
  assign _124__t = \w_mem_inst.w_ctr_reg_t [3:0] ;
  assign \w_mem_inst.w_ctr_reg_c13 [3:0] = { 4{ _124__c }} ;
  assign \w_mem_inst.w_ctr_reg_r13 [3:0] = { 4{ _124__r }} ;
  assign \w_mem_inst.w_ctr_reg_x13 [3:0] = { 4{ _124__x }} ;
  assign \w_mem_inst.w_ctr_reg_c13 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_r13 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_x13 [6:4] = 0;
  assign _125_ = \w_mem_inst.w_ctr_reg [3:0] == 3'b101;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_c14 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_r14 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_x14 ;
  assign _125__t = \w_mem_inst.w_ctr_reg_t [3:0] ;
  assign \w_mem_inst.w_ctr_reg_c14 [3:0] = { 4{ _125__c }} ;
  assign \w_mem_inst.w_ctr_reg_r14 [3:0] = { 4{ _125__r }} ;
  assign \w_mem_inst.w_ctr_reg_x14 [3:0] = { 4{ _125__x }} ;
  assign \w_mem_inst.w_ctr_reg_c14 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_r14 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_x14 [6:4] = 0;
  assign _126_ = \w_mem_inst.w_ctr_reg [3:0] == 3'b100;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_c15 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_r15 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_x15 ;
  assign _126__t = \w_mem_inst.w_ctr_reg_t [3:0] ;
  assign \w_mem_inst.w_ctr_reg_c15 [3:0] = { 4{ _126__c }} ;
  assign \w_mem_inst.w_ctr_reg_r15 [3:0] = { 4{ _126__r }} ;
  assign \w_mem_inst.w_ctr_reg_x15 [3:0] = { 4{ _126__x }} ;
  assign \w_mem_inst.w_ctr_reg_c15 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_r15 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_x15 [6:4] = 0;
  assign _127_ = \w_mem_inst.w_ctr_reg [3:0] == 2'b11;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_c16 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_r16 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_x16 ;
  assign _127__t = \w_mem_inst.w_ctr_reg_t [3:0] ;
  assign \w_mem_inst.w_ctr_reg_c16 [3:0] = { 4{ _127__c }} ;
  assign \w_mem_inst.w_ctr_reg_r16 [3:0] = { 4{ _127__r }} ;
  assign \w_mem_inst.w_ctr_reg_x16 [3:0] = { 4{ _127__x }} ;
  assign \w_mem_inst.w_ctr_reg_c16 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_r16 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_x16 [6:4] = 0;
  assign _128_ = \w_mem_inst.w_ctr_reg [3:0] == 2'b10;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_c17 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_r17 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_x17 ;
  assign _128__t = \w_mem_inst.w_ctr_reg_t [3:0] ;
  assign \w_mem_inst.w_ctr_reg_c17 [3:0] = { 4{ _128__c }} ;
  assign \w_mem_inst.w_ctr_reg_r17 [3:0] = { 4{ _128__r }} ;
  assign \w_mem_inst.w_ctr_reg_x17 [3:0] = { 4{ _128__x }} ;
  assign \w_mem_inst.w_ctr_reg_c17 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_r17 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_x17 [6:4] = 0;
  assign _129_ = \w_mem_inst.w_ctr_reg [3:0] == 1'b1;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_c18 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_r18 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_x18 ;
  assign _129__t = \w_mem_inst.w_ctr_reg_t [3:0] ;
  assign \w_mem_inst.w_ctr_reg_c18 [3:0] = { 4{ _129__c }} ;
  assign \w_mem_inst.w_ctr_reg_r18 [3:0] = { 4{ _129__r }} ;
  assign \w_mem_inst.w_ctr_reg_x18 [3:0] = { 4{ _129__x }} ;
  assign \w_mem_inst.w_ctr_reg_c18 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_r18 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_x18 [6:4] = 0;
  assign _130_ = ! \w_mem_inst.w_ctr_reg [3:0];
  logic [7-1:0] \w_mem_inst.w_ctr_reg_c19 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_r19 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_x19 ;
  assign _130__t = \w_mem_inst.w_ctr_reg_t [3:0] ;
  assign \w_mem_inst.w_ctr_reg_c19 [3:0] = _130__c ;
  assign \w_mem_inst.w_ctr_reg_r19 [3:0] = _130__r ;
  assign \w_mem_inst.w_ctr_reg_x19 [3:0] = _130__x ;
  assign \w_mem_inst.w_ctr_reg_c19 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_r19 [6:4] = 0;
  assign \w_mem_inst.w_ctr_reg_x19 [6:4] = 0;
  logic [31:0] fangyuan19;
  logic [31:0] fangyuan19_t ;
  logic [31:0] fangyuan19_r ;
  logic [31:0] fangyuan19_c ;
  logic [31:0] fangyuan19_x ;
  assign fangyuan19 = { \w_mem_inst.w_16 [30:0], \w_mem_inst.w_16 [31] };
  assign fangyuan19_t = {  \w_mem_inst.w_16_t [30:0] , \w_mem_inst.w_16_t [31]  };
  logic [32-1:0] \w_mem_inst.w_16_r2 ;
  logic [32-1:0] \w_mem_inst.w_16_x2 ;
  logic [32-1:0] \w_mem_inst.w_16_c2 ;
  assign \w_mem_inst.w_16_r2 [30:0] = fangyuan19_r [31:1] ;
  assign \w_mem_inst.w_16_x2 [30:0] = fangyuan19_x [31:1] ;
  assign \w_mem_inst.w_16_c2 [30:0] = fangyuan19_c [31:1] ;
  assign \w_mem_inst.w_16_r2 [31:31] = 0;
  assign \w_mem_inst.w_16_x2 [31:31] = 0;
  assign \w_mem_inst.w_16_c2 [31:31] = 0;
  logic [32-1:0] \w_mem_inst.w_16_r3 ;
  logic [32-1:0] \w_mem_inst.w_16_x3 ;
  logic [32-1:0] \w_mem_inst.w_16_c3 ;
  assign \w_mem_inst.w_16_r3 [31] = fangyuan19_r [0:0] ;
  assign \w_mem_inst.w_16_x3 [31] = fangyuan19_x [0:0] ;
  assign \w_mem_inst.w_16_c3 [31] = fangyuan19_c [0:0] ;
  assign \w_mem_inst.w_16_r3 [30:0] = 0;
  assign \w_mem_inst.w_16_x3 [30:0] = 0;
  assign \w_mem_inst.w_16_c3 [30:0] = 0;
  assign w = _113_ ? _089_ : fangyuan19;
  logic [1-1:0] _113__c0 ;
  logic [1-1:0] _113__r0 ;
  logic [1-1:0] _113__x0 ;
  logic [32-1:0] _113__r0_tmp ;
  assign _113__c0 = 1;
  assign _113__x0 = | w_x ;
  assign _113__r0 = | _113__r0_tmp ;
  assign w_t = _113_ ? ( { 32{ _113__t }} | _089__t ) : ( { 32{ _113__t }} | fangyuan19_t );
  assign _113__r0_tmp = w_r | ( { 32{ _113_ }} & _089__t | { 32{ !_113_ }} & fangyuan19_t );
  logic [32-1:0] _089__c0 ;
  logic [32-1:0] _089__r0 ;
  logic [32-1:0] _089__x0 ;
  assign _089__c0 = { 32{ _113_ }};
  assign _089__r0 = { 32{ _113_ }} & w_r ;
  assign _089__x0 = w_x ;
  logic [32-1:0] fangyuan19_c0 ;
  logic [32-1:0] fangyuan19_r0 ;
  logic [32-1:0] fangyuan19_x0 ;
  assign fangyuan19_c0 = { 32{ !_113_ }} ;
  assign fangyuan19_r0 = { 32{ !_113_ }} & w_r ;
  assign fangyuan19_x0 = w_x ;
  assign _078_ = \w_mem_inst.w_mem_we ? \w_mem_inst.w_mem15_new : \w_mem_inst.w_mem[15] ;
  logic [1-1:0] \w_mem_inst.w_mem_we_c0 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_r0 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_x0 ;
  logic [32-1:0] \w_mem_inst.w_mem_we_r0_tmp ;
  assign \w_mem_inst.w_mem_we_c0 = 1;
  assign \w_mem_inst.w_mem_we_x0 = | _078__x ;
  assign \w_mem_inst.w_mem_we_r0 = | \w_mem_inst.w_mem_we_r0_tmp ;
  assign _078__t = \w_mem_inst.w_mem_we ? ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem15_new_t ) : ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem[15]_t );
  assign \w_mem_inst.w_mem_we_r0_tmp = _078__r | ( { 32{ \w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem15_new_t | { 32{ !\w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem[15]_t );
  logic [32-1:0] \w_mem_inst.w_mem15_new_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem15_new_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem15_new_x0 ;
  assign \w_mem_inst.w_mem15_new_c0 = { 32{ \w_mem_inst.w_mem_we }};
  assign \w_mem_inst.w_mem15_new_r0 = { 32{ \w_mem_inst.w_mem_we }} & _078__r ;
  assign \w_mem_inst.w_mem15_new_x0 = _078__x ;
  logic [32-1:0] \w_mem_inst.w_mem[15]_c2 ;
  logic [32-1:0] \w_mem_inst.w_mem[15]_r2 ;
  logic [32-1:0] \w_mem_inst.w_mem[15]_x2 ;
  assign \w_mem_inst.w_mem[15]_c2 = { 32{ !\w_mem_inst.w_mem_we }} ;
  assign \w_mem_inst.w_mem[15]_r2 = { 32{ !\w_mem_inst.w_mem_we }} & _078__r ;
  assign \w_mem_inst.w_mem[15]_x2 = _078__x ;
  assign _077_ = \w_mem_inst.w_mem_we ? \w_mem_inst.w_mem14_new : \w_mem_inst.w_mem[14] ;
  logic [1-1:0] \w_mem_inst.w_mem_we_c1 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_r1 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_x1 ;
  logic [32-1:0] \w_mem_inst.w_mem_we_r1_tmp ;
  assign \w_mem_inst.w_mem_we_c1 = 1;
  assign \w_mem_inst.w_mem_we_x1 = | _077__x ;
  assign \w_mem_inst.w_mem_we_r1 = | \w_mem_inst.w_mem_we_r1_tmp ;
  assign _077__t = \w_mem_inst.w_mem_we ? ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem14_new_t ) : ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem[14]_t );
  assign \w_mem_inst.w_mem_we_r1_tmp = _077__r | ( { 32{ \w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem14_new_t | { 32{ !\w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem[14]_t );
  logic [32-1:0] \w_mem_inst.w_mem14_new_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem14_new_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem14_new_x0 ;
  assign \w_mem_inst.w_mem14_new_c0 = { 32{ \w_mem_inst.w_mem_we }};
  assign \w_mem_inst.w_mem14_new_r0 = { 32{ \w_mem_inst.w_mem_we }} & _077__r ;
  assign \w_mem_inst.w_mem14_new_x0 = _077__x ;
  logic [32-1:0] \w_mem_inst.w_mem[14]_c2 ;
  logic [32-1:0] \w_mem_inst.w_mem[14]_r2 ;
  logic [32-1:0] \w_mem_inst.w_mem[14]_x2 ;
  assign \w_mem_inst.w_mem[14]_c2 = { 32{ !\w_mem_inst.w_mem_we }} ;
  assign \w_mem_inst.w_mem[14]_r2 = { 32{ !\w_mem_inst.w_mem_we }} & _077__r ;
  assign \w_mem_inst.w_mem[14]_x2 = _077__x ;
  assign _076_ = \w_mem_inst.w_mem_we ? \w_mem_inst.w_mem13_new : \w_mem_inst.w_mem[13] ;
  logic [1-1:0] \w_mem_inst.w_mem_we_c2 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_r2 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_x2 ;
  logic [32-1:0] \w_mem_inst.w_mem_we_r2_tmp ;
  assign \w_mem_inst.w_mem_we_c2 = 1;
  assign \w_mem_inst.w_mem_we_x2 = | _076__x ;
  assign \w_mem_inst.w_mem_we_r2 = | \w_mem_inst.w_mem_we_r2_tmp ;
  assign _076__t = \w_mem_inst.w_mem_we ? ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem13_new_t ) : ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem[13]_t );
  assign \w_mem_inst.w_mem_we_r2_tmp = _076__r | ( { 32{ \w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem13_new_t | { 32{ !\w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem[13]_t );
  logic [32-1:0] \w_mem_inst.w_mem13_new_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem13_new_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem13_new_x0 ;
  assign \w_mem_inst.w_mem13_new_c0 = { 32{ \w_mem_inst.w_mem_we }};
  assign \w_mem_inst.w_mem13_new_r0 = { 32{ \w_mem_inst.w_mem_we }} & _076__r ;
  assign \w_mem_inst.w_mem13_new_x0 = _076__x ;
  logic [32-1:0] \w_mem_inst.w_mem[13]_c2 ;
  logic [32-1:0] \w_mem_inst.w_mem[13]_r2 ;
  logic [32-1:0] \w_mem_inst.w_mem[13]_x2 ;
  assign \w_mem_inst.w_mem[13]_c2 = { 32{ !\w_mem_inst.w_mem_we }} ;
  assign \w_mem_inst.w_mem[13]_r2 = { 32{ !\w_mem_inst.w_mem_we }} & _076__r ;
  assign \w_mem_inst.w_mem[13]_x2 = _076__x ;
  assign _075_ = \w_mem_inst.w_mem_we ? \w_mem_inst.w_mem12_new : \w_mem_inst.w_mem[12] ;
  logic [1-1:0] \w_mem_inst.w_mem_we_c3 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_r3 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_x3 ;
  logic [32-1:0] \w_mem_inst.w_mem_we_r3_tmp ;
  assign \w_mem_inst.w_mem_we_c3 = 1;
  assign \w_mem_inst.w_mem_we_x3 = | _075__x ;
  assign \w_mem_inst.w_mem_we_r3 = | \w_mem_inst.w_mem_we_r3_tmp ;
  assign _075__t = \w_mem_inst.w_mem_we ? ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem12_new_t ) : ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem[12]_t );
  assign \w_mem_inst.w_mem_we_r3_tmp = _075__r | ( { 32{ \w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem12_new_t | { 32{ !\w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem[12]_t );
  logic [32-1:0] \w_mem_inst.w_mem12_new_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem12_new_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem12_new_x0 ;
  assign \w_mem_inst.w_mem12_new_c0 = { 32{ \w_mem_inst.w_mem_we }};
  assign \w_mem_inst.w_mem12_new_r0 = { 32{ \w_mem_inst.w_mem_we }} & _075__r ;
  assign \w_mem_inst.w_mem12_new_x0 = _075__x ;
  logic [32-1:0] \w_mem_inst.w_mem[12]_c2 ;
  logic [32-1:0] \w_mem_inst.w_mem[12]_r2 ;
  logic [32-1:0] \w_mem_inst.w_mem[12]_x2 ;
  assign \w_mem_inst.w_mem[12]_c2 = { 32{ !\w_mem_inst.w_mem_we }} ;
  assign \w_mem_inst.w_mem[12]_r2 = { 32{ !\w_mem_inst.w_mem_we }} & _075__r ;
  assign \w_mem_inst.w_mem[12]_x2 = _075__x ;
  assign _074_ = \w_mem_inst.w_mem_we ? \w_mem_inst.w_mem11_new : \w_mem_inst.w_mem[11] ;
  logic [1-1:0] \w_mem_inst.w_mem_we_c4 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_r4 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_x4 ;
  logic [32-1:0] \w_mem_inst.w_mem_we_r4_tmp ;
  assign \w_mem_inst.w_mem_we_c4 = 1;
  assign \w_mem_inst.w_mem_we_x4 = | _074__x ;
  assign \w_mem_inst.w_mem_we_r4 = | \w_mem_inst.w_mem_we_r4_tmp ;
  assign _074__t = \w_mem_inst.w_mem_we ? ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem11_new_t ) : ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem[11]_t );
  assign \w_mem_inst.w_mem_we_r4_tmp = _074__r | ( { 32{ \w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem11_new_t | { 32{ !\w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem[11]_t );
  logic [32-1:0] \w_mem_inst.w_mem11_new_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem11_new_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem11_new_x0 ;
  assign \w_mem_inst.w_mem11_new_c0 = { 32{ \w_mem_inst.w_mem_we }};
  assign \w_mem_inst.w_mem11_new_r0 = { 32{ \w_mem_inst.w_mem_we }} & _074__r ;
  assign \w_mem_inst.w_mem11_new_x0 = _074__x ;
  logic [32-1:0] \w_mem_inst.w_mem[11]_c2 ;
  logic [32-1:0] \w_mem_inst.w_mem[11]_r2 ;
  logic [32-1:0] \w_mem_inst.w_mem[11]_x2 ;
  assign \w_mem_inst.w_mem[11]_c2 = { 32{ !\w_mem_inst.w_mem_we }} ;
  assign \w_mem_inst.w_mem[11]_r2 = { 32{ !\w_mem_inst.w_mem_we }} & _074__r ;
  assign \w_mem_inst.w_mem[11]_x2 = _074__x ;
  assign _073_ = \w_mem_inst.w_mem_we ? \w_mem_inst.w_mem10_new : \w_mem_inst.w_mem[10] ;
  logic [1-1:0] \w_mem_inst.w_mem_we_c5 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_r5 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_x5 ;
  logic [32-1:0] \w_mem_inst.w_mem_we_r5_tmp ;
  assign \w_mem_inst.w_mem_we_c5 = 1;
  assign \w_mem_inst.w_mem_we_x5 = | _073__x ;
  assign \w_mem_inst.w_mem_we_r5 = | \w_mem_inst.w_mem_we_r5_tmp ;
  assign _073__t = \w_mem_inst.w_mem_we ? ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem10_new_t ) : ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem[10]_t );
  assign \w_mem_inst.w_mem_we_r5_tmp = _073__r | ( { 32{ \w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem10_new_t | { 32{ !\w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem[10]_t );
  logic [32-1:0] \w_mem_inst.w_mem10_new_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem10_new_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem10_new_x0 ;
  assign \w_mem_inst.w_mem10_new_c0 = { 32{ \w_mem_inst.w_mem_we }};
  assign \w_mem_inst.w_mem10_new_r0 = { 32{ \w_mem_inst.w_mem_we }} & _073__r ;
  assign \w_mem_inst.w_mem10_new_x0 = _073__x ;
  logic [32-1:0] \w_mem_inst.w_mem[10]_c2 ;
  logic [32-1:0] \w_mem_inst.w_mem[10]_r2 ;
  logic [32-1:0] \w_mem_inst.w_mem[10]_x2 ;
  assign \w_mem_inst.w_mem[10]_c2 = { 32{ !\w_mem_inst.w_mem_we }} ;
  assign \w_mem_inst.w_mem[10]_r2 = { 32{ !\w_mem_inst.w_mem_we }} & _073__r ;
  assign \w_mem_inst.w_mem[10]_x2 = _073__x ;
  assign _087_ = \w_mem_inst.w_mem_we ? \w_mem_inst.w_mem09_new : \w_mem_inst.w_mem[9] ;
  logic [1-1:0] \w_mem_inst.w_mem_we_c6 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_r6 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_x6 ;
  logic [32-1:0] \w_mem_inst.w_mem_we_r6_tmp ;
  assign \w_mem_inst.w_mem_we_c6 = 1;
  assign \w_mem_inst.w_mem_we_x6 = | _087__x ;
  assign \w_mem_inst.w_mem_we_r6 = | \w_mem_inst.w_mem_we_r6_tmp ;
  assign _087__t = \w_mem_inst.w_mem_we ? ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem09_new_t ) : ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem[9]_t );
  assign \w_mem_inst.w_mem_we_r6_tmp = _087__r | ( { 32{ \w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem09_new_t | { 32{ !\w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem[9]_t );
  logic [32-1:0] \w_mem_inst.w_mem09_new_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem09_new_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem09_new_x0 ;
  assign \w_mem_inst.w_mem09_new_c0 = { 32{ \w_mem_inst.w_mem_we }};
  assign \w_mem_inst.w_mem09_new_r0 = { 32{ \w_mem_inst.w_mem_we }} & _087__r ;
  assign \w_mem_inst.w_mem09_new_x0 = _087__x ;
  logic [32-1:0] \w_mem_inst.w_mem[9]_c2 ;
  logic [32-1:0] \w_mem_inst.w_mem[9]_r2 ;
  logic [32-1:0] \w_mem_inst.w_mem[9]_x2 ;
  assign \w_mem_inst.w_mem[9]_c2 = { 32{ !\w_mem_inst.w_mem_we }} ;
  assign \w_mem_inst.w_mem[9]_r2 = { 32{ !\w_mem_inst.w_mem_we }} & _087__r ;
  assign \w_mem_inst.w_mem[9]_x2 = _087__x ;
  assign _086_ = \w_mem_inst.w_mem_we ? \w_mem_inst.w_mem08_new : \w_mem_inst.w_mem[8] ;
  logic [1-1:0] \w_mem_inst.w_mem_we_c7 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_r7 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_x7 ;
  logic [32-1:0] \w_mem_inst.w_mem_we_r7_tmp ;
  assign \w_mem_inst.w_mem_we_c7 = 1;
  assign \w_mem_inst.w_mem_we_x7 = | _086__x ;
  assign \w_mem_inst.w_mem_we_r7 = | \w_mem_inst.w_mem_we_r7_tmp ;
  assign _086__t = \w_mem_inst.w_mem_we ? ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem08_new_t ) : ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem[8]_t );
  assign \w_mem_inst.w_mem_we_r7_tmp = _086__r | ( { 32{ \w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem08_new_t | { 32{ !\w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem[8]_t );
  logic [32-1:0] \w_mem_inst.w_mem08_new_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem08_new_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem08_new_x0 ;
  assign \w_mem_inst.w_mem08_new_c0 = { 32{ \w_mem_inst.w_mem_we }};
  assign \w_mem_inst.w_mem08_new_r0 = { 32{ \w_mem_inst.w_mem_we }} & _086__r ;
  assign \w_mem_inst.w_mem08_new_x0 = _086__x ;
  logic [32-1:0] \w_mem_inst.w_mem[8]_c2 ;
  logic [32-1:0] \w_mem_inst.w_mem[8]_r2 ;
  logic [32-1:0] \w_mem_inst.w_mem[8]_x2 ;
  assign \w_mem_inst.w_mem[8]_c2 = { 32{ !\w_mem_inst.w_mem_we }} ;
  assign \w_mem_inst.w_mem[8]_r2 = { 32{ !\w_mem_inst.w_mem_we }} & _086__r ;
  assign \w_mem_inst.w_mem[8]_x2 = _086__x ;
  assign _085_ = \w_mem_inst.w_mem_we ? \w_mem_inst.w_mem07_new : \w_mem_inst.w_mem[7] ;
  logic [1-1:0] \w_mem_inst.w_mem_we_c8 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_r8 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_x8 ;
  logic [32-1:0] \w_mem_inst.w_mem_we_r8_tmp ;
  assign \w_mem_inst.w_mem_we_c8 = 1;
  assign \w_mem_inst.w_mem_we_x8 = | _085__x ;
  assign \w_mem_inst.w_mem_we_r8 = | \w_mem_inst.w_mem_we_r8_tmp ;
  assign _085__t = \w_mem_inst.w_mem_we ? ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem07_new_t ) : ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem[7]_t );
  assign \w_mem_inst.w_mem_we_r8_tmp = _085__r | ( { 32{ \w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem07_new_t | { 32{ !\w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem[7]_t );
  logic [32-1:0] \w_mem_inst.w_mem07_new_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem07_new_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem07_new_x0 ;
  assign \w_mem_inst.w_mem07_new_c0 = { 32{ \w_mem_inst.w_mem_we }};
  assign \w_mem_inst.w_mem07_new_r0 = { 32{ \w_mem_inst.w_mem_we }} & _085__r ;
  assign \w_mem_inst.w_mem07_new_x0 = _085__x ;
  logic [32-1:0] \w_mem_inst.w_mem[7]_c2 ;
  logic [32-1:0] \w_mem_inst.w_mem[7]_r2 ;
  logic [32-1:0] \w_mem_inst.w_mem[7]_x2 ;
  assign \w_mem_inst.w_mem[7]_c2 = { 32{ !\w_mem_inst.w_mem_we }} ;
  assign \w_mem_inst.w_mem[7]_r2 = { 32{ !\w_mem_inst.w_mem_we }} & _085__r ;
  assign \w_mem_inst.w_mem[7]_x2 = _085__x ;
  assign _084_ = \w_mem_inst.w_mem_we ? \w_mem_inst.w_mem06_new : \w_mem_inst.w_mem[6] ;
  logic [1-1:0] \w_mem_inst.w_mem_we_c9 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_r9 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_x9 ;
  logic [32-1:0] \w_mem_inst.w_mem_we_r9_tmp ;
  assign \w_mem_inst.w_mem_we_c9 = 1;
  assign \w_mem_inst.w_mem_we_x9 = | _084__x ;
  assign \w_mem_inst.w_mem_we_r9 = | \w_mem_inst.w_mem_we_r9_tmp ;
  assign _084__t = \w_mem_inst.w_mem_we ? ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem06_new_t ) : ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem[6]_t );
  assign \w_mem_inst.w_mem_we_r9_tmp = _084__r | ( { 32{ \w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem06_new_t | { 32{ !\w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem[6]_t );
  logic [32-1:0] \w_mem_inst.w_mem06_new_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem06_new_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem06_new_x0 ;
  assign \w_mem_inst.w_mem06_new_c0 = { 32{ \w_mem_inst.w_mem_we }};
  assign \w_mem_inst.w_mem06_new_r0 = { 32{ \w_mem_inst.w_mem_we }} & _084__r ;
  assign \w_mem_inst.w_mem06_new_x0 = _084__x ;
  logic [32-1:0] \w_mem_inst.w_mem[6]_c2 ;
  logic [32-1:0] \w_mem_inst.w_mem[6]_r2 ;
  logic [32-1:0] \w_mem_inst.w_mem[6]_x2 ;
  assign \w_mem_inst.w_mem[6]_c2 = { 32{ !\w_mem_inst.w_mem_we }} ;
  assign \w_mem_inst.w_mem[6]_r2 = { 32{ !\w_mem_inst.w_mem_we }} & _084__r ;
  assign \w_mem_inst.w_mem[6]_x2 = _084__x ;
  assign _083_ = \w_mem_inst.w_mem_we ? \w_mem_inst.w_mem05_new : \w_mem_inst.w_mem[5] ;
  logic [1-1:0] \w_mem_inst.w_mem_we_c10 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_r10 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_x10 ;
  logic [32-1:0] \w_mem_inst.w_mem_we_r10_tmp ;
  assign \w_mem_inst.w_mem_we_c10 = 1;
  assign \w_mem_inst.w_mem_we_x10 = | _083__x ;
  assign \w_mem_inst.w_mem_we_r10 = | \w_mem_inst.w_mem_we_r10_tmp ;
  assign _083__t = \w_mem_inst.w_mem_we ? ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem05_new_t ) : ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem[5]_t );
  assign \w_mem_inst.w_mem_we_r10_tmp = _083__r | ( { 32{ \w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem05_new_t | { 32{ !\w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem[5]_t );
  logic [32-1:0] \w_mem_inst.w_mem05_new_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem05_new_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem05_new_x0 ;
  assign \w_mem_inst.w_mem05_new_c0 = { 32{ \w_mem_inst.w_mem_we }};
  assign \w_mem_inst.w_mem05_new_r0 = { 32{ \w_mem_inst.w_mem_we }} & _083__r ;
  assign \w_mem_inst.w_mem05_new_x0 = _083__x ;
  logic [32-1:0] \w_mem_inst.w_mem[5]_c2 ;
  logic [32-1:0] \w_mem_inst.w_mem[5]_r2 ;
  logic [32-1:0] \w_mem_inst.w_mem[5]_x2 ;
  assign \w_mem_inst.w_mem[5]_c2 = { 32{ !\w_mem_inst.w_mem_we }} ;
  assign \w_mem_inst.w_mem[5]_r2 = { 32{ !\w_mem_inst.w_mem_we }} & _083__r ;
  assign \w_mem_inst.w_mem[5]_x2 = _083__x ;
  assign _082_ = \w_mem_inst.w_mem_we ? \w_mem_inst.w_mem04_new : \w_mem_inst.w_mem[4] ;
  logic [1-1:0] \w_mem_inst.w_mem_we_c11 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_r11 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_x11 ;
  logic [32-1:0] \w_mem_inst.w_mem_we_r11_tmp ;
  assign \w_mem_inst.w_mem_we_c11 = 1;
  assign \w_mem_inst.w_mem_we_x11 = | _082__x ;
  assign \w_mem_inst.w_mem_we_r11 = | \w_mem_inst.w_mem_we_r11_tmp ;
  assign _082__t = \w_mem_inst.w_mem_we ? ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem04_new_t ) : ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem[4]_t );
  assign \w_mem_inst.w_mem_we_r11_tmp = _082__r | ( { 32{ \w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem04_new_t | { 32{ !\w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem[4]_t );
  logic [32-1:0] \w_mem_inst.w_mem04_new_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem04_new_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem04_new_x0 ;
  assign \w_mem_inst.w_mem04_new_c0 = { 32{ \w_mem_inst.w_mem_we }};
  assign \w_mem_inst.w_mem04_new_r0 = { 32{ \w_mem_inst.w_mem_we }} & _082__r ;
  assign \w_mem_inst.w_mem04_new_x0 = _082__x ;
  logic [32-1:0] \w_mem_inst.w_mem[4]_c2 ;
  logic [32-1:0] \w_mem_inst.w_mem[4]_r2 ;
  logic [32-1:0] \w_mem_inst.w_mem[4]_x2 ;
  assign \w_mem_inst.w_mem[4]_c2 = { 32{ !\w_mem_inst.w_mem_we }} ;
  assign \w_mem_inst.w_mem[4]_r2 = { 32{ !\w_mem_inst.w_mem_we }} & _082__r ;
  assign \w_mem_inst.w_mem[4]_x2 = _082__x ;
  assign _081_ = \w_mem_inst.w_mem_we ? \w_mem_inst.w_mem03_new : \w_mem_inst.w_mem[3] ;
  logic [1-1:0] \w_mem_inst.w_mem_we_c12 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_r12 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_x12 ;
  logic [32-1:0] \w_mem_inst.w_mem_we_r12_tmp ;
  assign \w_mem_inst.w_mem_we_c12 = 1;
  assign \w_mem_inst.w_mem_we_x12 = | _081__x ;
  assign \w_mem_inst.w_mem_we_r12 = | \w_mem_inst.w_mem_we_r12_tmp ;
  assign _081__t = \w_mem_inst.w_mem_we ? ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem03_new_t ) : ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem[3]_t );
  assign \w_mem_inst.w_mem_we_r12_tmp = _081__r | ( { 32{ \w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem03_new_t | { 32{ !\w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem[3]_t );
  logic [32-1:0] \w_mem_inst.w_mem03_new_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem03_new_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem03_new_x0 ;
  assign \w_mem_inst.w_mem03_new_c0 = { 32{ \w_mem_inst.w_mem_we }};
  assign \w_mem_inst.w_mem03_new_r0 = { 32{ \w_mem_inst.w_mem_we }} & _081__r ;
  assign \w_mem_inst.w_mem03_new_x0 = _081__x ;
  logic [32-1:0] \w_mem_inst.w_mem[3]_c2 ;
  logic [32-1:0] \w_mem_inst.w_mem[3]_r2 ;
  logic [32-1:0] \w_mem_inst.w_mem[3]_x2 ;
  assign \w_mem_inst.w_mem[3]_c2 = { 32{ !\w_mem_inst.w_mem_we }} ;
  assign \w_mem_inst.w_mem[3]_r2 = { 32{ !\w_mem_inst.w_mem_we }} & _081__r ;
  assign \w_mem_inst.w_mem[3]_x2 = _081__x ;
  assign _080_ = \w_mem_inst.w_mem_we ? \w_mem_inst.w_mem02_new : \w_mem_inst.w_mem[2] ;
  logic [1-1:0] \w_mem_inst.w_mem_we_c13 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_r13 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_x13 ;
  logic [32-1:0] \w_mem_inst.w_mem_we_r13_tmp ;
  assign \w_mem_inst.w_mem_we_c13 = 1;
  assign \w_mem_inst.w_mem_we_x13 = | _080__x ;
  assign \w_mem_inst.w_mem_we_r13 = | \w_mem_inst.w_mem_we_r13_tmp ;
  assign _080__t = \w_mem_inst.w_mem_we ? ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem02_new_t ) : ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem[2]_t );
  assign \w_mem_inst.w_mem_we_r13_tmp = _080__r | ( { 32{ \w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem02_new_t | { 32{ !\w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem[2]_t );
  logic [32-1:0] \w_mem_inst.w_mem02_new_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem02_new_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem02_new_x0 ;
  assign \w_mem_inst.w_mem02_new_c0 = { 32{ \w_mem_inst.w_mem_we }};
  assign \w_mem_inst.w_mem02_new_r0 = { 32{ \w_mem_inst.w_mem_we }} & _080__r ;
  assign \w_mem_inst.w_mem02_new_x0 = _080__x ;
  logic [32-1:0] \w_mem_inst.w_mem[2]_c2 ;
  logic [32-1:0] \w_mem_inst.w_mem[2]_r2 ;
  logic [32-1:0] \w_mem_inst.w_mem[2]_x2 ;
  assign \w_mem_inst.w_mem[2]_c2 = { 32{ !\w_mem_inst.w_mem_we }} ;
  assign \w_mem_inst.w_mem[2]_r2 = { 32{ !\w_mem_inst.w_mem_we }} & _080__r ;
  assign \w_mem_inst.w_mem[2]_x2 = _080__x ;
  assign _079_ = \w_mem_inst.w_mem_we ? \w_mem_inst.w_mem01_new : \w_mem_inst.w_mem[1] ;
  logic [1-1:0] \w_mem_inst.w_mem_we_c14 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_r14 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_x14 ;
  logic [32-1:0] \w_mem_inst.w_mem_we_r14_tmp ;
  assign \w_mem_inst.w_mem_we_c14 = 1;
  assign \w_mem_inst.w_mem_we_x14 = | _079__x ;
  assign \w_mem_inst.w_mem_we_r14 = | \w_mem_inst.w_mem_we_r14_tmp ;
  assign _079__t = \w_mem_inst.w_mem_we ? ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem01_new_t ) : ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem[1]_t );
  assign \w_mem_inst.w_mem_we_r14_tmp = _079__r | ( { 32{ \w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem01_new_t | { 32{ !\w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem[1]_t );
  logic [32-1:0] \w_mem_inst.w_mem01_new_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem01_new_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem01_new_x0 ;
  assign \w_mem_inst.w_mem01_new_c0 = { 32{ \w_mem_inst.w_mem_we }};
  assign \w_mem_inst.w_mem01_new_r0 = { 32{ \w_mem_inst.w_mem_we }} & _079__r ;
  assign \w_mem_inst.w_mem01_new_x0 = _079__x ;
  logic [32-1:0] \w_mem_inst.w_mem[1]_c2 ;
  logic [32-1:0] \w_mem_inst.w_mem[1]_r2 ;
  logic [32-1:0] \w_mem_inst.w_mem[1]_x2 ;
  assign \w_mem_inst.w_mem[1]_c2 = { 32{ !\w_mem_inst.w_mem_we }} ;
  assign \w_mem_inst.w_mem[1]_r2 = { 32{ !\w_mem_inst.w_mem_we }} & _079__r ;
  assign \w_mem_inst.w_mem[1]_x2 = _079__x ;
  assign _072_ = \w_mem_inst.w_mem_we ? \w_mem_inst.w_mem00_new : \w_mem_inst.w_mem[0] ;
  logic [1-1:0] \w_mem_inst.w_mem_we_c15 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_r15 ;
  logic [1-1:0] \w_mem_inst.w_mem_we_x15 ;
  logic [32-1:0] \w_mem_inst.w_mem_we_r15_tmp ;
  assign \w_mem_inst.w_mem_we_c15 = 1;
  assign \w_mem_inst.w_mem_we_x15 = | _072__x ;
  assign \w_mem_inst.w_mem_we_r15 = | \w_mem_inst.w_mem_we_r15_tmp ;
  assign _072__t = \w_mem_inst.w_mem_we ? ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem00_new_t ) : ( { 32{ \w_mem_inst.w_mem_we_t }} | \w_mem_inst.w_mem[0]_t );
  assign \w_mem_inst.w_mem_we_r15_tmp = _072__r | ( { 32{ \w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem00_new_t | { 32{ !\w_mem_inst.w_mem_we }} & \w_mem_inst.w_mem[0]_t );
  logic [32-1:0] \w_mem_inst.w_mem00_new_c0 ;
  logic [32-1:0] \w_mem_inst.w_mem00_new_r0 ;
  logic [32-1:0] \w_mem_inst.w_mem00_new_x0 ;
  assign \w_mem_inst.w_mem00_new_c0 = { 32{ \w_mem_inst.w_mem_we }};
  assign \w_mem_inst.w_mem00_new_r0 = { 32{ \w_mem_inst.w_mem_we }} & _072__r ;
  assign \w_mem_inst.w_mem00_new_x0 = _072__x ;
  logic [32-1:0] \w_mem_inst.w_mem[0]_c1 ;
  logic [32-1:0] \w_mem_inst.w_mem[0]_r1 ;
  logic [32-1:0] \w_mem_inst.w_mem[0]_x1 ;
  assign \w_mem_inst.w_mem[0]_c1 = { 32{ !\w_mem_inst.w_mem_we }} ;
  assign \w_mem_inst.w_mem[0]_r1 = { 32{ !\w_mem_inst.w_mem_we }} & _072__r ;
  assign \w_mem_inst.w_mem[0]_x1 = _072__x ;
  assign _070_ = \w_mem_inst.sha1_w_mem_ctrl_we ? \w_mem_inst.sha1_w_mem_ctrl_new : \w_mem_inst.sha1_w_mem_ctrl_reg ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_we_c0 ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_we_r0 ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_we_x0 ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_we_r0_tmp ;
  assign \w_mem_inst.sha1_w_mem_ctrl_we_c0 = 1;
  assign \w_mem_inst.sha1_w_mem_ctrl_we_x0 = | _070__x ;
  assign \w_mem_inst.sha1_w_mem_ctrl_we_r0 = | \w_mem_inst.sha1_w_mem_ctrl_we_r0_tmp ;
  assign _070__t = \w_mem_inst.sha1_w_mem_ctrl_we ? ( { 1{ \w_mem_inst.sha1_w_mem_ctrl_we_t }} | \w_mem_inst.sha1_w_mem_ctrl_new_t ) : ( { 1{ \w_mem_inst.sha1_w_mem_ctrl_we_t }} | \w_mem_inst.sha1_w_mem_ctrl_reg_t );
  assign \w_mem_inst.sha1_w_mem_ctrl_we_r0_tmp = _070__r | ( { 1{ \w_mem_inst.sha1_w_mem_ctrl_we }} & \w_mem_inst.sha1_w_mem_ctrl_new_t | { 1{ !\w_mem_inst.sha1_w_mem_ctrl_we }} & \w_mem_inst.sha1_w_mem_ctrl_reg_t );
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_new_c1 ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_new_r1 ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_new_x1 ;
  assign \w_mem_inst.sha1_w_mem_ctrl_new_c1 = { 1{ \w_mem_inst.sha1_w_mem_ctrl_we }};
  assign \w_mem_inst.sha1_w_mem_ctrl_new_r1 = { 1{ \w_mem_inst.sha1_w_mem_ctrl_we }} & _070__r ;
  assign \w_mem_inst.sha1_w_mem_ctrl_new_x1 = _070__x ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_reg_c4 ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_reg_r4 ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_reg_x4 ;
  assign \w_mem_inst.sha1_w_mem_ctrl_reg_c4 = { 1{ !\w_mem_inst.sha1_w_mem_ctrl_we }} ;
  assign \w_mem_inst.sha1_w_mem_ctrl_reg_r4 = { 1{ !\w_mem_inst.sha1_w_mem_ctrl_we }} & _070__r ;
  assign \w_mem_inst.sha1_w_mem_ctrl_reg_x4 = _070__x ;
  assign _071_ = \w_mem_inst.w_ctr_we ? \w_mem_inst.w_ctr_new : \w_mem_inst.w_ctr_reg ;
  logic [1-1:0] \w_mem_inst.w_ctr_we_c0 ;
  logic [1-1:0] \w_mem_inst.w_ctr_we_r0 ;
  logic [1-1:0] \w_mem_inst.w_ctr_we_x0 ;
  logic [7-1:0] \w_mem_inst.w_ctr_we_r0_tmp ;
  assign \w_mem_inst.w_ctr_we_c0 = 1;
  assign \w_mem_inst.w_ctr_we_x0 = | _071__x ;
  assign \w_mem_inst.w_ctr_we_r0 = | \w_mem_inst.w_ctr_we_r0_tmp ;
  assign _071__t = \w_mem_inst.w_ctr_we ? ( { 7{ \w_mem_inst.w_ctr_we_t }} | \w_mem_inst.w_ctr_new_t ) : ( { 7{ \w_mem_inst.w_ctr_we_t }} | \w_mem_inst.w_ctr_reg_t );
  assign \w_mem_inst.w_ctr_we_r0_tmp = _071__r | ( { 7{ \w_mem_inst.w_ctr_we }} & \w_mem_inst.w_ctr_new_t | { 7{ !\w_mem_inst.w_ctr_we }} & \w_mem_inst.w_ctr_reg_t );
  logic [7-1:0] \w_mem_inst.w_ctr_new_c0 ;
  logic [7-1:0] \w_mem_inst.w_ctr_new_r0 ;
  logic [7-1:0] \w_mem_inst.w_ctr_new_x0 ;
  assign \w_mem_inst.w_ctr_new_c0 = { 7{ \w_mem_inst.w_ctr_we }};
  assign \w_mem_inst.w_ctr_new_r0 = { 7{ \w_mem_inst.w_ctr_we }} & _071__r ;
  assign \w_mem_inst.w_ctr_new_x0 = _071__x ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_c20 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_r20 ;
  logic [7-1:0] \w_mem_inst.w_ctr_reg_x20 ;
  assign \w_mem_inst.w_ctr_reg_c20 = { 7{ !\w_mem_inst.w_ctr_we }} ;
  assign \w_mem_inst.w_ctr_reg_r20 = { 7{ !\w_mem_inst.w_ctr_we }} & _071__r ;
  assign \w_mem_inst.w_ctr_reg_x20 = _071__x ;
  assign _131_ = \w_mem_inst.w_mem[13] ^ \w_mem_inst.w_mem[8] ;
  logic [32-1:0] \w_mem_inst.w_mem[13]_c3 ;
  logic [32-1:0] \w_mem_inst.w_mem[13]_r3 ;
  logic [32-1:0] \w_mem_inst.w_mem[13]_x3 ;
  logic [32-1:0] \w_mem_inst.w_mem[8]_c3 ;
  logic [32-1:0] \w_mem_inst.w_mem[8]_r3 ;
  logic [32-1:0] \w_mem_inst.w_mem[8]_x3 ;
  assign _131__t = \w_mem_inst.w_mem[13]_t | \w_mem_inst.w_mem[8]_t ;
  assign \w_mem_inst.w_mem[13]_c3 = _131__c ;
  assign \w_mem_inst.w_mem[13]_r3 = _131__r | ( _131__c & \w_mem_inst.w_mem[8]_t );
  assign \w_mem_inst.w_mem[13]_x3 = _131__x ;
  assign \w_mem_inst.w_mem[8]_c3 = _131__c ;
  assign \w_mem_inst.w_mem[8]_r3 = _131__r | ( _131__c & \w_mem_inst.w_mem[13]_t );
  assign \w_mem_inst.w_mem[8]_x3 = _131__x ;
  assign _132_ = _131_ ^ \w_mem_inst.w_mem[2] ;
  logic [32-1:0] _131__c0 ;
  logic [32-1:0] _131__r0 ;
  logic [32-1:0] _131__x0 ;
  logic [32-1:0] \w_mem_inst.w_mem[2]_c3 ;
  logic [32-1:0] \w_mem_inst.w_mem[2]_r3 ;
  logic [32-1:0] \w_mem_inst.w_mem[2]_x3 ;
  assign _132__t = _131__t | \w_mem_inst.w_mem[2]_t ;
  assign _131__c0 = _132__c ;
  assign _131__r0 = _132__r | ( _132__c & \w_mem_inst.w_mem[2]_t );
  assign _131__x0 = _132__x ;
  assign \w_mem_inst.w_mem[2]_c3 = _132__c ;
  assign \w_mem_inst.w_mem[2]_r3 = _132__r | ( _132__c & _131__t );
  assign \w_mem_inst.w_mem[2]_x3 = _132__x ;
  assign \w_mem_inst.w_16 = _132_ ^ \w_mem_inst.w_mem[0] ;
  logic [32-1:0] _132__c0 ;
  logic [32-1:0] _132__r0 ;
  logic [32-1:0] _132__x0 ;
  logic [32-1:0] \w_mem_inst.w_mem[0]_c2 ;
  logic [32-1:0] \w_mem_inst.w_mem[0]_r2 ;
  logic [32-1:0] \w_mem_inst.w_mem[0]_x2 ;
  assign \w_mem_inst.w_16_t = _132__t | \w_mem_inst.w_mem[0]_t ;
  assign _132__c0 = \w_mem_inst.w_16_c ;
  assign _132__r0 = \w_mem_inst.w_16_r | ( \w_mem_inst.w_16_c & \w_mem_inst.w_mem[0]_t );
  assign _132__x0 = \w_mem_inst.w_16_x ;
  assign \w_mem_inst.w_mem[0]_c2 = \w_mem_inst.w_16_c ;
  assign \w_mem_inst.w_mem[0]_r2 = \w_mem_inst.w_16_r | ( \w_mem_inst.w_16_c & _132__t );
  assign \w_mem_inst.w_mem[0]_x2 = \w_mem_inst.w_16_x ;
  assign _133_ = _052_ ^ _053_;
  logic [32-1:0] _052__c0 ;
  logic [32-1:0] _052__r0 ;
  logic [32-1:0] _052__x0 ;
  logic [32-1:0] _053__c0 ;
  logic [32-1:0] _053__r0 ;
  logic [32-1:0] _053__x0 ;
  assign _133__t = _052__t | _053__t ;
  assign _052__c0 = _133__c ;
  assign _052__r0 = _133__r | ( _133__c & _053__t );
  assign _052__x0 = _133__x ;
  assign _053__c0 = _133__c ;
  assign _053__r0 = _133__r | ( _133__c & _052__t );
  assign _053__x0 = _133__x ;
  assign _134_ = b_reg ^ c_reg;
  logic [32-1:0] b_reg_c8 ;
  logic [32-1:0] b_reg_r8 ;
  logic [32-1:0] b_reg_x8 ;
  logic [32-1:0] c_reg_c6 ;
  logic [32-1:0] c_reg_r6 ;
  logic [32-1:0] c_reg_x6 ;
  assign _134__t = b_reg_t | c_reg_t ;
  assign b_reg_c8 = _134__c ;
  assign b_reg_r8 = _134__r | ( _134__c & c_reg_t );
  assign b_reg_x8 = _134__x ;
  assign c_reg_c6 = _134__c ;
  assign c_reg_r6 = _134__r | ( _134__c & b_reg_t );
  assign c_reg_x6 = _134__x ;
  assign _135_ = _134_ ^ d_reg;
  logic [32-1:0] _134__c0 ;
  logic [32-1:0] _134__r0 ;
  logic [32-1:0] _134__x0 ;
  logic [32-1:0] d_reg_c6 ;
  logic [32-1:0] d_reg_r6 ;
  logic [32-1:0] d_reg_x6 ;
  assign _135__t = _134__t | d_reg_t ;
  assign _134__c0 = _135__c ;
  assign _134__r0 = _135__r | ( _135__c & d_reg_t );
  assign _134__x0 = _135__x ;
  assign d_reg_c6 = _135__c ;
  assign d_reg_r6 = _135__r | ( _135__c & _134__t );
  assign d_reg_x6 = _135__x ;
  assign _136_ = _064_ ^ _065_;
  logic [32-1:0] _064__c0 ;
  logic [32-1:0] _064__r0 ;
  logic [32-1:0] _064__x0 ;
  logic [32-1:0] _065__c0 ;
  logic [32-1:0] _065__r0 ;
  logic [32-1:0] _065__x0 ;
  assign _136__t = _064__t | _065__t ;
  assign _064__c0 = _136__c ;
  assign _064__r0 = _136__r | ( _136__c & _065__t );
  assign _064__x0 = _136__x ;
  assign _065__c0 = _136__c ;
  assign _065__r0 = _136__r | ( _136__c & _064__t );
  assign _065__x0 = _136__x ;
  assign _137_ = _136_ ^ _066_;
  logic [32-1:0] _136__c0 ;
  logic [32-1:0] _136__r0 ;
  logic [32-1:0] _136__x0 ;
  logic [32-1:0] _066__c0 ;
  logic [32-1:0] _066__r0 ;
  logic [32-1:0] _066__x0 ;
  assign _137__t = _136__t | _066__t ;
  assign _136__c0 = _137__c ;
  assign _136__r0 = _137__r | ( _137__c & _066__t );
  assign _136__x0 = _137__x ;
  assign _066__c0 = _137__c ;
  assign _066__r0 = _137__r | ( _137__c & _136__t );
  assign _066__x0 = _137__x ;
  assign digest = { H0_reg, H1_reg, H2_reg, H3_reg, H4_reg };
  assign digest_t = {  H0_reg_t , H1_reg_t , H2_reg_t , H3_reg_t , H4_reg_t  };
  logic [32-1:0] H0_reg_r3 ;
  logic [32-1:0] H0_reg_x3 ;
  logic [32-1:0] H0_reg_c3 ;
  assign H0_reg_r3 = digest_r [159:128] ;
  assign H0_reg_x3 = digest_x [159:128] ;
  assign H0_reg_c3 = digest_c [159:128] ;
  logic [32-1:0] H1_reg_r3 ;
  logic [32-1:0] H1_reg_x3 ;
  logic [32-1:0] H1_reg_c3 ;
  assign H1_reg_r3 = digest_r [127:96] ;
  assign H1_reg_x3 = digest_x [127:96] ;
  assign H1_reg_c3 = digest_c [127:96] ;
  logic [32-1:0] H2_reg_r3 ;
  logic [32-1:0] H2_reg_x3 ;
  logic [32-1:0] H2_reg_c3 ;
  assign H2_reg_r3 = digest_r [95:64] ;
  assign H2_reg_x3 = digest_x [95:64] ;
  assign H2_reg_c3 = digest_c [95:64] ;
  logic [32-1:0] H3_reg_r3 ;
  logic [32-1:0] H3_reg_x3 ;
  logic [32-1:0] H3_reg_c3 ;
  assign H3_reg_r3 = digest_r [63:32] ;
  assign H3_reg_x3 = digest_x [63:32] ;
  assign H3_reg_c3 = digest_c [63:32] ;
  logic [32-1:0] H4_reg_r3 ;
  logic [32-1:0] H4_reg_x3 ;
  logic [32-1:0] H4_reg_c3 ;
  assign H4_reg_r3 = digest_r [31:0] ;
  assign H4_reg_x3 = digest_x [31:0] ;
  assign H4_reg_c3 = digest_c [31:0] ;
  assign digest_valid = digest_valid_reg;
  logic [1-1:0] digest_valid_reg_c1 ;
  logic [1-1:0] digest_valid_reg_r1 ;
  logic [1-1:0] digest_valid_reg_x1 ;
  assign digest_valid_t = digest_valid_reg_t ;
  assign digest_valid_reg_c1 = 0 ;
  assign digest_valid_reg_r1 = digest_valid_r ;
  assign digest_valid_reg_x1 = 1 ;
  assign digest_valid_new = digest_update;
  logic [1-1:0] digest_update_c7 ;
  logic [1-1:0] digest_update_r7 ;
  logic [1-1:0] digest_update_x7 ;
  assign digest_valid_new_t = digest_update_t ;
  assign digest_update_c7 = digest_valid_new_c ;
  assign digest_update_r7 = digest_valid_new_r ;
  assign digest_update_x7 = digest_valid_new_x ;
  assign first_block = digest_init;
  logic [1-1:0] digest_init_c11 ;
  logic [1-1:0] digest_init_r11 ;
  logic [1-1:0] digest_init_x11 ;
  assign first_block_t = digest_init_t ;
  assign digest_init_c11 = first_block_c ;
  assign digest_init_r11 = first_block_r ;
  assign digest_init_x11 = first_block_x ;
  assign ready_flag = ready;
  logic [1-1:0] ready_c0 ;
  logic [1-1:0] ready_r0 ;
  logic [1-1:0] ready_x0 ;
  assign ready_flag_t = ready_t ;
  assign ready_c0 = ready_flag_c ;
  assign ready_r0 = ready_flag_r ;
  assign ready_x0 = ready_flag_x ;
  assign round_ctr_we = a_e_we;
  logic [1-1:0] a_e_we_c6 ;
  logic [1-1:0] a_e_we_r6 ;
  logic [1-1:0] a_e_we_x6 ;
  assign round_ctr_we_t = a_e_we_t ;
  assign a_e_we_c6 = round_ctr_we_c ;
  assign a_e_we_r6 = round_ctr_we_r ;
  assign a_e_we_x6 = round_ctr_we_x ;
  assign state_init = round_ctr_rst;
  logic [1-1:0] round_ctr_rst_c24 ;
  logic [1-1:0] round_ctr_rst_r24 ;
  logic [1-1:0] round_ctr_rst_x24 ;
  assign state_init_t = round_ctr_rst_t ;
  assign round_ctr_rst_c24 = state_init_c ;
  assign round_ctr_rst_r24 = state_init_r ;
  assign round_ctr_rst_x24 = state_init_x ;
  assign state_update = round_ctr_inc;
  logic [1-1:0] round_ctr_inc_c8 ;
  logic [1-1:0] round_ctr_inc_r8 ;
  logic [1-1:0] round_ctr_inc_x8 ;
  assign state_update_t = round_ctr_inc_t ;
  assign round_ctr_inc_c8 = state_update_c ;
  assign round_ctr_inc_r8 = state_update_r ;
  assign round_ctr_inc_x8 = state_update_x ;
  assign w_init = round_ctr_rst;
  logic [1-1:0] round_ctr_rst_c25 ;
  logic [1-1:0] round_ctr_rst_r25 ;
  logic [1-1:0] round_ctr_rst_x25 ;
  assign w_init_t = round_ctr_rst_t ;
  assign round_ctr_rst_c25 = w_init_c ;
  assign round_ctr_rst_r25 = w_init_r ;
  assign round_ctr_rst_x25 = w_init_x ;
  assign \w_mem_inst.block = block;
  logic [512-1:0] block_c16 ;
  logic [512-1:0] block_r16 ;
  logic [512-1:0] block_x16 ;
  assign \w_mem_inst.block_t = block_t ;
  assign block_c16 = \w_mem_inst.block_c ;
  assign block_r16 = \w_mem_inst.block_r ;
  assign block_x16 = \w_mem_inst.block_x ;
  assign \w_mem_inst.clk = clk;
  logic [1-1:0] clk_c0 ;
  logic [1-1:0] clk_r0 ;
  logic [1-1:0] clk_x0 ;
  assign \w_mem_inst.clk_t = clk_t ;
  assign clk_c0 = \w_mem_inst.clk_c ;
  assign clk_r0 = \w_mem_inst.clk_r ;
  assign clk_x0 = \w_mem_inst.clk_x ;
  assign \w_mem_inst.init = round_ctr_rst;
  logic [1-1:0] round_ctr_rst_c26 ;
  logic [1-1:0] round_ctr_rst_r26 ;
  logic [1-1:0] round_ctr_rst_x26 ;
  assign \w_mem_inst.init_t = round_ctr_rst_t ;
  assign round_ctr_rst_c26 = \w_mem_inst.init_c ;
  assign round_ctr_rst_r26 = \w_mem_inst.init_r ;
  assign round_ctr_rst_x26 = \w_mem_inst.init_x ;
  assign \w_mem_inst.next = round_ctr_inc;
  logic [1-1:0] round_ctr_inc_c9 ;
  logic [1-1:0] round_ctr_inc_r9 ;
  logic [1-1:0] round_ctr_inc_x9 ;
  assign \w_mem_inst.next_t = round_ctr_inc_t ;
  assign round_ctr_inc_c9 = \w_mem_inst.next_c ;
  assign round_ctr_inc_r9 = \w_mem_inst.next_r ;
  assign round_ctr_inc_x9 = \w_mem_inst.next_x ;
  assign \w_mem_inst.reset_n = reset_n;
  logic [1-1:0] reset_n_c0 ;
  logic [1-1:0] reset_n_r0 ;
  logic [1-1:0] reset_n_x0 ;
  assign \w_mem_inst.reset_n_t = reset_n_t ;
  assign reset_n_c0 = \w_mem_inst.reset_n_c ;
  assign reset_n_r0 = \w_mem_inst.reset_n_r ;
  assign reset_n_x0 = \w_mem_inst.reset_n_x ;
  assign \w_mem_inst.w = w;
  logic [32-1:0] w_c1 ;
  logic [32-1:0] w_r1 ;
  logic [32-1:0] w_x1 ;
  assign \w_mem_inst.w_t = w_t ;
  assign w_c1 = \w_mem_inst.w_c ;
  assign w_r1 = \w_mem_inst.w_r ;
  assign w_x1 = \w_mem_inst.w_x ;
  assign \w_mem_inst.w_0 = \w_mem_inst.w_mem[0] ;
  logic [32-1:0] \w_mem_inst.w_mem[0]_c3 ;
  logic [32-1:0] \w_mem_inst.w_mem[0]_r3 ;
  logic [32-1:0] \w_mem_inst.w_mem[0]_x3 ;
  assign \w_mem_inst.w_0_t = \w_mem_inst.w_mem[0]_t ;
  assign \w_mem_inst.w_mem[0]_c3 = \w_mem_inst.w_0_c ;
  assign \w_mem_inst.w_mem[0]_r3 = \w_mem_inst.w_0_r ;
  assign \w_mem_inst.w_mem[0]_x3 = \w_mem_inst.w_0_x ;
  assign \w_mem_inst.w_13 = \w_mem_inst.w_mem[13] ;
  logic [32-1:0] \w_mem_inst.w_mem[13]_c4 ;
  logic [32-1:0] \w_mem_inst.w_mem[13]_r4 ;
  logic [32-1:0] \w_mem_inst.w_mem[13]_x4 ;
  assign \w_mem_inst.w_13_t = \w_mem_inst.w_mem[13]_t ;
  assign \w_mem_inst.w_mem[13]_c4 = \w_mem_inst.w_13_c ;
  assign \w_mem_inst.w_mem[13]_r4 = \w_mem_inst.w_13_r ;
  assign \w_mem_inst.w_mem[13]_x4 = \w_mem_inst.w_13_x ;
  assign \w_mem_inst.w_2 = \w_mem_inst.w_mem[2] ;
  logic [32-1:0] \w_mem_inst.w_mem[2]_c4 ;
  logic [32-1:0] \w_mem_inst.w_mem[2]_r4 ;
  logic [32-1:0] \w_mem_inst.w_mem[2]_x4 ;
  assign \w_mem_inst.w_2_t = \w_mem_inst.w_mem[2]_t ;
  assign \w_mem_inst.w_mem[2]_c4 = \w_mem_inst.w_2_c ;
  assign \w_mem_inst.w_mem[2]_r4 = \w_mem_inst.w_2_r ;
  assign \w_mem_inst.w_mem[2]_x4 = \w_mem_inst.w_2_x ;
  assign \w_mem_inst.w_8 = \w_mem_inst.w_mem[8] ;
  logic [32-1:0] \w_mem_inst.w_mem[8]_c4 ;
  logic [32-1:0] \w_mem_inst.w_mem[8]_r4 ;
  logic [32-1:0] \w_mem_inst.w_mem[8]_x4 ;
  assign \w_mem_inst.w_8_t = \w_mem_inst.w_mem[8]_t ;
  assign \w_mem_inst.w_mem[8]_c4 = \w_mem_inst.w_8_c ;
  assign \w_mem_inst.w_mem[8]_r4 = \w_mem_inst.w_8_r ;
  assign \w_mem_inst.w_mem[8]_x4 = \w_mem_inst.w_8_x ;
  assign \w_mem_inst.w_ctr_rst = \w_mem_inst.sha1_w_mem_ctrl_new ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_new_c2 ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_new_r2 ;
  logic [1-1:0] \w_mem_inst.sha1_w_mem_ctrl_new_x2 ;
  assign \w_mem_inst.w_ctr_rst_t = \w_mem_inst.sha1_w_mem_ctrl_new_t ;
  assign \w_mem_inst.sha1_w_mem_ctrl_new_c2 = \w_mem_inst.w_ctr_rst_c ;
  assign \w_mem_inst.sha1_w_mem_ctrl_new_r2 = \w_mem_inst.w_ctr_rst_r ;
  assign \w_mem_inst.sha1_w_mem_ctrl_new_x2 = \w_mem_inst.w_ctr_rst_x ;
  assign \w_mem_inst.w_new = { \w_mem_inst.w_16 [30:0], \w_mem_inst.w_16 [31] };
  assign \w_mem_inst.w_new_t = {  \w_mem_inst.w_16_t [30:0] , \w_mem_inst.w_16_t [31]  };
  logic [32-1:0] \w_mem_inst.w_16_r4 ;
  logic [32-1:0] \w_mem_inst.w_16_x4 ;
  logic [32-1:0] \w_mem_inst.w_16_c4 ;
  assign \w_mem_inst.w_16_r4 [30:0] = \w_mem_inst.w_new_r [31:1] ;
  assign \w_mem_inst.w_16_x4 [30:0] = \w_mem_inst.w_new_x [31:1] ;
  assign \w_mem_inst.w_16_c4 [30:0] = \w_mem_inst.w_new_c [31:1] ;
  assign \w_mem_inst.w_16_r4 [31:31] = 0;
  assign \w_mem_inst.w_16_x4 [31:31] = 0;
  assign \w_mem_inst.w_16_c4 [31:31] = 0;
  logic [32-1:0] \w_mem_inst.w_16_r5 ;
  logic [32-1:0] \w_mem_inst.w_16_x5 ;
  logic [32-1:0] \w_mem_inst.w_16_c5 ;
  assign \w_mem_inst.w_16_r5 [31] = \w_mem_inst.w_new_r [0:0] ;
  assign \w_mem_inst.w_16_x5 [31] = \w_mem_inst.w_new_x [0:0] ;
  assign \w_mem_inst.w_16_c5 [31] = \w_mem_inst.w_new_c [0:0] ;
  assign \w_mem_inst.w_16_r5 [30:0] = 0;
  assign \w_mem_inst.w_16_x5 [30:0] = 0;
  assign \w_mem_inst.w_16_c5 [30:0] = 0;
  assign \w_mem_inst.w_tmp = w;
  logic [32-1:0] w_c2 ;
  logic [32-1:0] w_r2 ;
  logic [32-1:0] w_x2 ;
  assign \w_mem_inst.w_tmp_t = w_t ;
  assign w_c2 = \w_mem_inst.w_tmp_c ;
  assign w_r2 = \w_mem_inst.w_tmp_r ;
  assign w_x2 = \w_mem_inst.w_tmp_x ;
  assign w_next = round_ctr_inc;
  logic [1-1:0] round_ctr_inc_c10 ;
  logic [1-1:0] round_ctr_inc_r10 ;
  logic [1-1:0] round_ctr_inc_x10 ;
  assign w_next_t = round_ctr_inc_t ;
  assign round_ctr_inc_c10 = w_next_c ;
  assign round_ctr_inc_r10 = w_next_r ;
  assign round_ctr_inc_x10 = w_next_x ;
  assign H0_reg_t_1bit = | H0_reg_t ;
  assign H1_reg_t_1bit = | H1_reg_t ;
  assign H2_reg_t_1bit = | H2_reg_t ;
  assign H3_reg_t_1bit = | H3_reg_t ;
  assign H4_reg_t_1bit = | H4_reg_t ;
  assign a_reg_t_1bit = | a_reg_t ;
  assign b_reg_t_1bit = | b_reg_t ;
  assign c_reg_t_1bit = | c_reg_t ;
  assign d_reg_t_1bit = | d_reg_t ;
  assign digest_valid_reg_t_1bit = | digest_valid_reg_t ;
  assign e_reg_t_1bit = | e_reg_t ;
  assign round_ctr_reg_t_1bit = | round_ctr_reg_t ;
  assign sha1_ctrl_reg_t_1bit = | sha1_ctrl_reg_t ;
  assign \w_mem_inst.sha1_w_mem_ctrl_reg_t_1bit = | \w_mem_inst.sha1_w_mem_ctrl_reg_t ;
  assign \w_mem_inst.w_ctr_reg_t_1bit = | \w_mem_inst.w_ctr_reg_t ;
  assign \w_mem_inst.w_mem[0]_t_1bit = | \w_mem_inst.w_mem[0]_t ;
  assign \w_mem_inst.w_mem[10]_t_1bit = | \w_mem_inst.w_mem[10]_t ;
  assign \w_mem_inst.w_mem[11]_t_1bit = | \w_mem_inst.w_mem[11]_t ;
  assign \w_mem_inst.w_mem[12]_t_1bit = | \w_mem_inst.w_mem[12]_t ;
  assign \w_mem_inst.w_mem[13]_t_1bit = | \w_mem_inst.w_mem[13]_t ;
  assign \w_mem_inst.w_mem[14]_t_1bit = | \w_mem_inst.w_mem[14]_t ;
  assign \w_mem_inst.w_mem[15]_t_1bit = | \w_mem_inst.w_mem[15]_t ;
  assign \w_mem_inst.w_mem[1]_t_1bit = | \w_mem_inst.w_mem[1]_t ;
  assign \w_mem_inst.w_mem[2]_t_1bit = | \w_mem_inst.w_mem[2]_t ;
  assign \w_mem_inst.w_mem[3]_t_1bit = | \w_mem_inst.w_mem[3]_t ;
  assign \w_mem_inst.w_mem[4]_t_1bit = | \w_mem_inst.w_mem[4]_t ;
  assign \w_mem_inst.w_mem[5]_t_1bit = | \w_mem_inst.w_mem[5]_t ;
  assign \w_mem_inst.w_mem[6]_t_1bit = | \w_mem_inst.w_mem[6]_t ;
  assign \w_mem_inst.w_mem[7]_t_1bit = | \w_mem_inst.w_mem[7]_t ;
  assign \w_mem_inst.w_mem[8]_t_1bit = | \w_mem_inst.w_mem[8]_t ;
  assign \w_mem_inst.w_mem[9]_t_1bit = | \w_mem_inst.w_mem[9]_t ;
  assign ready_c = ( ready_c0 );
  assign _066__c = ( _066__c0 );
  assign _136__c = ( _136__c0 );
  assign _065__c = ( _065__c0 );
  assign _064__c = ( _064__c0 );
  assign _134__c = ( _134__c0 );
  assign _052__c = ( _052__c0 );
  assign _132__c = ( _132__c0 );
  assign \w_mem_inst.w_ctr_new_c = ( \w_mem_inst.w_ctr_new_c0 );
  assign \w_mem_inst.w_ctr_we_c = ( \w_mem_inst.w_ctr_we_c0 );
  assign \w_mem_inst.w_mem00_new_c = ( \w_mem_inst.w_mem00_new_c0 );
  assign \w_mem_inst.w_mem01_new_c = ( \w_mem_inst.w_mem01_new_c0 );
  assign \w_mem_inst.w_mem02_new_c = ( \w_mem_inst.w_mem02_new_c0 );
  assign \w_mem_inst.w_mem03_new_c = ( \w_mem_inst.w_mem03_new_c0 );
  assign \w_mem_inst.w_mem05_new_c = ( \w_mem_inst.w_mem05_new_c0 );
  assign \w_mem_inst.w_mem07_new_c = ( \w_mem_inst.w_mem07_new_c0 );
  assign \w_mem_inst.w_mem08_new_c = ( \w_mem_inst.w_mem08_new_c0 );
  assign \w_mem_inst.w_mem09_new_c = ( \w_mem_inst.w_mem09_new_c0 );
  assign \w_mem_inst.w_mem10_new_c = ( \w_mem_inst.w_mem10_new_c0 );
  assign \w_mem_inst.w_mem12_new_c = ( \w_mem_inst.w_mem12_new_c0 );
  assign \w_mem_inst.w_mem14_new_c = ( \w_mem_inst.w_mem14_new_c0 );
  assign \w_mem_inst.w_mem15_new_c = ( \w_mem_inst.w_mem15_new_c0 );
  assign \w_mem_inst.w_mem04_new_c = ( \w_mem_inst.w_mem04_new_c0 );
  assign fangyuan19_c = ( fangyuan19_c0 );
  assign _089__c = ( _089__c0 );
  assign _113__c = ( _113__c0 );
  assign fangyuan17_c = ( fangyuan17_c0 );
  assign _116__c = ( _116__c0 );
  assign _117__c = ( _117__c0 );
  assign _042__c = ( _042__c0 );
  assign \w_mem_inst.w_mem13_new_c = ( \w_mem_inst.w_mem13_new_c0 );
  assign \w_mem_inst.w_mem[12]_c = ( \w_mem_inst.w_mem[12]_c0 ) | ( \w_mem_inst.w_mem[12]_c1 ) | ( \w_mem_inst.w_mem[12]_c2 );
  assign _102__c = ( _102__c0 );
  assign _014__c = ( _014__c0 );
  assign _115__c = ( _115__c0 );
  assign _123__c = ( _123__c0 );
  assign _044__c = ( _044__c0 );
  assign _003__c = ( _003__c0 );
  assign fangyuan8_c = ( fangyuan8_c0 );
  assign H0_new_c = ( H0_new_c0 );
  assign _050__c = ( _050__c0 );
  assign _088__c = ( _088__c0 );
  assign _013__c = ( _013__c0 );
  assign fangyuan7_c = ( fangyuan7_c0 );
  assign _119__c = ( _119__c0 );
  assign _046__c = ( _046__c0 );
  assign _096__c = ( _096__c0 );
  assign _024__c = ( _024__c0 );
  assign digest_init_c = ( digest_init_c0 ) | ( digest_init_c1 ) | ( digest_init_c2 ) | ( digest_init_c3 ) | ( digest_init_c4 ) | ( digest_init_c5 ) | ( digest_init_c6 ) | ( digest_init_c7 ) | ( digest_init_c8 ) | ( digest_init_c9 ) | ( digest_init_c10 ) | ( digest_init_c11 );
  assign _022__c = ( _022__c0 );
  assign _034__c = ( _034__c0 );
  assign _057__c = ( _057__c0 ) | ( _057__c1 );
  assign a_reg_c = ( a_reg_c0 ) | ( a_reg_c1 ) | ( a_reg_c2 ) | ( a_reg_c3 ) | ( a_reg_c4 );
  assign _020__c = ( _020__c0 );
  assign _037__c = ( _037__c0 );
  assign _110__c = ( _110__c0 );
  assign fangyuan18_c = ( fangyuan18_c0 );
  assign fangyuan9_c = ( fangyuan9_c0 );
  assign _036__c = ( _036__c0 );
  assign _074__c = ( _074__c0 );
  assign _016__c = ( _016__c0 );
  assign fangyuan15_c = ( fangyuan15_c0 );
  assign _041__c = ( _041__c0 );
  assign _130__c = ( _130__c0 );
  assign digest_valid_reg_c = ( digest_valid_reg_c0 ) | ( digest_valid_reg_c1 );
  assign round_ctr_rst_c = ( round_ctr_rst_c0 ) | ( round_ctr_rst_c1 ) | ( round_ctr_rst_c2 ) | ( round_ctr_rst_c3 ) | ( round_ctr_rst_c4 ) | ( round_ctr_rst_c5 ) | ( round_ctr_rst_c6 ) | ( round_ctr_rst_c7 ) | ( round_ctr_rst_c8 ) | ( round_ctr_rst_c9 ) | ( round_ctr_rst_c10 ) | ( round_ctr_rst_c11 ) | ( round_ctr_rst_c12 ) | ( round_ctr_rst_c13 ) | ( round_ctr_rst_c14 ) | ( round_ctr_rst_c15 ) | ( round_ctr_rst_c16 ) | ( round_ctr_rst_c17 ) | ( round_ctr_rst_c18 ) | ( round_ctr_rst_c19 ) | ( round_ctr_rst_c20 ) | ( round_ctr_rst_c21 ) | ( round_ctr_rst_c22 ) | ( round_ctr_rst_c23 ) | ( round_ctr_rst_c24 ) | ( round_ctr_rst_c25 ) | ( round_ctr_rst_c26 );
  assign _040__c = ( _040__c0 );
  assign _019__c = ( _019__c0 );
  assign _018__c = ( _018__c0 );
  assign _039__c = ( _039__c0 );
  assign fangyuan5_c = ( fangyuan5_c0 );
  assign fangyuan6_c = ( fangyuan6_c0 );
  assign \w_mem_inst.w_mem_we_c = ( \w_mem_inst.w_mem_we_c0 ) | ( \w_mem_inst.w_mem_we_c1 ) | ( \w_mem_inst.w_mem_we_c2 ) | ( \w_mem_inst.w_mem_we_c3 ) | ( \w_mem_inst.w_mem_we_c4 ) | ( \w_mem_inst.w_mem_we_c5 ) | ( \w_mem_inst.w_mem_we_c6 ) | ( \w_mem_inst.w_mem_we_c7 ) | ( \w_mem_inst.w_mem_we_c8 ) | ( \w_mem_inst.w_mem_we_c9 ) | ( \w_mem_inst.w_mem_we_c10 ) | ( \w_mem_inst.w_mem_we_c11 ) | ( \w_mem_inst.w_mem_we_c12 ) | ( \w_mem_inst.w_mem_we_c13 ) | ( \w_mem_inst.w_mem_we_c14 ) | ( \w_mem_inst.w_mem_we_c15 );
  assign _084__c = ( _084__c0 );
  assign _103__c = ( _103__c0 );
  assign _121__c = ( _121__c0 );
  assign fangyuan4_c = ( fangyuan4_c0 );
  assign _077__c = ( _077__c0 );
  assign H1_new_c = ( H1_new_c0 );
  assign _045__c = ( _045__c0 );
  assign _128__c = ( _128__c0 );
  assign _059__c = ( _059__c0 );
  assign _055__c = ( _055__c0 );
  assign _133__c = ( _133__c0 );
  assign _063__c = ( _063__c0 );
  assign sha1_ctrl_we_c = ( sha1_ctrl_we_c0 );
  assign _017__c = ( _017__c0 );
  assign _023__c = ( _023__c0 );
  assign round_ctr_reg_c = ( round_ctr_reg_c0 ) | ( round_ctr_reg_c1 ) | ( round_ctr_reg_c2 ) | ( round_ctr_reg_c3 ) | ( round_ctr_reg_c4 ) | ( round_ctr_reg_c5 ) | ( round_ctr_reg_c6 ) | ( round_ctr_reg_c7 ) | ( round_ctr_reg_c8 );
  assign _048__c = ( _048__c0 );
  assign _035__c = ( _035__c0 );
  assign _004__c = ( _004__c0 );
  assign \w_mem_inst.w_mem[4]_c = ( \w_mem_inst.w_mem[4]_c0 ) | ( \w_mem_inst.w_mem[4]_c1 ) | ( \w_mem_inst.w_mem[4]_c2 );
  assign _032__c = ( _032__c0 );
  assign d_new_c = ( d_new_c0 );
  assign _083__c = ( _083__c0 );
  assign digest_update_c = ( digest_update_c0 ) | ( digest_update_c1 ) | ( digest_update_c2 ) | ( digest_update_c3 ) | ( digest_update_c4 ) | ( digest_update_c5 ) | ( digest_update_c6 ) | ( digest_update_c7 );
  assign _068__c = ( _068__c0 ) | ( _068__c1 ) | ( _068__c2 ) | ( _068__c3 ) | ( _068__c4 ) | ( _068__c5 );
  assign _060__c = ( _060__c0 );
  assign H3_reg_c = ( H3_reg_c0 ) | ( H3_reg_c1 ) | ( H3_reg_c2 ) | ( H3_reg_c3 );
  assign _137__c = ( _137__c0 );
  assign _131__c = ( _131__c0 );
  assign _006__c = ( _006__c0 );
  assign e_reg_c = ( e_reg_c0 ) | ( e_reg_c1 ) | ( e_reg_c2 );
  assign round_ctr_inc_c = ( round_ctr_inc_c0 ) | ( round_ctr_inc_c1 ) | ( round_ctr_inc_c2 ) | ( round_ctr_inc_c3 ) | ( round_ctr_inc_c4 ) | ( round_ctr_inc_c5 ) | ( round_ctr_inc_c6 ) | ( round_ctr_inc_c7 ) | ( round_ctr_inc_c8 ) | ( round_ctr_inc_c9 ) | ( round_ctr_inc_c10 );
  assign H0_reg_c = ( H0_reg_c0 ) | ( H0_reg_c1 ) | ( H0_reg_c2 ) | ( H0_reg_c3 );
  assign sha1_ctrl_reg_c = ( sha1_ctrl_reg_c0 ) | ( sha1_ctrl_reg_c1 ) | ( sha1_ctrl_reg_c2 ) | ( sha1_ctrl_reg_c3 );
  assign _067__c = ( _067__c0 ) | ( _067__c1 ) | ( _067__c2 );
  assign _002__c = ( _002__c0 );
  assign _114__c = ( _114__c0 ) | ( _114__c1 ) | ( _114__c2 );
  assign _049__c = ( _049__c0 );
  assign round_ctr_new_c = ( round_ctr_new_c0 );
  assign _098__c = ( _098__c0 );
  assign _047__c = ( _047__c0 );
  assign _031__c = ( _031__c0 );
  assign d_reg_c = ( d_reg_c0 ) | ( d_reg_c1 ) | ( d_reg_c2 ) | ( d_reg_c3 ) | ( d_reg_c4 ) | ( d_reg_c5 ) | ( d_reg_c6 );
  assign _005__c = ( _005__c0 );
  assign _028__c = ( _028__c0 );
  assign \w_mem_inst.w_mem[5]_c = ( \w_mem_inst.w_mem[5]_c0 ) | ( \w_mem_inst.w_mem[5]_c1 ) | ( \w_mem_inst.w_mem[5]_c2 );
  assign _026__c = ( _026__c0 );
  assign H4_new_c = ( H4_new_c0 );
  assign _000__c = ( _000__c0 );
  assign _012__c = ( _012__c0 );
  assign _091__c = ( _091__c0 );
  assign fangyuan0_c = ( fangyuan0_c0 );
  assign _007__c = ( _007__c0 );
  assign H_we_c = ( H_we_c0 ) | ( H_we_c1 ) | ( H_we_c2 ) | ( H_we_c3 ) | ( H_we_c4 );
  assign _079__c = ( _079__c0 );
  assign _075__c = ( _075__c0 );
  assign _001__c = ( _001__c0 );
  assign _011__c = ( _011__c0 );
  assign _033__c = ( _033__c0 ) | ( _033__c1 ) | ( _033__c2 ) | ( _033__c3 );
  assign _069__c = ( _069__c0 ) | ( _069__c1 ) | ( _069__c2 );
  assign fangyuan13_c = ( fangyuan13_c0 );
  assign _054__c = ( _054__c0 ) | ( _054__c1 );
  assign _051__c = ( _051__c0 );
  assign H1_reg_c = ( H1_reg_c0 ) | ( H1_reg_c1 ) | ( H1_reg_c2 ) | ( H1_reg_c3 );
  assign _029__c = ( _029__c0 ) | ( _029__c1 );
  assign _009__c = ( _009__c0 );
  assign _062__c = ( _062__c0 ) | ( _062__c1 );
  assign H4_reg_c = ( H4_reg_c0 ) | ( H4_reg_c1 ) | ( H4_reg_c2 ) | ( H4_reg_c3 );
  assign \w_mem_inst.w_mem[10]_c = ( \w_mem_inst.w_mem[10]_c0 ) | ( \w_mem_inst.w_mem[10]_c1 ) | ( \w_mem_inst.w_mem[10]_c2 );
  assign _015__c = ( _015__c0 );
  assign _021__c = ( _021__c0 );
  assign fangyuan2_c = ( fangyuan2_c0 );
  assign sha1_ctrl_new_c = ( sha1_ctrl_new_c0 );
  assign a_e_we_c = ( a_e_we_c0 ) | ( a_e_we_c1 ) | ( a_e_we_c2 ) | ( a_e_we_c3 ) | ( a_e_we_c4 ) | ( a_e_we_c5 ) | ( a_e_we_c6 );
  assign \w_mem_inst.w_mem06_new_c = ( \w_mem_inst.w_mem06_new_c0 );
  assign fangyuan16_c = ( fangyuan16_c0 );
  assign H3_new_c = ( H3_new_c0 );
  assign H2_new_c = ( H2_new_c0 );
  assign e_new_c = ( e_new_c0 );
  assign c_new_c = ( c_new_c0 );
  assign b_new_c = ( b_new_c0 );
  assign a_new_c = ( a_new_c0 );
  assign \w_mem_inst.w_ctr_reg_c = ( \w_mem_inst.w_ctr_reg_c0 ) | ( \w_mem_inst.w_ctr_reg_c1 ) | ( \w_mem_inst.w_ctr_reg_c2 ) | ( \w_mem_inst.w_ctr_reg_c3 ) | ( \w_mem_inst.w_ctr_reg_c4 ) | ( \w_mem_inst.w_ctr_reg_c5 ) | ( \w_mem_inst.w_ctr_reg_c6 ) | ( \w_mem_inst.w_ctr_reg_c7 ) | ( \w_mem_inst.w_ctr_reg_c8 ) | ( \w_mem_inst.w_ctr_reg_c9 ) | ( \w_mem_inst.w_ctr_reg_c10 ) | ( \w_mem_inst.w_ctr_reg_c11 ) | ( \w_mem_inst.w_ctr_reg_c12 ) | ( \w_mem_inst.w_ctr_reg_c13 ) | ( \w_mem_inst.w_ctr_reg_c14 ) | ( \w_mem_inst.w_ctr_reg_c15 ) | ( \w_mem_inst.w_ctr_reg_c16 ) | ( \w_mem_inst.w_ctr_reg_c17 ) | ( \w_mem_inst.w_ctr_reg_c18 ) | ( \w_mem_inst.w_ctr_reg_c19 ) | ( \w_mem_inst.w_ctr_reg_c20 );
  assign _071__c = ( _071__c0 );
  assign _070__c = ( _070__c0 );
  assign _095__c = ( _095__c0 );
  assign _072__c = ( _072__c0 );
  assign _080__c = ( _080__c0 );
  assign _087__c = ( _087__c0 );
  assign _118__c = ( _118__c0 );
  assign _081__c = ( _081__c0 );
  assign _082__c = ( _082__c0 );
  assign _085__c = ( _085__c0 );
  assign _086__c = ( _086__c0 );
  assign _073__c = ( _073__c0 );
  assign _094__c = ( _094__c0 );
  assign \w_mem_inst.sha1_w_mem_ctrl_we_c = ( \w_mem_inst.sha1_w_mem_ctrl_we_c0 );
  assign _058__c = ( _058__c0 ) | ( _058__c1 );
  assign _076__c = ( _076__c0 );
  assign _078__c = ( _078__c0 );
  assign _053__c = ( _053__c0 );
  assign fangyuan3_c = ( fangyuan3_c0 );
  assign _111__c = ( _111__c0 );
  assign digest_valid_we_c = ( digest_valid_we_c0 );
  assign _090__c = ( _090__c0 ) | ( _090__c1 );
  assign _056__c = ( _056__c0 );
  assign b_reg_c = ( b_reg_c0 ) | ( b_reg_c1 ) | ( b_reg_c2 ) | ( b_reg_c3 ) | ( b_reg_c4 ) | ( b_reg_c5 ) | ( b_reg_c6 ) | ( b_reg_c7 ) | ( b_reg_c8 );
  assign fangyuan11_c = ( fangyuan11_c0 );
  assign _010__c = ( _010__c0 );
  assign fangyuan10_c = ( fangyuan10_c0 );
  assign _030__c = ( _030__c0 );
  assign fangyuan14_c = ( fangyuan14_c0 );
  assign \w_mem_inst.w_ctr_inc_c = ( \w_mem_inst.w_ctr_inc_c0 ) | ( \w_mem_inst.w_ctr_inc_c1 );
  assign \w_mem_inst.w_mem[14]_c = ( \w_mem_inst.w_mem[14]_c0 ) | ( \w_mem_inst.w_mem[14]_c1 ) | ( \w_mem_inst.w_mem[14]_c2 );
  assign \w_mem_inst.sha1_w_mem_ctrl_new_c = ( \w_mem_inst.sha1_w_mem_ctrl_new_c0 ) | ( \w_mem_inst.sha1_w_mem_ctrl_new_c1 ) | ( \w_mem_inst.sha1_w_mem_ctrl_new_c2 );
  assign _108__c = ( _108__c0 );
  assign _112__c = ( _112__c0 ) | ( _112__c1 ) | ( _112__c2 ) | ( _112__c3 ) | ( _112__c4 ) | ( _112__c5 ) | ( _112__c6 ) | ( _112__c7 ) | ( _112__c8 ) | ( _112__c9 ) | ( _112__c10 ) | ( _112__c11 ) | ( _112__c12 ) | ( _112__c13 ) | ( _112__c14 ) | ( _112__c15 ) | ( _112__c16 );
  assign _135__c = ( _135__c0 ) | ( _135__c1 );
  assign \w_mem_inst.w_16_c = ( \w_mem_inst.w_16_c0 ) | ( \w_mem_inst.w_16_c1 ) | ( \w_mem_inst.w_16_c2 ) | ( \w_mem_inst.w_16_c3 ) | ( \w_mem_inst.w_16_c4 ) | ( \w_mem_inst.w_16_c5 );
  assign _109__c = ( _109__c0 );
  assign \w_mem_inst.w_mem[15]_c = ( \w_mem_inst.w_mem[15]_c0 ) | ( \w_mem_inst.w_mem[15]_c1 ) | ( \w_mem_inst.w_mem[15]_c2 );
  assign _061__c = ( _061__c0 ) | ( _061__c1 );
  assign \w_mem_inst.w_mem[13]_c = ( \w_mem_inst.w_mem[13]_c0 ) | ( \w_mem_inst.w_mem[13]_c1 ) | ( \w_mem_inst.w_mem[13]_c2 ) | ( \w_mem_inst.w_mem[13]_c3 ) | ( \w_mem_inst.w_mem[13]_c4 );
  assign \w_mem_inst.w_mem[11]_c = ( \w_mem_inst.w_mem[11]_c0 ) | ( \w_mem_inst.w_mem[11]_c1 ) | ( \w_mem_inst.w_mem[11]_c2 );
  assign \w_mem_inst.w_mem[8]_c = ( \w_mem_inst.w_mem[8]_c0 ) | ( \w_mem_inst.w_mem[8]_c1 ) | ( \w_mem_inst.w_mem[8]_c2 ) | ( \w_mem_inst.w_mem[8]_c3 ) | ( \w_mem_inst.w_mem[8]_c4 );
  assign \w_mem_inst.sha1_w_mem_ctrl_reg_c = ( \w_mem_inst.sha1_w_mem_ctrl_reg_c0 ) | ( \w_mem_inst.sha1_w_mem_ctrl_reg_c1 ) | ( \w_mem_inst.sha1_w_mem_ctrl_reg_c2 ) | ( \w_mem_inst.sha1_w_mem_ctrl_reg_c3 ) | ( \w_mem_inst.sha1_w_mem_ctrl_reg_c4 );
  assign \w_mem_inst.w_mem[7]_c = ( \w_mem_inst.w_mem[7]_c0 ) | ( \w_mem_inst.w_mem[7]_c1 ) | ( \w_mem_inst.w_mem[7]_c2 );
  assign \w_mem_inst.w_mem[6]_c = ( \w_mem_inst.w_mem[6]_c0 ) | ( \w_mem_inst.w_mem[6]_c1 ) | ( \w_mem_inst.w_mem[6]_c2 );
  assign \w_mem_inst.w_mem[3]_c = ( \w_mem_inst.w_mem[3]_c0 ) | ( \w_mem_inst.w_mem[3]_c1 ) | ( \w_mem_inst.w_mem[3]_c2 );
  assign H2_reg_c = ( H2_reg_c0 ) | ( H2_reg_c1 ) | ( H2_reg_c2 ) | ( H2_reg_c3 );
  assign \w_mem_inst.w_mem[2]_c = ( \w_mem_inst.w_mem[2]_c0 ) | ( \w_mem_inst.w_mem[2]_c1 ) | ( \w_mem_inst.w_mem[2]_c2 ) | ( \w_mem_inst.w_mem[2]_c3 ) | ( \w_mem_inst.w_mem[2]_c4 );
  assign \w_mem_inst.w_mem[1]_c = ( \w_mem_inst.w_mem[1]_c0 ) | ( \w_mem_inst.w_mem[1]_c1 ) | ( \w_mem_inst.w_mem[1]_c2 );
  assign \w_mem_inst.w_mem11_new_c = ( \w_mem_inst.w_mem11_new_c0 );
  assign \w_mem_inst.w_mem[0]_c = ( \w_mem_inst.w_mem[0]_c0 ) | ( \w_mem_inst.w_mem[0]_c1 ) | ( \w_mem_inst.w_mem[0]_c2 ) | ( \w_mem_inst.w_mem[0]_c3 );
  assign _038__c = ( _038__c0 );
  assign _107__c = ( _107__c0 );
  assign \w_mem_inst.w_mem[9]_c = ( \w_mem_inst.w_mem[9]_c0 ) | ( \w_mem_inst.w_mem[9]_c1 ) | ( \w_mem_inst.w_mem[9]_c2 );
  assign _106__c = ( _106__c0 );
  assign c_reg_c = ( c_reg_c0 ) | ( c_reg_c1 ) | ( c_reg_c2 ) | ( c_reg_c3 ) | ( c_reg_c4 ) | ( c_reg_c5 ) | ( c_reg_c6 );
  assign _092__c = ( _092__c0 );
  assign _105__c = ( _105__c0 );
  assign _122__c = ( _122__c0 );
  assign _104__c = ( _104__c0 );
  assign _101__c = ( _101__c0 );
  assign _100__c = ( _100__c0 );
  assign _099__c = ( _099__c0 );
  assign fangyuan1_c = ( fangyuan1_c0 );
  assign _008__c = ( _008__c0 );
  assign _097__c = ( _097__c0 );
  assign _043__c = ( _043__c0 );
  assign _093__c = ( _093__c0 );
  assign _025__c = ( _025__c0 );
  assign _129__c = ( _129__c0 );
  assign fangyuan12_c = ( fangyuan12_c0 );
  assign _127__c = ( _127__c0 );
  assign _126__c = ( _126__c0 );
  assign w_c = ( w_c0 ) | ( w_c1 ) | ( w_c2 );
  assign _125__c = ( _125__c0 );
  assign _027__c = ( _027__c0 );
  assign _124__c = ( _124__c0 );
  assign _120__c = ( _120__c0 );
  assign ready_x = ( ready_x0 );
  assign _066__x = ( _066__x0 );
  assign _136__x = ( _136__x0 );
  assign _065__x = ( _065__x0 );
  assign _064__x = ( _064__x0 );
  assign _134__x = ( _134__x0 );
  assign _052__x = ( _052__x0 );
  assign _132__x = ( _132__x0 );
  assign \w_mem_inst.w_ctr_new_x = ( \w_mem_inst.w_ctr_new_x0 );
  assign \w_mem_inst.w_ctr_we_x = ( \w_mem_inst.w_ctr_we_x0 );
  assign \w_mem_inst.w_mem00_new_x = ( \w_mem_inst.w_mem00_new_x0 );
  assign \w_mem_inst.w_mem01_new_x = ( \w_mem_inst.w_mem01_new_x0 );
  assign \w_mem_inst.w_mem02_new_x = ( \w_mem_inst.w_mem02_new_x0 );
  assign \w_mem_inst.w_mem03_new_x = ( \w_mem_inst.w_mem03_new_x0 );
  assign \w_mem_inst.w_mem05_new_x = ( \w_mem_inst.w_mem05_new_x0 );
  assign \w_mem_inst.w_mem07_new_x = ( \w_mem_inst.w_mem07_new_x0 );
  assign \w_mem_inst.w_mem08_new_x = ( \w_mem_inst.w_mem08_new_x0 );
  assign \w_mem_inst.w_mem09_new_x = ( \w_mem_inst.w_mem09_new_x0 );
  assign \w_mem_inst.w_mem10_new_x = ( \w_mem_inst.w_mem10_new_x0 );
  assign \w_mem_inst.w_mem12_new_x = ( \w_mem_inst.w_mem12_new_x0 );
  assign \w_mem_inst.w_mem14_new_x = ( \w_mem_inst.w_mem14_new_x0 );
  assign \w_mem_inst.w_mem15_new_x = ( \w_mem_inst.w_mem15_new_x0 );
  assign \w_mem_inst.w_mem04_new_x = ( \w_mem_inst.w_mem04_new_x0 );
  assign fangyuan19_x = ( fangyuan19_x0 );
  assign _089__x = ( _089__x0 );
  assign _113__x = ( _113__x0 );
  assign fangyuan17_x = ( fangyuan17_x0 );
  assign _116__x = ( _116__x0 );
  assign _117__x = ( _117__x0 );
  assign _042__x = ( _042__x0 );
  assign \w_mem_inst.w_mem13_new_x = ( \w_mem_inst.w_mem13_new_x0 );
  assign \w_mem_inst.w_mem[12]_x = | (( \w_mem_inst.w_mem[12]_x0 ) | ( \w_mem_inst.w_mem[12]_x1 ) | ( \w_mem_inst.w_mem[12]_x2 ));
  assign _102__x = ( _102__x0 );
  assign _014__x = ( _014__x0 );
  assign _115__x = ( _115__x0 );
  assign _123__x = ( _123__x0 );
  assign _044__x = ( _044__x0 );
  assign _003__x = ( _003__x0 );
  assign fangyuan8_x = ( fangyuan8_x0 );
  assign H0_new_x = ( H0_new_x0 );
  assign _050__x = ( _050__x0 );
  assign _088__x = ( _088__x0 );
  assign _013__x = ( _013__x0 );
  assign fangyuan7_x = ( fangyuan7_x0 );
  assign _119__x = ( _119__x0 );
  assign _046__x = ( _046__x0 );
  assign _096__x = ( _096__x0 );
  assign _024__x = ( _024__x0 );
  assign digest_init_x = ( digest_init_x0 ) | ( digest_init_x1 ) | ( digest_init_x2 ) | ( digest_init_x3 ) | ( digest_init_x4 ) | ( digest_init_x5 ) | ( digest_init_x6 ) | ( digest_init_x7 ) | ( digest_init_x8 ) | ( digest_init_x9 ) | ( digest_init_x10 ) | ( digest_init_x11 );
  assign _022__x = ( _022__x0 );
  assign _034__x = ( _034__x0 );
  assign _057__x = ( _057__x0 ) | ( _057__x1 );
  assign a_reg_x = | (( a_reg_x0 ) | ( a_reg_x1 ) | ( a_reg_x2 ) | ( a_reg_x3 ) | ( a_reg_x4 ));
  assign _020__x = ( _020__x0 );
  assign _037__x = ( _037__x0 );
  assign _110__x = ( _110__x0 );
  assign fangyuan18_x = ( fangyuan18_x0 );
  assign fangyuan9_x = ( fangyuan9_x0 );
  assign _036__x = ( _036__x0 );
  assign _074__x = ( _074__x0 );
  assign _016__x = ( _016__x0 );
  assign fangyuan15_x = ( fangyuan15_x0 );
  assign _041__x = ( _041__x0 );
  assign _130__x = ( _130__x0 );
  assign digest_valid_reg_x = | (( digest_valid_reg_x0 ) | ( digest_valid_reg_x1 ));
  assign round_ctr_rst_x = ( round_ctr_rst_x0 ) | ( round_ctr_rst_x1 ) | ( round_ctr_rst_x2 ) | ( round_ctr_rst_x3 ) | ( round_ctr_rst_x4 ) | ( round_ctr_rst_x5 ) | ( round_ctr_rst_x6 ) | ( round_ctr_rst_x7 ) | ( round_ctr_rst_x8 ) | ( round_ctr_rst_x9 ) | ( round_ctr_rst_x10 ) | ( round_ctr_rst_x11 ) | ( round_ctr_rst_x12 ) | ( round_ctr_rst_x13 ) | ( round_ctr_rst_x14 ) | ( round_ctr_rst_x15 ) | ( round_ctr_rst_x16 ) | ( round_ctr_rst_x17 ) | ( round_ctr_rst_x18 ) | ( round_ctr_rst_x19 ) | ( round_ctr_rst_x20 ) | ( round_ctr_rst_x21 ) | ( round_ctr_rst_x22 ) | ( round_ctr_rst_x23 ) | ( round_ctr_rst_x24 ) | ( round_ctr_rst_x25 ) | ( round_ctr_rst_x26 );
  assign _040__x = ( _040__x0 );
  assign _019__x = ( _019__x0 );
  assign _018__x = ( _018__x0 );
  assign _039__x = ( _039__x0 );
  assign fangyuan5_x = ( fangyuan5_x0 );
  assign fangyuan6_x = ( fangyuan6_x0 );
  assign \w_mem_inst.w_mem_we_x = ( \w_mem_inst.w_mem_we_x0 ) | ( \w_mem_inst.w_mem_we_x1 ) | ( \w_mem_inst.w_mem_we_x2 ) | ( \w_mem_inst.w_mem_we_x3 ) | ( \w_mem_inst.w_mem_we_x4 ) | ( \w_mem_inst.w_mem_we_x5 ) | ( \w_mem_inst.w_mem_we_x6 ) | ( \w_mem_inst.w_mem_we_x7 ) | ( \w_mem_inst.w_mem_we_x8 ) | ( \w_mem_inst.w_mem_we_x9 ) | ( \w_mem_inst.w_mem_we_x10 ) | ( \w_mem_inst.w_mem_we_x11 ) | ( \w_mem_inst.w_mem_we_x12 ) | ( \w_mem_inst.w_mem_we_x13 ) | ( \w_mem_inst.w_mem_we_x14 ) | ( \w_mem_inst.w_mem_we_x15 );
  assign _084__x = ( _084__x0 );
  assign _103__x = ( _103__x0 );
  assign _121__x = ( _121__x0 );
  assign fangyuan4_x = ( fangyuan4_x0 );
  assign _077__x = ( _077__x0 );
  assign H1_new_x = ( H1_new_x0 );
  assign _045__x = ( _045__x0 );
  assign _128__x = ( _128__x0 );
  assign _059__x = ( _059__x0 );
  assign _055__x = ( _055__x0 );
  assign _133__x = ( _133__x0 );
  assign _063__x = ( _063__x0 );
  assign sha1_ctrl_we_x = ( sha1_ctrl_we_x0 );
  assign _017__x = ( _017__x0 );
  assign _023__x = ( _023__x0 );
  assign round_ctr_reg_x = | (( round_ctr_reg_x0 ) | ( round_ctr_reg_x1 ) | ( round_ctr_reg_x2 ) | ( round_ctr_reg_x3 ) | ( round_ctr_reg_x4 ) | ( round_ctr_reg_x5 ) | ( round_ctr_reg_x6 ) | ( round_ctr_reg_x7 ) | ( round_ctr_reg_x8 ));
  assign _048__x = ( _048__x0 );
  assign _035__x = ( _035__x0 );
  assign _004__x = ( _004__x0 );
  assign \w_mem_inst.w_mem[4]_x = | (( \w_mem_inst.w_mem[4]_x0 ) | ( \w_mem_inst.w_mem[4]_x1 ) | ( \w_mem_inst.w_mem[4]_x2 ));
  assign _032__x = ( _032__x0 );
  assign d_new_x = ( d_new_x0 );
  assign _083__x = ( _083__x0 );
  assign digest_update_x = ( digest_update_x0 ) | ( digest_update_x1 ) | ( digest_update_x2 ) | ( digest_update_x3 ) | ( digest_update_x4 ) | ( digest_update_x5 ) | ( digest_update_x6 ) | ( digest_update_x7 );
  assign _068__x = ( _068__x0 ) | ( _068__x1 ) | ( _068__x2 ) | ( _068__x3 ) | ( _068__x4 ) | ( _068__x5 );
  assign _060__x = ( _060__x0 );
  assign H3_reg_x = | (( H3_reg_x0 ) | ( H3_reg_x1 ) | ( H3_reg_x2 ) | ( H3_reg_x3 ));
  assign _137__x = ( _137__x0 );
  assign _131__x = ( _131__x0 );
  assign _006__x = ( _006__x0 );
  assign e_reg_x = | (( e_reg_x0 ) | ( e_reg_x1 ) | ( e_reg_x2 ));
  assign round_ctr_inc_x = ( round_ctr_inc_x0 ) | ( round_ctr_inc_x1 ) | ( round_ctr_inc_x2 ) | ( round_ctr_inc_x3 ) | ( round_ctr_inc_x4 ) | ( round_ctr_inc_x5 ) | ( round_ctr_inc_x6 ) | ( round_ctr_inc_x7 ) | ( round_ctr_inc_x8 ) | ( round_ctr_inc_x9 ) | ( round_ctr_inc_x10 );
  assign H0_reg_x = | (( H0_reg_x0 ) | ( H0_reg_x1 ) | ( H0_reg_x2 ) | ( H0_reg_x3 ));
  assign sha1_ctrl_reg_x = | (( sha1_ctrl_reg_x0 ) | ( sha1_ctrl_reg_x1 ) | ( sha1_ctrl_reg_x2 ) | ( sha1_ctrl_reg_x3 ));
  assign _067__x = ( _067__x0 ) | ( _067__x1 ) | ( _067__x2 );
  assign _002__x = ( _002__x0 );
  assign _114__x = ( _114__x0 ) | ( _114__x1 ) | ( _114__x2 );
  assign _049__x = ( _049__x0 );
  assign round_ctr_new_x = ( round_ctr_new_x0 );
  assign _098__x = ( _098__x0 );
  assign _047__x = ( _047__x0 );
  assign _031__x = ( _031__x0 );
  assign d_reg_x = | (( d_reg_x0 ) | ( d_reg_x1 ) | ( d_reg_x2 ) | ( d_reg_x3 ) | ( d_reg_x4 ) | ( d_reg_x5 ) | ( d_reg_x6 ));
  assign _005__x = ( _005__x0 );
  assign _028__x = ( _028__x0 );
  assign \w_mem_inst.w_mem[5]_x = | (( \w_mem_inst.w_mem[5]_x0 ) | ( \w_mem_inst.w_mem[5]_x1 ) | ( \w_mem_inst.w_mem[5]_x2 ));
  assign _026__x = ( _026__x0 );
  assign H4_new_x = ( H4_new_x0 );
  assign _000__x = ( _000__x0 );
  assign _012__x = ( _012__x0 );
  assign _091__x = ( _091__x0 );
  assign fangyuan0_x = ( fangyuan0_x0 );
  assign _007__x = ( _007__x0 );
  assign H_we_x = ( H_we_x0 ) | ( H_we_x1 ) | ( H_we_x2 ) | ( H_we_x3 ) | ( H_we_x4 );
  assign _079__x = ( _079__x0 );
  assign _075__x = ( _075__x0 );
  assign _001__x = ( _001__x0 );
  assign _011__x = ( _011__x0 );
  assign _033__x = ( _033__x0 ) | ( _033__x1 ) | ( _033__x2 ) | ( _033__x3 );
  assign _069__x = ( _069__x0 ) | ( _069__x1 ) | ( _069__x2 );
  assign fangyuan13_x = ( fangyuan13_x0 );
  assign _054__x = ( _054__x0 ) | ( _054__x1 );
  assign _051__x = ( _051__x0 );
  assign H1_reg_x = | (( H1_reg_x0 ) | ( H1_reg_x1 ) | ( H1_reg_x2 ) | ( H1_reg_x3 ));
  assign _029__x = ( _029__x0 ) | ( _029__x1 );
  assign _009__x = ( _009__x0 );
  assign _062__x = ( _062__x0 ) | ( _062__x1 );
  assign H4_reg_x = | (( H4_reg_x0 ) | ( H4_reg_x1 ) | ( H4_reg_x2 ) | ( H4_reg_x3 ));
  assign \w_mem_inst.w_mem[10]_x = | (( \w_mem_inst.w_mem[10]_x0 ) | ( \w_mem_inst.w_mem[10]_x1 ) | ( \w_mem_inst.w_mem[10]_x2 ));
  assign _015__x = ( _015__x0 );
  assign _021__x = ( _021__x0 );
  assign fangyuan2_x = ( fangyuan2_x0 );
  assign sha1_ctrl_new_x = ( sha1_ctrl_new_x0 );
  assign a_e_we_x = ( a_e_we_x0 ) | ( a_e_we_x1 ) | ( a_e_we_x2 ) | ( a_e_we_x3 ) | ( a_e_we_x4 ) | ( a_e_we_x5 ) | ( a_e_we_x6 );
  assign \w_mem_inst.w_mem06_new_x = ( \w_mem_inst.w_mem06_new_x0 );
  assign fangyuan16_x = ( fangyuan16_x0 );
  assign H3_new_x = ( H3_new_x0 );
  assign H2_new_x = ( H2_new_x0 );
  assign e_new_x = ( e_new_x0 );
  assign c_new_x = ( c_new_x0 );
  assign b_new_x = ( b_new_x0 );
  assign a_new_x = ( a_new_x0 );
  assign \w_mem_inst.w_ctr_reg_x = | (( \w_mem_inst.w_ctr_reg_x0 ) | ( \w_mem_inst.w_ctr_reg_x1 ) | ( \w_mem_inst.w_ctr_reg_x2 ) | ( \w_mem_inst.w_ctr_reg_x3 ) | ( \w_mem_inst.w_ctr_reg_x4 ) | ( \w_mem_inst.w_ctr_reg_x5 ) | ( \w_mem_inst.w_ctr_reg_x6 ) | ( \w_mem_inst.w_ctr_reg_x7 ) | ( \w_mem_inst.w_ctr_reg_x8 ) | ( \w_mem_inst.w_ctr_reg_x9 ) | ( \w_mem_inst.w_ctr_reg_x10 ) | ( \w_mem_inst.w_ctr_reg_x11 ) | ( \w_mem_inst.w_ctr_reg_x12 ) | ( \w_mem_inst.w_ctr_reg_x13 ) | ( \w_mem_inst.w_ctr_reg_x14 ) | ( \w_mem_inst.w_ctr_reg_x15 ) | ( \w_mem_inst.w_ctr_reg_x16 ) | ( \w_mem_inst.w_ctr_reg_x17 ) | ( \w_mem_inst.w_ctr_reg_x18 ) | ( \w_mem_inst.w_ctr_reg_x19 ) | ( \w_mem_inst.w_ctr_reg_x20 ));
  assign _071__x = ( _071__x0 );
  assign _070__x = ( _070__x0 );
  assign _095__x = ( _095__x0 );
  assign _072__x = ( _072__x0 );
  assign _080__x = ( _080__x0 );
  assign _087__x = ( _087__x0 );
  assign _118__x = ( _118__x0 );
  assign _081__x = ( _081__x0 );
  assign _082__x = ( _082__x0 );
  assign _085__x = ( _085__x0 );
  assign _086__x = ( _086__x0 );
  assign _073__x = ( _073__x0 );
  assign _094__x = ( _094__x0 );
  assign \w_mem_inst.sha1_w_mem_ctrl_we_x = ( \w_mem_inst.sha1_w_mem_ctrl_we_x0 );
  assign _058__x = ( _058__x0 ) | ( _058__x1 );
  assign _076__x = ( _076__x0 );
  assign _078__x = ( _078__x0 );
  assign _053__x = ( _053__x0 );
  assign fangyuan3_x = ( fangyuan3_x0 );
  assign _111__x = ( _111__x0 );
  assign digest_valid_we_x = ( digest_valid_we_x0 );
  assign _090__x = ( _090__x0 ) | ( _090__x1 );
  assign _056__x = ( _056__x0 );
  assign b_reg_x = | (( b_reg_x0 ) | ( b_reg_x1 ) | ( b_reg_x2 ) | ( b_reg_x3 ) | ( b_reg_x4 ) | ( b_reg_x5 ) | ( b_reg_x6 ) | ( b_reg_x7 ) | ( b_reg_x8 ));
  assign fangyuan11_x = ( fangyuan11_x0 );
  assign _010__x = ( _010__x0 );
  assign fangyuan10_x = ( fangyuan10_x0 );
  assign _030__x = ( _030__x0 );
  assign fangyuan14_x = ( fangyuan14_x0 );
  assign \w_mem_inst.w_ctr_inc_x = ( \w_mem_inst.w_ctr_inc_x0 ) | ( \w_mem_inst.w_ctr_inc_x1 );
  assign \w_mem_inst.w_mem[14]_x = | (( \w_mem_inst.w_mem[14]_x0 ) | ( \w_mem_inst.w_mem[14]_x1 ) | ( \w_mem_inst.w_mem[14]_x2 ));
  assign \w_mem_inst.sha1_w_mem_ctrl_new_x = ( \w_mem_inst.sha1_w_mem_ctrl_new_x0 ) | ( \w_mem_inst.sha1_w_mem_ctrl_new_x1 ) | ( \w_mem_inst.sha1_w_mem_ctrl_new_x2 );
  assign _108__x = ( _108__x0 );
  assign _112__x = ( _112__x0 ) | ( _112__x1 ) | ( _112__x2 ) | ( _112__x3 ) | ( _112__x4 ) | ( _112__x5 ) | ( _112__x6 ) | ( _112__x7 ) | ( _112__x8 ) | ( _112__x9 ) | ( _112__x10 ) | ( _112__x11 ) | ( _112__x12 ) | ( _112__x13 ) | ( _112__x14 ) | ( _112__x15 ) | ( _112__x16 );
  assign _135__x = ( _135__x0 ) | ( _135__x1 );
  assign \w_mem_inst.w_16_x = ( \w_mem_inst.w_16_x0 ) | ( \w_mem_inst.w_16_x1 ) | ( \w_mem_inst.w_16_x2 ) | ( \w_mem_inst.w_16_x3 ) | ( \w_mem_inst.w_16_x4 ) | ( \w_mem_inst.w_16_x5 );
  assign _109__x = ( _109__x0 );
  assign \w_mem_inst.w_mem[15]_x = | (( \w_mem_inst.w_mem[15]_x0 ) | ( \w_mem_inst.w_mem[15]_x1 ) | ( \w_mem_inst.w_mem[15]_x2 ));
  assign _061__x = ( _061__x0 ) | ( _061__x1 );
  assign \w_mem_inst.w_mem[13]_x = | (( \w_mem_inst.w_mem[13]_x0 ) | ( \w_mem_inst.w_mem[13]_x1 ) | ( \w_mem_inst.w_mem[13]_x2 ) | ( \w_mem_inst.w_mem[13]_x3 ) | ( \w_mem_inst.w_mem[13]_x4 ));
  assign \w_mem_inst.w_mem[11]_x = | (( \w_mem_inst.w_mem[11]_x0 ) | ( \w_mem_inst.w_mem[11]_x1 ) | ( \w_mem_inst.w_mem[11]_x2 ));
  assign \w_mem_inst.w_mem[8]_x = | (( \w_mem_inst.w_mem[8]_x0 ) | ( \w_mem_inst.w_mem[8]_x1 ) | ( \w_mem_inst.w_mem[8]_x2 ) | ( \w_mem_inst.w_mem[8]_x3 ) | ( \w_mem_inst.w_mem[8]_x4 ));
  assign \w_mem_inst.sha1_w_mem_ctrl_reg_x = | (( \w_mem_inst.sha1_w_mem_ctrl_reg_x0 ) | ( \w_mem_inst.sha1_w_mem_ctrl_reg_x1 ) | ( \w_mem_inst.sha1_w_mem_ctrl_reg_x2 ) | ( \w_mem_inst.sha1_w_mem_ctrl_reg_x3 ) | ( \w_mem_inst.sha1_w_mem_ctrl_reg_x4 ));
  assign \w_mem_inst.w_mem[7]_x = | (( \w_mem_inst.w_mem[7]_x0 ) | ( \w_mem_inst.w_mem[7]_x1 ) | ( \w_mem_inst.w_mem[7]_x2 ));
  assign \w_mem_inst.w_mem[6]_x = | (( \w_mem_inst.w_mem[6]_x0 ) | ( \w_mem_inst.w_mem[6]_x1 ) | ( \w_mem_inst.w_mem[6]_x2 ));
  assign \w_mem_inst.w_mem[3]_x = | (( \w_mem_inst.w_mem[3]_x0 ) | ( \w_mem_inst.w_mem[3]_x1 ) | ( \w_mem_inst.w_mem[3]_x2 ));
  assign H2_reg_x = | (( H2_reg_x0 ) | ( H2_reg_x1 ) | ( H2_reg_x2 ) | ( H2_reg_x3 ));
  assign \w_mem_inst.w_mem[2]_x = | (( \w_mem_inst.w_mem[2]_x0 ) | ( \w_mem_inst.w_mem[2]_x1 ) | ( \w_mem_inst.w_mem[2]_x2 ) | ( \w_mem_inst.w_mem[2]_x3 ) | ( \w_mem_inst.w_mem[2]_x4 ));
  assign \w_mem_inst.w_mem[1]_x = | (( \w_mem_inst.w_mem[1]_x0 ) | ( \w_mem_inst.w_mem[1]_x1 ) | ( \w_mem_inst.w_mem[1]_x2 ));
  assign \w_mem_inst.w_mem11_new_x = ( \w_mem_inst.w_mem11_new_x0 );
  assign \w_mem_inst.w_mem[0]_x = | (( \w_mem_inst.w_mem[0]_x0 ) | ( \w_mem_inst.w_mem[0]_x1 ) | ( \w_mem_inst.w_mem[0]_x2 ) | ( \w_mem_inst.w_mem[0]_x3 ));
  assign _038__x = ( _038__x0 );
  assign _107__x = ( _107__x0 );
  assign \w_mem_inst.w_mem[9]_x = | (( \w_mem_inst.w_mem[9]_x0 ) | ( \w_mem_inst.w_mem[9]_x1 ) | ( \w_mem_inst.w_mem[9]_x2 ));
  assign _106__x = ( _106__x0 );
  assign c_reg_x = | (( c_reg_x0 ) | ( c_reg_x1 ) | ( c_reg_x2 ) | ( c_reg_x3 ) | ( c_reg_x4 ) | ( c_reg_x5 ) | ( c_reg_x6 ));
  assign _092__x = ( _092__x0 );
  assign _105__x = ( _105__x0 );
  assign _122__x = ( _122__x0 );
  assign _104__x = ( _104__x0 );
  assign _101__x = ( _101__x0 );
  assign _100__x = ( _100__x0 );
  assign _099__x = ( _099__x0 );
  assign fangyuan1_x = ( fangyuan1_x0 );
  assign _008__x = ( _008__x0 );
  assign _097__x = ( _097__x0 );
  assign _043__x = ( _043__x0 );
  assign _093__x = ( _093__x0 );
  assign _025__x = ( _025__x0 );
  assign _129__x = ( _129__x0 );
  assign fangyuan12_x = ( fangyuan12_x0 );
  assign _127__x = ( _127__x0 );
  assign _126__x = ( _126__x0 );
  assign w_x = ( w_x0 ) | ( w_x1 ) | ( w_x2 );
  assign _125__x = ( _125__x0 );
  assign _027__x = ( _027__x0 );
  assign _124__x = ( _124__x0 );
  assign _120__x = ( _120__x0 );
  assign ready_r = ( ready_x0 & ready_r0 );
  assign _066__r = ( _066__x0 & _066__r0 );
  assign _136__r = ( _136__x0 & _136__r0 );
  assign _065__r = ( _065__x0 & _065__r0 );
  assign _064__r = ( _064__x0 & _064__r0 );
  assign _134__r = ( _134__x0 & _134__r0 );
  assign _052__r = ( _052__x0 & _052__r0 );
  assign _132__r = ( _132__x0 & _132__r0 );
  assign \w_mem_inst.w_ctr_new_r = ( \w_mem_inst.w_ctr_new_x0 & \w_mem_inst.w_ctr_new_r0 );
  assign \w_mem_inst.w_ctr_we_r = ( \w_mem_inst.w_ctr_we_x0 & \w_mem_inst.w_ctr_we_r0 );
  assign \w_mem_inst.w_mem00_new_r = ( \w_mem_inst.w_mem00_new_x0 & \w_mem_inst.w_mem00_new_r0 );
  assign \w_mem_inst.w_mem01_new_r = ( \w_mem_inst.w_mem01_new_x0 & \w_mem_inst.w_mem01_new_r0 );
  assign \w_mem_inst.w_mem02_new_r = ( \w_mem_inst.w_mem02_new_x0 & \w_mem_inst.w_mem02_new_r0 );
  assign \w_mem_inst.w_mem03_new_r = ( \w_mem_inst.w_mem03_new_x0 & \w_mem_inst.w_mem03_new_r0 );
  assign \w_mem_inst.w_mem05_new_r = ( \w_mem_inst.w_mem05_new_x0 & \w_mem_inst.w_mem05_new_r0 );
  assign \w_mem_inst.w_mem07_new_r = ( \w_mem_inst.w_mem07_new_x0 & \w_mem_inst.w_mem07_new_r0 );
  assign \w_mem_inst.w_mem08_new_r = ( \w_mem_inst.w_mem08_new_x0 & \w_mem_inst.w_mem08_new_r0 );
  assign \w_mem_inst.w_mem09_new_r = ( \w_mem_inst.w_mem09_new_x0 & \w_mem_inst.w_mem09_new_r0 );
  assign \w_mem_inst.w_mem10_new_r = ( \w_mem_inst.w_mem10_new_x0 & \w_mem_inst.w_mem10_new_r0 );
  assign \w_mem_inst.w_mem12_new_r = ( \w_mem_inst.w_mem12_new_x0 & \w_mem_inst.w_mem12_new_r0 );
  assign \w_mem_inst.w_mem14_new_r = ( \w_mem_inst.w_mem14_new_x0 & \w_mem_inst.w_mem14_new_r0 );
  assign \w_mem_inst.w_mem15_new_r = ( \w_mem_inst.w_mem15_new_x0 & \w_mem_inst.w_mem15_new_r0 );
  assign \w_mem_inst.w_mem04_new_r = ( \w_mem_inst.w_mem04_new_x0 & \w_mem_inst.w_mem04_new_r0 );
  assign fangyuan19_r = ( fangyuan19_x0 & fangyuan19_r0 );
  assign _089__r = ( _089__x0 & _089__r0 );
  assign _113__r = ( _113__x0 & _113__r0 );
  assign fangyuan17_r = ( fangyuan17_x0 & fangyuan17_r0 );
  assign _116__r = ( _116__x0 & _116__r0 );
  assign _117__r = ( _117__x0 & _117__r0 );
  assign _042__r = ( _042__x0 & _042__r0 );
  assign \w_mem_inst.w_mem13_new_r = ( \w_mem_inst.w_mem13_new_x0 & \w_mem_inst.w_mem13_new_r0 );
  assign \w_mem_inst.w_mem[12]_r = ( \w_mem_inst.w_mem[12]_x0 & \w_mem_inst.w_mem[12]_r0 ) | ( \w_mem_inst.w_mem[12]_x1 & \w_mem_inst.w_mem[12]_r1 ) | ( \w_mem_inst.w_mem[12]_x2 & \w_mem_inst.w_mem[12]_r2 );
  assign _102__r = ( _102__x0 & _102__r0 );
  assign _014__r = ( _014__x0 & _014__r0 );
  assign _115__r = ( _115__x0 & _115__r0 );
  assign _123__r = ( _123__x0 & _123__r0 );
  assign _044__r = ( _044__x0 & _044__r0 );
  assign _003__r = ( _003__x0 & _003__r0 );
  assign fangyuan8_r = ( fangyuan8_x0 & fangyuan8_r0 );
  assign H0_new_r = ( H0_new_x0 & H0_new_r0 );
  assign _050__r = ( _050__x0 & _050__r0 );
  assign _088__r = ( _088__x0 & _088__r0 );
  assign _013__r = ( _013__x0 & _013__r0 );
  assign fangyuan7_r = ( fangyuan7_x0 & fangyuan7_r0 );
  assign _119__r = ( _119__x0 & _119__r0 );
  assign _046__r = ( _046__x0 & _046__r0 );
  assign _096__r = ( _096__x0 & _096__r0 );
  assign _024__r = ( _024__x0 & _024__r0 );
  assign digest_init_r = ( digest_init_x0 & digest_init_r0 ) | ( digest_init_x1 & digest_init_r1 ) | ( digest_init_x2 & digest_init_r2 ) | ( digest_init_x3 & digest_init_r3 ) | ( digest_init_x4 & digest_init_r4 ) | ( digest_init_x5 & digest_init_r5 ) | ( digest_init_x6 & digest_init_r6 ) | ( digest_init_x7 & digest_init_r7 ) | ( digest_init_x8 & digest_init_r8 ) | ( digest_init_x9 & digest_init_r9 ) | ( digest_init_x10 & digest_init_r10 ) | ( digest_init_x11 & digest_init_r11 );
  assign _022__r = ( _022__x0 & _022__r0 );
  assign _034__r = ( _034__x0 & _034__r0 );
  assign _057__r = ( _057__x0 & _057__r0 ) | ( _057__x1 & _057__r1 );
  assign a_reg_r = ( a_reg_x0 & a_reg_r0 ) | ( a_reg_x1 & a_reg_r1 ) | ( a_reg_x2 & a_reg_r2 ) | ( a_reg_x3 & a_reg_r3 ) | ( a_reg_x4 & a_reg_r4 );
  assign _020__r = ( _020__x0 & _020__r0 );
  assign _037__r = ( _037__x0 & _037__r0 );
  assign _110__r = ( _110__x0 & _110__r0 );
  assign fangyuan18_r = ( fangyuan18_x0 & fangyuan18_r0 );
  assign fangyuan9_r = ( fangyuan9_x0 & fangyuan9_r0 );
  assign _036__r = ( _036__x0 & _036__r0 );
  assign _074__r = ( _074__x0 & _074__r0 );
  assign _016__r = ( _016__x0 & _016__r0 );
  assign fangyuan15_r = ( fangyuan15_x0 & fangyuan15_r0 );
  assign _041__r = ( _041__x0 & _041__r0 );
  assign _130__r = ( _130__x0 & _130__r0 );
  assign digest_valid_reg_r = ( digest_valid_reg_x0 & digest_valid_reg_r0 ) | ( digest_valid_reg_x1 & digest_valid_reg_r1 );
  assign round_ctr_rst_r = ( round_ctr_rst_x0 & round_ctr_rst_r0 ) | ( round_ctr_rst_x1 & round_ctr_rst_r1 ) | ( round_ctr_rst_x2 & round_ctr_rst_r2 ) | ( round_ctr_rst_x3 & round_ctr_rst_r3 ) | ( round_ctr_rst_x4 & round_ctr_rst_r4 ) | ( round_ctr_rst_x5 & round_ctr_rst_r5 ) | ( round_ctr_rst_x6 & round_ctr_rst_r6 ) | ( round_ctr_rst_x7 & round_ctr_rst_r7 ) | ( round_ctr_rst_x8 & round_ctr_rst_r8 ) | ( round_ctr_rst_x9 & round_ctr_rst_r9 ) | ( round_ctr_rst_x10 & round_ctr_rst_r10 ) | ( round_ctr_rst_x11 & round_ctr_rst_r11 ) | ( round_ctr_rst_x12 & round_ctr_rst_r12 ) | ( round_ctr_rst_x13 & round_ctr_rst_r13 ) | ( round_ctr_rst_x14 & round_ctr_rst_r14 ) | ( round_ctr_rst_x15 & round_ctr_rst_r15 ) | ( round_ctr_rst_x16 & round_ctr_rst_r16 ) | ( round_ctr_rst_x17 & round_ctr_rst_r17 ) | ( round_ctr_rst_x18 & round_ctr_rst_r18 ) | ( round_ctr_rst_x19 & round_ctr_rst_r19 ) | ( round_ctr_rst_x20 & round_ctr_rst_r20 ) | ( round_ctr_rst_x21 & round_ctr_rst_r21 ) | ( round_ctr_rst_x22 & round_ctr_rst_r22 ) | ( round_ctr_rst_x23 & round_ctr_rst_r23 ) | ( round_ctr_rst_x24 & round_ctr_rst_r24 ) | ( round_ctr_rst_x25 & round_ctr_rst_r25 ) | ( round_ctr_rst_x26 & round_ctr_rst_r26 );
  assign _040__r = ( _040__x0 & _040__r0 );
  assign _019__r = ( _019__x0 & _019__r0 );
  assign _018__r = ( _018__x0 & _018__r0 );
  assign _039__r = ( _039__x0 & _039__r0 );
  assign fangyuan5_r = ( fangyuan5_x0 & fangyuan5_r0 );
  assign fangyuan6_r = ( fangyuan6_x0 & fangyuan6_r0 );
  assign \w_mem_inst.w_mem_we_r = ( \w_mem_inst.w_mem_we_x0 & \w_mem_inst.w_mem_we_r0 ) | ( \w_mem_inst.w_mem_we_x1 & \w_mem_inst.w_mem_we_r1 ) | ( \w_mem_inst.w_mem_we_x2 & \w_mem_inst.w_mem_we_r2 ) | ( \w_mem_inst.w_mem_we_x3 & \w_mem_inst.w_mem_we_r3 ) | ( \w_mem_inst.w_mem_we_x4 & \w_mem_inst.w_mem_we_r4 ) | ( \w_mem_inst.w_mem_we_x5 & \w_mem_inst.w_mem_we_r5 ) | ( \w_mem_inst.w_mem_we_x6 & \w_mem_inst.w_mem_we_r6 ) | ( \w_mem_inst.w_mem_we_x7 & \w_mem_inst.w_mem_we_r7 ) | ( \w_mem_inst.w_mem_we_x8 & \w_mem_inst.w_mem_we_r8 ) | ( \w_mem_inst.w_mem_we_x9 & \w_mem_inst.w_mem_we_r9 ) | ( \w_mem_inst.w_mem_we_x10 & \w_mem_inst.w_mem_we_r10 ) | ( \w_mem_inst.w_mem_we_x11 & \w_mem_inst.w_mem_we_r11 ) | ( \w_mem_inst.w_mem_we_x12 & \w_mem_inst.w_mem_we_r12 ) | ( \w_mem_inst.w_mem_we_x13 & \w_mem_inst.w_mem_we_r13 ) | ( \w_mem_inst.w_mem_we_x14 & \w_mem_inst.w_mem_we_r14 ) | ( \w_mem_inst.w_mem_we_x15 & \w_mem_inst.w_mem_we_r15 );
  assign _084__r = ( _084__x0 & _084__r0 );
  assign _103__r = ( _103__x0 & _103__r0 );
  assign _121__r = ( _121__x0 & _121__r0 );
  assign fangyuan4_r = ( fangyuan4_x0 & fangyuan4_r0 );
  assign _077__r = ( _077__x0 & _077__r0 );
  assign H1_new_r = ( H1_new_x0 & H1_new_r0 );
  assign _045__r = ( _045__x0 & _045__r0 );
  assign _128__r = ( _128__x0 & _128__r0 );
  assign _059__r = ( _059__x0 & _059__r0 );
  assign _055__r = ( _055__x0 & _055__r0 );
  assign _133__r = ( _133__x0 & _133__r0 );
  assign _063__r = ( _063__x0 & _063__r0 );
  assign sha1_ctrl_we_r = ( sha1_ctrl_we_x0 & sha1_ctrl_we_r0 );
  assign _017__r = ( _017__x0 & _017__r0 );
  assign _023__r = ( _023__x0 & _023__r0 );
  assign round_ctr_reg_r = ( round_ctr_reg_x0 & round_ctr_reg_r0 ) | ( round_ctr_reg_x1 & round_ctr_reg_r1 ) | ( round_ctr_reg_x2 & round_ctr_reg_r2 ) | ( round_ctr_reg_x3 & round_ctr_reg_r3 ) | ( round_ctr_reg_x4 & round_ctr_reg_r4 ) | ( round_ctr_reg_x5 & round_ctr_reg_r5 ) | ( round_ctr_reg_x6 & round_ctr_reg_r6 ) | ( round_ctr_reg_x7 & round_ctr_reg_r7 ) | ( round_ctr_reg_x8 & round_ctr_reg_r8 );
  assign _048__r = ( _048__x0 & _048__r0 );
  assign _035__r = ( _035__x0 & _035__r0 );
  assign _004__r = ( _004__x0 & _004__r0 );
  assign \w_mem_inst.w_mem[4]_r = ( \w_mem_inst.w_mem[4]_x0 & \w_mem_inst.w_mem[4]_r0 ) | ( \w_mem_inst.w_mem[4]_x1 & \w_mem_inst.w_mem[4]_r1 ) | ( \w_mem_inst.w_mem[4]_x2 & \w_mem_inst.w_mem[4]_r2 );
  assign _032__r = ( _032__x0 & _032__r0 );
  assign d_new_r = ( d_new_x0 & d_new_r0 );
  assign _083__r = ( _083__x0 & _083__r0 );
  assign digest_update_r = ( digest_update_x0 & digest_update_r0 ) | ( digest_update_x1 & digest_update_r1 ) | ( digest_update_x2 & digest_update_r2 ) | ( digest_update_x3 & digest_update_r3 ) | ( digest_update_x4 & digest_update_r4 ) | ( digest_update_x5 & digest_update_r5 ) | ( digest_update_x6 & digest_update_r6 ) | ( digest_update_x7 & digest_update_r7 );
  assign _068__r = ( _068__x0 & _068__r0 ) | ( _068__x1 & _068__r1 ) | ( _068__x2 & _068__r2 ) | ( _068__x3 & _068__r3 ) | ( _068__x4 & _068__r4 ) | ( _068__x5 & _068__r5 );
  assign _060__r = ( _060__x0 & _060__r0 );
  assign H3_reg_r = ( H3_reg_x0 & H3_reg_r0 ) | ( H3_reg_x1 & H3_reg_r1 ) | ( H3_reg_x2 & H3_reg_r2 ) | ( H3_reg_x3 & H3_reg_r3 );
  assign _137__r = ( _137__x0 & _137__r0 );
  assign _131__r = ( _131__x0 & _131__r0 );
  assign _006__r = ( _006__x0 & _006__r0 );
  assign e_reg_r = ( e_reg_x0 & e_reg_r0 ) | ( e_reg_x1 & e_reg_r1 ) | ( e_reg_x2 & e_reg_r2 );
  assign round_ctr_inc_r = ( round_ctr_inc_x0 & round_ctr_inc_r0 ) | ( round_ctr_inc_x1 & round_ctr_inc_r1 ) | ( round_ctr_inc_x2 & round_ctr_inc_r2 ) | ( round_ctr_inc_x3 & round_ctr_inc_r3 ) | ( round_ctr_inc_x4 & round_ctr_inc_r4 ) | ( round_ctr_inc_x5 & round_ctr_inc_r5 ) | ( round_ctr_inc_x6 & round_ctr_inc_r6 ) | ( round_ctr_inc_x7 & round_ctr_inc_r7 ) | ( round_ctr_inc_x8 & round_ctr_inc_r8 ) | ( round_ctr_inc_x9 & round_ctr_inc_r9 ) | ( round_ctr_inc_x10 & round_ctr_inc_r10 );
  assign H0_reg_r = ( H0_reg_x0 & H0_reg_r0 ) | ( H0_reg_x1 & H0_reg_r1 ) | ( H0_reg_x2 & H0_reg_r2 ) | ( H0_reg_x3 & H0_reg_r3 );
  assign sha1_ctrl_reg_r = ( sha1_ctrl_reg_x0 & sha1_ctrl_reg_r0 ) | ( sha1_ctrl_reg_x1 & sha1_ctrl_reg_r1 ) | ( sha1_ctrl_reg_x2 & sha1_ctrl_reg_r2 ) | ( sha1_ctrl_reg_x3 & sha1_ctrl_reg_r3 );
  assign _067__r = ( _067__x0 & _067__r0 ) | ( _067__x1 & _067__r1 ) | ( _067__x2 & _067__r2 );
  assign _002__r = ( _002__x0 & _002__r0 );
  assign _114__r = ( _114__x0 & _114__r0 ) | ( _114__x1 & _114__r1 ) | ( _114__x2 & _114__r2 );
  assign _049__r = ( _049__x0 & _049__r0 );
  assign round_ctr_new_r = ( round_ctr_new_x0 & round_ctr_new_r0 );
  assign _098__r = ( _098__x0 & _098__r0 );
  assign _047__r = ( _047__x0 & _047__r0 );
  assign _031__r = ( _031__x0 & _031__r0 );
  assign d_reg_r = ( d_reg_x0 & d_reg_r0 ) | ( d_reg_x1 & d_reg_r1 ) | ( d_reg_x2 & d_reg_r2 ) | ( d_reg_x3 & d_reg_r3 ) | ( d_reg_x4 & d_reg_r4 ) | ( d_reg_x5 & d_reg_r5 ) | ( d_reg_x6 & d_reg_r6 );
  assign _005__r = ( _005__x0 & _005__r0 );
  assign _028__r = ( _028__x0 & _028__r0 );
  assign \w_mem_inst.w_mem[5]_r = ( \w_mem_inst.w_mem[5]_x0 & \w_mem_inst.w_mem[5]_r0 ) | ( \w_mem_inst.w_mem[5]_x1 & \w_mem_inst.w_mem[5]_r1 ) | ( \w_mem_inst.w_mem[5]_x2 & \w_mem_inst.w_mem[5]_r2 );
  assign _026__r = ( _026__x0 & _026__r0 );
  assign H4_new_r = ( H4_new_x0 & H4_new_r0 );
  assign _000__r = ( _000__x0 & _000__r0 );
  assign _012__r = ( _012__x0 & _012__r0 );
  assign _091__r = ( _091__x0 & _091__r0 );
  assign fangyuan0_r = ( fangyuan0_x0 & fangyuan0_r0 );
  assign _007__r = ( _007__x0 & _007__r0 );
  assign H_we_r = ( H_we_x0 & H_we_r0 ) | ( H_we_x1 & H_we_r1 ) | ( H_we_x2 & H_we_r2 ) | ( H_we_x3 & H_we_r3 ) | ( H_we_x4 & H_we_r4 );
  assign _079__r = ( _079__x0 & _079__r0 );
  assign _075__r = ( _075__x0 & _075__r0 );
  assign _001__r = ( _001__x0 & _001__r0 );
  assign _011__r = ( _011__x0 & _011__r0 );
  assign _033__r = ( _033__x0 & _033__r0 ) | ( _033__x1 & _033__r1 ) | ( _033__x2 & _033__r2 ) | ( _033__x3 & _033__r3 );
  assign _069__r = ( _069__x0 & _069__r0 ) | ( _069__x1 & _069__r1 ) | ( _069__x2 & _069__r2 );
  assign fangyuan13_r = ( fangyuan13_x0 & fangyuan13_r0 );
  assign _054__r = ( _054__x0 & _054__r0 ) | ( _054__x1 & _054__r1 );
  assign _051__r = ( _051__x0 & _051__r0 );
  assign H1_reg_r = ( H1_reg_x0 & H1_reg_r0 ) | ( H1_reg_x1 & H1_reg_r1 ) | ( H1_reg_x2 & H1_reg_r2 ) | ( H1_reg_x3 & H1_reg_r3 );
  assign _029__r = ( _029__x0 & _029__r0 ) | ( _029__x1 & _029__r1 );
  assign _009__r = ( _009__x0 & _009__r0 );
  assign _062__r = ( _062__x0 & _062__r0 ) | ( _062__x1 & _062__r1 );
  assign H4_reg_r = ( H4_reg_x0 & H4_reg_r0 ) | ( H4_reg_x1 & H4_reg_r1 ) | ( H4_reg_x2 & H4_reg_r2 ) | ( H4_reg_x3 & H4_reg_r3 );
  assign \w_mem_inst.w_mem[10]_r = ( \w_mem_inst.w_mem[10]_x0 & \w_mem_inst.w_mem[10]_r0 ) | ( \w_mem_inst.w_mem[10]_x1 & \w_mem_inst.w_mem[10]_r1 ) | ( \w_mem_inst.w_mem[10]_x2 & \w_mem_inst.w_mem[10]_r2 );
  assign _015__r = ( _015__x0 & _015__r0 );
  assign _021__r = ( _021__x0 & _021__r0 );
  assign fangyuan2_r = ( fangyuan2_x0 & fangyuan2_r0 );
  assign sha1_ctrl_new_r = ( sha1_ctrl_new_x0 & sha1_ctrl_new_r0 );
  assign a_e_we_r = ( a_e_we_x0 & a_e_we_r0 ) | ( a_e_we_x1 & a_e_we_r1 ) | ( a_e_we_x2 & a_e_we_r2 ) | ( a_e_we_x3 & a_e_we_r3 ) | ( a_e_we_x4 & a_e_we_r4 ) | ( a_e_we_x5 & a_e_we_r5 ) | ( a_e_we_x6 & a_e_we_r6 );
  assign \w_mem_inst.w_mem06_new_r = ( \w_mem_inst.w_mem06_new_x0 & \w_mem_inst.w_mem06_new_r0 );
  assign fangyuan16_r = ( fangyuan16_x0 & fangyuan16_r0 );
  assign H3_new_r = ( H3_new_x0 & H3_new_r0 );
  assign H2_new_r = ( H2_new_x0 & H2_new_r0 );
  assign e_new_r = ( e_new_x0 & e_new_r0 );
  assign c_new_r = ( c_new_x0 & c_new_r0 );
  assign b_new_r = ( b_new_x0 & b_new_r0 );
  assign a_new_r = ( a_new_x0 & a_new_r0 );
  assign \w_mem_inst.w_ctr_reg_r = ( \w_mem_inst.w_ctr_reg_x0 & \w_mem_inst.w_ctr_reg_r0 ) | ( \w_mem_inst.w_ctr_reg_x1 & \w_mem_inst.w_ctr_reg_r1 ) | ( \w_mem_inst.w_ctr_reg_x2 & \w_mem_inst.w_ctr_reg_r2 ) | ( \w_mem_inst.w_ctr_reg_x3 & \w_mem_inst.w_ctr_reg_r3 ) | ( \w_mem_inst.w_ctr_reg_x4 & \w_mem_inst.w_ctr_reg_r4 ) | ( \w_mem_inst.w_ctr_reg_x5 & \w_mem_inst.w_ctr_reg_r5 ) | ( \w_mem_inst.w_ctr_reg_x6 & \w_mem_inst.w_ctr_reg_r6 ) | ( \w_mem_inst.w_ctr_reg_x7 & \w_mem_inst.w_ctr_reg_r7 ) | ( \w_mem_inst.w_ctr_reg_x8 & \w_mem_inst.w_ctr_reg_r8 ) | ( \w_mem_inst.w_ctr_reg_x9 & \w_mem_inst.w_ctr_reg_r9 ) | ( \w_mem_inst.w_ctr_reg_x10 & \w_mem_inst.w_ctr_reg_r10 ) | ( \w_mem_inst.w_ctr_reg_x11 & \w_mem_inst.w_ctr_reg_r11 ) | ( \w_mem_inst.w_ctr_reg_x12 & \w_mem_inst.w_ctr_reg_r12 ) | ( \w_mem_inst.w_ctr_reg_x13 & \w_mem_inst.w_ctr_reg_r13 ) | ( \w_mem_inst.w_ctr_reg_x14 & \w_mem_inst.w_ctr_reg_r14 ) | ( \w_mem_inst.w_ctr_reg_x15 & \w_mem_inst.w_ctr_reg_r15 ) | ( \w_mem_inst.w_ctr_reg_x16 & \w_mem_inst.w_ctr_reg_r16 ) | ( \w_mem_inst.w_ctr_reg_x17 & \w_mem_inst.w_ctr_reg_r17 ) | ( \w_mem_inst.w_ctr_reg_x18 & \w_mem_inst.w_ctr_reg_r18 ) | ( \w_mem_inst.w_ctr_reg_x19 & \w_mem_inst.w_ctr_reg_r19 ) | ( \w_mem_inst.w_ctr_reg_x20 & \w_mem_inst.w_ctr_reg_r20 );
  assign _071__r = ( _071__x0 & _071__r0 );
  assign _070__r = ( _070__x0 & _070__r0 );
  assign _095__r = ( _095__x0 & _095__r0 );
  assign _072__r = ( _072__x0 & _072__r0 );
  assign _080__r = ( _080__x0 & _080__r0 );
  assign _087__r = ( _087__x0 & _087__r0 );
  assign _118__r = ( _118__x0 & _118__r0 );
  assign _081__r = ( _081__x0 & _081__r0 );
  assign _082__r = ( _082__x0 & _082__r0 );
  assign _085__r = ( _085__x0 & _085__r0 );
  assign _086__r = ( _086__x0 & _086__r0 );
  assign _073__r = ( _073__x0 & _073__r0 );
  assign _094__r = ( _094__x0 & _094__r0 );
  assign \w_mem_inst.sha1_w_mem_ctrl_we_r = ( \w_mem_inst.sha1_w_mem_ctrl_we_x0 & \w_mem_inst.sha1_w_mem_ctrl_we_r0 );
  assign _058__r = ( _058__x0 & _058__r0 ) | ( _058__x1 & _058__r1 );
  assign _076__r = ( _076__x0 & _076__r0 );
  assign _078__r = ( _078__x0 & _078__r0 );
  assign _053__r = ( _053__x0 & _053__r0 );
  assign fangyuan3_r = ( fangyuan3_x0 & fangyuan3_r0 );
  assign _111__r = ( _111__x0 & _111__r0 );
  assign digest_valid_we_r = ( digest_valid_we_x0 & digest_valid_we_r0 );
  assign _090__r = ( _090__x0 & _090__r0 ) | ( _090__x1 & _090__r1 );
  assign _056__r = ( _056__x0 & _056__r0 );
  assign b_reg_r = ( b_reg_x0 & b_reg_r0 ) | ( b_reg_x1 & b_reg_r1 ) | ( b_reg_x2 & b_reg_r2 ) | ( b_reg_x3 & b_reg_r3 ) | ( b_reg_x4 & b_reg_r4 ) | ( b_reg_x5 & b_reg_r5 ) | ( b_reg_x6 & b_reg_r6 ) | ( b_reg_x7 & b_reg_r7 ) | ( b_reg_x8 & b_reg_r8 );
  assign fangyuan11_r = ( fangyuan11_x0 & fangyuan11_r0 );
  assign _010__r = ( _010__x0 & _010__r0 );
  assign fangyuan10_r = ( fangyuan10_x0 & fangyuan10_r0 );
  assign _030__r = ( _030__x0 & _030__r0 );
  assign fangyuan14_r = ( fangyuan14_x0 & fangyuan14_r0 );
  assign \w_mem_inst.w_ctr_inc_r = ( \w_mem_inst.w_ctr_inc_x0 & \w_mem_inst.w_ctr_inc_r0 ) | ( \w_mem_inst.w_ctr_inc_x1 & \w_mem_inst.w_ctr_inc_r1 );
  assign \w_mem_inst.w_mem[14]_r = ( \w_mem_inst.w_mem[14]_x0 & \w_mem_inst.w_mem[14]_r0 ) | ( \w_mem_inst.w_mem[14]_x1 & \w_mem_inst.w_mem[14]_r1 ) | ( \w_mem_inst.w_mem[14]_x2 & \w_mem_inst.w_mem[14]_r2 );
  assign \w_mem_inst.sha1_w_mem_ctrl_new_r = ( \w_mem_inst.sha1_w_mem_ctrl_new_x0 & \w_mem_inst.sha1_w_mem_ctrl_new_r0 ) | ( \w_mem_inst.sha1_w_mem_ctrl_new_x1 & \w_mem_inst.sha1_w_mem_ctrl_new_r1 ) | ( \w_mem_inst.sha1_w_mem_ctrl_new_x2 & \w_mem_inst.sha1_w_mem_ctrl_new_r2 );
  assign _108__r = ( _108__x0 & _108__r0 );
  assign _112__r = ( _112__x0 & _112__r0 ) | ( _112__x1 & _112__r1 ) | ( _112__x2 & _112__r2 ) | ( _112__x3 & _112__r3 ) | ( _112__x4 & _112__r4 ) | ( _112__x5 & _112__r5 ) | ( _112__x6 & _112__r6 ) | ( _112__x7 & _112__r7 ) | ( _112__x8 & _112__r8 ) | ( _112__x9 & _112__r9 ) | ( _112__x10 & _112__r10 ) | ( _112__x11 & _112__r11 ) | ( _112__x12 & _112__r12 ) | ( _112__x13 & _112__r13 ) | ( _112__x14 & _112__r14 ) | ( _112__x15 & _112__r15 ) | ( _112__x16 & _112__r16 );
  assign _135__r = ( _135__x0 & _135__r0 ) | ( _135__x1 & _135__r1 );
  assign \w_mem_inst.w_16_r = ( \w_mem_inst.w_16_x0 & \w_mem_inst.w_16_r0 ) | ( \w_mem_inst.w_16_x1 & \w_mem_inst.w_16_r1 ) | ( \w_mem_inst.w_16_x2 & \w_mem_inst.w_16_r2 ) | ( \w_mem_inst.w_16_x3 & \w_mem_inst.w_16_r3 ) | ( \w_mem_inst.w_16_x4 & \w_mem_inst.w_16_r4 ) | ( \w_mem_inst.w_16_x5 & \w_mem_inst.w_16_r5 );
  assign _109__r = ( _109__x0 & _109__r0 );
  assign \w_mem_inst.w_mem[15]_r = ( \w_mem_inst.w_mem[15]_x0 & \w_mem_inst.w_mem[15]_r0 ) | ( \w_mem_inst.w_mem[15]_x1 & \w_mem_inst.w_mem[15]_r1 ) | ( \w_mem_inst.w_mem[15]_x2 & \w_mem_inst.w_mem[15]_r2 );
  assign _061__r = ( _061__x0 & _061__r0 ) | ( _061__x1 & _061__r1 );
  assign \w_mem_inst.w_mem[13]_r = ( \w_mem_inst.w_mem[13]_x0 & \w_mem_inst.w_mem[13]_r0 ) | ( \w_mem_inst.w_mem[13]_x1 & \w_mem_inst.w_mem[13]_r1 ) | ( \w_mem_inst.w_mem[13]_x2 & \w_mem_inst.w_mem[13]_r2 ) | ( \w_mem_inst.w_mem[13]_x3 & \w_mem_inst.w_mem[13]_r3 ) | ( \w_mem_inst.w_mem[13]_x4 & \w_mem_inst.w_mem[13]_r4 );
  assign \w_mem_inst.w_mem[11]_r = ( \w_mem_inst.w_mem[11]_x0 & \w_mem_inst.w_mem[11]_r0 ) | ( \w_mem_inst.w_mem[11]_x1 & \w_mem_inst.w_mem[11]_r1 ) | ( \w_mem_inst.w_mem[11]_x2 & \w_mem_inst.w_mem[11]_r2 );
  assign \w_mem_inst.w_mem[8]_r = ( \w_mem_inst.w_mem[8]_x0 & \w_mem_inst.w_mem[8]_r0 ) | ( \w_mem_inst.w_mem[8]_x1 & \w_mem_inst.w_mem[8]_r1 ) | ( \w_mem_inst.w_mem[8]_x2 & \w_mem_inst.w_mem[8]_r2 ) | ( \w_mem_inst.w_mem[8]_x3 & \w_mem_inst.w_mem[8]_r3 ) | ( \w_mem_inst.w_mem[8]_x4 & \w_mem_inst.w_mem[8]_r4 );
  assign \w_mem_inst.sha1_w_mem_ctrl_reg_r = ( \w_mem_inst.sha1_w_mem_ctrl_reg_x0 & \w_mem_inst.sha1_w_mem_ctrl_reg_r0 ) | ( \w_mem_inst.sha1_w_mem_ctrl_reg_x1 & \w_mem_inst.sha1_w_mem_ctrl_reg_r1 ) | ( \w_mem_inst.sha1_w_mem_ctrl_reg_x2 & \w_mem_inst.sha1_w_mem_ctrl_reg_r2 ) | ( \w_mem_inst.sha1_w_mem_ctrl_reg_x3 & \w_mem_inst.sha1_w_mem_ctrl_reg_r3 ) | ( \w_mem_inst.sha1_w_mem_ctrl_reg_x4 & \w_mem_inst.sha1_w_mem_ctrl_reg_r4 );
  assign \w_mem_inst.w_mem[7]_r = ( \w_mem_inst.w_mem[7]_x0 & \w_mem_inst.w_mem[7]_r0 ) | ( \w_mem_inst.w_mem[7]_x1 & \w_mem_inst.w_mem[7]_r1 ) | ( \w_mem_inst.w_mem[7]_x2 & \w_mem_inst.w_mem[7]_r2 );
  assign \w_mem_inst.w_mem[6]_r = ( \w_mem_inst.w_mem[6]_x0 & \w_mem_inst.w_mem[6]_r0 ) | ( \w_mem_inst.w_mem[6]_x1 & \w_mem_inst.w_mem[6]_r1 ) | ( \w_mem_inst.w_mem[6]_x2 & \w_mem_inst.w_mem[6]_r2 );
  assign \w_mem_inst.w_mem[3]_r = ( \w_mem_inst.w_mem[3]_x0 & \w_mem_inst.w_mem[3]_r0 ) | ( \w_mem_inst.w_mem[3]_x1 & \w_mem_inst.w_mem[3]_r1 ) | ( \w_mem_inst.w_mem[3]_x2 & \w_mem_inst.w_mem[3]_r2 );
  assign H2_reg_r = ( H2_reg_x0 & H2_reg_r0 ) | ( H2_reg_x1 & H2_reg_r1 ) | ( H2_reg_x2 & H2_reg_r2 ) | ( H2_reg_x3 & H2_reg_r3 );
  assign \w_mem_inst.w_mem[2]_r = ( \w_mem_inst.w_mem[2]_x0 & \w_mem_inst.w_mem[2]_r0 ) | ( \w_mem_inst.w_mem[2]_x1 & \w_mem_inst.w_mem[2]_r1 ) | ( \w_mem_inst.w_mem[2]_x2 & \w_mem_inst.w_mem[2]_r2 ) | ( \w_mem_inst.w_mem[2]_x3 & \w_mem_inst.w_mem[2]_r3 ) | ( \w_mem_inst.w_mem[2]_x4 & \w_mem_inst.w_mem[2]_r4 );
  assign \w_mem_inst.w_mem[1]_r = ( \w_mem_inst.w_mem[1]_x0 & \w_mem_inst.w_mem[1]_r0 ) | ( \w_mem_inst.w_mem[1]_x1 & \w_mem_inst.w_mem[1]_r1 ) | ( \w_mem_inst.w_mem[1]_x2 & \w_mem_inst.w_mem[1]_r2 );
  assign \w_mem_inst.w_mem11_new_r = ( \w_mem_inst.w_mem11_new_x0 & \w_mem_inst.w_mem11_new_r0 );
  assign \w_mem_inst.w_mem[0]_r = ( \w_mem_inst.w_mem[0]_x0 & \w_mem_inst.w_mem[0]_r0 ) | ( \w_mem_inst.w_mem[0]_x1 & \w_mem_inst.w_mem[0]_r1 ) | ( \w_mem_inst.w_mem[0]_x2 & \w_mem_inst.w_mem[0]_r2 ) | ( \w_mem_inst.w_mem[0]_x3 & \w_mem_inst.w_mem[0]_r3 );
  assign _038__r = ( _038__x0 & _038__r0 );
  assign _107__r = ( _107__x0 & _107__r0 );
  assign \w_mem_inst.w_mem[9]_r = ( \w_mem_inst.w_mem[9]_x0 & \w_mem_inst.w_mem[9]_r0 ) | ( \w_mem_inst.w_mem[9]_x1 & \w_mem_inst.w_mem[9]_r1 ) | ( \w_mem_inst.w_mem[9]_x2 & \w_mem_inst.w_mem[9]_r2 );
  assign _106__r = ( _106__x0 & _106__r0 );
  assign c_reg_r = ( c_reg_x0 & c_reg_r0 ) | ( c_reg_x1 & c_reg_r1 ) | ( c_reg_x2 & c_reg_r2 ) | ( c_reg_x3 & c_reg_r3 ) | ( c_reg_x4 & c_reg_r4 ) | ( c_reg_x5 & c_reg_r5 ) | ( c_reg_x6 & c_reg_r6 );
  assign _092__r = ( _092__x0 & _092__r0 );
  assign _105__r = ( _105__x0 & _105__r0 );
  assign _122__r = ( _122__x0 & _122__r0 );
  assign _104__r = ( _104__x0 & _104__r0 );
  assign _101__r = ( _101__x0 & _101__r0 );
  assign _100__r = ( _100__x0 & _100__r0 );
  assign _099__r = ( _099__x0 & _099__r0 );
  assign fangyuan1_r = ( fangyuan1_x0 & fangyuan1_r0 );
  assign _008__r = ( _008__x0 & _008__r0 );
  assign _097__r = ( _097__x0 & _097__r0 );
  assign _043__r = ( _043__x0 & _043__r0 );
  assign _093__r = ( _093__x0 & _093__r0 );
  assign _025__r = ( _025__x0 & _025__r0 );
  assign _129__r = ( _129__x0 & _129__r0 );
  assign fangyuan12_r = ( fangyuan12_x0 & fangyuan12_r0 );
  assign _127__r = ( _127__x0 & _127__r0 );
  assign _126__r = ( _126__x0 & _126__r0 );
  assign w_r = ( w_x0 & w_r0 ) | ( w_x1 & w_r1 ) | ( w_x2 & w_r2 );
  assign _125__r = ( _125__x0 & _125__r0 );
  assign _027__r = ( _027__x0 & _027__r0 );
  assign _124__r = ( _124__x0 & _124__r0 );
  assign _120__r = ( _120__x0 & _120__r0 );
  assign \w_mem_inst.block_r = 0;
  assign \w_mem_inst.block_c = 0;
  assign \w_mem_inst.block_x = 0;
  assign \w_mem_inst.clk_r = 0;
  assign \w_mem_inst.clk_c = 0;
  assign \w_mem_inst.clk_x = 0;
  assign \w_mem_inst.init_r = 0;
  assign \w_mem_inst.init_c = 0;
  assign \w_mem_inst.init_x = 0;
  assign \w_mem_inst.next_r = 0;
  assign \w_mem_inst.next_c = 0;
  assign \w_mem_inst.next_x = 0;
  assign \w_mem_inst.reset_n_r = 0;
  assign \w_mem_inst.reset_n_c = 0;
  assign \w_mem_inst.reset_n_x = 0;
  assign \w_mem_inst.w_r = 0;
  assign \w_mem_inst.w_c = 0;
  assign \w_mem_inst.w_x = 0;
  assign \w_mem_inst.w_0_r = 0;
  assign \w_mem_inst.w_0_c = 0;
  assign \w_mem_inst.w_0_x = 0;
  assign \w_mem_inst.w_13_r = 0;
  assign \w_mem_inst.w_13_c = 0;
  assign \w_mem_inst.w_13_x = 0;
  assign \w_mem_inst.w_2_r = 0;
  assign \w_mem_inst.w_2_c = 0;
  assign \w_mem_inst.w_2_x = 0;
  assign \w_mem_inst.w_8_r = 0;
  assign \w_mem_inst.w_8_c = 0;
  assign \w_mem_inst.w_8_x = 0;
  assign \w_mem_inst.w_ctr_rst_r = 0;
  assign \w_mem_inst.w_ctr_rst_c = 0;
  assign \w_mem_inst.w_ctr_rst_x = 0;
  assign \w_mem_inst.w_new_r = 0;
  assign \w_mem_inst.w_new_c = 0;
  assign \w_mem_inst.w_new_x = 0;
  assign \w_mem_inst.w_tmp_r = 0;
  assign \w_mem_inst.w_tmp_c = 0;
  assign \w_mem_inst.w_tmp_x = 0;
  assign digest_valid_new_r = 0;
  assign digest_valid_new_c = 0;
  assign digest_valid_new_x = 0;
  assign first_block_r = 0;
  assign first_block_c = 0;
  assign first_block_x = 0;
  assign ready_flag_r = 0;
  assign ready_flag_c = 0;
  assign ready_flag_x = 0;
  assign round_ctr_we_r = 0;
  assign round_ctr_we_c = 0;
  assign round_ctr_we_x = 0;
  assign state_init_r = 0;
  assign state_init_c = 0;
  assign state_init_x = 0;
  assign state_update_r = 0;
  assign state_update_c = 0;
  assign state_update_x = 0;
  assign w_init_r = 0;
  assign w_init_c = 0;
  assign w_init_x = 0;
  assign w_next_r = 0;
  assign w_next_c = 0;
  assign w_next_x = 0;
endmodule