  logic [15:0] _00_;
  logic [15:0] _00__T ;
  logic _01_;
  logic _01__T ;
  logic _02_;
  logic _02__T ;
  input addr;
  input addr_T ;
  input clk;
  input [7:0] data_in;
  input [7:0] data_in_T ;
  output [7:0] data_out;
  logic [7:0] data_out ;
  output [7:0] data_out_T ;
  logic [7:0] data_out_T ;
  logic [7:0] data_out_mux;
  logic [7:0] data_out_mux_T ;
  input en;
  input en_T ;
  logic [7:0] reg0_next;
  logic [7:0] reg0_next_T ;
  logic [7:0] reg1_next;
  logic [7:0] reg1_next_T ;
  output [15:0] reg_out;
  logic [15:0] reg_out ;
  output [15:0] reg_out_T ;
  logic [15:0] reg_out_T ;
  logic [15:0] reg_out;
  logic [15:0]  reg_out_T ;
  logic [15:0]  reg_out_TZ ;
  logic [15:0]  reg_out_PREV_VAL1 ;
  logic [15:0]  reg_out_PREV_VAL2 ;
  assign reg_out_T = reg_out_TZ | { 16{ YZC[0] && reg_out != 0 }} ;
  input rst;
  input rst_T ;
  input wr;
  input wr_T ;
  logic wr0;
  logic wr0_T ;
  logic wr1;
  logic wr1_T ;
  assign _01_ = ~ addr;
  assign _01__T = addr_T ;
  assign _02_ = en && wr;
  assign _02__T = ( en_T && wr ) | ( wr_T && en ) ;
  assign wr0 = _02_ && _01_;
  assign wr0_T = ( _02__T && _01_ ) | ( _01__T && _02_ ) ;
  assign wr1 = _02_ && addr;
  assign wr1_T = ( _02__T && addr ) | ( addr_T && _02_ ) ;
  always @(posedge clk)
      reg_out <= _00_;
  always @( posedge clk )
      reg_out_TZ 		<= rst ? 0 : ( _00__T );
  assign _00_[15:8] = rst ? 8'b00000000 : reg1_next;
  assign _00__T [15:8] = rst ? { 8{ | rst_T  }} : ( { 8{ | rst_T  }} | reg1_next_T );
  assign _00_[7:0] = rst ? 8'b00000000 : reg0_next;
  assign _00__T [7:0] = rst ? { 8{ | rst_T  }} : ( { 8{ | rst_T  }} | reg0_next_T );
  assign reg0_next = wr0 ? data_in : reg_out[7:0];
  assign reg0_next_T = wr0 ? ( { 8{ wr0_T  }} | data_in_T ) : ( { 8{ wr0_T  }} | reg_out_T [7:0] );
  assign reg1_next = wr1 ? data_in : reg_out[15:8];
  assign reg1_next_T = wr1 ? ( { 8{ wr1_T  }} | data_in_T ) : ( { 8{ wr1_T  }} | reg_out_T [15:8] );
  assign data_out = addr ? reg_out[15:8] : reg_out[7:0];
  assign data_out_T = addr ? ( { 8{ addr_T  }} | reg_out_T [15:8] ) : ( { 8{ addr_T  }} | reg_out_T [7:0] );
  assign data_out_mux = data_out;
  assign data_out_mux_T = data_out_T ;
  assign rst_zy = rst ;
endmodule
