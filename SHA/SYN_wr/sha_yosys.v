/* Generated by Yosys 0.8 (git sha1 UNKNOWN, clang 9.0.0 -fPIC -Os) */

module XRAM(clk, rst, addr_in, data_in, stb, wr, data_out, ack);
  wire [7:0] _000_;
  wire [7:0] _001_;
  wire [7:0] _002_;
  wire [7:0] _003_;
  wire [7:0] _004_;
  wire [7:0] _005_;
  wire [7:0] _006_;
  wire [7:0] _007_;
  wire [7:0] _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire _199_;
  wire _200_;
  wire _201_;
  wire _202_;
  wire _203_;
  wire _204_;
  wire _205_;
  wire _206_;
  wire _207_;
  wire _208_;
  wire _209_;
  wire _210_;
  wire _211_;
  wire _212_;
  wire _213_;
  wire _214_;
  wire _215_;
  wire _216_;
  wire _217_;
  wire _218_;
  wire _219_;
  wire _220_;
  wire _221_;
  wire _222_;
  wire _223_;
  wire _224_;
  wire _225_;
  wire _226_;
  wire _227_;
  wire _228_;
  wire _229_;
  wire _230_;
  wire _231_;
  wire _232_;
  output ack;
  input [15:0] addr_in;
  input clk;
  input [7:0] data_in;
  output [7:0] data_out;
  reg [7:0] data_out;
  reg [7:0] mem0;
  reg [7:0] mem1;
  reg [7:0] mem2;
  reg [7:0] mem3;
  reg [7:0] mem4;
  reg [7:0] mem5;
  reg [7:0] mem6;
  reg [7:0] mem7;
  input rst;
  input stb;
  input wr;
  always @(posedge clk)
      data_out <= _000_;
  always @(posedge clk)
      mem0 <= _001_;
  always @(posedge clk)
      mem1 <= _002_;
  always @(posedge clk)
      mem2 <= _003_;
  always @(posedge clk)
      mem3 <= _004_;
  always @(posedge clk)
      mem4 <= _005_;
  always @(posedge clk)
      mem5 <= _006_;
  always @(posedge clk)
      mem6 <= _007_;
  always @(posedge clk)
      mem7 <= _008_;
  assign _009_ = wr ? data_out[7] : _232_;
  assign _010_ = stb ? _009_ : data_out[7];
  assign _000_[7] = rst ? data_out[7] : _010_;
  assign _011_ = wr ? data_out[6] : _231_;
  assign _012_ = stb ? _011_ : data_out[6];
  assign _000_[6] = rst ? data_out[6] : _012_;
  assign _013_ = wr ? data_out[5] : _230_;
  assign _014_ = stb ? _013_ : data_out[5];
  assign _000_[5] = rst ? data_out[5] : _014_;
  assign _015_ = wr ? data_out[4] : _229_;
  assign _016_ = stb ? _015_ : data_out[4];
  assign _000_[4] = rst ? data_out[4] : _016_;
  assign _017_ = wr ? data_out[3] : _228_;
  assign _018_ = stb ? _017_ : data_out[3];
  assign _000_[3] = rst ? data_out[3] : _018_;
  assign _019_ = wr ? data_out[2] : _227_;
  assign _020_ = stb ? _019_ : data_out[2];
  assign _000_[2] = rst ? data_out[2] : _020_;
  assign _021_ = wr ? data_out[1] : _226_;
  assign _022_ = stb ? _021_ : data_out[1];
  assign _000_[1] = rst ? data_out[1] : _022_;
  assign _023_ = wr ? data_out[0] : _225_;
  assign _024_ = stb ? _023_ : data_out[0];
  assign _000_[0] = rst ? data_out[0] : _024_;
  assign _025_ = _026_ ? data_in[7] : mem7[6];
  assign _026_ = addr_in == 3'b110;
  assign _027_ = wr ? _025_ : mem7[6];
  assign _028_ = stb ? _027_ : mem7[6];
  assign _008_[6] = rst ? 1'b0 : _028_;
  assign _029_ = _030_ ? data_in[7] : mem7[5];
  assign _030_ = addr_in == 3'b101;
  assign _031_ = wr ? _029_ : mem7[5];
  assign _032_ = stb ? _031_ : mem7[5];
  assign _008_[5] = rst ? 1'b0 : _032_;
  assign _033_ = _034_ ? data_in[7] : mem7[4];
  assign _034_ = addr_in == 3'b100;
  assign _035_ = wr ? _033_ : mem7[4];
  assign _036_ = stb ? _035_ : mem7[4];
  assign _008_[4] = rst ? 1'b0 : _036_;
  assign _037_ = _038_ ? data_in[7] : mem7[3];
  assign _038_ = addr_in == 2'b11;
  assign _039_ = wr ? _037_ : mem7[3];
  assign _040_ = stb ? _039_ : mem7[3];
  assign _008_[3] = rst ? 1'b0 : _040_;
  assign _041_ = _042_ ? data_in[7] : mem7[2];
  assign _042_ = addr_in == 2'b10;
  assign _043_ = wr ? _041_ : mem7[2];
  assign _044_ = stb ? _043_ : mem7[2];
  assign _008_[2] = rst ? 1'b0 : _044_;
  assign _045_ = _046_ ? data_in[7] : mem7[1];
  assign _046_ = addr_in == 1'b1;
  assign _047_ = wr ? _045_ : mem7[1];
  assign _048_ = stb ? _047_ : mem7[1];
  assign _008_[1] = rst ? 1'b0 : _048_;
  assign _049_ = _050_ ? data_in[7] : mem7[0];
  assign _050_ = ! addr_in;
  assign _051_ = wr ? _049_ : mem7[0];
  assign _052_ = stb ? _051_ : mem7[0];
  assign _008_[0] = rst ? 1'b0 : _052_;
  assign _053_ = _026_ ? data_in[6] : mem6[6];
  assign _054_ = wr ? _053_ : mem6[6];
  assign _055_ = stb ? _054_ : mem6[6];
  assign _007_[6] = rst ? 1'b0 : _055_;
  assign _056_ = _030_ ? data_in[6] : mem6[5];
  assign _057_ = wr ? _056_ : mem6[5];
  assign _058_ = stb ? _057_ : mem6[5];
  assign _007_[5] = rst ? 1'b0 : _058_;
  assign _059_ = _034_ ? data_in[6] : mem6[4];
  assign _060_ = wr ? _059_ : mem6[4];
  assign _061_ = stb ? _060_ : mem6[4];
  assign _007_[4] = rst ? 1'b0 : _061_;
  assign _062_ = _038_ ? data_in[6] : mem6[3];
  assign _063_ = wr ? _062_ : mem6[3];
  assign _064_ = stb ? _063_ : mem6[3];
  assign _007_[3] = rst ? 1'b0 : _064_;
  assign _065_ = _042_ ? data_in[6] : mem6[2];
  assign _066_ = wr ? _065_ : mem6[2];
  assign _067_ = stb ? _066_ : mem6[2];
  assign _007_[2] = rst ? 1'b0 : _067_;
  assign _068_ = _046_ ? data_in[6] : mem6[1];
  assign _069_ = wr ? _068_ : mem6[1];
  assign _070_ = stb ? _069_ : mem6[1];
  assign _007_[1] = rst ? 1'b0 : _070_;
  assign _071_ = _050_ ? data_in[6] : mem6[0];
  assign _072_ = wr ? _071_ : mem6[0];
  assign _073_ = stb ? _072_ : mem6[0];
  assign _007_[0] = rst ? 1'b0 : _073_;
  assign _074_ = _026_ ? data_in[5] : mem5[6];
  assign _075_ = wr ? _074_ : mem5[6];
  assign _076_ = stb ? _075_ : mem5[6];
  assign _006_[6] = rst ? 1'b0 : _076_;
  assign _077_ = _030_ ? data_in[5] : mem5[5];
  assign _078_ = wr ? _077_ : mem5[5];
  assign _079_ = stb ? _078_ : mem5[5];
  assign _006_[5] = rst ? 1'b0 : _079_;
  assign _080_ = _034_ ? data_in[5] : mem5[4];
  assign _081_ = wr ? _080_ : mem5[4];
  assign _082_ = stb ? _081_ : mem5[4];
  assign _006_[4] = rst ? 1'b0 : _082_;
  assign _083_ = _038_ ? data_in[5] : mem5[3];
  assign _084_ = wr ? _083_ : mem5[3];
  assign _085_ = stb ? _084_ : mem5[3];
  assign _006_[3] = rst ? 1'b0 : _085_;
  assign _086_ = _042_ ? data_in[5] : mem5[2];
  assign _087_ = wr ? _086_ : mem5[2];
  assign _088_ = stb ? _087_ : mem5[2];
  assign _006_[2] = rst ? 1'b0 : _088_;
  assign _089_ = _046_ ? data_in[5] : mem5[1];
  assign _090_ = wr ? _089_ : mem5[1];
  assign _091_ = stb ? _090_ : mem5[1];
  assign _006_[1] = rst ? 1'b0 : _091_;
  assign _092_ = _050_ ? data_in[5] : mem5[0];
  assign _093_ = wr ? _092_ : mem5[0];
  assign _094_ = stb ? _093_ : mem5[0];
  assign _006_[0] = rst ? 1'b0 : _094_;
  assign _095_ = _026_ ? data_in[4] : mem4[6];
  assign _096_ = wr ? _095_ : mem4[6];
  assign _097_ = stb ? _096_ : mem4[6];
  assign _005_[6] = rst ? 1'b0 : _097_;
  assign _098_ = _030_ ? data_in[4] : mem4[5];
  assign _099_ = wr ? _098_ : mem4[5];
  assign _100_ = stb ? _099_ : mem4[5];
  assign _005_[5] = rst ? 1'b0 : _100_;
  assign _101_ = _034_ ? data_in[4] : mem4[4];
  assign _102_ = wr ? _101_ : mem4[4];
  assign _103_ = stb ? _102_ : mem4[4];
  assign _005_[4] = rst ? 1'b0 : _103_;
  assign _104_ = _038_ ? data_in[4] : mem4[3];
  assign _105_ = wr ? _104_ : mem4[3];
  assign _106_ = stb ? _105_ : mem4[3];
  assign _005_[3] = rst ? 1'b0 : _106_;
  assign _107_ = _042_ ? data_in[4] : mem4[2];
  assign _108_ = wr ? _107_ : mem4[2];
  assign _109_ = stb ? _108_ : mem4[2];
  assign _005_[2] = rst ? 1'b0 : _109_;
  assign _110_ = _046_ ? data_in[4] : mem4[1];
  assign _111_ = wr ? _110_ : mem4[1];
  assign _112_ = stb ? _111_ : mem4[1];
  assign _005_[1] = rst ? 1'b0 : _112_;
  assign _113_ = _050_ ? data_in[4] : mem4[0];
  assign _114_ = wr ? _113_ : mem4[0];
  assign _115_ = stb ? _114_ : mem4[0];
  assign _005_[0] = rst ? 1'b0 : _115_;
  assign _116_ = _026_ ? data_in[3] : mem3[6];
  assign _117_ = wr ? _116_ : mem3[6];
  assign _118_ = stb ? _117_ : mem3[6];
  assign _004_[6] = rst ? 1'b0 : _118_;
  assign _119_ = _030_ ? data_in[3] : mem3[5];
  assign _120_ = wr ? _119_ : mem3[5];
  assign _121_ = stb ? _120_ : mem3[5];
  assign _004_[5] = rst ? 1'b0 : _121_;
  assign _122_ = _034_ ? data_in[3] : mem3[4];
  assign _123_ = wr ? _122_ : mem3[4];
  assign _124_ = stb ? _123_ : mem3[4];
  assign _004_[4] = rst ? 1'b0 : _124_;
  assign _125_ = _038_ ? data_in[3] : mem3[3];
  assign _126_ = wr ? _125_ : mem3[3];
  assign _127_ = stb ? _126_ : mem3[3];
  assign _004_[3] = rst ? 1'b0 : _127_;
  assign _128_ = _042_ ? data_in[3] : mem3[2];
  assign _129_ = wr ? _128_ : mem3[2];
  assign _130_ = stb ? _129_ : mem3[2];
  assign _004_[2] = rst ? 1'b0 : _130_;
  assign _131_ = _046_ ? data_in[3] : mem3[1];
  assign _132_ = wr ? _131_ : mem3[1];
  assign _133_ = stb ? _132_ : mem3[1];
  assign _004_[1] = rst ? 1'b0 : _133_;
  assign _134_ = _050_ ? data_in[3] : mem3[0];
  assign _135_ = wr ? _134_ : mem3[0];
  assign _136_ = stb ? _135_ : mem3[0];
  assign _004_[0] = rst ? 1'b0 : _136_;
  assign _137_ = _026_ ? data_in[2] : mem2[6];
  assign _138_ = wr ? _137_ : mem2[6];
  assign _139_ = stb ? _138_ : mem2[6];
  assign _003_[6] = rst ? 1'b0 : _139_;
  assign _140_ = _030_ ? data_in[2] : mem2[5];
  assign _141_ = wr ? _140_ : mem2[5];
  assign _142_ = stb ? _141_ : mem2[5];
  assign _003_[5] = rst ? 1'b0 : _142_;
  assign _143_ = _034_ ? data_in[2] : mem2[4];
  assign _144_ = wr ? _143_ : mem2[4];
  assign _145_ = stb ? _144_ : mem2[4];
  assign _003_[4] = rst ? 1'b0 : _145_;
  assign _146_ = _038_ ? data_in[2] : mem2[3];
  assign _147_ = wr ? _146_ : mem2[3];
  assign _148_ = stb ? _147_ : mem2[3];
  assign _003_[3] = rst ? 1'b0 : _148_;
  assign _149_ = _042_ ? data_in[2] : mem2[2];
  assign _150_ = wr ? _149_ : mem2[2];
  assign _151_ = stb ? _150_ : mem2[2];
  assign _003_[2] = rst ? 1'b0 : _151_;
  assign _152_ = _046_ ? data_in[2] : mem2[1];
  assign _153_ = wr ? _152_ : mem2[1];
  assign _154_ = stb ? _153_ : mem2[1];
  assign _003_[1] = rst ? 1'b0 : _154_;
  assign _155_ = _050_ ? data_in[2] : mem2[0];
  assign _156_ = wr ? _155_ : mem2[0];
  assign _157_ = stb ? _156_ : mem2[0];
  assign _003_[0] = rst ? 1'b0 : _157_;
  assign _158_ = _026_ ? data_in[1] : mem1[6];
  assign _159_ = wr ? _158_ : mem1[6];
  assign _160_ = stb ? _159_ : mem1[6];
  assign _002_[6] = rst ? 1'b0 : _160_;
  assign _161_ = _030_ ? data_in[1] : mem1[5];
  assign _162_ = wr ? _161_ : mem1[5];
  assign _163_ = stb ? _162_ : mem1[5];
  assign _002_[5] = rst ? 1'b0 : _163_;
  assign _164_ = _034_ ? data_in[1] : mem1[4];
  assign _165_ = wr ? _164_ : mem1[4];
  assign _166_ = stb ? _165_ : mem1[4];
  assign _002_[4] = rst ? 1'b0 : _166_;
  assign _167_ = _038_ ? data_in[1] : mem1[3];
  assign _168_ = wr ? _167_ : mem1[3];
  assign _169_ = stb ? _168_ : mem1[3];
  assign _002_[3] = rst ? 1'b0 : _169_;
  assign _170_ = _042_ ? data_in[1] : mem1[2];
  assign _171_ = wr ? _170_ : mem1[2];
  assign _172_ = stb ? _171_ : mem1[2];
  assign _002_[2] = rst ? 1'b0 : _172_;
  assign _173_ = _046_ ? data_in[1] : mem1[1];
  assign _174_ = wr ? _173_ : mem1[1];
  assign _175_ = stb ? _174_ : mem1[1];
  assign _002_[1] = rst ? 1'b0 : _175_;
  assign _176_ = _050_ ? data_in[1] : mem1[0];
  assign _177_ = wr ? _176_ : mem1[0];
  assign _178_ = stb ? _177_ : mem1[0];
  assign _002_[0] = rst ? 1'b0 : _178_;
  assign _179_ = _026_ ? data_in[0] : mem0[6];
  assign _180_ = wr ? _179_ : mem0[6];
  assign _181_ = stb ? _180_ : mem0[6];
  assign _001_[6] = rst ? 1'b0 : _181_;
  assign _182_ = _030_ ? data_in[0] : mem0[5];
  assign _183_ = wr ? _182_ : mem0[5];
  assign _184_ = stb ? _183_ : mem0[5];
  assign _001_[5] = rst ? 1'b0 : _184_;
  assign _185_ = _034_ ? data_in[0] : mem0[4];
  assign _186_ = wr ? _185_ : mem0[4];
  assign _187_ = stb ? _186_ : mem0[4];
  assign _001_[4] = rst ? 1'b0 : _187_;
  assign _188_ = _038_ ? data_in[0] : mem0[3];
  assign _189_ = wr ? _188_ : mem0[3];
  assign _190_ = stb ? _189_ : mem0[3];
  assign _001_[3] = rst ? 1'b0 : _190_;
  assign _191_ = _042_ ? data_in[0] : mem0[2];
  assign _192_ = wr ? _191_ : mem0[2];
  assign _193_ = stb ? _192_ : mem0[2];
  assign _001_[2] = rst ? 1'b0 : _193_;
  assign _194_ = _046_ ? data_in[0] : mem0[1];
  assign _195_ = wr ? _194_ : mem0[1];
  assign _196_ = stb ? _195_ : mem0[1];
  assign _001_[1] = rst ? 1'b0 : _196_;
  assign _197_ = _050_ ? data_in[0] : mem0[0];
  assign _198_ = wr ? _197_ : mem0[0];
  assign _199_ = stb ? _198_ : mem0[0];
  assign _001_[0] = rst ? 1'b0 : _199_;
  assign _200_ = _201_ ? data_in[5] : mem5[7];
  assign _201_ = addr_in == 3'b111;
  assign _202_ = wr ? _200_ : mem5[7];
  assign _203_ = stb ? _202_ : mem5[7];
  assign _006_[7] = rst ? 1'b0 : _203_;
  assign _204_ = _201_ ? data_in[4] : mem4[7];
  assign _205_ = wr ? _204_ : mem4[7];
  assign _206_ = stb ? _205_ : mem4[7];
  assign _005_[7] = rst ? 1'b0 : _206_;
  assign _207_ = _201_ ? data_in[3] : mem3[7];
  assign _208_ = wr ? _207_ : mem3[7];
  assign _209_ = stb ? _208_ : mem3[7];
  assign _004_[7] = rst ? 1'b0 : _209_;
  assign _210_ = _201_ ? data_in[2] : mem2[7];
  assign _211_ = wr ? _210_ : mem2[7];
  assign _212_ = stb ? _211_ : mem2[7];
  assign _003_[7] = rst ? 1'b0 : _212_;
  assign _213_ = _201_ ? data_in[1] : mem1[7];
  assign _214_ = wr ? _213_ : mem1[7];
  assign _215_ = stb ? _214_ : mem1[7];
  assign _002_[7] = rst ? 1'b0 : _215_;
  assign _216_ = _201_ ? data_in[0] : mem0[7];
  assign _217_ = wr ? _216_ : mem0[7];
  assign _218_ = stb ? _217_ : mem0[7];
  assign _001_[7] = rst ? 1'b0 : _218_;
  assign _219_ = _201_ ? data_in[6] : mem6[7];
  assign _220_ = wr ? _219_ : mem6[7];
  assign _221_ = stb ? _220_ : mem6[7];
  assign _007_[7] = rst ? 1'b0 : _221_;
  assign _222_ = _201_ ? data_in[7] : mem7[7];
  assign _223_ = wr ? _222_ : mem7[7];
  assign _224_ = stb ? _223_ : mem7[7];
  assign _008_[7] = rst ? 1'b0 : _224_;
  assign _225_ = mem0[addr_in[2:0] +: 1];
  assign _226_ = mem1[addr_in[2:0] +: 1];
  assign _227_ = mem2[addr_in[2:0] +: 1];
  assign _228_ = mem3[addr_in[2:0] +: 1];
  assign _229_ = mem4[addr_in[2:0] +: 1];
  assign _230_ = mem5[addr_in[2:0] +: 1];
  assign _231_ = mem6[addr_in[2:0] +: 1];
  assign _232_ = mem7[addr_in[2:0] +: 1];
  assign ack = stb;
endmodule

module reg2byte(clk, rst, en, wr, addr, data_in, data_out, reg_out);
  wire [15:0] _00_;
  wire _01_;
  wire _02_;
  input addr;
  input clk;
  input [7:0] data_in;
  output [7:0] data_out;
  wire [7:0] data_out_mux;
  input en;
  wire [7:0] reg0_next;
  wire [7:0] reg1_next;
  output [15:0] reg_out;
  reg [15:0] reg_out;
  input rst;
  input wr;
  wire wr0;
  wire wr1;
  assign _01_ = ~ addr;
  assign _02_ = en && wr;
  assign wr0 = _02_ && _01_;
  assign wr1 = _02_ && addr;
  always @(posedge clk)
      reg_out <= _00_;
  assign _00_[15:8] = rst ? 8'b00000000 : reg1_next;
  assign _00_[7:0] = rst ? 8'b00000000 : reg0_next;
  assign reg0_next = wr0 ? data_in : reg_out[7:0];
  assign reg1_next = wr1 ? data_in : reg_out[15:8];
  assign data_out = addr ? reg_out[15:8] : reg_out[7:0];
  assign data_out_mux = data_out;
endmodule

module sha1_core(clk, reset_n, init, next, block, ready, digest, digest_valid);
  wire [31:0] _000_;
  wire [31:0] _001_;
  wire [31:0] _002_;
  wire [31:0] _003_;
  wire [31:0] _004_;
  wire [31:0] _005_;
  wire [31:0] _006_;
  wire [31:0] _007_;
  wire [31:0] _008_;
  wire _009_;
  wire [31:0] _010_;
  wire [6:0] _011_;
  wire [1:0] _012_;
  wire [30:0] _013_;
  wire [31:0] _014_;
  wire [31:0] _015_;
  wire [28:0] _016_;
  wire [31:0] _017_;
  wire [31:0] _018_;
  wire [31:0] _019_;
  wire [31:0] _020_;
  wire [31:0] _021_;
  wire [31:0] _022_;
  wire [31:0] _023_;
  wire [31:0] _024_;
  wire [31:0] _025_;
  wire [31:0] _026_;
  wire [31:0] _027_;
  wire [31:0] _028_;
  wire [31:0] _029_;
  wire _030_;
  wire [31:0] _031_;
  wire [31:0] _032_;
  wire [31:0] _033_;
  wire [31:0] _034_;
  wire [1:0] _035_;
  wire _036_;
  wire [31:0] _037_;
  wire [31:0] _038_;
  wire [31:0] _039_;
  wire [31:0] _040_;
  wire [31:0] _041_;
  wire [31:0] _042_;
  wire [31:0] _043_;
  wire [31:0] _044_;
  wire [31:0] _045_;
  wire [31:0] _046_;
  wire [31:0] _047_;
  wire [6:0] _048_;
  wire [31:0] _049_;
  wire [31:0] _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire [31:0] _059_;
  wire [31:0] _060_;
  wire [31:0] _061_;
  wire [31:0] _062_;
  wire [1:0] _063_;
  wire _064_;
  wire [6:0] _065_;
  wire [31:0] _066_;
  wire [31:0] _067_;
  wire [31:0] _068_;
  wire [31:0] _069_;
  wire [31:0] _070_;
  wire [31:0] _071_;
  wire [31:0] _072_;
  wire [31:0] _073_;
  wire [31:0] _074_;
  wire [31:0] _075_;
  wire [31:0] _076_;
  wire [31:0] _077_;
  wire [31:0] _078_;
  wire [31:0] _079_;
  wire [31:0] _080_;
  wire [31:0] H0_new;
  reg [31:0] H0_reg;
  wire [31:0] H1_new;
  reg [31:0] H1_reg;
  wire [31:0] H2_new;
  reg [31:0] H2_reg;
  wire [31:0] H3_new;
  reg [31:0] H3_reg;
  wire [31:0] H4_new;
  reg [31:0] H4_reg;
  wire H_we;
  wire a_e_we;
  wire [31:0] a_new;
  reg [31:0] a_reg;
  wire [31:0] b_new;
  reg [31:0] b_reg;
  input [511:0] block;
  wire [31:0] c_new;
  reg [31:0] c_reg;
  input clk;
  wire [31:0] d_new;
  reg [31:0] d_reg;
  output [159:0] digest;
  wire digest_init;
  wire digest_update;
  output digest_valid;
  wire digest_valid_new;
  reg digest_valid_reg;
  wire digest_valid_we;
  wire [31:0] e_new;
  reg [31:0] e_reg;
  wire first_block;
  input init;
  input next;
  output ready;
  wire ready_flag;
  input reset_n;
  wire round_ctr_inc;
  wire [6:0] round_ctr_new;
  reg [6:0] round_ctr_reg;
  wire round_ctr_rst;
  wire round_ctr_we;
  wire [1:0] sha1_ctrl_new;
  reg [1:0] sha1_ctrl_reg;
  wire sha1_ctrl_we;
  wire state_init;
  wire state_update;
  wire [31:0] w;
  wire w_init;
  wire w_next;
  assign _039_ = H0_reg + a_reg;
  assign _040_ = H1_reg + b_reg;
  assign _041_ = H2_reg + c_reg;
  assign _042_ = H3_reg + d_reg;
  assign _043_ = H4_reg + e_reg;
  assign _044_ = { a_reg[26:0], a_reg[31:27] } + e_reg;
  assign _045_ = _044_ + _028_;
  assign _046_ = _045_ + _029_;
  assign _047_ = _046_ + w;
  assign _048_ = round_ctr_reg + 1'b1;
  assign _049_ = b_reg & c_reg;
  assign _050_ = _059_ & d_reg;
  assign _036_ = round_ctr_reg == 7'b1001111;
  assign _051_ = round_ctr_reg >= 5'b10100;
  assign _052_ = round_ctr_reg >= 6'b101000;
  assign _053_ = round_ctr_reg >= 6'b111100;
  assign _054_ = round_ctr_reg <= 5'b10011;
  assign _055_ = round_ctr_reg <= 6'b100111;
  assign _056_ = round_ctr_reg <= 6'b111011;
  assign _057_ = _051_ && _055_;
  assign _058_ = _052_ && _056_;
  assign _059_ = ~ b_reg;
  assign _060_ = b_reg | c_reg;
  assign _061_ = b_reg | d_reg;
  assign _062_ = c_reg | d_reg;
  always @(posedge clk)
      a_reg <= _005_;
  always @(posedge clk)
      b_reg <= _006_;
  always @(posedge clk)
      c_reg <= _007_;
  always @(posedge clk)
      d_reg <= _008_;
  always @(posedge clk)
      e_reg <= _010_;
  always @(posedge clk)
      H0_reg <= _000_;
  always @(posedge clk)
      H1_reg <= _001_;
  always @(posedge clk)
      H2_reg <= _002_;
  always @(posedge clk)
      H3_reg <= _003_;
  always @(posedge clk)
      H4_reg <= _004_;
  always @(posedge clk)
      round_ctr_reg <= _011_;
  always @(posedge clk)
      digest_valid_reg <= _009_;
  always @(posedge clk)
      sha1_ctrl_reg <= _012_;
  assign round_ctr_inc = sha1_ctrl_reg == 1'b1;
  assign _035_ = _036_ ? 2'b10 : 2'b00;
  assign ready = ! sha1_ctrl_reg;
  assign _030_ = next ? 1'b1 : init;
  function [0:0] _123_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _123_ = b[0:0];
      3'b?1?:
        _123_ = b[1:1];
      3'b1??:
        _123_ = b[2:2];
      default:
        _123_ = a;
    endcase
  endfunction
  assign sha1_ctrl_we = _123_(1'b0, { _030_, _036_, 1'b1 }, { ready, round_ctr_inc, digest_update });
  assign digest_update = sha1_ctrl_reg == 2'b10;
  function [1:0] _125_;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _125_ = b[1:0];
      2'b1?:
        _125_ = b[3:2];
      default:
        _125_ = a;
    endcase
  endfunction
  assign sha1_ctrl_new = _125_(2'b00, { 1'b0, _030_, _035_ }, { ready, round_ctr_inc });
  function [0:0] _126_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _126_ = b[0:0];
      2'b1?:
        _126_ = b[1:1];
      default:
        _126_ = a;
    endcase
  endfunction
  assign digest_valid_we = _126_(1'b0, { _030_, 1'b1 }, { ready, digest_update });
  assign round_ctr_rst = ready ? _030_ : 1'b0;
  assign digest_init = ready ? init : 1'b0;
  assign a_e_we = round_ctr_inc ? 1'b1 : round_ctr_rst;
  assign round_ctr_new = round_ctr_inc ? _048_ : 7'b0000000;
  assign _037_ = _053_ ? _078_ : 32'd0;
  assign _038_ = _053_ ? 32'd3395469782 : 32'd0;
  assign _033_ = _058_ ? _080_ : _037_;
  assign _034_ = _058_ ? 32'd2400959708 : _038_;
  assign _031_ = _057_ ? _078_ : _033_;
  assign _032_ = _057_ ? 32'd1859775393 : _034_;
  assign _028_ = _054_ ? _076_ : _031_;
  assign _029_ = _054_ ? 32'd1518500249 : _032_;
  assign e_new = round_ctr_inc ? d_reg : _022_;
  assign d_new = round_ctr_inc ? c_reg : _021_;
  assign c_new = round_ctr_inc ? { b_reg[1:0], b_reg[31:2] } : _020_;
  assign b_new = round_ctr_inc ? a_reg : _019_;
  assign a_new = round_ctr_inc ? _047_ : _018_;
  assign _027_ = digest_init ? 32'd3285377520 : H4_reg;
  assign _026_ = digest_init ? 32'd271733878 : H3_reg;
  assign _025_ = digest_init ? 32'd2562383102 : H2_reg;
  assign _024_ = digest_init ? 32'd4023233417 : H1_reg;
  assign _023_ = digest_init ? 32'd1732584193 : H0_reg;
  assign _022_ = round_ctr_rst ? _027_ : 32'd0;
  assign _021_ = round_ctr_rst ? _026_ : 32'd0;
  assign _020_ = round_ctr_rst ? _025_ : 32'd0;
  assign _019_ = round_ctr_rst ? _024_ : 32'd0;
  assign _018_ = round_ctr_rst ? _023_ : 32'd0;
  assign H_we = digest_update ? 1'b1 : digest_init;
  assign H4_new = digest_update ? _043_ : _017_;
  assign H3_new = digest_update ? _042_ : { 3'b000, _016_ };
  assign H2_new = digest_update ? _041_ : _015_;
  assign H1_new = digest_update ? _040_ : _014_;
  assign H0_new = digest_update ? _039_ : { 1'b0, _013_ };
  assign _017_ = digest_init ? 32'd3285377520 : 32'd0;
  assign _016_ = digest_init ? 29'b10000001100100101010001110110 : 29'b00000000000000000000000000000;
  assign _015_ = digest_init ? 32'd2562383102 : 32'd0;
  assign _014_ = digest_init ? 32'd4023233417 : 32'd0;
  assign _013_ = digest_init ? 31'b1100111010001010010001100000001 : 31'b0000000000000000000000000000000;
  assign _063_ = sha1_ctrl_we ? sha1_ctrl_new : sha1_ctrl_reg;
  assign _012_ = reset_n ? _063_ : 2'b00;
  assign _064_ = digest_valid_we ? digest_update : digest_valid_reg;
  assign _009_ = reset_n ? _064_ : 1'b0;
  assign _065_ = a_e_we ? round_ctr_new : round_ctr_reg;
  assign _011_ = reset_n ? _065_ : 7'b0000000;
  assign _066_ = H_we ? H4_new : H4_reg;
  assign _004_ = reset_n ? _066_ : 32'd0;
  assign _067_ = H_we ? H3_new : H3_reg;
  assign _003_ = reset_n ? _067_ : 32'd0;
  assign _068_ = H_we ? H2_new : H2_reg;
  assign _002_ = reset_n ? _068_ : 32'd0;
  assign _069_ = H_we ? H1_new : H1_reg;
  assign _001_ = reset_n ? _069_ : 32'd0;
  assign _070_ = H_we ? H0_new : H0_reg;
  assign _000_ = reset_n ? _070_ : 32'd0;
  assign _071_ = a_e_we ? e_new : e_reg;
  assign _010_ = reset_n ? _071_ : 32'd0;
  assign _072_ = a_e_we ? d_new : d_reg;
  assign _008_ = reset_n ? _072_ : 32'd0;
  assign _073_ = a_e_we ? c_new : c_reg;
  assign _007_ = reset_n ? _073_ : 32'd0;
  assign _074_ = a_e_we ? b_new : b_reg;
  assign _006_ = reset_n ? _074_ : 32'd0;
  assign _075_ = a_e_we ? a_new : a_reg;
  assign _005_ = reset_n ? _075_ : 32'd0;
  assign _076_ = _049_ ^ _050_;
  assign _077_ = b_reg ^ c_reg;
  assign _078_ = _077_ ^ d_reg;
  assign _079_ = _060_ ^ _061_;
  assign _080_ = _079_ ^ _062_;
  sha1_w_mem w_mem_inst (
    .block(block),
    .clk(clk),
    .init(round_ctr_rst),
    .next(round_ctr_inc),
    .reset_n(reset_n),
    .w(w)
  );
  assign digest = { H0_reg, H1_reg, H2_reg, H3_reg, H4_reg };
  assign digest_valid = digest_valid_reg;
  assign digest_valid_new = digest_update;
  assign first_block = digest_init;
  assign ready_flag = ready;
  assign round_ctr_we = a_e_we;
  assign state_init = round_ctr_rst;
  assign state_update = round_ctr_inc;
  assign w_init = round_ctr_rst;
  assign w_next = round_ctr_inc;
endmodule

module sha1_w_mem(clk, reset_n, block, init, next, w);
  wire _000_;
  wire [6:0] _001_;
  wire [31:0] _002_;
  wire [31:0] _003_;
  wire [31:0] _004_;
  wire [31:0] _005_;
  wire [31:0] _006_;
  wire [31:0] _007_;
  wire [31:0] _008_;
  wire [31:0] _009_;
  wire [31:0] _010_;
  wire [31:0] _011_;
  wire [31:0] _012_;
  wire [31:0] _013_;
  wire [31:0] _014_;
  wire [31:0] _015_;
  wire [31:0] _016_;
  wire [31:0] _017_;
  wire [31:0] _018_;
  wire [31:0] _019_;
  wire [31:0] _020_;
  wire [31:0] _021_;
  wire [31:0] _022_;
  wire [31:0] _023_;
  wire [31:0] _024_;
  wire [31:0] _025_;
  wire [31:0] _026_;
  wire [31:0] _027_;
  wire [31:0] _028_;
  wire [31:0] _029_;
  wire [31:0] _030_;
  wire [31:0] _031_;
  wire [31:0] _032_;
  wire [31:0] _033_;
  wire _034_;
  wire _035_;
  wire [6:0] _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire [31:0] _054_;
  wire [31:0] _055_;
  wire [31:0] _056_;
  wire [31:0] _057_;
  wire [31:0] _058_;
  wire [31:0] _059_;
  wire [31:0] _060_;
  wire [31:0] _061_;
  wire [31:0] _062_;
  wire [31:0] _063_;
  wire [31:0] _064_;
  wire [31:0] _065_;
  wire [31:0] _066_;
  wire [31:0] _067_;
  wire [31:0] _068_;
  wire [31:0] _069_;
  wire [31:0] _070_;
  wire [31:0] _071_;
  input [511:0] block;
  input clk;
  input init;
  input next;
  input reset_n;
  wire sha1_w_mem_ctrl_new;
  reg sha1_w_mem_ctrl_reg;
  wire sha1_w_mem_ctrl_we;
  output [31:0] w;
  wire [31:0] w_0;
  wire [31:0] w_13;
  wire [31:0] w_16;
  wire [31:0] w_2;
  wire [31:0] w_8;
  wire w_ctr_inc;
  wire [6:0] w_ctr_new;
  reg [6:0] w_ctr_reg;
  wire [31:0] w_mem00_new;
  wire [31:0] w_mem01_new;
  wire [31:0] w_mem02_new;
  wire [31:0] w_mem03_new;
  wire [31:0] w_mem04_new;
  wire [31:0] w_mem05_new;
  wire [31:0] w_mem06_new;
  wire [31:0] w_mem07_new;
  wire [31:0] w_mem08_new;
  wire [31:0] w_mem09_new;
  wire [31:0] w_mem10_new;
  wire [31:0] w_mem11_new;
  wire [31:0] w_mem12_new;
  wire [31:0] w_mem13_new;
  wire [31:0] w_mem14_new;
  wire [31:0] w_mem15_new;
  reg [31:0] w_mem_00;
  reg [31:0] w_mem_01;
  reg [31:0] w_mem_02;
  reg [31:0] w_mem_03;
  reg [31:0] w_mem_04;
  reg [31:0] w_mem_05;
  reg [31:0] w_mem_06;
  reg [31:0] w_mem_07;
  reg [31:0] w_mem_08;
  reg [31:0] w_mem_09;
  reg [31:0] w_mem_10;
  reg [31:0] w_mem_11;
  reg [31:0] w_mem_12;
  reg [31:0] w_mem_13;
  reg [31:0] w_mem_14;
  reg [31:0] w_mem_15;
  wire w_mem_we;
  wire [31:0] w_new;
  wire [31:0] w_tmp;
  wire [31:0] w_tmp_case;
  assign _036_ = w_ctr_reg + 1'b1;
  assign _035_ = w_ctr_reg == 7'b1001111;
  assign _034_ = w_ctr_reg > 4'b1111;
  assign _037_ = w_ctr_reg < 5'b10000;
  always @(posedge clk)
      w_mem_00 <= _002_;
  always @(posedge clk)
      w_mem_01 <= _003_;
  always @(posedge clk)
      w_mem_02 <= _004_;
  always @(posedge clk)
      w_mem_03 <= _005_;
  always @(posedge clk)
      w_mem_04 <= _006_;
  always @(posedge clk)
      w_mem_05 <= _007_;
  always @(posedge clk)
      w_mem_06 <= _008_;
  always @(posedge clk)
      w_mem_07 <= _009_;
  always @(posedge clk)
      w_mem_08 <= _010_;
  always @(posedge clk)
      w_mem_09 <= _011_;
  always @(posedge clk)
      w_mem_10 <= _012_;
  always @(posedge clk)
      w_mem_11 <= _013_;
  always @(posedge clk)
      w_mem_12 <= _014_;
  always @(posedge clk)
      w_mem_13 <= _015_;
  always @(posedge clk)
      w_mem_14 <= _016_;
  always @(posedge clk)
      w_mem_15 <= _017_;
  always @(posedge clk)
      w_ctr_reg <= _001_;
  always @(posedge clk)
      sha1_w_mem_ctrl_reg <= _000_;
  assign sha1_w_mem_ctrl_we = sha1_w_mem_ctrl_reg ? _035_ : init;
  assign sha1_w_mem_ctrl_new = sha1_w_mem_ctrl_reg ? 1'b0 : init;
  assign w_ctr_inc = sha1_w_mem_ctrl_reg ? next : 1'b0;
  assign w_ctr_new = w_ctr_inc ? _036_ : 7'b0000000;
  assign _033_ = _034_ ? { w_16[30:0], w_16[31] } : 32'd0;
  assign _032_ = _034_ ? w_mem_15 : 32'd0;
  assign _031_ = _034_ ? w_mem_14 : 32'd0;
  assign _030_ = _034_ ? w_mem_13 : 32'd0;
  assign _029_ = _034_ ? w_mem_12 : 32'd0;
  assign _028_ = _034_ ? w_mem_11 : 32'd0;
  assign _027_ = _034_ ? w_mem_10 : 32'd0;
  assign _026_ = _034_ ? w_mem_09 : 32'd0;
  assign _025_ = _034_ ? w_mem_08 : 32'd0;
  assign _024_ = _034_ ? w_mem_07 : 32'd0;
  assign _023_ = _034_ ? w_mem_06 : 32'd0;
  assign _022_ = _034_ ? w_mem_05 : 32'd0;
  assign _021_ = _034_ ? w_mem_04 : 32'd0;
  assign _020_ = _034_ ? w_mem_03 : 32'd0;
  assign _019_ = _034_ ? w_mem_02 : 32'd0;
  assign _018_ = _034_ ? w_mem_01 : 32'd0;
  assign w_mem_we = init ? 1'b1 : _034_;
  assign w_mem15_new = init ? block[31:0] : _033_;
  assign w_mem14_new = init ? block[63:32] : _032_;
  assign w_mem13_new = init ? block[95:64] : _031_;
  assign w_mem12_new = init ? block[127:96] : _030_;
  assign w_mem11_new = init ? block[159:128] : _029_;
  assign w_mem10_new = init ? block[191:160] : _028_;
  assign w_mem09_new = init ? block[223:192] : _027_;
  assign w_mem08_new = init ? block[255:224] : _026_;
  assign w_mem07_new = init ? block[287:256] : _025_;
  assign w_mem06_new = init ? block[319:288] : _024_;
  assign w_mem05_new = init ? block[351:320] : _023_;
  assign w_mem04_new = init ? block[383:352] : _022_;
  assign w_mem03_new = init ? block[415:384] : _021_;
  assign w_mem02_new = init ? block[447:416] : _020_;
  assign w_mem01_new = init ? block[479:448] : _019_;
  assign w_mem00_new = init ? block[511:480] : _018_;
  assign w = _037_ ? w_tmp_case : { w_16[30:0], w_16[31] };
  function [31:0] _132_;
    input [31:0] a;
    input [479:0] b;
    input [14:0] s;
    casez (s) // synopsys parallel_case
      15'b??????????????1:
        _132_ = b[31:0];
      15'b?????????????1?:
        _132_ = b[63:32];
      15'b????????????1??:
        _132_ = b[95:64];
      15'b???????????1???:
        _132_ = b[127:96];
      15'b??????????1????:
        _132_ = b[159:128];
      15'b?????????1?????:
        _132_ = b[191:160];
      15'b????????1??????:
        _132_ = b[223:192];
      15'b???????1???????:
        _132_ = b[255:224];
      15'b??????1????????:
        _132_ = b[287:256];
      15'b?????1?????????:
        _132_ = b[319:288];
      15'b????1??????????:
        _132_ = b[351:320];
      15'b???1???????????:
        _132_ = b[383:352];
      15'b??1????????????:
        _132_ = b[415:384];
      15'b?1?????????????:
        _132_ = b[447:416];
      15'b1??????????????:
        _132_ = b[479:448];
      default:
        _132_ = a;
    endcase
  endfunction
  assign w_tmp_case = _132_(w_mem_00, { w_mem_01, w_mem_02, w_mem_03, w_mem_04, w_mem_05, w_mem_06, w_mem_07, w_mem_08, w_mem_09, w_mem_10, w_mem_11, w_mem_12, w_mem_13, w_mem_14, w_mem_15 }, { _052_, _051_, _050_, _049_, _048_, _047_, _046_, _045_, _044_, _043_, _042_, _041_, _040_, _039_, _038_ });
  assign _038_ = w_ctr_reg[3:0] == 4'b1111;
  assign _039_ = w_ctr_reg[3:0] == 4'b1110;
  assign _040_ = w_ctr_reg[3:0] == 4'b1101;
  assign _041_ = w_ctr_reg[3:0] == 4'b1100;
  assign _042_ = w_ctr_reg[3:0] == 4'b1011;
  assign _043_ = w_ctr_reg[3:0] == 4'b1010;
  assign _044_ = w_ctr_reg[3:0] == 4'b1001;
  assign _045_ = w_ctr_reg[3:0] == 4'b1000;
  assign _046_ = w_ctr_reg[3:0] == 3'b111;
  assign _047_ = w_ctr_reg[3:0] == 3'b110;
  assign _048_ = w_ctr_reg[3:0] == 3'b101;
  assign _049_ = w_ctr_reg[3:0] == 3'b100;
  assign _050_ = w_ctr_reg[3:0] == 2'b11;
  assign _051_ = w_ctr_reg[3:0] == 2'b10;
  assign _052_ = w_ctr_reg[3:0] == 1'b1;
  assign _053_ = sha1_w_mem_ctrl_we ? sha1_w_mem_ctrl_new : sha1_w_mem_ctrl_reg;
  assign _000_ = reset_n ? _053_ : 1'b0;
  assign _001_ = reset_n ? w_ctr_new : 7'b0000000;
  assign _054_ = w_mem_we ? w_mem15_new : w_mem_15;
  assign _017_ = reset_n ? _054_ : 32'd0;
  assign _055_ = w_mem_we ? w_mem14_new : w_mem_14;
  assign _016_ = reset_n ? _055_ : 32'd0;
  assign _056_ = w_mem_we ? w_mem13_new : w_mem_13;
  assign _015_ = reset_n ? _056_ : 32'd0;
  assign _057_ = w_mem_we ? w_mem12_new : w_mem_12;
  assign _014_ = reset_n ? _057_ : 32'd0;
  assign _058_ = w_mem_we ? w_mem11_new : w_mem_11;
  assign _013_ = reset_n ? _058_ : 32'd0;
  assign _059_ = w_mem_we ? w_mem10_new : w_mem_10;
  assign _012_ = reset_n ? _059_ : 32'd0;
  assign _060_ = w_mem_we ? w_mem09_new : w_mem_09;
  assign _011_ = reset_n ? _060_ : 32'd0;
  assign _061_ = w_mem_we ? w_mem08_new : w_mem_08;
  assign _010_ = reset_n ? _061_ : 32'd0;
  assign _062_ = w_mem_we ? w_mem07_new : w_mem_07;
  assign _009_ = reset_n ? _062_ : 32'd0;
  assign _063_ = w_mem_we ? w_mem06_new : w_mem_06;
  assign _008_ = reset_n ? _063_ : 32'd0;
  assign _064_ = w_mem_we ? w_mem05_new : w_mem_05;
  assign _007_ = reset_n ? _064_ : 32'd0;
  assign _065_ = w_mem_we ? w_mem04_new : w_mem_04;
  assign _006_ = reset_n ? _065_ : 32'd0;
  assign _066_ = w_mem_we ? w_mem03_new : w_mem_03;
  assign _005_ = reset_n ? _066_ : 32'd0;
  assign _067_ = w_mem_we ? w_mem02_new : w_mem_02;
  assign _004_ = reset_n ? _067_ : 32'd0;
  assign _068_ = w_mem_we ? w_mem01_new : w_mem_01;
  assign _003_ = reset_n ? _068_ : 32'd0;
  assign _069_ = w_mem_we ? w_mem00_new : w_mem_00;
  assign _002_ = reset_n ? _069_ : 32'd0;
  assign _070_ = w_mem_13 ^ w_mem_08;
  assign _071_ = _070_ ^ w_mem_02;
  assign w_16 = _071_ ^ w_mem_00;
  assign w_0 = w_mem_00;
  assign w_13 = w_mem_13;
  assign w_2 = w_mem_02;
  assign w_8 = w_mem_08;
  assign w_new = { w_16[30:0], w_16[31] };
  assign w_tmp = w;
endmodule

module sha_top(clk, rst, wr, addr, data_in, data_out, ack, stb, in_addr_range, xram_addr, xram_data_out, xram_data_in, xram_ack, xram_stb, xram_wr);
  wire [15:0] _000_;
  wire [5:0] _001_;
  wire [15:0] _002_;
  wire [511:0] _003_;
  wire _004_;
  wire [159:0] _005_;
  wire [2:0] _006_;
  wire [5:0] _007_;
  wire [15:0] _008_;
  wire [15:0] _009_;
  wire [15:0] _010_;
  wire [15:0] _011_;
  wire [15:0] _012_;
  wire [31:0] _013_;
  wire [159:0] _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire [2:0] _095_;
  wire [2:0] _096_;
  wire [2:0] _097_;
  wire [2:0] _098_;
  wire [2:0] _099_;
  wire [5:0] _100_;
  wire [5:0] _101_;
  wire [31:0] _102_;
  wire [511:0] _103_;
  wire [7:0] _104_;
  wire [7:0] _105_;
  wire [7:0] _106_;
  wire [15:0] _107_;
  wire [7:0] _108_;
  wire [7:0] _109_;
  wire [7:0] _110_;
  wire [7:0] _111_;
  wire [7:0] _112_;
  wire [7:0] _113_;
  wire [7:0] _114_;
  wire [7:0] _115_;
  wire [7:0] _116_;
  wire [7:0] _117_;
  wire [7:0] _118_;
  wire [7:0] _119_;
  wire [7:0] _120_;
  wire [7:0] _121_;
  wire [7:0] _122_;
  wire [7:0] _123_;
  wire [7:0] _124_;
  wire [7:0] _125_;
  wire [7:0] _126_;
  output ack;
  input [15:0] addr;
  reg [15:0] block_counter;
  wire [15:0] block_counter_next;
  reg [5:0] byte_counter;
  wire [5:0] byte_counter_next;
  wire [5:0] byte_counter_next_rw;
  wire [15:0] bytes_read_next;
  input clk;
  input [7:0] data_in;
  output [7:0] data_out;
  wire [7:0] data_out_len;
  wire [7:0] data_out_rd_addr;
  wire [7:0] data_out_state;
  wire [7:0] data_out_wr_addr;
  output in_addr_range;
  wire read_last_byte_acked;
  wire reading_last_byte;
  reg [15:0] reg_bytes_read;
  input rst;
  wire sel_reg_len;
  wire sel_reg_rd_addr;
  wire sel_reg_start;
  wire sel_reg_state;
  wire sel_reg_wr_addr;
  reg [511:0] sha_core_block;
  wire [511:0] sha_core_block_next;
  wire [511:0] sha_core_block_read_data_next;
  wire [159:0] sha_core_digest;
  wire sha_core_digest_valid;
  wire sha_core_init;
  wire sha_core_next;
  wire sha_core_ready;
  reg sha_core_ready_r;
  wire sha_core_rst_n;
  wire sha_finished;
  wire [15:0] sha_len;
  wire sha_more_blocks;
  wire [15:0] sha_rdaddr;
  reg [159:0] sha_reg_digest;
  wire [67:0] sha_reg_digest_next;
  wire [15:0] sha_reg_len;
  wire [15:0] sha_reg_rd_addr;
  reg [2:0] sha_reg_state;
  wire [15:0] sha_reg_wr_addr;
  wire [2:0] sha_state;
  wire sha_state_idle;
  wire [2:0] sha_state_next;
  wire sha_state_next_idle;
  wire [2:0] sha_state_next_op2;
  wire [1:0] sha_state_next_read_data;
  wire [2:0] sha_state_next_write_data;
  wire sha_state_op1;
  wire sha_state_op2;
  wire sha_state_read_data;
  wire sha_state_write_data;
  wire [15:0] sha_wraddr;
  wire start_op;
  input stb;
  input wr;
  wire wren;
  wire write_last_byte_acked;
  wire writing_last_byte;
  input xram_ack;
  output [15:0] xram_addr;
  input [7:0] xram_data_in;
  output [7:0] xram_data_out;
  output xram_stb;
  output xram_wr;
  assign _007_ = byte_counter + 1'b1;
  assign _008_ = reg_bytes_read + 1'b1;
  assign _009_ = block_counter + 7'b1000000;
  assign _010_ = sha_reg_rd_addr + byte_counter;
  assign _011_ = _010_ + block_counter;
  assign _012_ = sha_reg_wr_addr + byte_counter;
  assign _015_ = byte_counter == 6'b111111;
  assign _016_ = bytes_read_next == sha_reg_len;
  assign _017_ = byte_counter == 6'b111110;
  assign _018_ = byte_counter == 6'b111101;
  assign _019_ = byte_counter == 6'b111100;
  assign _020_ = byte_counter == 6'b111011;
  assign _021_ = byte_counter == 6'b111010;
  assign _022_ = byte_counter == 6'b111001;
  assign _023_ = byte_counter == 6'b111000;
  assign _024_ = byte_counter == 6'b110111;
  assign _025_ = byte_counter == 6'b110110;
  assign _026_ = byte_counter == 6'b110101;
  assign _027_ = byte_counter == 6'b110100;
  assign _028_ = byte_counter == 6'b110011;
  assign _029_ = byte_counter == 6'b110010;
  assign _030_ = byte_counter == 6'b110001;
  assign _031_ = byte_counter == 6'b110000;
  assign _032_ = byte_counter == 6'b101111;
  assign _033_ = byte_counter == 6'b101110;
  assign _034_ = byte_counter == 6'b101101;
  assign _035_ = byte_counter == 6'b101100;
  assign _036_ = byte_counter == 6'b101011;
  assign _037_ = byte_counter == 6'b101010;
  assign _038_ = byte_counter == 6'b101001;
  assign _039_ = byte_counter == 6'b101000;
  assign _040_ = byte_counter == 6'b100111;
  assign _041_ = byte_counter == 6'b100110;
  assign _042_ = byte_counter == 6'b100101;
  assign _043_ = byte_counter == 6'b100100;
  assign _044_ = byte_counter == 6'b100011;
  assign _045_ = byte_counter == 6'b100010;
  assign _046_ = byte_counter == 6'b100001;
  assign _047_ = byte_counter == 6'b100000;
  assign _048_ = byte_counter == 5'b11111;
  assign _049_ = byte_counter == 5'b11110;
  assign _050_ = byte_counter == 5'b11101;
  assign _051_ = byte_counter == 5'b11100;
  assign _052_ = byte_counter == 5'b11011;
  assign _053_ = byte_counter == 5'b11010;
  assign _054_ = byte_counter == 5'b11001;
  assign _055_ = byte_counter == 5'b11000;
  assign _056_ = byte_counter == 5'b10111;
  assign _057_ = byte_counter == 5'b10110;
  assign _058_ = byte_counter == 5'b10101;
  assign _059_ = byte_counter == 5'b10100;
  assign writing_last_byte = byte_counter == 5'b10011;
  assign _060_ = byte_counter == 5'b10010;
  assign _061_ = byte_counter == 5'b10001;
  assign _062_ = byte_counter == 5'b10000;
  assign _063_ = byte_counter == 4'b1111;
  assign _064_ = byte_counter == 4'b1110;
  assign _065_ = byte_counter == 4'b1101;
  assign _066_ = byte_counter == 4'b1100;
  assign _067_ = byte_counter == 4'b1011;
  assign _068_ = byte_counter == 4'b1010;
  assign _069_ = byte_counter == 4'b1001;
  assign _070_ = byte_counter == 4'b1000;
  assign _071_ = byte_counter == 3'b111;
  assign _072_ = byte_counter == 3'b110;
  assign _073_ = byte_counter == 3'b101;
  assign _074_ = byte_counter == 3'b100;
  assign _075_ = byte_counter == 2'b11;
  assign _076_ = byte_counter == 2'b10;
  assign _077_ = byte_counter == 1'b1;
  assign _078_ = ! byte_counter;
  assign _079_ = ! block_counter;
  assign sha_state_idle = ! sha_reg_state;
  assign sha_state_read_data = sha_reg_state == 1'b1;
  assign sha_state_op1 = sha_reg_state == 2'b10;
  assign sha_state_op2 = sha_reg_state == 2'b11;
  assign sha_state_write_data = sha_reg_state == 3'b100;
  assign sel_reg_start = addr == 16'b1111111000000000;
  assign sel_reg_state = addr == 16'b1111111000000001;
  assign sel_reg_rd_addr = addr[15:1] == 15'b111111100000001;
  assign sel_reg_wr_addr = addr[15:1] == 15'b111111100000010;
  assign sel_reg_len = addr[15:1] == 15'b111111100000011;
  assign _080_ = reg_bytes_read >= sha_reg_len;
  assign _081_ = addr >= 16'b1111111000000000;
  assign _082_ = sel_reg_start && data_in[0];
  assign _083_ = _082_ && stb;
  assign start_op = _083_ && wren;
  assign _084_ = sha_state_read_data && xram_ack;
  assign _085_ = sha_state_op2 && sha_more_blocks;
  assign read_last_byte_acked = reading_last_byte && xram_ack;
  assign sha_more_blocks = sha_core_digest_valid && _092_;
  assign sha_finished = sha_core_digest_valid && _080_;
  assign write_last_byte_acked = writing_last_byte && xram_ack;
  assign _086_ = sel_reg_rd_addr && wren;
  assign _087_ = sel_reg_wr_addr && wren;
  assign _088_ = sel_reg_len && wren;
  assign _089_ = sha_state_op1 && sha_core_ready_r;
  assign sha_core_init = _089_ && _079_;
  assign sha_core_next = _089_ && _094_;
  assign in_addr_range = _081_ && _093_;
  assign ack = stb && in_addr_range;
  assign wren = wr && sha_state_idle;
  assign sha_core_rst_n = ! rst;
  assign _090_ = sha_state_idle || sha_state_op1;
  assign _091_ = _090_ || sha_state_op2;
  assign reading_last_byte = _015_ || _016_;
  assign xram_stb = sha_state_read_data || sha_state_write_data;
  assign _092_ = reg_bytes_read < sha_reg_len;
  assign _093_ = addr < 16'b1111111000010000;
  assign _094_ = | block_counter;
  always @(posedge clk)
      sha_reg_state <= _006_;
  always @(posedge clk)
      byte_counter <= _001_;
  always @(posedge clk)
      reg_bytes_read <= _002_;
  always @(posedge clk)
      block_counter <= _000_;
  always @(posedge clk)
      sha_core_ready_r <= _004_;
  always @(posedge clk)
      sha_core_block <= _003_;
  always @(posedge clk)
      sha_reg_digest <= _005_;
  assign _005_ = rst ? 160'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : { _014_[159:68], sha_reg_digest_next };
  assign _003_ = rst ? 512'bsha_core_block_next;
  assign _004_ = rst ? 1'b0 : sha_core_ready;
  assign _000_ = rst ? 16'b0000000000000000 : block_counter_next;
  assign _002_ = rst ? 16'b0000000000000000 : bytes_read_next;
  assign _001_ = rst ? 6'b000000 : byte_counter_next;
  assign _006_ = rst ? 3'b000 : sha_state_next;
  assign _095_ = sha_state_write_data ? sha_state_next_write_data : 3'b000;
  assign _096_ = sha_state_op2 ? sha_state_next_op2 : _095_;
  assign _097_ = sha_state_op1 ? 3'b011 : _096_;
  assign _098_ = sha_state_read_data ? { 1'b0, sha_state_next_read_data } : _097_;
  assign sha_state_next = sha_state_idle ? { 2'b00, start_op } : _098_;
  assign sha_state_next_read_data = read_last_byte_acked ? 2'b10 : 2'b01;
  assign _099_[1:0] = sha_more_blocks ? 2'b01 : 2'b11;
  assign sha_state_next_op2 = sha_finished ? 3'b100 : { 1'b0, _099_[1:0] };
  assign sha_state_next_write_data = write_last_byte_acked ? 3'b000 : 3'b100;
  assign byte_counter_next_rw = xram_ack ? _007_ : byte_counter;
  assign _100_ = sha_state_write_data ? byte_counter_next_rw : byte_counter;
  assign _101_ = sha_state_read_data ? byte_counter_next_rw : _100_;
  assign byte_counter_next = _091_ ? 6'b000000 : _101_;
  assign _102_[15:0] = _084_ ? _008_ : reg_bytes_read;
  assign bytes_read_next = sha_state_idle ? 16'b0000000000000000 : _102_[15:0];
  assign _013_[15:0] = _085_ ? _009_ : block_counter;
  assign block_counter_next = sha_state_idle ? 16'b0000000000000000 : _013_[15:0];
  assign sha_core_block_read_data_next[7:0] = _015_ ? xram_data_in : sha_core_block[7:0];
  assign sha_core_block_read_data_next[15:8] = _017_ ? xram_data_in : sha_core_block[15:8];
  assign sha_core_block_read_data_next[23:16] = _018_ ? xram_data_in : sha_core_block[23:16];
  assign sha_core_block_read_data_next[31:24] = _019_ ? xram_data_in : sha_core_block[31:24];
  assign sha_core_block_read_data_next[39:32] = _020_ ? xram_data_in : sha_core_block[39:32];
  assign sha_core_block_read_data_next[47:40] = _021_ ? xram_data_in : sha_core_block[47:40];
  assign sha_core_block_read_data_next[55:48] = _022_ ? xram_data_in : sha_core_block[55:48];
  assign sha_core_block_read_data_next[63:56] = _023_ ? xram_data_in : sha_core_block[63:56];
  assign sha_core_block_read_data_next[71:64] = _024_ ? xram_data_in : sha_core_block[71:64];
  assign sha_core_block_read_data_next[79:72] = _025_ ? xram_data_in : sha_core_block[79:72];
  assign sha_core_block_read_data_next[87:80] = _026_ ? xram_data_in : sha_core_block[87:80];
  assign sha_core_block_read_data_next[95:88] = _027_ ? xram_data_in : sha_core_block[95:88];
  assign sha_core_block_read_data_next[103:96] = _028_ ? xram_data_in : sha_core_block[103:96];
  assign sha_core_block_read_data_next[111:104] = _029_ ? xram_data_in : sha_core_block[111:104];
  assign sha_core_block_read_data_next[119:112] = _030_ ? xram_data_in : sha_core_block[119:112];
  assign sha_core_block_read_data_next[127:120] = _031_ ? xram_data_in : sha_core_block[127:120];
  assign sha_core_block_read_data_next[135:128] = _032_ ? xram_data_in : sha_core_block[135:128];
  assign sha_core_block_read_data_next[143:136] = _033_ ? xram_data_in : sha_core_block[143:136];
  assign sha_core_block_read_data_next[151:144] = _034_ ? xram_data_in : sha_core_block[151:144];
  assign sha_core_block_read_data_next[159:152] = _035_ ? xram_data_in : sha_core_block[159:152];
  assign sha_core_block_read_data_next[167:160] = _036_ ? xram_data_in : sha_core_block[167:160];
  assign sha_core_block_read_data_next[175:168] = _037_ ? xram_data_in : sha_core_block[175:168];
  assign sha_core_block_read_data_next[183:176] = _038_ ? xram_data_in : sha_core_block[183:176];
  assign sha_core_block_read_data_next[191:184] = _039_ ? xram_data_in : sha_core_block[191:184];
  assign sha_core_block_read_data_next[199:192] = _040_ ? xram_data_in : sha_core_block[199:192];
  assign sha_core_block_read_data_next[207:200] = _041_ ? xram_data_in : sha_core_block[207:200];
  assign sha_core_block_read_data_next[215:208] = _042_ ? xram_data_in : sha_core_block[215:208];
  assign sha_core_block_read_data_next[223:216] = _043_ ? xram_data_in : sha_core_block[223:216];
  assign sha_core_block_read_data_next[231:224] = _044_ ? xram_data_in : sha_core_block[231:224];
  assign sha_core_block_read_data_next[239:232] = _045_ ? xram_data_in : sha_core_block[239:232];
  assign sha_core_block_read_data_next[247:240] = _046_ ? xram_data_in : sha_core_block[247:240];
  assign sha_core_block_read_data_next[255:248] = _047_ ? xram_data_in : sha_core_block[255:248];
  assign sha_core_block_read_data_next[263:256] = _048_ ? xram_data_in : sha_core_block[263:256];
  assign sha_core_block_read_data_next[271:264] = _049_ ? xram_data_in : sha_core_block[271:264];
  assign sha_core_block_read_data_next[279:272] = _050_ ? xram_data_in : sha_core_block[279:272];
  assign sha_core_block_read_data_next[287:280] = _051_ ? xram_data_in : sha_core_block[287:280];
  assign sha_core_block_read_data_next[295:288] = _052_ ? xram_data_in : sha_core_block[295:288];
  assign sha_core_block_read_data_next[303:296] = _053_ ? xram_data_in : sha_core_block[303:296];
  assign sha_core_block_read_data_next[311:304] = _054_ ? xram_data_in : sha_core_block[311:304];
  assign sha_core_block_read_data_next[319:312] = _055_ ? xram_data_in : sha_core_block[319:312];
  assign sha_core_block_read_data_next[327:320] = _056_ ? xram_data_in : sha_core_block[327:320];
  assign sha_core_block_read_data_next[335:328] = _057_ ? xram_data_in : sha_core_block[335:328];
  assign sha_core_block_read_data_next[343:336] = _058_ ? xram_data_in : sha_core_block[343:336];
  assign sha_core_block_read_data_next[351:344] = _059_ ? xram_data_in : sha_core_block[351:344];
  assign sha_core_block_read_data_next[359:352] = writing_last_byte ? xram_data_in : sha_core_block[359:352];
  assign sha_core_block_read_data_next[367:360] = _060_ ? xram_data_in : sha_core_block[367:360];
  assign sha_core_block_read_data_next[375:368] = _061_ ? xram_data_in : sha_core_block[375:368];
  assign sha_core_block_read_data_next[383:376] = _062_ ? xram_data_in : sha_core_block[383:376];
  assign sha_core_block_read_data_next[391:384] = _063_ ? xram_data_in : sha_core_block[391:384];
  assign sha_core_block_read_data_next[399:392] = _064_ ? xram_data_in : sha_core_block[399:392];
  assign sha_core_block_read_data_next[407:400] = _065_ ? xram_data_in : sha_core_block[407:400];
  assign sha_core_block_read_data_next[415:408] = _066_ ? xram_data_in : sha_core_block[415:408];
  assign sha_core_block_read_data_next[423:416] = _067_ ? xram_data_in : sha_core_block[423:416];
  assign sha_core_block_read_data_next[431:424] = _068_ ? xram_data_in : sha_core_block[431:424];
  assign sha_core_block_read_data_next[439:432] = _069_ ? xram_data_in : sha_core_block[439:432];
  assign sha_core_block_read_data_next[447:440] = _070_ ? xram_data_in : sha_core_block[447:440];
  assign sha_core_block_read_data_next[455:448] = _071_ ? xram_data_in : sha_core_block[455:448];
  assign sha_core_block_read_data_next[463:456] = _072_ ? xram_data_in : sha_core_block[463:456];
  assign sha_core_block_read_data_next[471:464] = _073_ ? xram_data_in : sha_core_block[471:464];
  assign sha_core_block_read_data_next[479:472] = _074_ ? xram_data_in : sha_core_block[479:472];
  assign sha_core_block_read_data_next[487:480] = _075_ ? xram_data_in : sha_core_block[487:480];
  assign sha_core_block_read_data_next[495:488] = _076_ ? xram_data_in : sha_core_block[495:488];
  assign sha_core_block_read_data_next[503:496] = _077_ ? xram_data_in : sha_core_block[503:496];
  assign sha_core_block_read_data_next[511:504] = _078_ ? xram_data_in : sha_core_block[511:504];
  assign _103_ = sha_state_read_data ? sha_core_block_read_data_next : sha_core_block;
  assign sha_core_block_next = sha_state_idle ? 512'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : _103_;
  assign _104_ = sel_reg_len ? data_out_len : 8'b00000000;
  assign _105_ = sel_reg_wr_addr ? data_out_wr_addr : _104_;
  assign _106_ = sel_reg_rd_addr ? data_out_rd_addr : _105_;
  assign data_out = sel_reg_state ? { 5'b00000, sha_reg_state } : _106_;
  assign { _014_[159:68], sha_reg_digest_next } = sha_core_digest_valid ? sha_core_digest : sha_reg_digest;
  assign _107_ = sha_state_write_data ? _012_ : 16'b0000000000000000;
  assign xram_addr = sha_state_read_data ? _011_ : _107_;
  assign _108_ = _078_ ? sha_reg_digest[159:152] : 8'b00000000;
  assign _109_ = _077_ ? sha_reg_digest[151:144] : _108_;
  assign _110_ = _076_ ? sha_reg_digest[143:136] : _109_;
  assign _111_ = _075_ ? sha_reg_digest[135:128] : _110_;
  assign _112_ = _074_ ? sha_reg_digest[127:120] : _111_;
  assign _113_ = _073_ ? sha_reg_digest[119:112] : _112_;
  assign _114_ = _072_ ? sha_reg_digest[111:104] : _113_;
  assign _115_ = _071_ ? sha_reg_digest[103:96] : _114_;
  assign _116_ = _070_ ? sha_reg_digest[95:88] : _115_;
  assign _117_ = _069_ ? sha_reg_digest[87:80] : _116_;
  assign _118_ = _068_ ? sha_reg_digest[79:72] : _117_;
  assign _119_ = _067_ ? sha_reg_digest[71:64] : _118_;
  assign _120_ = _066_ ? sha_reg_digest[63:56] : _119_;
  assign _121_ = _065_ ? sha_reg_digest[55:48] : _120_;
  assign _122_ = _064_ ? sha_reg_digest[47:40] : _121_;
  assign _123_ = _063_ ? sha_reg_digest[39:32] : _122_;
  assign _124_ = _062_ ? sha_reg_digest[31:24] : _123_;
  assign _125_ = _061_ ? sha_reg_digest[23:16] : _124_;
  assign _126_ = _060_ ? sha_reg_digest[15:8] : _125_;
  assign xram_data_out = writing_last_byte ? sha_reg_digest[7:0] : _126_;
  sha1_core sha1_core_i (
    .block(sha_core_block),
    .clk(clk),
    .digest(sha_core_digest),
    .digest_valid(sha_core_digest_valid),
    .init(sha_core_init),
    .next(sha_core_next),
    .ready(sha_core_ready),
    .reset_n(sha_core_rst_n)
  );
  reg2byte sha_reg_len_i (
    .addr(addr[0]),
    .clk(clk),
    .data_in(data_in),
    .data_out(data_out_len),
    .en(sel_reg_len),
    .reg_out(sha_reg_len),
    .rst(rst),
    .wr(_088_)
  );
  reg2byte sha_reg_rd_addr_i (
    .addr(addr[0]),
    .clk(clk),
    .data_in(data_in),
    .data_out(data_out_rd_addr),
    .en(sel_reg_rd_addr),
    .reg_out(sha_reg_rd_addr),
    .rst(rst),
    .wr(_086_)
  );
  reg2byte sha_reg_wr_addr_i (
    .addr(addr[0]),
    .clk(clk),
    .data_in(data_in),
    .data_out(data_out_wr_addr),
    .en(sel_reg_wr_addr),
    .reg_out(sha_reg_wr_addr),
    .rst(rst),
    .wr(_087_)
  );
  assign data_out_state = { 5'b00000, sha_reg_state };
  assign sha_len = sha_reg_len;
  assign sha_rdaddr = sha_reg_rd_addr;
  assign sha_state = sha_reg_state;
  assign sha_state_next_idle = start_op;
  assign sha_wraddr = sha_reg_wr_addr;
  assign xram_wr = sha_state_write_data;
endmodule

module sha_top_with_xram(clk, rst, wr, addr, data_in, data_out, ack, stb, in_addr_range);
  output ack;
  input [15:0] addr;
  input clk;
  input [7:0] data_in;
  output [7:0] data_out;
  output in_addr_range;
  input rst;
  input stb;
  input wr;
  wire xram_ack;
  wire [15:0] xram_addr;
  wire [7:0] xram_data_in;
  wire [7:0] xram_data_out;
  wire xram_stb;
  wire xram_wr;
  XRAM ram (
    .ack(xram_ack),
    .addr_in(xram_addr),
    .clk(clk),
    .data_in(xram_data_out),
    .data_out(xram_data_in),
    .rst(rst),
    .stb(xram_stb),
    .wr(xram_wr)
  );
  sha_top sha_top_0 (
    .ack(ack),
    .addr(addr),
    .clk(clk),
    .data_in(data_in),
    .data_out(data_out),
    .in_addr_range(in_addr_range),
    .rst(rst),
    .stb(stb),
    .wr(wr),
    .xram_ack(xram_ack),
    .xram_addr(xram_addr),
    .xram_data_in(xram_data_in),
    .xram_data_out(xram_data_out),
    .xram_stb(xram_stb),
    .xram_wr(xram_wr)
  );
endmodule
