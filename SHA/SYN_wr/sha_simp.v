/* Generated by Yosys 0.8 (git sha1 UNKNOWN, clang 9.0.0 -fPIC -Os) */

(* top =  1  *)
(* src = "../rtl/sha1_core.v:39" *)
module sha1_core(clk, reset_n, init, next, block, ready, digest, digest_valid);
  (* src = "../rtl/sha1_core.v:157" *)
  wire [31:0] _000_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire [31:0] _001_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire [31:0] _002_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire [31:0] _003_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire [31:0] _004_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire [31:0] _005_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire [31:0] _006_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire [31:0] _007_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire [31:0] _008_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire _009_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire [31:0] _010_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire [6:0] _011_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire [1:0] _012_;
  wire [30:0] _013_;
  (* src = "../rtl/sha1_core.v:218" *)
  wire [31:0] _014_;
  (* src = "../rtl/sha1_core.v:218" *)
  wire [31:0] _015_;
  wire [28:0] _016_;
  (* src = "../rtl/sha1_core.v:218" *)
  wire [31:0] _017_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _018_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _019_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _020_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _021_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _022_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _023_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _024_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _025_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _026_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _027_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _028_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _029_;
  (* src = "../rtl/sha1_core.v:360" *)
  wire _030_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _031_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _032_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _033_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _034_;
  (* src = "../rtl/sha1_core.v:360" *)
  wire [1:0] _035_;
  (* src = "../rtl/sha1_core.v:360" *)
  wire _036_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _037_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _038_;
  (* src = "../rtl/sha1_core.v:239" *)
  wire [31:0] _039_;
  (* src = "../rtl/sha1_core.v:240" *)
  wire [31:0] _040_;
  (* src = "../rtl/sha1_core.v:241" *)
  wire [31:0] _041_;
  (* src = "../rtl/sha1_core.v:242" *)
  wire [31:0] _042_;
  (* src = "../rtl/sha1_core.v:243" *)
  wire [31:0] _043_;
  (* src = "../rtl/sha1_core.v:319" *)
  wire [31:0] _044_;
  (* src = "../rtl/sha1_core.v:319" *)
  wire [31:0] _045_;
  (* src = "../rtl/sha1_core.v:319" *)
  wire [31:0] _046_;
  (* src = "../rtl/sha1_core.v:319" *)
  wire [31:0] _047_;
  (* src = "../rtl/sha1_core.v:350" *)
  wire [6:0] _048_;
  (* src = "../rtl/sha1_core.v:300" *)
  wire [31:0] _049_;
  (* src = "../rtl/sha1_core.v:300" *)
  wire [31:0] _050_;
  (* src = "../rtl/sha1_core.v:302" *)
  wire _051_;
  (* src = "../rtl/sha1_core.v:307" *)
  wire _052_;
  (* src = "../rtl/sha1_core.v:312" *)
  wire _053_;
  (* src = "../rtl/sha1_core.v:297" *)
  wire _054_;
  (* src = "../rtl/sha1_core.v:302" *)
  wire _055_;
  (* src = "../rtl/sha1_core.v:307" *)
  wire _056_;
  (* src = "../rtl/sha1_core.v:302" *)
  wire _057_;
  (* src = "../rtl/sha1_core.v:307" *)
  wire _058_;
  (* src = "../rtl/sha1_core.v:300" *)
  wire [31:0] _059_;
  (* src = "../rtl/sha1_core.v:310" *)
  wire [31:0] _060_;
  (* src = "../rtl/sha1_core.v:310" *)
  wire [31:0] _061_;
  (* src = "../rtl/sha1_core.v:310" *)
  wire [31:0] _062_;
  (* src = "../rtl/sha1_core.v:300" *)
  wire [31:0] _063_;
  (* src = "../rtl/sha1_core.v:305" *)
  wire [31:0] _064_;
  (* src = "../rtl/sha1_core.v:305" *)
  wire [31:0] _065_;
  (* src = "../rtl/sha1_core.v:310" *)
  wire [31:0] _066_;
  (* src = "../rtl/sha1_core.v:310" *)
  wire [31:0] _067_;
  (* src = "../rtl/sha1_core.v:87" *)
  wire [31:0] H0_new;
  (* src = "../rtl/sha1_core.v:86" *)
  reg [31:0] H0_reg;
  (* src = "../rtl/sha1_core.v:89" *)
  wire [31:0] H1_new;
  (* src = "../rtl/sha1_core.v:88" *)
  reg [31:0] H1_reg;
  (* src = "../rtl/sha1_core.v:91" *)
  wire [31:0] H2_new;
  (* src = "../rtl/sha1_core.v:90" *)
  reg [31:0] H2_reg;
  (* src = "../rtl/sha1_core.v:93" *)
  wire [31:0] H3_new;
  (* src = "../rtl/sha1_core.v:92" *)
  reg [31:0] H3_reg;
  (* src = "../rtl/sha1_core.v:95" *)
  wire [31:0] H4_new;
  (* src = "../rtl/sha1_core.v:94" *)
  reg [31:0] H4_reg;
  (* src = "../rtl/sha1_core.v:96" *)
  wire H_we;
  (* src = "../rtl/sha1_core.v:84" *)
  wire a_e_we;
  (* src = "../rtl/sha1_core.v:75" *)
  wire [31:0] a_new;
  (* src = "../rtl/sha1_core.v:74" *)
  reg [31:0] a_reg;
  (* src = "../rtl/sha1_core.v:77" *)
  wire [31:0] b_new;
  (* src = "../rtl/sha1_core.v:76" *)
  reg [31:0] b_reg;
  (* src = "../rtl/sha1_core.v:46" *)
  input [511:0] block;
  (* src = "../rtl/sha1_core.v:79" *)
  wire [31:0] c_new;
  (* src = "../rtl/sha1_core.v:78" *)
  reg [31:0] c_reg;
  (* src = "../rtl/sha1_core.v:40" *)
  input clk;
  (* src = "../rtl/sha1_core.v:81" *)
  wire [31:0] d_new;
  (* src = "../rtl/sha1_core.v:80" *)
  reg [31:0] d_reg;
  (* src = "../rtl/sha1_core.v:50" *)
  output [159:0] digest;
  (* src = "../rtl/sha1_core.v:116" *)
  wire digest_init;
  (* src = "../rtl/sha1_core.v:117" *)
  wire digest_update;
  (* src = "../rtl/sha1_core.v:51" *)
  output digest_valid;
  (* src = "../rtl/sha1_core.v:105" *)
  wire digest_valid_new;
  (* src = "../rtl/sha1_core.v:104" *)
  reg digest_valid_reg;
  (* src = "../rtl/sha1_core.v:106" *)
  wire digest_valid_we;
  (* src = "../rtl/sha1_core.v:83" *)
  wire [31:0] e_new;
  (* src = "../rtl/sha1_core.v:82" *)
  reg [31:0] e_reg;
  (* src = "../rtl/sha1_core.v:120" *)
  wire first_block;
  (* src = "../rtl/sha1_core.v:43" *)
  input init;
  (* src = "../rtl/sha1_core.v:44" *)
  input next;
  (* src = "../rtl/sha1_core.v:48" *)
  output ready;
  (* src = "../rtl/sha1_core.v:121" *)
  wire ready_flag;
  (* src = "../rtl/sha1_core.v:41" *)
  input reset_n;
  (* src = "../rtl/sha1_core.v:101" *)
  wire round_ctr_inc;
  (* src = "../rtl/sha1_core.v:99" *)
  wire [6:0] round_ctr_new;
  (* src = "../rtl/sha1_core.v:98" *)
  reg [6:0] round_ctr_reg;
  (* src = "../rtl/sha1_core.v:102" *)
  wire round_ctr_rst;
  (* src = "../rtl/sha1_core.v:100" *)
  wire round_ctr_we;
  (* src = "../rtl/sha1_core.v:109" *)
  wire [1:0] sha1_ctrl_new;
  (* src = "../rtl/sha1_core.v:108" *)
  reg [1:0] sha1_ctrl_reg;
  (* src = "../rtl/sha1_core.v:110" *)
  wire sha1_ctrl_we;
  (* src = "../rtl/sha1_core.v:118" *)
  wire state_init;
  (* src = "../rtl/sha1_core.v:119" *)
  wire state_update;
  (* src = "../rtl/sha1_core.v:124" *)
  wire [31:0] w;
  (* src = "../rtl/sha1_core.v:122" *)
  wire w_init;
  (* src = "../rtl/sha1_core.v:123" *)
  wire w_next;
  assign _039_ = H0_reg + (* src = "../rtl/sha1_core.v:239" *) a_reg;
  assign _040_ = H1_reg + (* src = "../rtl/sha1_core.v:240" *) b_reg;
  assign _041_ = H2_reg + (* src = "../rtl/sha1_core.v:241" *) c_reg;
  assign _042_ = H3_reg + (* src = "../rtl/sha1_core.v:242" *) d_reg;
  assign _043_ = H4_reg + (* src = "../rtl/sha1_core.v:243" *) e_reg;
  assign _044_ = { a_reg[26:0], a_reg[31:27] } + (* src = "../rtl/sha1_core.v:319" *) e_reg;
  assign _045_ = _044_ + (* src = "../rtl/sha1_core.v:319" *) _028_;
  assign _046_ = _045_ + (* src = "../rtl/sha1_core.v:319" *) _029_;
  assign _047_ = _046_ + (* src = "../rtl/sha1_core.v:319" *) w;
  assign _048_ = round_ctr_reg + (* src = "../rtl/sha1_core.v:350" *) 1'b1;
  assign _049_ = b_reg & (* src = "../rtl/sha1_core.v:300" *) c_reg;
  assign _050_ = _059_ & (* src = "../rtl/sha1_core.v:300" *) d_reg;
  assign _036_ = round_ctr_reg == (* src = "../rtl/sha1_core.v:414" *) 7'b1001111;
  assign _051_ = round_ctr_reg >= (* src = "../rtl/sha1_core.v:302" *) 5'b10100;
  assign _052_ = round_ctr_reg >= (* src = "../rtl/sha1_core.v:307" *) 6'b101000;
  assign _053_ = round_ctr_reg >= (* src = "../rtl/sha1_core.v:312" *) 6'b111100;
  assign _054_ = round_ctr_reg <= (* src = "../rtl/sha1_core.v:297" *) 5'b10011;
  assign _055_ = round_ctr_reg <= (* src = "../rtl/sha1_core.v:302" *) 6'b100111;
  assign _056_ = round_ctr_reg <= (* src = "../rtl/sha1_core.v:307" *) 6'b111011;
  assign _057_ = _051_ && (* src = "../rtl/sha1_core.v:302" *) _055_;
  assign _058_ = _052_ && (* src = "../rtl/sha1_core.v:307" *) _056_;
  assign _059_ = ~ (* src = "../rtl/sha1_core.v:300" *) b_reg;
  assign _060_ = b_reg | (* src = "../rtl/sha1_core.v:310" *) c_reg;
  assign _061_ = b_reg | (* src = "../rtl/sha1_core.v:310" *) d_reg;
  assign _062_ = c_reg | (* src = "../rtl/sha1_core.v:310" *) d_reg;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      a_reg <= 32'd0;
    else
      a_reg <= _005_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      b_reg <= 32'd0;
    else
      b_reg <= _006_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      c_reg <= 32'd0;
    else
      c_reg <= _007_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      d_reg <= 32'd0;
    else
      d_reg <= _008_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      e_reg <= 32'd0;
    else
      e_reg <= _010_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      H0_reg <= 32'd0;
    else
      H0_reg <= _000_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      H1_reg <= 32'd0;
    else
      H1_reg <= _001_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      H2_reg <= 32'd0;
    else
      H2_reg <= _002_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      H3_reg <= 32'd0;
    else
      H3_reg <= _003_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      H4_reg <= 32'd0;
    else
      H4_reg <= _004_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      round_ctr_reg <= 7'b0000000;
    else
      round_ctr_reg <= _011_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      digest_valid_reg <= 1'b0;
    else
      digest_valid_reg <= _009_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      sha1_ctrl_reg <= 2'b00;
    else
      sha1_ctrl_reg <= _012_;
  assign round_ctr_inc = sha1_ctrl_reg == (* src = "../rtl/sha1_core.v:377" *) 1'b1;
  assign _035_ = _036_ ? (* src = "../rtl/sha1_core.v:414" *) 2'b10 : 2'b00;
  assign ready = ! (* src = "../rtl/sha1_core.v:377" *) sha1_ctrl_reg;
  assign _030_ = next ? (* src = "../rtl/sha1_core.v:395" *) 1'b1 : init;
  function [0:0] _110_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* src = "../rtl/sha1_core.v:377" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _110_ = b[0:0];
      3'b?1?:
        _110_ = b[1:1];
      3'b1??:
        _110_ = b[2:2];
      default:
        _110_ = a;
    endcase
  endfunction
  assign sha1_ctrl_we = _110_(1'b0, { _030_, _036_, 1'b1 }, { ready, round_ctr_inc, digest_update });
  assign digest_update = sha1_ctrl_reg == (* src = "../rtl/sha1_core.v:377" *) 2'b10;
  function [1:0] _112_;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* src = "../rtl/sha1_core.v:377" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _112_ = b[1:0];
      2'b1?:
        _112_ = b[3:2];
      default:
        _112_ = a;
    endcase
  endfunction
  assign sha1_ctrl_new = _112_(2'b00, { 1'b0, _030_, _035_ }, { ready, round_ctr_inc });
  function [0:0] _113_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* src = "../rtl/sha1_core.v:377" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _113_ = b[0:0];
      2'b1?:
        _113_ = b[1:1];
      default:
        _113_ = a;
    endcase
  endfunction
  assign digest_valid_we = _113_(1'b0, { _030_, 1'b1 }, { ready, digest_update });
  assign round_ctr_rst = ready ? (* src = "../rtl/sha1_core.v:377" *) _030_ : 1'b0;
  assign digest_init = ready ? (* src = "../rtl/sha1_core.v:377" *) init : 1'b0;
  assign a_e_we = round_ctr_inc ? (* src = "../rtl/sha1_core.v:348" *) 1'b1 : round_ctr_rst;
  assign round_ctr_new = round_ctr_inc ? (* src = "../rtl/sha1_core.v:348" *) _048_ : 7'b0000000;
  assign _037_ = _053_ ? (* src = "../rtl/sha1_core.v:312" *) _065_ : 32'd0;
  assign _038_ = _053_ ? (* src = "../rtl/sha1_core.v:312" *) 32'd3395469782 : 32'd0;
  assign _033_ = _058_ ? (* src = "../rtl/sha1_core.v:307" *) _067_ : _037_;
  assign _034_ = _058_ ? (* src = "../rtl/sha1_core.v:307" *) 32'd2400959708 : _038_;
  assign _031_ = _057_ ? (* src = "../rtl/sha1_core.v:302" *) _065_ : _033_;
  assign _032_ = _057_ ? (* src = "../rtl/sha1_core.v:302" *) 32'd1859775393 : _034_;
  assign _028_ = _054_ ? (* src = "../rtl/sha1_core.v:297" *) _063_ : _031_;
  assign _029_ = _054_ ? (* src = "../rtl/sha1_core.v:297" *) 32'd1518500249 : _032_;
  assign e_new = round_ctr_inc ? (* src = "../rtl/sha1_core.v:295" *) d_reg : _022_;
  assign d_new = round_ctr_inc ? (* src = "../rtl/sha1_core.v:295" *) c_reg : _021_;
  assign c_new = round_ctr_inc ? (* src = "../rtl/sha1_core.v:295" *) { b_reg[1:0], b_reg[31:2] } : _020_;
  assign b_new = round_ctr_inc ? (* src = "../rtl/sha1_core.v:295" *) a_reg : _019_;
  assign a_new = round_ctr_inc ? (* src = "../rtl/sha1_core.v:295" *) _047_ : _018_;
  assign _027_ = digest_init ? (* src = "../rtl/sha1_core.v:275" *) 32'd3285377520 : H4_reg;
  assign _026_ = digest_init ? (* src = "../rtl/sha1_core.v:275" *) 32'd271733878 : H3_reg;
  assign _025_ = digest_init ? (* src = "../rtl/sha1_core.v:275" *) 32'd2562383102 : H2_reg;
  assign _024_ = digest_init ? (* src = "../rtl/sha1_core.v:275" *) 32'd4023233417 : H1_reg;
  assign _023_ = digest_init ? (* src = "../rtl/sha1_core.v:275" *) 32'd1732584193 : H0_reg;
  assign _022_ = round_ctr_rst ? (* src = "../rtl/sha1_core.v:273" *) _027_ : 32'd0;
  assign _021_ = round_ctr_rst ? (* src = "../rtl/sha1_core.v:273" *) _026_ : 32'd0;
  assign _020_ = round_ctr_rst ? (* src = "../rtl/sha1_core.v:273" *) _025_ : 32'd0;
  assign _019_ = round_ctr_rst ? (* src = "../rtl/sha1_core.v:273" *) _024_ : 32'd0;
  assign _018_ = round_ctr_rst ? (* src = "../rtl/sha1_core.v:273" *) _023_ : 32'd0;
  assign H_we = digest_update ? (* src = "../rtl/sha1_core.v:237" *) 1'b1 : digest_init;
  assign H4_new = digest_update ? (* src = "../rtl/sha1_core.v:237" *) _043_ : _017_;
  assign H3_new = digest_update ? (* src = "../rtl/sha1_core.v:237" *) _042_ : { 3'b000, _016_ };
  assign H2_new = digest_update ? (* src = "../rtl/sha1_core.v:237" *) _041_ : _015_;
  assign H1_new = digest_update ? (* src = "../rtl/sha1_core.v:237" *) _040_ : _014_;
  assign H0_new = digest_update ? (* src = "../rtl/sha1_core.v:237" *) _039_ : { 1'b0, _013_ };
  assign _017_ = digest_init ? (* src = "../rtl/sha1_core.v:227" *) 32'd3285377520 : 32'd0;
  assign _016_ = digest_init ? (* src = "../rtl/sha1_core.v:227" *) 29'b10000001100100101010001110110 : 29'b00000000000000000000000000000;
  assign _015_ = digest_init ? (* src = "../rtl/sha1_core.v:227" *) 32'd2562383102 : 32'd0;
  assign _014_ = digest_init ? (* src = "../rtl/sha1_core.v:227" *) 32'd4023233417 : 32'd0;
  assign _013_ = digest_init ? (* src = "../rtl/sha1_core.v:227" *) 31'b1100111010001010010001100000001 : 31'b0000000000000000000000000000000;
  assign _012_ = sha1_ctrl_we ? (* src = "../rtl/sha1_core.v:205" *) sha1_ctrl_new : sha1_ctrl_reg;
  assign _009_ = digest_valid_we ? (* src = "../rtl/sha1_core.v:200" *) digest_update : digest_valid_reg;
  assign _011_ = a_e_we ? (* src = "../rtl/sha1_core.v:195" *) round_ctr_new : round_ctr_reg;
  assign _004_ = H_we ? (* src = "../rtl/sha1_core.v:186" *) H4_new : H4_reg;
  assign _003_ = H_we ? (* src = "../rtl/sha1_core.v:186" *) H3_new : H3_reg;
  assign _002_ = H_we ? (* src = "../rtl/sha1_core.v:186" *) H2_new : H2_reg;
  assign _001_ = H_we ? (* src = "../rtl/sha1_core.v:186" *) H1_new : H1_reg;
  assign _000_ = H_we ? (* src = "../rtl/sha1_core.v:186" *) H0_new : H0_reg;
  assign _010_ = a_e_we ? (* src = "../rtl/sha1_core.v:177" *) e_new : e_reg;
  assign _008_ = a_e_we ? (* src = "../rtl/sha1_core.v:177" *) d_new : d_reg;
  assign _007_ = a_e_we ? (* src = "../rtl/sha1_core.v:177" *) c_new : c_reg;
  assign _006_ = a_e_we ? (* src = "../rtl/sha1_core.v:177" *) b_new : b_reg;
  assign _005_ = a_e_we ? (* src = "../rtl/sha1_core.v:177" *) a_new : a_reg;
  assign _063_ = _049_ ^ (* src = "../rtl/sha1_core.v:300" *) _050_;
  assign _064_ = b_reg ^ (* src = "../rtl/sha1_core.v:305" *) c_reg;
  assign _065_ = _064_ ^ (* src = "../rtl/sha1_core.v:305" *) d_reg;
  assign _066_ = _060_ ^ (* src = "../rtl/sha1_core.v:310" *) _061_;
  assign _067_ = _066_ ^ (* src = "../rtl/sha1_core.v:310" *) _062_;
  (* src = "../rtl/sha1_core.v:130" *)
  sha1_w_mem w_mem_inst (
    .block(block),
    .clk(clk),
    .init(round_ctr_rst),
    .next(round_ctr_inc),
    .reset_n(reset_n),
    .w(w)
  );
  assign digest = { H0_reg, H1_reg, H2_reg, H3_reg, H4_reg };
  assign digest_valid = digest_valid_reg;
  assign digest_valid_new = digest_update;
  assign first_block = digest_init;
  assign ready_flag = ready;
  assign round_ctr_we = a_e_we;
  assign state_init = round_ctr_rst;
  assign state_update = round_ctr_inc;
  assign w_init = round_ctr_rst;
  assign w_next = round_ctr_inc;
endmodule

(* src = "../rtl/sha1_w_mem.v:39" *)
module sha1_w_mem(clk, reset_n, block, init, next, w);
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire _000_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [6:0] _001_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _002_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _003_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _004_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _005_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _006_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _007_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _008_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _009_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _010_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _011_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _012_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _013_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _014_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _015_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _016_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _017_;
  (* src = "../rtl/sha1_w_mem.v:179" *)
  wire [31:0] _018_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _019_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _020_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _021_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _022_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _023_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _024_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _025_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _026_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _027_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _028_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _029_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _030_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _031_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _032_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _033_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _034_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire _035_;
  (* src = "../rtl/sha1_w_mem.v:305" *)
  wire _036_;
  (* src = "../rtl/sha1_w_mem.v:294" *)
  wire [6:0] _037_;
  (* src = "../rtl/sha1_w_mem.v:181" *)
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  (* src = "../rtl/sha1_w_mem.v:228" *)
  wire [31:0] _054_;
  (* src = "../rtl/sha1_w_mem.v:228" *)
  wire [31:0] _055_;
  (* src = "../rtl/sha1_w_mem.v:43" *)
  input [511:0] block;
  (* src = "../rtl/sha1_w_mem.v:40" *)
  input clk;
  (* src = "../rtl/sha1_w_mem.v:45" *)
  input init;
  (* src = "../rtl/sha1_w_mem.v:46" *)
  input next;
  (* src = "../rtl/sha1_w_mem.v:41" *)
  input reset_n;
  (* src = "../rtl/sha1_w_mem.v:90" *)
  wire sha1_w_mem_ctrl_new;
  (* src = "../rtl/sha1_w_mem.v:89" *)
  reg sha1_w_mem_ctrl_reg;
  (* src = "../rtl/sha1_w_mem.v:91" *)
  wire sha1_w_mem_ctrl_we;
  (* src = "../rtl/sha1_w_mem.v:48" *)
  output [31:0] w;
  (* src = "../rtl/sha1_w_mem.v:198" *)
  wire [31:0] w_0;
  (* src = "../rtl/sha1_w_mem.v:201" *)
  wire [31:0] w_13;
  (* src = "../rtl/sha1_w_mem.v:202" *)
  wire [31:0] w_16;
  (* src = "../rtl/sha1_w_mem.v:199" *)
  wire [31:0] w_2;
  (* src = "../rtl/sha1_w_mem.v:200" *)
  wire [31:0] w_8;
  (* src = "../rtl/sha1_w_mem.v:86" *)
  wire w_ctr_inc;
  (* src = "../rtl/sha1_w_mem.v:84" *)
  wire [6:0] w_ctr_new;
  (* src = "../rtl/sha1_w_mem.v:83" *)
  reg [6:0] w_ctr_reg;
  (* src = "../rtl/sha1_w_mem.v:87" *)
  wire w_ctr_rst;
  (* src = "../rtl/sha1_w_mem.v:85" *)
  wire w_ctr_we;
  (* src = "../rtl/sha1_w_mem.v:65" *)
  wire [31:0] w_mem00_new;
  (* src = "../rtl/sha1_w_mem.v:66" *)
  wire [31:0] w_mem01_new;
  (* src = "../rtl/sha1_w_mem.v:67" *)
  wire [31:0] w_mem02_new;
  (* src = "../rtl/sha1_w_mem.v:68" *)
  wire [31:0] w_mem03_new;
  (* src = "../rtl/sha1_w_mem.v:69" *)
  wire [31:0] w_mem04_new;
  (* src = "../rtl/sha1_w_mem.v:70" *)
  wire [31:0] w_mem05_new;
  (* src = "../rtl/sha1_w_mem.v:71" *)
  wire [31:0] w_mem06_new;
  (* src = "../rtl/sha1_w_mem.v:72" *)
  wire [31:0] w_mem07_new;
  (* src = "../rtl/sha1_w_mem.v:73" *)
  wire [31:0] w_mem08_new;
  (* src = "../rtl/sha1_w_mem.v:74" *)
  wire [31:0] w_mem09_new;
  (* src = "../rtl/sha1_w_mem.v:75" *)
  wire [31:0] w_mem10_new;
  (* src = "../rtl/sha1_w_mem.v:76" *)
  wire [31:0] w_mem11_new;
  (* src = "../rtl/sha1_w_mem.v:77" *)
  wire [31:0] w_mem12_new;
  (* src = "../rtl/sha1_w_mem.v:78" *)
  wire [31:0] w_mem13_new;
  (* src = "../rtl/sha1_w_mem.v:79" *)
  wire [31:0] w_mem14_new;
  (* src = "../rtl/sha1_w_mem.v:80" *)
  wire [31:0] w_mem15_new;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[0] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[10] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[11] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[12] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[13] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[14] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[15] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[1] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[2] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[3] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[4] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[5] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[6] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[7] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[8] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[9] ;
  (* src = "../rtl/sha1_w_mem.v:81" *)
  wire w_mem_we;
  (* src = "../rtl/sha1_w_mem.v:98" *)
  wire [31:0] w_new;
  (* src = "../rtl/sha1_w_mem.v:97" *)
  wire [31:0] w_tmp;
  assign _037_ = w_ctr_reg + (* src = "../rtl/sha1_w_mem.v:294" *) 1'b1;
  assign _036_ = w_ctr_reg == (* src = "../rtl/sha1_w_mem.v:330" *) 7'b1001111;
  assign _035_ = w_ctr_reg > (* src = "../rtl/sha1_w_mem.v:252" *) 4'b1111;
  assign _038_ = w_ctr_reg < (* src = "../rtl/sha1_w_mem.v:181" *) 5'b10000;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      w_ctr_reg <= 7'b0000000;
    else
      w_ctr_reg <= _001_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      sha1_w_mem_ctrl_reg <= 1'b0;
    else
      sha1_w_mem_ctrl_reg <= _000_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[0]  <= 32'd0;
    else
      \w_mem[0]  <= _002_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[1]  <= 32'd0;
    else
      \w_mem[1]  <= _009_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[2]  <= 32'd0;
    else
      \w_mem[2]  <= _010_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[3]  <= 32'd0;
    else
      \w_mem[3]  <= _011_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[4]  <= 32'd0;
    else
      \w_mem[4]  <= _012_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[5]  <= 32'd0;
    else
      \w_mem[5]  <= _013_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[6]  <= 32'd0;
    else
      \w_mem[6]  <= _014_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[7]  <= 32'd0;
    else
      \w_mem[7]  <= _015_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[8]  <= 32'd0;
    else
      \w_mem[8]  <= _016_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[9]  <= 32'd0;
    else
      \w_mem[9]  <= _017_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[10]  <= 32'd0;
    else
      \w_mem[10]  <= _003_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[11]  <= 32'd0;
    else
      \w_mem[11]  <= _004_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[12]  <= 32'd0;
    else
      \w_mem[12]  <= _005_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[13]  <= 32'd0;
    else
      \w_mem[13]  <= _006_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[14]  <= 32'd0;
    else
      \w_mem[14]  <= _007_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[15]  <= 32'd0;
    else
      \w_mem[15]  <= _008_;
  assign sha1_w_mem_ctrl_we = sha1_w_mem_ctrl_reg ? (* src = "../rtl/sha1_w_mem.v:312" *) _036_ : init;
  assign sha1_w_mem_ctrl_new = sha1_w_mem_ctrl_reg ? (* src = "../rtl/sha1_w_mem.v:312" *) 1'b0 : init;
  assign w_ctr_inc = sha1_w_mem_ctrl_reg ? (* src = "../rtl/sha1_w_mem.v:312" *) next : 1'b0;
  assign w_ctr_we = w_ctr_inc ? (* src = "../rtl/sha1_w_mem.v:292" *) 1'b1 : sha1_w_mem_ctrl_new;
  assign w_ctr_new = w_ctr_inc ? (* src = "../rtl/sha1_w_mem.v:292" *) _037_ : 7'b0000000;
  assign _034_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) { w_16[30:0], w_16[31] } : 32'd0;
  assign _033_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[15]  : 32'd0;
  assign _032_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[14]  : 32'd0;
  assign _031_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[13]  : 32'd0;
  assign _030_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[12]  : 32'd0;
  assign _029_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[11]  : 32'd0;
  assign _028_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[10]  : 32'd0;
  assign _027_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[9]  : 32'd0;
  assign _026_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[8]  : 32'd0;
  assign _025_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[7]  : 32'd0;
  assign _024_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[6]  : 32'd0;
  assign _023_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[5]  : 32'd0;
  assign _022_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[4]  : 32'd0;
  assign _021_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[3]  : 32'd0;
  assign _020_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[2]  : 32'd0;
  assign _019_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[1]  : 32'd0;
  assign w_mem_we = init ? (* src = "../rtl/sha1_w_mem.v:231" *) 1'b1 : _035_;
  assign w_mem15_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[31:0] : _034_;
  assign w_mem14_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[63:32] : _033_;
  assign w_mem13_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[95:64] : _032_;
  assign w_mem12_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[127:96] : _031_;
  assign w_mem11_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[159:128] : _030_;
  assign w_mem10_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[191:160] : _029_;
  assign w_mem09_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[223:192] : _028_;
  assign w_mem08_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[255:224] : _027_;
  assign w_mem07_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[287:256] : _026_;
  assign w_mem06_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[319:288] : _025_;
  assign w_mem05_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[351:320] : _024_;
  assign w_mem04_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[383:352] : _023_;
  assign w_mem03_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[415:384] : _022_;
  assign w_mem02_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[447:416] : _021_;
  assign w_mem01_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[479:448] : _020_;
  assign w_mem00_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[511:480] : _019_;
  function [31:0] _116_;
    input [31:0] a;
    input [479:0] b;
    input [14:0] s;
    (* src = "../rtl/sha1_w_mem.v:39" *)
    (* parallel_case *)
    casez (s)
      15'b??????????????1:
        _116_ = b[31:0];
      15'b?????????????1?:
        _116_ = b[63:32];
      15'b????????????1??:
        _116_ = b[95:64];
      15'b???????????1???:
        _116_ = b[127:96];
      15'b??????????1????:
        _116_ = b[159:128];
      15'b?????????1?????:
        _116_ = b[191:160];
      15'b????????1??????:
        _116_ = b[223:192];
      15'b???????1???????:
        _116_ = b[255:224];
      15'b??????1????????:
        _116_ = b[287:256];
      15'b?????1?????????:
        _116_ = b[319:288];
      15'b????1??????????:
        _116_ = b[351:320];
      15'b???1???????????:
        _116_ = b[383:352];
      15'b??1????????????:
        _116_ = b[415:384];
      15'b?1?????????????:
        _116_ = b[447:416];
      15'b1??????????????:
        _116_ = b[479:448];
      default:
        _116_ = a;
    endcase
  endfunction
  assign _018_ = _116_(\w_mem[0] , { \w_mem[1] , \w_mem[2] , \w_mem[3] , \w_mem[4] , \w_mem[5] , \w_mem[6] , \w_mem[7] , \w_mem[8] , \w_mem[9] , \w_mem[10] , \w_mem[11] , \w_mem[12] , \w_mem[13] , \w_mem[14] , \w_mem[15]  }, { _053_, _052_, _051_, _050_, _049_, _048_, _047_, _046_, _045_, _044_, _043_, _042_, _041_, _040_, _039_ });
  assign _039_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 4'b1111;
  assign _040_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 4'b1110;
  assign _041_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 4'b1101;
  assign _042_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 4'b1100;
  assign _043_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 4'b1011;
  assign _044_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 4'b1010;
  assign _045_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 4'b1001;
  assign _046_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 4'b1000;
  assign _047_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 3'b111;
  assign _048_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 3'b110;
  assign _049_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 3'b101;
  assign _050_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 3'b100;
  assign _051_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 2'b11;
  assign _052_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 2'b10;
  assign _053_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 1'b1;
  assign w = _038_ ? (* src = "../rtl/sha1_w_mem.v:181" *) _018_ : { w_16[30:0], w_16[31] };
  assign _008_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem15_new : \w_mem[15] ;
  assign _007_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem14_new : \w_mem[14] ;
  assign _006_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem13_new : \w_mem[13] ;
  assign _005_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem12_new : \w_mem[12] ;
  assign _004_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem11_new : \w_mem[11] ;
  assign _003_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem10_new : \w_mem[10] ;
  assign _017_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem09_new : \w_mem[9] ;
  assign _016_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem08_new : \w_mem[8] ;
  assign _015_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem07_new : \w_mem[7] ;
  assign _014_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem06_new : \w_mem[6] ;
  assign _013_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem05_new : \w_mem[5] ;
  assign _012_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem04_new : \w_mem[4] ;
  assign _011_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem03_new : \w_mem[3] ;
  assign _010_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem02_new : \w_mem[2] ;
  assign _009_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem01_new : \w_mem[1] ;
  assign _002_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem00_new : \w_mem[0] ;
  assign _000_ = sha1_w_mem_ctrl_we ? (* src = "../rtl/sha1_w_mem.v:164" *) sha1_w_mem_ctrl_new : sha1_w_mem_ctrl_reg;
  assign _001_ = w_ctr_we ? (* src = "../rtl/sha1_w_mem.v:159" *) w_ctr_new : w_ctr_reg;
  assign _054_ = \w_mem[13]  ^ (* src = "../rtl/sha1_w_mem.v:228" *) \w_mem[8] ;
  assign _055_ = _054_ ^ (* src = "../rtl/sha1_w_mem.v:228" *) \w_mem[2] ;
  assign w_16 = _055_ ^ (* src = "../rtl/sha1_w_mem.v:228" *) \w_mem[0] ;
  assign w_0 = \w_mem[0] ;
  assign w_13 = \w_mem[13] ;
  assign w_2 = \w_mem[2] ;
  assign w_8 = \w_mem[8] ;
  assign w_ctr_rst = sha1_w_mem_ctrl_new;
  assign w_new = { w_16[30:0], w_16[31] };
  assign w_tmp = w;
endmodule
