module sha_top ( addr , clk , data_in , rst , stb , wr , xram_ack , xram_data_in , INSTR_IN_ZY , YZC , addr_T , data_in_T , rst_T , stb_T , wr_T , xram_ack_T , xram_data_in_T , ack , data_out , in_addr_range , xram_addr , xram_data_out , xram_stb , xram_wr , ack_T , data_out_T , in_addr_range_T , xram_addr_T , xram_data_out_T , xram_stb_T , xram_wr_T );
  logic rst_zy;
  integer i;
  input INSTR_IN_ZY;
  input [40:0] YZC;
  logic [15:0] _000_;
  logic [15:0] _000__T ;
  logic [5:0] _001_;
  logic [5:0] _001__T ;
  logic [15:0] _002_;
  logic [15:0] _002__T ;
  logic [511:0] _003_;
  logic [511:0] _003__T ;
  logic _004_;
  logic _004__T ;
  logic [159:0] _005_;
  logic [159:0] _005__T ;
  logic [2:0] _006_;
  logic [2:0] _006__T ;
  logic [5:0] _007_;
  logic [5:0] _007__T ;
  logic [15:0] _008_;
  logic [15:0] _008__T ;
  logic [15:0] _009_;
  logic [15:0] _009__T ;
  logic [15:0] _010_;
  logic [15:0] _010__T ;
  logic [15:0] _011_;
  logic [15:0] _011__T ;
  logic [15:0] _012_;
  logic [15:0] _012__T ;
  logic [31:0] _013_;
  logic [31:0] _013__T ;
  logic [159:0] _014_;
  logic [159:0] _014__T ;
  logic _015_;
  logic _015__T ;
  logic _016_;
  logic _016__T ;
  logic _017_;
  logic _017__T ;
  logic _018_;
  logic _018__T ;
  logic _019_;
  logic _019__T ;
  logic _020_;
  logic _020__T ;
  logic _021_;
  logic _021__T ;
  logic _022_;
  logic _022__T ;
  logic _023_;
  logic _023__T ;
  logic _024_;
  logic _024__T ;
  logic _025_;
  logic _025__T ;
  logic _026_;
  logic _026__T ;
  logic _027_;
  logic _027__T ;
  logic _028_;
  logic _028__T ;
  logic _029_;
  logic _029__T ;
  logic _030_;
  logic _030__T ;
  logic _031_;
  logic _031__T ;
  logic _032_;
  logic _032__T ;
  logic _033_;
  logic _033__T ;
  logic _034_;
  logic _034__T ;
  logic _035_;
  logic _035__T ;
  logic _036_;
  logic _036__T ;
  logic _037_;
  logic _037__T ;
  logic _038_;
  logic _038__T ;
  logic _039_;
  logic _039__T ;
  logic _040_;
  logic _040__T ;
  logic _041_;
  logic _041__T ;
  logic _042_;
  logic _042__T ;
  logic _043_;
  logic _043__T ;
  logic _044_;
  logic _044__T ;
  logic _045_;
  logic _045__T ;
  logic _046_;
  logic _046__T ;
  logic _047_;
  logic _047__T ;
  logic _048_;
  logic _048__T ;
  logic _049_;
  logic _049__T ;
  logic _050_;
  logic _050__T ;
  logic _051_;
  logic _051__T ;
  logic _052_;
  logic _052__T ;
  logic _053_;
  logic _053__T ;
  logic _054_;
  logic _054__T ;
  logic _055_;
  logic _055__T ;
  logic _056_;
  logic _056__T ;
  logic _057_;
  logic _057__T ;
  logic _058_;
  logic _058__T ;
  logic _059_;
  logic _059__T ;
  logic _060_;
  logic _060__T ;
  logic _061_;
  logic _061__T ;
  logic _062_;
  logic _062__T ;
  logic _063_;
  logic _063__T ;
  logic _064_;
  logic _064__T ;
  logic _065_;
  logic _065__T ;
  logic _066_;
  logic _066__T ;
  logic _067_;
  logic _067__T ;
  logic _068_;
  logic _068__T ;
  logic _069_;
  logic _069__T ;
  logic _070_;
  logic _070__T ;
  logic _071_;
  logic _071__T ;
  logic _072_;
  logic _072__T ;
  logic _073_;
  logic _073__T ;
  logic _074_;
  logic _074__T ;
  logic _075_;
  logic _075__T ;
  logic _076_;
  logic _076__T ;
  logic _077_;
  logic _077__T ;
  logic _078_;
  logic _078__T ;
  logic _079_;
  logic _079__T ;
  logic _080_;
  logic _080__T ;
  logic _081_;
  logic _081__T ;
  logic _082_;
  logic _082__T ;
  logic _083_;
  logic _083__T ;
  logic _084_;
  logic _084__T ;
  logic _085_;
  logic _085__T ;
  logic _086_;
  logic _086__T ;
  logic _087_;
  logic _087__T ;
  logic _088_;
  logic _088__T ;
  logic _089_;
  logic _089__T ;
  logic _090_;
  logic _090__T ;
  logic _091_;
  logic _091__T ;
  logic _092_;
  logic _092__T ;
  logic _093_;
  logic _093__T ;
  logic _094_;
  logic _094__T ;
  logic [2:0] _095_;
  logic [2:0] _095__T ;
  logic [2:0] _096_;
  logic [2:0] _096__T ;
  logic [2:0] _097_;
  logic [2:0] _097__T ;
  logic [2:0] _098_;
  logic [2:0] _098__T ;
  logic [2:0] _099_;
  logic [2:0] _099__T ;
  logic [5:0] _100_;
  logic [5:0] _100__T ;
  logic [5:0] _101_;
  logic [5:0] _101__T ;
  logic [31:0] _102_;
  logic [31:0] _102__T ;
  logic [511:0] _103_;
  logic [511:0] _103__T ;
  logic [7:0] _104_;
  logic [7:0] _104__T ;
  logic [7:0] _105_;
  logic [7:0] _105__T ;
  logic [7:0] _106_;
  logic [7:0] _106__T ;
  logic [15:0] _107_;
  logic [15:0] _107__T ;
  logic [7:0] _108_;
  logic [7:0] _108__T ;
  logic [7:0] _109_;
  logic [7:0] _109__T ;
  logic [7:0] _110_;
  logic [7:0] _110__T ;
  logic [7:0] _111_;
  logic [7:0] _111__T ;
  logic [7:0] _112_;
  logic [7:0] _112__T ;
  logic [7:0] _113_;
  logic [7:0] _113__T ;
  logic [7:0] _114_;
  logic [7:0] _114__T ;
  logic [7:0] _115_;
  logic [7:0] _115__T ;
  logic [7:0] _116_;
  logic [7:0] _116__T ;
  logic [7:0] _117_;
  logic [7:0] _117__T ;
  logic [7:0] _118_;
  logic [7:0] _118__T ;
  logic [7:0] _119_;
  logic [7:0] _119__T ;
  logic [7:0] _120_;
  logic [7:0] _120__T ;
  logic [7:0] _121_;
  logic [7:0] _121__T ;
  logic [7:0] _122_;
  logic [7:0] _122__T ;
  logic [7:0] _123_;
  logic [7:0] _123__T ;
  logic [7:0] _124_;
  logic [7:0] _124__T ;
  logic [7:0] _125_;
  logic [7:0] _125__T ;
  logic [7:0] _126_;
  logic [7:0] _126__T ;
  output ack;
  logic ack ;
  output ack_T ;
  logic ack_T ;
  input [15:0] addr;
  input [15:0] addr_T ;
  logic [15:0] block_counter;
  logic [15:0]  block_counter_T ;
  logic [15:0]  block_counter_TZ ;
  logic [15:0]  block_counter_PREV_VAL1 ;
  logic [15:0]  block_counter_PREV_VAL2 ;
  assign block_counter_T = block_counter_TZ | { 16{ YZC[0] && block_counter != 0 }} ;
  logic [15:0] block_counter_next;
  logic [15:0] block_counter_next_T ;
  logic [5:0] byte_counter;
  logic [5:0]  byte_counter_T ;
  logic [5:0]  byte_counter_TZ ;
  logic [5:0]  byte_counter_PREV_VAL1 ;
  logic [5:0]  byte_counter_PREV_VAL2 ;
  assign byte_counter_T = byte_counter_TZ | { 6{ YZC[1] && byte_counter != 0 }} ;
  logic [5:0] byte_counter_next;
  logic [5:0] byte_counter_next_T ;
  logic [5:0] byte_counter_next_rw;
  logic [5:0] byte_counter_next_rw_T ;
  logic [15:0] bytes_read_next;
  logic [15:0] bytes_read_next_T ;
  input clk;
  input [7:0] data_in;
  input [7:0] data_in_T ;
  output [7:0] data_out;
  logic [7:0] data_out ;
  output [7:0] data_out_T ;
  logic [7:0] data_out_T ;
  logic [7:0] data_out_len;
  logic [7:0] data_out_len_T ;
  logic [7:0] data_out_rd_addr;
  logic [7:0] data_out_rd_addr_T ;
  logic [7:0] data_out_state;
  logic [7:0] data_out_state_T ;
  logic [7:0] data_out_wr_addr;
  logic [7:0] data_out_wr_addr_T ;
  output in_addr_range;
  logic in_addr_range ;
  output in_addr_range_T ;
  logic in_addr_range_T ;
  logic read_last_byte_acked;
  logic read_last_byte_acked_T ;
  logic reading_last_byte;
  logic reading_last_byte_T ;
  logic [15:0] reg_bytes_read;
  logic [15:0]  reg_bytes_read_T ;
  logic [15:0]  reg_bytes_read_TZ ;
  logic [15:0]  reg_bytes_read_PREV_VAL1 ;
  logic [15:0]  reg_bytes_read_PREV_VAL2 ;
  assign reg_bytes_read_T = reg_bytes_read_TZ | { 16{ YZC[2] && reg_bytes_read != 0 }} ;
  input rst;
  input rst_T ;
  logic sel_reg_len;
  logic sel_reg_len_T ;
  logic sel_reg_rd_addr;
  logic sel_reg_rd_addr_T ;
  logic sel_reg_start;
  logic sel_reg_start_T ;
  logic sel_reg_state;
  logic sel_reg_state_T ;
  logic sel_reg_wr_addr;
  logic sel_reg_wr_addr_T ;
  logic [511:0] sha_core_block;
  logic [511:0]  sha_core_block_T ;
  logic [511:0]  sha_core_block_TZ ;
  logic [511:0]  sha_core_block_PREV_VAL1 ;
  logic [511:0]  sha_core_block_PREV_VAL2 ;
  assign sha_core_block_T = sha_core_block_TZ | { 512{ YZC[3] && sha_core_block != 0 }} ;
  logic [511:0] sha_core_block_next;
  logic [511:0] sha_core_block_next_T ;
  logic [511:0] sha_core_block_read_data_next;
  logic [511:0] sha_core_block_read_data_next_T ;
  logic [159:0] sha_core_digest;
  logic [159:0] sha_core_digest_T ;
  logic sha_core_digest_valid;
  logic sha_core_digest_valid_T ;
  logic sha_core_init;
  logic sha_core_init_T ;
  logic sha_core_next;
  logic sha_core_next_T ;
  logic sha_core_ready;
  logic sha_core_ready_T ;
  logic sha_core_ready_r;
  logic  sha_core_ready_r_T ;
  logic  sha_core_ready_r_TZ ;
  logic  sha_core_ready_r_PREV_VAL1 ;
  logic  sha_core_ready_r_PREV_VAL2 ;
  assign sha_core_ready_r_T = sha_core_ready_r_TZ | { 1{ YZC[4] && sha_core_ready_r != 0 }} ;
  logic sha_core_rst_n;
  logic sha_core_rst_n_T ;
  logic sha_finished;
  logic sha_finished_T ;
  logic [15:0] sha_len;
  logic [15:0] sha_len_T ;
  logic sha_more_blocks;
  logic sha_more_blocks_T ;
  logic [15:0] sha_rdaddr;
  logic [15:0] sha_rdaddr_T ;
  logic [159:0] sha_reg_digest;
  logic [159:0]  sha_reg_digest_T ;
  logic [159:0]  sha_reg_digest_TZ ;
  logic [159:0]  sha_reg_digest_PREV_VAL1 ;
  logic [159:0]  sha_reg_digest_PREV_VAL2 ;
  assign sha_reg_digest_T = sha_reg_digest_TZ | { 160{ YZC[5] && sha_reg_digest != 0 }} ;
  logic [67:0] sha_reg_digest_next;
  logic [67:0] sha_reg_digest_next_T ;
  logic [15:0] sha_reg_len;
  logic [15:0] sha_reg_len_T ;
  logic [15:0] sha_reg_rd_addr;
  logic [15:0] sha_reg_rd_addr_T ;
  logic [2:0] sha_reg_state;
  logic [2:0]  sha_reg_state_T ;
  logic [2:0]  sha_reg_state_TZ ;
  logic [2:0]  sha_reg_state_PREV_VAL1 ;
  logic [2:0]  sha_reg_state_PREV_VAL2 ;
  assign sha_reg_state_T = sha_reg_state_TZ | { 3{ YZC[6] && sha_reg_state != 0 }} ;
  logic [15:0] sha_reg_wr_addr;
  logic [15:0] sha_reg_wr_addr_T ;
  logic [2:0] sha_state;
  logic [2:0] sha_state_T ;
  logic sha_state_idle;
  logic sha_state_idle_T ;
  logic [2:0] sha_state_next;
  logic [2:0] sha_state_next_T ;
  logic sha_state_next_idle;
  logic sha_state_next_idle_T ;
  logic [2:0] sha_state_next_op2;
  logic [2:0] sha_state_next_op2_T ;
  logic [1:0] sha_state_next_read_data;
  logic [1:0] sha_state_next_read_data_T ;
  logic [2:0] sha_state_next_write_data;
  logic [2:0] sha_state_next_write_data_T ;
  logic sha_state_op1;
  logic sha_state_op1_T ;
  logic sha_state_op2;
  logic sha_state_op2_T ;
  logic sha_state_read_data;
  logic sha_state_read_data_T ;
  logic sha_state_write_data;
  logic sha_state_write_data_T ;
  logic [15:0] sha_wraddr;
  logic [15:0] sha_wraddr_T ;
  logic start_op;
  logic start_op_T ;
  input stb;
  input stb_T ;
  input wr;
  input wr_T ;
  logic wren;
  logic wren_T ;
  logic write_last_byte_acked;
  logic write_last_byte_acked_T ;
  logic writing_last_byte;
  logic writing_last_byte_T ;
  input xram_ack;
  input xram_ack_T ;
  output [15:0] xram_addr;
  logic [15:0] xram_addr ;
  output [15:0] xram_addr_T ;
  logic [15:0] xram_addr_T ;
  input [7:0] xram_data_in;
  input [7:0] xram_data_in_T ;
  output [7:0] xram_data_out;
  logic [7:0] xram_data_out ;
  output [7:0] xram_data_out_T ;
  logic [7:0] xram_data_out_T ;
  output xram_stb;
  logic xram_stb ;
  output xram_stb_T ;
  logic xram_stb_T ;
  output xram_wr;
  logic xram_wr ;
  output xram_wr_T ;
  logic xram_wr_T ;
  assign _007_ = byte_counter + 1'b1;
  assign _007__T = byte_counter_T ;
  assign _008_ = reg_bytes_read + 1'b1;
  assign _008__T = reg_bytes_read_T ;
  assign _009_ = block_counter + 7'b1000000;
  assign _009__T = block_counter_T ;
  assign _010_ = sha_reg_rd_addr + byte_counter;
  assign _010__T = sha_reg_rd_addr_T | byte_counter_T ;
  assign _011_ = _010_ + block_counter;
  assign _011__T = _010__T | block_counter_T ;
  assign _012_ = sha_reg_wr_addr + byte_counter;
  assign _012__T = sha_reg_wr_addr_T | byte_counter_T ;
  assign _015_ = byte_counter == 6'b111111;
  assign _015__T = (| byte_counter_T ) & ( byte_counter == 6'b111111 ) ;
  assign _016_ = bytes_read_next == sha_reg_len;
  assign _016__T = ((| bytes_read_next_T ) | (|sha_reg_len_T )) & ( bytes_read_next == sha_reg_len ) ;
  assign _017_ = byte_counter == 6'b111110;
  assign _017__T = (| byte_counter_T ) & ( byte_counter == 6'b111110 ) ;
  assign _018_ = byte_counter == 6'b111101;
  assign _018__T = (| byte_counter_T ) & ( byte_counter == 6'b111101 ) ;
  assign _019_ = byte_counter == 6'b111100;
  assign _019__T = (| byte_counter_T ) & ( byte_counter == 6'b111100 ) ;
  assign _020_ = byte_counter == 6'b111011;
  assign _020__T = (| byte_counter_T ) & ( byte_counter == 6'b111011 ) ;
  assign _021_ = byte_counter == 6'b111010;
  assign _021__T = (| byte_counter_T ) & ( byte_counter == 6'b111010 ) ;
  assign _022_ = byte_counter == 6'b111001;
  assign _022__T = (| byte_counter_T ) & ( byte_counter == 6'b111001 ) ;
  assign _023_ = byte_counter == 6'b111000;
  assign _023__T = (| byte_counter_T ) & ( byte_counter == 6'b111000 ) ;
  assign _024_ = byte_counter == 6'b110111;
  assign _024__T = (| byte_counter_T ) & ( byte_counter == 6'b110111 ) ;
  assign _025_ = byte_counter == 6'b110110;
  assign _025__T = (| byte_counter_T ) & ( byte_counter == 6'b110110 ) ;
  assign _026_ = byte_counter == 6'b110101;
  assign _026__T = (| byte_counter_T ) & ( byte_counter == 6'b110101 ) ;
  assign _027_ = byte_counter == 6'b110100;
  assign _027__T = (| byte_counter_T ) & ( byte_counter == 6'b110100 ) ;
  assign _028_ = byte_counter == 6'b110011;
  assign _028__T = (| byte_counter_T ) & ( byte_counter == 6'b110011 ) ;
  assign _029_ = byte_counter == 6'b110010;
  assign _029__T = (| byte_counter_T ) & ( byte_counter == 6'b110010 ) ;
  assign _030_ = byte_counter == 6'b110001;
  assign _030__T = (| byte_counter_T ) & ( byte_counter == 6'b110001 ) ;
  assign _031_ = byte_counter == 6'b110000;
  assign _031__T = (| byte_counter_T ) & ( byte_counter == 6'b110000 ) ;
  assign _032_ = byte_counter == 6'b101111;
  assign _032__T = (| byte_counter_T ) & ( byte_counter == 6'b101111 ) ;
  assign _033_ = byte_counter == 6'b101110;
  assign _033__T = (| byte_counter_T ) & ( byte_counter == 6'b101110 ) ;
  assign _034_ = byte_counter == 6'b101101;
  assign _034__T = (| byte_counter_T ) & ( byte_counter == 6'b101101 ) ;
  assign _035_ = byte_counter == 6'b101100;
  assign _035__T = (| byte_counter_T ) & ( byte_counter == 6'b101100 ) ;
  assign _036_ = byte_counter == 6'b101011;
  assign _036__T = (| byte_counter_T ) & ( byte_counter == 6'b101011 ) ;
  assign _037_ = byte_counter == 6'b101010;
  assign _037__T = (| byte_counter_T ) & ( byte_counter == 6'b101010 ) ;
  assign _038_ = byte_counter == 6'b101001;
  assign _038__T = (| byte_counter_T ) & ( byte_counter == 6'b101001 ) ;
  assign _039_ = byte_counter == 6'b101000;
  assign _039__T = (| byte_counter_T ) & ( byte_counter == 6'b101000 ) ;
  assign _040_ = byte_counter == 6'b100111;
  assign _040__T = (| byte_counter_T ) & ( byte_counter == 6'b100111 ) ;
  assign _041_ = byte_counter == 6'b100110;
  assign _041__T = (| byte_counter_T ) & ( byte_counter == 6'b100110 ) ;
  assign _042_ = byte_counter == 6'b100101;
  assign _042__T = (| byte_counter_T ) & ( byte_counter == 6'b100101 ) ;
  assign _043_ = byte_counter == 6'b100100;
  assign _043__T = (| byte_counter_T ) & ( byte_counter == 6'b100100 ) ;
  assign _044_ = byte_counter == 6'b100011;
  assign _044__T = (| byte_counter_T ) & ( byte_counter == 6'b100011 ) ;
  assign _045_ = byte_counter == 6'b100010;
  assign _045__T = (| byte_counter_T ) & ( byte_counter == 6'b100010 ) ;
  assign _046_ = byte_counter == 6'b100001;
  assign _046__T = (| byte_counter_T ) & ( byte_counter == 6'b100001 ) ;
  assign _047_ = byte_counter == 6'b100000;
  assign _047__T = (| byte_counter_T ) & ( byte_counter == 6'b100000 ) ;
  assign _048_ = byte_counter == 5'b11111;
  assign _048__T = (| byte_counter_T ) & ( byte_counter == 5'b11111 ) ;
  assign _049_ = byte_counter == 5'b11110;
  assign _049__T = (| byte_counter_T ) & ( byte_counter == 5'b11110 ) ;
  assign _050_ = byte_counter == 5'b11101;
  assign _050__T = (| byte_counter_T ) & ( byte_counter == 5'b11101 ) ;
  assign _051_ = byte_counter == 5'b11100;
  assign _051__T = (| byte_counter_T ) & ( byte_counter == 5'b11100 ) ;
  assign _052_ = byte_counter == 5'b11011;
  assign _052__T = (| byte_counter_T ) & ( byte_counter == 5'b11011 ) ;
  assign _053_ = byte_counter == 5'b11010;
  assign _053__T = (| byte_counter_T ) & ( byte_counter == 5'b11010 ) ;
  assign _054_ = byte_counter == 5'b11001;
  assign _054__T = (| byte_counter_T ) & ( byte_counter == 5'b11001 ) ;
  assign _055_ = byte_counter == 5'b11000;
  assign _055__T = (| byte_counter_T ) & ( byte_counter == 5'b11000 ) ;
  assign _056_ = byte_counter == 5'b10111;
  assign _056__T = (| byte_counter_T ) & ( byte_counter == 5'b10111 ) ;
  assign _057_ = byte_counter == 5'b10110;
  assign _057__T = (| byte_counter_T ) & ( byte_counter == 5'b10110 ) ;
  assign _058_ = byte_counter == 5'b10101;
  assign _058__T = (| byte_counter_T ) & ( byte_counter == 5'b10101 ) ;
  assign _059_ = byte_counter == 5'b10100;
  assign _059__T = (| byte_counter_T ) & ( byte_counter == 5'b10100 ) ;
  assign writing_last_byte = byte_counter == 5'b10011;
  assign writing_last_byte_T = (| byte_counter_T ) & ( byte_counter == 5'b10011 ) ;
  assign _060_ = byte_counter == 5'b10010;
  assign _060__T = (| byte_counter_T ) & ( byte_counter == 5'b10010 ) ;
  assign _061_ = byte_counter == 5'b10001;
  assign _061__T = (| byte_counter_T ) & ( byte_counter == 5'b10001 ) ;
  assign _062_ = byte_counter == 5'b10000;
  assign _062__T = (| byte_counter_T ) & ( byte_counter == 5'b10000 ) ;
  assign _063_ = byte_counter == 4'b1111;
  assign _063__T = (| byte_counter_T ) & ( byte_counter == 4'b1111 ) ;
  assign _064_ = byte_counter == 4'b1110;
  assign _064__T = (| byte_counter_T ) & ( byte_counter == 4'b1110 ) ;
  assign _065_ = byte_counter == 4'b1101;
  assign _065__T = (| byte_counter_T ) & ( byte_counter == 4'b1101 ) ;
  assign _066_ = byte_counter == 4'b1100;
  assign _066__T = (| byte_counter_T ) & ( byte_counter == 4'b1100 ) ;
  assign _067_ = byte_counter == 4'b1011;
  assign _067__T = (| byte_counter_T ) & ( byte_counter == 4'b1011 ) ;
  assign _068_ = byte_counter == 4'b1010;
  assign _068__T = (| byte_counter_T ) & ( byte_counter == 4'b1010 ) ;
  assign _069_ = byte_counter == 4'b1001;
  assign _069__T = (| byte_counter_T ) & ( byte_counter == 4'b1001 ) ;
  assign _070_ = byte_counter == 4'b1000;
  assign _070__T = (| byte_counter_T ) & ( byte_counter == 4'b1000 ) ;
  assign _071_ = byte_counter == 3'b111;
  assign _071__T = (| byte_counter_T ) & ( byte_counter == 3'b111 ) ;
  assign _072_ = byte_counter == 3'b110;
  assign _072__T = (| byte_counter_T ) & ( byte_counter == 3'b110 ) ;
  assign _073_ = byte_counter == 3'b101;
  assign _073__T = (| byte_counter_T ) & ( byte_counter == 3'b101 ) ;
  assign _074_ = byte_counter == 3'b100;
  assign _074__T = (| byte_counter_T ) & ( byte_counter == 3'b100 ) ;
  assign _075_ = byte_counter == 2'b11;
  assign _075__T = (| byte_counter_T ) & ( byte_counter == 2'b11 ) ;
  assign _076_ = byte_counter == 2'b10;
  assign _076__T = (| byte_counter_T ) & ( byte_counter == 2'b10 ) ;
  assign _077_ = byte_counter == 1'b1;
  assign _077__T = (| byte_counter_T ) & ( byte_counter == 1'b1 ) ;
  assign _078_ = ! byte_counter;
  assign _078__T = | byte_counter_T ;
  assign _079_ = ! block_counter;
  assign _079__T = | block_counter_T ;
  assign sha_state_idle = ! sha_reg_state;
  assign sha_state_idle_T = | sha_reg_state_T ;
  assign sha_state_read_data = sha_reg_state == 1'b1;
  assign sha_state_read_data_T = (| sha_reg_state_T ) & ( sha_reg_state == 1'b1 ) ;
  assign sha_state_op1 = sha_reg_state == 2'b10;
  assign sha_state_op1_T = (| sha_reg_state_T ) & ( sha_reg_state == 2'b10 ) ;
  assign sha_state_op2 = sha_reg_state == 2'b11;
  assign sha_state_op2_T = (| sha_reg_state_T ) & ( sha_reg_state == 2'b11 ) ;
  assign sha_state_write_data = sha_reg_state == 3'b100;
  assign sha_state_write_data_T = (| sha_reg_state_T ) & ( sha_reg_state == 3'b100 ) ;
  assign sel_reg_start = addr == 16'b1111111000000000;
  assign sel_reg_start_T = (| addr_T ) & ( addr == 16'b1111111000000000 ) ;
  assign sel_reg_state = addr == 16'b1111111000000001;
  assign sel_reg_state_T = (| addr_T ) & ( addr == 16'b1111111000000001 ) ;
  assign sel_reg_rd_addr = addr[15:1] == 15'b111111100000001;
  assign sel_reg_rd_addr_T = (| addr_T [15:1] ) & ( addr[15:1] == 15'b111111100000001 ) ;
  assign sel_reg_wr_addr = addr[15:1] == 15'b111111100000010;
  assign sel_reg_wr_addr_T = (| addr_T [15:1] ) & ( addr[15:1] == 15'b111111100000010 ) ;
  assign sel_reg_len = addr[15:1] == 15'b111111100000011;
  assign sel_reg_len_T = (| addr_T [15:1] ) & ( addr[15:1] == 15'b111111100000011 ) ;
  assign _080_ = reg_bytes_read >= sha_reg_len;
  assign _080__T = (| reg_bytes_read_T ) | (|sha_reg_len_T ) ;
  assign _081_ = addr >= 16'b1111111000000000;
  assign _081__T = | addr_T ;
  assign _082_ = sel_reg_start && data_in[0];
  assign _082__T = ( sel_reg_start_T && data_in[0] ) | ( data_in_T [0] && sel_reg_start ) ;
  assign _083_ = _082_ && stb;
  assign _083__T = ( _082__T && stb ) | ( stb_T && _082_ ) ;
  assign start_op = _083_ && wren;
  assign start_op_T = ( _083__T && wren ) | ( wren_T && _083_ ) ;
  assign _084_ = sha_state_read_data && xram_ack;
  assign _084__T = ( sha_state_read_data_T && xram_ack ) | ( xram_ack_T && sha_state_read_data ) ;
  assign _085_ = sha_state_op2 && sha_more_blocks;
  assign _085__T = ( sha_state_op2_T && sha_more_blocks ) | ( sha_more_blocks_T && sha_state_op2 ) ;
  assign read_last_byte_acked = reading_last_byte && xram_ack;
  assign read_last_byte_acked_T = ( reading_last_byte_T && xram_ack ) | ( xram_ack_T && reading_last_byte ) ;
  assign sha_more_blocks = sha_core_digest_valid && _092_;
  assign sha_more_blocks_T = ( sha_core_digest_valid_T && _092_ ) | ( _092__T && sha_core_digest_valid ) ;
  assign sha_finished = sha_core_digest_valid && _080_;
  assign sha_finished_T = ( sha_core_digest_valid_T && _080_ ) | ( _080__T && sha_core_digest_valid ) ;
  assign write_last_byte_acked = writing_last_byte && xram_ack;
  assign write_last_byte_acked_T = ( writing_last_byte_T && xram_ack ) | ( xram_ack_T && writing_last_byte ) ;
  assign _086_ = sel_reg_rd_addr && wren;
  assign _086__T = ( sel_reg_rd_addr_T && wren ) | ( wren_T && sel_reg_rd_addr ) ;
  assign _087_ = sel_reg_wr_addr && wren;
  assign _087__T = ( sel_reg_wr_addr_T && wren ) | ( wren_T && sel_reg_wr_addr ) ;
  assign _088_ = sel_reg_len && wren;
  assign _088__T = ( sel_reg_len_T && wren ) | ( wren_T && sel_reg_len ) ;
  assign _089_ = sha_state_op1 && sha_core_ready_r;
  assign _089__T = ( sha_state_op1_T && sha_core_ready_r ) | ( sha_core_ready_r_T && sha_state_op1 ) ;
  assign sha_core_init = _089_ && _079_;
  assign sha_core_init_T = ( _089__T && _079_ ) | ( _079__T && _089_ ) ;
  assign sha_core_next = _089_ && _094_;
  assign sha_core_next_T = ( _089__T && _094_ ) | ( _094__T && _089_ ) ;
  assign in_addr_range = _081_ && _093_;
  assign in_addr_range_T = ( _081__T && _093_ ) | ( _093__T && _081_ ) ;
  assign ack = stb && in_addr_range;
  assign ack_T = ( stb_T && in_addr_range ) | ( in_addr_range_T && stb ) ;
  assign wren = wr && sha_state_idle;
  assign wren_T = ( wr_T && sha_state_idle ) | ( sha_state_idle_T && wr ) ;
  assign sha_core_rst_n = ! rst;
  assign sha_core_rst_n_T = | rst_T ;
  assign _090_ = sha_state_idle || sha_state_op1;
  assign _090__T = ( sha_state_idle_T && sha_state_op1 != 1 ) | ( sha_state_op1_T && sha_state_idle != 1 ) ;
  assign _091_ = _090_ || sha_state_op2;
  assign _091__T = ( _090__T && sha_state_op2 != 1 ) | ( sha_state_op2_T && _090_ != 1 ) ;
  assign reading_last_byte = _015_ || _016_;
  assign reading_last_byte_T = ( _015__T && _016_ != 1 ) | ( _016__T && _015_ != 1 ) ;
  assign xram_stb = sha_state_read_data || sha_state_write_data;
  assign xram_stb_T = ( sha_state_read_data_T && sha_state_write_data != 1 ) | ( sha_state_write_data_T && sha_state_read_data != 1 ) ;
  assign _092_ = reg_bytes_read < sha_reg_len;
  assign _092__T = (| reg_bytes_read_T ) | (|sha_reg_len_T ) ;
  assign _093_ = addr < 16'b1111111000010000;
  assign _093__T = | addr_T ;
  assign _094_ = | block_counter;
  assign _094__T = | block_counter_T ;
  always @(posedge clk)
      sha_reg_state <= _006_;
  always @( posedge clk )
      sha_reg_state_TZ 		<= rst ? 0 : ( _006__T );
  always @(posedge clk)
      byte_counter <= _001_;
  always @( posedge clk )
      byte_counter_TZ 		<= rst ? 0 : ( _001__T );
  always @(posedge clk)
      reg_bytes_read <= _002_;
  always @( posedge clk )
      reg_bytes_read_TZ 		<= rst ? 0 : ( _002__T );
  always @(posedge clk)
      block_counter <= _000_;
  always @( posedge clk )
      block_counter_TZ 		<= rst ? 0 : ( _000__T );
  always @(posedge clk)
      sha_core_ready_r <= _004_;
  always @( posedge clk )
      sha_core_ready_r_TZ 		<= rst ? 0 : ( _004__T );
  always @(posedge clk)
      sha_core_block <= _003_;
  always @( posedge clk )
      sha_core_block_TZ 		<= rst ? 0 : ( _003__T );
  always @(posedge clk)
      sha_reg_digest <= _005_;
  always @( posedge clk )
      sha_reg_digest_TZ 		<= rst ? 0 : ( _005__T );
  logic [159:0] fangyuan0;
  logic [159:0] fangyuan0_T ;
  assign fangyuan0 = { _014_[159:68], sha_reg_digest_next };
  assign fangyuan0_T = {  _014__T [159:68] , sha_reg_digest_next_T  };
  assign _005_ = rst ? 160'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : fangyuan0;
  assign _005__T = rst ? { 160{ | rst_T  }} : ( { 160{ | rst_T  }} | fangyuan0_T );
  assign _003_ = rst ? 512'bsha_core_block_next;
  assign _003__T = rst ? { 512{ | rst_T  }} : ( { 512{ | rst_T  }} | sha_core_block_next_T );
  assign _004_ = rst ? 1'b0 : sha_core_ready;
  assign _004__T = rst ? { 1{ | rst_T  }} : ( { 1{ | rst_T  }} | sha_core_ready_T );
  assign _000_ = rst ? 16'b0000000000000000 : block_counter_next;
  assign _000__T = rst ? { 16{ | rst_T  }} : ( { 16{ | rst_T  }} | block_counter_next_T );
  assign _002_ = rst ? 16'b0000000000000000 : bytes_read_next;
  assign _002__T = rst ? { 16{ | rst_T  }} : ( { 16{ | rst_T  }} | bytes_read_next_T );
  assign _001_ = rst ? 6'b000000 : byte_counter_next;
  assign _001__T = rst ? { 6{ | rst_T  }} : ( { 6{ | rst_T  }} | byte_counter_next_T );
  assign _006_ = rst ? 3'b000 : sha_state_next;
  assign _006__T = rst ? { 3{ | rst_T  }} : ( { 3{ | rst_T  }} | sha_state_next_T );
  assign _095_ = sha_state_write_data ? sha_state_next_write_data : 3'b000;
  assign _095__T = sha_state_write_data ? ( { 3{ | sha_state_write_data_T  }} | sha_state_next_write_data_T ) : { 3{ | sha_state_write_data_T  }};
  assign _096_ = sha_state_op2 ? sha_state_next_op2 : _095_;
  assign _096__T = sha_state_op2 ? ( { 3{ sha_state_op2_T  }} | sha_state_next_op2_T ) : ( { 3{ sha_state_op2_T  }} | _095__T );
  assign _097_ = sha_state_op1 ? 3'b011 : _096_;
  assign _097__T = sha_state_op1 ? { 3{ | sha_state_op1_T  }} : ( { 3{ | sha_state_op1_T  }} | _096__T );
  logic [2:0] fangyuan1;
  logic [2:0] fangyuan1_T ;
  assign fangyuan1 = { 1'b0, sha_state_next_read_data };
  assign fangyuan1_T = {  1'h0 , sha_state_next_read_data_T  };
  assign _098_ = sha_state_read_data ? fangyuan1 : _097_;
  assign _098__T = sha_state_read_data ? ( { 3{ sha_state_read_data_T  }} | fangyuan1_T ) : ( { 3{ sha_state_read_data_T  }} | _097__T );
  logic [2:0] fangyuan2;
  logic [2:0] fangyuan2_T ;
  assign fangyuan2 = { 2'b00, start_op };
  assign fangyuan2_T = {  2'h0 , start_op_T  };
  assign sha_state_next = sha_state_idle ? fangyuan2 : _098_;
  assign sha_state_next_T = sha_state_idle ? ( { 3{ sha_state_idle_T  }} | fangyuan2_T ) : ( { 3{ sha_state_idle_T  }} | _098__T );
  assign sha_state_next_read_data = read_last_byte_acked ? 2'b10 : 2'b01;
  assign sha_state_next_read_data_T = { 2{ read_last_byte_acked_T  }} ;
  assign _099_[1:0] = sha_more_blocks ? 2'b01 : 2'b11;
  assign _099__T [1:0] = { 2{ sha_more_blocks_T  }} ;
  logic [2:0] fangyuan3;
  logic [2:0] fangyuan3_T ;
  assign fangyuan3 = { 1'b0, _099_[1:0] };
  assign fangyuan3_T = {  1'h0 , _099__T [1:0]  };
  assign sha_state_next_op2 = sha_finished ? 3'b100 : fangyuan3;
  assign sha_state_next_op2_T = sha_finished ? { 3{ | sha_finished_T  }} : ( { 3{ | sha_finished_T  }} | fangyuan3_T );
  assign sha_state_next_write_data = write_last_byte_acked ? 3'b000 : 3'b100;
  assign sha_state_next_write_data_T = { 3{ write_last_byte_acked_T  }} ;
  assign byte_counter_next_rw = xram_ack ? _007_ : byte_counter;
  assign byte_counter_next_rw_T = xram_ack ? ( { 6{ xram_ack_T  }} | _007__T ) : ( { 6{ xram_ack_T  }} | byte_counter_T );
  assign _100_ = sha_state_write_data ? byte_counter_next_rw : byte_counter;
  assign _100__T = sha_state_write_data ? ( { 6{ sha_state_write_data_T  }} | byte_counter_next_rw_T ) : ( { 6{ sha_state_write_data_T  }} | byte_counter_T );
  assign _101_ = sha_state_read_data ? byte_counter_next_rw : _100_;
  assign _101__T = sha_state_read_data ? ( { 6{ sha_state_read_data_T  }} | byte_counter_next_rw_T ) : ( { 6{ sha_state_read_data_T  }} | _100__T );
  assign byte_counter_next = _091_ ? 6'b000000 : _101_;
  assign byte_counter_next_T = _091_ ? { 6{ | _091__T  }} : ( { 6{ | _091__T  }} | _101__T );
  assign _102_[15:0] = _084_ ? _008_ : reg_bytes_read;
  assign _102__T [15:0] = _084_ ? ( { 16{ _084__T  }} | _008__T ) : ( { 16{ _084__T  }} | reg_bytes_read_T );
  assign bytes_read_next = sha_state_idle ? 16'b0000000000000000 : _102_[15:0];
  assign bytes_read_next_T = sha_state_idle ? { 16{ | sha_state_idle_T  }} : ( { 16{ | sha_state_idle_T  }} | _102__T [15:0] );
  assign _013_[15:0] = _085_ ? _009_ : block_counter;
  assign _013__T [15:0] = _085_ ? ( { 16{ _085__T  }} | _009__T ) : ( { 16{ _085__T  }} | block_counter_T );
  assign block_counter_next = sha_state_idle ? 16'b0000000000000000 : _013_[15:0];
  assign block_counter_next_T = sha_state_idle ? { 16{ | sha_state_idle_T  }} : ( { 16{ | sha_state_idle_T  }} | _013__T [15:0] );
  assign sha_core_block_read_data_next[7:0] = _015_ ? xram_data_in : sha_core_block[7:0];
  assign sha_core_block_read_data_next_T [7:0] = _015_ ? ( { 8{ _015__T  }} | xram_data_in_T ) : ( { 8{ _015__T  }} | sha_core_block_T [7:0] );
  assign sha_core_block_read_data_next[15:8] = _017_ ? xram_data_in : sha_core_block[15:8];
  assign sha_core_block_read_data_next_T [15:8] = _017_ ? ( { 8{ _017__T  }} | xram_data_in_T ) : ( { 8{ _017__T  }} | sha_core_block_T [15:8] );
  assign sha_core_block_read_data_next[23:16] = _018_ ? xram_data_in : sha_core_block[23:16];
  assign sha_core_block_read_data_next_T [23:16] = _018_ ? ( { 8{ _018__T  }} | xram_data_in_T ) : ( { 8{ _018__T  }} | sha_core_block_T [23:16] );
  assign sha_core_block_read_data_next[31:24] = _019_ ? xram_data_in : sha_core_block[31:24];
  assign sha_core_block_read_data_next_T [31:24] = _019_ ? ( { 8{ _019__T  }} | xram_data_in_T ) : ( { 8{ _019__T  }} | sha_core_block_T [31:24] );
  assign sha_core_block_read_data_next[39:32] = _020_ ? xram_data_in : sha_core_block[39:32];
  assign sha_core_block_read_data_next_T [39:32] = _020_ ? ( { 8{ _020__T  }} | xram_data_in_T ) : ( { 8{ _020__T  }} | sha_core_block_T [39:32] );
  assign sha_core_block_read_data_next[47:40] = _021_ ? xram_data_in : sha_core_block[47:40];
  assign sha_core_block_read_data_next_T [47:40] = _021_ ? ( { 8{ _021__T  }} | xram_data_in_T ) : ( { 8{ _021__T  }} | sha_core_block_T [47:40] );
  assign sha_core_block_read_data_next[55:48] = _022_ ? xram_data_in : sha_core_block[55:48];
  assign sha_core_block_read_data_next_T [55:48] = _022_ ? ( { 8{ _022__T  }} | xram_data_in_T ) : ( { 8{ _022__T  }} | sha_core_block_T [55:48] );
  assign sha_core_block_read_data_next[63:56] = _023_ ? xram_data_in : sha_core_block[63:56];
  assign sha_core_block_read_data_next_T [63:56] = _023_ ? ( { 8{ _023__T  }} | xram_data_in_T ) : ( { 8{ _023__T  }} | sha_core_block_T [63:56] );
  assign sha_core_block_read_data_next[71:64] = _024_ ? xram_data_in : sha_core_block[71:64];
  assign sha_core_block_read_data_next_T [71:64] = _024_ ? ( { 8{ _024__T  }} | xram_data_in_T ) : ( { 8{ _024__T  }} | sha_core_block_T [71:64] );
  assign sha_core_block_read_data_next[79:72] = _025_ ? xram_data_in : sha_core_block[79:72];
  assign sha_core_block_read_data_next_T [79:72] = _025_ ? ( { 8{ _025__T  }} | xram_data_in_T ) : ( { 8{ _025__T  }} | sha_core_block_T [79:72] );
  assign sha_core_block_read_data_next[87:80] = _026_ ? xram_data_in : sha_core_block[87:80];
  assign sha_core_block_read_data_next_T [87:80] = _026_ ? ( { 8{ _026__T  }} | xram_data_in_T ) : ( { 8{ _026__T  }} | sha_core_block_T [87:80] );
  assign sha_core_block_read_data_next[95:88] = _027_ ? xram_data_in : sha_core_block[95:88];
  assign sha_core_block_read_data_next_T [95:88] = _027_ ? ( { 8{ _027__T  }} | xram_data_in_T ) : ( { 8{ _027__T  }} | sha_core_block_T [95:88] );
  assign sha_core_block_read_data_next[103:96] = _028_ ? xram_data_in : sha_core_block[103:96];
  assign sha_core_block_read_data_next_T [103:96] = _028_ ? ( { 8{ _028__T  }} | xram_data_in_T ) : ( { 8{ _028__T  }} | sha_core_block_T [103:96] );
  assign sha_core_block_read_data_next[111:104] = _029_ ? xram_data_in : sha_core_block[111:104];
  assign sha_core_block_read_data_next_T [111:104] = _029_ ? ( { 8{ _029__T  }} | xram_data_in_T ) : ( { 8{ _029__T  }} | sha_core_block_T [111:104] );
  assign sha_core_block_read_data_next[119:112] = _030_ ? xram_data_in : sha_core_block[119:112];
  assign sha_core_block_read_data_next_T [119:112] = _030_ ? ( { 8{ _030__T  }} | xram_data_in_T ) : ( { 8{ _030__T  }} | sha_core_block_T [119:112] );
  assign sha_core_block_read_data_next[127:120] = _031_ ? xram_data_in : sha_core_block[127:120];
  assign sha_core_block_read_data_next_T [127:120] = _031_ ? ( { 8{ _031__T  }} | xram_data_in_T ) : ( { 8{ _031__T  }} | sha_core_block_T [127:120] );
  assign sha_core_block_read_data_next[135:128] = _032_ ? xram_data_in : sha_core_block[135:128];
  assign sha_core_block_read_data_next_T [135:128] = _032_ ? ( { 8{ _032__T  }} | xram_data_in_T ) : ( { 8{ _032__T  }} | sha_core_block_T [135:128] );
  assign sha_core_block_read_data_next[143:136] = _033_ ? xram_data_in : sha_core_block[143:136];
  assign sha_core_block_read_data_next_T [143:136] = _033_ ? ( { 8{ _033__T  }} | xram_data_in_T ) : ( { 8{ _033__T  }} | sha_core_block_T [143:136] );
  assign sha_core_block_read_data_next[151:144] = _034_ ? xram_data_in : sha_core_block[151:144];
  assign sha_core_block_read_data_next_T [151:144] = _034_ ? ( { 8{ _034__T  }} | xram_data_in_T ) : ( { 8{ _034__T  }} | sha_core_block_T [151:144] );
  assign sha_core_block_read_data_next[159:152] = _035_ ? xram_data_in : sha_core_block[159:152];
  assign sha_core_block_read_data_next_T [159:152] = _035_ ? ( { 8{ _035__T  }} | xram_data_in_T ) : ( { 8{ _035__T  }} | sha_core_block_T [159:152] );
  assign sha_core_block_read_data_next[167:160] = _036_ ? xram_data_in : sha_core_block[167:160];
  assign sha_core_block_read_data_next_T [167:160] = _036_ ? ( { 8{ _036__T  }} | xram_data_in_T ) : ( { 8{ _036__T  }} | sha_core_block_T [167:160] );
  assign sha_core_block_read_data_next[175:168] = _037_ ? xram_data_in : sha_core_block[175:168];
  assign sha_core_block_read_data_next_T [175:168] = _037_ ? ( { 8{ _037__T  }} | xram_data_in_T ) : ( { 8{ _037__T  }} | sha_core_block_T [175:168] );
  assign sha_core_block_read_data_next[183:176] = _038_ ? xram_data_in : sha_core_block[183:176];
  assign sha_core_block_read_data_next_T [183:176] = _038_ ? ( { 8{ _038__T  }} | xram_data_in_T ) : ( { 8{ _038__T  }} | sha_core_block_T [183:176] );
  assign sha_core_block_read_data_next[191:184] = _039_ ? xram_data_in : sha_core_block[191:184];
  assign sha_core_block_read_data_next_T [191:184] = _039_ ? ( { 8{ _039__T  }} | xram_data_in_T ) : ( { 8{ _039__T  }} | sha_core_block_T [191:184] );
  assign sha_core_block_read_data_next[199:192] = _040_ ? xram_data_in : sha_core_block[199:192];
  assign sha_core_block_read_data_next_T [199:192] = _040_ ? ( { 8{ _040__T  }} | xram_data_in_T ) : ( { 8{ _040__T  }} | sha_core_block_T [199:192] );
  assign sha_core_block_read_data_next[207:200] = _041_ ? xram_data_in : sha_core_block[207:200];
  assign sha_core_block_read_data_next_T [207:200] = _041_ ? ( { 8{ _041__T  }} | xram_data_in_T ) : ( { 8{ _041__T  }} | sha_core_block_T [207:200] );
  assign sha_core_block_read_data_next[215:208] = _042_ ? xram_data_in : sha_core_block[215:208];
  assign sha_core_block_read_data_next_T [215:208] = _042_ ? ( { 8{ _042__T  }} | xram_data_in_T ) : ( { 8{ _042__T  }} | sha_core_block_T [215:208] );
  assign sha_core_block_read_data_next[223:216] = _043_ ? xram_data_in : sha_core_block[223:216];
  assign sha_core_block_read_data_next_T [223:216] = _043_ ? ( { 8{ _043__T  }} | xram_data_in_T ) : ( { 8{ _043__T  }} | sha_core_block_T [223:216] );
  assign sha_core_block_read_data_next[231:224] = _044_ ? xram_data_in : sha_core_block[231:224];
  assign sha_core_block_read_data_next_T [231:224] = _044_ ? ( { 8{ _044__T  }} | xram_data_in_T ) : ( { 8{ _044__T  }} | sha_core_block_T [231:224] );
  assign sha_core_block_read_data_next[239:232] = _045_ ? xram_data_in : sha_core_block[239:232];
  assign sha_core_block_read_data_next_T [239:232] = _045_ ? ( { 8{ _045__T  }} | xram_data_in_T ) : ( { 8{ _045__T  }} | sha_core_block_T [239:232] );
  assign sha_core_block_read_data_next[247:240] = _046_ ? xram_data_in : sha_core_block[247:240];
  assign sha_core_block_read_data_next_T [247:240] = _046_ ? ( { 8{ _046__T  }} | xram_data_in_T ) : ( { 8{ _046__T  }} | sha_core_block_T [247:240] );
  assign sha_core_block_read_data_next[255:248] = _047_ ? xram_data_in : sha_core_block[255:248];
  assign sha_core_block_read_data_next_T [255:248] = _047_ ? ( { 8{ _047__T  }} | xram_data_in_T ) : ( { 8{ _047__T  }} | sha_core_block_T [255:248] );
  assign sha_core_block_read_data_next[263:256] = _048_ ? xram_data_in : sha_core_block[263:256];
  assign sha_core_block_read_data_next_T [263:256] = _048_ ? ( { 8{ _048__T  }} | xram_data_in_T ) : ( { 8{ _048__T  }} | sha_core_block_T [263:256] );
  assign sha_core_block_read_data_next[271:264] = _049_ ? xram_data_in : sha_core_block[271:264];
  assign sha_core_block_read_data_next_T [271:264] = _049_ ? ( { 8{ _049__T  }} | xram_data_in_T ) : ( { 8{ _049__T  }} | sha_core_block_T [271:264] );
  assign sha_core_block_read_data_next[279:272] = _050_ ? xram_data_in : sha_core_block[279:272];
  assign sha_core_block_read_data_next_T [279:272] = _050_ ? ( { 8{ _050__T  }} | xram_data_in_T ) : ( { 8{ _050__T  }} | sha_core_block_T [279:272] );
  assign sha_core_block_read_data_next[287:280] = _051_ ? xram_data_in : sha_core_block[287:280];
  assign sha_core_block_read_data_next_T [287:280] = _051_ ? ( { 8{ _051__T  }} | xram_data_in_T ) : ( { 8{ _051__T  }} | sha_core_block_T [287:280] );
  assign sha_core_block_read_data_next[295:288] = _052_ ? xram_data_in : sha_core_block[295:288];
  assign sha_core_block_read_data_next_T [295:288] = _052_ ? ( { 8{ _052__T  }} | xram_data_in_T ) : ( { 8{ _052__T  }} | sha_core_block_T [295:288] );
  assign sha_core_block_read_data_next[303:296] = _053_ ? xram_data_in : sha_core_block[303:296];
  assign sha_core_block_read_data_next_T [303:296] = _053_ ? ( { 8{ _053__T  }} | xram_data_in_T ) : ( { 8{ _053__T  }} | sha_core_block_T [303:296] );
  assign sha_core_block_read_data_next[311:304] = _054_ ? xram_data_in : sha_core_block[311:304];
  assign sha_core_block_read_data_next_T [311:304] = _054_ ? ( { 8{ _054__T  }} | xram_data_in_T ) : ( { 8{ _054__T  }} | sha_core_block_T [311:304] );
  assign sha_core_block_read_data_next[319:312] = _055_ ? xram_data_in : sha_core_block[319:312];
  assign sha_core_block_read_data_next_T [319:312] = _055_ ? ( { 8{ _055__T  }} | xram_data_in_T ) : ( { 8{ _055__T  }} | sha_core_block_T [319:312] );
  assign sha_core_block_read_data_next[327:320] = _056_ ? xram_data_in : sha_core_block[327:320];
  assign sha_core_block_read_data_next_T [327:320] = _056_ ? ( { 8{ _056__T  }} | xram_data_in_T ) : ( { 8{ _056__T  }} | sha_core_block_T [327:320] );
  assign sha_core_block_read_data_next[335:328] = _057_ ? xram_data_in : sha_core_block[335:328];
  assign sha_core_block_read_data_next_T [335:328] = _057_ ? ( { 8{ _057__T  }} | xram_data_in_T ) : ( { 8{ _057__T  }} | sha_core_block_T [335:328] );
  assign sha_core_block_read_data_next[343:336] = _058_ ? xram_data_in : sha_core_block[343:336];
  assign sha_core_block_read_data_next_T [343:336] = _058_ ? ( { 8{ _058__T  }} | xram_data_in_T ) : ( { 8{ _058__T  }} | sha_core_block_T [343:336] );
  assign sha_core_block_read_data_next[351:344] = _059_ ? xram_data_in : sha_core_block[351:344];
  assign sha_core_block_read_data_next_T [351:344] = _059_ ? ( { 8{ _059__T  }} | xram_data_in_T ) : ( { 8{ _059__T  }} | sha_core_block_T [351:344] );
  assign sha_core_block_read_data_next[359:352] = writing_last_byte ? xram_data_in : sha_core_block[359:352];
  assign sha_core_block_read_data_next_T [359:352] = writing_last_byte ? ( { 8{ writing_last_byte_T  }} | xram_data_in_T ) : ( { 8{ writing_last_byte_T  }} | sha_core_block_T [359:352] );
  assign sha_core_block_read_data_next[367:360] = _060_ ? xram_data_in : sha_core_block[367:360];
  assign sha_core_block_read_data_next_T [367:360] = _060_ ? ( { 8{ _060__T  }} | xram_data_in_T ) : ( { 8{ _060__T  }} | sha_core_block_T [367:360] );
  assign sha_core_block_read_data_next[375:368] = _061_ ? xram_data_in : sha_core_block[375:368];
  assign sha_core_block_read_data_next_T [375:368] = _061_ ? ( { 8{ _061__T  }} | xram_data_in_T ) : ( { 8{ _061__T  }} | sha_core_block_T [375:368] );
  assign sha_core_block_read_data_next[383:376] = _062_ ? xram_data_in : sha_core_block[383:376];
  assign sha_core_block_read_data_next_T [383:376] = _062_ ? ( { 8{ _062__T  }} | xram_data_in_T ) : ( { 8{ _062__T  }} | sha_core_block_T [383:376] );
  assign sha_core_block_read_data_next[391:384] = _063_ ? xram_data_in : sha_core_block[391:384];
  assign sha_core_block_read_data_next_T [391:384] = _063_ ? ( { 8{ _063__T  }} | xram_data_in_T ) : ( { 8{ _063__T  }} | sha_core_block_T [391:384] );
  assign sha_core_block_read_data_next[399:392] = _064_ ? xram_data_in : sha_core_block[399:392];
  assign sha_core_block_read_data_next_T [399:392] = _064_ ? ( { 8{ _064__T  }} | xram_data_in_T ) : ( { 8{ _064__T  }} | sha_core_block_T [399:392] );
  assign sha_core_block_read_data_next[407:400] = _065_ ? xram_data_in : sha_core_block[407:400];
  assign sha_core_block_read_data_next_T [407:400] = _065_ ? ( { 8{ _065__T  }} | xram_data_in_T ) : ( { 8{ _065__T  }} | sha_core_block_T [407:400] );
  assign sha_core_block_read_data_next[415:408] = _066_ ? xram_data_in : sha_core_block[415:408];
  assign sha_core_block_read_data_next_T [415:408] = _066_ ? ( { 8{ _066__T  }} | xram_data_in_T ) : ( { 8{ _066__T  }} | sha_core_block_T [415:408] );
  assign sha_core_block_read_data_next[423:416] = _067_ ? xram_data_in : sha_core_block[423:416];
  assign sha_core_block_read_data_next_T [423:416] = _067_ ? ( { 8{ _067__T  }} | xram_data_in_T ) : ( { 8{ _067__T  }} | sha_core_block_T [423:416] );
  assign sha_core_block_read_data_next[431:424] = _068_ ? xram_data_in : sha_core_block[431:424];
  assign sha_core_block_read_data_next_T [431:424] = _068_ ? ( { 8{ _068__T  }} | xram_data_in_T ) : ( { 8{ _068__T  }} | sha_core_block_T [431:424] );
  assign sha_core_block_read_data_next[439:432] = _069_ ? xram_data_in : sha_core_block[439:432];
  assign sha_core_block_read_data_next_T [439:432] = _069_ ? ( { 8{ _069__T  }} | xram_data_in_T ) : ( { 8{ _069__T  }} | sha_core_block_T [439:432] );
  assign sha_core_block_read_data_next[447:440] = _070_ ? xram_data_in : sha_core_block[447:440];
  assign sha_core_block_read_data_next_T [447:440] = _070_ ? ( { 8{ _070__T  }} | xram_data_in_T ) : ( { 8{ _070__T  }} | sha_core_block_T [447:440] );
  assign sha_core_block_read_data_next[455:448] = _071_ ? xram_data_in : sha_core_block[455:448];
  assign sha_core_block_read_data_next_T [455:448] = _071_ ? ( { 8{ _071__T  }} | xram_data_in_T ) : ( { 8{ _071__T  }} | sha_core_block_T [455:448] );
  assign sha_core_block_read_data_next[463:456] = _072_ ? xram_data_in : sha_core_block[463:456];
  assign sha_core_block_read_data_next_T [463:456] = _072_ ? ( { 8{ _072__T  }} | xram_data_in_T ) : ( { 8{ _072__T  }} | sha_core_block_T [463:456] );
  assign sha_core_block_read_data_next[471:464] = _073_ ? xram_data_in : sha_core_block[471:464];
  assign sha_core_block_read_data_next_T [471:464] = _073_ ? ( { 8{ _073__T  }} | xram_data_in_T ) : ( { 8{ _073__T  }} | sha_core_block_T [471:464] );
  assign sha_core_block_read_data_next[479:472] = _074_ ? xram_data_in : sha_core_block[479:472];
  assign sha_core_block_read_data_next_T [479:472] = _074_ ? ( { 8{ _074__T  }} | xram_data_in_T ) : ( { 8{ _074__T  }} | sha_core_block_T [479:472] );
  assign sha_core_block_read_data_next[487:480] = _075_ ? xram_data_in : sha_core_block[487:480];
  assign sha_core_block_read_data_next_T [487:480] = _075_ ? ( { 8{ _075__T  }} | xram_data_in_T ) : ( { 8{ _075__T  }} | sha_core_block_T [487:480] );
  assign sha_core_block_read_data_next[495:488] = _076_ ? xram_data_in : sha_core_block[495:488];
  assign sha_core_block_read_data_next_T [495:488] = _076_ ? ( { 8{ _076__T  }} | xram_data_in_T ) : ( { 8{ _076__T  }} | sha_core_block_T [495:488] );
  assign sha_core_block_read_data_next[503:496] = _077_ ? xram_data_in : sha_core_block[503:496];
  assign sha_core_block_read_data_next_T [503:496] = _077_ ? ( { 8{ _077__T  }} | xram_data_in_T ) : ( { 8{ _077__T  }} | sha_core_block_T [503:496] );
  assign sha_core_block_read_data_next[511:504] = _078_ ? xram_data_in : sha_core_block[511:504];
  assign sha_core_block_read_data_next_T [511:504] = _078_ ? ( { 8{ _078__T  }} | xram_data_in_T ) : ( { 8{ _078__T  }} | sha_core_block_T [511:504] );
  assign _103_ = sha_state_read_data ? sha_core_block_read_data_next : sha_core_block;
  assign _103__T = sha_state_read_data ? ( { 512{ sha_state_read_data_T  }} | sha_core_block_read_data_next_T ) : ( { 512{ sha_state_read_data_T  }} | sha_core_block_T );
  assign sha_core_block_next = sha_state_idle ? 512'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : _103_;
  assign sha_core_block_next_T = sha_state_idle ? { 512{ | sha_state_idle_T  }} : ( { 512{ | sha_state_idle_T  }} | _103__T );
  assign _104_ = sel_reg_len ? data_out_len : 8'b00000000;
  assign _104__T = sel_reg_len ? ( { 8{ | sel_reg_len_T  }} | data_out_len_T ) : { 8{ | sel_reg_len_T  }};
  assign _105_ = sel_reg_wr_addr ? data_out_wr_addr : _104_;
  assign _105__T = sel_reg_wr_addr ? ( { 8{ sel_reg_wr_addr_T  }} | data_out_wr_addr_T ) : ( { 8{ sel_reg_wr_addr_T  }} | _104__T );
  assign _106_ = sel_reg_rd_addr ? data_out_rd_addr : _105_;
  assign _106__T = sel_reg_rd_addr ? ( { 8{ sel_reg_rd_addr_T  }} | data_out_rd_addr_T ) : ( { 8{ sel_reg_rd_addr_T  }} | _105__T );
  logic [7:0] fangyuan4;
  logic [7:0] fangyuan4_T ;
  assign fangyuan4 = { 5'b00000, sha_reg_state };
  assign fangyuan4_T = {  5'h0 , sha_reg_state_T  };
  assign data_out = sel_reg_state ? fangyuan4 : _106_;
  assign data_out_T = sel_reg_state ? ( { 8{ sel_reg_state_T  }} | fangyuan4_T ) : ( { 8{ sel_reg_state_T  }} | _106__T );
  logic [159:0] fangyuan5;
  logic [159:0] fangyuan5_T ;
  assign { _014_[159:68], sha_reg_digest_next } = fangyuan5;
  assign {  _014__T [159:68] , sha_reg_digest_next_T  } = fangyuan5_T ;
  assign fangyuan5 = sha_core_digest_valid ? sha_core_digest : sha_reg_digest;
  assign fangyuan5_T = sha_core_digest_valid ? ( { 160{ sha_core_digest_valid_T  }} | sha_core_digest_T ) : ( { 160{ sha_core_digest_valid_T  }} | sha_reg_digest_T );
  assign _107_ = sha_state_write_data ? _012_ : 16'b0000000000000000;
  assign _107__T = sha_state_write_data ? ( { 16{ | sha_state_write_data_T  }} | _012__T ) : { 16{ | sha_state_write_data_T  }};
  assign xram_addr = sha_state_read_data ? _011_ : _107_;
  assign xram_addr_T = sha_state_read_data ? ( { 16{ sha_state_read_data_T  }} | _011__T ) : ( { 16{ sha_state_read_data_T  }} | _107__T );
  assign _108_ = _078_ ? sha_reg_digest[159:152] : 8'b00000000;
  assign _108__T = _078_ ? ( { 8{ | _078__T  }} | sha_reg_digest_T [159:152] ) : { 8{ | _078__T  }};
  assign _109_ = _077_ ? sha_reg_digest[151:144] : _108_;
  assign _109__T = _077_ ? ( { 8{ _077__T  }} | sha_reg_digest_T [151:144] ) : ( { 8{ _077__T  }} | _108__T );
  assign _110_ = _076_ ? sha_reg_digest[143:136] : _109_;
  assign _110__T = _076_ ? ( { 8{ _076__T  }} | sha_reg_digest_T [143:136] ) : ( { 8{ _076__T  }} | _109__T );
  assign _111_ = _075_ ? sha_reg_digest[135:128] : _110_;
  assign _111__T = _075_ ? ( { 8{ _075__T  }} | sha_reg_digest_T [135:128] ) : ( { 8{ _075__T  }} | _110__T );
  assign _112_ = _074_ ? sha_reg_digest[127:120] : _111_;
  assign _112__T = _074_ ? ( { 8{ _074__T  }} | sha_reg_digest_T [127:120] ) : ( { 8{ _074__T  }} | _111__T );
  assign _113_ = _073_ ? sha_reg_digest[119:112] : _112_;
  assign _113__T = _073_ ? ( { 8{ _073__T  }} | sha_reg_digest_T [119:112] ) : ( { 8{ _073__T  }} | _112__T );
  assign _114_ = _072_ ? sha_reg_digest[111:104] : _113_;
  assign _114__T = _072_ ? ( { 8{ _072__T  }} | sha_reg_digest_T [111:104] ) : ( { 8{ _072__T  }} | _113__T );
  assign _115_ = _071_ ? sha_reg_digest[103:96] : _114_;
  assign _115__T = _071_ ? ( { 8{ _071__T  }} | sha_reg_digest_T [103:96] ) : ( { 8{ _071__T  }} | _114__T );
  assign _116_ = _070_ ? sha_reg_digest[95:88] : _115_;
  assign _116__T = _070_ ? ( { 8{ _070__T  }} | sha_reg_digest_T [95:88] ) : ( { 8{ _070__T  }} | _115__T );
  assign _117_ = _069_ ? sha_reg_digest[87:80] : _116_;
  assign _117__T = _069_ ? ( { 8{ _069__T  }} | sha_reg_digest_T [87:80] ) : ( { 8{ _069__T  }} | _116__T );
  assign _118_ = _068_ ? sha_reg_digest[79:72] : _117_;
  assign _118__T = _068_ ? ( { 8{ _068__T  }} | sha_reg_digest_T [79:72] ) : ( { 8{ _068__T  }} | _117__T );
  assign _119_ = _067_ ? sha_reg_digest[71:64] : _118_;
  assign _119__T = _067_ ? ( { 8{ _067__T  }} | sha_reg_digest_T [71:64] ) : ( { 8{ _067__T  }} | _118__T );
  assign _120_ = _066_ ? sha_reg_digest[63:56] : _119_;
  assign _120__T = _066_ ? ( { 8{ _066__T  }} | sha_reg_digest_T [63:56] ) : ( { 8{ _066__T  }} | _119__T );
  assign _121_ = _065_ ? sha_reg_digest[55:48] : _120_;
  assign _121__T = _065_ ? ( { 8{ _065__T  }} | sha_reg_digest_T [55:48] ) : ( { 8{ _065__T  }} | _120__T );
  assign _122_ = _064_ ? sha_reg_digest[47:40] : _121_;
  assign _122__T = _064_ ? ( { 8{ _064__T  }} | sha_reg_digest_T [47:40] ) : ( { 8{ _064__T  }} | _121__T );
  assign _123_ = _063_ ? sha_reg_digest[39:32] : _122_;
  assign _123__T = _063_ ? ( { 8{ _063__T  }} | sha_reg_digest_T [39:32] ) : ( { 8{ _063__T  }} | _122__T );
  assign _124_ = _062_ ? sha_reg_digest[31:24] : _123_;
  assign _124__T = _062_ ? ( { 8{ _062__T  }} | sha_reg_digest_T [31:24] ) : ( { 8{ _062__T  }} | _123__T );
  assign _125_ = _061_ ? sha_reg_digest[23:16] : _124_;
  assign _125__T = _061_ ? ( { 8{ _061__T  }} | sha_reg_digest_T [23:16] ) : ( { 8{ _061__T  }} | _124__T );
  assign _126_ = _060_ ? sha_reg_digest[15:8] : _125_;
  assign _126__T = _060_ ? ( { 8{ _060__T  }} | sha_reg_digest_T [15:8] ) : ( { 8{ _060__T  }} | _125__T );
  assign xram_data_out = writing_last_byte ? sha_reg_digest[7:0] : _126_;
  assign xram_data_out_T = writing_last_byte ? ( { 8{ writing_last_byte_T  }} | sha_reg_digest_T [7:0] ) : ( { 8{ writing_last_byte_T  }} | _126__T );
// module: sha1_core
  sha1_core sha1_core_i (
    .YZC(YZC[37:7]),
    .block_T (  sha_core_block_T  ),
    .init_T (  sha_core_init_T  ),
    .next_T (  sha_core_next_T  ),
    .reset_n_T (  sha_core_rst_n_T  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .digest_T (  sha_core_digest_T  ),
    .digest_valid_T (  sha_core_digest_valid_T  ),
    .ready_T (  sha_core_ready_T  ),
    .ready ( sha_core_ready ),
    .next ( sha_core_next ),
    .clk ( clk ),
    .block ( sha_core_block ),
    .reset_n ( sha_core_rst_n ),
    .digest ( sha_core_digest ),
    .digest_valid ( sha_core_digest_valid ),
    .init ( sha_core_init )
  );
// module: reg2byte
  reg2byte sha_reg_len_i (
    .YZC(YZC[38:38]),
    .addr_T (  addr_T [0]  ),
    .data_in_T (  data_in_T  ),
    .en_T (  sel_reg_len_T  ),
    .rst_T (  rst_T  ),
    .wr_T (  _088__T  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .data_out_T (  data_out_len_T  ),
    .reg_out_T (  sha_reg_len_T  ),
    .rst ( rst ),
    .reg_out ( sha_reg_len ),
    .wr ( _088_ ),
    .clk ( clk ),
    .addr ( addr[0] ),
    .en ( sel_reg_len ),
    .data_in ( data_in ),
    .data_out ( data_out_len )
  );
// module: reg2byte
  reg2byte sha_reg_rd_addr_i (
    .YZC(YZC[39:39]),
    .addr_T (  addr_T [0]  ),
    .data_in_T (  data_in_T  ),
    .en_T (  sel_reg_rd_addr_T  ),
    .rst_T (  rst_T  ),
    .wr_T (  _086__T  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .data_out_T (  data_out_rd_addr_T  ),
    .reg_out_T (  sha_reg_rd_addr_T  ),
    .rst ( rst ),
    .reg_out ( sha_reg_rd_addr ),
    .wr ( _086_ ),
    .clk ( clk ),
    .addr ( addr[0] ),
    .en ( sel_reg_rd_addr ),
    .data_in ( data_in ),
    .data_out ( data_out_rd_addr )
  );
// module: reg2byte
  reg2byte sha_reg_wr_addr_i (
    .YZC(YZC[40:40]),
    .addr_T (  addr_T [0]  ),
    .data_in_T (  data_in_T  ),
    .en_T (  sel_reg_wr_addr_T  ),
    .rst_T (  rst_T  ),
    .wr_T (  _087__T  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .data_out_T (  data_out_wr_addr_T  ),
    .reg_out_T (  sha_reg_wr_addr_T  ),
    .rst ( rst ),
    .reg_out ( sha_reg_wr_addr ),
    .wr ( _087_ ),
    .clk ( clk ),
    .addr ( addr[0] ),
    .en ( sel_reg_wr_addr ),
    .data_in ( data_in ),
    .data_out ( data_out_wr_addr )
  );
  assign data_out_state = { 5'b00000, sha_reg_state };
  assign data_out_state_T = {  5'h0 , sha_reg_state_T  };
  assign sha_len = sha_reg_len;
  assign sha_len_T = sha_reg_len_T ;
  assign sha_rdaddr = sha_reg_rd_addr;
  assign sha_rdaddr_T = sha_reg_rd_addr_T ;
  assign sha_state = sha_reg_state;
  assign sha_state_T = sha_reg_state_T ;
  assign sha_state_next_idle = start_op;
  assign sha_state_next_idle_T = start_op_T ;
  assign sha_wraddr = sha_reg_wr_addr;
  assign sha_wraddr_T = sha_reg_wr_addr_T ;
  assign xram_wr = sha_state_write_data;
  assign xram_wr_T = sha_state_write_data_T ;
  assign rst_zy = rst ;
endmodule
