/* Generated by Yosys 0.8 (git sha1 UNKNOWN, clang 9.0.0 -fPIC -Os) */

(* src = "../rtl/reg2byte.v:11" *)
module reg2byte(clk, rst, en, wr, addr, data_in, data_out, reg_out);
  (* src = "../rtl/reg2byte.v:33" *)
  wire [15:0] _00_;
  (* src = "../rtl/reg2byte.v:23" *)
  wire _01_;
  (* src = "../rtl/reg2byte.v:23" *)
  wire _02_;
  (* src = "../rtl/reg2byte.v:16" *)
  input addr;
  (* src = "../rtl/reg2byte.v:12" *)
  input clk;
  (* src = "../rtl/reg2byte.v:17" *)
  input [7:0] data_in;
  (* src = "../rtl/reg2byte.v:18" *)
  output [7:0] data_out;
  (* src = "../rtl/reg2byte.v:29" *)
  wire [7:0] data_out_mux;
  (* src = "../rtl/reg2byte.v:14" *)
  input en;
  (* src = "../rtl/reg2byte.v:26" *)
  wire [7:0] reg0_next;
  (* src = "../rtl/reg2byte.v:27" *)
  wire [7:0] reg1_next;
  (* src = "../rtl/reg2byte.v:19" *)
  output [15:0] reg_out;
  reg [15:0] reg_out;
  (* src = "../rtl/reg2byte.v:13" *)
  input rst;
  (* src = "../rtl/reg2byte.v:15" *)
  input wr;
  (* src = "../rtl/reg2byte.v:23" *)
  wire wr0;
  (* src = "../rtl/reg2byte.v:24" *)
  wire wr1;
  assign _01_ = ~ (* src = "../rtl/reg2byte.v:23" *) addr;
  assign _02_ = en && (* src = "../rtl/reg2byte.v:23" *) wr;
  assign wr0 = _02_ && (* src = "../rtl/reg2byte.v:23" *) _01_;
  assign wr1 = _02_ && (* src = "../rtl/reg2byte.v:24" *) addr;
  always @(posedge clk)
      reg_out <= _00_;
  assign _00_[15:8] = rst ? (* src = "../rtl/reg2byte.v:35" *) 8'b00000000 : reg1_next;
  assign _00_[7:0] = rst ? (* src = "../rtl/reg2byte.v:35" *) 8'b00000000 : reg0_next;
  assign reg0_next = wr0 ? (* src = "../rtl/reg2byte.v:26" *) data_in : reg_out[7:0];
  assign reg1_next = wr1 ? (* src = "../rtl/reg2byte.v:27" *) data_in : reg_out[15:8];
  assign data_out = addr ? (* src = "../rtl/reg2byte.v:30" *) reg_out[15:8] : reg_out[7:0];
  assign data_out_mux = data_out;
endmodule

(* src = "../rtl/sha1_core.v:39" *)
module sha1_core(clk, reset_n, init, next, block, ready, digest, digest_valid);
  (* src = "../rtl/sha1_core.v:157" *)
  wire [31:0] _000_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire [31:0] _001_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire [31:0] _002_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire [31:0] _003_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire [31:0] _004_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire [31:0] _005_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire [31:0] _006_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire [31:0] _007_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire [31:0] _008_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire _009_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire [31:0] _010_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire [6:0] _011_;
  (* src = "../rtl/sha1_core.v:157" *)
  wire [1:0] _012_;
  wire [30:0] _013_;
  (* src = "../rtl/sha1_core.v:218" *)
  wire [31:0] _014_;
  (* src = "../rtl/sha1_core.v:218" *)
  wire [31:0] _015_;
  wire [28:0] _016_;
  (* src = "../rtl/sha1_core.v:218" *)
  wire [31:0] _017_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _018_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _019_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _020_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _021_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _022_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _023_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _024_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _025_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _026_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _027_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _028_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _029_;
  (* src = "../rtl/sha1_core.v:360" *)
  wire _030_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _031_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _032_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _033_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _034_;
  (* src = "../rtl/sha1_core.v:360" *)
  wire [1:0] _035_;
  (* src = "../rtl/sha1_core.v:360" *)
  wire _036_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _037_;
  (* src = "../rtl/sha1_core.v:260" *)
  wire [31:0] _038_;
  (* src = "../rtl/sha1_core.v:239" *)
  wire [31:0] _039_;
  (* src = "../rtl/sha1_core.v:240" *)
  wire [31:0] _040_;
  (* src = "../rtl/sha1_core.v:241" *)
  wire [31:0] _041_;
  (* src = "../rtl/sha1_core.v:242" *)
  wire [31:0] _042_;
  (* src = "../rtl/sha1_core.v:243" *)
  wire [31:0] _043_;
  (* src = "../rtl/sha1_core.v:319" *)
  wire [31:0] _044_;
  (* src = "../rtl/sha1_core.v:319" *)
  wire [31:0] _045_;
  (* src = "../rtl/sha1_core.v:319" *)
  wire [31:0] _046_;
  (* src = "../rtl/sha1_core.v:319" *)
  wire [31:0] _047_;
  (* src = "../rtl/sha1_core.v:350" *)
  wire [6:0] _048_;
  (* src = "../rtl/sha1_core.v:300" *)
  wire [31:0] _049_;
  (* src = "../rtl/sha1_core.v:300" *)
  wire [31:0] _050_;
  (* src = "../rtl/sha1_core.v:302" *)
  wire _051_;
  (* src = "../rtl/sha1_core.v:307" *)
  wire _052_;
  (* src = "../rtl/sha1_core.v:312" *)
  wire _053_;
  (* src = "../rtl/sha1_core.v:297" *)
  wire _054_;
  (* src = "../rtl/sha1_core.v:302" *)
  wire _055_;
  (* src = "../rtl/sha1_core.v:307" *)
  wire _056_;
  (* src = "../rtl/sha1_core.v:302" *)
  wire _057_;
  (* src = "../rtl/sha1_core.v:307" *)
  wire _058_;
  (* src = "../rtl/sha1_core.v:300" *)
  wire [31:0] _059_;
  (* src = "../rtl/sha1_core.v:310" *)
  wire [31:0] _060_;
  (* src = "../rtl/sha1_core.v:310" *)
  wire [31:0] _061_;
  (* src = "../rtl/sha1_core.v:310" *)
  wire [31:0] _062_;
  (* src = "../rtl/sha1_core.v:300" *)
  wire [31:0] _063_;
  (* src = "../rtl/sha1_core.v:305" *)
  wire [31:0] _064_;
  (* src = "../rtl/sha1_core.v:305" *)
  wire [31:0] _065_;
  (* src = "../rtl/sha1_core.v:310" *)
  wire [31:0] _066_;
  (* src = "../rtl/sha1_core.v:310" *)
  wire [31:0] _067_;
  (* src = "../rtl/sha1_core.v:87" *)
  wire [31:0] H0_new;
  (* src = "../rtl/sha1_core.v:86" *)
  reg [31:0] H0_reg;
  (* src = "../rtl/sha1_core.v:89" *)
  wire [31:0] H1_new;
  (* src = "../rtl/sha1_core.v:88" *)
  reg [31:0] H1_reg;
  (* src = "../rtl/sha1_core.v:91" *)
  wire [31:0] H2_new;
  (* src = "../rtl/sha1_core.v:90" *)
  reg [31:0] H2_reg;
  (* src = "../rtl/sha1_core.v:93" *)
  wire [31:0] H3_new;
  (* src = "../rtl/sha1_core.v:92" *)
  reg [31:0] H3_reg;
  (* src = "../rtl/sha1_core.v:95" *)
  wire [31:0] H4_new;
  (* src = "../rtl/sha1_core.v:94" *)
  reg [31:0] H4_reg;
  (* src = "../rtl/sha1_core.v:96" *)
  wire H_we;
  (* src = "../rtl/sha1_core.v:84" *)
  wire a_e_we;
  (* src = "../rtl/sha1_core.v:75" *)
  wire [31:0] a_new;
  (* src = "../rtl/sha1_core.v:74" *)
  reg [31:0] a_reg;
  (* src = "../rtl/sha1_core.v:77" *)
  wire [31:0] b_new;
  (* src = "../rtl/sha1_core.v:76" *)
  reg [31:0] b_reg;
  (* src = "../rtl/sha1_core.v:46" *)
  input [511:0] block;
  (* src = "../rtl/sha1_core.v:79" *)
  wire [31:0] c_new;
  (* src = "../rtl/sha1_core.v:78" *)
  reg [31:0] c_reg;
  (* src = "../rtl/sha1_core.v:40" *)
  input clk;
  (* src = "../rtl/sha1_core.v:81" *)
  wire [31:0] d_new;
  (* src = "../rtl/sha1_core.v:80" *)
  reg [31:0] d_reg;
  (* src = "../rtl/sha1_core.v:50" *)
  output [159:0] digest;
  (* src = "../rtl/sha1_core.v:116" *)
  wire digest_init;
  (* src = "../rtl/sha1_core.v:117" *)
  wire digest_update;
  (* src = "../rtl/sha1_core.v:51" *)
  output digest_valid;
  (* src = "../rtl/sha1_core.v:105" *)
  wire digest_valid_new;
  (* src = "../rtl/sha1_core.v:104" *)
  reg digest_valid_reg;
  (* src = "../rtl/sha1_core.v:106" *)
  wire digest_valid_we;
  (* src = "../rtl/sha1_core.v:83" *)
  wire [31:0] e_new;
  (* src = "../rtl/sha1_core.v:82" *)
  reg [31:0] e_reg;
  (* src = "../rtl/sha1_core.v:120" *)
  wire first_block;
  (* src = "../rtl/sha1_core.v:43" *)
  input init;
  (* src = "../rtl/sha1_core.v:44" *)
  input next;
  (* src = "../rtl/sha1_core.v:48" *)
  output ready;
  (* src = "../rtl/sha1_core.v:121" *)
  wire ready_flag;
  (* src = "../rtl/sha1_core.v:41" *)
  input reset_n;
  (* src = "../rtl/sha1_core.v:101" *)
  wire round_ctr_inc;
  (* src = "../rtl/sha1_core.v:99" *)
  wire [6:0] round_ctr_new;
  (* src = "../rtl/sha1_core.v:98" *)
  reg [6:0] round_ctr_reg;
  (* src = "../rtl/sha1_core.v:102" *)
  wire round_ctr_rst;
  (* src = "../rtl/sha1_core.v:100" *)
  wire round_ctr_we;
  (* src = "../rtl/sha1_core.v:109" *)
  wire [1:0] sha1_ctrl_new;
  (* src = "../rtl/sha1_core.v:108" *)
  reg [1:0] sha1_ctrl_reg;
  (* src = "../rtl/sha1_core.v:110" *)
  wire sha1_ctrl_we;
  (* src = "../rtl/sha1_core.v:118" *)
  wire state_init;
  (* src = "../rtl/sha1_core.v:119" *)
  wire state_update;
  (* src = "../rtl/sha1_core.v:124" *)
  wire [31:0] w;
  (* src = "../rtl/sha1_core.v:122" *)
  wire w_init;
  (* src = "../rtl/sha1_core.v:123" *)
  wire w_next;
  assign _039_ = H0_reg + (* src = "../rtl/sha1_core.v:239" *) a_reg;
  assign _040_ = H1_reg + (* src = "../rtl/sha1_core.v:240" *) b_reg;
  assign _041_ = H2_reg + (* src = "../rtl/sha1_core.v:241" *) c_reg;
  assign _042_ = H3_reg + (* src = "../rtl/sha1_core.v:242" *) d_reg;
  assign _043_ = H4_reg + (* src = "../rtl/sha1_core.v:243" *) e_reg;
  assign _044_ = { a_reg[26:0], a_reg[31:27] } + (* src = "../rtl/sha1_core.v:319" *) e_reg;
  assign _045_ = _044_ + (* src = "../rtl/sha1_core.v:319" *) _028_;
  assign _046_ = _045_ + (* src = "../rtl/sha1_core.v:319" *) _029_;
  assign _047_ = _046_ + (* src = "../rtl/sha1_core.v:319" *) w;
  assign _048_ = round_ctr_reg + (* src = "../rtl/sha1_core.v:350" *) 1'b1;
  assign _049_ = b_reg & (* src = "../rtl/sha1_core.v:300" *) c_reg;
  assign _050_ = _059_ & (* src = "../rtl/sha1_core.v:300" *) d_reg;
  assign _036_ = round_ctr_reg == (* src = "../rtl/sha1_core.v:414" *) 7'b1001111;
  assign _051_ = round_ctr_reg >= (* src = "../rtl/sha1_core.v:302" *) 5'b10100;
  assign _052_ = round_ctr_reg >= (* src = "../rtl/sha1_core.v:307" *) 6'b101000;
  assign _053_ = round_ctr_reg >= (* src = "../rtl/sha1_core.v:312" *) 6'b111100;
  assign _054_ = round_ctr_reg <= (* src = "../rtl/sha1_core.v:297" *) 5'b10011;
  assign _055_ = round_ctr_reg <= (* src = "../rtl/sha1_core.v:302" *) 6'b100111;
  assign _056_ = round_ctr_reg <= (* src = "../rtl/sha1_core.v:307" *) 6'b111011;
  assign _057_ = _051_ && (* src = "../rtl/sha1_core.v:302" *) _055_;
  assign _058_ = _052_ && (* src = "../rtl/sha1_core.v:307" *) _056_;
  assign _059_ = ~ (* src = "../rtl/sha1_core.v:300" *) b_reg;
  assign _060_ = b_reg | (* src = "../rtl/sha1_core.v:310" *) c_reg;
  assign _061_ = b_reg | (* src = "../rtl/sha1_core.v:310" *) d_reg;
  assign _062_ = c_reg | (* src = "../rtl/sha1_core.v:310" *) d_reg;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      a_reg <= 32'd0;
    else
      a_reg <= _005_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      b_reg <= 32'd0;
    else
      b_reg <= _006_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      c_reg <= 32'd0;
    else
      c_reg <= _007_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      d_reg <= 32'd0;
    else
      d_reg <= _008_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      e_reg <= 32'd0;
    else
      e_reg <= _010_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      H0_reg <= 32'd0;
    else
      H0_reg <= _000_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      H1_reg <= 32'd0;
    else
      H1_reg <= _001_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      H2_reg <= 32'd0;
    else
      H2_reg <= _002_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      H3_reg <= 32'd0;
    else
      H3_reg <= _003_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      H4_reg <= 32'd0;
    else
      H4_reg <= _004_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      round_ctr_reg <= 7'b0000000;
    else
      round_ctr_reg <= _011_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      digest_valid_reg <= 1'b0;
    else
      digest_valid_reg <= _009_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      sha1_ctrl_reg <= 2'b00;
    else
      sha1_ctrl_reg <= _012_;
  assign round_ctr_inc = sha1_ctrl_reg == (* src = "../rtl/sha1_core.v:377" *) 1'b1;
  assign _035_ = _036_ ? (* src = "../rtl/sha1_core.v:414" *) 2'b10 : 2'b00;
  assign ready = ! (* src = "../rtl/sha1_core.v:377" *) sha1_ctrl_reg;
  assign _030_ = next ? (* src = "../rtl/sha1_core.v:395" *) 1'b1 : init;
  function [0:0] _110_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* src = "../rtl/sha1_core.v:377" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        _110_ = b[0:0];
      3'b?1?:
        _110_ = b[1:1];
      3'b1??:
        _110_ = b[2:2];
      default:
        _110_ = a;
    endcase
  endfunction
  assign sha1_ctrl_we = _110_(1'b0, { _030_, _036_, 1'b1 }, { ready, round_ctr_inc, digest_update });
  assign digest_update = sha1_ctrl_reg == (* src = "../rtl/sha1_core.v:377" *) 2'b10;
  function [1:0] _112_;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* src = "../rtl/sha1_core.v:377" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _112_ = b[1:0];
      2'b1?:
        _112_ = b[3:2];
      default:
        _112_ = a;
    endcase
  endfunction
  assign sha1_ctrl_new = _112_(2'b00, { 1'b0, _030_, _035_ }, { ready, round_ctr_inc });
  function [0:0] _113_;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* src = "../rtl/sha1_core.v:377" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        _113_ = b[0:0];
      2'b1?:
        _113_ = b[1:1];
      default:
        _113_ = a;
    endcase
  endfunction
  assign digest_valid_we = _113_(1'b0, { _030_, 1'b1 }, { ready, digest_update });
  assign round_ctr_rst = ready ? (* src = "../rtl/sha1_core.v:377" *) _030_ : 1'b0;
  assign digest_init = ready ? (* src = "../rtl/sha1_core.v:377" *) init : 1'b0;
  assign a_e_we = round_ctr_inc ? (* src = "../rtl/sha1_core.v:348" *) 1'b1 : round_ctr_rst;
  assign round_ctr_new = round_ctr_inc ? (* src = "../rtl/sha1_core.v:348" *) _048_ : 7'b0000000;
  assign _037_ = _053_ ? (* src = "../rtl/sha1_core.v:312" *) _065_ : 32'd0;
  assign _038_ = _053_ ? (* src = "../rtl/sha1_core.v:312" *) 32'd3395469782 : 32'd0;
  assign _033_ = _058_ ? (* src = "../rtl/sha1_core.v:307" *) _067_ : _037_;
  assign _034_ = _058_ ? (* src = "../rtl/sha1_core.v:307" *) 32'd2400959708 : _038_;
  assign _031_ = _057_ ? (* src = "../rtl/sha1_core.v:302" *) _065_ : _033_;
  assign _032_ = _057_ ? (* src = "../rtl/sha1_core.v:302" *) 32'd1859775393 : _034_;
  assign _028_ = _054_ ? (* src = "../rtl/sha1_core.v:297" *) _063_ : _031_;
  assign _029_ = _054_ ? (* src = "../rtl/sha1_core.v:297" *) 32'd1518500249 : _032_;
  assign e_new = round_ctr_inc ? (* src = "../rtl/sha1_core.v:295" *) d_reg : _022_;
  assign d_new = round_ctr_inc ? (* src = "../rtl/sha1_core.v:295" *) c_reg : _021_;
  assign c_new = round_ctr_inc ? (* src = "../rtl/sha1_core.v:295" *) { b_reg[1:0], b_reg[31:2] } : _020_;
  assign b_new = round_ctr_inc ? (* src = "../rtl/sha1_core.v:295" *) a_reg : _019_;
  assign a_new = round_ctr_inc ? (* src = "../rtl/sha1_core.v:295" *) _047_ : _018_;
  assign _027_ = digest_init ? (* src = "../rtl/sha1_core.v:275" *) 32'd3285377520 : H4_reg;
  assign _026_ = digest_init ? (* src = "../rtl/sha1_core.v:275" *) 32'd271733878 : H3_reg;
  assign _025_ = digest_init ? (* src = "../rtl/sha1_core.v:275" *) 32'd2562383102 : H2_reg;
  assign _024_ = digest_init ? (* src = "../rtl/sha1_core.v:275" *) 32'd4023233417 : H1_reg;
  assign _023_ = digest_init ? (* src = "../rtl/sha1_core.v:275" *) 32'd1732584193 : H0_reg;
  assign _022_ = round_ctr_rst ? (* src = "../rtl/sha1_core.v:273" *) _027_ : 32'd0;
  assign _021_ = round_ctr_rst ? (* src = "../rtl/sha1_core.v:273" *) _026_ : 32'd0;
  assign _020_ = round_ctr_rst ? (* src = "../rtl/sha1_core.v:273" *) _025_ : 32'd0;
  assign _019_ = round_ctr_rst ? (* src = "../rtl/sha1_core.v:273" *) _024_ : 32'd0;
  assign _018_ = round_ctr_rst ? (* src = "../rtl/sha1_core.v:273" *) _023_ : 32'd0;
  assign H_we = digest_update ? (* src = "../rtl/sha1_core.v:237" *) 1'b1 : digest_init;
  assign H4_new = digest_update ? (* src = "../rtl/sha1_core.v:237" *) _043_ : _017_;
  assign H3_new = digest_update ? (* src = "../rtl/sha1_core.v:237" *) _042_ : { 3'b000, _016_ };
  assign H2_new = digest_update ? (* src = "../rtl/sha1_core.v:237" *) _041_ : _015_;
  assign H1_new = digest_update ? (* src = "../rtl/sha1_core.v:237" *) _040_ : _014_;
  assign H0_new = digest_update ? (* src = "../rtl/sha1_core.v:237" *) _039_ : { 1'b0, _013_ };
  assign _017_ = digest_init ? (* src = "../rtl/sha1_core.v:227" *) 32'd3285377520 : 32'd0;
  assign _016_ = digest_init ? (* src = "../rtl/sha1_core.v:227" *) 29'b10000001100100101010001110110 : 29'b00000000000000000000000000000;
  assign _015_ = digest_init ? (* src = "../rtl/sha1_core.v:227" *) 32'd2562383102 : 32'd0;
  assign _014_ = digest_init ? (* src = "../rtl/sha1_core.v:227" *) 32'd4023233417 : 32'd0;
  assign _013_ = digest_init ? (* src = "../rtl/sha1_core.v:227" *) 31'b1100111010001010010001100000001 : 31'b0000000000000000000000000000000;
  assign _012_ = sha1_ctrl_we ? (* src = "../rtl/sha1_core.v:205" *) sha1_ctrl_new : sha1_ctrl_reg;
  assign _009_ = digest_valid_we ? (* src = "../rtl/sha1_core.v:200" *) digest_update : digest_valid_reg;
  assign _011_ = a_e_we ? (* src = "../rtl/sha1_core.v:195" *) round_ctr_new : round_ctr_reg;
  assign _004_ = H_we ? (* src = "../rtl/sha1_core.v:186" *) H4_new : H4_reg;
  assign _003_ = H_we ? (* src = "../rtl/sha1_core.v:186" *) H3_new : H3_reg;
  assign _002_ = H_we ? (* src = "../rtl/sha1_core.v:186" *) H2_new : H2_reg;
  assign _001_ = H_we ? (* src = "../rtl/sha1_core.v:186" *) H1_new : H1_reg;
  assign _000_ = H_we ? (* src = "../rtl/sha1_core.v:186" *) H0_new : H0_reg;
  assign _010_ = a_e_we ? (* src = "../rtl/sha1_core.v:177" *) e_new : e_reg;
  assign _008_ = a_e_we ? (* src = "../rtl/sha1_core.v:177" *) d_new : d_reg;
  assign _007_ = a_e_we ? (* src = "../rtl/sha1_core.v:177" *) c_new : c_reg;
  assign _006_ = a_e_we ? (* src = "../rtl/sha1_core.v:177" *) b_new : b_reg;
  assign _005_ = a_e_we ? (* src = "../rtl/sha1_core.v:177" *) a_new : a_reg;
  assign _063_ = _049_ ^ (* src = "../rtl/sha1_core.v:300" *) _050_;
  assign _064_ = b_reg ^ (* src = "../rtl/sha1_core.v:305" *) c_reg;
  assign _065_ = _064_ ^ (* src = "../rtl/sha1_core.v:305" *) d_reg;
  assign _066_ = _060_ ^ (* src = "../rtl/sha1_core.v:310" *) _061_;
  assign _067_ = _066_ ^ (* src = "../rtl/sha1_core.v:310" *) _062_;
  (* src = "../rtl/sha1_core.v:130" *)
  sha1_w_mem w_mem_inst (
    .block(block),
    .clk(clk),
    .init(round_ctr_rst),
    .next(round_ctr_inc),
    .reset_n(reset_n),
    .w(w)
  );
  assign digest = { H0_reg, H1_reg, H2_reg, H3_reg, H4_reg };
  assign digest_valid = digest_valid_reg;
  assign digest_valid_new = digest_update;
  assign first_block = digest_init;
  assign ready_flag = ready;
  assign round_ctr_we = a_e_we;
  assign state_init = round_ctr_rst;
  assign state_update = round_ctr_inc;
  assign w_init = round_ctr_rst;
  assign w_next = round_ctr_inc;
endmodule

(* src = "../rtl/sha1_w_mem.v:39" *)
module sha1_w_mem(clk, reset_n, block, init, next, w);
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire _000_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [6:0] _001_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _002_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _003_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _004_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _005_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _006_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _007_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _008_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _009_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _010_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _011_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _012_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _013_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _014_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _015_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _016_;
  (* src = "../rtl/sha1_w_mem.v:114" *)
  wire [31:0] _017_;
  (* src = "../rtl/sha1_w_mem.v:179" *)
  wire [31:0] _018_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _019_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _020_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _021_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _022_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _023_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _024_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _025_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _026_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _027_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _028_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _029_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _030_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _031_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _032_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _033_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire [31:0] _034_;
  (* src = "../rtl/sha1_w_mem.v:203" *)
  wire _035_;
  (* src = "../rtl/sha1_w_mem.v:305" *)
  wire _036_;
  (* src = "../rtl/sha1_w_mem.v:294" *)
  wire [6:0] _037_;
  (* src = "../rtl/sha1_w_mem.v:181" *)
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  (* src = "../rtl/sha1_w_mem.v:228" *)
  wire [31:0] _054_;
  (* src = "../rtl/sha1_w_mem.v:228" *)
  wire [31:0] _055_;
  (* src = "../rtl/sha1_w_mem.v:43" *)
  input [511:0] block;
  (* src = "../rtl/sha1_w_mem.v:40" *)
  input clk;
  (* src = "../rtl/sha1_w_mem.v:45" *)
  input init;
  (* src = "../rtl/sha1_w_mem.v:46" *)
  input next;
  (* src = "../rtl/sha1_w_mem.v:41" *)
  input reset_n;
  (* src = "../rtl/sha1_w_mem.v:90" *)
  wire sha1_w_mem_ctrl_new;
  (* src = "../rtl/sha1_w_mem.v:89" *)
  reg sha1_w_mem_ctrl_reg;
  (* src = "../rtl/sha1_w_mem.v:91" *)
  wire sha1_w_mem_ctrl_we;
  (* src = "../rtl/sha1_w_mem.v:48" *)
  output [31:0] w;
  (* src = "../rtl/sha1_w_mem.v:198" *)
  wire [31:0] w_0;
  (* src = "../rtl/sha1_w_mem.v:201" *)
  wire [31:0] w_13;
  (* src = "../rtl/sha1_w_mem.v:202" *)
  wire [31:0] w_16;
  (* src = "../rtl/sha1_w_mem.v:199" *)
  wire [31:0] w_2;
  (* src = "../rtl/sha1_w_mem.v:200" *)
  wire [31:0] w_8;
  (* src = "../rtl/sha1_w_mem.v:86" *)
  wire w_ctr_inc;
  (* src = "../rtl/sha1_w_mem.v:84" *)
  wire [6:0] w_ctr_new;
  (* src = "../rtl/sha1_w_mem.v:83" *)
  reg [6:0] w_ctr_reg;
  (* src = "../rtl/sha1_w_mem.v:87" *)
  wire w_ctr_rst;
  (* src = "../rtl/sha1_w_mem.v:85" *)
  wire w_ctr_we;
  (* src = "../rtl/sha1_w_mem.v:65" *)
  wire [31:0] w_mem00_new;
  (* src = "../rtl/sha1_w_mem.v:66" *)
  wire [31:0] w_mem01_new;
  (* src = "../rtl/sha1_w_mem.v:67" *)
  wire [31:0] w_mem02_new;
  (* src = "../rtl/sha1_w_mem.v:68" *)
  wire [31:0] w_mem03_new;
  (* src = "../rtl/sha1_w_mem.v:69" *)
  wire [31:0] w_mem04_new;
  (* src = "../rtl/sha1_w_mem.v:70" *)
  wire [31:0] w_mem05_new;
  (* src = "../rtl/sha1_w_mem.v:71" *)
  wire [31:0] w_mem06_new;
  (* src = "../rtl/sha1_w_mem.v:72" *)
  wire [31:0] w_mem07_new;
  (* src = "../rtl/sha1_w_mem.v:73" *)
  wire [31:0] w_mem08_new;
  (* src = "../rtl/sha1_w_mem.v:74" *)
  wire [31:0] w_mem09_new;
  (* src = "../rtl/sha1_w_mem.v:75" *)
  wire [31:0] w_mem10_new;
  (* src = "../rtl/sha1_w_mem.v:76" *)
  wire [31:0] w_mem11_new;
  (* src = "../rtl/sha1_w_mem.v:77" *)
  wire [31:0] w_mem12_new;
  (* src = "../rtl/sha1_w_mem.v:78" *)
  wire [31:0] w_mem13_new;
  (* src = "../rtl/sha1_w_mem.v:79" *)
  wire [31:0] w_mem14_new;
  (* src = "../rtl/sha1_w_mem.v:80" *)
  wire [31:0] w_mem15_new;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[0] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[10] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[11] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[12] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[13] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[14] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[15] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[1] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[2] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[3] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[4] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[5] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[6] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[7] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[8] ;
  (* src = "../rtl/sha1_w_mem.v:39" *)
  reg [31:0] \w_mem[9] ;
  (* src = "../rtl/sha1_w_mem.v:81" *)
  wire w_mem_we;
  (* src = "../rtl/sha1_w_mem.v:98" *)
  wire [31:0] w_new;
  (* src = "../rtl/sha1_w_mem.v:97" *)
  wire [31:0] w_tmp;
  assign _037_ = w_ctr_reg + (* src = "../rtl/sha1_w_mem.v:294" *) 1'b1;
  assign _036_ = w_ctr_reg == (* src = "../rtl/sha1_w_mem.v:330" *) 7'b1001111;
  assign _035_ = w_ctr_reg > (* src = "../rtl/sha1_w_mem.v:252" *) 4'b1111;
  assign _038_ = w_ctr_reg < (* src = "../rtl/sha1_w_mem.v:181" *) 5'b10000;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      w_ctr_reg <= 7'b0000000;
    else
      w_ctr_reg <= _001_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      sha1_w_mem_ctrl_reg <= 1'b0;
    else
      sha1_w_mem_ctrl_reg <= _000_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[0]  <= 32'd0;
    else
      \w_mem[0]  <= _002_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[1]  <= 32'd0;
    else
      \w_mem[1]  <= _009_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[2]  <= 32'd0;
    else
      \w_mem[2]  <= _010_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[3]  <= 32'd0;
    else
      \w_mem[3]  <= _011_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[4]  <= 32'd0;
    else
      \w_mem[4]  <= _012_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[5]  <= 32'd0;
    else
      \w_mem[5]  <= _013_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[6]  <= 32'd0;
    else
      \w_mem[6]  <= _014_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[7]  <= 32'd0;
    else
      \w_mem[7]  <= _015_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[8]  <= 32'd0;
    else
      \w_mem[8]  <= _016_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[9]  <= 32'd0;
    else
      \w_mem[9]  <= _017_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[10]  <= 32'd0;
    else
      \w_mem[10]  <= _003_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[11]  <= 32'd0;
    else
      \w_mem[11]  <= _004_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[12]  <= 32'd0;
    else
      \w_mem[12]  <= _005_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[13]  <= 32'd0;
    else
      \w_mem[13]  <= _006_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[14]  <= 32'd0;
    else
      \w_mem[14]  <= _007_;
  always @(posedge clk or negedge reset_n)
    if (!reset_n)
      \w_mem[15]  <= 32'd0;
    else
      \w_mem[15]  <= _008_;
  assign sha1_w_mem_ctrl_we = sha1_w_mem_ctrl_reg ? (* src = "../rtl/sha1_w_mem.v:312" *) _036_ : init;
  assign sha1_w_mem_ctrl_new = sha1_w_mem_ctrl_reg ? (* src = "../rtl/sha1_w_mem.v:312" *) 1'b0 : init;
  assign w_ctr_inc = sha1_w_mem_ctrl_reg ? (* src = "../rtl/sha1_w_mem.v:312" *) next : 1'b0;
  assign w_ctr_we = w_ctr_inc ? (* src = "../rtl/sha1_w_mem.v:292" *) 1'b1 : sha1_w_mem_ctrl_new;
  assign w_ctr_new = w_ctr_inc ? (* src = "../rtl/sha1_w_mem.v:292" *) _037_ : 7'b0000000;
  assign _034_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) { w_16[30:0], w_16[31] } : 32'd0;
  assign _033_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[15]  : 32'd0;
  assign _032_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[14]  : 32'd0;
  assign _031_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[13]  : 32'd0;
  assign _030_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[12]  : 32'd0;
  assign _029_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[11]  : 32'd0;
  assign _028_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[10]  : 32'd0;
  assign _027_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[9]  : 32'd0;
  assign _026_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[8]  : 32'd0;
  assign _025_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[7]  : 32'd0;
  assign _024_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[6]  : 32'd0;
  assign _023_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[5]  : 32'd0;
  assign _022_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[4]  : 32'd0;
  assign _021_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[3]  : 32'd0;
  assign _020_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[2]  : 32'd0;
  assign _019_ = _035_ ? (* src = "../rtl/sha1_w_mem.v:252" *) \w_mem[1]  : 32'd0;
  assign w_mem_we = init ? (* src = "../rtl/sha1_w_mem.v:231" *) 1'b1 : _035_;
  assign w_mem15_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[31:0] : _034_;
  assign w_mem14_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[63:32] : _033_;
  assign w_mem13_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[95:64] : _032_;
  assign w_mem12_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[127:96] : _031_;
  assign w_mem11_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[159:128] : _030_;
  assign w_mem10_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[191:160] : _029_;
  assign w_mem09_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[223:192] : _028_;
  assign w_mem08_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[255:224] : _027_;
  assign w_mem07_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[287:256] : _026_;
  assign w_mem06_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[319:288] : _025_;
  assign w_mem05_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[351:320] : _024_;
  assign w_mem04_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[383:352] : _023_;
  assign w_mem03_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[415:384] : _022_;
  assign w_mem02_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[447:416] : _021_;
  assign w_mem01_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[479:448] : _020_;
  assign w_mem00_new = init ? (* src = "../rtl/sha1_w_mem.v:231" *) block[511:480] : _019_;
  function [31:0] _116_;
    input [31:0] a;
    input [479:0] b;
    input [14:0] s;
    (* src = "../rtl/sha1_w_mem.v:39" *)
    (* parallel_case *)
    casez (s)
      15'b??????????????1:
        _116_ = b[31:0];
      15'b?????????????1?:
        _116_ = b[63:32];
      15'b????????????1??:
        _116_ = b[95:64];
      15'b???????????1???:
        _116_ = b[127:96];
      15'b??????????1????:
        _116_ = b[159:128];
      15'b?????????1?????:
        _116_ = b[191:160];
      15'b????????1??????:
        _116_ = b[223:192];
      15'b???????1???????:
        _116_ = b[255:224];
      15'b??????1????????:
        _116_ = b[287:256];
      15'b?????1?????????:
        _116_ = b[319:288];
      15'b????1??????????:
        _116_ = b[351:320];
      15'b???1???????????:
        _116_ = b[383:352];
      15'b??1????????????:
        _116_ = b[415:384];
      15'b?1?????????????:
        _116_ = b[447:416];
      15'b1??????????????:
        _116_ = b[479:448];
      default:
        _116_ = a;
    endcase
  endfunction
  assign _018_ = _116_(\w_mem[0] , { \w_mem[1] , \w_mem[2] , \w_mem[3] , \w_mem[4] , \w_mem[5] , \w_mem[6] , \w_mem[7] , \w_mem[8] , \w_mem[9] , \w_mem[10] , \w_mem[11] , \w_mem[12] , \w_mem[13] , \w_mem[14] , \w_mem[15]  }, { _053_, _052_, _051_, _050_, _049_, _048_, _047_, _046_, _045_, _044_, _043_, _042_, _041_, _040_, _039_ });
  assign _039_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 4'b1111;
  assign _040_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 4'b1110;
  assign _041_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 4'b1101;
  assign _042_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 4'b1100;
  assign _043_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 4'b1011;
  assign _044_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 4'b1010;
  assign _045_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 4'b1001;
  assign _046_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 4'b1000;
  assign _047_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 3'b111;
  assign _048_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 3'b110;
  assign _049_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 3'b101;
  assign _050_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 3'b100;
  assign _051_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 2'b11;
  assign _052_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 2'b10;
  assign _053_ = w_ctr_reg[3:0] == (* src = "../rtl/sha1_w_mem.v:39" *) 1'b1;
  assign w = _038_ ? (* src = "../rtl/sha1_w_mem.v:181" *) _018_ : { w_16[30:0], w_16[31] };
  assign _008_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem15_new : \w_mem[15] ;
  assign _007_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem14_new : \w_mem[14] ;
  assign _006_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem13_new : \w_mem[13] ;
  assign _005_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem12_new : \w_mem[12] ;
  assign _004_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem11_new : \w_mem[11] ;
  assign _003_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem10_new : \w_mem[10] ;
  assign _017_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem09_new : \w_mem[9] ;
  assign _016_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem08_new : \w_mem[8] ;
  assign _015_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem07_new : \w_mem[7] ;
  assign _014_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem06_new : \w_mem[6] ;
  assign _013_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem05_new : \w_mem[5] ;
  assign _012_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem04_new : \w_mem[4] ;
  assign _011_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem03_new : \w_mem[3] ;
  assign _010_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem02_new : \w_mem[2] ;
  assign _009_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem01_new : \w_mem[1] ;
  assign _002_ = w_mem_we ? (* src = "../rtl/sha1_w_mem.v:139" *) w_mem00_new : \w_mem[0] ;
  assign _000_ = sha1_w_mem_ctrl_we ? (* src = "../rtl/sha1_w_mem.v:164" *) sha1_w_mem_ctrl_new : sha1_w_mem_ctrl_reg;
  assign _001_ = w_ctr_we ? (* src = "../rtl/sha1_w_mem.v:159" *) w_ctr_new : w_ctr_reg;
  assign _054_ = \w_mem[13]  ^ (* src = "../rtl/sha1_w_mem.v:228" *) \w_mem[8] ;
  assign _055_ = _054_ ^ (* src = "../rtl/sha1_w_mem.v:228" *) \w_mem[2] ;
  assign w_16 = _055_ ^ (* src = "../rtl/sha1_w_mem.v:228" *) \w_mem[0] ;
  assign w_0 = \w_mem[0] ;
  assign w_13 = \w_mem[13] ;
  assign w_2 = \w_mem[2] ;
  assign w_8 = \w_mem[8] ;
  assign w_ctr_rst = sha1_w_mem_ctrl_new;
  assign w_new = { w_16[30:0], w_16[31] };
  assign w_tmp = w;
endmodule

(* top =  1  *)
(* src = "../rtl/sha_top.v:12" *)
module sha_top(clk, rst, wr, addr, data_in, data_out, ack, stb, in_addr_range, xram_addr, xram_data_out, xram_data_in, xram_ack, xram_stb, xram_wr);
  (* src = "../rtl/sha_top.v:384" *)
  wire [15:0] _000_;
  (* src = "../rtl/sha_top.v:384" *)
  wire [5:0] _001_;
  (* src = "../rtl/sha_top.v:384" *)
  wire [15:0] _002_;
  (* src = "../rtl/sha_top.v:384" *)
  wire [511:0] _003_;
  (* src = "../rtl/sha_top.v:384" *)
  wire _004_;
  (* src = "../rtl/sha_top.v:384" *)
  wire [159:0] _005_;
  (* src = "../rtl/sha_top.v:384" *)
  wire [2:0] _006_;
  wire [5:0] _007_;
  wire [15:0] _008_;
  wire [15:0] _009_;
  (* src = "../rtl/sha_top.v:356" *)
  wire [15:0] _010_;
  (* src = "../rtl/sha_top.v:356" *)
  wire [15:0] _011_;
  (* src = "../rtl/sha_top.v:357" *)
  wire [15:0] _012_;
  (* src = "../rtl/sha_top.v:161" *)
  wire [31:0] _013_;
  (* src = "../rtl/sha_top.v:324" *)
  wire [159:0] _014_;
  (* src = "../rtl/sha_top.v:164" *)
  wire _015_;
  (* src = "../rtl/sha_top.v:164" *)
  wire _016_;
  (* src = "../rtl/sha_top.v:175" *)
  wire _017_;
  (* src = "../rtl/sha_top.v:176" *)
  wire _018_;
  (* src = "../rtl/sha_top.v:177" *)
  wire _019_;
  (* src = "../rtl/sha_top.v:178" *)
  wire _020_;
  (* src = "../rtl/sha_top.v:179" *)
  wire _021_;
  (* src = "../rtl/sha_top.v:180" *)
  wire _022_;
  (* src = "../rtl/sha_top.v:181" *)
  wire _023_;
  (* src = "../rtl/sha_top.v:182" *)
  wire _024_;
  (* src = "../rtl/sha_top.v:183" *)
  wire _025_;
  (* src = "../rtl/sha_top.v:184" *)
  wire _026_;
  (* src = "../rtl/sha_top.v:185" *)
  wire _027_;
  (* src = "../rtl/sha_top.v:186" *)
  wire _028_;
  (* src = "../rtl/sha_top.v:187" *)
  wire _029_;
  (* src = "../rtl/sha_top.v:188" *)
  wire _030_;
  (* src = "../rtl/sha_top.v:189" *)
  wire _031_;
  (* src = "../rtl/sha_top.v:190" *)
  wire _032_;
  (* src = "../rtl/sha_top.v:191" *)
  wire _033_;
  (* src = "../rtl/sha_top.v:192" *)
  wire _034_;
  (* src = "../rtl/sha_top.v:193" *)
  wire _035_;
  (* src = "../rtl/sha_top.v:194" *)
  wire _036_;
  (* src = "../rtl/sha_top.v:195" *)
  wire _037_;
  (* src = "../rtl/sha_top.v:196" *)
  wire _038_;
  (* src = "../rtl/sha_top.v:197" *)
  wire _039_;
  (* src = "../rtl/sha_top.v:198" *)
  wire _040_;
  (* src = "../rtl/sha_top.v:199" *)
  wire _041_;
  (* src = "../rtl/sha_top.v:200" *)
  wire _042_;
  (* src = "../rtl/sha_top.v:201" *)
  wire _043_;
  (* src = "../rtl/sha_top.v:202" *)
  wire _044_;
  (* src = "../rtl/sha_top.v:203" *)
  wire _045_;
  (* src = "../rtl/sha_top.v:204" *)
  wire _046_;
  (* src = "../rtl/sha_top.v:205" *)
  wire _047_;
  (* src = "../rtl/sha_top.v:206" *)
  wire _048_;
  (* src = "../rtl/sha_top.v:207" *)
  wire _049_;
  (* src = "../rtl/sha_top.v:208" *)
  wire _050_;
  (* src = "../rtl/sha_top.v:209" *)
  wire _051_;
  (* src = "../rtl/sha_top.v:210" *)
  wire _052_;
  (* src = "../rtl/sha_top.v:211" *)
  wire _053_;
  (* src = "../rtl/sha_top.v:212" *)
  wire _054_;
  (* src = "../rtl/sha_top.v:213" *)
  wire _055_;
  (* src = "../rtl/sha_top.v:214" *)
  wire _056_;
  (* src = "../rtl/sha_top.v:215" *)
  wire _057_;
  (* src = "../rtl/sha_top.v:216" *)
  wire _058_;
  (* src = "../rtl/sha_top.v:217" *)
  wire _059_;
  (* src = "../rtl/sha_top.v:219" *)
  wire _060_;
  (* src = "../rtl/sha_top.v:220" *)
  wire _061_;
  (* src = "../rtl/sha_top.v:221" *)
  wire _062_;
  (* src = "../rtl/sha_top.v:222" *)
  wire _063_;
  (* src = "../rtl/sha_top.v:223" *)
  wire _064_;
  (* src = "../rtl/sha_top.v:224" *)
  wire _065_;
  (* src = "../rtl/sha_top.v:225" *)
  wire _066_;
  (* src = "../rtl/sha_top.v:226" *)
  wire _067_;
  (* src = "../rtl/sha_top.v:227" *)
  wire _068_;
  (* src = "../rtl/sha_top.v:228" *)
  wire _069_;
  (* src = "../rtl/sha_top.v:229" *)
  wire _070_;
  (* src = "../rtl/sha_top.v:230" *)
  wire _071_;
  (* src = "../rtl/sha_top.v:231" *)
  wire _072_;
  (* src = "../rtl/sha_top.v:232" *)
  wire _073_;
  (* src = "../rtl/sha_top.v:233" *)
  wire _074_;
  (* src = "../rtl/sha_top.v:234" *)
  wire _075_;
  (* src = "../rtl/sha_top.v:235" *)
  wire _076_;
  (* src = "../rtl/sha_top.v:236" *)
  wire _077_;
  (* src = "../rtl/sha_top.v:237" *)
  wire _078_;
  (* src = "../rtl/sha_top.v:308" *)
  wire _079_;
  (* src = "../rtl/sha_top.v:169" *)
  wire _080_;
  (* src = "../rtl/sha_top.v:78" *)
  wire _081_;
  (* src = "../rtl/sha_top.v:100" *)
  wire _082_;
  (* src = "../rtl/sha_top.v:100" *)
  wire _083_;
  (* src = "../rtl/sha_top.v:154" *)
  wire _084_;
  (* src = "../rtl/sha_top.v:161" *)
  wire _085_;
  (* src = "../rtl/sha_top.v:268" *)
  wire _086_;
  (* src = "../rtl/sha_top.v:281" *)
  wire _087_;
  (* src = "../rtl/sha_top.v:294" *)
  wire _088_;
  (* src = "../rtl/sha_top.v:308" *)
  wire _089_;
  (* src = "../rtl/sha_top.v:145" *)
  wire _090_;
  (* src = "../rtl/sha_top.v:145" *)
  wire _091_;
  (* src = "../rtl/sha_top.v:168" *)
  wire _092_;
  (* src = "../rtl/sha_top.v:78" *)
  wire _093_;
  (* src = "../rtl/sha_top.v:310" *)
  wire _094_;
  (* src = "../rtl/sha_top.v:123" *)
  wire [2:0] _095_;
  (* src = "../rtl/sha_top.v:123" *)
  wire [2:0] _096_;
  (* src = "../rtl/sha_top.v:123" *)
  wire [2:0] _097_;
  (* src = "../rtl/sha_top.v:123" *)
  wire [2:0] _098_;
  (* src = "../rtl/sha_top.v:135" *)
  wire [2:0] _099_;
  (* src = "../rtl/sha_top.v:147" *)
  wire [5:0] _100_;
  (* src = "../rtl/sha_top.v:147" *)
  wire [5:0] _101_;
  (* src = "../rtl/sha_top.v:154" *)
  wire [31:0] _102_;
  (* src = "../rtl/sha_top.v:240" *)
  wire [511:0] _103_;
  (* src = "../rtl/sha_top.v:260" *)
  wire [7:0] _104_;
  (* src = "../rtl/sha_top.v:260" *)
  wire [7:0] _105_;
  (* src = "../rtl/sha_top.v:260" *)
  wire [7:0] _106_;
  (* src = "../rtl/sha_top.v:357" *)
  wire [15:0] _107_;
  (* src = "../rtl/sha_top.v:378" *)
  wire [7:0] _108_;
  (* src = "../rtl/sha_top.v:378" *)
  wire [7:0] _109_;
  (* src = "../rtl/sha_top.v:378" *)
  wire [7:0] _110_;
  (* src = "../rtl/sha_top.v:378" *)
  wire [7:0] _111_;
  (* src = "../rtl/sha_top.v:378" *)
  wire [7:0] _112_;
  (* src = "../rtl/sha_top.v:378" *)
  wire [7:0] _113_;
  (* src = "../rtl/sha_top.v:378" *)
  wire [7:0] _114_;
  (* src = "../rtl/sha_top.v:378" *)
  wire [7:0] _115_;
  (* src = "../rtl/sha_top.v:378" *)
  wire [7:0] _116_;
  (* src = "../rtl/sha_top.v:378" *)
  wire [7:0] _117_;
  (* src = "../rtl/sha_top.v:378" *)
  wire [7:0] _118_;
  (* src = "../rtl/sha_top.v:378" *)
  wire [7:0] _119_;
  (* src = "../rtl/sha_top.v:378" *)
  wire [7:0] _120_;
  (* src = "../rtl/sha_top.v:378" *)
  wire [7:0] _121_;
  (* src = "../rtl/sha_top.v:378" *)
  wire [7:0] _122_;
  (* src = "../rtl/sha_top.v:378" *)
  wire [7:0] _123_;
  (* src = "../rtl/sha_top.v:378" *)
  wire [7:0] _124_;
  (* src = "../rtl/sha_top.v:378" *)
  wire [7:0] _125_;
  (* src = "../rtl/sha_top.v:378" *)
  wire [7:0] _126_;
  (* src = "../rtl/sha_top.v:47" *)
  output ack;
  (* src = "../rtl/sha_top.v:45" *)
  input [15:0] addr;
  (* src = "../rtl/sha_top.v:157" *)
  reg [15:0] block_counter;
  (* src = "../rtl/sha_top.v:158" *)
  wire [15:0] block_counter_next;
  (* src = "../rtl/sha_top.v:140" *)
  reg [5:0] byte_counter;
  (* src = "../rtl/sha_top.v:141" *)
  wire [5:0] byte_counter_next;
  (* src = "../rtl/sha_top.v:142" *)
  wire [5:0] byte_counter_next_rw;
  (* src = "../rtl/sha_top.v:151" *)
  wire [15:0] bytes_read_next;
  (* src = "../rtl/sha_top.v:43" *)
  input clk;
  (* src = "../rtl/sha_top.v:44" *)
  input [7:0] data_in;
  (* src = "../rtl/sha_top.v:46" *)
  output [7:0] data_out;
  (* src = "../rtl/sha_top.v:247" *)
  wire [7:0] data_out_len;
  (* src = "../rtl/sha_top.v:247" *)
  wire [7:0] data_out_rd_addr;
  (* src = "../rtl/sha_top.v:247" *)
  wire [7:0] data_out_state;
  (* src = "../rtl/sha_top.v:247" *)
  wire [7:0] data_out_wr_addr;
  (* src = "../rtl/sha_top.v:48" *)
  output in_addr_range;
  (* src = "../rtl/sha_top.v:165" *)
  wire read_last_byte_acked;
  (* src = "../rtl/sha_top.v:164" *)
  wire reading_last_byte;
  (* src = "../rtl/sha_top.v:150" *)
  reg [15:0] reg_bytes_read;
  (* src = "../rtl/sha_top.v:43" *)
  input rst;
  (* src = "../rtl/sha_top.v:97" *)
  wire sel_reg_len;
  (* src = "../rtl/sha_top.v:95" *)
  wire sel_reg_rd_addr;
  (* src = "../rtl/sha_top.v:93" *)
  wire sel_reg_start;
  (* src = "../rtl/sha_top.v:94" *)
  wire sel_reg_state;
  (* src = "../rtl/sha_top.v:96" *)
  wire sel_reg_wr_addr;
  (* src = "../rtl/sha_top.v:318" *)
  reg [511:0] sha_core_block;
  (* src = "../rtl/sha_top.v:239" *)
  wire [511:0] sha_core_block_next;
  (* src = "../rtl/sha_top.v:172" *)
  wire [511:0] sha_core_block_read_data_next;
  (* src = "../rtl/sha_top.v:320" *)
  wire [159:0] sha_core_digest;
  (* src = "../rtl/sha_top.v:316" *)
  wire sha_core_digest_valid;
  (* src = "../rtl/sha_top.v:308" *)
  wire sha_core_init;
  (* src = "../rtl/sha_top.v:310" *)
  wire sha_core_next;
  (* src = "../rtl/sha_top.v:312" *)
  wire sha_core_ready;
  (* src = "../rtl/sha_top.v:314" *)
  reg sha_core_ready_r;
  (* src = "../rtl/sha_top.v:306" *)
  wire sha_core_rst_n;
  (* src = "../rtl/sha_top.v:169" *)
  wire sha_finished;
  (* src = "../rtl/sha_top.v:58" *)
  wire [15:0] sha_len;
  (* src = "../rtl/sha_top.v:168" *)
  wire sha_more_blocks;
  (* src = "../rtl/sha_top.v:58" *)
  wire [15:0] sha_rdaddr;
  (* src = "../rtl/sha_top.v:322" *)
  reg [159:0] sha_reg_digest;
  wire [67:0] sha_reg_digest_next;
  (* src = "../rtl/sha_top.v:289" *)
  wire [15:0] sha_reg_len;
  (* src = "../rtl/sha_top.v:263" *)
  wire [15:0] sha_reg_rd_addr;
  (* src = "../rtl/sha_top.v:82" *)
  reg [2:0] sha_reg_state;
  (* src = "../rtl/sha_top.v:276" *)
  wire [15:0] sha_reg_wr_addr;
  (* src = "../rtl/sha_top.v:57" *)
  wire [2:0] sha_state;
  (* src = "../rtl/sha_top.v:86" *)
  wire sha_state_idle;
  (* src = "../rtl/sha_top.v:110" *)
  wire [2:0] sha_state_next;
  wire sha_state_next_idle;
  (* src = "../rtl/sha_top.v:115" *)
  wire [2:0] sha_state_next_op2;
  wire [1:0] sha_state_next_read_data;
  (* src = "../rtl/sha_top.v:116" *)
  wire [2:0] sha_state_next_write_data;
  (* src = "../rtl/sha_top.v:88" *)
  wire sha_state_op1;
  (* src = "../rtl/sha_top.v:89" *)
  wire sha_state_op2;
  (* src = "../rtl/sha_top.v:87" *)
  wire sha_state_read_data;
  (* src = "../rtl/sha_top.v:90" *)
  wire sha_state_write_data;
  (* src = "../rtl/sha_top.v:58" *)
  wire [15:0] sha_wraddr;
  (* src = "../rtl/sha_top.v:100" *)
  wire start_op;
  (* src = "../rtl/sha_top.v:43" *)
  input stb;
  (* src = "../rtl/sha_top.v:43" *)
  input wr;
  (* src = "../rtl/sha_top.v:98" *)
  wire wren;
  (* src = "../rtl/sha_top.v:245" *)
  wire write_last_byte_acked;
  (* src = "../rtl/sha_top.v:244" *)
  wire writing_last_byte;
  (* src = "../rtl/sha_top.v:53" *)
  input xram_ack;
  (* src = "../rtl/sha_top.v:50" *)
  output [15:0] xram_addr;
  (* src = "../rtl/sha_top.v:52" *)
  input [7:0] xram_data_in;
  (* src = "../rtl/sha_top.v:51" *)
  output [7:0] xram_data_out;
  (* src = "../rtl/sha_top.v:54" *)
  output xram_stb;
  (* src = "../rtl/sha_top.v:55" *)
  output xram_wr;
  assign _007_ = byte_counter + (* src = "../rtl/sha_top.v:143" *) 1'b1;
  assign _008_ = reg_bytes_read + (* src = "../rtl/sha_top.v:154" *) 1'b1;
  assign _009_ = block_counter + (* src = "../rtl/sha_top.v:161" *) 7'b1000000;
  assign _010_ = sha_reg_rd_addr + (* src = "../rtl/sha_top.v:356" *) byte_counter;
  assign _011_ = _010_ + (* src = "../rtl/sha_top.v:356" *) block_counter;
  assign _012_ = sha_reg_wr_addr + (* src = "../rtl/sha_top.v:357" *) byte_counter;
  assign _015_ = byte_counter == (* src = "../rtl/sha_top.v:164" *) 6'b111111;
  assign _016_ = bytes_read_next == (* src = "../rtl/sha_top.v:164" *) sha_reg_len;
  assign _017_ = byte_counter == (* src = "../rtl/sha_top.v:175" *) 6'b111110;
  assign _018_ = byte_counter == (* src = "../rtl/sha_top.v:176" *) 6'b111101;
  assign _019_ = byte_counter == (* src = "../rtl/sha_top.v:177" *) 6'b111100;
  assign _020_ = byte_counter == (* src = "../rtl/sha_top.v:178" *) 6'b111011;
  assign _021_ = byte_counter == (* src = "../rtl/sha_top.v:179" *) 6'b111010;
  assign _022_ = byte_counter == (* src = "../rtl/sha_top.v:180" *) 6'b111001;
  assign _023_ = byte_counter == (* src = "../rtl/sha_top.v:181" *) 6'b111000;
  assign _024_ = byte_counter == (* src = "../rtl/sha_top.v:182" *) 6'b110111;
  assign _025_ = byte_counter == (* src = "../rtl/sha_top.v:183" *) 6'b110110;
  assign _026_ = byte_counter == (* src = "../rtl/sha_top.v:184" *) 6'b110101;
  assign _027_ = byte_counter == (* src = "../rtl/sha_top.v:185" *) 6'b110100;
  assign _028_ = byte_counter == (* src = "../rtl/sha_top.v:186" *) 6'b110011;
  assign _029_ = byte_counter == (* src = "../rtl/sha_top.v:187" *) 6'b110010;
  assign _030_ = byte_counter == (* src = "../rtl/sha_top.v:188" *) 6'b110001;
  assign _031_ = byte_counter == (* src = "../rtl/sha_top.v:189" *) 6'b110000;
  assign _032_ = byte_counter == (* src = "../rtl/sha_top.v:190" *) 6'b101111;
  assign _033_ = byte_counter == (* src = "../rtl/sha_top.v:191" *) 6'b101110;
  assign _034_ = byte_counter == (* src = "../rtl/sha_top.v:192" *) 6'b101101;
  assign _035_ = byte_counter == (* src = "../rtl/sha_top.v:193" *) 6'b101100;
  assign _036_ = byte_counter == (* src = "../rtl/sha_top.v:194" *) 6'b101011;
  assign _037_ = byte_counter == (* src = "../rtl/sha_top.v:195" *) 6'b101010;
  assign _038_ = byte_counter == (* src = "../rtl/sha_top.v:196" *) 6'b101001;
  assign _039_ = byte_counter == (* src = "../rtl/sha_top.v:197" *) 6'b101000;
  assign _040_ = byte_counter == (* src = "../rtl/sha_top.v:198" *) 6'b100111;
  assign _041_ = byte_counter == (* src = "../rtl/sha_top.v:199" *) 6'b100110;
  assign _042_ = byte_counter == (* src = "../rtl/sha_top.v:200" *) 6'b100101;
  assign _043_ = byte_counter == (* src = "../rtl/sha_top.v:201" *) 6'b100100;
  assign _044_ = byte_counter == (* src = "../rtl/sha_top.v:202" *) 6'b100011;
  assign _045_ = byte_counter == (* src = "../rtl/sha_top.v:203" *) 6'b100010;
  assign _046_ = byte_counter == (* src = "../rtl/sha_top.v:204" *) 6'b100001;
  assign _047_ = byte_counter == (* src = "../rtl/sha_top.v:205" *) 6'b100000;
  assign _048_ = byte_counter == (* src = "../rtl/sha_top.v:206" *) 5'b11111;
  assign _049_ = byte_counter == (* src = "../rtl/sha_top.v:207" *) 5'b11110;
  assign _050_ = byte_counter == (* src = "../rtl/sha_top.v:208" *) 5'b11101;
  assign _051_ = byte_counter == (* src = "../rtl/sha_top.v:209" *) 5'b11100;
  assign _052_ = byte_counter == (* src = "../rtl/sha_top.v:210" *) 5'b11011;
  assign _053_ = byte_counter == (* src = "../rtl/sha_top.v:211" *) 5'b11010;
  assign _054_ = byte_counter == (* src = "../rtl/sha_top.v:212" *) 5'b11001;
  assign _055_ = byte_counter == (* src = "../rtl/sha_top.v:213" *) 5'b11000;
  assign _056_ = byte_counter == (* src = "../rtl/sha_top.v:214" *) 5'b10111;
  assign _057_ = byte_counter == (* src = "../rtl/sha_top.v:215" *) 5'b10110;
  assign _058_ = byte_counter == (* src = "../rtl/sha_top.v:216" *) 5'b10101;
  assign _059_ = byte_counter == (* src = "../rtl/sha_top.v:217" *) 5'b10100;
  assign writing_last_byte = byte_counter == (* src = "../rtl/sha_top.v:218" *) 5'b10011;
  assign _060_ = byte_counter == (* src = "../rtl/sha_top.v:219" *) 5'b10010;
  assign _061_ = byte_counter == (* src = "../rtl/sha_top.v:220" *) 5'b10001;
  assign _062_ = byte_counter == (* src = "../rtl/sha_top.v:221" *) 5'b10000;
  assign _063_ = byte_counter == (* src = "../rtl/sha_top.v:222" *) 4'b1111;
  assign _064_ = byte_counter == (* src = "../rtl/sha_top.v:223" *) 4'b1110;
  assign _065_ = byte_counter == (* src = "../rtl/sha_top.v:224" *) 4'b1101;
  assign _066_ = byte_counter == (* src = "../rtl/sha_top.v:225" *) 4'b1100;
  assign _067_ = byte_counter == (* src = "../rtl/sha_top.v:226" *) 4'b1011;
  assign _068_ = byte_counter == (* src = "../rtl/sha_top.v:227" *) 4'b1010;
  assign _069_ = byte_counter == (* src = "../rtl/sha_top.v:228" *) 4'b1001;
  assign _070_ = byte_counter == (* src = "../rtl/sha_top.v:229" *) 4'b1000;
  assign _071_ = byte_counter == (* src = "../rtl/sha_top.v:230" *) 3'b111;
  assign _072_ = byte_counter == (* src = "../rtl/sha_top.v:231" *) 3'b110;
  assign _073_ = byte_counter == (* src = "../rtl/sha_top.v:232" *) 3'b101;
  assign _074_ = byte_counter == (* src = "../rtl/sha_top.v:233" *) 3'b100;
  assign _075_ = byte_counter == (* src = "../rtl/sha_top.v:234" *) 2'b11;
  assign _076_ = byte_counter == (* src = "../rtl/sha_top.v:235" *) 2'b10;
  assign _077_ = byte_counter == (* src = "../rtl/sha_top.v:236" *) 1'b1;
  assign _078_ = ! (* src = "../rtl/sha_top.v:237" *) byte_counter;
  assign _079_ = ! (* src = "../rtl/sha_top.v:308" *) block_counter;
  assign sha_state_idle = ! (* src = "../rtl/sha_top.v:86" *) sha_reg_state;
  assign sha_state_read_data = sha_reg_state == (* src = "../rtl/sha_top.v:87" *) 1'b1;
  assign sha_state_op1 = sha_reg_state == (* src = "../rtl/sha_top.v:88" *) 2'b10;
  assign sha_state_op2 = sha_reg_state == (* src = "../rtl/sha_top.v:89" *) 2'b11;
  assign sha_state_write_data = sha_reg_state == (* src = "../rtl/sha_top.v:90" *) 3'b100;
  assign sel_reg_start = addr == (* src = "../rtl/sha_top.v:93" *) 16'b1111111000000000;
  assign sel_reg_state = addr == (* src = "../rtl/sha_top.v:94" *) 16'b1111111000000001;
  assign sel_reg_rd_addr = addr[15:1] == (* src = "../rtl/sha_top.v:95" *) 15'b111111100000001;
  assign sel_reg_wr_addr = addr[15:1] == (* src = "../rtl/sha_top.v:96" *) 15'b111111100000010;
  assign sel_reg_len = addr[15:1] == (* src = "../rtl/sha_top.v:97" *) 15'b111111100000011;
  assign _080_ = reg_bytes_read >= (* src = "../rtl/sha_top.v:169" *) sha_reg_len;
  assign _081_ = addr >= (* src = "../rtl/sha_top.v:78" *) 16'b1111111000000000;
  assign _082_ = sel_reg_start && (* src = "../rtl/sha_top.v:100" *) data_in[0];
  assign _083_ = _082_ && (* src = "../rtl/sha_top.v:100" *) stb;
  assign start_op = _083_ && (* src = "../rtl/sha_top.v:100" *) wren;
  assign _084_ = sha_state_read_data && (* src = "../rtl/sha_top.v:154" *) xram_ack;
  assign _085_ = sha_state_op2 && (* src = "../rtl/sha_top.v:161" *) sha_more_blocks;
  assign read_last_byte_acked = reading_last_byte && (* src = "../rtl/sha_top.v:165" *) xram_ack;
  assign sha_more_blocks = sha_core_digest_valid && (* src = "../rtl/sha_top.v:168" *) _092_;
  assign sha_finished = sha_core_digest_valid && (* src = "../rtl/sha_top.v:169" *) _080_;
  assign write_last_byte_acked = writing_last_byte && (* src = "../rtl/sha_top.v:245" *) xram_ack;
  assign _086_ = sel_reg_rd_addr && (* src = "../rtl/sha_top.v:268" *) wren;
  assign _087_ = sel_reg_wr_addr && (* src = "../rtl/sha_top.v:281" *) wren;
  assign _088_ = sel_reg_len && (* src = "../rtl/sha_top.v:294" *) wren;
  assign _089_ = sha_state_op1 && (* src = "../rtl/sha_top.v:308" *) sha_core_ready_r;
  assign sha_core_init = _089_ && (* src = "../rtl/sha_top.v:308" *) _079_;
  assign sha_core_next = _089_ && (* src = "../rtl/sha_top.v:310" *) _094_;
  assign in_addr_range = _081_ && (* src = "../rtl/sha_top.v:78" *) _093_;
  assign ack = stb && (* src = "../rtl/sha_top.v:79" *) in_addr_range;
  assign wren = wr && (* src = "../rtl/sha_top.v:98" *) sha_state_idle;
  assign sha_core_rst_n = ! (* src = "../rtl/sha_top.v:306" *) rst;
  assign _090_ = sha_state_idle || (* src = "../rtl/sha_top.v:145" *) sha_state_op1;
  assign _091_ = _090_ || (* src = "../rtl/sha_top.v:145" *) sha_state_op2;
  assign reading_last_byte = _015_ || (* src = "../rtl/sha_top.v:164" *) _016_;
  assign xram_stb = sha_state_read_data || (* src = "../rtl/sha_top.v:380" *) sha_state_write_data;
  assign _092_ = reg_bytes_read < (* src = "../rtl/sha_top.v:168" *) sha_reg_len;
  assign _093_ = addr < (* src = "../rtl/sha_top.v:78" *) 16'b1111111000010000;
  assign _094_ = | (* src = "../rtl/sha_top.v:310" *) block_counter;
  always @(posedge clk)
      sha_reg_state <= _006_;
  always @(posedge clk)
      byte_counter <= _001_;
  always @(posedge clk)
      reg_bytes_read <= _002_;
  always @(posedge clk)
      block_counter <= _000_;
  always @(posedge clk)
      sha_core_ready_r <= _004_;
  always @(posedge clk)
      sha_core_block <= _003_;
  always @(posedge clk)
      sha_reg_digest <= _005_;
  assign _005_ = rst ? (* src = "../rtl/sha_top.v:386" *) 160'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : { _014_[159:68], sha_reg_digest_next };
  assign _003_ = rst ? (* src = "../rtl/sha_top.v:386" *) 512'bsha_core_block_next;
  assign _004_ = rst ? (* src = "../rtl/sha_top.v:386" *) 1'b0 : sha_core_ready;
  assign _000_ = rst ? (* src = "../rtl/sha_top.v:386" *) 16'b0000000000000000 : block_counter_next;
  assign _002_ = rst ? (* src = "../rtl/sha_top.v:386" *) 16'b0000000000000000 : bytes_read_next;
  assign _001_ = rst ? (* src = "../rtl/sha_top.v:386" *) 6'b000000 : byte_counter_next;
  assign _006_ = rst ? (* src = "../rtl/sha_top.v:386" *) 3'b000 : sha_state_next;
  assign _095_ = sha_state_write_data ? (* src = "../rtl/sha_top.v:123" *) sha_state_next_write_data : 3'b000;
  assign _096_ = sha_state_op2 ? (* src = "../rtl/sha_top.v:123" *) sha_state_next_op2 : _095_;
  assign _097_ = sha_state_op1 ? (* src = "../rtl/sha_top.v:123" *) 3'b011 : _096_;
  assign _098_ = sha_state_read_data ? (* src = "../rtl/sha_top.v:123" *) { 1'b0, sha_state_next_read_data } : _097_;
  assign sha_state_next = sha_state_idle ? (* src = "../rtl/sha_top.v:123" *) { 2'b00, start_op } : _098_;
  assign sha_state_next_read_data = read_last_byte_acked ? (* src = "../rtl/sha_top.v:130" *) 2'b10 : 2'b01;
  assign _099_[1:0] = sha_more_blocks ? (* src = "../rtl/sha_top.v:135" *) 2'b01 : 2'b11;
  assign sha_state_next_op2 = sha_finished ? (* src = "../rtl/sha_top.v:135" *) 3'b100 : { 1'b0, _099_[1:0] };
  assign sha_state_next_write_data = write_last_byte_acked ? (* src = "../rtl/sha_top.v:137" *) 3'b000 : 3'b100;
  assign byte_counter_next_rw = xram_ack ? (* src = "../rtl/sha_top.v:143" *) _007_ : byte_counter;
  assign _100_ = sha_state_write_data ? (* src = "../rtl/sha_top.v:147" *) byte_counter_next_rw : byte_counter;
  assign _101_ = sha_state_read_data ? (* src = "../rtl/sha_top.v:147" *) byte_counter_next_rw : _100_;
  assign byte_counter_next = _091_ ? (* src = "../rtl/sha_top.v:147" *) 6'b000000 : _101_;
  assign _102_[15:0] = _084_ ? (* src = "../rtl/sha_top.v:154" *) _008_ : reg_bytes_read;
  assign bytes_read_next = sha_state_idle ? (* src = "../rtl/sha_top.v:154" *) 16'b0000000000000000 : _102_[15:0];
  assign _013_[15:0] = _085_ ? (* src = "../rtl/sha_top.v:161" *) _009_ : block_counter;
  assign block_counter_next = sha_state_idle ? (* src = "../rtl/sha_top.v:161" *) 16'b0000000000000000 : _013_[15:0];
  assign sha_core_block_read_data_next[7:0] = _015_ ? (* src = "../rtl/sha_top.v:174" *) xram_data_in : sha_core_block[7:0];
  assign sha_core_block_read_data_next[15:8] = _017_ ? (* src = "../rtl/sha_top.v:175" *) xram_data_in : sha_core_block[15:8];
  assign sha_core_block_read_data_next[23:16] = _018_ ? (* src = "../rtl/sha_top.v:176" *) xram_data_in : sha_core_block[23:16];
  assign sha_core_block_read_data_next[31:24] = _019_ ? (* src = "../rtl/sha_top.v:177" *) xram_data_in : sha_core_block[31:24];
  assign sha_core_block_read_data_next[39:32] = _020_ ? (* src = "../rtl/sha_top.v:178" *) xram_data_in : sha_core_block[39:32];
  assign sha_core_block_read_data_next[47:40] = _021_ ? (* src = "../rtl/sha_top.v:179" *) xram_data_in : sha_core_block[47:40];
  assign sha_core_block_read_data_next[55:48] = _022_ ? (* src = "../rtl/sha_top.v:180" *) xram_data_in : sha_core_block[55:48];
  assign sha_core_block_read_data_next[63:56] = _023_ ? (* src = "../rtl/sha_top.v:181" *) xram_data_in : sha_core_block[63:56];
  assign sha_core_block_read_data_next[71:64] = _024_ ? (* src = "../rtl/sha_top.v:182" *) xram_data_in : sha_core_block[71:64];
  assign sha_core_block_read_data_next[79:72] = _025_ ? (* src = "../rtl/sha_top.v:183" *) xram_data_in : sha_core_block[79:72];
  assign sha_core_block_read_data_next[87:80] = _026_ ? (* src = "../rtl/sha_top.v:184" *) xram_data_in : sha_core_block[87:80];
  assign sha_core_block_read_data_next[95:88] = _027_ ? (* src = "../rtl/sha_top.v:185" *) xram_data_in : sha_core_block[95:88];
  assign sha_core_block_read_data_next[103:96] = _028_ ? (* src = "../rtl/sha_top.v:186" *) xram_data_in : sha_core_block[103:96];
  assign sha_core_block_read_data_next[111:104] = _029_ ? (* src = "../rtl/sha_top.v:187" *) xram_data_in : sha_core_block[111:104];
  assign sha_core_block_read_data_next[119:112] = _030_ ? (* src = "../rtl/sha_top.v:188" *) xram_data_in : sha_core_block[119:112];
  assign sha_core_block_read_data_next[127:120] = _031_ ? (* src = "../rtl/sha_top.v:189" *) xram_data_in : sha_core_block[127:120];
  assign sha_core_block_read_data_next[135:128] = _032_ ? (* src = "../rtl/sha_top.v:190" *) xram_data_in : sha_core_block[135:128];
  assign sha_core_block_read_data_next[143:136] = _033_ ? (* src = "../rtl/sha_top.v:191" *) xram_data_in : sha_core_block[143:136];
  assign sha_core_block_read_data_next[151:144] = _034_ ? (* src = "../rtl/sha_top.v:192" *) xram_data_in : sha_core_block[151:144];
  assign sha_core_block_read_data_next[159:152] = _035_ ? (* src = "../rtl/sha_top.v:193" *) xram_data_in : sha_core_block[159:152];
  assign sha_core_block_read_data_next[167:160] = _036_ ? (* src = "../rtl/sha_top.v:194" *) xram_data_in : sha_core_block[167:160];
  assign sha_core_block_read_data_next[175:168] = _037_ ? (* src = "../rtl/sha_top.v:195" *) xram_data_in : sha_core_block[175:168];
  assign sha_core_block_read_data_next[183:176] = _038_ ? (* src = "../rtl/sha_top.v:196" *) xram_data_in : sha_core_block[183:176];
  assign sha_core_block_read_data_next[191:184] = _039_ ? (* src = "../rtl/sha_top.v:197" *) xram_data_in : sha_core_block[191:184];
  assign sha_core_block_read_data_next[199:192] = _040_ ? (* src = "../rtl/sha_top.v:198" *) xram_data_in : sha_core_block[199:192];
  assign sha_core_block_read_data_next[207:200] = _041_ ? (* src = "../rtl/sha_top.v:199" *) xram_data_in : sha_core_block[207:200];
  assign sha_core_block_read_data_next[215:208] = _042_ ? (* src = "../rtl/sha_top.v:200" *) xram_data_in : sha_core_block[215:208];
  assign sha_core_block_read_data_next[223:216] = _043_ ? (* src = "../rtl/sha_top.v:201" *) xram_data_in : sha_core_block[223:216];
  assign sha_core_block_read_data_next[231:224] = _044_ ? (* src = "../rtl/sha_top.v:202" *) xram_data_in : sha_core_block[231:224];
  assign sha_core_block_read_data_next[239:232] = _045_ ? (* src = "../rtl/sha_top.v:203" *) xram_data_in : sha_core_block[239:232];
  assign sha_core_block_read_data_next[247:240] = _046_ ? (* src = "../rtl/sha_top.v:204" *) xram_data_in : sha_core_block[247:240];
  assign sha_core_block_read_data_next[255:248] = _047_ ? (* src = "../rtl/sha_top.v:205" *) xram_data_in : sha_core_block[255:248];
  assign sha_core_block_read_data_next[263:256] = _048_ ? (* src = "../rtl/sha_top.v:206" *) xram_data_in : sha_core_block[263:256];
  assign sha_core_block_read_data_next[271:264] = _049_ ? (* src = "../rtl/sha_top.v:207" *) xram_data_in : sha_core_block[271:264];
  assign sha_core_block_read_data_next[279:272] = _050_ ? (* src = "../rtl/sha_top.v:208" *) xram_data_in : sha_core_block[279:272];
  assign sha_core_block_read_data_next[287:280] = _051_ ? (* src = "../rtl/sha_top.v:209" *) xram_data_in : sha_core_block[287:280];
  assign sha_core_block_read_data_next[295:288] = _052_ ? (* src = "../rtl/sha_top.v:210" *) xram_data_in : sha_core_block[295:288];
  assign sha_core_block_read_data_next[303:296] = _053_ ? (* src = "../rtl/sha_top.v:211" *) xram_data_in : sha_core_block[303:296];
  assign sha_core_block_read_data_next[311:304] = _054_ ? (* src = "../rtl/sha_top.v:212" *) xram_data_in : sha_core_block[311:304];
  assign sha_core_block_read_data_next[319:312] = _055_ ? (* src = "../rtl/sha_top.v:213" *) xram_data_in : sha_core_block[319:312];
  assign sha_core_block_read_data_next[327:320] = _056_ ? (* src = "../rtl/sha_top.v:214" *) xram_data_in : sha_core_block[327:320];
  assign sha_core_block_read_data_next[335:328] = _057_ ? (* src = "../rtl/sha_top.v:215" *) xram_data_in : sha_core_block[335:328];
  assign sha_core_block_read_data_next[343:336] = _058_ ? (* src = "../rtl/sha_top.v:216" *) xram_data_in : sha_core_block[343:336];
  assign sha_core_block_read_data_next[351:344] = _059_ ? (* src = "../rtl/sha_top.v:217" *) xram_data_in : sha_core_block[351:344];
  assign sha_core_block_read_data_next[359:352] = writing_last_byte ? (* src = "../rtl/sha_top.v:218" *) xram_data_in : sha_core_block[359:352];
  assign sha_core_block_read_data_next[367:360] = _060_ ? (* src = "../rtl/sha_top.v:219" *) xram_data_in : sha_core_block[367:360];
  assign sha_core_block_read_data_next[375:368] = _061_ ? (* src = "../rtl/sha_top.v:220" *) xram_data_in : sha_core_block[375:368];
  assign sha_core_block_read_data_next[383:376] = _062_ ? (* src = "../rtl/sha_top.v:221" *) xram_data_in : sha_core_block[383:376];
  assign sha_core_block_read_data_next[391:384] = _063_ ? (* src = "../rtl/sha_top.v:222" *) xram_data_in : sha_core_block[391:384];
  assign sha_core_block_read_data_next[399:392] = _064_ ? (* src = "../rtl/sha_top.v:223" *) xram_data_in : sha_core_block[399:392];
  assign sha_core_block_read_data_next[407:400] = _065_ ? (* src = "../rtl/sha_top.v:224" *) xram_data_in : sha_core_block[407:400];
  assign sha_core_block_read_data_next[415:408] = _066_ ? (* src = "../rtl/sha_top.v:225" *) xram_data_in : sha_core_block[415:408];
  assign sha_core_block_read_data_next[423:416] = _067_ ? (* src = "../rtl/sha_top.v:226" *) xram_data_in : sha_core_block[423:416];
  assign sha_core_block_read_data_next[431:424] = _068_ ? (* src = "../rtl/sha_top.v:227" *) xram_data_in : sha_core_block[431:424];
  assign sha_core_block_read_data_next[439:432] = _069_ ? (* src = "../rtl/sha_top.v:228" *) xram_data_in : sha_core_block[439:432];
  assign sha_core_block_read_data_next[447:440] = _070_ ? (* src = "../rtl/sha_top.v:229" *) xram_data_in : sha_core_block[447:440];
  assign sha_core_block_read_data_next[455:448] = _071_ ? (* src = "../rtl/sha_top.v:230" *) xram_data_in : sha_core_block[455:448];
  assign sha_core_block_read_data_next[463:456] = _072_ ? (* src = "../rtl/sha_top.v:231" *) xram_data_in : sha_core_block[463:456];
  assign sha_core_block_read_data_next[471:464] = _073_ ? (* src = "../rtl/sha_top.v:232" *) xram_data_in : sha_core_block[471:464];
  assign sha_core_block_read_data_next[479:472] = _074_ ? (* src = "../rtl/sha_top.v:233" *) xram_data_in : sha_core_block[479:472];
  assign sha_core_block_read_data_next[487:480] = _075_ ? (* src = "../rtl/sha_top.v:234" *) xram_data_in : sha_core_block[487:480];
  assign sha_core_block_read_data_next[495:488] = _076_ ? (* src = "../rtl/sha_top.v:235" *) xram_data_in : sha_core_block[495:488];
  assign sha_core_block_read_data_next[503:496] = _077_ ? (* src = "../rtl/sha_top.v:236" *) xram_data_in : sha_core_block[503:496];
  assign sha_core_block_read_data_next[511:504] = _078_ ? (* src = "../rtl/sha_top.v:237" *) xram_data_in : sha_core_block[511:504];
  assign _103_ = sha_state_read_data ? (* src = "../rtl/sha_top.v:240" *) sha_core_block_read_data_next : sha_core_block;
  assign sha_core_block_next = sha_state_idle ? (* src = "../rtl/sha_top.v:240" *) 512'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : _103_;
  assign _104_ = sel_reg_len ? (* src = "../rtl/sha_top.v:260" *) data_out_len : 8'b00000000;
  assign _105_ = sel_reg_wr_addr ? (* src = "../rtl/sha_top.v:260" *) data_out_wr_addr : _104_;
  assign _106_ = sel_reg_rd_addr ? (* src = "../rtl/sha_top.v:260" *) data_out_rd_addr : _105_;
  assign data_out = sel_reg_state ? (* src = "../rtl/sha_top.v:260" *) { 5'b00000, sha_reg_state } : _106_;
  assign { _014_[159:68], sha_reg_digest_next } = sha_core_digest_valid ? (* src = "../rtl/sha_top.v:325" *) sha_core_digest : sha_reg_digest;
  assign _107_ = sha_state_write_data ? (* src = "../rtl/sha_top.v:357" *) _012_ : 16'b0000000000000000;
  assign xram_addr = sha_state_read_data ? (* src = "../rtl/sha_top.v:357" *) _011_ : _107_;
  assign _108_ = _078_ ? (* src = "../rtl/sha_top.v:378" *) sha_reg_digest[159:152] : 8'b00000000;
  assign _109_ = _077_ ? (* src = "../rtl/sha_top.v:378" *) sha_reg_digest[151:144] : _108_;
  assign _110_ = _076_ ? (* src = "../rtl/sha_top.v:378" *) sha_reg_digest[143:136] : _109_;
  assign _111_ = _075_ ? (* src = "../rtl/sha_top.v:378" *) sha_reg_digest[135:128] : _110_;
  assign _112_ = _074_ ? (* src = "../rtl/sha_top.v:378" *) sha_reg_digest[127:120] : _111_;
  assign _113_ = _073_ ? (* src = "../rtl/sha_top.v:378" *) sha_reg_digest[119:112] : _112_;
  assign _114_ = _072_ ? (* src = "../rtl/sha_top.v:378" *) sha_reg_digest[111:104] : _113_;
  assign _115_ = _071_ ? (* src = "../rtl/sha_top.v:378" *) sha_reg_digest[103:96] : _114_;
  assign _116_ = _070_ ? (* src = "../rtl/sha_top.v:378" *) sha_reg_digest[95:88] : _115_;
  assign _117_ = _069_ ? (* src = "../rtl/sha_top.v:378" *) sha_reg_digest[87:80] : _116_;
  assign _118_ = _068_ ? (* src = "../rtl/sha_top.v:378" *) sha_reg_digest[79:72] : _117_;
  assign _119_ = _067_ ? (* src = "../rtl/sha_top.v:378" *) sha_reg_digest[71:64] : _118_;
  assign _120_ = _066_ ? (* src = "../rtl/sha_top.v:378" *) sha_reg_digest[63:56] : _119_;
  assign _121_ = _065_ ? (* src = "../rtl/sha_top.v:378" *) sha_reg_digest[55:48] : _120_;
  assign _122_ = _064_ ? (* src = "../rtl/sha_top.v:378" *) sha_reg_digest[47:40] : _121_;
  assign _123_ = _063_ ? (* src = "../rtl/sha_top.v:378" *) sha_reg_digest[39:32] : _122_;
  assign _124_ = _062_ ? (* src = "../rtl/sha_top.v:378" *) sha_reg_digest[31:24] : _123_;
  assign _125_ = _061_ ? (* src = "../rtl/sha_top.v:378" *) sha_reg_digest[23:16] : _124_;
  assign _126_ = _060_ ? (* src = "../rtl/sha_top.v:378" *) sha_reg_digest[15:8] : _125_;
  assign xram_data_out = writing_last_byte ? (* src = "../rtl/sha_top.v:378" *) sha_reg_digest[7:0] : _126_;
  (* src = "../rtl/sha_top.v:344" *)
  sha1_core sha1_core_i (
    .block(sha_core_block),
    .clk(clk),
    .digest(sha_core_digest),
    .digest_valid(sha_core_digest_valid),
    .init(sha_core_init),
    .next(sha_core_next),
    .ready(sha_core_ready),
    .reset_n(sha_core_rst_n)
  );
  (* src = "../rtl/sha_top.v:290" *)
  reg2byte sha_reg_len_i (
    .addr(addr[0]),
    .clk(clk),
    .data_in(data_in),
    .data_out(data_out_len),
    .en(sel_reg_len),
    .reg_out(sha_reg_len),
    .rst(rst),
    .wr(_088_)
  );
  (* src = "../rtl/sha_top.v:264" *)
  reg2byte sha_reg_rd_addr_i (
    .addr(addr[0]),
    .clk(clk),
    .data_in(data_in),
    .data_out(data_out_rd_addr),
    .en(sel_reg_rd_addr),
    .reg_out(sha_reg_rd_addr),
    .rst(rst),
    .wr(_086_)
  );
  (* src = "../rtl/sha_top.v:277" *)
  reg2byte sha_reg_wr_addr_i (
    .addr(addr[0]),
    .clk(clk),
    .data_in(data_in),
    .data_out(data_out_wr_addr),
    .en(sel_reg_wr_addr),
    .reg_out(sha_reg_wr_addr),
    .rst(rst),
    .wr(_087_)
  );
  assign data_out_state = { 5'b00000, sha_reg_state };
  assign sha_len = sha_reg_len;
  assign sha_rdaddr = sha_reg_rd_addr;
  assign sha_state = sha_reg_state;
  assign sha_state_next_idle = start_op;
  assign sha_wraddr = sha_reg_wr_addr;
  assign xram_wr = sha_state_write_data;
endmodule
