module sha_top_with_xram ( addr , clk , data_in , rst , stb , wr , zy_end_sig , ack , data_out , in_addr_range );
  logic rst_zy;
  input zy_end_sig;
  integer i;
  logic INSTR_IN_ZY;
  assign INSTR_IN_ZY = addr_T > 0 || data_in_T > 0 || stb_T > 0 || wr_T > 0 || 0 ;
  output ack;
  logic ack ;
  input [15:0] addr;
  input clk;
  input [7:0] data_in;
  output [7:0] data_out;
  logic [7:0] data_out ;
  output in_addr_range;
  logic in_addr_range ;
  input rst;
  input stb;
  input wr;
  logic xram_ack;
  logic [15:0] xram_addr;
  logic [7:0] xram_data_in;
  logic [7:0] xram_data_out;
  logic xram_stb;
  logic xram_wr;
  logic [15:0] xram_addr_R0 ;
  logic [7:0] xram_data_out_R0 ;
  logic [0:0] rst_R0 ;
  logic [0:0] xram_stb_R0 ;
  logic [0:0] xram_wr_R0 ;
// module: XRAM
  XRAM ram (
    .stb ( xram_stb ),
    .rst ( rst ),
    .wr ( xram_wr ),
    .addr_in ( xram_addr ),
    .clk ( clk ),
    .data_in ( xram_data_out ),
    .ack ( xram_ack ),
    .data_out ( xram_data_in )
  );
  logic [15:0] addr_R0 ;
  logic [7:0] data_in_R0 ;
  logic [0:0] rst_R1 ;
  logic [0:0] stb_R0 ;
  logic [0:0] wr_R0 ;
  logic [0:0] xram_ack_R0 ;
  logic [7:0] xram_data_in_R0 ;
// module: sha_top
  sha_top sha_top_0 (
    .xram_stb ( xram_stb ),
    .xram_data_out ( xram_data_out ),
    .xram_data_in ( xram_data_in ),
    .data_out ( data_out ),
    .ack ( ack ),
    .data_in ( data_in ),
    .clk ( clk ),
    .wr ( wr ),
    .addr ( addr ),
    .xram_addr ( xram_addr ),
    .in_addr_range ( in_addr_range ),
    .xram_wr ( xram_wr ),
    .xram_ack ( xram_ack ),
    .rst ( rst ),
    .stb ( stb )
  );
  assign xram_data_in_R = ( xram_data_in_R0 );
  assign wr_R = ( wr_R0 );
  assign stb_R = ( stb_R0 );
  assign data_in_R = ( data_in_R0 );
  assign addr_R = ( addr_R0 );
  assign xram_ack_R = ( xram_ack_R0 );
  assign xram_wr_R = ( xram_wr_R0 );
  assign xram_stb_R = ( xram_stb_R0 );
  assign rst_R = ( rst_R0 ) | ( rst_R1 );
  assign xram_data_out_R = ( xram_data_out_R0 );
  assign xram_addr_R = ( xram_addr_R0 );
 // ground taints for unused wire slices
  assign rst_zy = rst ;
endmodule
