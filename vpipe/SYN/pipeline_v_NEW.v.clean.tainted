  logic [7:0] _000_;
  logic [7:0] _000__T ;
  logic [7:0] _000__R ;
  logic [7:0] _000__C ;
  logic [7:0] _000__X ;
  logic [4:0] _000__S ;
  logic [7:0] _001_;
  logic [7:0] _001__T ;
  logic [7:0] _001__R ;
  logic [7:0] _001__C ;
  logic [7:0] _001__X ;
  logic [4:0] _001__S ;
  logic [7:0] _002_;
  logic [7:0] _002__T ;
  logic [7:0] _002__R ;
  logic [7:0] _002__C ;
  logic [7:0] _002__X ;
  logic [4:0] _002__S ;
  logic [7:0] _003_;
  logic [7:0] _003__T ;
  logic [7:0] _003__R ;
  logic [7:0] _003__C ;
  logic [7:0] _003__X ;
  logic [4:0] _003__S ;
  logic [1:0] _004_;
  logic [1:0] _004__T ;
  logic [1:0] _004__R ;
  logic [1:0] _004__C ;
  logic [1:0] _004__X ;
  logic [4:0] _004__S ;
  logic _005_;
  logic _005__T ;
  logic _005__R ;
  logic _005__C ;
  logic _005__X ;
  logic [4:0] _005__S ;
  logic [7:0] _006_;
  logic [7:0] _006__T ;
  logic [7:0] _006__R ;
  logic [7:0] _006__C ;
  logic [7:0] _006__X ;
  logic [4:0] _006__S ;
  logic [1:0] _007_;
  logic [1:0] _007__T ;
  logic [1:0] _007__R ;
  logic [1:0] _007__C ;
  logic [1:0] _007__X ;
  logic [4:0] _007__S ;
  logic [1:0] _008_;
  logic [1:0] _008__T ;
  logic [1:0] _008__R ;
  logic [1:0] _008__C ;
  logic [1:0] _008__X ;
  logic [4:0] _008__S ;
  logic _009_;
  logic _009__T ;
  logic _009__R ;
  logic _009__C ;
  logic _009__X ;
  logic [4:0] _009__S ;
  logic [7:0] _010_;
  logic [7:0] _010__T ;
  logic [7:0] _010__R ;
  logic [7:0] _010__C ;
  logic [7:0] _010__X ;
  logic [4:0] _010__S ;
  logic [7:0] _011_;
  logic [7:0] _011__T ;
  logic [7:0] _011__R ;
  logic [7:0] _011__C ;
  logic [7:0] _011__X ;
  logic [4:0] _011__S ;
  logic [1:0] _012_;
  logic [1:0] _012__T ;
  logic [1:0] _012__R ;
  logic [1:0] _012__C ;
  logic [1:0] _012__X ;
  logic [4:0] _012__S ;
  logic [1:0] _013_;
  logic [1:0] _013__T ;
  logic [1:0] _013__R ;
  logic [1:0] _013__C ;
  logic [1:0] _013__X ;
  logic [4:0] _013__S ;
  logic [1:0] _014_;
  logic [1:0] _014__T ;
  logic [1:0] _014__R ;
  logic [1:0] _014__C ;
  logic [1:0] _014__X ;
  logic [4:0] _014__S ;
  logic [1:0] _015_;
  logic [1:0] _015__T ;
  logic [1:0] _015__R ;
  logic [1:0] _015__C ;
  logic [1:0] _015__X ;
  logic [4:0] _015__S ;
  logic [7:0] _016_;
  logic [7:0] _016__T ;
  logic [7:0] _016__R ;
  logic [7:0] _016__C ;
  logic [7:0] _016__X ;
  logic [4:0] _016__S ;
  logic [7:0] _017_;
  logic [7:0] _017__T ;
  logic [7:0] _017__R ;
  logic [7:0] _017__C ;
  logic [7:0] _017__X ;
  logic [4:0] _017__S ;
  logic _018_;
  logic _018__T ;
  logic _018__R ;
  logic _018__C ;
  logic _018__X ;
  logic [4:0] _018__S ;
  logic _019_;
  logic _019__T ;
  logic _019__R ;
  logic _019__C ;
  logic _019__X ;
  logic [4:0] _019__S ;
  logic _020_;
  logic _020__T ;
  logic _020__R ;
  logic _020__C ;
  logic _020__X ;
  logic [4:0] _020__S ;
  logic _021_;
  logic _021__T ;
  logic _021__R ;
  logic _021__C ;
  logic _021__X ;
  logic [4:0] _021__S ;
  logic _022_;
  logic _022__T ;
  logic _022__R ;
  logic _022__C ;
  logic _022__X ;
  logic [4:0] _022__S ;
  logic _023_;
  logic _023__T ;
  logic _023__R ;
  logic _023__C ;
  logic _023__X ;
  logic [4:0] _023__S ;
  logic _024_;
  logic _024__T ;
  logic _024__R ;
  logic _024__C ;
  logic _024__X ;
  logic [4:0] _024__S ;
  logic _025_;
  logic _025__T ;
  logic _025__R ;
  logic _025__C ;
  logic _025__X ;
  logic [4:0] _025__S ;
  logic _026_;
  logic _026__T ;
  logic _026__R ;
  logic _026__C ;
  logic _026__X ;
  logic [4:0] _026__S ;
  logic _027_;
  logic _027__T ;
  logic _027__R ;
  logic _027__C ;
  logic _027__X ;
  logic [4:0] _027__S ;
  logic _028_;
  logic _028__T ;
  logic _028__R ;
  logic _028__C ;
  logic _028__X ;
  logic [4:0] _028__S ;
  logic _029_;
  logic _029__T ;
  logic _029__R ;
  logic _029__C ;
  logic _029__X ;
  logic [4:0] _029__S ;
  logic _030_;
  logic _030__T ;
  logic _030__R ;
  logic _030__C ;
  logic _030__X ;
  logic [4:0] _030__S ;
  logic _031_;
  logic _031__T ;
  logic _031__R ;
  logic _031__C ;
  logic _031__X ;
  logic [4:0] _031__S ;
  logic _032_;
  logic _032__T ;
  logic _032__R ;
  logic _032__C ;
  logic _032__X ;
  logic [4:0] _032__S ;
  logic _033_;
  logic _033__T ;
  logic _033__R ;
  logic _033__C ;
  logic _033__X ;
  logic [4:0] _033__S ;
  logic _034_;
  logic _034__T ;
  logic _034__R ;
  logic _034__C ;
  logic _034__X ;
  logic [4:0] _034__S ;
  logic _035_;
  logic _035__T ;
  logic _035__R ;
  logic _035__C ;
  logic _035__X ;
  logic [4:0] _035__S ;
  logic _036_;
  logic _036__T ;
  logic _036__R ;
  logic _036__C ;
  logic _036__X ;
  logic [4:0] _036__S ;
  logic _037_;
  logic _037__T ;
  logic _037__R ;
  logic _037__C ;
  logic _037__X ;
  logic [4:0] _037__S ;
  logic _038_;
  logic _038__T ;
  logic _038__R ;
  logic _038__C ;
  logic _038__X ;
  logic [4:0] _038__S ;
  logic _039_;
  logic _039__T ;
  logic _039__R ;
  logic _039__C ;
  logic _039__X ;
  logic [4:0] _039__S ;
  logic _040_;
  logic _040__T ;
  logic _040__R ;
  logic _040__C ;
  logic _040__X ;
  logic [4:0] _040__S ;
  logic _041_;
  logic _041__T ;
  logic _041__R ;
  logic _041__C ;
  logic _041__X ;
  logic [4:0] _041__S ;
  logic _042_;
  logic _042__T ;
  logic _042__R ;
  logic _042__C ;
  logic _042__X ;
  logic [4:0] _042__S ;
  logic _043_;
  logic _043__T ;
  logic _043__R ;
  logic _043__C ;
  logic _043__X ;
  logic [4:0] _043__S ;
  logic _044_;
  logic _044__T ;
  logic _044__R ;
  logic _044__C ;
  logic _044__X ;
  logic [4:0] _044__S ;
  logic [7:0] _045_;
  logic [7:0] _045__T ;
  logic [7:0] _045__R ;
  logic [7:0] _045__C ;
  logic [7:0] _045__X ;
  logic [4:0] _045__S ;
  logic [7:0] _046_;
  logic [7:0] _046__T ;
  logic [7:0] _046__R ;
  logic [7:0] _046__C ;
  logic [7:0] _046__X ;
  logic [4:0] _046__S ;
  logic [7:0] _047_;
  logic [7:0] _047__T ;
  logic [7:0] _047__R ;
  logic [7:0] _047__C ;
  logic [7:0] _047__X ;
  logic [4:0] _047__S ;
  logic [7:0] _048_;
  logic [7:0] _048__T ;
  logic [7:0] _048__R ;
  logic [7:0] _048__C ;
  logic [7:0] _048__X ;
  logic [4:0] _048__S ;
  logic [1:0] _049_;
  logic [1:0] _049__T ;
  logic [1:0] _049__R ;
  logic [1:0] _049__C ;
  logic [1:0] _049__X ;
  logic [4:0] _049__S ;
  logic [1:0] _050_;
  logic [1:0] _050__T ;
  logic [1:0] _050__R ;
  logic [1:0] _050__C ;
  logic [1:0] _050__X ;
  logic [4:0] _050__S ;
  logic [1:0] _051_;
  logic [1:0] _051__T ;
  logic [1:0] _051__R ;
  logic [1:0] _051__C ;
  logic [1:0] _051__X ;
  logic [4:0] _051__S ;
  logic [1:0] _052_;
  logic [1:0] _052__T ;
  logic [1:0] _052__R ;
  logic [1:0] _052__C ;
  logic [1:0] _052__X ;
  logic [4:0] _052__S ;
  logic [7:0] _053_;
  logic [7:0] _053__T ;
  logic [7:0] _053__R ;
  logic [7:0] _053__C ;
  logic [7:0] _053__X ;
  logic [4:0] _053__S ;
  logic [7:0] _054_;
  logic [7:0] _054__T ;
  logic [7:0] _054__R ;
  logic [7:0] _054__C ;
  logic [7:0] _054__X ;
  logic [4:0] _054__S ;
  logic [7:0] _055_;
  logic [7:0] _055__T ;
  logic [7:0] _055__R ;
  logic [7:0] _055__C ;
  logic [7:0] _055__X ;
  logic [4:0] _055__S ;
  logic [7:0] _056_;
  logic [7:0] _056__T ;
  logic [7:0] _056__R ;
  logic [7:0] _056__C ;
  logic [7:0] _056__X ;
  logic [4:0] _056__S ;
  logic [7:0] _057_;
  logic [7:0] _057__T ;
  logic [7:0] _057__R ;
  logic [7:0] _057__C ;
  logic [7:0] _057__X ;
  logic [4:0] _057__S ;
  logic [7:0] _058_;
  logic [7:0] _058__T ;
  logic [7:0] _058__R ;
  logic [7:0] _058__C ;
  logic [7:0] _058__X ;
  logic [4:0] _058__S ;
  logic [7:0] _059_;
  logic [7:0] _059__T ;
  logic [7:0] _059__R ;
  logic [7:0] _059__C ;
  logic [7:0] _059__X ;
  logic [4:0] _059__S ;
  logic [7:0] _060_;
  logic [7:0] _060__T ;
  logic [7:0] _060__R ;
  logic [7:0] _060__C ;
  logic [7:0] _060__X ;
  logic [4:0] _060__S ;
  logic [1:0] _061_;
  logic [1:0] _061__T ;
  logic [1:0] _061__R ;
  logic [1:0] _061__C ;
  logic [1:0] _061__X ;
  logic [4:0] _061__S ;
  logic [1:0] _062_;
  logic [1:0] _062__T ;
  logic [1:0] _062__R ;
  logic [1:0] _062__C ;
  logic [1:0] _062__X ;
  logic [4:0] _062__S ;
  logic [1:0] _063_;
  logic [1:0] _063__T ;
  logic [1:0] _063__R ;
  logic [1:0] _063__C ;
  logic [1:0] _063__X ;
  logic [4:0] _063__S ;
  logic [1:0] _064_;
  logic [1:0] _064__T ;
  logic [1:0] _064__R ;
  logic [1:0] _064__C ;
  logic [1:0] _064__X ;
  logic [4:0] _064__S ;
  logic [7:0] _065_;
  logic [7:0] _065__T ;
  logic [7:0] _065__R ;
  logic [7:0] _065__C ;
  logic [7:0] _065__X ;
  logic [4:0] _065__S ;
  logic [1:0] _066_;
  logic [1:0] _066__T ;
  logic [1:0] _066__R ;
  logic [1:0] _066__C ;
  logic [1:0] _066__X ;
  logic [4:0] _066__S ;
  logic [1:0] _067_;
  logic [1:0] _067__T ;
  logic [1:0] _067__R ;
  logic [1:0] _067__C ;
  logic [1:0] _067__X ;
  logic [4:0] _067__S ;
  logic [1:0] _068_;
  logic [1:0] _068__T ;
  logic [1:0] _068__R ;
  logic [1:0] _068__C ;
  logic [1:0] _068__X ;
  logic [4:0] _068__S ;
  logic [1:0] _069_;
  logic [1:0] _069__T ;
  logic [1:0] _069__R ;
  logic [1:0] _069__C ;
  logic [1:0] _069__X ;
  logic [4:0] _069__S ;
  logic [7:0] _070_;
  logic [7:0] _070__T ;
  logic [7:0] _070__R ;
  logic [7:0] _070__C ;
  logic [7:0] _070__X ;
  logic [4:0] _070__S ;
  logic [7:0] _071_;
  logic [7:0] _071__T ;
  logic [7:0] _071__R ;
  logic [7:0] _071__C ;
  logic [7:0] _071__X ;
  logic [4:0] _071__S ;
  logic [7:0] _072_;
  logic [7:0] _072__T ;
  logic [7:0] _072__R ;
  logic [7:0] _072__C ;
  logic [7:0] _072__X ;
  logic [4:0] _072__S ;
  logic [7:0] _073_;
  logic [7:0] _073__T ;
  logic [7:0] _073__R ;
  logic [7:0] _073__C ;
  logic [7:0] _073__X ;
  logic [4:0] _073__S ;
  logic [7:0] _074_;
  logic [7:0] _074__T ;
  logic [7:0] _074__R ;
  logic [7:0] _074__C ;
  logic [7:0] _074__X ;
  logic [4:0] _074__S ;
  logic [7:0] _075_;
  logic [7:0] _075__T ;
  logic [7:0] _075__R ;
  logic [7:0] _075__C ;
  logic [7:0] _075__X ;
  logic [4:0] _075__S ;
  logic [7:0] _076_;
  logic [7:0] _076__T ;
  logic [7:0] _076__R ;
  logic [7:0] _076__C ;
  logic [7:0] _076__X ;
  logic [4:0] _076__S ;
  logic [7:0] _077_;
  logic [7:0] _077__T ;
  logic [7:0] _077__R ;
  logic [7:0] _077__C ;
  logic [7:0] _077__X ;
  logic [4:0] _077__S ;
  logic [7:0] _078_;
  logic [7:0] _078__T ;
  logic [7:0] _078__R ;
  logic [7:0] _078__C ;
  logic [7:0] _078__X ;
  logic [4:0] _078__S ;
  input clk;
  input clk_T ;
  wire [4:0] clk_S ;
  output clk_R ;
  output clk_X ;
  output clk_C ;
  assign clk_S = 0 ;
  input [1:0] dummy_read_rf;
  input [1:0] dummy_read_rf_T ;
  wire [4:0] dummy_read_rf_S ;
  output [1:0] dummy_read_rf_R ;
  output [1:0] dummy_read_rf_X ;
  output [1:0] dummy_read_rf_C ;
  assign dummy_read_rf_S = 0 ;
  output [7:0] dummy_rf_data;
  logic [7:0] dummy_rf_data ;
  output [7:0] dummy_rf_data_T ;
  logic [7:0] dummy_rf_data_T ;
  logic [7:0] dummy_rf_data_R ;
  logic [7:0] dummy_rf_data_C ;
  logic [7:0] dummy_rf_data_X ;
  logic [4:0] dummy_rf_data_S ;
  input [7:0] dummy_rf_data_R0 ;
  input [7:0] dummy_rf_data_C0 ;
  wire [7:0] dummy_rf_data_X0 ;
  assign dummy_rf_data_X0 = dummy_rf_data_R0 ;
  logic [7:0] ex_alu_result;
  logic [7:0] ex_alu_result_T ;
  logic [7:0] ex_alu_result_R ;
  logic [7:0] ex_alu_result_C ;
  logic [7:0] ex_alu_result_X ;
  logic [4:0] ex_alu_result_S ;
  logic [1:0] ex_wb_rd;
  logic [1:0]  ex_wb_rd_T ;
  logic [1:0]  ex_wb_rd_PREV_VAL1 ;
  logic [1:0]  ex_wb_rd_PREV_VAL2 ;
  logic [1:0]  ex_wb_rd_R ;
  logic [1:0]  ex_wb_rd_X ;
  logic [1:0]  ex_wb_rd_C ;
  logic [4:0] ex_wb_rd_S ;
  logic ex_wb_rd_t_flag ;
  logic ex_wb_rd_r_flag ;
  assign ex_wb_rd_S = 3 ;
  logic ex_wb_reg_wen;
  logic  ex_wb_reg_wen_T ;
  logic  ex_wb_reg_wen_PREV_VAL1 ;
  logic  ex_wb_reg_wen_PREV_VAL2 ;
  logic  ex_wb_reg_wen_R ;
  logic  ex_wb_reg_wen_X ;
  logic  ex_wb_reg_wen_C ;
  logic [4:0] ex_wb_reg_wen_S ;
  logic ex_wb_reg_wen_t_flag ;
  logic ex_wb_reg_wen_r_flag ;
  assign ex_wb_reg_wen_S = 4 ;
  logic [7:0] ex_wb_val;
  logic [7:0]  ex_wb_val_T ;
  logic [7:0]  ex_wb_val_PREV_VAL1 ;
  logic [7:0]  ex_wb_val_PREV_VAL2 ;
  logic [7:0]  ex_wb_val_R ;
  logic [7:0]  ex_wb_val_X ;
  logic [7:0]  ex_wb_val_C ;
  logic [4:0] ex_wb_val_S ;
  logic ex_wb_val_t_flag ;
  logic ex_wb_val_r_flag ;
  assign ex_wb_val_S = 5 ;
  logic [1:0] id_ex_op;
  logic [1:0]  id_ex_op_T ;
  logic [1:0]  id_ex_op_PREV_VAL1 ;
  logic [1:0]  id_ex_op_PREV_VAL2 ;
  logic [1:0]  id_ex_op_R ;
  logic [1:0]  id_ex_op_X ;
  logic [1:0]  id_ex_op_C ;
  logic [4:0] id_ex_op_S ;
  logic id_ex_op_t_flag ;
  logic id_ex_op_r_flag ;
  assign id_ex_op_S = 6 ;
  logic [1:0] id_ex_rd;
  logic [1:0]  id_ex_rd_T ;
  logic [1:0]  id_ex_rd_PREV_VAL1 ;
  logic [1:0]  id_ex_rd_PREV_VAL2 ;
  logic [1:0]  id_ex_rd_R ;
  logic [1:0]  id_ex_rd_X ;
  logic [1:0]  id_ex_rd_C ;
  logic [4:0] id_ex_rd_S ;
  logic id_ex_rd_t_flag ;
  logic id_ex_rd_r_flag ;
  assign id_ex_rd_S = 7 ;
  logic id_ex_reg_wen;
  logic  id_ex_reg_wen_T ;
  logic  id_ex_reg_wen_PREV_VAL1 ;
  logic  id_ex_reg_wen_PREV_VAL2 ;
  logic  id_ex_reg_wen_R ;
  logic  id_ex_reg_wen_X ;
  logic  id_ex_reg_wen_C ;
  logic [4:0] id_ex_reg_wen_S ;
  logic id_ex_reg_wen_t_flag ;
  logic id_ex_reg_wen_r_flag ;
  assign id_ex_reg_wen_S = 8 ;
  logic [7:0] id_ex_rs1_val;
  logic [7:0]  id_ex_rs1_val_T ;
  logic [7:0]  id_ex_rs1_val_PREV_VAL1 ;
  logic [7:0]  id_ex_rs1_val_PREV_VAL2 ;
  logic [7:0]  id_ex_rs1_val_R ;
  logic [7:0]  id_ex_rs1_val_X ;
  logic [7:0]  id_ex_rs1_val_C ;
  logic [4:0] id_ex_rs1_val_S ;
  logic id_ex_rs1_val_t_flag ;
  logic id_ex_rs1_val_r_flag ;
  assign id_ex_rs1_val_S = 9 ;
  logic [7:0] id_ex_rs2_val;
  logic [7:0]  id_ex_rs2_val_T ;
  logic [7:0]  id_ex_rs2_val_PREV_VAL1 ;
  logic [7:0]  id_ex_rs2_val_PREV_VAL2 ;
  logic [7:0]  id_ex_rs2_val_R ;
  logic [7:0]  id_ex_rs2_val_X ;
  logic [7:0]  id_ex_rs2_val_C ;
  logic [4:0] id_ex_rs2_val_S ;
  logic id_ex_rs2_val_t_flag ;
  logic id_ex_rs2_val_r_flag ;
  assign id_ex_rs2_val_S = 10 ;
  logic [7:0] id_rs1_val;
  logic [7:0] id_rs1_val_T ;
  logic [7:0] id_rs1_val_R ;
  logic [7:0] id_rs1_val_C ;
  logic [7:0] id_rs1_val_X ;
  logic [4:0] id_rs1_val_S ;
  logic [7:0] id_rs2_val;
  logic [7:0] id_rs2_val_T ;
  logic [7:0] id_rs2_val_R ;
  logic [7:0] id_rs2_val_C ;
  logic [7:0] id_rs2_val_X ;
  logic [4:0] id_rs2_val_S ;
  logic id_wen;
  logic id_wen_T ;
  logic id_wen_R ;
  logic id_wen_C ;
  logic id_wen_X ;
  logic [4:0] id_wen_S ;
  input [7:0] inst;
  input [7:0] inst_T ;
  wire [4:0] inst_S ;
  output [7:0] inst_R ;
  output [7:0] inst_X ;
  output [7:0] inst_C ;
  assign inst_S = 0 ;
  logic [1:0] op;
  logic [1:0] op_T ;
  logic [1:0] op_R ;
  logic [1:0] op_C ;
  logic [1:0] op_X ;
  logic [4:0] op_S ;
  logic [1:0] rd;
  logic [1:0] rd_T ;
  logic [1:0] rd_R ;
  logic [1:0] rd_C ;
  logic [1:0] rd_X ;
  logic [4:0] rd_S ;
  logic [1:0] reg_0_w_stage;
  logic [1:0]  reg_0_w_stage_T ;
  logic [1:0]  reg_0_w_stage_PREV_VAL1 ;
  logic [1:0]  reg_0_w_stage_PREV_VAL2 ;
  logic [1:0]  reg_0_w_stage_R ;
  logic [1:0]  reg_0_w_stage_X ;
  logic [1:0]  reg_0_w_stage_C ;
  logic [4:0] reg_0_w_stage_S ;
  logic reg_0_w_stage_t_flag ;
  logic reg_0_w_stage_r_flag ;
  assign reg_0_w_stage_S = 11 ;
  logic reg_0_w_stage_nxt;
  logic reg_0_w_stage_nxt_T ;
  logic reg_0_w_stage_nxt_R ;
  logic reg_0_w_stage_nxt_C ;
  logic reg_0_w_stage_nxt_X ;
  logic [4:0] reg_0_w_stage_nxt_S ;
  logic [1:0] reg_1_w_stage;
  logic [1:0]  reg_1_w_stage_T ;
  logic [1:0]  reg_1_w_stage_PREV_VAL1 ;
  logic [1:0]  reg_1_w_stage_PREV_VAL2 ;
  logic [1:0]  reg_1_w_stage_R ;
  logic [1:0]  reg_1_w_stage_X ;
  logic [1:0]  reg_1_w_stage_C ;
  logic [4:0] reg_1_w_stage_S ;
  logic reg_1_w_stage_t_flag ;
  logic reg_1_w_stage_r_flag ;
  assign reg_1_w_stage_S = 12 ;
  logic reg_1_w_stage_nxt;
  logic reg_1_w_stage_nxt_T ;
  logic reg_1_w_stage_nxt_R ;
  logic reg_1_w_stage_nxt_C ;
  logic reg_1_w_stage_nxt_X ;
  logic [4:0] reg_1_w_stage_nxt_S ;
  logic [1:0] reg_2_w_stage;
  logic [1:0]  reg_2_w_stage_T ;
  logic [1:0]  reg_2_w_stage_PREV_VAL1 ;
  logic [1:0]  reg_2_w_stage_PREV_VAL2 ;
  logic [1:0]  reg_2_w_stage_R ;
  logic [1:0]  reg_2_w_stage_X ;
  logic [1:0]  reg_2_w_stage_C ;
  logic [4:0] reg_2_w_stage_S ;
  logic reg_2_w_stage_t_flag ;
  logic reg_2_w_stage_r_flag ;
  assign reg_2_w_stage_S = 13 ;
  logic reg_2_w_stage_nxt;
  logic reg_2_w_stage_nxt_T ;
  logic reg_2_w_stage_nxt_R ;
  logic reg_2_w_stage_nxt_C ;
  logic reg_2_w_stage_nxt_X ;
  logic [4:0] reg_2_w_stage_nxt_S ;
  logic [1:0] reg_3_w_stage;
  logic [1:0]  reg_3_w_stage_T ;
  logic [1:0]  reg_3_w_stage_PREV_VAL1 ;
  logic [1:0]  reg_3_w_stage_PREV_VAL2 ;
  logic [1:0]  reg_3_w_stage_R ;
  logic [1:0]  reg_3_w_stage_X ;
  logic [1:0]  reg_3_w_stage_C ;
  logic [4:0] reg_3_w_stage_S ;
  logic reg_3_w_stage_t_flag ;
  logic reg_3_w_stage_r_flag ;
  assign reg_3_w_stage_S = 14 ;
  logic reg_3_w_stage_nxt;
  logic reg_3_w_stage_nxt_T ;
  logic reg_3_w_stage_nxt_R ;
  logic reg_3_w_stage_nxt_C ;
  logic reg_3_w_stage_nxt_X ;
  logic [4:0] reg_3_w_stage_nxt_S ;
  logic [1:0] rs1;
  logic [1:0] rs1_T ;
  logic [1:0] rs1_R ;
  logic [1:0] rs1_C ;
  logic [1:0] rs1_X ;
  logic [4:0] rs1_S ;
  logic [1:0] rs1_stage_info;
  logic [1:0] rs1_stage_info_T ;
  logic [1:0] rs1_stage_info_R ;
  logic [1:0] rs1_stage_info_C ;
  logic [1:0] rs1_stage_info_X ;
  logic [4:0] rs1_stage_info_S ;
  logic [7:0] rs1_val;
  logic [7:0] rs1_val_T ;
  logic [7:0] rs1_val_R ;
  logic [7:0] rs1_val_C ;
  logic [7:0] rs1_val_X ;
  logic [4:0] rs1_val_S ;
  logic [1:0] rs2;
  logic [1:0] rs2_T ;
  logic [1:0] rs2_R ;
  logic [1:0] rs2_C ;
  logic [1:0] rs2_X ;
  logic [4:0] rs2_S ;
  logic [1:0] rs2_stage_info;
  logic [1:0] rs2_stage_info_T ;
  logic [1:0] rs2_stage_info_R ;
  logic [1:0] rs2_stage_info_C ;
  logic [1:0] rs2_stage_info_X ;
  logic [4:0] rs2_stage_info_S ;
  logic [7:0] rs2_val;
  logic [7:0] rs2_val_T ;
  logic [7:0] rs2_val_R ;
  logic [7:0] rs2_val_C ;
  logic [7:0] rs2_val_X ;
  logic [4:0] rs2_val_S ;
  input rst;
  input rst_T ;
  wire [4:0] rst_S ;
  output rst_R ;
  output rst_X ;
  output rst_C ;
  assign rst_S = 0 ;
  assign _016_ = id_ex_rs1_val + id_ex_rs2_val;
  assign _016__S = 0 ;
  logic [7:0] id_ex_rs1_val_C0 ;
  logic [7:0] id_ex_rs1_val_R0 ;
  logic [7:0] id_ex_rs1_val_X0 ;
  logic [7:0] id_ex_rs2_val_C0 ;
  logic [7:0] id_ex_rs2_val_R0 ;
  logic [7:0] id_ex_rs2_val_X0 ;
  assign _016__T = id_ex_rs1_val_T | id_ex_rs2_val_T ;
  assign id_ex_rs1_val_C0 = _016__C ;
  assign id_ex_rs1_val_X0 = _016__X ;
  assign id_ex_rs2_val_C0 = _016__C ;
  assign id_ex_rs2_val_X0 = _016__X ;
  assign id_ex_rs1_val_R0 = _016__R | ( _016__C & id_ex_rs2_val_T );
  assign id_ex_rs2_val_R0 = _016__R | ( _016__C & id_ex_rs1_val_T );
  assign _017_ = id_ex_rs1_val & id_ex_rs2_val;
  assign _017__S = 0 ;
  logic [7:0] id_ex_rs1_val_C1 ;
  logic [7:0] id_ex_rs1_val_R1 ;
  logic [7:0] id_ex_rs1_val_X1 ;
  logic [7:0] id_ex_rs2_val_C1 ;
  logic [7:0] id_ex_rs2_val_R1 ;
  logic [7:0] id_ex_rs2_val_X1 ;
  assign _017__T = id_ex_rs1_val_T | id_ex_rs2_val_T ;
  assign id_ex_rs1_val_C1 = _017__C ;
  assign id_ex_rs1_val_X1 = _017__X ;
  assign id_ex_rs2_val_C1 = _017__C ;
  assign id_ex_rs2_val_X1 = _017__X ;
  assign id_ex_rs1_val_R1 = ( _017__R | _017__C & id_ex_rs2_val_T ) & { 8{ id_ex_rs2_val != 0 }} ;
  assign id_ex_rs2_val_R1 = ( _017__R | _017__C & id_ex_rs1_val_T ) & { 8{ id_ex_rs1_val != 0 }} ;
  assign _018_ = inst[1:0] == 1'b1;
  assign _018__S = 0 ;
  logic [7:0] inst_C0 ;
  logic [7:0] inst_R0 ;
  logic [7:0] inst_X0 ;
  assign _018__T = | inst_T [1:0] ;
  assign inst_C0 [1:0] = { 2{ _018__C }} ;
  assign inst_R0 [1:0] = { 2{ _018__R }} ;
  assign inst_X0 [1:0] = { 2{ _018__X }} ;
  assign _019_ = inst[1:0] == 2'b10;
  assign _019__S = 0 ;
  assign { inst_R0 [7:2] } = 0;
  assign { inst_X0 [7:2] } = 0;
  assign { inst_C0 [7:2] } = 0;
  logic [7:0] inst_C1 ;
  logic [7:0] inst_R1 ;
  logic [7:0] inst_X1 ;
  assign _019__T = | inst_T [1:0] ;
  assign inst_C1 [1:0] = { 2{ _019__C }} ;
  assign inst_R1 [1:0] = { 2{ _019__R }} ;
  assign inst_X1 [1:0] = { 2{ _019__X }} ;
  assign _020_ = inst[1:0] == 2'b11;
  assign _020__S = 0 ;
  assign { inst_R1 [7:2] } = 0;
  assign { inst_X1 [7:2] } = 0;
  assign { inst_C1 [7:2] } = 0;
  logic [7:0] inst_C2 ;
  logic [7:0] inst_R2 ;
  logic [7:0] inst_X2 ;
  assign _020__T = | inst_T [1:0] ;
  assign inst_C2 [1:0] = { 2{ _020__C }} ;
  assign inst_R2 [1:0] = { 2{ _020__R }} ;
  assign inst_X2 [1:0] = { 2{ _020__X }} ;
  assign _021_ = ! inst[5:4];
  assign _021__T = | inst_T [5:4] ;
  assign inst_C2 [5:4] = { 2{ _021__C }} ;
  assign inst_X2 [5:4] = { 2{ _021__X }} ;
  assign inst_R2 [5:4] = { 2{ _021__R }} ;
  assign _021__S = 0 ;
  assign _022_ = inst[5:4] == 1'b1;
  assign _022__S = 0 ;
  assign { inst_R2 [2], inst_R2 [3], inst_R2 [7:6] } = 0;
  assign { inst_X2 [2], inst_X2 [3], inst_X2 [7:6] } = 0;
  assign { inst_C2 [2], inst_C2 [3], inst_C2 [7:6] } = 0;
  logic [7:0] inst_C3 ;
  logic [7:0] inst_R3 ;
  logic [7:0] inst_X3 ;
  assign _022__T = | inst_T [5:4] ;
  assign inst_C3 [5:4] = { 2{ _022__C }} ;
  assign inst_R3 [5:4] = { 2{ _022__R }} ;
  assign inst_X3 [5:4] = { 2{ _022__X }} ;
  assign _023_ = inst[5:4] == 2'b10;
  assign _023__S = 0 ;
  assign { inst_R3 [0], inst_R3 [1], inst_R3 [2], inst_R3 [3], inst_R3 [7:6] } = 0;
  assign { inst_X3 [0], inst_X3 [1], inst_X3 [2], inst_X3 [3], inst_X3 [7:6] } = 0;
  assign { inst_C3 [0], inst_C3 [1], inst_C3 [2], inst_C3 [3], inst_C3 [7:6] } = 0;
  logic [7:0] inst_C4 ;
  logic [7:0] inst_R4 ;
  logic [7:0] inst_X4 ;
  assign _023__T = | inst_T [5:4] ;
  assign inst_C4 [5:4] = { 2{ _023__C }} ;
  assign inst_R4 [5:4] = { 2{ _023__R }} ;
  assign inst_X4 [5:4] = { 2{ _023__X }} ;
  assign _024_ = ! inst[3:2];
  assign _024__T = | inst_T [3:2] ;
  assign inst_C4 [3:2] = { 2{ _024__C }} ;
  assign inst_X4 [3:2] = { 2{ _024__X }} ;
  assign inst_R4 [3:2] = { 2{ _024__R }} ;
  assign _024__S = 0 ;
  assign _025_ = inst[3:2] == 1'b1;
  assign _025__S = 0 ;
  assign { inst_R4 [0], inst_R4 [1], inst_R4 [7:6] } = 0;
  assign { inst_X4 [0], inst_X4 [1], inst_X4 [7:6] } = 0;
  assign { inst_C4 [0], inst_C4 [1], inst_C4 [7:6] } = 0;
  logic [7:0] inst_C5 ;
  logic [7:0] inst_R5 ;
  logic [7:0] inst_X5 ;
  assign _025__T = | inst_T [3:2] ;
  assign inst_C5 [3:2] = { 2{ _025__C }} ;
  assign inst_R5 [3:2] = { 2{ _025__R }} ;
  assign inst_X5 [3:2] = { 2{ _025__X }} ;
  assign _026_ = inst[3:2] == 2'b10;
  assign _026__S = 0 ;
  assign { inst_R5 [0], inst_R5 [1], inst_R5 [7:4] } = 0;
  assign { inst_X5 [0], inst_X5 [1], inst_X5 [7:4] } = 0;
  assign { inst_C5 [0], inst_C5 [1], inst_C5 [7:4] } = 0;
  logic [7:0] inst_C6 ;
  logic [7:0] inst_R6 ;
  logic [7:0] inst_X6 ;
  assign _026__T = | inst_T [3:2] ;
  assign inst_C6 [3:2] = { 2{ _026__C }} ;
  assign inst_R6 [3:2] = { 2{ _026__R }} ;
  assign inst_X6 [3:2] = { 2{ _026__X }} ;
  assign _027_ = ! rs1_stage_info;
  logic [1:0] rs1_stage_info_C0 ;
  logic [1:0] rs1_stage_info_R0 ;
  logic [1:0] rs1_stage_info_X0 ;
  assign _027__T = | rs1_stage_info_T ;
  assign rs1_stage_info_C0 = { 2{ _027__C }} ;
  assign rs1_stage_info_X0 = { 2{ _027__X }} ;
  assign rs1_stage_info_R0 = { 2{ _027__R }} ;
  assign _027__S = 0 ;
  assign _028_ = rs1_stage_info == 1'b1;
  assign _028__S = 0 ;
  logic [1:0] rs1_stage_info_C1 ;
  logic [1:0] rs1_stage_info_R1 ;
  logic [1:0] rs1_stage_info_X1 ;
  assign _028__T = | rs1_stage_info_T ;
  assign rs1_stage_info_C1 = { 2{ _028__C }} ;
  assign rs1_stage_info_R1 = { 2{ _028__R }} ;
  assign rs1_stage_info_X1 = { 2{ _028__X }} ;
  assign _029_ = ! rs2_stage_info;
  logic [1:0] rs2_stage_info_C0 ;
  logic [1:0] rs2_stage_info_R0 ;
  logic [1:0] rs2_stage_info_X0 ;
  assign _029__T = | rs2_stage_info_T ;
  assign rs2_stage_info_C0 = { 2{ _029__C }} ;
  assign rs2_stage_info_X0 = { 2{ _029__X }} ;
  assign rs2_stage_info_R0 = { 2{ _029__R }} ;
  assign _029__S = 0 ;
  assign _030_ = rs2_stage_info == 1'b1;
  assign _030__S = 0 ;
  logic [1:0] rs2_stage_info_C1 ;
  logic [1:0] rs2_stage_info_R1 ;
  logic [1:0] rs2_stage_info_X1 ;
  assign _030__T = | rs2_stage_info_T ;
  assign rs2_stage_info_C1 = { 2{ _030__C }} ;
  assign rs2_stage_info_R1 = { 2{ _030__R }} ;
  assign rs2_stage_info_X1 = { 2{ _030__X }} ;
  assign _031_ = id_ex_op == 1'b1;
  assign _031__S = 0 ;
  logic [1:0] id_ex_op_C0 ;
  logic [1:0] id_ex_op_R0 ;
  logic [1:0] id_ex_op_X0 ;
  assign _031__T = | id_ex_op_T ;
  assign id_ex_op_C0 = { 2{ _031__C }} ;
  assign id_ex_op_R0 = { 2{ _031__R }} ;
  assign id_ex_op_X0 = { 2{ _031__X }} ;
  assign _032_ = id_ex_op == 2'b10;
  assign _032__S = 0 ;
  logic [1:0] id_ex_op_C1 ;
  logic [1:0] id_ex_op_R1 ;
  logic [1:0] id_ex_op_X1 ;
  assign _032__T = | id_ex_op_T ;
  assign id_ex_op_C1 = { 2{ _032__C }} ;
  assign id_ex_op_R1 = { 2{ _032__R }} ;
  assign id_ex_op_X1 = { 2{ _032__X }} ;
  assign _033_ = inst[7:6] == 1'b1;
  assign _033__S = 0 ;
  assign _033__T = | inst_T [7:6] ;
  assign inst_C6 [7:6] = { 2{ _033__C }} ;
  assign inst_R6 [7:6] = { 2{ _033__R }} ;
  assign inst_X6 [7:6] = { 2{ _033__X }} ;
  assign _034_ = inst[7:6] == 2'b10;
  assign _034__S = 0 ;
  assign { inst_R6 [0], inst_R6 [1], inst_R6 [4], inst_R6 [5] } = 0;
  assign { inst_X6 [0], inst_X6 [1], inst_X6 [4], inst_X6 [5] } = 0;
  assign { inst_C6 [0], inst_C6 [1], inst_C6 [4], inst_C6 [5] } = 0;
  logic [7:0] inst_C7 ;
  logic [7:0] inst_R7 ;
  logic [7:0] inst_X7 ;
  assign _034__T = | inst_T [7:6] ;
  assign inst_C7 [7:6] = { 2{ _034__C }} ;
  assign inst_R7 [7:6] = { 2{ _034__R }} ;
  assign inst_X7 [7:6] = { 2{ _034__X }} ;
  assign _035_ = inst[7:6] == 2'b11;
  assign _035__S = 0 ;
  assign { inst_R7 [0], inst_R7 [1], inst_R7 [2], inst_R7 [3], inst_R7 [4], inst_R7 [5] } = 0;
  assign { inst_X7 [0], inst_X7 [1], inst_X7 [2], inst_X7 [3], inst_X7 [4], inst_X7 [5] } = 0;
  assign { inst_C7 [0], inst_C7 [1], inst_C7 [2], inst_C7 [3], inst_C7 [4], inst_C7 [5] } = 0;
  logic [7:0] inst_C8 ;
  logic [7:0] inst_R8 ;
  logic [7:0] inst_X8 ;
  assign _035__T = | inst_T [7:6] ;
  assign inst_C8 [7:6] = { 2{ _035__C }} ;
  assign inst_R8 [7:6] = { 2{ _035__R }} ;
  assign inst_X8 [7:6] = { 2{ _035__X }} ;
  assign _036_ = ! dummy_read_rf;
  logic [1:0] dummy_read_rf_C0 ;
  logic [1:0] dummy_read_rf_R0 ;
  logic [1:0] dummy_read_rf_X0 ;
  assign _036__T = | dummy_read_rf_T ;
  assign dummy_read_rf_C0 = { 2{ _036__C }} ;
  assign dummy_read_rf_X0 = { 2{ _036__X }} ;
  assign dummy_read_rf_R0 = { 2{ _036__R }} ;
  assign _036__S = 0 ;
  assign _037_ = dummy_read_rf == 1'b1;
  assign _037__S = 0 ;
  logic [1:0] dummy_read_rf_C1 ;
  logic [1:0] dummy_read_rf_R1 ;
  logic [1:0] dummy_read_rf_X1 ;
  assign _037__T = | dummy_read_rf_T ;
  assign dummy_read_rf_C1 = { 2{ _037__C }} ;
  assign dummy_read_rf_R1 = { 2{ _037__R }} ;
  assign dummy_read_rf_X1 = { 2{ _037__X }} ;
  assign _038_ = dummy_read_rf == 2'b10;
  assign _038__S = 0 ;
  logic [1:0] dummy_read_rf_C2 ;
  logic [1:0] dummy_read_rf_R2 ;
  logic [1:0] dummy_read_rf_X2 ;
  assign _038__T = | dummy_read_rf_T ;
  assign dummy_read_rf_C2 = { 2{ _038__C }} ;
  assign dummy_read_rf_R2 = { 2{ _038__R }} ;
  assign dummy_read_rf_X2 = { 2{ _038__X }} ;
  assign _039_ = ! inst[1:0];
  assign _039__T = | inst_T [1:0] ;
  assign inst_C8 [1:0] = { 2{ _039__C }} ;
  assign inst_X8 [1:0] = { 2{ _039__X }} ;
  assign inst_R8 [1:0] = { 2{ _039__R }} ;
  assign _039__S = 0 ;
  assign _040_ = id_wen && _018_;
  assign _040__S = 0 ;
  logic [0:0] id_wen_C0 ;
  logic [0:0] id_wen_R0 ;
  logic [0:0] id_wen_X0 ;
  logic [0:0] _018__C0 ;
  logic [0:0] _018__R0 ;
  logic [0:0] _018__X0 ;
  assign _040__T = id_wen_T | _018__T ;
  assign id_wen_C0 = _040__C ;
  assign id_wen_X0 = _040__X ;
  assign _018__C0 = _040__C ;
  assign _018__X0 = _040__X ;
  assign id_wen_R0 = ( _040__R | _040__C & _018__T ) & { 1{ _018_ != 0 }} ;
  assign _018__R0 = ( _040__R | _040__C & id_wen_T ) & { 1{ id_wen != 0 }} ;
  assign _041_ = id_wen && _019_;
  assign _041__S = 0 ;
  logic [0:0] id_wen_C1 ;
  logic [0:0] id_wen_R1 ;
  logic [0:0] id_wen_X1 ;
  logic [0:0] _019__C0 ;
  logic [0:0] _019__R0 ;
  logic [0:0] _019__X0 ;
  assign _041__T = id_wen_T | _019__T ;
  assign id_wen_C1 = _041__C ;
  assign id_wen_X1 = _041__X ;
  assign _019__C0 = _041__C ;
  assign _019__X0 = _041__X ;
  assign id_wen_R1 = ( _041__R | _041__C & _019__T ) & { 1{ _019_ != 0 }} ;
  assign _019__R0 = ( _041__R | _041__C & id_wen_T ) & { 1{ id_wen != 0 }} ;
  assign _042_ = id_wen && _020_;
  assign _042__S = 0 ;
  logic [0:0] id_wen_C2 ;
  logic [0:0] id_wen_R2 ;
  logic [0:0] id_wen_X2 ;
  logic [0:0] _020__C0 ;
  logic [0:0] _020__R0 ;
  logic [0:0] _020__X0 ;
  assign _042__T = id_wen_T | _020__T ;
  assign id_wen_C2 = _042__C ;
  assign id_wen_X2 = _042__X ;
  assign _020__C0 = _042__C ;
  assign _020__X0 = _042__X ;
  assign id_wen_R2 = ( _042__R | _042__C & _020__T ) & { 1{ _020_ != 0 }} ;
  assign _020__R0 = ( _042__R | _042__C & id_wen_T ) & { 1{ id_wen != 0 }} ;
  assign _043_ = id_wen && _039_;
  assign _043__S = 0 ;
  logic [0:0] id_wen_C3 ;
  logic [0:0] id_wen_R3 ;
  logic [0:0] id_wen_X3 ;
  logic [0:0] _039__C0 ;
  logic [0:0] _039__R0 ;
  logic [0:0] _039__X0 ;
  assign _043__T = id_wen_T | _039__T ;
  assign id_wen_C3 = _043__C ;
  assign id_wen_X3 = _043__X ;
  assign _039__C0 = _043__C ;
  assign _039__X0 = _043__X ;
  assign id_wen_R3 = ( _043__R | _043__C & _039__T ) & { 1{ _039_ != 0 }} ;
  assign _039__R0 = ( _043__R | _043__C & id_wen_T ) & { 1{ id_wen != 0 }} ;
  assign _044_ = _033_ || _034_;
  assign _044__S = 0 ;
  logic [0:0] _033__C0 ;
  logic [0:0] _033__R0 ;
  logic [0:0] _033__X0 ;
  logic [0:0] _034__C0 ;
  logic [0:0] _034__R0 ;
  logic [0:0] _034__X0 ;
  assign _044__T = _033__T | _034__T ;
  assign _033__C0 = _044__C ;
  assign _033__X0 = _044__X ;
  assign _034__C0 = _044__C ;
  assign _034__X0 = _044__X ;
  assign _033__R0 = ( _044__R | _044__C & _034__T ) & { 1{ _034_ == 0 }} ;
  assign _034__R0 = ( _044__R | _044__C & _033__T ) & { 1{ _033_ == 0 }} ;
  assign id_wen = _044_ || _035_;
  assign id_wen_S = 0 ;
  logic [0:0] _044__C0 ;
  logic [0:0] _044__R0 ;
  logic [0:0] _044__X0 ;
  logic [0:0] _035__C0 ;
  logic [0:0] _035__R0 ;
  logic [0:0] _035__X0 ;
  assign id_wen_T = _044__T | _035__T ;
  assign _044__C0 = id_wen_C ;
  assign _044__X0 = id_wen_X ;
  assign _035__C0 = id_wen_C ;
  assign _035__X0 = id_wen_X ;
  assign _044__R0 = ( id_wen_R | id_wen_C & _035__T ) & { 1{ _035_ == 0 }} ;
  assign _035__R0 = ( id_wen_R | id_wen_C & _044__T ) & { 1{ _044_ == 0 }} ;
  assign _049_ = reg_1_w_stage[1] | 2'b10;
  assign _049__S = 0 ;
  logic [1:0] reg_1_w_stage_C0 ;
  logic [1:0] reg_1_w_stage_R0 ;
  logic [1:0] reg_1_w_stage_X0 ;
  assign _049__T = reg_1_w_stage_T [1] ;
  assign reg_1_w_stage_C0 [1] = _049__C ;
  assign reg_1_w_stage_R0 [1] = _049__R ;
  assign reg_1_w_stage_X0 [1] = _049__X ;
  assign _050_ = reg_2_w_stage[1] | 2'b10;
  assign _050__S = 0 ;
  logic [1:0] reg_2_w_stage_C0 ;
  logic [1:0] reg_2_w_stage_R0 ;
  logic [1:0] reg_2_w_stage_X0 ;
  assign _050__T = reg_2_w_stage_T [1] ;
  assign reg_2_w_stage_C0 [1] = _050__C ;
  assign reg_2_w_stage_R0 [1] = _050__R ;
  assign reg_2_w_stage_X0 [1] = _050__X ;
  assign _051_ = reg_3_w_stage[1] | 2'b10;
  assign _051__S = 0 ;
  logic [1:0] reg_3_w_stage_C0 ;
  logic [1:0] reg_3_w_stage_R0 ;
  logic [1:0] reg_3_w_stage_X0 ;
  assign _051__T = reg_3_w_stage_T [1] ;
  assign reg_3_w_stage_C0 [1] = _051__C ;
  assign reg_3_w_stage_R0 [1] = _051__R ;
  assign reg_3_w_stage_X0 [1] = _051__X ;
  assign _052_ = reg_0_w_stage[1] | 2'b10;
  assign _052__S = 0 ;
  logic [1:0] reg_0_w_stage_C0 ;
  logic [1:0] reg_0_w_stage_R0 ;
  logic [1:0] reg_0_w_stage_X0 ;
  assign _052__T = reg_0_w_stage_T [1] ;
  assign reg_0_w_stage_C0 [1] = _052__C ;
  assign reg_0_w_stage_R0 [1] = _052__R ;
  assign reg_0_w_stage_X0 [1] = _052__X ;
  always @(posedge clk)
      ex_wb_val <= _006_;
  logic [7:0] _006__X0 ;
  logic [7:0] _006__R0 ;
  logic [7:0] _006__C0 ;
  assign _006__X0 = { 8{ ex_wb_val_S != _006__S }} ;
  assign _006__R0 = 0 ;
  assign _006__C0 = 0 ;
  always @( posedge clk )
      ex_wb_val_T 		<= rst ? 0 : ( _006__T & _006__X0 );
  always @( posedge clk )
      ex_wb_val_t_flag 	<= rst ? 0 : ex_wb_val_t_flag ? 1 : | _006__T & ( | _006__X0 );
  always @( posedge clk )
      ex_wb_val_r_flag 	<= rst ? 0 : ex_wb_val_r_flag ? 1 : ex_wb_val_t_flag ? 0 : ( | ex_wb_val_R ) ;
  always @(posedge clk)
      ex_wb_rd <= _004_;
  logic [1:0] _004__X0 ;
  logic [1:0] _004__R0 ;
  logic [1:0] _004__C0 ;
  assign _004__X0 = { 2{ ex_wb_rd_S != _004__S }} ;
  assign _004__R0 = 0 ;
  assign _004__C0 = 0 ;
  always @( posedge clk )
      ex_wb_rd_T 		<= rst ? 0 : ( _004__T & _004__X0 );
  always @( posedge clk )
      ex_wb_rd_t_flag 	<= rst ? 0 : ex_wb_rd_t_flag ? 1 : | _004__T & ( | _004__X0 );
  always @( posedge clk )
      ex_wb_rd_r_flag 	<= rst ? 0 : ex_wb_rd_r_flag ? 1 : ex_wb_rd_t_flag ? 0 : ( | ex_wb_rd_R ) ;
  always @(posedge clk)
      ex_wb_reg_wen <= _005_;
  logic [0:0] _005__X0 ;
  logic [0:0] _005__R0 ;
  logic [0:0] _005__C0 ;
  assign _005__X0 = { 1{ ex_wb_reg_wen_S != _005__S }} ;
  assign _005__R0 = 0 ;
  assign _005__C0 = 0 ;
  always @( posedge clk )
      ex_wb_reg_wen_T 		<= rst ? 0 : ( _005__T & _005__X0 );
  always @( posedge clk )
      ex_wb_reg_wen_t_flag 	<= rst ? 0 : ex_wb_reg_wen_t_flag ? 1 : | _005__T & ( | _005__X0 );
  always @( posedge clk )
      ex_wb_reg_wen_r_flag 	<= rst ? 0 : ex_wb_reg_wen_r_flag ? 1 : ex_wb_reg_wen_t_flag ? 0 : ( | ex_wb_reg_wen_R ) ;
  always @(posedge clk)
      id_ex_rs1_val <= _010_;
  logic [7:0] _010__X0 ;
  logic [7:0] _010__R0 ;
  logic [7:0] _010__C0 ;
  assign _010__X0 = { 8{ id_ex_rs1_val_S != _010__S }} ;
  assign _010__R0 = 0 ;
  assign _010__C0 = 0 ;
  always @( posedge clk )
      id_ex_rs1_val_T 		<= rst ? 0 : ( _010__T & _010__X0 );
  always @( posedge clk )
      id_ex_rs1_val_t_flag 	<= rst ? 0 : id_ex_rs1_val_t_flag ? 1 : | _010__T & ( | _010__X0 );
  always @( posedge clk )
      id_ex_rs1_val_r_flag 	<= rst ? 0 : id_ex_rs1_val_r_flag ? 1 : id_ex_rs1_val_t_flag ? 0 : ( | id_ex_rs1_val_R ) ;
  always @(posedge clk)
      id_ex_rs2_val <= _011_;
  logic [7:0] _011__X0 ;
  logic [7:0] _011__R0 ;
  logic [7:0] _011__C0 ;
  assign _011__X0 = { 8{ id_ex_rs2_val_S != _011__S }} ;
  assign _011__R0 = 0 ;
  assign _011__C0 = 0 ;
  always @( posedge clk )
      id_ex_rs2_val_T 		<= rst ? 0 : ( _011__T & _011__X0 );
  always @( posedge clk )
      id_ex_rs2_val_t_flag 	<= rst ? 0 : id_ex_rs2_val_t_flag ? 1 : | _011__T & ( | _011__X0 );
  always @( posedge clk )
      id_ex_rs2_val_r_flag 	<= rst ? 0 : id_ex_rs2_val_r_flag ? 1 : id_ex_rs2_val_t_flag ? 0 : ( | id_ex_rs2_val_R ) ;
  always @(posedge clk)
      id_ex_op <= _007_;
  logic [1:0] _007__X0 ;
  logic [1:0] _007__R0 ;
  logic [1:0] _007__C0 ;
  assign _007__X0 = { 2{ id_ex_op_S != _007__S }} ;
  assign _007__R0 = 0 ;
  assign _007__C0 = 0 ;
  always @( posedge clk )
      id_ex_op_T 		<= rst ? 0 : ( _007__T & _007__X0 );
  always @( posedge clk )
      id_ex_op_t_flag 	<= rst ? 0 : id_ex_op_t_flag ? 1 : | _007__T & ( | _007__X0 );
  always @( posedge clk )
      id_ex_op_r_flag 	<= rst ? 0 : id_ex_op_r_flag ? 1 : id_ex_op_t_flag ? 0 : ( | id_ex_op_R ) ;
  always @(posedge clk)
      id_ex_rd <= _008_;
  logic [1:0] _008__X0 ;
  logic [1:0] _008__R0 ;
  logic [1:0] _008__C0 ;
  assign _008__X0 = { 2{ id_ex_rd_S != _008__S }} ;
  assign _008__R0 = 0 ;
  assign _008__C0 = 0 ;
  always @( posedge clk )
      id_ex_rd_T 		<= rst ? 0 : ( _008__T & _008__X0 );
  always @( posedge clk )
      id_ex_rd_t_flag 	<= rst ? 0 : id_ex_rd_t_flag ? 1 : | _008__T & ( | _008__X0 );
  always @( posedge clk )
      id_ex_rd_r_flag 	<= rst ? 0 : id_ex_rd_r_flag ? 1 : id_ex_rd_t_flag ? 0 : ( | id_ex_rd_R ) ;
  always @(posedge clk)
      id_ex_reg_wen <= _009_;
  logic [0:0] _009__X0 ;
  logic [0:0] _009__R0 ;
  logic [0:0] _009__C0 ;
  assign _009__X0 = { 1{ id_ex_reg_wen_S != _009__S }} ;
  assign _009__R0 = 0 ;
  assign _009__C0 = 0 ;
  always @( posedge clk )
      id_ex_reg_wen_T 		<= rst ? 0 : ( _009__T & _009__X0 );
  always @( posedge clk )
      id_ex_reg_wen_t_flag 	<= rst ? 0 : id_ex_reg_wen_t_flag ? 1 : | _009__T & ( | _009__X0 );
  always @( posedge clk )
      id_ex_reg_wen_r_flag 	<= rst ? 0 : id_ex_reg_wen_r_flag ? 1 : id_ex_reg_wen_t_flag ? 0 : ( | id_ex_reg_wen_R ) ;
  always @(posedge clk)
      reg_3_w_stage <= _015_;
  logic [1:0] _015__X0 ;
  logic [1:0] _015__R0 ;
  logic [1:0] _015__C0 ;
  assign _015__X0 = { 2{ reg_3_w_stage_S != _015__S }} ;
  assign _015__R0 = 0 ;
  assign _015__C0 = 0 ;
  always @( posedge clk )
      reg_3_w_stage_T 		<= rst ? 0 : ( _015__T & _015__X0 );
  always @( posedge clk )
      reg_3_w_stage_t_flag 	<= rst ? 0 : reg_3_w_stage_t_flag ? 1 : | _015__T & ( | _015__X0 );
  always @( posedge clk )
      reg_3_w_stage_r_flag 	<= rst ? 0 : reg_3_w_stage_r_flag ? 1 : reg_3_w_stage_t_flag ? 0 : ( | reg_3_w_stage_R ) ;
  always @(posedge clk)
      reg_2_w_stage <= _014_;
  logic [1:0] _014__X0 ;
  logic [1:0] _014__R0 ;
  logic [1:0] _014__C0 ;
  assign _014__X0 = { 2{ reg_2_w_stage_S != _014__S }} ;
  assign _014__R0 = 0 ;
  assign _014__C0 = 0 ;
  always @( posedge clk )
      reg_2_w_stage_T 		<= rst ? 0 : ( _014__T & _014__X0 );
  always @( posedge clk )
      reg_2_w_stage_t_flag 	<= rst ? 0 : reg_2_w_stage_t_flag ? 1 : | _014__T & ( | _014__X0 );
  always @( posedge clk )
      reg_2_w_stage_r_flag 	<= rst ? 0 : reg_2_w_stage_r_flag ? 1 : reg_2_w_stage_t_flag ? 0 : ( | reg_2_w_stage_R ) ;
  always @(posedge clk)
      reg_1_w_stage <= _013_;
  logic [1:0] _013__X0 ;
  logic [1:0] _013__R0 ;
  logic [1:0] _013__C0 ;
  assign _013__X0 = { 2{ reg_1_w_stage_S != _013__S }} ;
  assign _013__R0 = 0 ;
  assign _013__C0 = 0 ;
  always @( posedge clk )
      reg_1_w_stage_T 		<= rst ? 0 : ( _013__T & _013__X0 );
  always @( posedge clk )
      reg_1_w_stage_t_flag 	<= rst ? 0 : reg_1_w_stage_t_flag ? 1 : | _013__T & ( | _013__X0 );
  always @( posedge clk )
      reg_1_w_stage_r_flag 	<= rst ? 0 : reg_1_w_stage_r_flag ? 1 : reg_1_w_stage_t_flag ? 0 : ( | reg_1_w_stage_R ) ;
  always @(posedge clk)
      reg_0_w_stage <= _012_;
  logic [1:0] _012__X0 ;
  logic [1:0] _012__R0 ;
  logic [1:0] _012__C0 ;
  assign _012__X0 = { 2{ reg_0_w_stage_S != _012__S }} ;
  assign _012__R0 = 0 ;
  assign _012__C0 = 0 ;
  always @( posedge clk )
      reg_0_w_stage_T 		<= rst ? 0 : ( _012__T & _012__X0 );
  always @( posedge clk )
      reg_0_w_stage_t_flag 	<= rst ? 0 : reg_0_w_stage_t_flag ? 1 : | _012__T & ( | _012__X0 );
  always @( posedge clk )
      reg_0_w_stage_r_flag 	<= rst ? 0 : reg_0_w_stage_r_flag ? 1 : reg_0_w_stage_t_flag ? 0 : ( | reg_0_w_stage_R ) ;
  assign _053_[7] = ! ex_wb_rd;
  logic [1:0] ex_wb_rd_C0 ;
  logic [1:0] ex_wb_rd_R0 ;
  logic [1:0] ex_wb_rd_X0 ;
  assign _053__T [7] = | ex_wb_rd_T ;
  assign ex_wb_rd_C0 = { 2{ _053__C [7] }} ;
  assign ex_wb_rd_X0 = { 2{ _053__X [7] }} ;
  assign ex_wb_rd_R0 = { 2{ _053__R [7] }} ;
  assign _053__S = 0 ;
  assign _054_[7] = ex_wb_reg_wen ? _053_[7] : 1'b0;
  logic [0:0] ex_wb_reg_wen_C0 ;
  logic [0:0] ex_wb_reg_wen_R0 ;
  logic [0:0] ex_wb_reg_wen_X0 ;
  assign ex_wb_reg_wen_C0 = | _054__C [7] ;
  assign ex_wb_reg_wen_X0 = | _054__X [7] ;
  logic [7:0] _053__C0 ;
  logic [7:0] _053__R0 ;
  logic [7:0] _053__X0 ;
  assign _053__C0 [7] = { 1{ ex_wb_reg_wen }} ;
  assign _053__R0 [7] = { 1{ ex_wb_reg_wen }} & ( _054__R [7] | ( { 1{ ex_wb_reg_wen_T  }} & _054__C [7] ));
  assign _053__X0 [7] = { 1{ ex_wb_reg_wen }} & _054__X [7] ;
  assign _054__T [7] = ex_wb_reg_wen ? ( { 1{ | ex_wb_reg_wen_T  }} | _053__T [7] ) : { 1{ | ex_wb_reg_wen_T  }};
  assign _054__S = ex_wb_reg_wen ? _053__S : ex_wb_reg_wen_S ;
  assign ex_wb_reg_wen_R0 = ( | (_054__R [7] | ( { 1{ ex_wb_reg_wen }} & _053__T [7] & _054__C [7] ))) && _053_[7] != 1'b0 ;
  assign _000_[7] = rst ? 1'b0 : _054_[7];
  logic [0:0] rst_C0 ;
  logic [0:0] rst_R0 ;
  logic [0:0] rst_X0 ;
  assign rst_C0 = | _000__C [7] ;
  assign rst_X0 = | _000__X [7] ;
  logic [7:0] _054__C0 ;
  logic [7:0] _054__R0 ;
  logic [7:0] _054__X0 ;
  assign _054__C0 [7] = { 1{ !rst }};
  assign _054__R0 [7] = { 1{ !rst }} & ( _000__R [7] | ( { 1{ rst_T  }} & _000__C [7] ));
  assign _054__X0 [7] = { 1{ !rst }} & _000__X [7] ;
  assign _000__T [7] = rst ? { 1{ | rst_T  }} : ( { 1{ | rst_T  }} | _054__T [7] );
  assign _000__S = rst ? rst_S : _054__S ;
  assign rst_R0 = ( | (_000__R [7] | ( { 1{ !rst }} & _054__T [7] & _000__C [7] ))) && 1'b0 != _054_[7] ;
  assign _055_[7] = ex_wb_rd == 1'b1;
  assign _055__S = 0 ;
  logic [1:0] ex_wb_rd_C1 ;
  logic [1:0] ex_wb_rd_R1 ;
  logic [1:0] ex_wb_rd_X1 ;
  assign _055__T [7] = | ex_wb_rd_T ;
  assign ex_wb_rd_C1 = { 2{ _055__C [7] }} ;
  assign ex_wb_rd_R1 = { 2{ _055__R [7] }} ;
  assign ex_wb_rd_X1 = { 2{ _055__X [7] }} ;
  assign _056_[7] = ex_wb_reg_wen ? _055_[7] : 1'b0;
  logic [0:0] ex_wb_reg_wen_C1 ;
  logic [0:0] ex_wb_reg_wen_R1 ;
  logic [0:0] ex_wb_reg_wen_X1 ;
  assign ex_wb_reg_wen_C1 = | _056__C [7] ;
  assign ex_wb_reg_wen_X1 = | _056__X [7] ;
  logic [7:0] _055__C0 ;
  logic [7:0] _055__R0 ;
  logic [7:0] _055__X0 ;
  assign _055__C0 [7] = { 1{ ex_wb_reg_wen }} ;
  assign _055__R0 [7] = { 1{ ex_wb_reg_wen }} & ( _056__R [7] | ( { 1{ ex_wb_reg_wen_T  }} & _056__C [7] ));
  assign _055__X0 [7] = { 1{ ex_wb_reg_wen }} & _056__X [7] ;
  assign _056__T [7] = ex_wb_reg_wen ? ( { 1{ | ex_wb_reg_wen_T  }} | _055__T [7] ) : { 1{ | ex_wb_reg_wen_T  }};
  assign _056__S = ex_wb_reg_wen ? _055__S : ex_wb_reg_wen_S ;
  assign ex_wb_reg_wen_R1 = ( | (_056__R [7] | ( { 1{ ex_wb_reg_wen }} & _055__T [7] & _056__C [7] ))) && _055_[7] != 1'b0 ;
  assign _001_[7] = rst ? 1'b0 : _056_[7];
  logic [0:0] rst_C1 ;
  logic [0:0] rst_R1 ;
  logic [0:0] rst_X1 ;
  assign rst_C1 = | _001__C [7] ;
  assign rst_X1 = | _001__X [7] ;
  logic [7:0] _056__C0 ;
  logic [7:0] _056__R0 ;
  logic [7:0] _056__X0 ;
  assign _056__C0 [7] = { 1{ !rst }};
  assign _056__R0 [7] = { 1{ !rst }} & ( _001__R [7] | ( { 1{ rst_T  }} & _001__C [7] ));
  assign _056__X0 [7] = { 1{ !rst }} & _001__X [7] ;
  assign _001__T [7] = rst ? { 1{ | rst_T  }} : ( { 1{ | rst_T  }} | _056__T [7] );
  assign _001__S = rst ? rst_S : _056__S ;
  assign rst_R1 = ( | (_001__R [7] | ( { 1{ !rst }} & _056__T [7] & _001__C [7] ))) && 1'b0 != _056_[7] ;
  assign _057_[7] = ex_wb_rd == 2'b10;
  assign _057__S = 0 ;
  logic [1:0] ex_wb_rd_C2 ;
  logic [1:0] ex_wb_rd_R2 ;
  logic [1:0] ex_wb_rd_X2 ;
  assign _057__T [7] = | ex_wb_rd_T ;
  assign ex_wb_rd_C2 = { 2{ _057__C [7] }} ;
  assign ex_wb_rd_R2 = { 2{ _057__R [7] }} ;
  assign ex_wb_rd_X2 = { 2{ _057__X [7] }} ;
  assign _058_[7] = ex_wb_reg_wen ? _057_[7] : 1'b0;
  logic [0:0] ex_wb_reg_wen_C2 ;
  logic [0:0] ex_wb_reg_wen_R2 ;
  logic [0:0] ex_wb_reg_wen_X2 ;
  assign ex_wb_reg_wen_C2 = | _058__C [7] ;
  assign ex_wb_reg_wen_X2 = | _058__X [7] ;
  logic [7:0] _057__C0 ;
  logic [7:0] _057__R0 ;
  logic [7:0] _057__X0 ;
  assign _057__C0 [7] = { 1{ ex_wb_reg_wen }} ;
  assign _057__R0 [7] = { 1{ ex_wb_reg_wen }} & ( _058__R [7] | ( { 1{ ex_wb_reg_wen_T  }} & _058__C [7] ));
  assign _057__X0 [7] = { 1{ ex_wb_reg_wen }} & _058__X [7] ;
  assign _058__T [7] = ex_wb_reg_wen ? ( { 1{ | ex_wb_reg_wen_T  }} | _057__T [7] ) : { 1{ | ex_wb_reg_wen_T  }};
  assign _058__S = ex_wb_reg_wen ? _057__S : ex_wb_reg_wen_S ;
  assign ex_wb_reg_wen_R2 = ( | (_058__R [7] | ( { 1{ ex_wb_reg_wen }} & _057__T [7] & _058__C [7] ))) && _057_[7] != 1'b0 ;
  assign _002_[7] = rst ? 1'b0 : _058_[7];
  logic [0:0] rst_C2 ;
  logic [0:0] rst_R2 ;
  logic [0:0] rst_X2 ;
  assign rst_C2 = | _002__C [7] ;
  assign rst_X2 = | _002__X [7] ;
  logic [7:0] _058__C0 ;
  logic [7:0] _058__R0 ;
  logic [7:0] _058__X0 ;
  assign _058__C0 [7] = { 1{ !rst }};
  assign _058__R0 [7] = { 1{ !rst }} & ( _002__R [7] | ( { 1{ rst_T  }} & _002__C [7] ));
  assign _058__X0 [7] = { 1{ !rst }} & _002__X [7] ;
  assign _002__T [7] = rst ? { 1{ | rst_T  }} : ( { 1{ | rst_T  }} | _058__T [7] );
  assign _002__S = rst ? rst_S : _058__S ;
  assign rst_R2 = ( | (_002__R [7] | ( { 1{ !rst }} & _058__T [7] & _002__C [7] ))) && 1'b0 != _058_[7] ;
  assign _059_[7] = ex_wb_rd == 2'b11;
  assign _059__S = 0 ;
  logic [1:0] ex_wb_rd_C3 ;
  logic [1:0] ex_wb_rd_R3 ;
  logic [1:0] ex_wb_rd_X3 ;
  assign _059__T [7] = | ex_wb_rd_T ;
  assign ex_wb_rd_C3 = { 2{ _059__C [7] }} ;
  assign ex_wb_rd_R3 = { 2{ _059__R [7] }} ;
  assign ex_wb_rd_X3 = { 2{ _059__X [7] }} ;
  assign _060_[7] = ex_wb_reg_wen ? _059_[7] : 1'b0;
  logic [0:0] ex_wb_reg_wen_C3 ;
  logic [0:0] ex_wb_reg_wen_R3 ;
  logic [0:0] ex_wb_reg_wen_X3 ;
  assign ex_wb_reg_wen_C3 = | _060__C [7] ;
  assign ex_wb_reg_wen_X3 = | _060__X [7] ;
  logic [7:0] _059__C0 ;
  logic [7:0] _059__R0 ;
  logic [7:0] _059__X0 ;
  assign _059__C0 [7] = { 1{ ex_wb_reg_wen }} ;
  assign _059__R0 [7] = { 1{ ex_wb_reg_wen }} & ( _060__R [7] | ( { 1{ ex_wb_reg_wen_T  }} & _060__C [7] ));
  assign _059__X0 [7] = { 1{ ex_wb_reg_wen }} & _060__X [7] ;
  assign _060__T [7] = ex_wb_reg_wen ? ( { 1{ | ex_wb_reg_wen_T  }} | _059__T [7] ) : { 1{ | ex_wb_reg_wen_T  }};
  assign _060__S = ex_wb_reg_wen ? _059__S : ex_wb_reg_wen_S ;
  assign ex_wb_reg_wen_R3 = ( | (_060__R [7] | ( { 1{ ex_wb_reg_wen }} & _059__T [7] & _060__C [7] ))) && _059_[7] != 1'b0 ;
  assign _003_[7] = rst ? 1'b0 : _060_[7];
  logic [0:0] rst_C3 ;
  logic [0:0] rst_R3 ;
  logic [0:0] rst_X3 ;
  assign rst_C3 = | _003__C [7] ;
  assign rst_X3 = | _003__X [7] ;
  logic [7:0] _060__C0 ;
  logic [7:0] _060__R0 ;
  logic [7:0] _060__X0 ;
  assign _060__C0 [7] = { 1{ !rst }};
  assign _060__R0 [7] = { 1{ !rst }} & ( _003__R [7] | ( { 1{ rst_T  }} & _003__C [7] ));
  assign _060__X0 [7] = { 1{ !rst }} & _003__X [7] ;
  assign _003__T [7] = rst ? { 1{ | rst_T  }} : ( { 1{ | rst_T  }} | _060__T [7] );
  assign _003__S = rst ? rst_S : _060__S ;
  assign rst_R3 = ( | (_003__R [7] | ( { 1{ !rst }} & _060__T [7] & _003__C [7] ))) && 1'b0 != _060_[7] ;
  assign _005_ = rst ? 1'b0 : id_ex_reg_wen;
  logic [0:0] rst_C4 ;
  logic [0:0] rst_R4 ;
  logic [0:0] rst_X4 ;
  assign rst_C4 = | _005__C ;
  assign rst_X4 = | _005__X ;
  logic [0:0] id_ex_reg_wen_C0 ;
  logic [0:0] id_ex_reg_wen_R0 ;
  logic [0:0] id_ex_reg_wen_X0 ;
  assign id_ex_reg_wen_C0 = { 1{ !rst }};
  assign id_ex_reg_wen_R0 = { 1{ !rst }} & ( _005__R | ( { 1{ rst_T  }} & _005__C ));
  assign id_ex_reg_wen_X0 = { 1{ !rst }} & _005__X ;
  assign _005__T = rst ? { 1{ | rst_T  }} : ( { 1{ | rst_T  }} | id_ex_reg_wen_T );
  assign _005__S = rst ? rst_S : id_ex_reg_wen_S ;
  assign rst_R4 = ( | (_005__R | ( { 1{ !rst }} & id_ex_reg_wen_T & _005__C ))) && 1'b0 != id_ex_reg_wen ;
  assign _004_ = rst ? ex_wb_rd : id_ex_rd;
  logic [0:0] rst_C5 ;
  logic [0:0] rst_R5 ;
  logic [0:0] rst_X5 ;
  assign rst_C5 = | _004__C ;
  assign rst_X5 = | _004__X ;
  assign _004__T = rst ? ( { 2{ rst_T  }} | ex_wb_rd_T ) : ( { 2{ rst_T  }} | id_ex_rd_T );
  assign _004__S = rst ? ex_wb_rd_S : id_ex_rd_S ;
  assign rst_R5 = ( | (_004__R | ( _004__C & ( { 2{ rst }} & ex_wb_rd_T | { 2{ !rst }} & id_ex_rd_T )))) && ex_wb_rd != id_ex_rd ;
  logic [1:0] ex_wb_rd_C4 ;
  logic [1:0] ex_wb_rd_R4 ;
  logic [1:0] ex_wb_rd_X4 ;
  assign ex_wb_rd_C4 = { 2{ rst }} ;
  assign ex_wb_rd_R4 = { 2{ rst }} & ( _004__R | ( { 2{ rst_T  }} & _004__C ));
  assign ex_wb_rd_X4 = { 2{ rst }} & _004__X ;
  logic [1:0] id_ex_rd_C0 ;
  logic [1:0] id_ex_rd_R0 ;
  logic [1:0] id_ex_rd_X0 ;
  assign id_ex_rd_C0 = { 2{ !rst }} ;
  assign id_ex_rd_R0 = { 2{ !rst }} & ( _004__R | ( { 2{ rst_T  }} & _004__C ));
  assign id_ex_rd_X0 = { 2{ !rst }} & _004__X ;
  assign _006_ = rst ? ex_wb_val : ex_alu_result;
  logic [0:0] rst_C6 ;
  logic [0:0] rst_R6 ;
  logic [0:0] rst_X6 ;
  assign rst_C6 = | _006__C ;
  assign rst_X6 = | _006__X ;
  assign _006__T = rst ? ( { 8{ rst_T  }} | ex_wb_val_T ) : ( { 8{ rst_T  }} | ex_alu_result_T );
  assign _006__S = rst ? ex_wb_val_S : ex_alu_result_S ;
  assign rst_R6 = ( | (_006__R | ( _006__C & ( { 8{ rst }} & ex_wb_val_T | { 8{ !rst }} & ex_alu_result_T )))) && ex_wb_val != ex_alu_result ;
  logic [7:0] ex_wb_val_C0 ;
  logic [7:0] ex_wb_val_R0 ;
  logic [7:0] ex_wb_val_X0 ;
  assign ex_wb_val_C0 = { 8{ rst }} ;
  assign ex_wb_val_R0 = { 8{ rst }} & ( _006__R | ( { 8{ rst_T  }} & _006__C ));
  assign ex_wb_val_X0 = { 8{ rst }} & _006__X ;
  logic [7:0] ex_alu_result_C0 ;
  logic [7:0] ex_alu_result_R0 ;
  logic [7:0] ex_alu_result_X0 ;
  assign ex_alu_result_C0 = { 8{ !rst }} ;
  assign ex_alu_result_R0 = { 8{ !rst }} & ( _006__R | ( { 8{ rst_T  }} & _006__C ));
  assign ex_alu_result_X0 = { 8{ !rst }} & _006__X ;
  assign _009_ = rst ? 1'b0 : id_wen;
  logic [0:0] rst_C7 ;
  logic [0:0] rst_R7 ;
  logic [0:0] rst_X7 ;
  assign rst_C7 = | _009__C ;
  assign rst_X7 = | _009__X ;
  logic [0:0] id_wen_C4 ;
  logic [0:0] id_wen_R4 ;
  logic [0:0] id_wen_X4 ;
  assign id_wen_C4 = { 1{ !rst }};
  assign id_wen_R4 = { 1{ !rst }} & ( _009__R | ( { 1{ rst_T  }} & _009__C ));
  assign id_wen_X4 = { 1{ !rst }} & _009__X ;
  assign _009__T = rst ? { 1{ | rst_T  }} : ( { 1{ | rst_T  }} | id_wen_T );
  assign _009__S = rst ? rst_S : id_wen_S ;
  assign rst_R7 = ( | (_009__R | ( { 1{ !rst }} & id_wen_T & _009__C ))) && 1'b0 != id_wen ;
  assign _008_ = rst ? id_ex_rd : inst[1:0];
  logic [0:0] rst_C8 ;
  logic [0:0] rst_R8 ;
  logic [0:0] rst_X8 ;
  assign rst_C8 = | _008__C ;
  assign rst_X8 = | _008__X ;
  assign _008__T = rst ? ( { 2{ rst_T  }} | id_ex_rd_T ) : ( { 2{ rst_T  }} | inst_T [1:0] );
  assign _008__S = rst ? id_ex_rd_S : inst_S ;
  assign rst_R8 = ( | (_008__R | ( _008__C & ( { 2{ rst }} & id_ex_rd_T | { 2{ !rst }} & inst_T [1:0] )))) && id_ex_rd != inst[1:0] ;
  assign { inst_R8 [2], inst_R8 [3], inst_R8 [4], inst_R8 [5] } = 0;
  assign { inst_X8 [2], inst_X8 [3], inst_X8 [4], inst_X8 [5] } = 0;
  assign { inst_C8 [2], inst_C8 [3], inst_C8 [4], inst_C8 [5] } = 0;
  logic [1:0] id_ex_rd_C1 ;
  logic [1:0] id_ex_rd_R1 ;
  logic [1:0] id_ex_rd_X1 ;
  assign id_ex_rd_C1 = { 2{ rst }} ;
  assign id_ex_rd_R1 = { 2{ rst }} & ( _008__R | ( { 2{ rst_T  }} & _008__C ));
  assign id_ex_rd_X1 = { 2{ rst }} & _008__X ;
  logic [7:0] inst_C9 ;
  logic [7:0] inst_R9 ;
  logic [7:0] inst_X9 ;
  assign inst_C9 [1:0] = { 2{ !rst }} ;
  assign inst_R9 [1:0] = { 2{ !rst }} & ( _008__R | ( { 2{ rst_T  }} & _008__C ));
  assign inst_X9 [1:0] = { 2{ !rst }} & _008__X ;
  assign _007_ = rst ? id_ex_op : inst[7:6];
  logic [0:0] rst_C9 ;
  logic [0:0] rst_R9 ;
  logic [0:0] rst_X9 ;
  assign rst_C9 = | _007__C ;
  assign rst_X9 = | _007__X ;
  assign _007__T = rst ? ( { 2{ rst_T  }} | id_ex_op_T ) : ( { 2{ rst_T  }} | inst_T [7:6] );
  assign _007__S = rst ? id_ex_op_S : inst_S ;
  assign rst_R9 = ( | (_007__R | ( _007__C & ( { 2{ rst }} & id_ex_op_T | { 2{ !rst }} & inst_T [7:6] )))) && id_ex_op != inst[7:6] ;
  logic [1:0] id_ex_op_C2 ;
  logic [1:0] id_ex_op_R2 ;
  logic [1:0] id_ex_op_X2 ;
  assign id_ex_op_C2 = { 2{ rst }} ;
  assign id_ex_op_R2 = { 2{ rst }} & ( _007__R | ( { 2{ rst_T  }} & _007__C ));
  assign id_ex_op_X2 = { 2{ rst }} & _007__X ;
  assign inst_C9 [7:6] = { 2{ !rst }} ;
  assign inst_R9 [7:6] = { 2{ !rst }} & ( _007__R | ( { 2{ rst_T  }} & _007__C ));
  assign inst_X9 [7:6] = { 2{ !rst }} & _007__X ;
  assign _011_ = rst ? id_ex_rs2_val : id_rs2_val;
  logic [0:0] rst_C10 ;
  logic [0:0] rst_R10 ;
  logic [0:0] rst_X10 ;
  assign rst_C10 = | _011__C ;
  assign rst_X10 = | _011__X ;
  assign _011__T = rst ? ( { 8{ rst_T  }} | id_ex_rs2_val_T ) : ( { 8{ rst_T  }} | id_rs2_val_T );
  assign _011__S = rst ? id_ex_rs2_val_S : id_rs2_val_S ;
  assign rst_R10 = ( | (_011__R | ( _011__C & ( { 8{ rst }} & id_ex_rs2_val_T | { 8{ !rst }} & id_rs2_val_T )))) && id_ex_rs2_val != id_rs2_val ;
  logic [7:0] id_ex_rs2_val_C2 ;
  logic [7:0] id_ex_rs2_val_R2 ;
  logic [7:0] id_ex_rs2_val_X2 ;
  assign id_ex_rs2_val_C2 = { 8{ rst }} ;
  assign id_ex_rs2_val_R2 = { 8{ rst }} & ( _011__R | ( { 8{ rst_T  }} & _011__C ));
  assign id_ex_rs2_val_X2 = { 8{ rst }} & _011__X ;
  logic [7:0] id_rs2_val_C0 ;
  logic [7:0] id_rs2_val_R0 ;
  logic [7:0] id_rs2_val_X0 ;
  assign id_rs2_val_C0 = { 8{ !rst }} ;
  assign id_rs2_val_R0 = { 8{ !rst }} & ( _011__R | ( { 8{ rst_T  }} & _011__C ));
  assign id_rs2_val_X0 = { 8{ !rst }} & _011__X ;
  assign _010_ = rst ? id_ex_rs1_val : id_rs1_val;
  logic [0:0] rst_C11 ;
  logic [0:0] rst_R11 ;
  logic [0:0] rst_X11 ;
  assign rst_C11 = | _010__C ;
  assign rst_X11 = | _010__X ;
  assign _010__T = rst ? ( { 8{ rst_T  }} | id_ex_rs1_val_T ) : ( { 8{ rst_T  }} | id_rs1_val_T );
  assign _010__S = rst ? id_ex_rs1_val_S : id_rs1_val_S ;
  assign rst_R11 = ( | (_010__R | ( _010__C & ( { 8{ rst }} & id_ex_rs1_val_T | { 8{ !rst }} & id_rs1_val_T )))) && id_ex_rs1_val != id_rs1_val ;
  logic [7:0] id_ex_rs1_val_C2 ;
  logic [7:0] id_ex_rs1_val_R2 ;
  logic [7:0] id_ex_rs1_val_X2 ;
  assign id_ex_rs1_val_C2 = { 8{ rst }} ;
  assign id_ex_rs1_val_R2 = { 8{ rst }} & ( _010__R | ( { 8{ rst_T  }} & _010__C ));
  assign id_ex_rs1_val_X2 = { 8{ rst }} & _010__X ;
  logic [7:0] id_rs1_val_C0 ;
  logic [7:0] id_rs1_val_R0 ;
  logic [7:0] id_rs1_val_X0 ;
  assign id_rs1_val_C0 = { 8{ !rst }} ;
  assign id_rs1_val_R0 = { 8{ !rst }} & ( _010__R | ( { 8{ rst_T  }} & _010__C ));
  assign id_rs1_val_X0 = { 8{ !rst }} & _010__X ;
  logic [1:0] fangyuan0;
  logic [1:0] fangyuan0_T ;
  logic [1:0] fangyuan0_R ;
  logic [1:0] fangyuan0_C ;
  logic [1:0] fangyuan0_X ;
  assign fangyuan0 = { 1'b0, reg_3_w_stage[1] };
  assign fangyuan0_T = {  1'h0 , reg_3_w_stage_T [1]  };
  logic [4:0] fangyuan0_S ;
  assign fangyuan0_S = 0 ;
  assign { reg_3_w_stage_R0 [0] } = 0;
  assign { reg_3_w_stage_X0 [0] } = 0;
  assign { reg_3_w_stage_C0 [0] } = 0;
  logic [1:0] reg_3_w_stage_R1 ;
  logic [1:0] reg_3_w_stage_X1 ;
  logic [1:0] reg_3_w_stage_C1 ;
  assign reg_3_w_stage_R1 [1:1] = fangyuan0_R [0:0] ;
  assign reg_3_w_stage_X1 [1:1] = fangyuan0_X [0:0] ;
  assign reg_3_w_stage_C1 [1:1] = fangyuan0_C [0:0] ;

  assign _061_ = _042_ ? _051_ : fangyuan0;
  logic [0:0] _042__C0 ;
  logic [0:0] _042__R0 ;
  logic [0:0] _042__X0 ;
  assign _042__C0 = | _061__C ;
  assign _042__X0 = | _061__X ;
  assign _061__T = _042_ ? ( { 2{ _042__T  }} | _051__T ) : ( { 2{ _042__T  }} | fangyuan0_T );
  assign _061__S = _042_ ? _051__S : fangyuan0_S ;
  assign _042__R0 = ( | (_061__R | ( _061__C & ( { 2{ _042_ }} & _051__T | { 2{ !_042_ }} & fangyuan0_T )))) && _051_ != fangyuan0 ;
  logic [1:0] _051__C0 ;
  logic [1:0] _051__R0 ;
  logic [1:0] _051__X0 ;
  assign _051__C0 = { 2{ _042_ }} ;
  assign _051__R0 = { 2{ _042_ }} & ( _061__R | ( { 2{ _042__T  }} & _061__C ));
  assign _051__X0 = { 2{ _042_ }} & _061__X ;
  logic [1:0] fangyuan0_C0 ;
  logic [1:0] fangyuan0_R0 ;
  logic [1:0] fangyuan0_X0 ;
  assign fangyuan0_C0 = { 2{ !_042_ }} ;
  assign fangyuan0_R0 = { 2{ !_042_ }} & ( _061__R | ( { 2{ _042__T  }} & _061__C ));
  assign fangyuan0_X0 = { 2{ !_042_ }} & _061__X ;
  assign _015_ = rst ? 2'b00 : _061_;
  logic [0:0] rst_C12 ;
  logic [0:0] rst_R12 ;
  logic [0:0] rst_X12 ;
  assign rst_C12 = | _015__C ;
  assign rst_X12 = | _015__X ;
  logic [1:0] _061__C0 ;
  logic [1:0] _061__R0 ;
  logic [1:0] _061__X0 ;
  assign _061__C0 = { 2{ !rst }};
  assign _061__R0 = { 2{ !rst }} & ( _015__R | ( { 2{ rst_T  }} & _015__C ));
  assign _061__X0 = { 2{ !rst }} & _015__X ;
  assign _015__T = rst ? { 2{ | rst_T  }} : ( { 2{ | rst_T  }} | _061__T );
  assign _015__S = rst ? rst_S : _061__S ;
  assign rst_R12 = ( | (_015__R | ( { 2{ !rst }} & _061__T & _015__C ))) && 2'b00 != _061_ ;
  logic [1:0] fangyuan1;
  logic [1:0] fangyuan1_T ;
  logic [1:0] fangyuan1_R ;
  logic [1:0] fangyuan1_C ;
  logic [1:0] fangyuan1_X ;
  assign fangyuan1 = { 1'b0, reg_2_w_stage[1] };
  assign fangyuan1_T = {  1'h0 , reg_2_w_stage_T [1]  };
  logic [4:0] fangyuan1_S ;
  assign fangyuan1_S = 0 ;
  assign { reg_2_w_stage_R0 [0] } = 0;
  assign { reg_2_w_stage_X0 [0] } = 0;
  assign { reg_2_w_stage_C0 [0] } = 0;
  logic [1:0] reg_2_w_stage_R1 ;
  logic [1:0] reg_2_w_stage_X1 ;
  logic [1:0] reg_2_w_stage_C1 ;
  assign reg_2_w_stage_R1 [1:1] = fangyuan1_R [0:0] ;
  assign reg_2_w_stage_X1 [1:1] = fangyuan1_X [0:0] ;
  assign reg_2_w_stage_C1 [1:1] = fangyuan1_C [0:0] ;

  assign _062_ = _041_ ? _050_ : fangyuan1;
  logic [0:0] _041__C0 ;
  logic [0:0] _041__R0 ;
  logic [0:0] _041__X0 ;
  assign _041__C0 = | _062__C ;
  assign _041__X0 = | _062__X ;
  assign _062__T = _041_ ? ( { 2{ _041__T  }} | _050__T ) : ( { 2{ _041__T  }} | fangyuan1_T );
  assign _062__S = _041_ ? _050__S : fangyuan1_S ;
  assign _041__R0 = ( | (_062__R | ( _062__C & ( { 2{ _041_ }} & _050__T | { 2{ !_041_ }} & fangyuan1_T )))) && _050_ != fangyuan1 ;
  logic [1:0] _050__C0 ;
  logic [1:0] _050__R0 ;
  logic [1:0] _050__X0 ;
  assign _050__C0 = { 2{ _041_ }} ;
  assign _050__R0 = { 2{ _041_ }} & ( _062__R | ( { 2{ _041__T  }} & _062__C ));
  assign _050__X0 = { 2{ _041_ }} & _062__X ;
  logic [1:0] fangyuan1_C0 ;
  logic [1:0] fangyuan1_R0 ;
  logic [1:0] fangyuan1_X0 ;
  assign fangyuan1_C0 = { 2{ !_041_ }} ;
  assign fangyuan1_R0 = { 2{ !_041_ }} & ( _062__R | ( { 2{ _041__T  }} & _062__C ));
  assign fangyuan1_X0 = { 2{ !_041_ }} & _062__X ;
  assign _014_ = rst ? 2'b00 : _062_;
  logic [0:0] rst_C13 ;
  logic [0:0] rst_R13 ;
  logic [0:0] rst_X13 ;
  assign rst_C13 = | _014__C ;
  assign rst_X13 = | _014__X ;
  logic [1:0] _062__C0 ;
  logic [1:0] _062__R0 ;
  logic [1:0] _062__X0 ;
  assign _062__C0 = { 2{ !rst }};
  assign _062__R0 = { 2{ !rst }} & ( _014__R | ( { 2{ rst_T  }} & _014__C ));
  assign _062__X0 = { 2{ !rst }} & _014__X ;
  assign _014__T = rst ? { 2{ | rst_T  }} : ( { 2{ | rst_T  }} | _062__T );
  assign _014__S = rst ? rst_S : _062__S ;
  assign rst_R13 = ( | (_014__R | ( { 2{ !rst }} & _062__T & _014__C ))) && 2'b00 != _062_ ;
  logic [1:0] fangyuan2;
  logic [1:0] fangyuan2_T ;
  logic [1:0] fangyuan2_R ;
  logic [1:0] fangyuan2_C ;
  logic [1:0] fangyuan2_X ;
  assign fangyuan2 = { 1'b0, reg_1_w_stage[1] };
  assign fangyuan2_T = {  1'h0 , reg_1_w_stage_T [1]  };
  logic [4:0] fangyuan2_S ;
  assign fangyuan2_S = 0 ;
  assign { reg_1_w_stage_R0 [0] } = 0;
  assign { reg_1_w_stage_X0 [0] } = 0;
  assign { reg_1_w_stage_C0 [0] } = 0;
  logic [1:0] reg_1_w_stage_R1 ;
  logic [1:0] reg_1_w_stage_X1 ;
  logic [1:0] reg_1_w_stage_C1 ;
  assign reg_1_w_stage_R1 [1:1] = fangyuan2_R [0:0] ;
  assign reg_1_w_stage_X1 [1:1] = fangyuan2_X [0:0] ;
  assign reg_1_w_stage_C1 [1:1] = fangyuan2_C [0:0] ;

  assign _063_ = _040_ ? _049_ : fangyuan2;
  logic [0:0] _040__C0 ;
  logic [0:0] _040__R0 ;
  logic [0:0] _040__X0 ;
  assign _040__C0 = | _063__C ;
  assign _040__X0 = | _063__X ;
  assign _063__T = _040_ ? ( { 2{ _040__T  }} | _049__T ) : ( { 2{ _040__T  }} | fangyuan2_T );
  assign _063__S = _040_ ? _049__S : fangyuan2_S ;
  assign _040__R0 = ( | (_063__R | ( _063__C & ( { 2{ _040_ }} & _049__T | { 2{ !_040_ }} & fangyuan2_T )))) && _049_ != fangyuan2 ;
  logic [1:0] _049__C0 ;
  logic [1:0] _049__R0 ;
  logic [1:0] _049__X0 ;
  assign _049__C0 = { 2{ _040_ }} ;
  assign _049__R0 = { 2{ _040_ }} & ( _063__R | ( { 2{ _040__T  }} & _063__C ));
  assign _049__X0 = { 2{ _040_ }} & _063__X ;
  logic [1:0] fangyuan2_C0 ;
  logic [1:0] fangyuan2_R0 ;
  logic [1:0] fangyuan2_X0 ;
  assign fangyuan2_C0 = { 2{ !_040_ }} ;
  assign fangyuan2_R0 = { 2{ !_040_ }} & ( _063__R | ( { 2{ _040__T  }} & _063__C ));
  assign fangyuan2_X0 = { 2{ !_040_ }} & _063__X ;
  assign _013_ = rst ? 2'b00 : _063_;
  logic [0:0] rst_C14 ;
  logic [0:0] rst_R14 ;
  logic [0:0] rst_X14 ;
  assign rst_C14 = | _013__C ;
  assign rst_X14 = | _013__X ;
  logic [1:0] _063__C0 ;
  logic [1:0] _063__R0 ;
  logic [1:0] _063__X0 ;
  assign _063__C0 = { 2{ !rst }};
  assign _063__R0 = { 2{ !rst }} & ( _013__R | ( { 2{ rst_T  }} & _013__C ));
  assign _063__X0 = { 2{ !rst }} & _013__X ;
  assign _013__T = rst ? { 2{ | rst_T  }} : ( { 2{ | rst_T  }} | _063__T );
  assign _013__S = rst ? rst_S : _063__S ;
  assign rst_R14 = ( | (_013__R | ( { 2{ !rst }} & _063__T & _013__C ))) && 2'b00 != _063_ ;
  logic [1:0] fangyuan3;
  logic [1:0] fangyuan3_T ;
  logic [1:0] fangyuan3_R ;
  logic [1:0] fangyuan3_C ;
  logic [1:0] fangyuan3_X ;
  assign fangyuan3 = { 1'b0, reg_0_w_stage[1] };
  assign fangyuan3_T = {  1'h0 , reg_0_w_stage_T [1]  };
  logic [4:0] fangyuan3_S ;
  assign fangyuan3_S = 0 ;
  assign { reg_0_w_stage_R0 [0] } = 0;
  assign { reg_0_w_stage_X0 [0] } = 0;
  assign { reg_0_w_stage_C0 [0] } = 0;
  logic [1:0] reg_0_w_stage_R1 ;
  logic [1:0] reg_0_w_stage_X1 ;
  logic [1:0] reg_0_w_stage_C1 ;
  assign reg_0_w_stage_R1 [1:1] = fangyuan3_R [0:0] ;
  assign reg_0_w_stage_X1 [1:1] = fangyuan3_X [0:0] ;
  assign reg_0_w_stage_C1 [1:1] = fangyuan3_C [0:0] ;

  assign _064_ = _043_ ? _052_ : fangyuan3;
  logic [0:0] _043__C0 ;
  logic [0:0] _043__R0 ;
  logic [0:0] _043__X0 ;
  assign _043__C0 = | _064__C ;
  assign _043__X0 = | _064__X ;
  assign _064__T = _043_ ? ( { 2{ _043__T  }} | _052__T ) : ( { 2{ _043__T  }} | fangyuan3_T );
  assign _064__S = _043_ ? _052__S : fangyuan3_S ;
  assign _043__R0 = ( | (_064__R | ( _064__C & ( { 2{ _043_ }} & _052__T | { 2{ !_043_ }} & fangyuan3_T )))) && _052_ != fangyuan3 ;
  logic [1:0] _052__C0 ;
  logic [1:0] _052__R0 ;
  logic [1:0] _052__X0 ;
  assign _052__C0 = { 2{ _043_ }} ;
  assign _052__R0 = { 2{ _043_ }} & ( _064__R | ( { 2{ _043__T  }} & _064__C ));
  assign _052__X0 = { 2{ _043_ }} & _064__X ;
  logic [1:0] fangyuan3_C0 ;
  logic [1:0] fangyuan3_R0 ;
  logic [1:0] fangyuan3_X0 ;
  assign fangyuan3_C0 = { 2{ !_043_ }} ;
  assign fangyuan3_R0 = { 2{ !_043_ }} & ( _064__R | ( { 2{ _043__T  }} & _064__C ));
  assign fangyuan3_X0 = { 2{ !_043_ }} & _064__X ;
  assign _012_ = rst ? 2'b00 : _064_;
  logic [0:0] rst_C15 ;
  logic [0:0] rst_R15 ;
  logic [0:0] rst_X15 ;
  assign rst_C15 = | _012__C ;
  assign rst_X15 = | _012__X ;
  logic [1:0] _064__C0 ;
  logic [1:0] _064__R0 ;
  logic [1:0] _064__X0 ;
  assign _064__C0 = { 2{ !rst }};
  assign _064__R0 = { 2{ !rst }} & ( _012__R | ( { 2{ rst_T  }} & _012__C ));
  assign _064__X0 = { 2{ !rst }} & _012__X ;
  assign _012__T = rst ? { 2{ | rst_T  }} : ( { 2{ | rst_T  }} | _064__T );
  assign _012__S = rst ? rst_S : _064__S ;
  assign rst_R15 = ( | (_012__R | ( { 2{ !rst }} & _064__T & _012__C ))) && 2'b00 != _064_ ;
  assign _065_ = id_ex_rs1_val - id_ex_rs2_val;
  assign _065__S = 0 ;
  logic [7:0] id_ex_rs1_val_C3 ;
  logic [7:0] id_ex_rs1_val_R3 ;
  logic [7:0] id_ex_rs1_val_X3 ;
  logic [7:0] id_ex_rs2_val_C3 ;
  logic [7:0] id_ex_rs2_val_R3 ;
  logic [7:0] id_ex_rs2_val_X3 ;
  assign _065__T = id_ex_rs1_val_T | id_ex_rs2_val_T ;
  assign id_ex_rs1_val_C3 = _065__C ;
  assign id_ex_rs1_val_X3 = _065__X ;
  assign id_ex_rs2_val_C3 = _065__C ;
  assign id_ex_rs2_val_X3 = _065__X ;
  assign id_ex_rs1_val_R3 = _065__R | ( _065__C & id_ex_rs2_val_T );
  assign id_ex_rs2_val_R3 = _065__R | ( _065__C & id_ex_rs1_val_T );
  assign _066_ = _023_ ? reg_2_w_stage : reg_3_w_stage;
  logic [0:0] _023__C0 ;
  logic [0:0] _023__R0 ;
  logic [0:0] _023__X0 ;
  assign _023__C0 = | _066__C ;
  assign _023__X0 = | _066__X ;
  assign _066__T = _023_ ? ( { 2{ _023__T  }} | reg_2_w_stage_T ) : ( { 2{ _023__T  }} | reg_3_w_stage_T );
  assign _066__S = _023_ ? reg_2_w_stage_S : reg_3_w_stage_S ;
  assign _023__R0 = ( | (_066__R | ( _066__C & ( { 2{ _023_ }} & reg_2_w_stage_T | { 2{ !_023_ }} & reg_3_w_stage_T )))) && reg_2_w_stage != reg_3_w_stage ;
  assign { reg_2_w_stage_R1 [0] } = 0;
  assign { reg_2_w_stage_X1 [0] } = 0;
  assign { reg_2_w_stage_C1 [0] } = 0;
  assign { reg_3_w_stage_R1 [0] } = 0;
  assign { reg_3_w_stage_X1 [0] } = 0;
  assign { reg_3_w_stage_C1 [0] } = 0;
  logic [1:0] reg_2_w_stage_C2 ;
  logic [1:0] reg_2_w_stage_R2 ;
  logic [1:0] reg_2_w_stage_X2 ;
  assign reg_2_w_stage_C2 = { 2{ _023_ }} ;
  assign reg_2_w_stage_R2 = { 2{ _023_ }} & ( _066__R | ( { 2{ _023__T  }} & _066__C ));
  assign reg_2_w_stage_X2 = { 2{ _023_ }} & _066__X ;
  logic [1:0] reg_3_w_stage_C2 ;
  logic [1:0] reg_3_w_stage_R2 ;
  logic [1:0] reg_3_w_stage_X2 ;
  assign reg_3_w_stage_C2 = { 2{ !_023_ }} ;
  assign reg_3_w_stage_R2 = { 2{ !_023_ }} & ( _066__R | ( { 2{ _023__T  }} & _066__C ));
  assign reg_3_w_stage_X2 = { 2{ !_023_ }} & _066__X ;
  assign _067_ = _022_ ? reg_1_w_stage : _066_;
  logic [0:0] _022__C0 ;
  logic [0:0] _022__R0 ;
  logic [0:0] _022__X0 ;
  assign _022__C0 = | _067__C ;
  assign _022__X0 = | _067__X ;
  assign _067__T = _022_ ? ( { 2{ _022__T  }} | reg_1_w_stage_T ) : ( { 2{ _022__T  }} | _066__T );
  assign _067__S = _022_ ? reg_1_w_stage_S : _066__S ;
  assign _022__R0 = ( | (_067__R | ( _067__C & ( { 2{ _022_ }} & reg_1_w_stage_T | { 2{ !_022_ }} & _066__T )))) && reg_1_w_stage != _066_ ;
  assign { reg_1_w_stage_R1 [0] } = 0;
  assign { reg_1_w_stage_X1 [0] } = 0;
  assign { reg_1_w_stage_C1 [0] } = 0;
  logic [1:0] reg_1_w_stage_C2 ;
  logic [1:0] reg_1_w_stage_R2 ;
  logic [1:0] reg_1_w_stage_X2 ;
  assign reg_1_w_stage_C2 = { 2{ _022_ }} ;
  assign reg_1_w_stage_R2 = { 2{ _022_ }} & ( _067__R | ( { 2{ _022__T  }} & _067__C ));
  assign reg_1_w_stage_X2 = { 2{ _022_ }} & _067__X ;
  logic [1:0] _066__C0 ;
  logic [1:0] _066__R0 ;
  logic [1:0] _066__X0 ;
  assign _066__C0 = { 2{ !_022_ }} ;
  assign _066__R0 = { 2{ !_022_ }} & ( _067__R | ( { 2{ _022__T  }} & _067__C ));
  assign _066__X0 = { 2{ !_022_ }} & _067__X ;
  assign rs1_stage_info = _021_ ? reg_0_w_stage : _067_;
  logic [0:0] _021__C0 ;
  logic [0:0] _021__R0 ;
  logic [0:0] _021__X0 ;
  assign _021__C0 = | rs1_stage_info_C ;
  assign _021__X0 = | rs1_stage_info_X ;
  assign rs1_stage_info_T = _021_ ? ( { 2{ _021__T  }} | reg_0_w_stage_T ) : ( { 2{ _021__T  }} | _067__T );
  assign rs1_stage_info_S = _021_ ? reg_0_w_stage_S : _067__S ;
  assign _021__R0 = ( | (rs1_stage_info_R | ( rs1_stage_info_C & ( { 2{ _021_ }} & reg_0_w_stage_T | { 2{ !_021_ }} & _067__T )))) && reg_0_w_stage != _067_ ;
  assign { reg_0_w_stage_R1 [0] } = 0;
  assign { reg_0_w_stage_X1 [0] } = 0;
  assign { reg_0_w_stage_C1 [0] } = 0;
  logic [1:0] reg_0_w_stage_C2 ;
  logic [1:0] reg_0_w_stage_R2 ;
  logic [1:0] reg_0_w_stage_X2 ;
  assign reg_0_w_stage_C2 = { 2{ _021_ }} ;
  assign reg_0_w_stage_R2 = { 2{ _021_ }} & ( rs1_stage_info_R | ( { 2{ _021__T  }} & rs1_stage_info_C ));
  assign reg_0_w_stage_X2 = { 2{ _021_ }} & rs1_stage_info_X ;
  logic [1:0] _067__C0 ;
  logic [1:0] _067__R0 ;
  logic [1:0] _067__X0 ;
  assign _067__C0 = { 2{ !_021_ }} ;
  assign _067__R0 = { 2{ !_021_ }} & ( rs1_stage_info_R | ( { 2{ _021__T  }} & rs1_stage_info_C ));
  assign _067__X0 = { 2{ !_021_ }} & rs1_stage_info_X ;
  assign _068_ = _026_ ? reg_2_w_stage : reg_3_w_stage;
  logic [0:0] _026__C0 ;
  logic [0:0] _026__R0 ;
  logic [0:0] _026__X0 ;
  assign _026__C0 = | _068__C ;
  assign _026__X0 = | _068__X ;
  assign _068__T = _026_ ? ( { 2{ _026__T  }} | reg_2_w_stage_T ) : ( { 2{ _026__T  }} | reg_3_w_stage_T );
  assign _068__S = _026_ ? reg_2_w_stage_S : reg_3_w_stage_S ;
  assign _026__R0 = ( | (_068__R | ( _068__C & ( { 2{ _026_ }} & reg_2_w_stage_T | { 2{ !_026_ }} & reg_3_w_stage_T )))) && reg_2_w_stage != reg_3_w_stage ;
  logic [1:0] reg_2_w_stage_C3 ;
  logic [1:0] reg_2_w_stage_R3 ;
  logic [1:0] reg_2_w_stage_X3 ;
  assign reg_2_w_stage_C3 = { 2{ _026_ }} ;
  assign reg_2_w_stage_R3 = { 2{ _026_ }} & ( _068__R | ( { 2{ _026__T  }} & _068__C ));
  assign reg_2_w_stage_X3 = { 2{ _026_ }} & _068__X ;
  logic [1:0] reg_3_w_stage_C3 ;
  logic [1:0] reg_3_w_stage_R3 ;
  logic [1:0] reg_3_w_stage_X3 ;
  assign reg_3_w_stage_C3 = { 2{ !_026_ }} ;
  assign reg_3_w_stage_R3 = { 2{ !_026_ }} & ( _068__R | ( { 2{ _026__T  }} & _068__C ));
  assign reg_3_w_stage_X3 = { 2{ !_026_ }} & _068__X ;
  assign _069_ = _025_ ? reg_1_w_stage : _068_;
  logic [0:0] _025__C0 ;
  logic [0:0] _025__R0 ;
  logic [0:0] _025__X0 ;
  assign _025__C0 = | _069__C ;
  assign _025__X0 = | _069__X ;
  assign _069__T = _025_ ? ( { 2{ _025__T  }} | reg_1_w_stage_T ) : ( { 2{ _025__T  }} | _068__T );
  assign _069__S = _025_ ? reg_1_w_stage_S : _068__S ;
  assign _025__R0 = ( | (_069__R | ( _069__C & ( { 2{ _025_ }} & reg_1_w_stage_T | { 2{ !_025_ }} & _068__T )))) && reg_1_w_stage != _068_ ;
  logic [1:0] reg_1_w_stage_C3 ;
  logic [1:0] reg_1_w_stage_R3 ;
  logic [1:0] reg_1_w_stage_X3 ;
  assign reg_1_w_stage_C3 = { 2{ _025_ }} ;
  assign reg_1_w_stage_R3 = { 2{ _025_ }} & ( _069__R | ( { 2{ _025__T  }} & _069__C ));
  assign reg_1_w_stage_X3 = { 2{ _025_ }} & _069__X ;
  logic [1:0] _068__C0 ;
  logic [1:0] _068__R0 ;
  logic [1:0] _068__X0 ;
  assign _068__C0 = { 2{ !_025_ }} ;
  assign _068__R0 = { 2{ !_025_ }} & ( _069__R | ( { 2{ _025__T  }} & _069__C ));
  assign _068__X0 = { 2{ !_025_ }} & _069__X ;
  assign rs2_stage_info = _024_ ? reg_0_w_stage : _069_;
  logic [0:0] _024__C0 ;
  logic [0:0] _024__R0 ;
  logic [0:0] _024__X0 ;
  assign _024__C0 = | rs2_stage_info_C ;
  assign _024__X0 = | rs2_stage_info_X ;
  assign rs2_stage_info_T = _024_ ? ( { 2{ _024__T  }} | reg_0_w_stage_T ) : ( { 2{ _024__T  }} | _069__T );
  assign rs2_stage_info_S = _024_ ? reg_0_w_stage_S : _069__S ;
  assign _024__R0 = ( | (rs2_stage_info_R | ( rs2_stage_info_C & ( { 2{ _024_ }} & reg_0_w_stage_T | { 2{ !_024_ }} & _069__T )))) && reg_0_w_stage != _069_ ;
  logic [1:0] reg_0_w_stage_C3 ;
  logic [1:0] reg_0_w_stage_R3 ;
  logic [1:0] reg_0_w_stage_X3 ;
  assign reg_0_w_stage_C3 = { 2{ _024_ }} ;
  assign reg_0_w_stage_R3 = { 2{ _024_ }} & ( rs2_stage_info_R | ( { 2{ _024__T  }} & rs2_stage_info_C ));
  assign reg_0_w_stage_X3 = { 2{ _024_ }} & rs2_stage_info_X ;
  logic [1:0] _069__C0 ;
  logic [1:0] _069__R0 ;
  logic [1:0] _069__X0 ;
  assign _069__C0 = { 2{ !_024_ }} ;
  assign _069__R0 = { 2{ !_024_ }} & ( rs2_stage_info_R | ( { 2{ _024__T  }} & rs2_stage_info_C ));
  assign _069__X0 = { 2{ !_024_ }} & rs2_stage_info_X ;
  assign _070_ = _023_ ? _047_ : _048_;
  logic [0:0] _023__C1 ;
  logic [0:0] _023__R1 ;
  logic [0:0] _023__X1 ;
  assign _023__C1 = | _070__C ;
  assign _023__X1 = | _070__X ;
  assign _070__T = _023_ ? ( { 8{ _023__T  }} | _047__T ) : ( { 8{ _023__T  }} | _048__T );
  assign _070__S = _023_ ? _047__S : _048__S ;
  assign _023__R1 = ( | (_070__R | ( _070__C & ( { 8{ _023_ }} & _047__T | { 8{ !_023_ }} & _048__T )))) && _047_ != _048_ ;
  logic [7:0] _047__C0 ;
  logic [7:0] _047__R0 ;
  logic [7:0] _047__X0 ;
  assign _047__C0 = { 8{ _023_ }} ;
  assign _047__R0 = { 8{ _023_ }} & ( _070__R | ( { 8{ _023__T  }} & _070__C ));
  assign _047__X0 = { 8{ _023_ }} & _070__X ;
  logic [7:0] _048__C0 ;
  logic [7:0] _048__R0 ;
  logic [7:0] _048__X0 ;
  assign _048__C0 = { 8{ !_023_ }} ;
  assign _048__R0 = { 8{ !_023_ }} & ( _070__R | ( { 8{ _023__T  }} & _070__C ));
  assign _048__X0 = { 8{ !_023_ }} & _070__X ;
  assign _071_ = _022_ ? _046_ : _070_;
  logic [0:0] _022__C1 ;
  logic [0:0] _022__R1 ;
  logic [0:0] _022__X1 ;
  assign _022__C1 = | _071__C ;
  assign _022__X1 = | _071__X ;
  assign _071__T = _022_ ? ( { 8{ _022__T  }} | _046__T ) : ( { 8{ _022__T  }} | _070__T );
  assign _071__S = _022_ ? _046__S : _070__S ;
  assign _022__R1 = ( | (_071__R | ( _071__C & ( { 8{ _022_ }} & _046__T | { 8{ !_022_ }} & _070__T )))) && _046_ != _070_ ;
  logic [7:0] _046__C0 ;
  logic [7:0] _046__R0 ;
  logic [7:0] _046__X0 ;
  assign _046__C0 = { 8{ _022_ }} ;
  assign _046__R0 = { 8{ _022_ }} & ( _071__R | ( { 8{ _022__T  }} & _071__C ));
  assign _046__X0 = { 8{ _022_ }} & _071__X ;
  logic [7:0] _070__C0 ;
  logic [7:0] _070__R0 ;
  logic [7:0] _070__X0 ;
  assign _070__C0 = { 8{ !_022_ }} ;
  assign _070__R0 = { 8{ !_022_ }} & ( _071__R | ( { 8{ _022__T  }} & _071__C ));
  assign _070__X0 = { 8{ !_022_ }} & _071__X ;
  assign rs1_val = _021_ ? _045_ : _071_;
  logic [0:0] _021__C1 ;
  logic [0:0] _021__R1 ;
  logic [0:0] _021__X1 ;
  assign _021__C1 = | rs1_val_C ;
  assign _021__X1 = | rs1_val_X ;
  assign rs1_val_T = _021_ ? ( { 8{ _021__T  }} | _045__T ) : ( { 8{ _021__T  }} | _071__T );
  assign rs1_val_S = _021_ ? _045__S : _071__S ;
  assign _021__R1 = ( | (rs1_val_R | ( rs1_val_C & ( { 8{ _021_ }} & _045__T | { 8{ !_021_ }} & _071__T )))) && _045_ != _071_ ;
  logic [7:0] _045__C0 ;
  logic [7:0] _045__R0 ;
  logic [7:0] _045__X0 ;
  assign _045__C0 = { 8{ _021_ }} ;
  assign _045__R0 = { 8{ _021_ }} & ( rs1_val_R | ( { 8{ _021__T  }} & rs1_val_C ));
  assign _045__X0 = { 8{ _021_ }} & rs1_val_X ;
  logic [7:0] _071__C0 ;
  logic [7:0] _071__R0 ;
  logic [7:0] _071__X0 ;
  assign _071__C0 = { 8{ !_021_ }} ;
  assign _071__R0 = { 8{ !_021_ }} & ( rs1_val_R | ( { 8{ _021__T  }} & rs1_val_C ));
  assign _071__X0 = { 8{ !_021_ }} & rs1_val_X ;
  assign _072_ = _026_ ? _047_ : _048_;
  logic [0:0] _026__C1 ;
  logic [0:0] _026__R1 ;
  logic [0:0] _026__X1 ;
  assign _026__C1 = | _072__C ;
  assign _026__X1 = | _072__X ;
  assign _072__T = _026_ ? ( { 8{ _026__T  }} | _047__T ) : ( { 8{ _026__T  }} | _048__T );
  assign _072__S = _026_ ? _047__S : _048__S ;
  assign _026__R1 = ( | (_072__R | ( _072__C & ( { 8{ _026_ }} & _047__T | { 8{ !_026_ }} & _048__T )))) && _047_ != _048_ ;
  logic [7:0] _047__C1 ;
  logic [7:0] _047__R1 ;
  logic [7:0] _047__X1 ;
  assign _047__C1 = { 8{ _026_ }} ;
  assign _047__R1 = { 8{ _026_ }} & ( _072__R | ( { 8{ _026__T  }} & _072__C ));
  assign _047__X1 = { 8{ _026_ }} & _072__X ;
  logic [7:0] _048__C1 ;
  logic [7:0] _048__R1 ;
  logic [7:0] _048__X1 ;
  assign _048__C1 = { 8{ !_026_ }} ;
  assign _048__R1 = { 8{ !_026_ }} & ( _072__R | ( { 8{ _026__T  }} & _072__C ));
  assign _048__X1 = { 8{ !_026_ }} & _072__X ;
  assign _073_ = _025_ ? _046_ : _072_;
  logic [0:0] _025__C1 ;
  logic [0:0] _025__R1 ;
  logic [0:0] _025__X1 ;
  assign _025__C1 = | _073__C ;
  assign _025__X1 = | _073__X ;
  assign _073__T = _025_ ? ( { 8{ _025__T  }} | _046__T ) : ( { 8{ _025__T  }} | _072__T );
  assign _073__S = _025_ ? _046__S : _072__S ;
  assign _025__R1 = ( | (_073__R | ( _073__C & ( { 8{ _025_ }} & _046__T | { 8{ !_025_ }} & _072__T )))) && _046_ != _072_ ;
  logic [7:0] _046__C1 ;
  logic [7:0] _046__R1 ;
  logic [7:0] _046__X1 ;
  assign _046__C1 = { 8{ _025_ }} ;
  assign _046__R1 = { 8{ _025_ }} & ( _073__R | ( { 8{ _025__T  }} & _073__C ));
  assign _046__X1 = { 8{ _025_ }} & _073__X ;
  logic [7:0] _072__C0 ;
  logic [7:0] _072__R0 ;
  logic [7:0] _072__X0 ;
  assign _072__C0 = { 8{ !_025_ }} ;
  assign _072__R0 = { 8{ !_025_ }} & ( _073__R | ( { 8{ _025__T  }} & _073__C ));
  assign _072__X0 = { 8{ !_025_ }} & _073__X ;
  assign rs2_val = _024_ ? _045_ : _073_;
  logic [0:0] _024__C1 ;
  logic [0:0] _024__R1 ;
  logic [0:0] _024__X1 ;
  assign _024__C1 = | rs2_val_C ;
  assign _024__X1 = | rs2_val_X ;
  assign rs2_val_T = _024_ ? ( { 8{ _024__T  }} | _045__T ) : ( { 8{ _024__T  }} | _073__T );
  assign rs2_val_S = _024_ ? _045__S : _073__S ;
  assign _024__R1 = ( | (rs2_val_R | ( rs2_val_C & ( { 8{ _024_ }} & _045__T | { 8{ !_024_ }} & _073__T )))) && _045_ != _073_ ;
  logic [7:0] _045__C1 ;
  logic [7:0] _045__R1 ;
  logic [7:0] _045__X1 ;
  assign _045__C1 = { 8{ _024_ }} ;
  assign _045__R1 = { 8{ _024_ }} & ( rs2_val_R | ( { 8{ _024__T  }} & rs2_val_C ));
  assign _045__X1 = { 8{ _024_ }} & rs2_val_X ;
  logic [7:0] _073__C0 ;
  logic [7:0] _073__R0 ;
  logic [7:0] _073__X0 ;
  assign _073__C0 = { 8{ !_024_ }} ;
  assign _073__R0 = { 8{ !_024_ }} & ( rs2_val_R | ( { 8{ _024__T  }} & rs2_val_C ));
  assign _073__X0 = { 8{ !_024_ }} & rs2_val_X ;
  assign _074_ = _028_ ? ex_wb_val : ex_alu_result;
  logic [0:0] _028__C0 ;
  logic [0:0] _028__R0 ;
  logic [0:0] _028__X0 ;
  assign _028__C0 = | _074__C ;
  assign _028__X0 = | _074__X ;
  assign _074__T = _028_ ? ( { 8{ _028__T  }} | ex_wb_val_T ) : ( { 8{ _028__T  }} | ex_alu_result_T );
  assign _074__S = _028_ ? ex_wb_val_S : ex_alu_result_S ;
  assign _028__R0 = ( | (_074__R | ( _074__C & ( { 8{ _028_ }} & ex_wb_val_T | { 8{ !_028_ }} & ex_alu_result_T )))) && ex_wb_val != ex_alu_result ;
  logic [7:0] ex_wb_val_C1 ;
  logic [7:0] ex_wb_val_R1 ;
  logic [7:0] ex_wb_val_X1 ;
  assign ex_wb_val_C1 = { 8{ _028_ }} ;
  assign ex_wb_val_R1 = { 8{ _028_ }} & ( _074__R | ( { 8{ _028__T  }} & _074__C ));
  assign ex_wb_val_X1 = { 8{ _028_ }} & _074__X ;
  logic [7:0] ex_alu_result_C1 ;
  logic [7:0] ex_alu_result_R1 ;
  logic [7:0] ex_alu_result_X1 ;
  assign ex_alu_result_C1 = { 8{ !_028_ }} ;
  assign ex_alu_result_R1 = { 8{ !_028_ }} & ( _074__R | ( { 8{ _028__T  }} & _074__C ));
  assign ex_alu_result_X1 = { 8{ !_028_ }} & _074__X ;
  assign id_rs1_val = _027_ ? rs1_val : _074_;
  logic [0:0] _027__C0 ;
  logic [0:0] _027__R0 ;
  logic [0:0] _027__X0 ;
  assign _027__C0 = | id_rs1_val_C ;
  assign _027__X0 = | id_rs1_val_X ;
  assign id_rs1_val_T = _027_ ? ( { 8{ _027__T  }} | rs1_val_T ) : ( { 8{ _027__T  }} | _074__T );
  assign id_rs1_val_S = _027_ ? rs1_val_S : _074__S ;
  assign _027__R0 = ( | (id_rs1_val_R | ( id_rs1_val_C & ( { 8{ _027_ }} & rs1_val_T | { 8{ !_027_ }} & _074__T )))) && rs1_val != _074_ ;
  logic [7:0] rs1_val_C0 ;
  logic [7:0] rs1_val_R0 ;
  logic [7:0] rs1_val_X0 ;
  assign rs1_val_C0 = { 8{ _027_ }} ;
  assign rs1_val_R0 = { 8{ _027_ }} & ( id_rs1_val_R | ( { 8{ _027__T  }} & id_rs1_val_C ));
  assign rs1_val_X0 = { 8{ _027_ }} & id_rs1_val_X ;
  logic [7:0] _074__C0 ;
  logic [7:0] _074__R0 ;
  logic [7:0] _074__X0 ;
  assign _074__C0 = { 8{ !_027_ }} ;
  assign _074__R0 = { 8{ !_027_ }} & ( id_rs1_val_R | ( { 8{ _027__T  }} & id_rs1_val_C ));
  assign _074__X0 = { 8{ !_027_ }} & id_rs1_val_X ;
  assign _075_ = _030_ ? ex_wb_val : ex_alu_result;
  logic [0:0] _030__C0 ;
  logic [0:0] _030__R0 ;
  logic [0:0] _030__X0 ;
  assign _030__C0 = | _075__C ;
  assign _030__X0 = | _075__X ;
  assign _075__T = _030_ ? ( { 8{ _030__T  }} | ex_wb_val_T ) : ( { 8{ _030__T  }} | ex_alu_result_T );
  assign _075__S = _030_ ? ex_wb_val_S : ex_alu_result_S ;
  assign _030__R0 = ( | (_075__R | ( _075__C & ( { 8{ _030_ }} & ex_wb_val_T | { 8{ !_030_ }} & ex_alu_result_T )))) && ex_wb_val != ex_alu_result ;
  logic [7:0] ex_wb_val_C2 ;
  logic [7:0] ex_wb_val_R2 ;
  logic [7:0] ex_wb_val_X2 ;
  assign ex_wb_val_C2 = { 8{ _030_ }} ;
  assign ex_wb_val_R2 = { 8{ _030_ }} & ( _075__R | ( { 8{ _030__T  }} & _075__C ));
  assign ex_wb_val_X2 = { 8{ _030_ }} & _075__X ;
  logic [7:0] ex_alu_result_C2 ;
  logic [7:0] ex_alu_result_R2 ;
  logic [7:0] ex_alu_result_X2 ;
  assign ex_alu_result_C2 = { 8{ !_030_ }} ;
  assign ex_alu_result_R2 = { 8{ !_030_ }} & ( _075__R | ( { 8{ _030__T  }} & _075__C ));
  assign ex_alu_result_X2 = { 8{ !_030_ }} & _075__X ;
  assign id_rs2_val = _029_ ? rs2_val : _075_;
  logic [0:0] _029__C0 ;
  logic [0:0] _029__R0 ;
  logic [0:0] _029__X0 ;
  assign _029__C0 = | id_rs2_val_C ;
  assign _029__X0 = | id_rs2_val_X ;
  assign id_rs2_val_T = _029_ ? ( { 8{ _029__T  }} | rs2_val_T ) : ( { 8{ _029__T  }} | _075__T );
  assign id_rs2_val_S = _029_ ? rs2_val_S : _075__S ;
  assign _029__R0 = ( | (id_rs2_val_R | ( id_rs2_val_C & ( { 8{ _029_ }} & rs2_val_T | { 8{ !_029_ }} & _075__T )))) && rs2_val != _075_ ;
  logic [7:0] rs2_val_C0 ;
  logic [7:0] rs2_val_R0 ;
  logic [7:0] rs2_val_X0 ;
  assign rs2_val_C0 = { 8{ _029_ }} ;
  assign rs2_val_R0 = { 8{ _029_ }} & ( id_rs2_val_R | ( { 8{ _029__T  }} & id_rs2_val_C ));
  assign rs2_val_X0 = { 8{ _029_ }} & id_rs2_val_X ;
  logic [7:0] _075__C0 ;
  logic [7:0] _075__R0 ;
  logic [7:0] _075__X0 ;
  assign _075__C0 = { 8{ !_029_ }} ;
  assign _075__R0 = { 8{ !_029_ }} & ( id_rs2_val_R | ( { 8{ _029__T  }} & id_rs2_val_C ));
  assign _075__X0 = { 8{ !_029_ }} & id_rs2_val_X ;
  assign _076_ = _032_ ? _065_ : _017_;
  logic [0:0] _032__C0 ;
  logic [0:0] _032__R0 ;
  logic [0:0] _032__X0 ;
  assign _032__C0 = | _076__C ;
  assign _032__X0 = | _076__X ;
  assign _076__T = _032_ ? ( { 8{ _032__T  }} | _065__T ) : ( { 8{ _032__T  }} | _017__T );
  assign _076__S = _032_ ? _065__S : _017__S ;
  assign _032__R0 = ( | (_076__R | ( _076__C & ( { 8{ _032_ }} & _065__T | { 8{ !_032_ }} & _017__T )))) && _065_ != _017_ ;
  logic [7:0] _065__C0 ;
  logic [7:0] _065__R0 ;
  logic [7:0] _065__X0 ;
  assign _065__C0 = { 8{ _032_ }} ;
  assign _065__R0 = { 8{ _032_ }} & ( _076__R | ( { 8{ _032__T  }} & _076__C ));
  assign _065__X0 = { 8{ _032_ }} & _076__X ;
  logic [7:0] _017__C0 ;
  logic [7:0] _017__R0 ;
  logic [7:0] _017__X0 ;
  assign _017__C0 = { 8{ !_032_ }} ;
  assign _017__R0 = { 8{ !_032_ }} & ( _076__R | ( { 8{ _032__T  }} & _076__C ));
  assign _017__X0 = { 8{ !_032_ }} & _076__X ;
  assign ex_alu_result = _031_ ? _016_ : _076_;
  logic [0:0] _031__C0 ;
  logic [0:0] _031__R0 ;
  logic [0:0] _031__X0 ;
  assign _031__C0 = | ex_alu_result_C ;
  assign _031__X0 = | ex_alu_result_X ;
  assign ex_alu_result_T = _031_ ? ( { 8{ _031__T  }} | _016__T ) : ( { 8{ _031__T  }} | _076__T );
  assign ex_alu_result_S = _031_ ? _016__S : _076__S ;
  assign _031__R0 = ( | (ex_alu_result_R | ( ex_alu_result_C & ( { 8{ _031_ }} & _016__T | { 8{ !_031_ }} & _076__T )))) && _016_ != _076_ ;
  logic [7:0] _016__C0 ;
  logic [7:0] _016__R0 ;
  logic [7:0] _016__X0 ;
  assign _016__C0 = { 8{ _031_ }} ;
  assign _016__R0 = { 8{ _031_ }} & ( ex_alu_result_R | ( { 8{ _031__T  }} & ex_alu_result_C ));
  assign _016__X0 = { 8{ _031_ }} & ex_alu_result_X ;
  logic [7:0] _076__C0 ;
  logic [7:0] _076__R0 ;
  logic [7:0] _076__X0 ;
  assign _076__C0 = { 8{ !_031_ }} ;
  assign _076__R0 = { 8{ !_031_ }} & ( ex_alu_result_R | ( { 8{ _031__T  }} & ex_alu_result_C ));
  assign _076__X0 = { 8{ !_031_ }} & ex_alu_result_X ;
  assign _077_ = _038_ ? _047_ : _048_;
  logic [0:0] _038__C0 ;
  logic [0:0] _038__R0 ;
  logic [0:0] _038__X0 ;
  assign _038__C0 = | _077__C ;
  assign _038__X0 = | _077__X ;
  assign _077__T = _038_ ? ( { 8{ _038__T  }} | _047__T ) : ( { 8{ _038__T  }} | _048__T );
  assign _077__S = _038_ ? _047__S : _048__S ;
  assign _038__R0 = ( | (_077__R | ( _077__C & ( { 8{ _038_ }} & _047__T | { 8{ !_038_ }} & _048__T )))) && _047_ != _048_ ;
  logic [7:0] _047__C2 ;
  logic [7:0] _047__R2 ;
  logic [7:0] _047__X2 ;
  assign _047__C2 = { 8{ _038_ }} ;
  assign _047__R2 = { 8{ _038_ }} & ( _077__R | ( { 8{ _038__T  }} & _077__C ));
  assign _047__X2 = { 8{ _038_ }} & _077__X ;
  logic [7:0] _048__C2 ;
  logic [7:0] _048__R2 ;
  logic [7:0] _048__X2 ;
  assign _048__C2 = { 8{ !_038_ }} ;
  assign _048__R2 = { 8{ !_038_ }} & ( _077__R | ( { 8{ _038__T  }} & _077__C ));
  assign _048__X2 = { 8{ !_038_ }} & _077__X ;
  assign _078_ = _037_ ? _046_ : _077_;
  logic [0:0] _037__C0 ;
  logic [0:0] _037__R0 ;
  logic [0:0] _037__X0 ;
  assign _037__C0 = | _078__C ;
  assign _037__X0 = | _078__X ;
  assign _078__T = _037_ ? ( { 8{ _037__T  }} | _046__T ) : ( { 8{ _037__T  }} | _077__T );
  assign _078__S = _037_ ? _046__S : _077__S ;
  assign _037__R0 = ( | (_078__R | ( _078__C & ( { 8{ _037_ }} & _046__T | { 8{ !_037_ }} & _077__T )))) && _046_ != _077_ ;
  logic [7:0] _046__C2 ;
  logic [7:0] _046__R2 ;
  logic [7:0] _046__X2 ;
  assign _046__C2 = { 8{ _037_ }} ;
  assign _046__R2 = { 8{ _037_ }} & ( _078__R | ( { 8{ _037__T  }} & _078__C ));
  assign _046__X2 = { 8{ _037_ }} & _078__X ;
  logic [7:0] _077__C0 ;
  logic [7:0] _077__R0 ;
  logic [7:0] _077__X0 ;
  assign _077__C0 = { 8{ !_037_ }} ;
  assign _077__R0 = { 8{ !_037_ }} & ( _078__R | ( { 8{ _037__T  }} & _078__C ));
  assign _077__X0 = { 8{ !_037_ }} & _078__X ;
  assign dummy_rf_data = _036_ ? _045_ : _078_;
  logic [0:0] _036__C0 ;
  logic [0:0] _036__R0 ;
  logic [0:0] _036__X0 ;
  assign _036__C0 = | dummy_rf_data_C ;
  assign _036__X0 = | dummy_rf_data_X ;
  assign dummy_rf_data_T = _036_ ? ( { 8{ _036__T  }} | _045__T ) : ( { 8{ _036__T  }} | _078__T );
  assign dummy_rf_data_S = _036_ ? _045__S : _078__S ;
  assign _036__R0 = ( | (dummy_rf_data_R | ( dummy_rf_data_C & ( { 8{ _036_ }} & _045__T | { 8{ !_036_ }} & _078__T )))) && _045_ != _078_ ;
  logic [7:0] _045__C2 ;
  logic [7:0] _045__R2 ;
  logic [7:0] _045__X2 ;
  assign _045__C2 = { 8{ _036_ }} ;
  assign _045__R2 = { 8{ _036_ }} & ( dummy_rf_data_R | ( { 8{ _036__T  }} & dummy_rf_data_C ));
  assign _045__X2 = { 8{ _036_ }} & dummy_rf_data_X ;
  logic [7:0] _078__C0 ;
  logic [7:0] _078__R0 ;
  logic [7:0] _078__X0 ;
  assign _078__C0 = { 8{ !_036_ }} ;
  assign _078__R0 = { 8{ !_036_ }} & ( dummy_rf_data_R | ( { 8{ _036__T  }} & dummy_rf_data_C ));
  assign _078__X0 = { 8{ !_036_ }} & dummy_rf_data_X ;
  reg [7:0] registers [3:0];
  logic [7:0] registers_T [3:0] ;
  logic [7:0] registers_PREV_VAL1 [3:0] ;
  logic [7:0] registers_PREV_VAL2 [3:0] ;
  logic [3:0] registers_t_flag ;
  logic [3:0] registers_r_flag ;
  logic [7:0] registers_C [3:0] ;
  logic [7:0] registers_R [3:0] ;
  logic [7:0] registers_X [3:0] ;
  logic registers_r_flag_top ;
  logic [4:0] registers_S ;
  assign registers_S = 15 ;
  always @(posedge clk) begin
    if (rst) registers[2'b00] <= 8'b00000000;
    if (rst) registers_t_flag  [2'b00] <= 0 ;
    if (rst) registers_r_flag  [2'b00] <= 0 ;
    if (rst) registers[2'b01] <= 8'b00000000;
    if (rst) registers_t_flag  [2'b01] <= 0 ;
    if (rst) registers_r_flag  [2'b01] <= 0 ;
    if (rst) registers[2'b10] <= 8'b00000000;
    if (rst) registers_t_flag  [2'b10] <= 0 ;
    if (rst) registers_r_flag  [2'b10] <= 0 ;
    if (rst) registers[2'b11] <= 8'b00000000;
    if (rst) registers_t_flag  [2'b11] <= 0 ;
    if (rst) registers_r_flag  [2'b11] <= 0 ;
    if (_000_[7]) registers[2'b00] <= ex_wb_val;
    if (rst) registers_T  [2'b00] <= 0 ;
    if (_000_[7]) registers_T  [2'b00] <= ( ex_wb_val_T  | { 8{ _000__T  [7] }} ) & ( { 8{ registers_S != ex_wb_val_S }} );
    if (_000_[7]) registers_t_flag  [2'b00] <= registers_t_flag  [2'b00] ? 1 : (ex_wb_val_T  | { 8{ _000__T  [7] }} ) & ( { 8{ registers_S != ex_wb_val_S }} );
    if (_000_[7]) registers_r_flag  [2'b00] <= registers_r_flag  [2'b00] ? 1 : registers_t_flag  [2'b00] ? 0 : |registers_R  [2'b00] ;
    if (_001_[7]) registers[2'b01] <= ex_wb_val;
    if (rst) registers_T  [2'b01] <= 0 ;
    if (_001_[7]) registers_T  [2'b01] <= ( ex_wb_val_T  | { 8{ _001__T  [7] }} ) & ( { 8{ registers_S != ex_wb_val_S }} );
    if (_001_[7]) registers_t_flag  [2'b01] <= registers_t_flag  [2'b01] ? 1 : (ex_wb_val_T  | { 8{ _001__T  [7] }} ) & ( { 8{ registers_S != ex_wb_val_S }} );
    if (_001_[7]) registers_r_flag  [2'b01] <= registers_r_flag  [2'b01] ? 1 : registers_t_flag  [2'b01] ? 0 : |registers_R  [2'b01] ;
    if (_002_[7]) registers[2'b10] <= ex_wb_val;
    if (rst) registers_T  [2'b10] <= 0 ;
    if (_002_[7]) registers_T  [2'b10] <= ( ex_wb_val_T  | { 8{ _002__T  [7] }} ) & ( { 8{ registers_S != ex_wb_val_S }} );
    if (_002_[7]) registers_t_flag  [2'b10] <= registers_t_flag  [2'b10] ? 1 : (ex_wb_val_T  | { 8{ _002__T  [7] }} ) & ( { 8{ registers_S != ex_wb_val_S }} );
    if (_002_[7]) registers_r_flag  [2'b10] <= registers_r_flag  [2'b10] ? 1 : registers_t_flag  [2'b10] ? 0 : |registers_R  [2'b10] ;
    if (_003_[7]) registers[2'b11] <= ex_wb_val;
    if (rst) registers_T  [2'b11] <= 0 ;
    if (_003_[7]) registers_T  [2'b11] <= ( ex_wb_val_T  | { 8{ _003__T  [7] }} ) & ( { 8{ registers_S != ex_wb_val_S }} );
    if (_003_[7]) registers_t_flag  [2'b11] <= registers_t_flag  [2'b11] ? 1 : (ex_wb_val_T  | { 8{ _003__T  [7] }} ) & ( { 8{ registers_S != ex_wb_val_S }} );
    if (_003_[7]) registers_r_flag  [2'b11] <= registers_r_flag  [2'b11] ? 1 : registers_t_flag  [2'b11] ? 0 : |registers_R  [2'b11] ;
    if (rst) registers_r_flag_top <= 0;
  end
  logic [7:0] ex_wb_val_X3 ;
  logic [7:0] ex_wb_val_R3 ;
  logic [7:0] ex_wb_val_C3 ;
  assign ex_wb_val_X3 = { 8{ registers[2'b00] != ex_wb_val }} ;
  assign ex_wb_val_R3 = 0 ;
  assign ex_wb_val_C3 = { 8{ 1'b1 }} ;
  logic [7:0] ex_wb_val_X4 ;
  logic [7:0] ex_wb_val_R4 ;
  logic [7:0] ex_wb_val_C4 ;
  assign ex_wb_val_X4 = { 8{ registers[2'b01] != ex_wb_val }} ;
  assign ex_wb_val_R4 = 0 ;
  assign ex_wb_val_C4 = { 8{ 1'b1 }} ;
  logic [7:0] ex_wb_val_X5 ;
  logic [7:0] ex_wb_val_R5 ;
  logic [7:0] ex_wb_val_C5 ;
  assign ex_wb_val_X5 = { 8{ registers[2'b10] != ex_wb_val }} ;
  assign ex_wb_val_R5 = 0 ;
  assign ex_wb_val_C5 = { 8{ 1'b1 }} ;
  logic [7:0] ex_wb_val_X6 ;
  logic [7:0] ex_wb_val_R6 ;
  logic [7:0] ex_wb_val_C6 ;
  assign ex_wb_val_X6 = { 8{ registers[2'b11] != ex_wb_val }} ;
  assign ex_wb_val_R6 = 0 ;
  assign ex_wb_val_C6 = { 8{ 1'b1 }} ;
  always @(negedge 1'bx) begin
  end
  assign _045_ = registers[2'b00];
  logic [7:0] registers_R0[3:0] ;
  logic [7:0] registers_C0[3:0] ;
  logic [7:0] registers_X0[3:0] ;
  integer i;
  always @(*) begin
    for(i = 0; i <= 3; i = i + 1) begin
      registers_R0 [i] = 0;
      registers_C0 [i] = 0;
      registers_X0 [i] = 0;
    end
  end
  assign _045__T = registers_T [2'b00] ;
  assign _045__S = registers_S ;
  always @(*) begin
    registers_C0 [2'b00] = _045__C ;
    registers_R0 [2'b00] = _045__R ;
    registers_X0 [2'b00] = _045__X ;
  end
  assign _046_ = registers[2'b01];
  logic [7:0] registers_R1[3:0] ;
  logic [7:0] registers_C1[3:0] ;
  logic [7:0] registers_X1[3:0] ;
  integer i;
  always @(*) begin
    for(i = 0; i <= 3; i = i + 1) begin
      registers_R1 [i] = 0;
      registers_C1 [i] = 0;
      registers_X1 [i] = 0;
    end
  end
  assign _046__T = registers_T [2'b01] ;
  assign _046__S = registers_S ;
  always @(*) begin
    registers_C1 [2'b01] = _046__C ;
    registers_R1 [2'b01] = _046__R ;
    registers_X1 [2'b01] = _046__X ;
  end
  assign _047_ = registers[2'b10];
  logic [7:0] registers_R1[3:0] ;
  logic [7:0] registers_C1[3:0] ;
  logic [7:0] registers_X1[3:0] ;
  integer i;
  always @(*) begin
    for(i = 0; i <= 3; i = i + 1) begin
      registers_R1 [i] = 0;
      registers_C1 [i] = 0;
      registers_X1 [i] = 0;
    end
  end
  assign _047__T = registers_T [2'b10] ;
  assign _047__S = registers_S ;
  always @(*) begin
    registers_C1 [2'b10] = _047__C ;
    registers_R1 [2'b10] = _047__R ;
    registers_X1 [2'b10] = _047__X ;
  end
  assign _048_ = registers[2'b11];
  logic [7:0] registers_R1[3:0] ;
  logic [7:0] registers_C1[3:0] ;
  logic [7:0] registers_X1[3:0] ;
  integer i;
  always @(*) begin
    for(i = 0; i <= 3; i = i + 1) begin
      registers_R1 [i] = 0;
      registers_C1 [i] = 0;
      registers_X1 [i] = 0;
    end
  end
  assign _048__T = registers_T [2'b11] ;
  assign _048__S = registers_S ;
  always @(*) begin
    registers_C1 [2'b11] = _048__C ;
    registers_R1 [2'b11] = _048__R ;
    registers_X1 [2'b11] = _048__X ;
  end
  assign op = inst[7:6];
  assign { inst_R9 [2], inst_R9 [3], inst_R9 [4], inst_R9 [5] } = 0;
  assign { inst_X9 [2], inst_X9 [3], inst_X9 [4], inst_X9 [5] } = 0;
  assign { inst_C9 [2], inst_C9 [3], inst_C9 [4], inst_C9 [5] } = 0;
  logic [7:0] inst_C10 ;
  logic [7:0] inst_R10 ;
  logic [7:0] inst_X10 ;
  assign op_T = inst_T [7:6] ;
  assign inst_C10 [7:6] = op_C ;
  assign inst_R10 [7:6] = op_R ;
  assign inst_X10 [7:6] = op_X ;
  assign op_S = inst_S ;
  assign rd = inst[1:0];
  assign rd_T = inst_T [1:0] ;
  assign inst_C10 [1:0] = rd_C ;
  assign inst_R10 [1:0] = rd_R ;
  assign inst_X10 [1:0] = rd_X ;
  assign rd_S = inst_S ;
  assign reg_0_w_stage_nxt = reg_0_w_stage[1];
  logic [1:0] reg_0_w_stage_C4 ;
  logic [1:0] reg_0_w_stage_R4 ;
  logic [1:0] reg_0_w_stage_X4 ;
  assign reg_0_w_stage_nxt_T = reg_0_w_stage_T [1] ;
  assign reg_0_w_stage_C4 [1] = reg_0_w_stage_nxt_C ;
  assign reg_0_w_stage_R4 [1] = reg_0_w_stage_nxt_R ;
  assign reg_0_w_stage_X4 [1] = reg_0_w_stage_nxt_X ;
  assign reg_0_w_stage_nxt_S = reg_0_w_stage_S ;
  assign reg_1_w_stage_nxt = reg_1_w_stage[1];
  logic [1:0] reg_1_w_stage_C4 ;
  logic [1:0] reg_1_w_stage_R4 ;
  logic [1:0] reg_1_w_stage_X4 ;
  assign reg_1_w_stage_nxt_T = reg_1_w_stage_T [1] ;
  assign reg_1_w_stage_C4 [1] = reg_1_w_stage_nxt_C ;
  assign reg_1_w_stage_R4 [1] = reg_1_w_stage_nxt_R ;
  assign reg_1_w_stage_X4 [1] = reg_1_w_stage_nxt_X ;
  assign reg_1_w_stage_nxt_S = reg_1_w_stage_S ;
  assign reg_2_w_stage_nxt = reg_2_w_stage[1];
  logic [1:0] reg_2_w_stage_C4 ;
  logic [1:0] reg_2_w_stage_R4 ;
  logic [1:0] reg_2_w_stage_X4 ;
  assign reg_2_w_stage_nxt_T = reg_2_w_stage_T [1] ;
  assign reg_2_w_stage_C4 [1] = reg_2_w_stage_nxt_C ;
  assign reg_2_w_stage_R4 [1] = reg_2_w_stage_nxt_R ;
  assign reg_2_w_stage_X4 [1] = reg_2_w_stage_nxt_X ;
  assign reg_2_w_stage_nxt_S = reg_2_w_stage_S ;
  assign reg_3_w_stage_nxt = reg_3_w_stage[1];
  logic [1:0] reg_3_w_stage_C4 ;
  logic [1:0] reg_3_w_stage_R4 ;
  logic [1:0] reg_3_w_stage_X4 ;
  assign reg_3_w_stage_nxt_T = reg_3_w_stage_T [1] ;
  assign reg_3_w_stage_C4 [1] = reg_3_w_stage_nxt_C ;
  assign reg_3_w_stage_R4 [1] = reg_3_w_stage_nxt_R ;
  assign reg_3_w_stage_X4 [1] = reg_3_w_stage_nxt_X ;
  assign reg_3_w_stage_nxt_S = reg_3_w_stage_S ;
  assign rs1 = inst[5:4];
  assign rs1_T = inst_T [5:4] ;
  assign inst_C10 [5:4] = rs1_C ;
  assign inst_R10 [5:4] = rs1_R ;
  assign inst_X10 [5:4] = rs1_X ;
  assign rs1_S = inst_S ;
  assign rs2 = inst[3:2];
  assign rs2_T = inst_T [3:2] ;
  assign inst_C10 [3:2] = rs2_C ;
  assign inst_R10 [3:2] = rs2_R ;
  assign inst_X10 [3:2] = rs2_X ;
  assign rs2_S = inst_S ;
  assign registers_C = ( registers_C0 );
  assign _078__C = ( _078__C0 );
  assign _077__C = ( _077__C0 );
  assign _037__C = ( _037__C0 );
  assign _076__C = ( _076__C0 );
  assign id_ex_rd_C = ( id_ex_rd_C0 ) | ( id_ex_rd_C1 );
  assign _041__C = ( _041__C0 );
  assign id_ex_reg_wen_C = ( id_ex_reg_wen_C0 );
  assign _060__C = ( _060__C0 );
  assign rs1_val_C = ( rs1_val_C0 );
  assign _059__C = ( _059__C0 );
  assign _055__C = ( _055__C0 );
  assign dummy_read_rf_C = ( dummy_read_rf_C0 ) | ( dummy_read_rf_C1 ) | ( dummy_read_rf_C2 );
  assign _030__C = ( _030__C0 );
  assign _062__C = ( _062__C0 );
  assign _053__C = ( _053__C0 );
  assign reg_3_w_stage_C = ( reg_3_w_stage_C0 ) | ( reg_3_w_stage_C1 ) | ( reg_3_w_stage_C2 ) | ( reg_3_w_stage_C3 ) | ( reg_3_w_stage_C4 );
  assign ex_wb_reg_wen_C = ( ex_wb_reg_wen_C0 ) | ( ex_wb_reg_wen_C1 ) | ( ex_wb_reg_wen_C2 ) | ( ex_wb_reg_wen_C3 );
  assign id_ex_op_C = ( id_ex_op_C0 ) | ( id_ex_op_C1 ) | ( id_ex_op_C2 );
  assign _012__C = ( _012__C0 );
  assign _015__C = ( _015__C0 );
  assign rst_C = ( rst_C0 ) | ( rst_C1 ) | ( rst_C2 ) | ( rst_C3 ) | ( rst_C4 ) | ( rst_C5 ) | ( rst_C6 ) | ( rst_C7 ) | ( rst_C8 ) | ( rst_C9 ) | ( rst_C10 ) | ( rst_C11 ) | ( rst_C12 ) | ( rst_C13 ) | ( rst_C14 ) | ( rst_C15 );
  assign _009__C = ( _009__C0 );
  assign _056__C = ( _056__C0 );
  assign ex_wb_rd_C = ( ex_wb_rd_C0 ) | ( ex_wb_rd_C1 ) | ( ex_wb_rd_C2 ) | ( ex_wb_rd_C3 ) | ( ex_wb_rd_C4 );
  assign _008__C = ( _008__C0 );
  assign _063__C = ( _063__C0 );
  assign rs2_stage_info_C = ( rs2_stage_info_C0 ) | ( rs2_stage_info_C1 );
  assign _040__C = ( _040__C0 );
  assign _005__C = ( _005__C0 );
  assign _043__C = ( _043__C0 );
  assign _021__C = ( _021__C0 ) | ( _021__C1 );
  assign id_rs1_val_C = ( id_rs1_val_C0 );
  assign id_wen_C = ( id_wen_C0 ) | ( id_wen_C1 ) | ( id_wen_C2 ) | ( id_wen_C3 ) | ( id_wen_C4 );
  assign reg_1_w_stage_C = ( reg_1_w_stage_C0 ) | ( reg_1_w_stage_C1 ) | ( reg_1_w_stage_C2 ) | ( reg_1_w_stage_C3 ) | ( reg_1_w_stage_C4 );
  assign _006__C = ( _006__C0 );
  assign _038__C = ( _038__C0 );
  assign id_rs2_val_C = ( id_rs2_val_C0 );
  assign _066__C = ( _066__C0 );
  assign ex_wb_val_C = ( ex_wb_val_C0 ) | ( ex_wb_val_C1 ) | ( ex_wb_val_C2 ) | ( ex_wb_val_C3 ) | ( ex_wb_val_C4 ) | ( ex_wb_val_C5 ) | ( ex_wb_val_C6 );
  assign _035__C = ( _035__C0 );
  assign dummy_rf_data_C = ( dummy_rf_data_C0 );
  assign _054__C = ( _054__C0 );
  assign _014__C = ( _014__C0 );
  assign _010__C = ( _010__C0 );
  assign _058__C = ( _058__C0 );
  assign _072__C = ( _072__C0 );
  assign id_ex_rs2_val_C = ( id_ex_rs2_val_C0 ) | ( id_ex_rs2_val_C1 ) | ( id_ex_rs2_val_C2 ) | ( id_ex_rs2_val_C3 );
  assign ex_alu_result_C = ( ex_alu_result_C0 ) | ( ex_alu_result_C1 ) | ( ex_alu_result_C2 );
  assign _024__C = ( _024__C0 ) | ( _024__C1 );
  assign _020__C = ( _020__C0 );
  assign reg_0_w_stage_C = ( reg_0_w_stage_C0 ) | ( reg_0_w_stage_C1 ) | ( reg_0_w_stage_C2 ) | ( reg_0_w_stage_C3 ) | ( reg_0_w_stage_C4 );
  assign _027__C = ( _027__C0 );
  assign rs1_stage_info_C = ( rs1_stage_info_C0 ) | ( rs1_stage_info_C1 );
  assign inst_C = ( inst_C0 ) | ( inst_C1 ) | ( inst_C2 ) | ( inst_C3 ) | ( inst_C4 ) | ( inst_C5 ) | ( inst_C6 ) | ( inst_C7 ) | ( inst_C8 ) | ( inst_C9 ) | ( inst_C10 );
  assign _004__C = ( _004__C0 );
  assign _070__C = ( _070__C0 );
  assign _018__C = ( _018__C0 );
  assign _019__C = ( _019__C0 );
  assign _039__C = ( _039__C0 );
  assign reg_2_w_stage_C = ( reg_2_w_stage_C0 ) | ( reg_2_w_stage_C1 ) | ( reg_2_w_stage_C2 ) | ( reg_2_w_stage_C3 ) | ( reg_2_w_stage_C4 );
  assign _036__C = ( _036__C0 );
  assign _074__C = ( _074__C0 );
  assign _029__C = ( _029__C0 );
  assign _057__C = ( _057__C0 );
  assign _034__C = ( _034__C0 );
  assign id_ex_rs1_val_C = ( id_ex_rs1_val_C0 ) | ( id_ex_rs1_val_C1 ) | ( id_ex_rs1_val_C2 ) | ( id_ex_rs1_val_C3 );
  assign _031__C = ( _031__C0 );
  assign _044__C = ( _044__C0 );
  assign _042__C = ( _042__C0 );
  assign _051__C = ( _051__C0 );
  assign _011__C = ( _011__C0 );
  assign _046__C = ( _046__C0 ) | ( _046__C1 ) | ( _046__C2 );
  assign fangyuan0_C = ( fangyuan0_C0 );
  assign _067__C = ( _067__C0 );
  assign _025__C = ( _025__C0 ) | ( _025__C1 );
  assign _061__C = ( _061__C0 );
  assign _016__C = ( _016__C0 );
  assign _050__C = ( _050__C0 );
  assign fangyuan1_C = ( fangyuan1_C0 );
  assign _049__C = ( _049__C0 );
  assign _047__C = ( _047__C0 ) | ( _047__C1 ) | ( _047__C2 );
  assign _052__C = ( _052__C0 );
  assign _071__C = ( _071__C0 );
  assign fangyuan3_C = ( fangyuan3_C0 );
  assign _064__C = ( _064__C0 );
  assign _013__C = ( _013__C0 );
  assign _068__C = ( _068__C0 );
  assign _023__C = ( _023__C0 ) | ( _023__C1 );
  assign _017__C = ( _017__C0 );
  assign _026__C = ( _026__C0 ) | ( _026__C1 );
  assign _045__C = ( _045__C0 ) | ( _045__C1 ) | ( _045__C2 );
  assign _069__C = ( _069__C0 );
  assign _048__C = ( _048__C0 ) | ( _048__C1 ) | ( _048__C2 );
  assign _073__C = ( _073__C0 );
  assign _028__C = ( _028__C0 );
  assign fangyuan2_C = ( fangyuan2_C0 );
  assign rs2_val_C = ( rs2_val_C0 );
  assign _007__C = ( _007__C0 );
  assign _075__C = ( _075__C0 );
  assign _033__C = ( _033__C0 );
  assign _032__C = ( _032__C0 );
  assign _022__C = ( _022__C0 ) | ( _022__C1 );
  assign _065__C = ( _065__C0 );
  assign registers_X = ( registers_X0 );
  assign _078__X = ( _078__X0 );
  assign _077__X = ( _077__X0 );
  assign _037__X = ( _037__X0 );
  assign _076__X = ( _076__X0 );
  assign id_ex_rd_X = ( id_ex_rd_X0 ) | ( id_ex_rd_X1 );
  assign _041__X = ( _041__X0 );
  assign id_ex_reg_wen_X = ( id_ex_reg_wen_X0 );
  assign _060__X = ( _060__X0 );
  assign rs1_val_X = ( rs1_val_X0 );
  assign _059__X = ( _059__X0 );
  assign _055__X = ( _055__X0 );
  assign dummy_read_rf_X = ( dummy_read_rf_X0 ) | ( dummy_read_rf_X1 ) | ( dummy_read_rf_X2 );
  assign _030__X = ( _030__X0 );
  assign _062__X = ( _062__X0 );
  assign _053__X = ( _053__X0 );
  assign reg_3_w_stage_X = ( reg_3_w_stage_X0 ) | ( reg_3_w_stage_X1 ) | ( reg_3_w_stage_X2 ) | ( reg_3_w_stage_X3 ) | ( reg_3_w_stage_X4 );
  assign ex_wb_reg_wen_X = ( ex_wb_reg_wen_X0 ) | ( ex_wb_reg_wen_X1 ) | ( ex_wb_reg_wen_X2 ) | ( ex_wb_reg_wen_X3 );
  assign id_ex_op_X = ( id_ex_op_X0 ) | ( id_ex_op_X1 ) | ( id_ex_op_X2 );
  assign _012__X = ( _012__X0 );
  assign _015__X = ( _015__X0 );
  assign rst_X = ( rst_X0 ) | ( rst_X1 ) | ( rst_X2 ) | ( rst_X3 ) | ( rst_X4 ) | ( rst_X5 ) | ( rst_X6 ) | ( rst_X7 ) | ( rst_X8 ) | ( rst_X9 ) | ( rst_X10 ) | ( rst_X11 ) | ( rst_X12 ) | ( rst_X13 ) | ( rst_X14 ) | ( rst_X15 );
  assign _009__X = ( _009__X0 );
  assign _056__X = ( _056__X0 );
  assign ex_wb_rd_X = ( ex_wb_rd_X0 ) | ( ex_wb_rd_X1 ) | ( ex_wb_rd_X2 ) | ( ex_wb_rd_X3 ) | ( ex_wb_rd_X4 );
  assign _008__X = ( _008__X0 );
  assign _063__X = ( _063__X0 );
  assign rs2_stage_info_X = ( rs2_stage_info_X0 ) | ( rs2_stage_info_X1 );
  assign _040__X = ( _040__X0 );
  assign _005__X = ( _005__X0 );
  assign _043__X = ( _043__X0 );
  assign _021__X = ( _021__X0 ) | ( _021__X1 );
  assign id_rs1_val_X = ( id_rs1_val_X0 );
  assign id_wen_X = ( id_wen_X0 ) | ( id_wen_X1 ) | ( id_wen_X2 ) | ( id_wen_X3 ) | ( id_wen_X4 );
  assign reg_1_w_stage_X = ( reg_1_w_stage_X0 ) | ( reg_1_w_stage_X1 ) | ( reg_1_w_stage_X2 ) | ( reg_1_w_stage_X3 ) | ( reg_1_w_stage_X4 );
  assign _006__X = ( _006__X0 );
  assign _038__X = ( _038__X0 );
  assign id_rs2_val_X = ( id_rs2_val_X0 );
  assign _066__X = ( _066__X0 );
  assign ex_wb_val_X = ( ex_wb_val_X0 ) | ( ex_wb_val_X1 ) | ( ex_wb_val_X2 ) | ( ex_wb_val_X3 ) | ( ex_wb_val_X4 ) | ( ex_wb_val_X5 ) | ( ex_wb_val_X6 );
  assign _035__X = ( _035__X0 );
  assign dummy_rf_data_X = ( dummy_rf_data_X0 );
  assign _054__X = ( _054__X0 );
  assign _014__X = ( _014__X0 );
  assign _010__X = ( _010__X0 );
  assign _058__X = ( _058__X0 );
  assign _072__X = ( _072__X0 );
  assign id_ex_rs2_val_X = ( id_ex_rs2_val_X0 ) | ( id_ex_rs2_val_X1 ) | ( id_ex_rs2_val_X2 ) | ( id_ex_rs2_val_X3 );
  assign ex_alu_result_X = ( ex_alu_result_X0 ) | ( ex_alu_result_X1 ) | ( ex_alu_result_X2 );
  assign _024__X = ( _024__X0 ) | ( _024__X1 );
  assign _020__X = ( _020__X0 );
  assign reg_0_w_stage_X = ( reg_0_w_stage_X0 ) | ( reg_0_w_stage_X1 ) | ( reg_0_w_stage_X2 ) | ( reg_0_w_stage_X3 ) | ( reg_0_w_stage_X4 );
  assign _027__X = ( _027__X0 );
  assign rs1_stage_info_X = ( rs1_stage_info_X0 ) | ( rs1_stage_info_X1 );
  assign inst_X = ( inst_X0 ) | ( inst_X1 ) | ( inst_X2 ) | ( inst_X3 ) | ( inst_X4 ) | ( inst_X5 ) | ( inst_X6 ) | ( inst_X7 ) | ( inst_X8 ) | ( inst_X9 ) | ( inst_X10 );
  assign _004__X = ( _004__X0 );
  assign _070__X = ( _070__X0 );
  assign _018__X = ( _018__X0 );
  assign _019__X = ( _019__X0 );
  assign _039__X = ( _039__X0 );
  assign reg_2_w_stage_X = ( reg_2_w_stage_X0 ) | ( reg_2_w_stage_X1 ) | ( reg_2_w_stage_X2 ) | ( reg_2_w_stage_X3 ) | ( reg_2_w_stage_X4 );
  assign _036__X = ( _036__X0 );
  assign _074__X = ( _074__X0 );
  assign _029__X = ( _029__X0 );
  assign _057__X = ( _057__X0 );
  assign _034__X = ( _034__X0 );
  assign id_ex_rs1_val_X = ( id_ex_rs1_val_X0 ) | ( id_ex_rs1_val_X1 ) | ( id_ex_rs1_val_X2 ) | ( id_ex_rs1_val_X3 );
  assign _031__X = ( _031__X0 );
  assign _044__X = ( _044__X0 );
  assign _042__X = ( _042__X0 );
  assign _051__X = ( _051__X0 );
  assign _011__X = ( _011__X0 );
  assign _046__X = ( _046__X0 ) | ( _046__X1 ) | ( _046__X2 );
  assign fangyuan0_X = ( fangyuan0_X0 );
  assign _067__X = ( _067__X0 );
  assign _025__X = ( _025__X0 ) | ( _025__X1 );
  assign _061__X = ( _061__X0 );
  assign _016__X = ( _016__X0 );
  assign _050__X = ( _050__X0 );
  assign fangyuan1_X = ( fangyuan1_X0 );
  assign _049__X = ( _049__X0 );
  assign _047__X = ( _047__X0 ) | ( _047__X1 ) | ( _047__X2 );
  assign _052__X = ( _052__X0 );
  assign _071__X = ( _071__X0 );
  assign fangyuan3_X = ( fangyuan3_X0 );
  assign _064__X = ( _064__X0 );
  assign _013__X = ( _013__X0 );
  assign _068__X = ( _068__X0 );
  assign _023__X = ( _023__X0 ) | ( _023__X1 );
  assign _017__X = ( _017__X0 );
  assign _026__X = ( _026__X0 ) | ( _026__X1 );
  assign _045__X = ( _045__X0 ) | ( _045__X1 ) | ( _045__X2 );
  assign _069__X = ( _069__X0 );
  assign _048__X = ( _048__X0 ) | ( _048__X1 ) | ( _048__X2 );
  assign _073__X = ( _073__X0 );
  assign _028__X = ( _028__X0 );
  assign fangyuan2_X = ( fangyuan2_X0 );
  assign rs2_val_X = ( rs2_val_X0 );
  assign _007__X = ( _007__X0 );
  assign _075__X = ( _075__X0 );
  assign _033__X = ( _033__X0 );
  assign _032__X = ( _032__X0 );
  assign _022__X = ( _022__X0 ) | ( _022__X1 );
  assign _065__X = ( _065__X0 );
  always @(*) begin
    for(i = 0; i < 3; i = i + 1) begin
      registers_R [i] = (registers_X0 [i] & registers_R0 [i] );
    end
  end
  assign _078__R = ( _078__X0 & _078__R0 );
  assign _077__R = ( _077__X0 & _077__R0 );
  assign _037__R = ( _037__X0 & _037__R0 );
  assign _076__R = ( _076__X0 & _076__R0 );
  assign id_ex_rd_R = ( id_ex_rd_X0 & id_ex_rd_R0 ) | ( id_ex_rd_X1 & id_ex_rd_R1 );
  assign _041__R = ( _041__X0 & _041__R0 );
  assign id_ex_reg_wen_R = ( id_ex_reg_wen_X0 & id_ex_reg_wen_R0 );
  assign _060__R = ( _060__X0 & _060__R0 );
  assign rs1_val_R = ( rs1_val_X0 & rs1_val_R0 );
  assign _059__R = ( _059__X0 & _059__R0 );
  assign _055__R = ( _055__X0 & _055__R0 );
  assign dummy_read_rf_R = ( dummy_read_rf_X0 & dummy_read_rf_R0 ) | ( dummy_read_rf_X1 & dummy_read_rf_R1 ) | ( dummy_read_rf_X2 & dummy_read_rf_R2 );
  assign _030__R = ( _030__X0 & _030__R0 );
  assign _062__R = ( _062__X0 & _062__R0 );
  assign _053__R = ( _053__X0 & _053__R0 );
  assign reg_3_w_stage_R = ( reg_3_w_stage_X0 & reg_3_w_stage_R0 ) | ( reg_3_w_stage_X1 & reg_3_w_stage_R1 ) | ( reg_3_w_stage_X2 & reg_3_w_stage_R2 ) | ( reg_3_w_stage_X3 & reg_3_w_stage_R3 ) | ( reg_3_w_stage_X4 & reg_3_w_stage_R4 );
  assign ex_wb_reg_wen_R = ( ex_wb_reg_wen_X0 & ex_wb_reg_wen_R0 ) | ( ex_wb_reg_wen_X1 & ex_wb_reg_wen_R1 ) | ( ex_wb_reg_wen_X2 & ex_wb_reg_wen_R2 ) | ( ex_wb_reg_wen_X3 & ex_wb_reg_wen_R3 );
  assign id_ex_op_R = ( id_ex_op_X0 & id_ex_op_R0 ) | ( id_ex_op_X1 & id_ex_op_R1 ) | ( id_ex_op_X2 & id_ex_op_R2 );
  assign _012__R = ( _012__X0 & _012__R0 );
  assign _015__R = ( _015__X0 & _015__R0 );
  assign rst_R = ( rst_X0 & rst_R0 ) | ( rst_X1 & rst_R1 ) | ( rst_X2 & rst_R2 ) | ( rst_X3 & rst_R3 ) | ( rst_X4 & rst_R4 ) | ( rst_X5 & rst_R5 ) | ( rst_X6 & rst_R6 ) | ( rst_X7 & rst_R7 ) | ( rst_X8 & rst_R8 ) | ( rst_X9 & rst_R9 ) | ( rst_X10 & rst_R10 ) | ( rst_X11 & rst_R11 ) | ( rst_X12 & rst_R12 ) | ( rst_X13 & rst_R13 ) | ( rst_X14 & rst_R14 ) | ( rst_X15 & rst_R15 );
  assign _009__R = ( _009__X0 & _009__R0 );
  assign _056__R = ( _056__X0 & _056__R0 );
  assign ex_wb_rd_R = ( ex_wb_rd_X0 & ex_wb_rd_R0 ) | ( ex_wb_rd_X1 & ex_wb_rd_R1 ) | ( ex_wb_rd_X2 & ex_wb_rd_R2 ) | ( ex_wb_rd_X3 & ex_wb_rd_R3 ) | ( ex_wb_rd_X4 & ex_wb_rd_R4 );
  assign _008__R = ( _008__X0 & _008__R0 );
  assign _063__R = ( _063__X0 & _063__R0 );
  assign rs2_stage_info_R = ( rs2_stage_info_X0 & rs2_stage_info_R0 ) | ( rs2_stage_info_X1 & rs2_stage_info_R1 );
  assign _040__R = ( _040__X0 & _040__R0 );
  assign _005__R = ( _005__X0 & _005__R0 );
  assign _043__R = ( _043__X0 & _043__R0 );
  assign _021__R = ( _021__X0 & _021__R0 ) | ( _021__X1 & _021__R1 );
  assign id_rs1_val_R = ( id_rs1_val_X0 & id_rs1_val_R0 );
  assign id_wen_R = ( id_wen_X0 & id_wen_R0 ) | ( id_wen_X1 & id_wen_R1 ) | ( id_wen_X2 & id_wen_R2 ) | ( id_wen_X3 & id_wen_R3 ) | ( id_wen_X4 & id_wen_R4 );
  assign reg_1_w_stage_R = ( reg_1_w_stage_X0 & reg_1_w_stage_R0 ) | ( reg_1_w_stage_X1 & reg_1_w_stage_R1 ) | ( reg_1_w_stage_X2 & reg_1_w_stage_R2 ) | ( reg_1_w_stage_X3 & reg_1_w_stage_R3 ) | ( reg_1_w_stage_X4 & reg_1_w_stage_R4 );
  assign _006__R = ( _006__X0 & _006__R0 );
  assign _038__R = ( _038__X0 & _038__R0 );
  assign id_rs2_val_R = ( id_rs2_val_X0 & id_rs2_val_R0 );
  assign _066__R = ( _066__X0 & _066__R0 );
  assign ex_wb_val_R = ( ex_wb_val_X0 & ex_wb_val_R0 ) | ( ex_wb_val_X1 & ex_wb_val_R1 ) | ( ex_wb_val_X2 & ex_wb_val_R2 ) | ( ex_wb_val_X3 & ex_wb_val_R3 ) | ( ex_wb_val_X4 & ex_wb_val_R4 ) | ( ex_wb_val_X5 & ex_wb_val_R5 ) | ( ex_wb_val_X6 & ex_wb_val_R6 );
  assign _035__R = ( _035__X0 & _035__R0 );
  assign dummy_rf_data_R = ( dummy_rf_data_X0 & dummy_rf_data_R0 );
  assign _054__R = ( _054__X0 & _054__R0 );
  assign _014__R = ( _014__X0 & _014__R0 );
  assign _010__R = ( _010__X0 & _010__R0 );
  assign _058__R = ( _058__X0 & _058__R0 );
  assign _072__R = ( _072__X0 & _072__R0 );
  assign id_ex_rs2_val_R = ( id_ex_rs2_val_X0 & id_ex_rs2_val_R0 ) | ( id_ex_rs2_val_X1 & id_ex_rs2_val_R1 ) | ( id_ex_rs2_val_X2 & id_ex_rs2_val_R2 ) | ( id_ex_rs2_val_X3 & id_ex_rs2_val_R3 );
  assign ex_alu_result_R = ( ex_alu_result_X0 & ex_alu_result_R0 ) | ( ex_alu_result_X1 & ex_alu_result_R1 ) | ( ex_alu_result_X2 & ex_alu_result_R2 );
  assign _024__R = ( _024__X0 & _024__R0 ) | ( _024__X1 & _024__R1 );
  assign _020__R = ( _020__X0 & _020__R0 );
  assign reg_0_w_stage_R = ( reg_0_w_stage_X0 & reg_0_w_stage_R0 ) | ( reg_0_w_stage_X1 & reg_0_w_stage_R1 ) | ( reg_0_w_stage_X2 & reg_0_w_stage_R2 ) | ( reg_0_w_stage_X3 & reg_0_w_stage_R3 ) | ( reg_0_w_stage_X4 & reg_0_w_stage_R4 );
  assign _027__R = ( _027__X0 & _027__R0 );
  assign rs1_stage_info_R = ( rs1_stage_info_X0 & rs1_stage_info_R0 ) | ( rs1_stage_info_X1 & rs1_stage_info_R1 );
  assign inst_R = ( inst_X0 & inst_R0 ) | ( inst_X1 & inst_R1 ) | ( inst_X2 & inst_R2 ) | ( inst_X3 & inst_R3 ) | ( inst_X4 & inst_R4 ) | ( inst_X5 & inst_R5 ) | ( inst_X6 & inst_R6 ) | ( inst_X7 & inst_R7 ) | ( inst_X8 & inst_R8 ) | ( inst_X9 & inst_R9 ) | ( inst_X10 & inst_R10 );
  assign _004__R = ( _004__X0 & _004__R0 );
  assign _070__R = ( _070__X0 & _070__R0 );
  assign _018__R = ( _018__X0 & _018__R0 );
  assign _019__R = ( _019__X0 & _019__R0 );
  assign _039__R = ( _039__X0 & _039__R0 );
  assign reg_2_w_stage_R = ( reg_2_w_stage_X0 & reg_2_w_stage_R0 ) | ( reg_2_w_stage_X1 & reg_2_w_stage_R1 ) | ( reg_2_w_stage_X2 & reg_2_w_stage_R2 ) | ( reg_2_w_stage_X3 & reg_2_w_stage_R3 ) | ( reg_2_w_stage_X4 & reg_2_w_stage_R4 );
  assign _036__R = ( _036__X0 & _036__R0 );
  assign _074__R = ( _074__X0 & _074__R0 );
  assign _029__R = ( _029__X0 & _029__R0 );
  assign _057__R = ( _057__X0 & _057__R0 );
  assign _034__R = ( _034__X0 & _034__R0 );
  assign id_ex_rs1_val_R = ( id_ex_rs1_val_X0 & id_ex_rs1_val_R0 ) | ( id_ex_rs1_val_X1 & id_ex_rs1_val_R1 ) | ( id_ex_rs1_val_X2 & id_ex_rs1_val_R2 ) | ( id_ex_rs1_val_X3 & id_ex_rs1_val_R3 );
  assign _031__R = ( _031__X0 & _031__R0 );
  assign _044__R = ( _044__X0 & _044__R0 );
  assign _042__R = ( _042__X0 & _042__R0 );
  assign _051__R = ( _051__X0 & _051__R0 );
  assign _011__R = ( _011__X0 & _011__R0 );
  assign _046__R = ( _046__X0 & _046__R0 ) | ( _046__X1 & _046__R1 ) | ( _046__X2 & _046__R2 );
  assign fangyuan0_R = ( fangyuan0_X0 & fangyuan0_R0 );
  assign _067__R = ( _067__X0 & _067__R0 );
  assign _025__R = ( _025__X0 & _025__R0 ) | ( _025__X1 & _025__R1 );
  assign _061__R = ( _061__X0 & _061__R0 );
  assign _016__R = ( _016__X0 & _016__R0 );
  assign _050__R = ( _050__X0 & _050__R0 );
  assign fangyuan1_R = ( fangyuan1_X0 & fangyuan1_R0 );
  assign _049__R = ( _049__X0 & _049__R0 );
  assign _047__R = ( _047__X0 & _047__R0 ) | ( _047__X1 & _047__R1 ) | ( _047__X2 & _047__R2 );
  assign _052__R = ( _052__X0 & _052__R0 );
  assign _071__R = ( _071__X0 & _071__R0 );
  assign fangyuan3_R = ( fangyuan3_X0 & fangyuan3_R0 );
  assign _064__R = ( _064__X0 & _064__R0 );
  assign _013__R = ( _013__X0 & _013__R0 );
  assign _068__R = ( _068__X0 & _068__R0 );
  assign _023__R = ( _023__X0 & _023__R0 ) | ( _023__X1 & _023__R1 );
  assign _017__R = ( _017__X0 & _017__R0 );
  assign _026__R = ( _026__X0 & _026__R0 ) | ( _026__X1 & _026__R1 );
  assign _045__R = ( _045__X0 & _045__R0 ) | ( _045__X1 & _045__R1 ) | ( _045__X2 & _045__R2 );
  assign _069__R = ( _069__X0 & _069__R0 );
  assign _048__R = ( _048__X0 & _048__R0 ) | ( _048__X1 & _048__R1 ) | ( _048__X2 & _048__R2 );
  assign _073__R = ( _073__X0 & _073__R0 );
  assign _028__R = ( _028__X0 & _028__R0 );
  assign fangyuan2_R = ( fangyuan2_X0 & fangyuan2_R0 );
  assign rs2_val_R = ( rs2_val_X0 & rs2_val_R0 );
  assign _007__R = ( _007__X0 & _007__R0 );
  assign _075__R = ( _075__X0 & _075__R0 );
  assign _033__R = ( _033__X0 & _033__R0 );
  assign _032__R = ( _032__X0 & _032__R0 );
  assign _022__R = ( _022__X0 & _022__R0 ) | ( _022__X1 & _022__R1 );
  assign _065__R = ( _065__X0 & _065__R0 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { _000__R , _000__C , _000__X , _001__R , _001__C , _001__X , _002__R , _002__C , _002__X , _003__R , _003__C , _003__X , op_R , op_C , op_X , rd_R , rd_C , rd_X , reg_0_w_stage_nxt_R , reg_0_w_stage_nxt_C , reg_0_w_stage_nxt_X , reg_1_w_stage_nxt_R , reg_1_w_stage_nxt_C , reg_1_w_stage_nxt_X , reg_2_w_stage_nxt_R , reg_2_w_stage_nxt_C , reg_2_w_stage_nxt_X , reg_3_w_stage_nxt_R , reg_3_w_stage_nxt_C , reg_3_w_stage_nxt_X , rs1_R , rs1_C , rs1_X , rs2_R , rs2_C , rs2_X  } = 0;
  always @( posedge clk ) begin
    if( rst ) ex_wb_val_PREV_VAL1 <= 0 ;
    if( rst ) ex_wb_val_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) ex_wb_val_PREV_VAL1 <= ex_wb_val ;
    if( INSTR_IN_ZY ) ex_wb_val_PREV_VAL2 <= ex_wb_val_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( rst ) ex_wb_rd_PREV_VAL1 <= 0 ;
    if( rst ) ex_wb_rd_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) ex_wb_rd_PREV_VAL1 <= ex_wb_rd ;
    if( INSTR_IN_ZY ) ex_wb_rd_PREV_VAL2 <= ex_wb_rd_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( rst ) ex_wb_reg_wen_PREV_VAL1 <= 0 ;
    if( rst ) ex_wb_reg_wen_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) ex_wb_reg_wen_PREV_VAL1 <= ex_wb_reg_wen ;
    if( INSTR_IN_ZY ) ex_wb_reg_wen_PREV_VAL2 <= ex_wb_reg_wen_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( rst ) id_ex_rs1_val_PREV_VAL1 <= 0 ;
    if( rst ) id_ex_rs1_val_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) id_ex_rs1_val_PREV_VAL1 <= id_ex_rs1_val ;
    if( INSTR_IN_ZY ) id_ex_rs1_val_PREV_VAL2 <= id_ex_rs1_val_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( rst ) id_ex_rs2_val_PREV_VAL1 <= 0 ;
    if( rst ) id_ex_rs2_val_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) id_ex_rs2_val_PREV_VAL1 <= id_ex_rs2_val ;
    if( INSTR_IN_ZY ) id_ex_rs2_val_PREV_VAL2 <= id_ex_rs2_val_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( rst ) id_ex_op_PREV_VAL1 <= 0 ;
    if( rst ) id_ex_op_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) id_ex_op_PREV_VAL1 <= id_ex_op ;
    if( INSTR_IN_ZY ) id_ex_op_PREV_VAL2 <= id_ex_op_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( rst ) id_ex_rd_PREV_VAL1 <= 0 ;
    if( rst ) id_ex_rd_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) id_ex_rd_PREV_VAL1 <= id_ex_rd ;
    if( INSTR_IN_ZY ) id_ex_rd_PREV_VAL2 <= id_ex_rd_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( rst ) id_ex_reg_wen_PREV_VAL1 <= 0 ;
    if( rst ) id_ex_reg_wen_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) id_ex_reg_wen_PREV_VAL1 <= id_ex_reg_wen ;
    if( INSTR_IN_ZY ) id_ex_reg_wen_PREV_VAL2 <= id_ex_reg_wen_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( rst ) reg_3_w_stage_PREV_VAL1 <= 0 ;
    if( rst ) reg_3_w_stage_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) reg_3_w_stage_PREV_VAL1 <= reg_3_w_stage ;
    if( INSTR_IN_ZY ) reg_3_w_stage_PREV_VAL2 <= reg_3_w_stage_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( rst ) reg_2_w_stage_PREV_VAL1 <= 0 ;
    if( rst ) reg_2_w_stage_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) reg_2_w_stage_PREV_VAL1 <= reg_2_w_stage ;
    if( INSTR_IN_ZY ) reg_2_w_stage_PREV_VAL2 <= reg_2_w_stage_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( rst ) reg_1_w_stage_PREV_VAL1 <= 0 ;
    if( rst ) reg_1_w_stage_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) reg_1_w_stage_PREV_VAL1 <= reg_1_w_stage ;
    if( INSTR_IN_ZY ) reg_1_w_stage_PREV_VAL2 <= reg_1_w_stage_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( rst ) reg_0_w_stage_PREV_VAL1 <= 0 ;
    if( rst ) reg_0_w_stage_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) reg_0_w_stage_PREV_VAL1 <= reg_0_w_stage ;
    if( INSTR_IN_ZY ) reg_0_w_stage_PREV_VAL2 <= reg_0_w_stage_PREV_VAL1 ;
  end
 // ground taints for unused wire slices
  assign { _060__R0 [0], _060__R0 [1], _060__R0 [2], _060__R0 [3], _060__R0 [4], _060__R0 [5], _060__R0 [6] } = 0;
  assign { _060__X0 [0], _060__X0 [1], _060__X0 [2], _060__X0 [3], _060__X0 [4], _060__X0 [5], _060__X0 [6] } = 0;
  assign { _060__C0 [0], _060__C0 [1], _060__C0 [2], _060__C0 [3], _060__C0 [4], _060__C0 [5], _060__C0 [6] } = 0;
  assign { _059__R0 [0], _059__R0 [1], _059__R0 [2], _059__R0 [3], _059__R0 [4], _059__R0 [5], _059__R0 [6] } = 0;
  assign { _059__X0 [0], _059__X0 [1], _059__X0 [2], _059__X0 [3], _059__X0 [4], _059__X0 [5], _059__X0 [6] } = 0;
  assign { _059__C0 [0], _059__C0 [1], _059__C0 [2], _059__C0 [3], _059__C0 [4], _059__C0 [5], _059__C0 [6] } = 0;
  assign { _055__R0 [0], _055__R0 [1], _055__R0 [2], _055__R0 [3], _055__R0 [4], _055__R0 [5], _055__R0 [6] } = 0;
  assign { _055__X0 [0], _055__X0 [1], _055__X0 [2], _055__X0 [3], _055__X0 [4], _055__X0 [5], _055__X0 [6] } = 0;
  assign { _055__C0 [0], _055__C0 [1], _055__C0 [2], _055__C0 [3], _055__C0 [4], _055__C0 [5], _055__C0 [6] } = 0;
  assign { _053__R0 [0], _053__R0 [1], _053__R0 [2], _053__R0 [3], _053__R0 [4], _053__R0 [5], _053__R0 [6] } = 0;
  assign { _053__X0 [0], _053__X0 [1], _053__X0 [2], _053__X0 [3], _053__X0 [4], _053__X0 [5], _053__X0 [6] } = 0;
  assign { _053__C0 [0], _053__C0 [1], _053__C0 [2], _053__C0 [3], _053__C0 [4], _053__C0 [5], _053__C0 [6] } = 0;
  assign { reg_3_w_stage_R4 [0] } = 0;
  assign { reg_3_w_stage_X4 [0] } = 0;
  assign { reg_3_w_stage_C4 [0] } = 0;
  assign { _056__R0 [0], _056__R0 [1], _056__R0 [2], _056__R0 [3], _056__R0 [4], _056__R0 [5], _056__R0 [6] } = 0;
  assign { _056__X0 [0], _056__X0 [1], _056__X0 [2], _056__X0 [3], _056__X0 [4], _056__X0 [5], _056__X0 [6] } = 0;
  assign { _056__C0 [0], _056__C0 [1], _056__C0 [2], _056__C0 [3], _056__C0 [4], _056__C0 [5], _056__C0 [6] } = 0;
  assign { reg_1_w_stage_R4 [0] } = 0;
  assign { reg_1_w_stage_X4 [0] } = 0;
  assign { reg_1_w_stage_C4 [0] } = 0;
  assign { _054__R0 [0], _054__R0 [1], _054__R0 [2], _054__R0 [3], _054__R0 [4], _054__R0 [5], _054__R0 [6] } = 0;
  assign { _054__X0 [0], _054__X0 [1], _054__X0 [2], _054__X0 [3], _054__X0 [4], _054__X0 [5], _054__X0 [6] } = 0;
  assign { _054__C0 [0], _054__C0 [1], _054__C0 [2], _054__C0 [3], _054__C0 [4], _054__C0 [5], _054__C0 [6] } = 0;
  assign { _058__R0 [0], _058__R0 [1], _058__R0 [2], _058__R0 [3], _058__R0 [4], _058__R0 [5], _058__R0 [6] } = 0;
  assign { _058__X0 [0], _058__X0 [1], _058__X0 [2], _058__X0 [3], _058__X0 [4], _058__X0 [5], _058__X0 [6] } = 0;
  assign { _058__C0 [0], _058__C0 [1], _058__C0 [2], _058__C0 [3], _058__C0 [4], _058__C0 [5], _058__C0 [6] } = 0;
  assign { reg_0_w_stage_R4 [0] } = 0;
  assign { reg_0_w_stage_X4 [0] } = 0;
  assign { reg_0_w_stage_C4 [0] } = 0;
  assign { reg_2_w_stage_R4 [0] } = 0;
  assign { reg_2_w_stage_X4 [0] } = 0;
  assign { reg_2_w_stage_C4 [0] } = 0;
  assign { _057__R0 [0], _057__R0 [1], _057__R0 [2], _057__R0 [3], _057__R0 [4], _057__R0 [5], _057__R0 [6] } = 0;
  assign { _057__X0 [0], _057__X0 [1], _057__X0 [2], _057__X0 [3], _057__X0 [4], _057__X0 [5], _057__X0 [6] } = 0;
  assign { _057__C0 [0], _057__C0 [1], _057__C0 [2], _057__C0 [3], _057__C0 [4], _057__C0 [5], _057__C0 [6] } = 0;
  assign registers_r_flag_top  = registers_r_flag [0] | registers_r_flag [1] | registers_r_flag [2] | registers_r_flag [3] ;
  assert property( ex_wb_rd_r_flag == 0 || ex_wb_rd_PREV_VAL1 == ex_wb_rd_PREV_VAL2 );
  assert property( ex_wb_reg_wen_r_flag == 0 || ex_wb_reg_wen_PREV_VAL1 == ex_wb_reg_wen_PREV_VAL2 );
  assert property( ex_wb_val_r_flag == 0 || ex_wb_val_PREV_VAL1 == ex_wb_val_PREV_VAL2 );
  assert property( id_ex_op_r_flag == 0 || id_ex_op_PREV_VAL1 == id_ex_op_PREV_VAL2 );
  assert property( id_ex_rd_r_flag == 0 || id_ex_rd_PREV_VAL1 == id_ex_rd_PREV_VAL2 );
  assert property( id_ex_reg_wen_r_flag == 0 || id_ex_reg_wen_PREV_VAL1 == id_ex_reg_wen_PREV_VAL2 );
  assert property( id_ex_rs1_val_r_flag == 0 || id_ex_rs1_val_PREV_VAL1 == id_ex_rs1_val_PREV_VAL2 );
  assert property( id_ex_rs2_val_r_flag == 0 || id_ex_rs2_val_PREV_VAL1 == id_ex_rs2_val_PREV_VAL2 );
  assert property( reg_0_w_stage_r_flag == 0 || reg_0_w_stage_PREV_VAL1 == reg_0_w_stage_PREV_VAL2 );
  assert property( reg_1_w_stage_r_flag == 0 || reg_1_w_stage_PREV_VAL1 == reg_1_w_stage_PREV_VAL2 );
  assert property( reg_2_w_stage_r_flag == 0 || reg_2_w_stage_PREV_VAL1 == reg_2_w_stage_PREV_VAL2 );
  assert property( reg_3_w_stage_r_flag == 0 || reg_3_w_stage_PREV_VAL1 == reg_3_w_stage_PREV_VAL2 );
  assert property( registers_r_flag_top == 0 );
  assign rst_zy = rst ;
endmodule
