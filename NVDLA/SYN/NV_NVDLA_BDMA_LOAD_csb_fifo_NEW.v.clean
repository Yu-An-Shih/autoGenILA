module NV_NVDLA_BDMA_LOAD_csb_fifo(nvdla_core_clk, nvdla_core_rstn, csb_fifo_wr_count, csb_fifo_wr_prdy, csb_fifo_wr_idle, csb_fifo_wr_pvld, csb_fifo_wr_pd, csb_fifo_rd_prdy, csb_fifo_rd_pvld, csb_fifo_rd_pd, pwrbus_ram_pd);
  wire [4:0] _000_;
  wire _001_;
  wire [4:0] _002_;
  wire [4:0] _003_;
  wire [4:0] _004_;
  wire [4:0] _005_;
  wire [4:0] _006_;
  wire [4:0] _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire [4:0] _034_;
  wire [4:0] _035_;
  reg [4:0] csb_fifo_rd_adr;
  wire [4:0] csb_fifo_rd_adr_p;
  reg [4:0] csb_fifo_rd_count_p;
  output [288:0] csb_fifo_rd_pd;
  wire [288:0] csb_fifo_rd_pd_p;
  input csb_fifo_rd_prdy;
  output csb_fifo_rd_pvld;
  reg csb_fifo_rd_pvld_int;
  reg csb_fifo_rd_pvld_p;
  reg [4:0] csb_fifo_wr_adr;
  reg csb_fifo_wr_busy_int;
  wire csb_fifo_wr_busy_next;
  output [4:0] csb_fifo_wr_count;
  reg [4:0] csb_fifo_wr_count;
  output csb_fifo_wr_idle;
  wire csb_fifo_wr_idle_d0;
  input [288:0] csb_fifo_wr_pd;
  output csb_fifo_wr_prdy;
  input csb_fifo_wr_pvld;
  input nvdla_core_clk;
  wire nvdla_core_clk_mgated;
  wire nvdla_core_clk_mgated_enable;
  input nvdla_core_rstn;
  wire ore;
  input [31:0] pwrbus_ram_pd;
  wire [4:0] rd_adr_next;
  wire [4:0] rd_count_p_next;
  wire [4:0] rd_count_p_next_no_rd_popping;
  wire rd_count_p_next_no_rd_popping_not_0;
  wire rd_count_p_next_not_0;
  wire [4:0] rd_count_p_next_rd_popping;
  wire rd_count_p_next_rd_popping_not_0;
  wire rd_enable;
  wire rd_idle;
  wire rd_popping;
  reg rd_pushing;
  wire rd_req_next;
  wire [4:0] wr_adr_next;
  wire [4:0] wr_count_next;
  wire wr_count_next_is_20;
  wire [4:0] wr_count_next_no_wr_popping;
  wire wr_count_next_no_wr_popping_is_20;
  wire [4:0] wr_count_next_wr_popping;
  wire [4:0] wr_limit_muxed;
  wire [4:0] wr_limit_reg;
  reg wr_popping;
  wire wr_pushing;
  wire wr_reserving;
  assign _004_ = csb_fifo_wr_adr + 1'b1;
  assign _005_ = csb_fifo_rd_adr + 1'b1;
  assign _006_ = csb_fifo_rd_count_p + 1'b1;
  assign _007_ = csb_fifo_wr_count + 1'b1;
  assign _008_ = csb_fifo_wr_adr == 5'b10011;
  assign _009_ = csb_fifo_rd_adr == 5'b10011;
  assign _010_ = ! csb_fifo_rd_count_p;
  assign _011_ = ! csb_fifo_wr_count;
  assign wr_count_next_no_wr_popping_is_20 = wr_count_next_no_wr_popping == 5'b10100;
  assign _012_ = csb_fifo_rd_pvld_int && _017_;
  assign ore = csb_fifo_rd_pvld_p && _018_;
  assign rd_enable = rd_count_p_next_not_0 && _023_;
  assign _013_ = _019_ && _020_;
  assign rd_idle = _013_ && _010_;
  assign _014_ = _021_ && rd_idle;
  assign _015_ = _014_ && _022_;
  assign csb_fifo_wr_idle = _015_ && _011_;
  assign wr_pushing = csb_fifo_wr_pvld && csb_fifo_wr_prdy;
  assign _016_ = csb_fifo_rd_pvld_int && csb_fifo_rd_prdy;
  assign _017_ = ! csb_fifo_rd_prdy;
  assign _018_ = ! _012_;
  assign _019_ = ! csb_fifo_rd_pvld_int;
  assign _020_ = ! rd_pushing;
  assign _021_ = ! csb_fifo_wr_pvld;
  assign _022_ = ! wr_pushing;
  assign csb_fifo_wr_prdy = ! csb_fifo_wr_busy_int;
  assign _023_ = _032_ || ore;
  assign _024_ = rd_pushing || ore;
  assign rd_req_next = csb_fifo_rd_pvld_p || _012_;
  assign _025_ = wr_pushing || ore;
  assign _026_ = _025_ || wr_popping;
  assign _027_ = _026_ || wr_pushing;
  assign _028_ = _027_ || _031_;
  assign _029_ = _024_ || _016_;
  assign _030_ = _029_ || wr_pushing;
  assign nvdla_core_clk_mgated_enable = _028_ || _030_;
  assign rd_count_p_next_rd_popping_not_0 = | rd_count_p_next_rd_popping;
  assign rd_count_p_next_no_rd_popping_not_0 = | rd_count_p_next_no_rd_popping;
  assign _031_ = csb_fifo_wr_busy_int != csb_fifo_wr_busy_next;
  assign _032_ = ~ csb_fifo_rd_pvld_p;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      csb_fifo_rd_pvld_int <= 1'b0;
    else
      csb_fifo_rd_pvld_int <= rd_req_next;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      csb_fifo_rd_pvld_p <= 1'b0;
    else
      csb_fifo_rd_pvld_p <= _001_;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      csb_fifo_rd_count_p <= 5'b00000;
    else
      csb_fifo_rd_count_p <= _000_;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      rd_pushing <= 1'b0;
    else
      rd_pushing <= wr_pushing;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      wr_popping <= 1'b0;
    else
      wr_popping <= ore;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      csb_fifo_rd_adr <= 5'b00000;
    else
      csb_fifo_rd_adr <= csb_fifo_rd_adr_p;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      csb_fifo_wr_adr <= 5'b00000;
    else
      csb_fifo_wr_adr <= _002_;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      csb_fifo_wr_count <= 5'b00000;
    else
      csb_fifo_wr_count <= _003_;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      csb_fifo_wr_busy_int <= 1'b0;
    else
      csb_fifo_wr_busy_int <= csb_fifo_wr_busy_next;
  assign _000_ = _024_ ? rd_count_p_next : csb_fifo_rd_count_p;
  assign _001_ = _024_ ? rd_count_p_next_not_0 : csb_fifo_rd_pvld_p;
  assign csb_fifo_rd_adr_p = ore ? rd_adr_next : csb_fifo_rd_adr;
  assign _002_ = wr_pushing ? wr_adr_next : csb_fifo_wr_adr;
  assign _003_ = _033_ ? wr_count_next : csb_fifo_wr_count;
  assign _034_ = csb_fifo_rd_count_p - 1'b1;
  assign _035_ = csb_fifo_wr_count - 1'b1;
  assign wr_adr_next = _008_ ? 5'b00000 : _004_;
  assign rd_adr_next = _009_ ? 5'b00000 : _005_;
  assign rd_count_p_next_rd_popping = rd_pushing ? csb_fifo_rd_count_p : _034_;
  assign rd_count_p_next_no_rd_popping = rd_pushing ? _006_ : csb_fifo_rd_count_p;
  assign rd_count_p_next = ore ? rd_count_p_next_rd_popping : rd_count_p_next_no_rd_popping;
  assign rd_count_p_next_not_0 = ore ? rd_count_p_next_rd_popping_not_0 : rd_count_p_next_no_rd_popping_not_0;
  assign wr_count_next_wr_popping = wr_pushing ? csb_fifo_wr_count : _035_;
  assign wr_count_next_no_wr_popping = wr_pushing ? _007_ : csb_fifo_wr_count;
  assign wr_count_next = wr_popping ? wr_count_next_wr_popping : wr_count_next_no_wr_popping;
  assign csb_fifo_wr_busy_next = wr_popping ? 1'b0 : wr_count_next_no_wr_popping_is_20;
  assign _033_ = wr_pushing ^ wr_popping;
  NV_CLK_gate_power nvdla_core_clk_mgate (
    .clk(nvdla_core_clk),
    .clk_en(nvdla_core_clk_mgated_enable),
    .clk_gated(nvdla_core_clk_mgated),
    .reset_(nvdla_core_rstn)
  );
  \$paramod\nv_ram_rwsp_20x289\FORCE_CONTENTION_ASSERTION_RESET_ACTIVE=1'1 ram (
    .clk(nvdla_core_clk),
    .di(csb_fifo_wr_pd),
    .dout(csb_fifo_rd_pd_p),
    .ore(ore),
    .pwrbus_ram_pd(pwrbus_ram_pd),
    .ra(csb_fifo_rd_adr_p),
    .re(rd_enable),
    .wa(csb_fifo_wr_adr),
    .we(wr_pushing)
  );
  assign csb_fifo_rd_pd = csb_fifo_rd_pd_p;
  assign csb_fifo_rd_pvld = csb_fifo_rd_pvld_int;
  assign csb_fifo_wr_idle_d0 = csb_fifo_wr_idle;
  assign rd_popping = ore;
  assign wr_count_next_is_20 = csb_fifo_wr_busy_next;
  assign wr_limit_muxed = 5'b00000;
  assign wr_limit_reg = 5'b00000;
  assign wr_reserving = wr_pushing;
endmodule
