module RAM_BANK_RAMPDP_256X11_GL_M4_D2(WE, CLK, IDDQ, SVOP, WD, RD, RE, RA, WA, SLEEP_EN, RET_EN, clobber_array, clobber_flops);
  wire _000_;
  wire [10:0] _001_;
  wire _002_;
  wire [10:0] _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire [8:0] _014_;
  wire [8:0] _015_;
  wire [10:0] _016_;
  wire [10:0] _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire [8:0] _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire [10:0] _036_;
  wire [10:0] _037_;
  wire [10:0] _038_;
  wire [10:0] _039_;
  wire [10:0] _040_;
  wire [10:0] _041_;
  wire [8:0] ADR;
  wire [10:0] BADBIT;
  wire CAPT_DIS;
  wire CLAMPB;
  input CLK;
  input IDDQ;
  wire [511:0] PDEC0;
  wire [511:0] PDEC1;
  wire [511:0] PDEC2;
  input [8:0] RA;
  reg [8:0] RADR;
  wire RADRCLK;
  wire [8:0] RADRSWI;
  output [10:0] RD;
  wire RDBYP;
  wire [10:0] RDBYPASS;
  input RE;
  wire RECLK;
  input RET_EN;
  reg RE_LATB;
  wire RWSEL;
  wire RdClk0;
  wire RdClk1;
  wire RdClk2;
  wire RdClk3;
  wire [10:0] SHFT;
  input [7:0] SLEEP_EN;
  input [7:0] SVOP;
  input [8:0] WA;
  wire WADRCLK;
  reg [8:0] WAFF;
  input [10:0] WD;
  wire [10:0] WDBQ;
  wire [10:0] WDBQ_pr;
  wire [10:0] WDQ;
  reg [10:0] WDQ_pr;
  input WE;
  wire WECLK;
  reg WE_FF;
  reg WE_LATB;
  wire [10:0] WMNQ;
  wire [10:0] WMNexp;
  wire WRDCLK;
  wire WrClk0;
  wire WrClk1;
  wire WrClk2;
  wire WrClk3;
  input clobber_array;
  input clobber_flops;
  reg [10:0] dout;
  wire [10:0] dout0;
  wire [10:0] dout1;
  wire [10:0] dout2;
  wire [10:0] dout3;
  wire empadd;
  wire [10:0] force_x;
  wire [7:0] fusePDEC0;
  wire [7:0] fusePDEC1;
  wire [7:0] fusePDEC2;
  wire fuseien;
  wire latffclk;
  wire legal;
  wire re_se;
  wire [10:0] rmuxd0;
  wire [10:0] rmuxd1;
  wire [10:0] rmuxd2;
  wire [10:0] rmuxd3;
  wire [10:0] sel_normal;
  wire [10:0] sel_redun;
  wire tiedvalid;
  wire we_se;
  assign _004_ = _026_ & _027_;
  assign _005_ = CLK & _027_;
  assign _006_ = we_se & CLK;
  assign WADRCLK = _006_ & _027_;
  assign RADRCLK = re_se & CLK;
  assign _007_ = re_se & CLAMPB;
  assign _008_ = _007_ & _027_;
  assign _009_ = _008_ & _028_;
  assign RECLK = _009_ & CLK;
  assign _010_ = WE_FF & CLAMPB;
  assign _011_ = _010_ & _027_;
  assign _012_ = _011_ & _028_;
  assign WECLK = _012_ & _030_;
  assign RWSEL = _010_ & _030_;
  assign _013_ = _029_ & _027_;
  wire [8:0] fangyuan0;
  assign fangyuan0 = { RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL };

  assign _014_ = fangyuan0 & WAFF;
  assign _015_ = _031_ & RADR;
  assign _001_ = WD & 11'b11111111111;
  assign _016_ = 11'b11111111111 & dout;
  assign _017_ = 1'b0 & WDQ_pr;
  assign _018_ = RECLK & _032_;
  assign RdClk0 = _018_ & _033_;
  assign _019_ = RECLK & RADR[0];
  assign RdClk1 = _019_ & _033_;
  assign RdClk2 = _018_ & RADR[1];
  assign RdClk3 = _019_ & RADR[1];
  assign _020_ = WECLK & _034_;
  assign _021_ = _020_ & _035_;
  assign WrClk0 = _021_ & legal;
  assign _022_ = WECLK & WAFF[0];
  assign _023_ = _022_ & _035_;
  assign WrClk1 = _023_ & legal;
  assign _024_ = _020_ & WAFF[1];
  assign WrClk2 = _024_ & legal;
  assign _025_ = _022_ & WAFF[1];
  assign WrClk3 = _025_ & legal;
  wire [10:0] fangyuan1;
  assign fangyuan1 = { RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0 };

  assign rmuxd0 = fangyuan1 & _036_;
  wire [10:0] fangyuan2;
  assign fangyuan2 = { RdClk1, RdClk1, RdClk1, RdClk1, RdClk1, RdClk1, RdClk1, RdClk1, RdClk1, RdClk1, RdClk1 };

  assign rmuxd1 = fangyuan2 & _037_;
  wire [10:0] fangyuan3;
  assign fangyuan3 = { RdClk2, RdClk2, RdClk2, RdClk2, RdClk2, RdClk2, RdClk2, RdClk2, RdClk2, RdClk2, RdClk2 };

  assign rmuxd2 = fangyuan3 & _038_;
  wire [10:0] fangyuan4;
  assign fangyuan4 = { RdClk3, RdClk3, RdClk3, RdClk3, RdClk3, RdClk3, RdClk3, RdClk3, RdClk3, RdClk3, RdClk3 };

  assign rmuxd3 = fangyuan4 & _039_;
  always @*
    if (RECLK)
      dout = _003_;
  always @*
    if (_013_)
      RADR = RA;
  always @*
    if (_005_)
      WE_FF = we_se;
  always @*
    if (_004_)
      RE_LATB = _000_;
  always @*
    if (_004_)
      WE_LATB = _002_;
  assign _026_ = ! CLK;
  assign _027_ = ! clobber_flops;
  assign _028_ = ! RET_EN;
  assign _029_ = ! RADRCLK;
  assign CLAMPB = ~ IDDQ;
  assign _000_ = ~ RE;
  assign _002_ = ~ WE;
  assign we_se = ~ WE_LATB;
  assign re_se = ~ RE_LATB;
  assign _030_ = ~ CLK;
  wire [8:0] fangyuan5;
  assign fangyuan5 = { RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL };

  assign _031_ = ~ fangyuan5;
  assign WDBQ = ~ WDQ_pr;
  assign legal = ~ ADR[8];
  assign _032_ = ~ RADR[0];
  assign _033_ = ~ RADR[1];
  assign _034_ = ~ WAFF[0];
  assign _035_ = ~ WAFF[1];
  assign _036_ = ~ dout0;
  assign _037_ = ~ dout1;
  assign _038_ = ~ dout2;
  assign _039_ = ~ dout3;
  assign ADR = _014_ | _015_;
  assign WMNQ = WDQ_pr | WDBQ;
  assign RD = _016_ | _017_;
  assign _040_ = rmuxd0 | rmuxd1;
  assign _041_ = _040_ | rmuxd2;
  assign _003_ = _041_ | rmuxd3;
  always @(posedge WADRCLK)
      WDQ_pr <= _001_;
  always @(posedge WADRCLK)
      WAFF <= WA;
  \$paramod\RAMPDP_256X11_GL_M4_D2_ram\words=64\bits=11\addrs=7 iow0 (
    .radr(RADR[8:2]),
    .rout_B(dout0),
    .wadr(WAFF[8:2]),
    .wrclk(WrClk0),
    .wrdata(WDQ_pr),
    .wrmaskn(WMNQ)
  );
  \$paramod\RAMPDP_256X11_GL_M4_D2_ram\words=64\bits=11\addrs=7 iow1 (
    .radr(RADR[8:2]),
    .rout_B(dout1),
    .wadr(WAFF[8:2]),
    .wrclk(WrClk1),
    .wrdata(WDQ_pr),
    .wrmaskn(WMNQ)
  );
  \$paramod\RAMPDP_256X11_GL_M4_D2_ram\words=64\bits=11\addrs=7 iow2 (
    .radr(RADR[8:2]),
    .rout_B(dout2),
    .wadr(WAFF[8:2]),
    .wrclk(WrClk2),
    .wrdata(WDQ_pr),
    .wrmaskn(WMNQ)
  );
  \$paramod\RAMPDP_256X11_GL_M4_D2_ram\words=64\bits=11\addrs=7 iow3 (
    .radr(RADR[8:2]),
    .rout_B(dout3),
    .wadr(WAFF[8:2]),
    .wrclk(WrClk3),
    .wrdata(WDQ_pr),
    .wrmaskn(WMNQ)
  );
  assign BADBIT = 11'b00000000000;
  assign CAPT_DIS = 1'b0;
  assign PDEC0 = 512'b
  assign PDEC1 = 512'b
  assign PDEC2 = 512'b
  assign RADRSWI = RADR;
  assign RDBYP = 1'b0;
  assign RDBYPASS = 11'b00000000000;
  assign SHFT = 11'b11111111111;
  assign WDBQ_pr = WDBQ;
  assign WDQ = WDQ_pr;
  assign WMNexp = 11'b11111111111;
  assign WRDCLK = WADRCLK;
  assign empadd = 1'b0;
  assign force_x = 11'b00000000000;
  assign fusePDEC0 = 8'b00000000;
  assign fusePDEC1 = 8'b00000000;
  assign fusePDEC2 = 8'b00000000;
  assign fuseien = 1'b0;
  assign latffclk = CLK;
  assign sel_normal = 11'b11111111111;
  assign sel_redun = 11'b00000000000;
  assign tiedvalid = legal;
endmodule
