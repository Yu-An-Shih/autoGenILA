module NV_NVDLA_BDMA_LOAD_csb_fifo ( csb_fifo_rd_prdy , csb_fifo_wr_pd , csb_fifo_wr_pvld , nvdla_core_clk , nvdla_core_rstn , pwrbus_ram_pd , INSTR_IN_ZY , csb_fifo_rd_pd_R0 , csb_fifo_rd_pd_C0 , csb_fifo_rd_pd_X0 , csb_fifo_rd_prdy_T , csb_fifo_rd_prdy_S , csb_fifo_rd_pvld_R0 , csb_fifo_rd_pvld_C0 , csb_fifo_rd_pvld_X0 , csb_fifo_wr_count_R0 , csb_fifo_wr_count_C0 , csb_fifo_wr_count_X0 , csb_fifo_wr_idle_R0 , csb_fifo_wr_idle_C0 , csb_fifo_wr_idle_X0 , csb_fifo_wr_pd_T , csb_fifo_wr_pd_S , csb_fifo_wr_prdy_R0 , csb_fifo_wr_prdy_C0 , csb_fifo_wr_prdy_X0 , csb_fifo_wr_pvld_T , csb_fifo_wr_pvld_S , nvdla_core_clk_T , nvdla_core_clk_S , nvdla_core_rstn_T , nvdla_core_rstn_S , pwrbus_ram_pd_T , pwrbus_ram_pd_S , csb_fifo_rd_pd , csb_fifo_rd_pvld , csb_fifo_wr_count , csb_fifo_wr_idle , csb_fifo_wr_prdy , csb_fifo_rd_pd_T , csb_fifo_rd_pd_S , csb_fifo_rd_prdy_R , csb_fifo_rd_prdy_X , csb_fifo_rd_prdy_C , csb_fifo_rd_pvld_T , csb_fifo_rd_pvld_S , csb_fifo_wr_count_T , csb_fifo_wr_count_S , csb_fifo_wr_idle_T , csb_fifo_wr_idle_S , csb_fifo_wr_pd_R , csb_fifo_wr_pd_X , csb_fifo_wr_pd_C , csb_fifo_wr_prdy_T , csb_fifo_wr_prdy_S , csb_fifo_wr_pvld_R , csb_fifo_wr_pvld_X , csb_fifo_wr_pvld_C , nvdla_core_clk_R , nvdla_core_clk_X , nvdla_core_clk_C , nvdla_core_rstn_R , nvdla_core_rstn_X , nvdla_core_rstn_C , pwrbus_ram_pd_R , pwrbus_ram_pd_X , pwrbus_ram_pd_C );
  logic rst_zy;
  integer i;
  input INSTR_IN_ZY;
  logic [4:0] _000_;
  logic [4:0] _000__T ;
  logic [4:0] _000__R ;
  logic [4:0] _000__C ;
  logic [4:0] _000__X ;
  logic [13:0] _000__S ;
  logic _001_;
  logic _001__T ;
  logic _001__R ;
  logic _001__C ;
  logic _001__X ;
  logic [13:0] _001__S ;
  logic [4:0] _002_;
  logic [4:0] _002__T ;
  logic [4:0] _002__R ;
  logic [4:0] _002__C ;
  logic [4:0] _002__X ;
  logic [13:0] _002__S ;
  logic [4:0] _003_;
  logic [4:0] _003__T ;
  logic [4:0] _003__R ;
  logic [4:0] _003__C ;
  logic [4:0] _003__X ;
  logic [13:0] _003__S ;
  logic [4:0] _004_;
  logic [4:0] _004__T ;
  logic [4:0] _004__R ;
  logic [4:0] _004__C ;
  logic [4:0] _004__X ;
  logic [13:0] _004__S ;
  logic [4:0] _005_;
  logic [4:0] _005__T ;
  logic [4:0] _005__R ;
  logic [4:0] _005__C ;
  logic [4:0] _005__X ;
  logic [13:0] _005__S ;
  logic [4:0] _006_;
  logic [4:0] _006__T ;
  logic [4:0] _006__R ;
  logic [4:0] _006__C ;
  logic [4:0] _006__X ;
  logic [13:0] _006__S ;
  logic [4:0] _007_;
  logic [4:0] _007__T ;
  logic [4:0] _007__R ;
  logic [4:0] _007__C ;
  logic [4:0] _007__X ;
  logic [13:0] _007__S ;
  logic _008_;
  logic _008__T ;
  logic _008__R ;
  logic _008__C ;
  logic _008__X ;
  logic [13:0] _008__S ;
  logic _009_;
  logic _009__T ;
  logic _009__R ;
  logic _009__C ;
  logic _009__X ;
  logic [13:0] _009__S ;
  logic _010_;
  logic _010__T ;
  logic _010__R ;
  logic _010__C ;
  logic _010__X ;
  logic [13:0] _010__S ;
  logic _011_;
  logic _011__T ;
  logic _011__R ;
  logic _011__C ;
  logic _011__X ;
  logic [13:0] _011__S ;
  logic _012_;
  logic _012__T ;
  logic _012__R ;
  logic _012__C ;
  logic _012__X ;
  logic [13:0] _012__S ;
  logic _013_;
  logic _013__T ;
  logic _013__R ;
  logic _013__C ;
  logic _013__X ;
  logic [13:0] _013__S ;
  logic _014_;
  logic _014__T ;
  logic _014__R ;
  logic _014__C ;
  logic _014__X ;
  logic [13:0] _014__S ;
  logic _015_;
  logic _015__T ;
  logic _015__R ;
  logic _015__C ;
  logic _015__X ;
  logic [13:0] _015__S ;
  logic _016_;
  logic _016__T ;
  logic _016__R ;
  logic _016__C ;
  logic _016__X ;
  logic [13:0] _016__S ;
  logic _017_;
  logic _017__T ;
  logic _017__R ;
  logic _017__C ;
  logic _017__X ;
  logic [13:0] _017__S ;
  logic _018_;
  logic _018__T ;
  logic _018__R ;
  logic _018__C ;
  logic _018__X ;
  logic [13:0] _018__S ;
  logic _019_;
  logic _019__T ;
  logic _019__R ;
  logic _019__C ;
  logic _019__X ;
  logic [13:0] _019__S ;
  logic _020_;
  logic _020__T ;
  logic _020__R ;
  logic _020__C ;
  logic _020__X ;
  logic [13:0] _020__S ;
  logic _021_;
  logic _021__T ;
  logic _021__R ;
  logic _021__C ;
  logic _021__X ;
  logic [13:0] _021__S ;
  logic _022_;
  logic _022__T ;
  logic _022__R ;
  logic _022__C ;
  logic _022__X ;
  logic [13:0] _022__S ;
  logic _023_;
  logic _023__T ;
  logic _023__R ;
  logic _023__C ;
  logic _023__X ;
  logic [13:0] _023__S ;
  logic _024_;
  logic _024__T ;
  logic _024__R ;
  logic _024__C ;
  logic _024__X ;
  logic [13:0] _024__S ;
  logic _025_;
  logic _025__T ;
  logic _025__R ;
  logic _025__C ;
  logic _025__X ;
  logic [13:0] _025__S ;
  logic _026_;
  logic _026__T ;
  logic _026__R ;
  logic _026__C ;
  logic _026__X ;
  logic [13:0] _026__S ;
  logic _027_;
  logic _027__T ;
  logic _027__R ;
  logic _027__C ;
  logic _027__X ;
  logic [13:0] _027__S ;
  logic _028_;
  logic _028__T ;
  logic _028__R ;
  logic _028__C ;
  logic _028__X ;
  logic [13:0] _028__S ;
  logic _029_;
  logic _029__T ;
  logic _029__R ;
  logic _029__C ;
  logic _029__X ;
  logic [13:0] _029__S ;
  logic _030_;
  logic _030__T ;
  logic _030__R ;
  logic _030__C ;
  logic _030__X ;
  logic [13:0] _030__S ;
  logic _031_;
  logic _031__T ;
  logic _031__R ;
  logic _031__C ;
  logic _031__X ;
  logic [13:0] _031__S ;
  logic _032_;
  logic _032__T ;
  logic _032__R ;
  logic _032__C ;
  logic _032__X ;
  logic [13:0] _032__S ;
  logic _033_;
  logic _033__T ;
  logic _033__R ;
  logic _033__C ;
  logic _033__X ;
  logic [13:0] _033__S ;
  logic [4:0] _034_;
  logic [4:0] _034__T ;
  logic [4:0] _034__R ;
  logic [4:0] _034__C ;
  logic [4:0] _034__X ;
  logic [13:0] _034__S ;
  logic [4:0] _035_;
  logic [4:0] _035__T ;
  logic [4:0] _035__R ;
  logic [4:0] _035__C ;
  logic [4:0] _035__X ;
  logic [13:0] _035__S ;
  logic [4:0] csb_fifo_rd_adr;
  logic [4:0]  csb_fifo_rd_adr_T ;
  logic [4:0]  csb_fifo_rd_adr_PREV_VAL1 ;
  logic [4:0]  csb_fifo_rd_adr_PREV_VAL2 ;
  logic [4:0]  csb_fifo_rd_adr_R ;
  logic [4:0]  csb_fifo_rd_adr_X ;
  logic [4:0]  csb_fifo_rd_adr_C ;
  logic [13:0] csb_fifo_rd_adr_S ;
  logic csb_fifo_rd_adr_t_flag ;
  logic csb_fifo_rd_adr_r_flag ;
  assign csb_fifo_rd_adr_S = 741 ;
  logic [4:0] csb_fifo_rd_adr_p;
  logic [4:0] csb_fifo_rd_adr_p_T ;
  logic [4:0] csb_fifo_rd_adr_p_R ;
  logic [4:0] csb_fifo_rd_adr_p_C ;
  logic [4:0] csb_fifo_rd_adr_p_X ;
  logic [13:0] csb_fifo_rd_adr_p_S ;
  logic [4:0] csb_fifo_rd_count_p;
  logic [4:0]  csb_fifo_rd_count_p_T ;
  logic [4:0]  csb_fifo_rd_count_p_PREV_VAL1 ;
  logic [4:0]  csb_fifo_rd_count_p_PREV_VAL2 ;
  logic [4:0]  csb_fifo_rd_count_p_R ;
  logic [4:0]  csb_fifo_rd_count_p_X ;
  logic [4:0]  csb_fifo_rd_count_p_C ;
  logic [13:0] csb_fifo_rd_count_p_S ;
  logic csb_fifo_rd_count_p_t_flag ;
  logic csb_fifo_rd_count_p_r_flag ;
  assign csb_fifo_rd_count_p_S = 742 ;
  output [288:0] csb_fifo_rd_pd;
  logic [288:0] csb_fifo_rd_pd ;
  output [288:0] csb_fifo_rd_pd_T ;
  logic [288:0] csb_fifo_rd_pd_T ;
  logic [288:0] csb_fifo_rd_pd_R ;
  logic [288:0] csb_fifo_rd_pd_C ;
  logic [288:0] csb_fifo_rd_pd_X ;
  logic [13:0] csb_fifo_rd_pd_S ;
  input [288:0] csb_fifo_rd_pd_R0 ;
  input [288:0] csb_fifo_rd_pd_C0 ;
  input [288:0] csb_fifo_rd_pd_X0 ;
  output [13:0] csb_fifo_rd_pd_S ;
  logic [288:0] csb_fifo_rd_pd_p;
  logic [288:0] csb_fifo_rd_pd_p_T ;
  logic [288:0] csb_fifo_rd_pd_p_R ;
  logic [288:0] csb_fifo_rd_pd_p_C ;
  logic [288:0] csb_fifo_rd_pd_p_X ;
  logic [13:0] csb_fifo_rd_pd_p_S ;
  input csb_fifo_rd_prdy;
  input csb_fifo_rd_prdy_T ;
  input [13:0] csb_fifo_rd_prdy_S ;
  output csb_fifo_rd_prdy_R ;
  output csb_fifo_rd_prdy_X ;
  output csb_fifo_rd_prdy_C ;
  output csb_fifo_rd_pvld;
  logic csb_fifo_rd_pvld ;
  output csb_fifo_rd_pvld_T ;
  logic csb_fifo_rd_pvld_T ;
  logic csb_fifo_rd_pvld_R ;
  logic csb_fifo_rd_pvld_C ;
  logic csb_fifo_rd_pvld_X ;
  logic [13:0] csb_fifo_rd_pvld_S ;
  input csb_fifo_rd_pvld_R0 ;
  input csb_fifo_rd_pvld_C0 ;
  input csb_fifo_rd_pvld_X0 ;
  output [13:0] csb_fifo_rd_pvld_S ;
  logic csb_fifo_rd_pvld_int;
  logic  csb_fifo_rd_pvld_int_T ;
  logic  csb_fifo_rd_pvld_int_PREV_VAL1 ;
  logic  csb_fifo_rd_pvld_int_PREV_VAL2 ;
  logic  csb_fifo_rd_pvld_int_R ;
  logic  csb_fifo_rd_pvld_int_X ;
  logic  csb_fifo_rd_pvld_int_C ;
  logic [13:0] csb_fifo_rd_pvld_int_S ;
  logic csb_fifo_rd_pvld_int_t_flag ;
  logic csb_fifo_rd_pvld_int_r_flag ;
  assign csb_fifo_rd_pvld_int_S = 743 ;
  logic csb_fifo_rd_pvld_p;
  logic  csb_fifo_rd_pvld_p_T ;
  logic  csb_fifo_rd_pvld_p_PREV_VAL1 ;
  logic  csb_fifo_rd_pvld_p_PREV_VAL2 ;
  logic  csb_fifo_rd_pvld_p_R ;
  logic  csb_fifo_rd_pvld_p_X ;
  logic  csb_fifo_rd_pvld_p_C ;
  logic [13:0] csb_fifo_rd_pvld_p_S ;
  logic csb_fifo_rd_pvld_p_t_flag ;
  logic csb_fifo_rd_pvld_p_r_flag ;
  assign csb_fifo_rd_pvld_p_S = 744 ;
  logic [4:0] csb_fifo_wr_adr;
  logic [4:0]  csb_fifo_wr_adr_T ;
  logic [4:0]  csb_fifo_wr_adr_PREV_VAL1 ;
  logic [4:0]  csb_fifo_wr_adr_PREV_VAL2 ;
  logic [4:0]  csb_fifo_wr_adr_R ;
  logic [4:0]  csb_fifo_wr_adr_X ;
  logic [4:0]  csb_fifo_wr_adr_C ;
  logic [13:0] csb_fifo_wr_adr_S ;
  logic csb_fifo_wr_adr_t_flag ;
  logic csb_fifo_wr_adr_r_flag ;
  assign csb_fifo_wr_adr_S = 745 ;
  logic csb_fifo_wr_busy_int;
  logic  csb_fifo_wr_busy_int_T ;
  logic  csb_fifo_wr_busy_int_PREV_VAL1 ;
  logic  csb_fifo_wr_busy_int_PREV_VAL2 ;
  logic  csb_fifo_wr_busy_int_R ;
  logic  csb_fifo_wr_busy_int_X ;
  logic  csb_fifo_wr_busy_int_C ;
  logic [13:0] csb_fifo_wr_busy_int_S ;
  logic csb_fifo_wr_busy_int_t_flag ;
  logic csb_fifo_wr_busy_int_r_flag ;
  assign csb_fifo_wr_busy_int_S = 746 ;
  logic csb_fifo_wr_busy_next;
  logic csb_fifo_wr_busy_next_T ;
  logic csb_fifo_wr_busy_next_R ;
  logic csb_fifo_wr_busy_next_C ;
  logic csb_fifo_wr_busy_next_X ;
  logic [13:0] csb_fifo_wr_busy_next_S ;
  output [4:0] csb_fifo_wr_count;
  logic [4:0] csb_fifo_wr_count ;
  output [4:0] csb_fifo_wr_count_T ;
  logic [4:0] csb_fifo_wr_count_T ;
  logic [4:0] csb_fifo_wr_count_R ;
  logic [4:0] csb_fifo_wr_count_C ;
  logic [4:0] csb_fifo_wr_count_X ;
  logic [13:0] csb_fifo_wr_count_S ;
  input [4:0] csb_fifo_wr_count_R0 ;
  input [4:0] csb_fifo_wr_count_C0 ;
  input [4:0] csb_fifo_wr_count_X0 ;
  output [13:0] csb_fifo_wr_count_S ;
  logic [4:0] csb_fifo_wr_count;
  logic [4:0]  csb_fifo_wr_count_T ;
  logic [4:0]  csb_fifo_wr_count_PREV_VAL1 ;
  logic [4:0]  csb_fifo_wr_count_PREV_VAL2 ;
  logic csb_fifo_wr_count_t_flag ;
  logic csb_fifo_wr_count_r_flag ;
  assign csb_fifo_wr_count_S = 747 ;
  output csb_fifo_wr_idle;
  logic csb_fifo_wr_idle ;
  output csb_fifo_wr_idle_T ;
  logic csb_fifo_wr_idle_T ;
  logic csb_fifo_wr_idle_R ;
  logic csb_fifo_wr_idle_C ;
  logic csb_fifo_wr_idle_X ;
  logic [13:0] csb_fifo_wr_idle_S ;
  input csb_fifo_wr_idle_R0 ;
  input csb_fifo_wr_idle_C0 ;
  input csb_fifo_wr_idle_X0 ;
  output [13:0] csb_fifo_wr_idle_S ;
  logic csb_fifo_wr_idle_d0;
  logic csb_fifo_wr_idle_d0_T ;
  logic csb_fifo_wr_idle_d0_R ;
  logic csb_fifo_wr_idle_d0_C ;
  logic csb_fifo_wr_idle_d0_X ;
  logic [13:0] csb_fifo_wr_idle_d0_S ;
  input [288:0] csb_fifo_wr_pd;
  input [288:0] csb_fifo_wr_pd_T ;
  input [13:0] csb_fifo_wr_pd_S ;
  output [288:0] csb_fifo_wr_pd_R ;
  output [288:0] csb_fifo_wr_pd_X ;
  output [288:0] csb_fifo_wr_pd_C ;
  output csb_fifo_wr_prdy;
  logic csb_fifo_wr_prdy ;
  output csb_fifo_wr_prdy_T ;
  logic csb_fifo_wr_prdy_T ;
  logic csb_fifo_wr_prdy_R ;
  logic csb_fifo_wr_prdy_C ;
  logic csb_fifo_wr_prdy_X ;
  logic [13:0] csb_fifo_wr_prdy_S ;
  input csb_fifo_wr_prdy_R0 ;
  input csb_fifo_wr_prdy_C0 ;
  input csb_fifo_wr_prdy_X0 ;
  output [13:0] csb_fifo_wr_prdy_S ;
  input csb_fifo_wr_pvld;
  input csb_fifo_wr_pvld_T ;
  input [13:0] csb_fifo_wr_pvld_S ;
  output csb_fifo_wr_pvld_R ;
  output csb_fifo_wr_pvld_X ;
  output csb_fifo_wr_pvld_C ;
  input nvdla_core_clk;
  input nvdla_core_clk_T ;
  input [13:0] nvdla_core_clk_S ;
  output nvdla_core_clk_R ;
  output nvdla_core_clk_X ;
  output nvdla_core_clk_C ;
  logic nvdla_core_clk_mgated;
  logic nvdla_core_clk_mgated_T ;
  logic nvdla_core_clk_mgated_R ;
  logic nvdla_core_clk_mgated_C ;
  logic nvdla_core_clk_mgated_X ;
  logic [13:0] nvdla_core_clk_mgated_S ;
  logic nvdla_core_clk_mgated_enable;
  logic nvdla_core_clk_mgated_enable_T ;
  logic nvdla_core_clk_mgated_enable_R ;
  logic nvdla_core_clk_mgated_enable_C ;
  logic nvdla_core_clk_mgated_enable_X ;
  logic [13:0] nvdla_core_clk_mgated_enable_S ;
  input nvdla_core_rstn;
  input nvdla_core_rstn_T ;
  input [13:0] nvdla_core_rstn_S ;
  output nvdla_core_rstn_R ;
  output nvdla_core_rstn_X ;
  output nvdla_core_rstn_C ;
  logic ore;
  logic ore_T ;
  logic ore_R ;
  logic ore_C ;
  logic ore_X ;
  logic [13:0] ore_S ;
  input [31:0] pwrbus_ram_pd;
  input [31:0] pwrbus_ram_pd_T ;
  input [13:0] pwrbus_ram_pd_S ;
  output [31:0] pwrbus_ram_pd_R ;
  output [31:0] pwrbus_ram_pd_X ;
  output [31:0] pwrbus_ram_pd_C ;
  logic [4:0] rd_adr_next;
  logic [4:0] rd_adr_next_T ;
  logic [4:0] rd_adr_next_R ;
  logic [4:0] rd_adr_next_C ;
  logic [4:0] rd_adr_next_X ;
  logic [13:0] rd_adr_next_S ;
  logic [4:0] rd_count_p_next;
  logic [4:0] rd_count_p_next_T ;
  logic [4:0] rd_count_p_next_R ;
  logic [4:0] rd_count_p_next_C ;
  logic [4:0] rd_count_p_next_X ;
  logic [13:0] rd_count_p_next_S ;
  logic [4:0] rd_count_p_next_no_rd_popping;
  logic [4:0] rd_count_p_next_no_rd_popping_T ;
  logic [4:0] rd_count_p_next_no_rd_popping_R ;
  logic [4:0] rd_count_p_next_no_rd_popping_C ;
  logic [4:0] rd_count_p_next_no_rd_popping_X ;
  logic [13:0] rd_count_p_next_no_rd_popping_S ;
  logic rd_count_p_next_no_rd_popping_not_0;
  logic rd_count_p_next_no_rd_popping_not_0_T ;
  logic rd_count_p_next_no_rd_popping_not_0_R ;
  logic rd_count_p_next_no_rd_popping_not_0_C ;
  logic rd_count_p_next_no_rd_popping_not_0_X ;
  logic [13:0] rd_count_p_next_no_rd_popping_not_0_S ;
  logic rd_count_p_next_not_0;
  logic rd_count_p_next_not_0_T ;
  logic rd_count_p_next_not_0_R ;
  logic rd_count_p_next_not_0_C ;
  logic rd_count_p_next_not_0_X ;
  logic [13:0] rd_count_p_next_not_0_S ;
  logic [4:0] rd_count_p_next_rd_popping;
  logic [4:0] rd_count_p_next_rd_popping_T ;
  logic [4:0] rd_count_p_next_rd_popping_R ;
  logic [4:0] rd_count_p_next_rd_popping_C ;
  logic [4:0] rd_count_p_next_rd_popping_X ;
  logic [13:0] rd_count_p_next_rd_popping_S ;
  logic rd_count_p_next_rd_popping_not_0;
  logic rd_count_p_next_rd_popping_not_0_T ;
  logic rd_count_p_next_rd_popping_not_0_R ;
  logic rd_count_p_next_rd_popping_not_0_C ;
  logic rd_count_p_next_rd_popping_not_0_X ;
  logic [13:0] rd_count_p_next_rd_popping_not_0_S ;
  logic rd_enable;
  logic rd_enable_T ;
  logic rd_enable_R ;
  logic rd_enable_C ;
  logic rd_enable_X ;
  logic [13:0] rd_enable_S ;
  logic rd_idle;
  logic rd_idle_T ;
  logic rd_idle_R ;
  logic rd_idle_C ;
  logic rd_idle_X ;
  logic [13:0] rd_idle_S ;
  logic rd_popping;
  logic rd_popping_T ;
  logic rd_popping_R ;
  logic rd_popping_C ;
  logic rd_popping_X ;
  logic [13:0] rd_popping_S ;
  logic rd_pushing;
  logic  rd_pushing_T ;
  logic  rd_pushing_PREV_VAL1 ;
  logic  rd_pushing_PREV_VAL2 ;
  logic  rd_pushing_R ;
  logic  rd_pushing_X ;
  logic  rd_pushing_C ;
  logic [13:0] rd_pushing_S ;
  logic rd_pushing_t_flag ;
  logic rd_pushing_r_flag ;
  assign rd_pushing_S = 748 ;
  logic rd_req_next;
  logic rd_req_next_T ;
  logic rd_req_next_R ;
  logic rd_req_next_C ;
  logic rd_req_next_X ;
  logic [13:0] rd_req_next_S ;
  logic [4:0] wr_adr_next;
  logic [4:0] wr_adr_next_T ;
  logic [4:0] wr_adr_next_R ;
  logic [4:0] wr_adr_next_C ;
  logic [4:0] wr_adr_next_X ;
  logic [13:0] wr_adr_next_S ;
  logic [4:0] wr_count_next;
  logic [4:0] wr_count_next_T ;
  logic [4:0] wr_count_next_R ;
  logic [4:0] wr_count_next_C ;
  logic [4:0] wr_count_next_X ;
  logic [13:0] wr_count_next_S ;
  logic wr_count_next_is_20;
  logic wr_count_next_is_20_T ;
  logic wr_count_next_is_20_R ;
  logic wr_count_next_is_20_C ;
  logic wr_count_next_is_20_X ;
  logic [13:0] wr_count_next_is_20_S ;
  logic [4:0] wr_count_next_no_wr_popping;
  logic [4:0] wr_count_next_no_wr_popping_T ;
  logic [4:0] wr_count_next_no_wr_popping_R ;
  logic [4:0] wr_count_next_no_wr_popping_C ;
  logic [4:0] wr_count_next_no_wr_popping_X ;
  logic [13:0] wr_count_next_no_wr_popping_S ;
  logic wr_count_next_no_wr_popping_is_20;
  logic wr_count_next_no_wr_popping_is_20_T ;
  logic wr_count_next_no_wr_popping_is_20_R ;
  logic wr_count_next_no_wr_popping_is_20_C ;
  logic wr_count_next_no_wr_popping_is_20_X ;
  logic [13:0] wr_count_next_no_wr_popping_is_20_S ;
  logic [4:0] wr_count_next_wr_popping;
  logic [4:0] wr_count_next_wr_popping_T ;
  logic [4:0] wr_count_next_wr_popping_R ;
  logic [4:0] wr_count_next_wr_popping_C ;
  logic [4:0] wr_count_next_wr_popping_X ;
  logic [13:0] wr_count_next_wr_popping_S ;
  logic [4:0] wr_limit_muxed;
  logic [4:0] wr_limit_muxed_T ;
  logic [4:0] wr_limit_muxed_R ;
  logic [4:0] wr_limit_muxed_C ;
  logic [4:0] wr_limit_muxed_X ;
  logic [13:0] wr_limit_muxed_S ;
  logic [4:0] wr_limit_reg;
  logic [4:0] wr_limit_reg_T ;
  logic [4:0] wr_limit_reg_R ;
  logic [4:0] wr_limit_reg_C ;
  logic [4:0] wr_limit_reg_X ;
  logic [13:0] wr_limit_reg_S ;
  logic wr_popping;
  logic  wr_popping_T ;
  logic  wr_popping_PREV_VAL1 ;
  logic  wr_popping_PREV_VAL2 ;
  logic  wr_popping_R ;
  logic  wr_popping_X ;
  logic  wr_popping_C ;
  logic [13:0] wr_popping_S ;
  logic wr_popping_t_flag ;
  logic wr_popping_r_flag ;
  assign wr_popping_S = 749 ;
  logic wr_pushing;
  logic wr_pushing_T ;
  logic wr_pushing_R ;
  logic wr_pushing_C ;
  logic wr_pushing_X ;
  logic [13:0] wr_pushing_S ;
  logic wr_reserving;
  logic wr_reserving_T ;
  logic wr_reserving_R ;
  logic wr_reserving_C ;
  logic wr_reserving_X ;
  logic [13:0] wr_reserving_S ;
  assign _004_ = csb_fifo_wr_adr + 1'b1;
  assign _004__S = 0 ;
  logic [4:0] csb_fifo_wr_adr_C0 ;
  logic [4:0] csb_fifo_wr_adr_R0 ;
  logic [4:0] csb_fifo_wr_adr_X0 ;
  assign _004__T = csb_fifo_wr_adr_T ;
  assign csb_fifo_wr_adr_C0 = _004__C ;
  assign csb_fifo_wr_adr_R0 = _004__R ;
  assign csb_fifo_wr_adr_X0 = _004__X ;
  assign _005_ = csb_fifo_rd_adr + 1'b1;
  assign _005__S = 0 ;
  logic [4:0] csb_fifo_rd_adr_C0 ;
  logic [4:0] csb_fifo_rd_adr_R0 ;
  logic [4:0] csb_fifo_rd_adr_X0 ;
  assign _005__T = csb_fifo_rd_adr_T ;
  assign csb_fifo_rd_adr_C0 = _005__C ;
  assign csb_fifo_rd_adr_R0 = _005__R ;
  assign csb_fifo_rd_adr_X0 = _005__X ;
  assign _006_ = csb_fifo_rd_count_p + 1'b1;
  assign _006__S = 0 ;
  logic [4:0] csb_fifo_rd_count_p_C0 ;
  logic [4:0] csb_fifo_rd_count_p_R0 ;
  logic [4:0] csb_fifo_rd_count_p_X0 ;
  assign _006__T = csb_fifo_rd_count_p_T ;
  assign csb_fifo_rd_count_p_C0 = _006__C ;
  assign csb_fifo_rd_count_p_R0 = _006__R ;
  assign csb_fifo_rd_count_p_X0 = _006__X ;
  assign _007_ = csb_fifo_wr_count + 1'b1;
  assign _007__S = 0 ;
  logic [4:0] csb_fifo_wr_count_C1 ;
  logic [4:0] csb_fifo_wr_count_R1 ;
  logic [4:0] csb_fifo_wr_count_X1 ;
  assign _007__T = csb_fifo_wr_count_T ;
  assign csb_fifo_wr_count_C1 = _007__C ;
  assign csb_fifo_wr_count_R1 = _007__R ;
  assign csb_fifo_wr_count_X1 = _007__X ;
  assign _008_ = csb_fifo_wr_adr == 5'b10011;
  assign _008__S = 0 ;
  logic [4:0] csb_fifo_wr_adr_C1 ;
  logic [4:0] csb_fifo_wr_adr_R1 ;
  logic [4:0] csb_fifo_wr_adr_X1 ;
  assign _008__T = | csb_fifo_wr_adr_T ;
  assign csb_fifo_wr_adr_C1 = { 5{ _008__C }} ;
  assign csb_fifo_wr_adr_R1 = { 5{ _008__R }} ;
  assign csb_fifo_wr_adr_X1 = { 5{ _008__X }} ;
  assign _009_ = csb_fifo_rd_adr == 5'b10011;
  assign _009__S = 0 ;
  logic [4:0] csb_fifo_rd_adr_C1 ;
  logic [4:0] csb_fifo_rd_adr_R1 ;
  logic [4:0] csb_fifo_rd_adr_X1 ;
  assign _009__T = | csb_fifo_rd_adr_T ;
  assign csb_fifo_rd_adr_C1 = { 5{ _009__C }} ;
  assign csb_fifo_rd_adr_R1 = { 5{ _009__R }} ;
  assign csb_fifo_rd_adr_X1 = { 5{ _009__X }} ;
  assign _010_ = ! csb_fifo_rd_count_p;
  logic [4:0] csb_fifo_rd_count_p_C1 ;
  logic [4:0] csb_fifo_rd_count_p_R1 ;
  logic [4:0] csb_fifo_rd_count_p_X1 ;
  assign _010__T = | csb_fifo_rd_count_p_T ;
  assign csb_fifo_rd_count_p_C1 = { 5{ _010__C }} ;
  assign csb_fifo_rd_count_p_X1 = { 5{ _010__X }} ;
  assign csb_fifo_rd_count_p_R1 = { 5{ _010__R }} ;
  assign _010__S = 0 ;
  assign _011_ = ! csb_fifo_wr_count;
  logic [4:0] csb_fifo_wr_count_C2 ;
  logic [4:0] csb_fifo_wr_count_R2 ;
  logic [4:0] csb_fifo_wr_count_X2 ;
  assign _011__T = | csb_fifo_wr_count_T ;
  assign csb_fifo_wr_count_C2 = { 5{ _011__C }} ;
  assign csb_fifo_wr_count_X2 = { 5{ _011__X }} ;
  assign csb_fifo_wr_count_R2 = { 5{ _011__R }} ;
  assign _011__S = 0 ;
  assign wr_count_next_no_wr_popping_is_20 = wr_count_next_no_wr_popping == 5'b10100;
  assign wr_count_next_no_wr_popping_is_20_S = 0 ;
  logic [4:0] wr_count_next_no_wr_popping_C0 ;
  logic [4:0] wr_count_next_no_wr_popping_R0 ;
  logic [4:0] wr_count_next_no_wr_popping_X0 ;
  assign wr_count_next_no_wr_popping_is_20_T = | wr_count_next_no_wr_popping_T ;
  assign wr_count_next_no_wr_popping_C0 = { 5{ wr_count_next_no_wr_popping_is_20_C }} ;
  assign wr_count_next_no_wr_popping_R0 = { 5{ wr_count_next_no_wr_popping_is_20_R }} ;
  assign wr_count_next_no_wr_popping_X0 = { 5{ wr_count_next_no_wr_popping_is_20_X }} ;
  assign _012_ = csb_fifo_rd_pvld_int && _017_;
  assign _012__S = 0 ;
  logic [0:0] csb_fifo_rd_pvld_int_C0 ;
  logic [0:0] csb_fifo_rd_pvld_int_R0 ;
  logic [0:0] csb_fifo_rd_pvld_int_X0 ;
  logic [0:0] _017__C0 ;
  logic [0:0] _017__R0 ;
  logic [0:0] _017__X0 ;
  assign _012__T = csb_fifo_rd_pvld_int_T | _017__T ;
  assign csb_fifo_rd_pvld_int_C0 = _012__C ;
  assign csb_fifo_rd_pvld_int_X0 = _012__X ;
  assign _017__C0 = _012__C ;
  assign _017__X0 = _012__X ;
  assign csb_fifo_rd_pvld_int_R0 = ( _012__R | _012__C & _017__T ) & { 1{ _017_ != 0 }} ;
  assign _017__R0 = ( _012__R | _012__C & csb_fifo_rd_pvld_int_T ) & { 1{ csb_fifo_rd_pvld_int != 0 }} ;
  assign ore = csb_fifo_rd_pvld_p && _018_;
  assign ore_S = 0 ;
  logic [0:0] csb_fifo_rd_pvld_p_C0 ;
  logic [0:0] csb_fifo_rd_pvld_p_R0 ;
  logic [0:0] csb_fifo_rd_pvld_p_X0 ;
  logic [0:0] _018__C0 ;
  logic [0:0] _018__R0 ;
  logic [0:0] _018__X0 ;
  assign ore_T = csb_fifo_rd_pvld_p_T | _018__T ;
  assign csb_fifo_rd_pvld_p_C0 = ore_C ;
  assign csb_fifo_rd_pvld_p_X0 = ore_X ;
  assign _018__C0 = ore_C ;
  assign _018__X0 = ore_X ;
  assign csb_fifo_rd_pvld_p_R0 = ( ore_R | ore_C & _018__T ) & { 1{ _018_ != 0 }} ;
  assign _018__R0 = ( ore_R | ore_C & csb_fifo_rd_pvld_p_T ) & { 1{ csb_fifo_rd_pvld_p != 0 }} ;
  assign rd_enable = rd_count_p_next_not_0 && _023_;
  assign rd_enable_S = 0 ;
  logic [0:0] rd_count_p_next_not_0_C0 ;
  logic [0:0] rd_count_p_next_not_0_R0 ;
  logic [0:0] rd_count_p_next_not_0_X0 ;
  logic [0:0] _023__C0 ;
  logic [0:0] _023__R0 ;
  logic [0:0] _023__X0 ;
  assign rd_enable_T = rd_count_p_next_not_0_T | _023__T ;
  assign rd_count_p_next_not_0_C0 = rd_enable_C ;
  assign rd_count_p_next_not_0_X0 = rd_enable_X ;
  assign _023__C0 = rd_enable_C ;
  assign _023__X0 = rd_enable_X ;
  assign rd_count_p_next_not_0_R0 = ( rd_enable_R | rd_enable_C & _023__T ) & { 1{ _023_ != 0 }} ;
  assign _023__R0 = ( rd_enable_R | rd_enable_C & rd_count_p_next_not_0_T ) & { 1{ rd_count_p_next_not_0 != 0 }} ;
  assign _013_ = _019_ && _020_;
  assign _013__S = 0 ;
  logic [0:0] _019__C0 ;
  logic [0:0] _019__R0 ;
  logic [0:0] _019__X0 ;
  logic [0:0] _020__C0 ;
  logic [0:0] _020__R0 ;
  logic [0:0] _020__X0 ;
  assign _013__T = _019__T | _020__T ;
  assign _019__C0 = _013__C ;
  assign _019__X0 = _013__X ;
  assign _020__C0 = _013__C ;
  assign _020__X0 = _013__X ;
  assign _019__R0 = ( _013__R | _013__C & _020__T ) & { 1{ _020_ != 0 }} ;
  assign _020__R0 = ( _013__R | _013__C & _019__T ) & { 1{ _019_ != 0 }} ;
  assign rd_idle = _013_ && _010_;
  assign rd_idle_S = 0 ;
  logic [0:0] _013__C0 ;
  logic [0:0] _013__R0 ;
  logic [0:0] _013__X0 ;
  logic [0:0] _010__C0 ;
  logic [0:0] _010__R0 ;
  logic [0:0] _010__X0 ;
  assign rd_idle_T = _013__T | _010__T ;
  assign _013__C0 = rd_idle_C ;
  assign _013__X0 = rd_idle_X ;
  assign _010__C0 = rd_idle_C ;
  assign _010__X0 = rd_idle_X ;
  assign _013__R0 = ( rd_idle_R | rd_idle_C & _010__T ) & { 1{ _010_ != 0 }} ;
  assign _010__R0 = ( rd_idle_R | rd_idle_C & _013__T ) & { 1{ _013_ != 0 }} ;
  assign _014_ = _021_ && rd_idle;
  assign _014__S = 0 ;
  logic [0:0] _021__C0 ;
  logic [0:0] _021__R0 ;
  logic [0:0] _021__X0 ;
  logic [0:0] rd_idle_C0 ;
  logic [0:0] rd_idle_R0 ;
  logic [0:0] rd_idle_X0 ;
  assign _014__T = _021__T | rd_idle_T ;
  assign _021__C0 = _014__C ;
  assign _021__X0 = _014__X ;
  assign rd_idle_C0 = _014__C ;
  assign rd_idle_X0 = _014__X ;
  assign _021__R0 = ( _014__R | _014__C & rd_idle_T ) & { 1{ rd_idle != 0 }} ;
  assign rd_idle_R0 = ( _014__R | _014__C & _021__T ) & { 1{ _021_ != 0 }} ;
  assign _015_ = _014_ && _022_;
  assign _015__S = 0 ;
  logic [0:0] _014__C0 ;
  logic [0:0] _014__R0 ;
  logic [0:0] _014__X0 ;
  logic [0:0] _022__C0 ;
  logic [0:0] _022__R0 ;
  logic [0:0] _022__X0 ;
  assign _015__T = _014__T | _022__T ;
  assign _014__C0 = _015__C ;
  assign _014__X0 = _015__X ;
  assign _022__C0 = _015__C ;
  assign _022__X0 = _015__X ;
  assign _014__R0 = ( _015__R | _015__C & _022__T ) & { 1{ _022_ != 0 }} ;
  assign _022__R0 = ( _015__R | _015__C & _014__T ) & { 1{ _014_ != 0 }} ;
  assign csb_fifo_wr_idle = _015_ && _011_;
  assign csb_fifo_wr_idle_S = 0 ;
  logic [0:0] _015__C0 ;
  logic [0:0] _015__R0 ;
  logic [0:0] _015__X0 ;
  logic [0:0] _011__C0 ;
  logic [0:0] _011__R0 ;
  logic [0:0] _011__X0 ;
  assign csb_fifo_wr_idle_T = _015__T | _011__T ;
  assign _015__C0 = csb_fifo_wr_idle_C ;
  assign _015__X0 = csb_fifo_wr_idle_X ;
  assign _011__C0 = csb_fifo_wr_idle_C ;
  assign _011__X0 = csb_fifo_wr_idle_X ;
  assign _015__R0 = ( csb_fifo_wr_idle_R | csb_fifo_wr_idle_C & _011__T ) & { 1{ _011_ != 0 }} ;
  assign _011__R0 = ( csb_fifo_wr_idle_R | csb_fifo_wr_idle_C & _015__T ) & { 1{ _015_ != 0 }} ;
  assign wr_pushing = csb_fifo_wr_pvld && csb_fifo_wr_prdy;
  assign wr_pushing_S = 0 ;
  logic [0:0] csb_fifo_wr_pvld_C0 ;
  logic [0:0] csb_fifo_wr_pvld_R0 ;
  logic [0:0] csb_fifo_wr_pvld_X0 ;
  logic [0:0] csb_fifo_wr_prdy_C1 ;
  logic [0:0] csb_fifo_wr_prdy_R1 ;
  logic [0:0] csb_fifo_wr_prdy_X1 ;
  assign wr_pushing_T = csb_fifo_wr_pvld_T | csb_fifo_wr_prdy_T ;
  assign csb_fifo_wr_pvld_C0 = wr_pushing_C ;
  assign csb_fifo_wr_pvld_X0 = wr_pushing_X ;
  assign csb_fifo_wr_prdy_C1 = wr_pushing_C ;
  assign csb_fifo_wr_prdy_X1 = wr_pushing_X ;
  assign csb_fifo_wr_pvld_R0 = ( wr_pushing_R | wr_pushing_C & csb_fifo_wr_prdy_T ) & { 1{ csb_fifo_wr_prdy != 0 }} ;
  assign csb_fifo_wr_prdy_R1 = ( wr_pushing_R | wr_pushing_C & csb_fifo_wr_pvld_T ) & { 1{ csb_fifo_wr_pvld != 0 }} ;
  assign _016_ = csb_fifo_rd_pvld_int && csb_fifo_rd_prdy;
  assign _016__S = 0 ;
  logic [0:0] csb_fifo_rd_pvld_int_C1 ;
  logic [0:0] csb_fifo_rd_pvld_int_R1 ;
  logic [0:0] csb_fifo_rd_pvld_int_X1 ;
  logic [0:0] csb_fifo_rd_prdy_C0 ;
  logic [0:0] csb_fifo_rd_prdy_R0 ;
  logic [0:0] csb_fifo_rd_prdy_X0 ;
  assign _016__T = csb_fifo_rd_pvld_int_T | csb_fifo_rd_prdy_T ;
  assign csb_fifo_rd_pvld_int_C1 = _016__C ;
  assign csb_fifo_rd_pvld_int_X1 = _016__X ;
  assign csb_fifo_rd_prdy_C0 = _016__C ;
  assign csb_fifo_rd_prdy_X0 = _016__X ;
  assign csb_fifo_rd_pvld_int_R1 = ( _016__R | _016__C & csb_fifo_rd_prdy_T ) & { 1{ csb_fifo_rd_prdy != 0 }} ;
  assign csb_fifo_rd_prdy_R0 = ( _016__R | _016__C & csb_fifo_rd_pvld_int_T ) & { 1{ csb_fifo_rd_pvld_int != 0 }} ;
  assign _017_ = ! csb_fifo_rd_prdy;
  logic [0:0] csb_fifo_rd_prdy_C1 ;
  logic [0:0] csb_fifo_rd_prdy_R1 ;
  logic [0:0] csb_fifo_rd_prdy_X1 ;
  assign _017__T = | csb_fifo_rd_prdy_T ;
  assign csb_fifo_rd_prdy_C1 = { 1{ _017__C }} ;
  assign csb_fifo_rd_prdy_X1 = { 1{ _017__X }} ;
  assign csb_fifo_rd_prdy_R1 = { 1{ _017__R }} ;
  assign _017__S = 0 ;
  assign _018_ = ! _012_;
  logic [0:0] _012__C0 ;
  logic [0:0] _012__R0 ;
  logic [0:0] _012__X0 ;
  assign _018__T = | _012__T ;
  assign _012__C0 = { 1{ _018__C }} ;
  assign _012__X0 = { 1{ _018__X }} ;
  assign _012__R0 = { 1{ _018__R }} ;
  assign _018__S = 0 ;
  assign _019_ = ! csb_fifo_rd_pvld_int;
  logic [0:0] csb_fifo_rd_pvld_int_C2 ;
  logic [0:0] csb_fifo_rd_pvld_int_R2 ;
  logic [0:0] csb_fifo_rd_pvld_int_X2 ;
  assign _019__T = | csb_fifo_rd_pvld_int_T ;
  assign csb_fifo_rd_pvld_int_C2 = { 1{ _019__C }} ;
  assign csb_fifo_rd_pvld_int_X2 = { 1{ _019__X }} ;
  assign csb_fifo_rd_pvld_int_R2 = { 1{ _019__R }} ;
  assign _019__S = 0 ;
  assign _020_ = ! rd_pushing;
  logic [0:0] rd_pushing_C0 ;
  logic [0:0] rd_pushing_R0 ;
  logic [0:0] rd_pushing_X0 ;
  assign _020__T = | rd_pushing_T ;
  assign rd_pushing_C0 = { 1{ _020__C }} ;
  assign rd_pushing_X0 = { 1{ _020__X }} ;
  assign rd_pushing_R0 = { 1{ _020__R }} ;
  assign _020__S = 0 ;
  assign _021_ = ! csb_fifo_wr_pvld;
  logic [0:0] csb_fifo_wr_pvld_C1 ;
  logic [0:0] csb_fifo_wr_pvld_R1 ;
  logic [0:0] csb_fifo_wr_pvld_X1 ;
  assign _021__T = | csb_fifo_wr_pvld_T ;
  assign csb_fifo_wr_pvld_C1 = { 1{ _021__C }} ;
  assign csb_fifo_wr_pvld_X1 = { 1{ _021__X }} ;
  assign csb_fifo_wr_pvld_R1 = { 1{ _021__R }} ;
  assign _021__S = 0 ;
  assign _022_ = ! wr_pushing;
  logic [0:0] wr_pushing_C0 ;
  logic [0:0] wr_pushing_R0 ;
  logic [0:0] wr_pushing_X0 ;
  assign _022__T = | wr_pushing_T ;
  assign wr_pushing_C0 = { 1{ _022__C }} ;
  assign wr_pushing_X0 = { 1{ _022__X }} ;
  assign wr_pushing_R0 = { 1{ _022__R }} ;
  assign _022__S = 0 ;
  assign csb_fifo_wr_prdy = ! csb_fifo_wr_busy_int;
  logic [0:0] csb_fifo_wr_busy_int_C0 ;
  logic [0:0] csb_fifo_wr_busy_int_R0 ;
  logic [0:0] csb_fifo_wr_busy_int_X0 ;
  assign csb_fifo_wr_prdy_T = | csb_fifo_wr_busy_int_T ;
  assign csb_fifo_wr_busy_int_C0 = { 1{ csb_fifo_wr_prdy_C }} ;
  assign csb_fifo_wr_busy_int_X0 = { 1{ csb_fifo_wr_prdy_X }} ;
  assign csb_fifo_wr_busy_int_R0 = { 1{ csb_fifo_wr_prdy_R }} ;
  assign csb_fifo_wr_prdy_S = 0 ;
  assign _023_ = _032_ || ore;
  assign _023__S = 0 ;
  logic [0:0] _032__C0 ;
  logic [0:0] _032__R0 ;
  logic [0:0] _032__X0 ;
  logic [0:0] ore_C0 ;
  logic [0:0] ore_R0 ;
  logic [0:0] ore_X0 ;
  assign _023__T = _032__T | ore_T ;
  assign _032__C0 = _023__C ;
  assign _032__X0 = _023__X ;
  assign ore_C0 = _023__C ;
  assign ore_X0 = _023__X ;
  assign _032__R0 = ( _023__R | _023__C & ore_T ) & { 1{ ore == 0 }} ;
  assign ore_R0 = ( _023__R | _023__C & _032__T ) & { 1{ _032_ == 0 }} ;
  assign _024_ = rd_pushing || ore;
  assign _024__S = 0 ;
  logic [0:0] rd_pushing_C1 ;
  logic [0:0] rd_pushing_R1 ;
  logic [0:0] rd_pushing_X1 ;
  logic [0:0] ore_C1 ;
  logic [0:0] ore_R1 ;
  logic [0:0] ore_X1 ;
  assign _024__T = rd_pushing_T | ore_T ;
  assign rd_pushing_C1 = _024__C ;
  assign rd_pushing_X1 = _024__X ;
  assign ore_C1 = _024__C ;
  assign ore_X1 = _024__X ;
  assign rd_pushing_R1 = ( _024__R | _024__C & ore_T ) & { 1{ ore == 0 }} ;
  assign ore_R1 = ( _024__R | _024__C & rd_pushing_T ) & { 1{ rd_pushing == 0 }} ;
  assign rd_req_next = csb_fifo_rd_pvld_p || _012_;
  assign rd_req_next_S = 0 ;
  logic [0:0] csb_fifo_rd_pvld_p_C1 ;
  logic [0:0] csb_fifo_rd_pvld_p_R1 ;
  logic [0:0] csb_fifo_rd_pvld_p_X1 ;
  logic [0:0] _012__C1 ;
  logic [0:0] _012__R1 ;
  logic [0:0] _012__X1 ;
  assign rd_req_next_T = csb_fifo_rd_pvld_p_T | _012__T ;
  assign csb_fifo_rd_pvld_p_C1 = rd_req_next_C ;
  assign csb_fifo_rd_pvld_p_X1 = rd_req_next_X ;
  assign _012__C1 = rd_req_next_C ;
  assign _012__X1 = rd_req_next_X ;
  assign csb_fifo_rd_pvld_p_R1 = ( rd_req_next_R | rd_req_next_C & _012__T ) & { 1{ _012_ == 0 }} ;
  assign _012__R1 = ( rd_req_next_R | rd_req_next_C & csb_fifo_rd_pvld_p_T ) & { 1{ csb_fifo_rd_pvld_p == 0 }} ;
  assign _025_ = wr_pushing || ore;
  assign _025__S = 0 ;
  logic [0:0] wr_pushing_C1 ;
  logic [0:0] wr_pushing_R1 ;
  logic [0:0] wr_pushing_X1 ;
  logic [0:0] ore_C2 ;
  logic [0:0] ore_R2 ;
  logic [0:0] ore_X2 ;
  assign _025__T = wr_pushing_T | ore_T ;
  assign wr_pushing_C1 = _025__C ;
  assign wr_pushing_X1 = _025__X ;
  assign ore_C2 = _025__C ;
  assign ore_X2 = _025__X ;
  assign wr_pushing_R1 = ( _025__R | _025__C & ore_T ) & { 1{ ore == 0 }} ;
  assign ore_R2 = ( _025__R | _025__C & wr_pushing_T ) & { 1{ wr_pushing == 0 }} ;
  assign _026_ = _025_ || wr_popping;
  assign _026__S = 0 ;
  logic [0:0] _025__C0 ;
  logic [0:0] _025__R0 ;
  logic [0:0] _025__X0 ;
  logic [0:0] wr_popping_C0 ;
  logic [0:0] wr_popping_R0 ;
  logic [0:0] wr_popping_X0 ;
  assign _026__T = _025__T | wr_popping_T ;
  assign _025__C0 = _026__C ;
  assign _025__X0 = _026__X ;
  assign wr_popping_C0 = _026__C ;
  assign wr_popping_X0 = _026__X ;
  assign _025__R0 = ( _026__R | _026__C & wr_popping_T ) & { 1{ wr_popping == 0 }} ;
  assign wr_popping_R0 = ( _026__R | _026__C & _025__T ) & { 1{ _025_ == 0 }} ;
  assign _027_ = _026_ || wr_pushing;
  assign _027__S = 0 ;
  logic [0:0] _026__C0 ;
  logic [0:0] _026__R0 ;
  logic [0:0] _026__X0 ;
  logic [0:0] wr_pushing_C2 ;
  logic [0:0] wr_pushing_R2 ;
  logic [0:0] wr_pushing_X2 ;
  assign _027__T = _026__T | wr_pushing_T ;
  assign _026__C0 = _027__C ;
  assign _026__X0 = _027__X ;
  assign wr_pushing_C2 = _027__C ;
  assign wr_pushing_X2 = _027__X ;
  assign _026__R0 = ( _027__R | _027__C & wr_pushing_T ) & { 1{ wr_pushing == 0 }} ;
  assign wr_pushing_R2 = ( _027__R | _027__C & _026__T ) & { 1{ _026_ == 0 }} ;
  assign _028_ = _027_ || _031_;
  assign _028__S = 0 ;
  logic [0:0] _027__C0 ;
  logic [0:0] _027__R0 ;
  logic [0:0] _027__X0 ;
  logic [0:0] _031__C0 ;
  logic [0:0] _031__R0 ;
  logic [0:0] _031__X0 ;
  assign _028__T = _027__T | _031__T ;
  assign _027__C0 = _028__C ;
  assign _027__X0 = _028__X ;
  assign _031__C0 = _028__C ;
  assign _031__X0 = _028__X ;
  assign _027__R0 = ( _028__R | _028__C & _031__T ) & { 1{ _031_ == 0 }} ;
  assign _031__R0 = ( _028__R | _028__C & _027__T ) & { 1{ _027_ == 0 }} ;
  assign _029_ = _024_ || _016_;
  assign _029__S = 0 ;
  logic [0:0] _024__C0 ;
  logic [0:0] _024__R0 ;
  logic [0:0] _024__X0 ;
  logic [0:0] _016__C0 ;
  logic [0:0] _016__R0 ;
  logic [0:0] _016__X0 ;
  assign _029__T = _024__T | _016__T ;
  assign _024__C0 = _029__C ;
  assign _024__X0 = _029__X ;
  assign _016__C0 = _029__C ;
  assign _016__X0 = _029__X ;
  assign _024__R0 = ( _029__R | _029__C & _016__T ) & { 1{ _016_ == 0 }} ;
  assign _016__R0 = ( _029__R | _029__C & _024__T ) & { 1{ _024_ == 0 }} ;
  assign _030_ = _029_ || wr_pushing;
  assign _030__S = 0 ;
  logic [0:0] _029__C0 ;
  logic [0:0] _029__R0 ;
  logic [0:0] _029__X0 ;
  logic [0:0] wr_pushing_C3 ;
  logic [0:0] wr_pushing_R3 ;
  logic [0:0] wr_pushing_X3 ;
  assign _030__T = _029__T | wr_pushing_T ;
  assign _029__C0 = _030__C ;
  assign _029__X0 = _030__X ;
  assign wr_pushing_C3 = _030__C ;
  assign wr_pushing_X3 = _030__X ;
  assign _029__R0 = ( _030__R | _030__C & wr_pushing_T ) & { 1{ wr_pushing == 0 }} ;
  assign wr_pushing_R3 = ( _030__R | _030__C & _029__T ) & { 1{ _029_ == 0 }} ;
  assign nvdla_core_clk_mgated_enable = _028_ || _030_;
  assign nvdla_core_clk_mgated_enable_S = 0 ;
  logic [0:0] _028__C0 ;
  logic [0:0] _028__R0 ;
  logic [0:0] _028__X0 ;
  logic [0:0] _030__C0 ;
  logic [0:0] _030__R0 ;
  logic [0:0] _030__X0 ;
  assign nvdla_core_clk_mgated_enable_T = _028__T | _030__T ;
  assign _028__C0 = nvdla_core_clk_mgated_enable_C ;
  assign _028__X0 = nvdla_core_clk_mgated_enable_X ;
  assign _030__C0 = nvdla_core_clk_mgated_enable_C ;
  assign _030__X0 = nvdla_core_clk_mgated_enable_X ;
  assign _028__R0 = ( nvdla_core_clk_mgated_enable_R | nvdla_core_clk_mgated_enable_C & _030__T ) & { 1{ _030_ == 0 }} ;
  assign _030__R0 = ( nvdla_core_clk_mgated_enable_R | nvdla_core_clk_mgated_enable_C & _028__T ) & { 1{ _028_ == 0 }} ;
  assign rd_count_p_next_rd_popping_not_0 = | rd_count_p_next_rd_popping;
  logic [4:0] rd_count_p_next_rd_popping_C0 ;
  logic [4:0] rd_count_p_next_rd_popping_R0 ;
  logic [4:0] rd_count_p_next_rd_popping_X0 ;
  assign rd_count_p_next_rd_popping_not_0_T = | rd_count_p_next_rd_popping_T ;
  assign rd_count_p_next_rd_popping_C0 = { 5{ rd_count_p_next_rd_popping_not_0_C }} ;
  assign rd_count_p_next_rd_popping_X0 = { 5{ rd_count_p_next_rd_popping_not_0_X }} ;
  assign rd_count_p_next_rd_popping_R0 = { 5{ rd_count_p_next_rd_popping_not_0_R }} & rd_count_p_next_rd_popping ;
  assign rd_count_p_next_rd_popping_not_0_S = 0 ;
  assign rd_count_p_next_no_rd_popping_not_0 = | rd_count_p_next_no_rd_popping;
  logic [4:0] rd_count_p_next_no_rd_popping_C0 ;
  logic [4:0] rd_count_p_next_no_rd_popping_R0 ;
  logic [4:0] rd_count_p_next_no_rd_popping_X0 ;
  assign rd_count_p_next_no_rd_popping_not_0_T = | rd_count_p_next_no_rd_popping_T ;
  assign rd_count_p_next_no_rd_popping_C0 = { 5{ rd_count_p_next_no_rd_popping_not_0_C }} ;
  assign rd_count_p_next_no_rd_popping_X0 = { 5{ rd_count_p_next_no_rd_popping_not_0_X }} ;
  assign rd_count_p_next_no_rd_popping_R0 = { 5{ rd_count_p_next_no_rd_popping_not_0_R }} & rd_count_p_next_no_rd_popping ;
  assign rd_count_p_next_no_rd_popping_not_0_S = 0 ;
  assign _031_ = csb_fifo_wr_busy_int != csb_fifo_wr_busy_next;
  assign _031__S = 0 ;
  logic [0:0] csb_fifo_wr_busy_int_C1 ;
  logic [0:0] csb_fifo_wr_busy_int_R1 ;
  logic [0:0] csb_fifo_wr_busy_int_X1 ;
  logic [0:0] csb_fifo_wr_busy_next_C0 ;
  logic [0:0] csb_fifo_wr_busy_next_R0 ;
  logic [0:0] csb_fifo_wr_busy_next_X0 ;
  assign _031__T = (| csb_fifo_wr_busy_int_T ) | (|csb_fifo_wr_busy_next_T ) ;
  assign csb_fifo_wr_busy_int_C1 = { 1{ _031__C }} ;
  assign csb_fifo_wr_busy_int_R1 = { 1{ _031__R }} | ( { 1{ _031__C }} & csb_fifo_wr_busy_next_T );
  assign csb_fifo_wr_busy_int_X1 = { 1{ _031__X }} ;
  assign csb_fifo_wr_busy_next_C0 = { 1{ _031__C }} ;
  assign csb_fifo_wr_busy_next_R0 = { 1{ _031__R }} | ( { 1{ _031__C }} & csb_fifo_wr_busy_int_T );
  assign csb_fifo_wr_busy_next_X0 = { 1{ _031__X }} ;
  assign _032_ = ~ csb_fifo_rd_pvld_p;
  logic [0:0] csb_fifo_rd_pvld_p_C2 ;
  logic [0:0] csb_fifo_rd_pvld_p_R2 ;
  logic [0:0] csb_fifo_rd_pvld_p_X2 ;
  assign _032__T = csb_fifo_rd_pvld_p_T ;
  assign csb_fifo_rd_pvld_p_C2 = _032__C ;
  assign csb_fifo_rd_pvld_p_R2 = _032__R ;
  assign csb_fifo_rd_pvld_p_X2 = _032__X ;
  assign _032__S = 0 ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      csb_fifo_rd_pvld_int <= 1'b0;
    else
      csb_fifo_rd_pvld_int <= rd_req_next;
  logic [0:0] rd_req_next_X0 ;
  logic [0:0] rd_req_next_R0 ;
  logic [0:0] rd_req_next_C0 ;
  assign rd_req_next_X0 = { 1{ csb_fifo_rd_pvld_int_S != rd_req_next_S }} ;
  assign rd_req_next_R0 = 0 ;
  assign rd_req_next_C0 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      csb_fifo_rd_pvld_int_T 		<= !nvdla_core_rstn ? 0 : ( rd_req_next_T & rd_req_next_X0 );
  always @( posedge nvdla_core_clk_mgated )
      csb_fifo_rd_pvld_int_t_flag 	<= !nvdla_core_rstn ? 0 : csb_fifo_rd_pvld_int_t_flag ? 1 : | rd_req_next_T & ( | rd_req_next_X0 );
  always @( posedge nvdla_core_clk_mgated )
      csb_fifo_rd_pvld_int_r_flag 	<= !nvdla_core_rstn ? 0 : csb_fifo_rd_pvld_int_r_flag ? 1 : csb_fifo_rd_pvld_int_t_flag ? 0 : ( | csb_fifo_rd_pvld_int_R ) ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      csb_fifo_rd_pvld_p <= 1'b0;
    else
      csb_fifo_rd_pvld_p <= _001_;
  logic [0:0] _001__X0 ;
  logic [0:0] _001__R0 ;
  logic [0:0] _001__C0 ;
  assign _001__X0 = { 1{ csb_fifo_rd_pvld_p_S != _001__S }} ;
  assign _001__R0 = 0 ;
  assign _001__C0 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      csb_fifo_rd_pvld_p_T 		<= !nvdla_core_rstn ? 0 : ( _001__T & _001__X0 );
  always @( posedge nvdla_core_clk_mgated )
      csb_fifo_rd_pvld_p_t_flag 	<= !nvdla_core_rstn ? 0 : csb_fifo_rd_pvld_p_t_flag ? 1 : | _001__T & ( | _001__X0 );
  always @( posedge nvdla_core_clk_mgated )
      csb_fifo_rd_pvld_p_r_flag 	<= !nvdla_core_rstn ? 0 : csb_fifo_rd_pvld_p_r_flag ? 1 : csb_fifo_rd_pvld_p_t_flag ? 0 : ( | csb_fifo_rd_pvld_p_R ) ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      csb_fifo_rd_count_p <= 5'b00000;
    else
      csb_fifo_rd_count_p <= _000_;
  logic [4:0] _000__X0 ;
  logic [4:0] _000__R0 ;
  logic [4:0] _000__C0 ;
  assign _000__X0 = { 5{ csb_fifo_rd_count_p_S != _000__S }} ;
  assign _000__R0 = 0 ;
  assign _000__C0 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      csb_fifo_rd_count_p_T 		<= !nvdla_core_rstn ? 0 : ( _000__T & _000__X0 );
  always @( posedge nvdla_core_clk_mgated )
      csb_fifo_rd_count_p_t_flag 	<= !nvdla_core_rstn ? 0 : csb_fifo_rd_count_p_t_flag ? 1 : | _000__T & ( | _000__X0 );
  always @( posedge nvdla_core_clk_mgated )
      csb_fifo_rd_count_p_r_flag 	<= !nvdla_core_rstn ? 0 : csb_fifo_rd_count_p_r_flag ? 1 : csb_fifo_rd_count_p_t_flag ? 0 : ( | csb_fifo_rd_count_p_R ) ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      rd_pushing <= 1'b0;
    else
      rd_pushing <= wr_pushing;
  logic [0:0] wr_pushing_X4 ;
  logic [0:0] wr_pushing_R4 ;
  logic [0:0] wr_pushing_C4 ;
  assign wr_pushing_X4 = { 1{ rd_pushing_S != wr_pushing_S }} ;
  assign wr_pushing_R4 = 0 ;
  assign wr_pushing_C4 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      rd_pushing_T 		<= !nvdla_core_rstn ? 0 : ( wr_pushing_T & wr_pushing_X4 );
  always @( posedge nvdla_core_clk_mgated )
      rd_pushing_t_flag 	<= !nvdla_core_rstn ? 0 : rd_pushing_t_flag ? 1 : | wr_pushing_T & ( | wr_pushing_X4 );
  always @( posedge nvdla_core_clk_mgated )
      rd_pushing_r_flag 	<= !nvdla_core_rstn ? 0 : rd_pushing_r_flag ? 1 : rd_pushing_t_flag ? 0 : ( | rd_pushing_R ) ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      wr_popping <= 1'b0;
    else
      wr_popping <= ore;
  logic [0:0] ore_X3 ;
  logic [0:0] ore_R3 ;
  logic [0:0] ore_C3 ;
  assign ore_X3 = { 1{ wr_popping_S != ore_S }} ;
  assign ore_R3 = 0 ;
  assign ore_C3 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      wr_popping_T 		<= !nvdla_core_rstn ? 0 : ( ore_T & ore_X3 );
  always @( posedge nvdla_core_clk_mgated )
      wr_popping_t_flag 	<= !nvdla_core_rstn ? 0 : wr_popping_t_flag ? 1 : | ore_T & ( | ore_X3 );
  always @( posedge nvdla_core_clk_mgated )
      wr_popping_r_flag 	<= !nvdla_core_rstn ? 0 : wr_popping_r_flag ? 1 : wr_popping_t_flag ? 0 : ( | wr_popping_R ) ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      csb_fifo_rd_adr <= 5'b00000;
    else
      csb_fifo_rd_adr <= csb_fifo_rd_adr_p;
  logic [4:0] csb_fifo_rd_adr_p_X0 ;
  logic [4:0] csb_fifo_rd_adr_p_R0 ;
  logic [4:0] csb_fifo_rd_adr_p_C0 ;
  assign csb_fifo_rd_adr_p_X0 = { 5{ csb_fifo_rd_adr_S != csb_fifo_rd_adr_p_S }} ;
  assign csb_fifo_rd_adr_p_R0 = 0 ;
  assign csb_fifo_rd_adr_p_C0 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      csb_fifo_rd_adr_T 		<= !nvdla_core_rstn ? 0 : ( csb_fifo_rd_adr_p_T & csb_fifo_rd_adr_p_X0 );
  always @( posedge nvdla_core_clk_mgated )
      csb_fifo_rd_adr_t_flag 	<= !nvdla_core_rstn ? 0 : csb_fifo_rd_adr_t_flag ? 1 : | csb_fifo_rd_adr_p_T & ( | csb_fifo_rd_adr_p_X0 );
  always @( posedge nvdla_core_clk_mgated )
      csb_fifo_rd_adr_r_flag 	<= !nvdla_core_rstn ? 0 : csb_fifo_rd_adr_r_flag ? 1 : csb_fifo_rd_adr_t_flag ? 0 : ( | csb_fifo_rd_adr_R ) ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      csb_fifo_wr_adr <= 5'b00000;
    else
      csb_fifo_wr_adr <= _002_;
  logic [4:0] _002__X0 ;
  logic [4:0] _002__R0 ;
  logic [4:0] _002__C0 ;
  assign _002__X0 = { 5{ csb_fifo_wr_adr_S != _002__S }} ;
  assign _002__R0 = 0 ;
  assign _002__C0 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      csb_fifo_wr_adr_T 		<= !nvdla_core_rstn ? 0 : ( _002__T & _002__X0 );
  always @( posedge nvdla_core_clk_mgated )
      csb_fifo_wr_adr_t_flag 	<= !nvdla_core_rstn ? 0 : csb_fifo_wr_adr_t_flag ? 1 : | _002__T & ( | _002__X0 );
  always @( posedge nvdla_core_clk_mgated )
      csb_fifo_wr_adr_r_flag 	<= !nvdla_core_rstn ? 0 : csb_fifo_wr_adr_r_flag ? 1 : csb_fifo_wr_adr_t_flag ? 0 : ( | csb_fifo_wr_adr_R ) ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      csb_fifo_wr_count <= 5'b00000;
    else
      csb_fifo_wr_count <= _003_;
  logic [4:0] _003__X0 ;
  logic [4:0] _003__R0 ;
  logic [4:0] _003__C0 ;
  assign _003__X0 = { 5{ csb_fifo_wr_count_S != _003__S }} ;
  assign _003__R0 = 0 ;
  assign _003__C0 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      csb_fifo_wr_count_T 		<= !nvdla_core_rstn ? 0 : ( _003__T & _003__X0 );
  always @( posedge nvdla_core_clk_mgated )
      csb_fifo_wr_count_t_flag 	<= !nvdla_core_rstn ? 0 : csb_fifo_wr_count_t_flag ? 1 : | _003__T & ( | _003__X0 );
  always @( posedge nvdla_core_clk_mgated )
      csb_fifo_wr_count_r_flag 	<= !nvdla_core_rstn ? 0 : csb_fifo_wr_count_r_flag ? 1 : csb_fifo_wr_count_t_flag ? 0 : ( | csb_fifo_wr_count_R ) ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      csb_fifo_wr_busy_int <= 1'b0;
    else
      csb_fifo_wr_busy_int <= csb_fifo_wr_busy_next;
  logic [0:0] csb_fifo_wr_busy_next_X1 ;
  logic [0:0] csb_fifo_wr_busy_next_R1 ;
  logic [0:0] csb_fifo_wr_busy_next_C1 ;
  assign csb_fifo_wr_busy_next_X1 = { 1{ csb_fifo_wr_busy_int_S != csb_fifo_wr_busy_next_S }} ;
  assign csb_fifo_wr_busy_next_R1 = 0 ;
  assign csb_fifo_wr_busy_next_C1 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      csb_fifo_wr_busy_int_T 		<= !nvdla_core_rstn ? 0 : ( csb_fifo_wr_busy_next_T & csb_fifo_wr_busy_next_X1 );
  always @( posedge nvdla_core_clk_mgated )
      csb_fifo_wr_busy_int_t_flag 	<= !nvdla_core_rstn ? 0 : csb_fifo_wr_busy_int_t_flag ? 1 : | csb_fifo_wr_busy_next_T & ( | csb_fifo_wr_busy_next_X1 );
  always @( posedge nvdla_core_clk_mgated )
      csb_fifo_wr_busy_int_r_flag 	<= !nvdla_core_rstn ? 0 : csb_fifo_wr_busy_int_r_flag ? 1 : csb_fifo_wr_busy_int_t_flag ? 0 : ( | csb_fifo_wr_busy_int_R ) ;
  assign _000_ = _024_ ? rd_count_p_next : csb_fifo_rd_count_p;
  logic [0:0] _024__C1 ;
  logic [0:0] _024__R1 ;
  logic [0:0] _024__X1 ;
  assign _024__C1 = | _000__C ;
  assign _024__X1 = | _000__X ;
  assign _000__T = _024_ ? ( { 5{ _024__T  }} | rd_count_p_next_T ) : ( { 5{ _024__T  }} | csb_fifo_rd_count_p_T );
  assign _000__S = _024_ ? rd_count_p_next_S : csb_fifo_rd_count_p_S ;
  assign _024__R1 = ( | (_000__R | ( _000__C & ( { 5{ _024_ }} & rd_count_p_next_T | { 5{ !_024_ }} & csb_fifo_rd_count_p_T )))) && rd_count_p_next != csb_fifo_rd_count_p ;
  logic [4:0] rd_count_p_next_C0 ;
  logic [4:0] rd_count_p_next_R0 ;
  logic [4:0] rd_count_p_next_X0 ;
  assign rd_count_p_next_C0 = { 5{ _024_ }} ;
  assign rd_count_p_next_R0 = { 5{ _024_ }} & ( _000__R | ( { 5{ _024__T  }} & _000__C ));
  assign rd_count_p_next_X0 = { 5{ _024_ }} & _000__X ;
  logic [4:0] csb_fifo_rd_count_p_C2 ;
  logic [4:0] csb_fifo_rd_count_p_R2 ;
  logic [4:0] csb_fifo_rd_count_p_X2 ;
  assign csb_fifo_rd_count_p_C2 = { 5{ !_024_ }} ;
  assign csb_fifo_rd_count_p_R2 = { 5{ !_024_ }} & ( _000__R | ( { 5{ _024__T  }} & _000__C ));
  assign csb_fifo_rd_count_p_X2 = { 5{ !_024_ }} & _000__X ;
  assign _001_ = _024_ ? rd_count_p_next_not_0 : csb_fifo_rd_pvld_p;
  logic [0:0] _024__C2 ;
  logic [0:0] _024__R2 ;
  logic [0:0] _024__X2 ;
  assign _024__C2 = | _001__C ;
  assign _024__X2 = | _001__X ;
  assign _001__T = _024_ ? ( { 1{ _024__T  }} | rd_count_p_next_not_0_T ) : ( { 1{ _024__T  }} | csb_fifo_rd_pvld_p_T );
  assign _001__S = _024_ ? rd_count_p_next_not_0_S : csb_fifo_rd_pvld_p_S ;
  assign _024__R2 = ( | (_001__R | ( _001__C & ( { 1{ _024_ }} & rd_count_p_next_not_0_T | { 1{ !_024_ }} & csb_fifo_rd_pvld_p_T )))) && rd_count_p_next_not_0 != csb_fifo_rd_pvld_p ;
  logic [0:0] rd_count_p_next_not_0_C1 ;
  logic [0:0] rd_count_p_next_not_0_R1 ;
  logic [0:0] rd_count_p_next_not_0_X1 ;
  assign rd_count_p_next_not_0_C1 = { 1{ _024_ }} ;
  assign rd_count_p_next_not_0_R1 = { 1{ _024_ }} & ( _001__R | ( { 1{ _024__T  }} & _001__C ));
  assign rd_count_p_next_not_0_X1 = { 1{ _024_ }} & _001__X ;
  logic [0:0] csb_fifo_rd_pvld_p_C3 ;
  logic [0:0] csb_fifo_rd_pvld_p_R3 ;
  logic [0:0] csb_fifo_rd_pvld_p_X3 ;
  assign csb_fifo_rd_pvld_p_C3 = { 1{ !_024_ }} ;
  assign csb_fifo_rd_pvld_p_R3 = { 1{ !_024_ }} & ( _001__R | ( { 1{ _024__T  }} & _001__C ));
  assign csb_fifo_rd_pvld_p_X3 = { 1{ !_024_ }} & _001__X ;
  assign csb_fifo_rd_adr_p = ore ? rd_adr_next : csb_fifo_rd_adr;
  logic [0:0] ore_C4 ;
  logic [0:0] ore_R4 ;
  logic [0:0] ore_X4 ;
  assign ore_C4 = | csb_fifo_rd_adr_p_C ;
  assign ore_X4 = | csb_fifo_rd_adr_p_X ;
  assign csb_fifo_rd_adr_p_T = ore ? ( { 5{ ore_T  }} | rd_adr_next_T ) : ( { 5{ ore_T  }} | csb_fifo_rd_adr_T );
  assign csb_fifo_rd_adr_p_S = ore ? rd_adr_next_S : csb_fifo_rd_adr_S ;
  assign ore_R4 = ( | (csb_fifo_rd_adr_p_R | ( csb_fifo_rd_adr_p_C & ( { 5{ ore }} & rd_adr_next_T | { 5{ !ore }} & csb_fifo_rd_adr_T )))) && rd_adr_next != csb_fifo_rd_adr ;
  logic [4:0] rd_adr_next_C0 ;
  logic [4:0] rd_adr_next_R0 ;
  logic [4:0] rd_adr_next_X0 ;
  assign rd_adr_next_C0 = { 5{ ore }} ;
  assign rd_adr_next_R0 = { 5{ ore }} & ( csb_fifo_rd_adr_p_R | ( { 5{ ore_T  }} & csb_fifo_rd_adr_p_C ));
  assign rd_adr_next_X0 = { 5{ ore }} & csb_fifo_rd_adr_p_X ;
  logic [4:0] csb_fifo_rd_adr_C2 ;
  logic [4:0] csb_fifo_rd_adr_R2 ;
  logic [4:0] csb_fifo_rd_adr_X2 ;
  assign csb_fifo_rd_adr_C2 = { 5{ !ore }} ;
  assign csb_fifo_rd_adr_R2 = { 5{ !ore }} & ( csb_fifo_rd_adr_p_R | ( { 5{ ore_T  }} & csb_fifo_rd_adr_p_C ));
  assign csb_fifo_rd_adr_X2 = { 5{ !ore }} & csb_fifo_rd_adr_p_X ;
  assign _002_ = wr_pushing ? wr_adr_next : csb_fifo_wr_adr;
  logic [0:0] wr_pushing_C5 ;
  logic [0:0] wr_pushing_R5 ;
  logic [0:0] wr_pushing_X5 ;
  assign wr_pushing_C5 = | _002__C ;
  assign wr_pushing_X5 = | _002__X ;
  assign _002__T = wr_pushing ? ( { 5{ wr_pushing_T  }} | wr_adr_next_T ) : ( { 5{ wr_pushing_T  }} | csb_fifo_wr_adr_T );
  assign _002__S = wr_pushing ? wr_adr_next_S : csb_fifo_wr_adr_S ;
  assign wr_pushing_R5 = ( | (_002__R | ( _002__C & ( { 5{ wr_pushing }} & wr_adr_next_T | { 5{ !wr_pushing }} & csb_fifo_wr_adr_T )))) && wr_adr_next != csb_fifo_wr_adr ;
  logic [4:0] wr_adr_next_C0 ;
  logic [4:0] wr_adr_next_R0 ;
  logic [4:0] wr_adr_next_X0 ;
  assign wr_adr_next_C0 = { 5{ wr_pushing }} ;
  assign wr_adr_next_R0 = { 5{ wr_pushing }} & ( _002__R | ( { 5{ wr_pushing_T  }} & _002__C ));
  assign wr_adr_next_X0 = { 5{ wr_pushing }} & _002__X ;
  logic [4:0] csb_fifo_wr_adr_C2 ;
  logic [4:0] csb_fifo_wr_adr_R2 ;
  logic [4:0] csb_fifo_wr_adr_X2 ;
  assign csb_fifo_wr_adr_C2 = { 5{ !wr_pushing }} ;
  assign csb_fifo_wr_adr_R2 = { 5{ !wr_pushing }} & ( _002__R | ( { 5{ wr_pushing_T  }} & _002__C ));
  assign csb_fifo_wr_adr_X2 = { 5{ !wr_pushing }} & _002__X ;
  assign _003_ = _033_ ? wr_count_next : csb_fifo_wr_count;
  logic [0:0] _033__C0 ;
  logic [0:0] _033__R0 ;
  logic [0:0] _033__X0 ;
  assign _033__C0 = | _003__C ;
  assign _033__X0 = | _003__X ;
  assign _003__T = _033_ ? ( { 5{ _033__T  }} | wr_count_next_T ) : ( { 5{ _033__T  }} | csb_fifo_wr_count_T );
  assign _003__S = _033_ ? wr_count_next_S : csb_fifo_wr_count_S ;
  assign _033__R0 = ( | (_003__R | ( _003__C & ( { 5{ _033_ }} & wr_count_next_T | { 5{ !_033_ }} & csb_fifo_wr_count_T )))) && wr_count_next != csb_fifo_wr_count ;
  logic [4:0] wr_count_next_C0 ;
  logic [4:0] wr_count_next_R0 ;
  logic [4:0] wr_count_next_X0 ;
  assign wr_count_next_C0 = { 5{ _033_ }} ;
  assign wr_count_next_R0 = { 5{ _033_ }} & ( _003__R | ( { 5{ _033__T  }} & _003__C ));
  assign wr_count_next_X0 = { 5{ _033_ }} & _003__X ;
  logic [4:0] csb_fifo_wr_count_C3 ;
  logic [4:0] csb_fifo_wr_count_R3 ;
  logic [4:0] csb_fifo_wr_count_X3 ;
  assign csb_fifo_wr_count_C3 = { 5{ !_033_ }} ;
  assign csb_fifo_wr_count_R3 = { 5{ !_033_ }} & ( _003__R | ( { 5{ _033__T  }} & _003__C ));
  assign csb_fifo_wr_count_X3 = { 5{ !_033_ }} & _003__X ;
  assign _034_ = csb_fifo_rd_count_p - 1'b1;
  assign _034__S = 0 ;
  logic [4:0] csb_fifo_rd_count_p_C3 ;
  logic [4:0] csb_fifo_rd_count_p_R3 ;
  logic [4:0] csb_fifo_rd_count_p_X3 ;
  assign _034__T = csb_fifo_rd_count_p_T ;
  assign csb_fifo_rd_count_p_C3 = _034__C ;
  assign csb_fifo_rd_count_p_R3 = _034__R ;
  assign csb_fifo_rd_count_p_X3 = _034__X ;
  assign _035_ = csb_fifo_wr_count - 1'b1;
  assign _035__S = 0 ;
  logic [4:0] csb_fifo_wr_count_C4 ;
  logic [4:0] csb_fifo_wr_count_R4 ;
  logic [4:0] csb_fifo_wr_count_X4 ;
  assign _035__T = csb_fifo_wr_count_T ;
  assign csb_fifo_wr_count_C4 = _035__C ;
  assign csb_fifo_wr_count_R4 = _035__R ;
  assign csb_fifo_wr_count_X4 = _035__X ;
  assign wr_adr_next = _008_ ? 5'b00000 : _004_;
  logic [0:0] _008__C0 ;
  logic [0:0] _008__R0 ;
  logic [0:0] _008__X0 ;
  assign _008__C0 = | wr_adr_next_C ;
  assign _008__X0 = | wr_adr_next_X ;
  logic [4:0] _004__C0 ;
  logic [4:0] _004__R0 ;
  logic [4:0] _004__X0 ;
  assign _004__C0 = { 5{ !_008_ }};
  assign _004__R0 = { 5{ !_008_ }} & ( wr_adr_next_R | ( { 5{ _008__T  }} & wr_adr_next_C ));
  assign _004__X0 = { 5{ !_008_ }} & wr_adr_next_X ;
  assign wr_adr_next_T = _008_ ? { 5{ | _008__T  }} : ( { 5{ | _008__T  }} | _004__T );
  assign wr_adr_next_S = _008_ ? _008__S : _004__S ;
  assign _008__R0 = ( | (wr_adr_next_R | ( { 5{ !_008_ }} & _004__T & wr_adr_next_C ))) && 5'b00000 != _004_ ;
  assign rd_adr_next = _009_ ? 5'b00000 : _005_;
  logic [0:0] _009__C0 ;
  logic [0:0] _009__R0 ;
  logic [0:0] _009__X0 ;
  assign _009__C0 = | rd_adr_next_C ;
  assign _009__X0 = | rd_adr_next_X ;
  logic [4:0] _005__C0 ;
  logic [4:0] _005__R0 ;
  logic [4:0] _005__X0 ;
  assign _005__C0 = { 5{ !_009_ }};
  assign _005__R0 = { 5{ !_009_ }} & ( rd_adr_next_R | ( { 5{ _009__T  }} & rd_adr_next_C ));
  assign _005__X0 = { 5{ !_009_ }} & rd_adr_next_X ;
  assign rd_adr_next_T = _009_ ? { 5{ | _009__T  }} : ( { 5{ | _009__T  }} | _005__T );
  assign rd_adr_next_S = _009_ ? _009__S : _005__S ;
  assign _009__R0 = ( | (rd_adr_next_R | ( { 5{ !_009_ }} & _005__T & rd_adr_next_C ))) && 5'b00000 != _005_ ;
  assign rd_count_p_next_rd_popping = rd_pushing ? csb_fifo_rd_count_p : _034_;
  logic [0:0] rd_pushing_C2 ;
  logic [0:0] rd_pushing_R2 ;
  logic [0:0] rd_pushing_X2 ;
  assign rd_pushing_C2 = | rd_count_p_next_rd_popping_C ;
  assign rd_pushing_X2 = | rd_count_p_next_rd_popping_X ;
  assign rd_count_p_next_rd_popping_T = rd_pushing ? ( { 5{ rd_pushing_T  }} | csb_fifo_rd_count_p_T ) : ( { 5{ rd_pushing_T  }} | _034__T );
  assign rd_count_p_next_rd_popping_S = rd_pushing ? csb_fifo_rd_count_p_S : _034__S ;
  assign rd_pushing_R2 = ( | (rd_count_p_next_rd_popping_R | ( rd_count_p_next_rd_popping_C & ( { 5{ rd_pushing }} & csb_fifo_rd_count_p_T | { 5{ !rd_pushing }} & _034__T )))) && csb_fifo_rd_count_p != _034_ ;
  logic [4:0] csb_fifo_rd_count_p_C4 ;
  logic [4:0] csb_fifo_rd_count_p_R4 ;
  logic [4:0] csb_fifo_rd_count_p_X4 ;
  assign csb_fifo_rd_count_p_C4 = { 5{ rd_pushing }} ;
  assign csb_fifo_rd_count_p_R4 = { 5{ rd_pushing }} & ( rd_count_p_next_rd_popping_R | ( { 5{ rd_pushing_T  }} & rd_count_p_next_rd_popping_C ));
  assign csb_fifo_rd_count_p_X4 = { 5{ rd_pushing }} & rd_count_p_next_rd_popping_X ;
  logic [4:0] _034__C0 ;
  logic [4:0] _034__R0 ;
  logic [4:0] _034__X0 ;
  assign _034__C0 = { 5{ !rd_pushing }} ;
  assign _034__R0 = { 5{ !rd_pushing }} & ( rd_count_p_next_rd_popping_R | ( { 5{ rd_pushing_T  }} & rd_count_p_next_rd_popping_C ));
  assign _034__X0 = { 5{ !rd_pushing }} & rd_count_p_next_rd_popping_X ;
  assign rd_count_p_next_no_rd_popping = rd_pushing ? _006_ : csb_fifo_rd_count_p;
  logic [0:0] rd_pushing_C3 ;
  logic [0:0] rd_pushing_R3 ;
  logic [0:0] rd_pushing_X3 ;
  assign rd_pushing_C3 = | rd_count_p_next_no_rd_popping_C ;
  assign rd_pushing_X3 = | rd_count_p_next_no_rd_popping_X ;
  assign rd_count_p_next_no_rd_popping_T = rd_pushing ? ( { 5{ rd_pushing_T  }} | _006__T ) : ( { 5{ rd_pushing_T  }} | csb_fifo_rd_count_p_T );
  assign rd_count_p_next_no_rd_popping_S = rd_pushing ? _006__S : csb_fifo_rd_count_p_S ;
  assign rd_pushing_R3 = ( | (rd_count_p_next_no_rd_popping_R | ( rd_count_p_next_no_rd_popping_C & ( { 5{ rd_pushing }} & _006__T | { 5{ !rd_pushing }} & csb_fifo_rd_count_p_T )))) && _006_ != csb_fifo_rd_count_p ;
  logic [4:0] _006__C0 ;
  logic [4:0] _006__R0 ;
  logic [4:0] _006__X0 ;
  assign _006__C0 = { 5{ rd_pushing }} ;
  assign _006__R0 = { 5{ rd_pushing }} & ( rd_count_p_next_no_rd_popping_R | ( { 5{ rd_pushing_T  }} & rd_count_p_next_no_rd_popping_C ));
  assign _006__X0 = { 5{ rd_pushing }} & rd_count_p_next_no_rd_popping_X ;
  logic [4:0] csb_fifo_rd_count_p_C5 ;
  logic [4:0] csb_fifo_rd_count_p_R5 ;
  logic [4:0] csb_fifo_rd_count_p_X5 ;
  assign csb_fifo_rd_count_p_C5 = { 5{ !rd_pushing }} ;
  assign csb_fifo_rd_count_p_R5 = { 5{ !rd_pushing }} & ( rd_count_p_next_no_rd_popping_R | ( { 5{ rd_pushing_T  }} & rd_count_p_next_no_rd_popping_C ));
  assign csb_fifo_rd_count_p_X5 = { 5{ !rd_pushing }} & rd_count_p_next_no_rd_popping_X ;
  assign rd_count_p_next = ore ? rd_count_p_next_rd_popping : rd_count_p_next_no_rd_popping;
  logic [0:0] ore_C5 ;
  logic [0:0] ore_R5 ;
  logic [0:0] ore_X5 ;
  assign ore_C5 = | rd_count_p_next_C ;
  assign ore_X5 = | rd_count_p_next_X ;
  assign rd_count_p_next_T = ore ? ( { 5{ ore_T  }} | rd_count_p_next_rd_popping_T ) : ( { 5{ ore_T  }} | rd_count_p_next_no_rd_popping_T );
  assign rd_count_p_next_S = ore ? rd_count_p_next_rd_popping_S : rd_count_p_next_no_rd_popping_S ;
  assign ore_R5 = ( | (rd_count_p_next_R | ( rd_count_p_next_C & ( { 5{ ore }} & rd_count_p_next_rd_popping_T | { 5{ !ore }} & rd_count_p_next_no_rd_popping_T )))) && rd_count_p_next_rd_popping != rd_count_p_next_no_rd_popping ;
  logic [4:0] rd_count_p_next_rd_popping_C1 ;
  logic [4:0] rd_count_p_next_rd_popping_R1 ;
  logic [4:0] rd_count_p_next_rd_popping_X1 ;
  assign rd_count_p_next_rd_popping_C1 = { 5{ ore }} ;
  assign rd_count_p_next_rd_popping_R1 = { 5{ ore }} & ( rd_count_p_next_R | ( { 5{ ore_T  }} & rd_count_p_next_C ));
  assign rd_count_p_next_rd_popping_X1 = { 5{ ore }} & rd_count_p_next_X ;
  logic [4:0] rd_count_p_next_no_rd_popping_C1 ;
  logic [4:0] rd_count_p_next_no_rd_popping_R1 ;
  logic [4:0] rd_count_p_next_no_rd_popping_X1 ;
  assign rd_count_p_next_no_rd_popping_C1 = { 5{ !ore }} ;
  assign rd_count_p_next_no_rd_popping_R1 = { 5{ !ore }} & ( rd_count_p_next_R | ( { 5{ ore_T  }} & rd_count_p_next_C ));
  assign rd_count_p_next_no_rd_popping_X1 = { 5{ !ore }} & rd_count_p_next_X ;
  assign rd_count_p_next_not_0 = ore ? rd_count_p_next_rd_popping_not_0 : rd_count_p_next_no_rd_popping_not_0;
  logic [0:0] ore_C6 ;
  logic [0:0] ore_R6 ;
  logic [0:0] ore_X6 ;
  assign ore_C6 = | rd_count_p_next_not_0_C ;
  assign ore_X6 = | rd_count_p_next_not_0_X ;
  assign rd_count_p_next_not_0_T = ore ? ( { 1{ ore_T  }} | rd_count_p_next_rd_popping_not_0_T ) : ( { 1{ ore_T  }} | rd_count_p_next_no_rd_popping_not_0_T );
  assign rd_count_p_next_not_0_S = ore ? rd_count_p_next_rd_popping_not_0_S : rd_count_p_next_no_rd_popping_not_0_S ;
  assign ore_R6 = ( | (rd_count_p_next_not_0_R | ( rd_count_p_next_not_0_C & ( { 1{ ore }} & rd_count_p_next_rd_popping_not_0_T | { 1{ !ore }} & rd_count_p_next_no_rd_popping_not_0_T )))) && rd_count_p_next_rd_popping_not_0 != rd_count_p_next_no_rd_popping_not_0 ;
  logic [0:0] rd_count_p_next_rd_popping_not_0_C0 ;
  logic [0:0] rd_count_p_next_rd_popping_not_0_R0 ;
  logic [0:0] rd_count_p_next_rd_popping_not_0_X0 ;
  assign rd_count_p_next_rd_popping_not_0_C0 = { 1{ ore }} ;
  assign rd_count_p_next_rd_popping_not_0_R0 = { 1{ ore }} & ( rd_count_p_next_not_0_R | ( { 1{ ore_T  }} & rd_count_p_next_not_0_C ));
  assign rd_count_p_next_rd_popping_not_0_X0 = { 1{ ore }} & rd_count_p_next_not_0_X ;
  logic [0:0] rd_count_p_next_no_rd_popping_not_0_C0 ;
  logic [0:0] rd_count_p_next_no_rd_popping_not_0_R0 ;
  logic [0:0] rd_count_p_next_no_rd_popping_not_0_X0 ;
  assign rd_count_p_next_no_rd_popping_not_0_C0 = { 1{ !ore }} ;
  assign rd_count_p_next_no_rd_popping_not_0_R0 = { 1{ !ore }} & ( rd_count_p_next_not_0_R | ( { 1{ ore_T  }} & rd_count_p_next_not_0_C ));
  assign rd_count_p_next_no_rd_popping_not_0_X0 = { 1{ !ore }} & rd_count_p_next_not_0_X ;
  assign wr_count_next_wr_popping = wr_pushing ? csb_fifo_wr_count : _035_;
  logic [0:0] wr_pushing_C6 ;
  logic [0:0] wr_pushing_R6 ;
  logic [0:0] wr_pushing_X6 ;
  assign wr_pushing_C6 = | wr_count_next_wr_popping_C ;
  assign wr_pushing_X6 = | wr_count_next_wr_popping_X ;
  assign wr_count_next_wr_popping_T = wr_pushing ? ( { 5{ wr_pushing_T  }} | csb_fifo_wr_count_T ) : ( { 5{ wr_pushing_T  }} | _035__T );
  assign wr_count_next_wr_popping_S = wr_pushing ? csb_fifo_wr_count_S : _035__S ;
  assign wr_pushing_R6 = ( | (wr_count_next_wr_popping_R | ( wr_count_next_wr_popping_C & ( { 5{ wr_pushing }} & csb_fifo_wr_count_T | { 5{ !wr_pushing }} & _035__T )))) && csb_fifo_wr_count != _035_ ;
  logic [4:0] csb_fifo_wr_count_C5 ;
  logic [4:0] csb_fifo_wr_count_R5 ;
  logic [4:0] csb_fifo_wr_count_X5 ;
  assign csb_fifo_wr_count_C5 = { 5{ wr_pushing }} ;
  assign csb_fifo_wr_count_R5 = { 5{ wr_pushing }} & ( wr_count_next_wr_popping_R | ( { 5{ wr_pushing_T  }} & wr_count_next_wr_popping_C ));
  assign csb_fifo_wr_count_X5 = { 5{ wr_pushing }} & wr_count_next_wr_popping_X ;
  logic [4:0] _035__C0 ;
  logic [4:0] _035__R0 ;
  logic [4:0] _035__X0 ;
  assign _035__C0 = { 5{ !wr_pushing }} ;
  assign _035__R0 = { 5{ !wr_pushing }} & ( wr_count_next_wr_popping_R | ( { 5{ wr_pushing_T  }} & wr_count_next_wr_popping_C ));
  assign _035__X0 = { 5{ !wr_pushing }} & wr_count_next_wr_popping_X ;
  assign wr_count_next_no_wr_popping = wr_pushing ? _007_ : csb_fifo_wr_count;
  logic [0:0] wr_pushing_C7 ;
  logic [0:0] wr_pushing_R7 ;
  logic [0:0] wr_pushing_X7 ;
  assign wr_pushing_C7 = | wr_count_next_no_wr_popping_C ;
  assign wr_pushing_X7 = | wr_count_next_no_wr_popping_X ;
  assign wr_count_next_no_wr_popping_T = wr_pushing ? ( { 5{ wr_pushing_T  }} | _007__T ) : ( { 5{ wr_pushing_T  }} | csb_fifo_wr_count_T );
  assign wr_count_next_no_wr_popping_S = wr_pushing ? _007__S : csb_fifo_wr_count_S ;
  assign wr_pushing_R7 = ( | (wr_count_next_no_wr_popping_R | ( wr_count_next_no_wr_popping_C & ( { 5{ wr_pushing }} & _007__T | { 5{ !wr_pushing }} & csb_fifo_wr_count_T )))) && _007_ != csb_fifo_wr_count ;
  logic [4:0] _007__C0 ;
  logic [4:0] _007__R0 ;
  logic [4:0] _007__X0 ;
  assign _007__C0 = { 5{ wr_pushing }} ;
  assign _007__R0 = { 5{ wr_pushing }} & ( wr_count_next_no_wr_popping_R | ( { 5{ wr_pushing_T  }} & wr_count_next_no_wr_popping_C ));
  assign _007__X0 = { 5{ wr_pushing }} & wr_count_next_no_wr_popping_X ;
  logic [4:0] csb_fifo_wr_count_C6 ;
  logic [4:0] csb_fifo_wr_count_R6 ;
  logic [4:0] csb_fifo_wr_count_X6 ;
  assign csb_fifo_wr_count_C6 = { 5{ !wr_pushing }} ;
  assign csb_fifo_wr_count_R6 = { 5{ !wr_pushing }} & ( wr_count_next_no_wr_popping_R | ( { 5{ wr_pushing_T  }} & wr_count_next_no_wr_popping_C ));
  assign csb_fifo_wr_count_X6 = { 5{ !wr_pushing }} & wr_count_next_no_wr_popping_X ;
  assign wr_count_next = wr_popping ? wr_count_next_wr_popping : wr_count_next_no_wr_popping;
  logic [0:0] wr_popping_C1 ;
  logic [0:0] wr_popping_R1 ;
  logic [0:0] wr_popping_X1 ;
  assign wr_popping_C1 = | wr_count_next_C ;
  assign wr_popping_X1 = | wr_count_next_X ;
  assign wr_count_next_T = wr_popping ? ( { 5{ wr_popping_T  }} | wr_count_next_wr_popping_T ) : ( { 5{ wr_popping_T  }} | wr_count_next_no_wr_popping_T );
  assign wr_count_next_S = wr_popping ? wr_count_next_wr_popping_S : wr_count_next_no_wr_popping_S ;
  assign wr_popping_R1 = ( | (wr_count_next_R | ( wr_count_next_C & ( { 5{ wr_popping }} & wr_count_next_wr_popping_T | { 5{ !wr_popping }} & wr_count_next_no_wr_popping_T )))) && wr_count_next_wr_popping != wr_count_next_no_wr_popping ;
  logic [4:0] wr_count_next_wr_popping_C0 ;
  logic [4:0] wr_count_next_wr_popping_R0 ;
  logic [4:0] wr_count_next_wr_popping_X0 ;
  assign wr_count_next_wr_popping_C0 = { 5{ wr_popping }} ;
  assign wr_count_next_wr_popping_R0 = { 5{ wr_popping }} & ( wr_count_next_R | ( { 5{ wr_popping_T  }} & wr_count_next_C ));
  assign wr_count_next_wr_popping_X0 = { 5{ wr_popping }} & wr_count_next_X ;
  logic [4:0] wr_count_next_no_wr_popping_C1 ;
  logic [4:0] wr_count_next_no_wr_popping_R1 ;
  logic [4:0] wr_count_next_no_wr_popping_X1 ;
  assign wr_count_next_no_wr_popping_C1 = { 5{ !wr_popping }} ;
  assign wr_count_next_no_wr_popping_R1 = { 5{ !wr_popping }} & ( wr_count_next_R | ( { 5{ wr_popping_T  }} & wr_count_next_C ));
  assign wr_count_next_no_wr_popping_X1 = { 5{ !wr_popping }} & wr_count_next_X ;
  assign csb_fifo_wr_busy_next = wr_popping ? 1'b0 : wr_count_next_no_wr_popping_is_20;
  logic [0:0] wr_popping_C2 ;
  logic [0:0] wr_popping_R2 ;
  logic [0:0] wr_popping_X2 ;
  assign wr_popping_C2 = | csb_fifo_wr_busy_next_C ;
  assign wr_popping_X2 = | csb_fifo_wr_busy_next_X ;
  logic [0:0] wr_count_next_no_wr_popping_is_20_C0 ;
  logic [0:0] wr_count_next_no_wr_popping_is_20_R0 ;
  logic [0:0] wr_count_next_no_wr_popping_is_20_X0 ;
  assign wr_count_next_no_wr_popping_is_20_C0 = { 1{ !wr_popping }};
  assign wr_count_next_no_wr_popping_is_20_R0 = { 1{ !wr_popping }} & ( csb_fifo_wr_busy_next_R | ( { 1{ wr_popping_T  }} & csb_fifo_wr_busy_next_C ));
  assign wr_count_next_no_wr_popping_is_20_X0 = { 1{ !wr_popping }} & csb_fifo_wr_busy_next_X ;
  assign csb_fifo_wr_busy_next_T = wr_popping ? { 1{ | wr_popping_T  }} : ( { 1{ | wr_popping_T  }} | wr_count_next_no_wr_popping_is_20_T );
  assign csb_fifo_wr_busy_next_S = wr_popping ? wr_popping_S : wr_count_next_no_wr_popping_is_20_S ;
  assign wr_popping_R2 = ( | (csb_fifo_wr_busy_next_R | ( { 1{ !wr_popping }} & wr_count_next_no_wr_popping_is_20_T & csb_fifo_wr_busy_next_C ))) && 1'b0 != wr_count_next_no_wr_popping_is_20 ;
  assign _033_ = wr_pushing ^ wr_popping;
  assign _033__S = 0 ;
  logic [0:0] wr_pushing_C8 ;
  logic [0:0] wr_pushing_R8 ;
  logic [0:0] wr_pushing_X8 ;
  logic [0:0] wr_popping_C3 ;
  logic [0:0] wr_popping_R3 ;
  logic [0:0] wr_popping_X3 ;
  assign _033__T = wr_pushing_T | wr_popping_T ;
  assign wr_pushing_C8 = _033__C ;
  assign wr_pushing_X8 = _033__X ;
  assign wr_popping_C3 = _033__C ;
  assign wr_popping_X3 = _033__X ;
  assign wr_pushing_R8 = _033__R | ( _033__C & wr_popping_T );
  assign wr_popping_R3 = _033__R | ( _033__C & wr_pushing_T );
  logic [0:0] nvdla_core_clk_R0 ;
  logic [0:0] nvdla_core_clk_X0 ;
  logic [0:0] nvdla_core_clk_C0 ;
  logic [0:0] nvdla_core_clk_mgated_enable_R0 ;
  logic [0:0] nvdla_core_clk_mgated_enable_X0 ;
  logic [0:0] nvdla_core_clk_mgated_enable_C0 ;
  logic [0:0] nvdla_core_rstn_R0 ;
  logic [0:0] nvdla_core_rstn_X0 ;
  logic [0:0] nvdla_core_rstn_C0 ;
// module: NV_CLK_gate_power
  NV_CLK_gate_power nvdla_core_clk_mgate (
    .clk_T (  nvdla_core_clk_T  ),
    .clk_R (  nvdla_core_clk_R0  ),
    .clk_X (  nvdla_core_clk_X0  ),
    .clk_C (  nvdla_core_clk_C0  ),
    .clk_S (  nvdla_core_clk_S  ),
    .clk_en_T (  nvdla_core_clk_mgated_enable_T  ),
    .clk_en_R (  nvdla_core_clk_mgated_enable_R0  ),
    .clk_en_X (  nvdla_core_clk_mgated_enable_X0  ),
    .clk_en_C (  nvdla_core_clk_mgated_enable_C0  ),
    .clk_en_S (  nvdla_core_clk_mgated_enable_S  ),
    .reset__T (  nvdla_core_rstn_T  ),
    .reset__R (  nvdla_core_rstn_R0  ),
    .reset__X (  nvdla_core_rstn_X0  ),
    .reset__C (  nvdla_core_rstn_C0  ),
    .reset__S (  nvdla_core_rstn_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .clk_gated_T (  nvdla_core_clk_mgated_T  ),
    .clk_gated_R0 (  nvdla_core_clk_mgated_R  ),
    .clk_gated_X0 (  nvdla_core_clk_mgated_X  ),
    .clk_gated_C0 (  nvdla_core_clk_mgated_C  ),
    .clk_gated_S ( nvdla_core_clk_mgated_S ),
    .clk ( nvdla_core_clk ),
    .reset_ ( nvdla_core_rstn ),
    .clk_gated ( nvdla_core_clk_mgated ),
    .clk_en ( nvdla_core_clk_mgated_enable )
  );
  logic [0:0] nvdla_core_clk_R1 ;
  logic [0:0] nvdla_core_clk_X1 ;
  logic [0:0] nvdla_core_clk_C1 ;
  logic [288:0] csb_fifo_wr_pd_R0 ;
  logic [288:0] csb_fifo_wr_pd_X0 ;
  logic [288:0] csb_fifo_wr_pd_C0 ;
  logic [0:0] ore_R7 ;
  logic [0:0] ore_X7 ;
  logic [0:0] ore_C7 ;
  logic [31:0] pwrbus_ram_pd_R0 ;
  logic [31:0] pwrbus_ram_pd_X0 ;
  logic [31:0] pwrbus_ram_pd_C0 ;
  logic [4:0] csb_fifo_rd_adr_p_R1 ;
  logic [4:0] csb_fifo_rd_adr_p_X1 ;
  logic [4:0] csb_fifo_rd_adr_p_C1 ;
  logic [0:0] rd_enable_R0 ;
  logic [0:0] rd_enable_X0 ;
  logic [0:0] rd_enable_C0 ;
  logic [4:0] csb_fifo_wr_adr_R3 ;
  logic [4:0] csb_fifo_wr_adr_X3 ;
  logic [4:0] csb_fifo_wr_adr_C3 ;
  logic [0:0] wr_pushing_R9 ;
  logic [0:0] wr_pushing_X9 ;
  logic [0:0] wr_pushing_C9 ;
// module: \$paramod\nv_ram_rwsp_20x289\FORCE_CONTENTION_ASSERTION_RESET_ACTIVE=1'1
  \$paramod\nv_ram_rwsp_20x289\FORCE_CONTENTION_ASSERTION_RESET_ACTIVE=1'1 ram (
    .clk_T (  nvdla_core_clk_T  ),
    .clk_R (  nvdla_core_clk_R1  ),
    .clk_X (  nvdla_core_clk_X1  ),
    .clk_C (  nvdla_core_clk_C1  ),
    .clk_S (  nvdla_core_clk_S  ),
    .di_T (  csb_fifo_wr_pd_T  ),
    .di_R (  csb_fifo_wr_pd_R0  ),
    .di_X (  csb_fifo_wr_pd_X0  ),
    .di_C (  csb_fifo_wr_pd_C0  ),
    .di_S (  csb_fifo_wr_pd_S  ),
    .ore_T (  ore_T  ),
    .ore_R (  ore_R7  ),
    .ore_X (  ore_X7  ),
    .ore_C (  ore_C7  ),
    .ore_S (  ore_S  ),
    .pwrbus_ram_pd_T (  pwrbus_ram_pd_T  ),
    .pwrbus_ram_pd_R (  pwrbus_ram_pd_R0  ),
    .pwrbus_ram_pd_X (  pwrbus_ram_pd_X0  ),
    .pwrbus_ram_pd_C (  pwrbus_ram_pd_C0  ),
    .pwrbus_ram_pd_S (  pwrbus_ram_pd_S  ),
    .ra_T (  csb_fifo_rd_adr_p_T  ),
    .ra_R (  csb_fifo_rd_adr_p_R1  ),
    .ra_X (  csb_fifo_rd_adr_p_X1  ),
    .ra_C (  csb_fifo_rd_adr_p_C1  ),
    .ra_S (  csb_fifo_rd_adr_p_S  ),
    .re_T (  rd_enable_T  ),
    .re_R (  rd_enable_R0  ),
    .re_X (  rd_enable_X0  ),
    .re_C (  rd_enable_C0  ),
    .re_S (  rd_enable_S  ),
    .wa_T (  csb_fifo_wr_adr_T  ),
    .wa_R (  csb_fifo_wr_adr_R3  ),
    .wa_X (  csb_fifo_wr_adr_X3  ),
    .wa_C (  csb_fifo_wr_adr_C3  ),
    .wa_S (  csb_fifo_wr_adr_S  ),
    .we_T (  wr_pushing_T  ),
    .we_R (  wr_pushing_R9  ),
    .we_X (  wr_pushing_X9  ),
    .we_C (  wr_pushing_C9  ),
    .we_S (  wr_pushing_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .dout_T (  csb_fifo_rd_pd_p_T  ),
    .dout_R0 (  csb_fifo_rd_pd_p_R  ),
    .dout_X0 (  csb_fifo_rd_pd_p_X  ),
    .dout_C0 (  csb_fifo_rd_pd_p_C  ),
    .dout_S ( csb_fifo_rd_pd_p_S ),
    .we ( wr_pushing ),
    .wa ( csb_fifo_wr_adr ),
    .re ( rd_enable ),
    .di ( csb_fifo_wr_pd ),
    .clk ( nvdla_core_clk ),
    .pwrbus_ram_pd ( pwrbus_ram_pd ),
    .ra ( csb_fifo_rd_adr_p ),
    .ore ( ore ),
    .dout ( csb_fifo_rd_pd_p )
  );
  assign csb_fifo_rd_pd = csb_fifo_rd_pd_p;
  logic [288:0] csb_fifo_rd_pd_p_C0 ;
  logic [288:0] csb_fifo_rd_pd_p_R0 ;
  logic [288:0] csb_fifo_rd_pd_p_X0 ;
  assign csb_fifo_rd_pd_T = csb_fifo_rd_pd_p_T ;
  assign csb_fifo_rd_pd_p_C0 = csb_fifo_rd_pd_C ;
  assign csb_fifo_rd_pd_p_R0 = csb_fifo_rd_pd_R ;
  assign csb_fifo_rd_pd_p_X0 = csb_fifo_rd_pd_X ;
  assign csb_fifo_rd_pd_S = csb_fifo_rd_pd_p_S ;
  assign csb_fifo_rd_pvld = csb_fifo_rd_pvld_int;
  logic [0:0] csb_fifo_rd_pvld_int_C3 ;
  logic [0:0] csb_fifo_rd_pvld_int_R3 ;
  logic [0:0] csb_fifo_rd_pvld_int_X3 ;
  assign csb_fifo_rd_pvld_T = csb_fifo_rd_pvld_int_T ;
  assign csb_fifo_rd_pvld_int_C3 = csb_fifo_rd_pvld_C ;
  assign csb_fifo_rd_pvld_int_R3 = csb_fifo_rd_pvld_R ;
  assign csb_fifo_rd_pvld_int_X3 = csb_fifo_rd_pvld_X ;
  assign csb_fifo_rd_pvld_S = csb_fifo_rd_pvld_int_S ;
  assign csb_fifo_wr_idle_d0 = csb_fifo_wr_idle;
  logic [0:0] csb_fifo_wr_idle_C1 ;
  logic [0:0] csb_fifo_wr_idle_R1 ;
  logic [0:0] csb_fifo_wr_idle_X1 ;
  assign csb_fifo_wr_idle_d0_T = csb_fifo_wr_idle_T ;
  assign csb_fifo_wr_idle_C1 = csb_fifo_wr_idle_d0_C ;
  assign csb_fifo_wr_idle_R1 = csb_fifo_wr_idle_d0_R ;
  assign csb_fifo_wr_idle_X1 = csb_fifo_wr_idle_d0_X ;
  assign csb_fifo_wr_idle_d0_S = csb_fifo_wr_idle_S ;
  assign rd_popping = ore;
  logic [0:0] ore_C8 ;
  logic [0:0] ore_R8 ;
  logic [0:0] ore_X8 ;
  assign rd_popping_T = ore_T ;
  assign ore_C8 = rd_popping_C ;
  assign ore_R8 = rd_popping_R ;
  assign ore_X8 = rd_popping_X ;
  assign rd_popping_S = ore_S ;
  assign wr_count_next_is_20 = csb_fifo_wr_busy_next;
  logic [0:0] csb_fifo_wr_busy_next_C2 ;
  logic [0:0] csb_fifo_wr_busy_next_R2 ;
  logic [0:0] csb_fifo_wr_busy_next_X2 ;
  assign wr_count_next_is_20_T = csb_fifo_wr_busy_next_T ;
  assign csb_fifo_wr_busy_next_C2 = wr_count_next_is_20_C ;
  assign csb_fifo_wr_busy_next_R2 = wr_count_next_is_20_R ;
  assign csb_fifo_wr_busy_next_X2 = wr_count_next_is_20_X ;
  assign wr_count_next_is_20_S = csb_fifo_wr_busy_next_S ;
  assign wr_limit_muxed = 5'b00000;
  assign wr_limit_muxed_T = 0 ;
  assign wr_limit_muxed_S = 14'b1 ;
  assign wr_limit_reg = 5'b00000;
  assign wr_limit_reg_T = 0 ;
  assign wr_limit_reg_S = 14'b1 ;
  assign wr_reserving = wr_pushing;
  logic [0:0] wr_pushing_C10 ;
  logic [0:0] wr_pushing_R10 ;
  logic [0:0] wr_pushing_X10 ;
  assign wr_reserving_T = wr_pushing_T ;
  assign wr_pushing_C10 = wr_reserving_C ;
  assign wr_pushing_R10 = wr_reserving_R ;
  assign wr_pushing_X10 = wr_reserving_X ;
  assign wr_reserving_S = wr_pushing_S ;
  assign csb_fifo_rd_pd_p_C = ( csb_fifo_rd_pd_p_C0 );
  assign rd_enable_C = ( rd_enable_C0 );
  assign pwrbus_ram_pd_C = ( pwrbus_ram_pd_C0 );
  assign csb_fifo_wr_pd_C = ( csb_fifo_wr_pd_C0 );
  assign nvdla_core_rstn_C = ( nvdla_core_rstn_C0 );
  assign nvdla_core_clk_mgated_enable_C = ( nvdla_core_clk_mgated_enable_C0 );
  assign nvdla_core_clk_C = ( nvdla_core_clk_C0 ) | ( nvdla_core_clk_C1 );
  assign wr_count_next_no_wr_popping_is_20_C = ( wr_count_next_no_wr_popping_is_20_C0 );
  assign wr_count_next_wr_popping_C = ( wr_count_next_wr_popping_C0 );
  assign _007__C = ( _007__C0 );
  assign _035__C = ( _035__C0 );
  assign rd_count_p_next_no_rd_popping_not_0_C = ( rd_count_p_next_no_rd_popping_not_0_C0 );
  assign rd_count_p_next_rd_popping_not_0_C = ( rd_count_p_next_rd_popping_not_0_C0 );
  assign _006__C = ( _006__C0 );
  assign _034__C = ( _034__C0 );
  assign _005__C = ( _005__C0 );
  assign _009__C = ( _009__C0 );
  assign _004__C = ( _004__C0 );
  assign _008__C = ( _008__C0 );
  assign wr_count_next_C = ( wr_count_next_C0 );
  assign _033__C = ( _033__C0 );
  assign wr_adr_next_C = ( wr_adr_next_C0 );
  assign rd_adr_next_C = ( rd_adr_next_C0 );
  assign rd_count_p_next_C = ( rd_count_p_next_C0 );
  assign _003__C = ( _003__C0 );
  assign _002__C = ( _002__C0 );
  assign csb_fifo_rd_adr_p_C = ( csb_fifo_rd_adr_p_C0 ) | ( csb_fifo_rd_adr_p_C1 );
  assign _000__C = ( _000__C0 );
  assign _001__C = ( _001__C0 );
  assign rd_req_next_C = ( rd_req_next_C0 );
  assign csb_fifo_wr_busy_next_C = ( csb_fifo_wr_busy_next_C0 ) | ( csb_fifo_wr_busy_next_C1 ) | ( csb_fifo_wr_busy_next_C2 );
  assign rd_count_p_next_no_rd_popping_C = ( rd_count_p_next_no_rd_popping_C0 ) | ( rd_count_p_next_no_rd_popping_C1 );
  assign rd_count_p_next_rd_popping_C = ( rd_count_p_next_rd_popping_C0 ) | ( rd_count_p_next_rd_popping_C1 );
  assign _030__C = ( _030__C0 );
  assign _028__C = ( _028__C0 );
  assign _029__C = ( _029__C0 );
  assign _016__C = ( _016__C0 );
  assign _024__C = ( _024__C0 ) | ( _024__C1 ) | ( _024__C2 );
  assign _031__C = ( _031__C0 );
  assign _027__C = ( _027__C0 );
  assign _026__C = ( _026__C0 );
  assign wr_popping_C = ( wr_popping_C0 ) | ( wr_popping_C1 ) | ( wr_popping_C2 ) | ( wr_popping_C3 );
  assign _025__C = ( _025__C0 );
  assign ore_C = ( ore_C0 ) | ( ore_C1 ) | ( ore_C2 ) | ( ore_C3 ) | ( ore_C4 ) | ( ore_C5 ) | ( ore_C6 ) | ( ore_C7 ) | ( ore_C8 );
  assign _032__C = ( _032__C0 );
  assign csb_fifo_wr_busy_int_C = ( csb_fifo_wr_busy_int_C0 ) | ( csb_fifo_wr_busy_int_C1 );
  assign wr_pushing_C = ( wr_pushing_C0 ) | ( wr_pushing_C1 ) | ( wr_pushing_C2 ) | ( wr_pushing_C3 ) | ( wr_pushing_C4 ) | ( wr_pushing_C5 ) | ( wr_pushing_C6 ) | ( wr_pushing_C7 ) | ( wr_pushing_C8 ) | ( wr_pushing_C9 ) | ( wr_pushing_C10 );
  assign rd_pushing_C = ( rd_pushing_C0 ) | ( rd_pushing_C1 ) | ( rd_pushing_C2 ) | ( rd_pushing_C3 );
  assign _012__C = ( _012__C0 ) | ( _012__C1 );
  assign csb_fifo_rd_prdy_C = ( csb_fifo_rd_prdy_C0 ) | ( csb_fifo_rd_prdy_C1 );
  assign csb_fifo_wr_pvld_C = ( csb_fifo_wr_pvld_C0 ) | ( csb_fifo_wr_pvld_C1 );
  assign _011__C = ( _011__C0 );
  assign _015__C = ( _015__C0 );
  assign _022__C = ( _022__C0 );
  assign _014__C = ( _014__C0 );
  assign rd_idle_C = ( rd_idle_C0 );
  assign _021__C = ( _021__C0 );
  assign _010__C = ( _010__C0 );
  assign _013__C = ( _013__C0 );
  assign _020__C = ( _020__C0 );
  assign _019__C = ( _019__C0 );
  assign _023__C = ( _023__C0 );
  assign rd_count_p_next_not_0_C = ( rd_count_p_next_not_0_C0 ) | ( rd_count_p_next_not_0_C1 );
  assign _018__C = ( _018__C0 );
  assign csb_fifo_rd_pvld_p_C = ( csb_fifo_rd_pvld_p_C0 ) | ( csb_fifo_rd_pvld_p_C1 ) | ( csb_fifo_rd_pvld_p_C2 ) | ( csb_fifo_rd_pvld_p_C3 );
  assign _017__C = ( _017__C0 );
  assign csb_fifo_rd_pvld_int_C = ( csb_fifo_rd_pvld_int_C0 ) | ( csb_fifo_rd_pvld_int_C1 ) | ( csb_fifo_rd_pvld_int_C2 ) | ( csb_fifo_rd_pvld_int_C3 );
  assign wr_count_next_no_wr_popping_C = ( wr_count_next_no_wr_popping_C0 ) | ( wr_count_next_no_wr_popping_C1 );
  assign csb_fifo_rd_count_p_C = ( csb_fifo_rd_count_p_C0 ) | ( csb_fifo_rd_count_p_C1 ) | ( csb_fifo_rd_count_p_C2 ) | ( csb_fifo_rd_count_p_C3 ) | ( csb_fifo_rd_count_p_C4 ) | ( csb_fifo_rd_count_p_C5 );
  assign csb_fifo_rd_adr_C = ( csb_fifo_rd_adr_C0 ) | ( csb_fifo_rd_adr_C1 ) | ( csb_fifo_rd_adr_C2 );
  assign csb_fifo_wr_adr_C = ( csb_fifo_wr_adr_C0 ) | ( csb_fifo_wr_adr_C1 ) | ( csb_fifo_wr_adr_C2 ) | ( csb_fifo_wr_adr_C3 );
  assign csb_fifo_wr_prdy_C = ( csb_fifo_wr_prdy_C0 ) | ( csb_fifo_wr_prdy_C1 );
  assign csb_fifo_wr_idle_C = ( csb_fifo_wr_idle_C0 ) | ( csb_fifo_wr_idle_C1 );
  assign csb_fifo_wr_count_C = ( csb_fifo_wr_count_C0 ) | ( csb_fifo_wr_count_C1 ) | ( csb_fifo_wr_count_C2 ) | ( csb_fifo_wr_count_C3 ) | ( csb_fifo_wr_count_C4 ) | ( csb_fifo_wr_count_C5 ) | ( csb_fifo_wr_count_C6 );
  assign csb_fifo_rd_pvld_C = ( csb_fifo_rd_pvld_C0 );
  assign csb_fifo_rd_pd_C = ( csb_fifo_rd_pd_C0 );
  assign csb_fifo_rd_pd_p_X = ( csb_fifo_rd_pd_p_X0 );
  assign rd_enable_X = ( rd_enable_X0 );
  assign pwrbus_ram_pd_X = ( pwrbus_ram_pd_X0 );
  assign csb_fifo_wr_pd_X = ( csb_fifo_wr_pd_X0 );
  assign nvdla_core_rstn_X = ( nvdla_core_rstn_X0 );
  assign nvdla_core_clk_mgated_enable_X = ( nvdla_core_clk_mgated_enable_X0 );
  assign nvdla_core_clk_X = ( nvdla_core_clk_X0 ) | ( nvdla_core_clk_X1 );
  assign wr_count_next_no_wr_popping_is_20_X = ( wr_count_next_no_wr_popping_is_20_X0 );
  assign wr_count_next_wr_popping_X = ( wr_count_next_wr_popping_X0 );
  assign _007__X = ( _007__X0 );
  assign _035__X = ( _035__X0 );
  assign rd_count_p_next_no_rd_popping_not_0_X = ( rd_count_p_next_no_rd_popping_not_0_X0 );
  assign rd_count_p_next_rd_popping_not_0_X = ( rd_count_p_next_rd_popping_not_0_X0 );
  assign _006__X = ( _006__X0 );
  assign _034__X = ( _034__X0 );
  assign _005__X = ( _005__X0 );
  assign _009__X = ( _009__X0 );
  assign _004__X = ( _004__X0 );
  assign _008__X = ( _008__X0 );
  assign wr_count_next_X = ( wr_count_next_X0 );
  assign _033__X = ( _033__X0 );
  assign wr_adr_next_X = ( wr_adr_next_X0 );
  assign rd_adr_next_X = ( rd_adr_next_X0 );
  assign rd_count_p_next_X = ( rd_count_p_next_X0 );
  assign _003__X = ( _003__X0 );
  assign _002__X = ( _002__X0 );
  assign csb_fifo_rd_adr_p_X = ( csb_fifo_rd_adr_p_X0 ) | ( csb_fifo_rd_adr_p_X1 );
  assign _000__X = ( _000__X0 );
  assign _001__X = ( _001__X0 );
  assign rd_req_next_X = ( rd_req_next_X0 );
  assign csb_fifo_wr_busy_next_X = ( csb_fifo_wr_busy_next_X0 ) | ( csb_fifo_wr_busy_next_X1 ) | ( csb_fifo_wr_busy_next_X2 );
  assign rd_count_p_next_no_rd_popping_X = ( rd_count_p_next_no_rd_popping_X0 ) | ( rd_count_p_next_no_rd_popping_X1 );
  assign rd_count_p_next_rd_popping_X = ( rd_count_p_next_rd_popping_X0 ) | ( rd_count_p_next_rd_popping_X1 );
  assign _030__X = ( _030__X0 );
  assign _028__X = ( _028__X0 );
  assign _029__X = ( _029__X0 );
  assign _016__X = ( _016__X0 );
  assign _024__X = ( _024__X0 ) | ( _024__X1 ) | ( _024__X2 );
  assign _031__X = ( _031__X0 );
  assign _027__X = ( _027__X0 );
  assign _026__X = ( _026__X0 );
  assign wr_popping_X = ( wr_popping_X0 ) | ( wr_popping_X1 ) | ( wr_popping_X2 ) | ( wr_popping_X3 );
  assign _025__X = ( _025__X0 );
  assign ore_X = ( ore_X0 ) | ( ore_X1 ) | ( ore_X2 ) | ( ore_X3 ) | ( ore_X4 ) | ( ore_X5 ) | ( ore_X6 ) | ( ore_X7 ) | ( ore_X8 );
  assign _032__X = ( _032__X0 );
  assign csb_fifo_wr_busy_int_X = ( csb_fifo_wr_busy_int_X0 ) | ( csb_fifo_wr_busy_int_X1 );
  assign wr_pushing_X = ( wr_pushing_X0 ) | ( wr_pushing_X1 ) | ( wr_pushing_X2 ) | ( wr_pushing_X3 ) | ( wr_pushing_X4 ) | ( wr_pushing_X5 ) | ( wr_pushing_X6 ) | ( wr_pushing_X7 ) | ( wr_pushing_X8 ) | ( wr_pushing_X9 ) | ( wr_pushing_X10 );
  assign rd_pushing_X = ( rd_pushing_X0 ) | ( rd_pushing_X1 ) | ( rd_pushing_X2 ) | ( rd_pushing_X3 );
  assign _012__X = ( _012__X0 ) | ( _012__X1 );
  assign csb_fifo_rd_prdy_X = ( csb_fifo_rd_prdy_X0 ) | ( csb_fifo_rd_prdy_X1 );
  assign csb_fifo_wr_pvld_X = ( csb_fifo_wr_pvld_X0 ) | ( csb_fifo_wr_pvld_X1 );
  assign _011__X = ( _011__X0 );
  assign _015__X = ( _015__X0 );
  assign _022__X = ( _022__X0 );
  assign _014__X = ( _014__X0 );
  assign rd_idle_X = ( rd_idle_X0 );
  assign _021__X = ( _021__X0 );
  assign _010__X = ( _010__X0 );
  assign _013__X = ( _013__X0 );
  assign _020__X = ( _020__X0 );
  assign _019__X = ( _019__X0 );
  assign _023__X = ( _023__X0 );
  assign rd_count_p_next_not_0_X = ( rd_count_p_next_not_0_X0 ) | ( rd_count_p_next_not_0_X1 );
  assign _018__X = ( _018__X0 );
  assign csb_fifo_rd_pvld_p_X = ( csb_fifo_rd_pvld_p_X0 ) | ( csb_fifo_rd_pvld_p_X1 ) | ( csb_fifo_rd_pvld_p_X2 ) | ( csb_fifo_rd_pvld_p_X3 );
  assign _017__X = ( _017__X0 );
  assign csb_fifo_rd_pvld_int_X = ( csb_fifo_rd_pvld_int_X0 ) | ( csb_fifo_rd_pvld_int_X1 ) | ( csb_fifo_rd_pvld_int_X2 ) | ( csb_fifo_rd_pvld_int_X3 );
  assign wr_count_next_no_wr_popping_X = ( wr_count_next_no_wr_popping_X0 ) | ( wr_count_next_no_wr_popping_X1 );
  assign csb_fifo_rd_count_p_X = ( csb_fifo_rd_count_p_X0 ) | ( csb_fifo_rd_count_p_X1 ) | ( csb_fifo_rd_count_p_X2 ) | ( csb_fifo_rd_count_p_X3 ) | ( csb_fifo_rd_count_p_X4 ) | ( csb_fifo_rd_count_p_X5 );
  assign csb_fifo_rd_adr_X = ( csb_fifo_rd_adr_X0 ) | ( csb_fifo_rd_adr_X1 ) | ( csb_fifo_rd_adr_X2 );
  assign csb_fifo_wr_adr_X = ( csb_fifo_wr_adr_X0 ) | ( csb_fifo_wr_adr_X1 ) | ( csb_fifo_wr_adr_X2 ) | ( csb_fifo_wr_adr_X3 );
  assign csb_fifo_wr_prdy_X = ( csb_fifo_wr_prdy_X0 ) | ( csb_fifo_wr_prdy_X1 );
  assign csb_fifo_wr_idle_X = ( csb_fifo_wr_idle_X0 ) | ( csb_fifo_wr_idle_X1 );
  assign csb_fifo_wr_count_X = ( csb_fifo_wr_count_X0 ) | ( csb_fifo_wr_count_X1 ) | ( csb_fifo_wr_count_X2 ) | ( csb_fifo_wr_count_X3 ) | ( csb_fifo_wr_count_X4 ) | ( csb_fifo_wr_count_X5 ) | ( csb_fifo_wr_count_X6 );
  assign csb_fifo_rd_pvld_X = ( csb_fifo_rd_pvld_X0 );
  assign csb_fifo_rd_pd_X = ( csb_fifo_rd_pd_X0 );
  assign csb_fifo_rd_pd_p_R = ( csb_fifo_rd_pd_p_X0 & csb_fifo_rd_pd_p_R0 );
  assign rd_enable_R = ( rd_enable_X0 & rd_enable_R0 );
  assign pwrbus_ram_pd_R = ( pwrbus_ram_pd_X0 & pwrbus_ram_pd_R0 );
  assign csb_fifo_wr_pd_R = ( csb_fifo_wr_pd_X0 & csb_fifo_wr_pd_R0 );
  assign nvdla_core_rstn_R = ( nvdla_core_rstn_X0 & nvdla_core_rstn_R0 );
  assign nvdla_core_clk_mgated_enable_R = ( nvdla_core_clk_mgated_enable_X0 & nvdla_core_clk_mgated_enable_R0 );
  assign nvdla_core_clk_R = ( nvdla_core_clk_X0 & nvdla_core_clk_R0 ) | ( nvdla_core_clk_X1 & nvdla_core_clk_R1 );
  assign wr_count_next_no_wr_popping_is_20_R = ( wr_count_next_no_wr_popping_is_20_X0 & wr_count_next_no_wr_popping_is_20_R0 );
  assign wr_count_next_wr_popping_R = ( wr_count_next_wr_popping_X0 & wr_count_next_wr_popping_R0 );
  assign _007__R = ( _007__X0 & _007__R0 );
  assign _035__R = ( _035__X0 & _035__R0 );
  assign rd_count_p_next_no_rd_popping_not_0_R = ( rd_count_p_next_no_rd_popping_not_0_X0 & rd_count_p_next_no_rd_popping_not_0_R0 );
  assign rd_count_p_next_rd_popping_not_0_R = ( rd_count_p_next_rd_popping_not_0_X0 & rd_count_p_next_rd_popping_not_0_R0 );
  assign _006__R = ( _006__X0 & _006__R0 );
  assign _034__R = ( _034__X0 & _034__R0 );
  assign _005__R = ( _005__X0 & _005__R0 );
  assign _009__R = ( _009__X0 & _009__R0 );
  assign _004__R = ( _004__X0 & _004__R0 );
  assign _008__R = ( _008__X0 & _008__R0 );
  assign wr_count_next_R = ( wr_count_next_X0 & wr_count_next_R0 );
  assign _033__R = ( _033__X0 & _033__R0 );
  assign wr_adr_next_R = ( wr_adr_next_X0 & wr_adr_next_R0 );
  assign rd_adr_next_R = ( rd_adr_next_X0 & rd_adr_next_R0 );
  assign rd_count_p_next_R = ( rd_count_p_next_X0 & rd_count_p_next_R0 );
  assign _003__R = ( _003__X0 & _003__R0 );
  assign _002__R = ( _002__X0 & _002__R0 );
  assign csb_fifo_rd_adr_p_R = ( csb_fifo_rd_adr_p_X0 & csb_fifo_rd_adr_p_R0 ) | ( csb_fifo_rd_adr_p_X1 & csb_fifo_rd_adr_p_R1 );
  assign _000__R = ( _000__X0 & _000__R0 );
  assign _001__R = ( _001__X0 & _001__R0 );
  assign rd_req_next_R = ( rd_req_next_X0 & rd_req_next_R0 );
  assign csb_fifo_wr_busy_next_R = ( csb_fifo_wr_busy_next_X0 & csb_fifo_wr_busy_next_R0 ) | ( csb_fifo_wr_busy_next_X1 & csb_fifo_wr_busy_next_R1 ) | ( csb_fifo_wr_busy_next_X2 & csb_fifo_wr_busy_next_R2 );
  assign rd_count_p_next_no_rd_popping_R = ( rd_count_p_next_no_rd_popping_X0 & rd_count_p_next_no_rd_popping_R0 ) | ( rd_count_p_next_no_rd_popping_X1 & rd_count_p_next_no_rd_popping_R1 );
  assign rd_count_p_next_rd_popping_R = ( rd_count_p_next_rd_popping_X0 & rd_count_p_next_rd_popping_R0 ) | ( rd_count_p_next_rd_popping_X1 & rd_count_p_next_rd_popping_R1 );
  assign _030__R = ( _030__X0 & _030__R0 );
  assign _028__R = ( _028__X0 & _028__R0 );
  assign _029__R = ( _029__X0 & _029__R0 );
  assign _016__R = ( _016__X0 & _016__R0 );
  assign _024__R = ( _024__X0 & _024__R0 ) | ( _024__X1 & _024__R1 ) | ( _024__X2 & _024__R2 );
  assign _031__R = ( _031__X0 & _031__R0 );
  assign _027__R = ( _027__X0 & _027__R0 );
  assign _026__R = ( _026__X0 & _026__R0 );
  assign wr_popping_R = ( wr_popping_X0 & wr_popping_R0 ) | ( wr_popping_X1 & wr_popping_R1 ) | ( wr_popping_X2 & wr_popping_R2 ) | ( wr_popping_X3 & wr_popping_R3 );
  assign _025__R = ( _025__X0 & _025__R0 );
  assign ore_R = ( ore_X0 & ore_R0 ) | ( ore_X1 & ore_R1 ) | ( ore_X2 & ore_R2 ) | ( ore_X3 & ore_R3 ) | ( ore_X4 & ore_R4 ) | ( ore_X5 & ore_R5 ) | ( ore_X6 & ore_R6 ) | ( ore_X7 & ore_R7 ) | ( ore_X8 & ore_R8 );
  assign _032__R = ( _032__X0 & _032__R0 );
  assign csb_fifo_wr_busy_int_R = ( csb_fifo_wr_busy_int_X0 & csb_fifo_wr_busy_int_R0 ) | ( csb_fifo_wr_busy_int_X1 & csb_fifo_wr_busy_int_R1 );
  assign wr_pushing_R = ( wr_pushing_X0 & wr_pushing_R0 ) | ( wr_pushing_X1 & wr_pushing_R1 ) | ( wr_pushing_X2 & wr_pushing_R2 ) | ( wr_pushing_X3 & wr_pushing_R3 ) | ( wr_pushing_X4 & wr_pushing_R4 ) | ( wr_pushing_X5 & wr_pushing_R5 ) | ( wr_pushing_X6 & wr_pushing_R6 ) | ( wr_pushing_X7 & wr_pushing_R7 ) | ( wr_pushing_X8 & wr_pushing_R8 ) | ( wr_pushing_X9 & wr_pushing_R9 ) | ( wr_pushing_X10 & wr_pushing_R10 );
  assign rd_pushing_R = ( rd_pushing_X0 & rd_pushing_R0 ) | ( rd_pushing_X1 & rd_pushing_R1 ) | ( rd_pushing_X2 & rd_pushing_R2 ) | ( rd_pushing_X3 & rd_pushing_R3 );
  assign _012__R = ( _012__X0 & _012__R0 ) | ( _012__X1 & _012__R1 );
  assign csb_fifo_rd_prdy_R = ( csb_fifo_rd_prdy_X0 & csb_fifo_rd_prdy_R0 ) | ( csb_fifo_rd_prdy_X1 & csb_fifo_rd_prdy_R1 );
  assign csb_fifo_wr_pvld_R = ( csb_fifo_wr_pvld_X0 & csb_fifo_wr_pvld_R0 ) | ( csb_fifo_wr_pvld_X1 & csb_fifo_wr_pvld_R1 );
  assign _011__R = ( _011__X0 & _011__R0 );
  assign _015__R = ( _015__X0 & _015__R0 );
  assign _022__R = ( _022__X0 & _022__R0 );
  assign _014__R = ( _014__X0 & _014__R0 );
  assign rd_idle_R = ( rd_idle_X0 & rd_idle_R0 );
  assign _021__R = ( _021__X0 & _021__R0 );
  assign _010__R = ( _010__X0 & _010__R0 );
  assign _013__R = ( _013__X0 & _013__R0 );
  assign _020__R = ( _020__X0 & _020__R0 );
  assign _019__R = ( _019__X0 & _019__R0 );
  assign _023__R = ( _023__X0 & _023__R0 );
  assign rd_count_p_next_not_0_R = ( rd_count_p_next_not_0_X0 & rd_count_p_next_not_0_R0 ) | ( rd_count_p_next_not_0_X1 & rd_count_p_next_not_0_R1 );
  assign _018__R = ( _018__X0 & _018__R0 );
  assign csb_fifo_rd_pvld_p_R = ( csb_fifo_rd_pvld_p_X0 & csb_fifo_rd_pvld_p_R0 ) | ( csb_fifo_rd_pvld_p_X1 & csb_fifo_rd_pvld_p_R1 ) | ( csb_fifo_rd_pvld_p_X2 & csb_fifo_rd_pvld_p_R2 ) | ( csb_fifo_rd_pvld_p_X3 & csb_fifo_rd_pvld_p_R3 );
  assign _017__R = ( _017__X0 & _017__R0 );
  assign csb_fifo_rd_pvld_int_R = ( csb_fifo_rd_pvld_int_X0 & csb_fifo_rd_pvld_int_R0 ) | ( csb_fifo_rd_pvld_int_X1 & csb_fifo_rd_pvld_int_R1 ) | ( csb_fifo_rd_pvld_int_X2 & csb_fifo_rd_pvld_int_R2 ) | ( csb_fifo_rd_pvld_int_X3 & csb_fifo_rd_pvld_int_R3 );
  assign wr_count_next_no_wr_popping_R = ( wr_count_next_no_wr_popping_X0 & wr_count_next_no_wr_popping_R0 ) | ( wr_count_next_no_wr_popping_X1 & wr_count_next_no_wr_popping_R1 );
  assign csb_fifo_rd_count_p_R = ( csb_fifo_rd_count_p_X0 & csb_fifo_rd_count_p_R0 ) | ( csb_fifo_rd_count_p_X1 & csb_fifo_rd_count_p_R1 ) | ( csb_fifo_rd_count_p_X2 & csb_fifo_rd_count_p_R2 ) | ( csb_fifo_rd_count_p_X3 & csb_fifo_rd_count_p_R3 ) | ( csb_fifo_rd_count_p_X4 & csb_fifo_rd_count_p_R4 ) | ( csb_fifo_rd_count_p_X5 & csb_fifo_rd_count_p_R5 );
  assign csb_fifo_rd_adr_R = ( csb_fifo_rd_adr_X0 & csb_fifo_rd_adr_R0 ) | ( csb_fifo_rd_adr_X1 & csb_fifo_rd_adr_R1 ) | ( csb_fifo_rd_adr_X2 & csb_fifo_rd_adr_R2 );
  assign csb_fifo_wr_adr_R = ( csb_fifo_wr_adr_X0 & csb_fifo_wr_adr_R0 ) | ( csb_fifo_wr_adr_X1 & csb_fifo_wr_adr_R1 ) | ( csb_fifo_wr_adr_X2 & csb_fifo_wr_adr_R2 ) | ( csb_fifo_wr_adr_X3 & csb_fifo_wr_adr_R3 );
  assign csb_fifo_wr_prdy_R = ( csb_fifo_wr_prdy_X0 & csb_fifo_wr_prdy_R0 ) | ( csb_fifo_wr_prdy_X1 & csb_fifo_wr_prdy_R1 );
  assign csb_fifo_wr_idle_R = ( csb_fifo_wr_idle_X0 & csb_fifo_wr_idle_R0 ) | ( csb_fifo_wr_idle_X1 & csb_fifo_wr_idle_R1 );
  assign csb_fifo_wr_count_R = ( csb_fifo_wr_count_X0 & csb_fifo_wr_count_R0 ) | ( csb_fifo_wr_count_X1 & csb_fifo_wr_count_R1 ) | ( csb_fifo_wr_count_X2 & csb_fifo_wr_count_R2 ) | ( csb_fifo_wr_count_X3 & csb_fifo_wr_count_R3 ) | ( csb_fifo_wr_count_X4 & csb_fifo_wr_count_R4 ) | ( csb_fifo_wr_count_X5 & csb_fifo_wr_count_R5 ) | ( csb_fifo_wr_count_X6 & csb_fifo_wr_count_R6 );
  assign csb_fifo_rd_pvld_R = ( csb_fifo_rd_pvld_X0 & csb_fifo_rd_pvld_R0 );
  assign csb_fifo_rd_pd_R = ( csb_fifo_rd_pd_X0 & csb_fifo_rd_pd_R0 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { csb_fifo_wr_idle_d0_R , csb_fifo_wr_idle_d0_C , csb_fifo_wr_idle_d0_X , nvdla_core_clk_mgated_R , nvdla_core_clk_mgated_C , nvdla_core_clk_mgated_X , rd_popping_R , rd_popping_C , rd_popping_X , wr_count_next_is_20_R , wr_count_next_is_20_C , wr_count_next_is_20_X , wr_limit_muxed_R , wr_limit_muxed_C , wr_limit_muxed_X , wr_limit_reg_R , wr_limit_reg_C , wr_limit_reg_X , wr_reserving_R , wr_reserving_C , wr_reserving_X  } = 0;
  always @( posedge nvdla_core_clk_mgated ) begin
    if( !nvdla_core_rstn ) csb_fifo_rd_pvld_int_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) csb_fifo_rd_pvld_int_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) csb_fifo_rd_pvld_int_PREV_VAL1 <= csb_fifo_rd_pvld_int ;
    if( INSTR_IN_ZY ) csb_fifo_rd_pvld_int_PREV_VAL2 <= csb_fifo_rd_pvld_int_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk_mgated ) begin
    if( !nvdla_core_rstn ) csb_fifo_rd_pvld_p_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) csb_fifo_rd_pvld_p_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) csb_fifo_rd_pvld_p_PREV_VAL1 <= csb_fifo_rd_pvld_p ;
    if( INSTR_IN_ZY ) csb_fifo_rd_pvld_p_PREV_VAL2 <= csb_fifo_rd_pvld_p_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk_mgated ) begin
    if( !nvdla_core_rstn ) csb_fifo_rd_count_p_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) csb_fifo_rd_count_p_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) csb_fifo_rd_count_p_PREV_VAL1 <= csb_fifo_rd_count_p ;
    if( INSTR_IN_ZY ) csb_fifo_rd_count_p_PREV_VAL2 <= csb_fifo_rd_count_p_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk_mgated ) begin
    if( !nvdla_core_rstn ) rd_pushing_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) rd_pushing_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) rd_pushing_PREV_VAL1 <= rd_pushing ;
    if( INSTR_IN_ZY ) rd_pushing_PREV_VAL2 <= rd_pushing_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk_mgated ) begin
    if( !nvdla_core_rstn ) wr_popping_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) wr_popping_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) wr_popping_PREV_VAL1 <= wr_popping ;
    if( INSTR_IN_ZY ) wr_popping_PREV_VAL2 <= wr_popping_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk_mgated ) begin
    if( !nvdla_core_rstn ) csb_fifo_rd_adr_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) csb_fifo_rd_adr_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) csb_fifo_rd_adr_PREV_VAL1 <= csb_fifo_rd_adr ;
    if( INSTR_IN_ZY ) csb_fifo_rd_adr_PREV_VAL2 <= csb_fifo_rd_adr_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk_mgated ) begin
    if( !nvdla_core_rstn ) csb_fifo_wr_adr_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) csb_fifo_wr_adr_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) csb_fifo_wr_adr_PREV_VAL1 <= csb_fifo_wr_adr ;
    if( INSTR_IN_ZY ) csb_fifo_wr_adr_PREV_VAL2 <= csb_fifo_wr_adr_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk_mgated ) begin
    if( !nvdla_core_rstn ) csb_fifo_wr_count_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) csb_fifo_wr_count_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) csb_fifo_wr_count_PREV_VAL1 <= csb_fifo_wr_count ;
    if( INSTR_IN_ZY ) csb_fifo_wr_count_PREV_VAL2 <= csb_fifo_wr_count_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk_mgated ) begin
    if( !nvdla_core_rstn ) csb_fifo_wr_busy_int_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) csb_fifo_wr_busy_int_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) csb_fifo_wr_busy_int_PREV_VAL1 <= csb_fifo_wr_busy_int ;
    if( INSTR_IN_ZY ) csb_fifo_wr_busy_int_PREV_VAL2 <= csb_fifo_wr_busy_int_PREV_VAL1 ;
  end
 // ground taints for unused wire slices
  assert property( csb_fifo_rd_adr_r_flag == 0 || csb_fifo_rd_adr_PREV_VAL1 == csb_fifo_rd_adr_PREV_VAL2 );
  assert property( csb_fifo_rd_count_p_r_flag == 0 || csb_fifo_rd_count_p_PREV_VAL1 == csb_fifo_rd_count_p_PREV_VAL2 );
  assert property( csb_fifo_rd_pvld_int_r_flag == 0 || csb_fifo_rd_pvld_int_PREV_VAL1 == csb_fifo_rd_pvld_int_PREV_VAL2 );
  assert property( csb_fifo_rd_pvld_p_r_flag == 0 || csb_fifo_rd_pvld_p_PREV_VAL1 == csb_fifo_rd_pvld_p_PREV_VAL2 );
  assert property( csb_fifo_wr_adr_r_flag == 0 || csb_fifo_wr_adr_PREV_VAL1 == csb_fifo_wr_adr_PREV_VAL2 );
  assert property( csb_fifo_wr_busy_int_r_flag == 0 || csb_fifo_wr_busy_int_PREV_VAL1 == csb_fifo_wr_busy_int_PREV_VAL2 );
  assert property( csb_fifo_wr_count_r_flag == 0 || csb_fifo_wr_count_PREV_VAL1 == csb_fifo_wr_count_PREV_VAL2 );
  assert property( rd_pushing_r_flag == 0 || rd_pushing_PREV_VAL1 == rd_pushing_PREV_VAL2 );
  assert property( wr_popping_r_flag == 0 || wr_popping_PREV_VAL1 == wr_popping_PREV_VAL2 );
  assign rst_zy = !nvdla_core_rstn ;
endmodule
