module \$paramod$d8a5d5710b4a18e7418719ad55fde4180d7f8774\SDP_X_mgc_pipe_v10 ( arst , clk , dout , en , ldin , ldout , srst , INSTR_IN_ZY , arst_T , arst_S , clk_T , clk_S , din_R0 , dout_T , dout_S , en_T , en_S , ldin_T , ldin_S , ldout_T , ldout_S , sd_R0 , srst_T , srst_S , vdin_R0 , vdout_R0 , din , sd , vdin , vdout , arst_R , clk_R , din_T , din_S , dout_R , en_R , ldin_R , ldout_R , sd_T , sd_S , srst_R , vdin_T , vdin_S , vdout_T , vdout_S );
  logic rst_zy;
  integer i;
  input INSTR_IN_ZY;
  input arst;
  input arst_T ;
  output arst_R ;
  input [13:0] arst_S ;
  input clk;
  input clk_T ;
  output clk_R ;
  input [13:0] clk_S ;
  output [799:0] din;
  logic [799:0] din ;
  output [799:0] din_T ;
  logic [799:0] din_T ;
  logic [799:0] din_R ;
  logic [13:0] din_S ;
  input [799:0] din_R0 ;
  output [13:0] din_S ;
  input [799:0] dout;
  input [799:0] dout_T ;
  output [799:0] dout_R ;
  input [13:0] dout_S ;
  input en;
  input en_T ;
  output en_R ;
  input [13:0] en_S ;
  input ldin;
  input ldin_T ;
  output ldin_R ;
  input [13:0] ldin_S ;
  input ldout;
  input ldout_T ;
  output ldout_R ;
  input [13:0] ldout_S ;
  output [1:0] sd;
  logic [1:0] sd ;
  output [1:0] sd_T ;
  logic [1:0] sd_T ;
  logic [1:0] sd_R ;
  logic [13:0] sd_S ;
  input [1:0] sd_R0 ;
  output [13:0] sd_S ;
  input srst;
  input srst_T ;
  output srst_R ;
  input [13:0] srst_S ;
  output vdin;
  logic vdin ;
  output vdin_T ;
  logic vdin_T ;
  logic vdin_R ;
  logic [13:0] vdin_S ;
  input vdin_R0 ;
  output [13:0] vdin_S ;
  output vdout;
  logic vdout ;
  output vdout_T ;
  logic vdout_T ;
  logic vdout_R ;
  logic [13:0] vdout_S ;
  input vdout_R0 ;
  output [13:0] vdout_S ;
  logic [0:0] arst_R0 ;
  logic [0:0] clk_R0 ;
  logic [799:0] dout_R0 ;
  logic [0:0] en_R0 ;
  logic [0:0] ldout_R0 ;
  logic [0:0] srst_R0 ;
  logic [0:0] ldin_R0 ;
// module: \$paramod$66e8feba2cd9d6a908864bb089c98022f5e862e0\SDP_X_mgc_out_fifo_wait_core_v9
  \$paramod$66e8feba2cd9d6a908864bb089c98022f5e862e0\SDP_X_mgc_out_fifo_wait_core_v9 FIFO (
    .arst_T (  arst_T  ),
    .arst_R (  arst_R0  ),
    .arst_S (  arst_S  ),
    .d_T (  dout_T  ),
    .d_R (  dout_R0  ),
    .d_S (  dout_S  ),
    .en_T (  en_T  ),
    .en_R (  en_R0  ),
    .en_S (  en_S  ),
    .ld_T (  ldout_T  ),
    .ld_R (  ldout_R0  ),
    .ld_S (  ldout_S  ),
    .srst_T (  srst_T  ),
    .srst_R (  srst_R0  ),
    .srst_S (  srst_S  ),
    .vz_T (  ldin_T  ),
    .vz_R (  ldin_R0  ),
    .vz_S (  ldin_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .lz_T (  vdin_T  ),
    .lz_R0 (  vdin_R  ),
    .lz_S (  vdin_S  ),
    .sd_T (  sd_T  ),
    .sd_R0 (  sd_R  ),
    .sd_S (  sd_S  ),
    .vd_T (  vdout_T  ),
    .vd_R0 (  vdout_R  ),
    .vd_S (  vdout_S  ),
    .z_T (  din_T  ),
    .z_R0 (  din_R  ),
    .z_S (  din_S  ),
    .z ( din ),
    .vz ( ldin ),
    .sd ( sd ),
    .lz ( vdin ),
    .srst ( srst ),
    .d ( dout ),
    .arst ( arst ),
    .vd ( vdout ),
    .en ( en ),
    .clk ( clk ),
    .ld ( ldout )
  );
  assign ldin_R = ( ldin_R0 );
  assign srst_R = ( srst_R0 );
  assign ldout_R = ( ldout_R0 );
  assign en_R = ( en_R0 );
  assign dout_R = ( dout_R0 );
  assign clk_R = ( clk_R0 );
  assign arst_R = ( arst_R0 );
  assign vdout_R = ( vdout_R0 );
  assign vdin_R = ( vdin_R0 );
  assign sd_R = ( sd_R0 );
  assign din_R = ( din_R0 );
 // ground taints for floating regs
 // ground taints for unused wires
 // ground taints for unused wire slices
  assign rst_zy = arst ;
endmodule
