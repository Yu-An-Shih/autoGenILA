  logic _00_;
  logic _00__T ;
  logic _00__R ;
  logic _00__C ;
  logic _00__X ;
  logic [13:0] _00__S ;
  logic _01_;
  logic _01__T ;
  logic _01__R ;
  logic _01__C ;
  logic _01__X ;
  logic [13:0] _01__S ;
  logic _02_;
  logic _02__T ;
  logic _02__R ;
  logic _02__C ;
  logic _02__X ;
  logic [13:0] _02__S ;
  logic _03_;
  logic _03__T ;
  logic _03__R ;
  logic _03__C ;
  logic _03__X ;
  logic [13:0] _03__S ;
  logic _04_;
  logic _04__T ;
  logic _04__R ;
  logic _04__C ;
  logic _04__X ;
  logic [13:0] _04__S ;
  logic _05_;
  logic _05__T ;
  logic _05__R ;
  logic _05__C ;
  logic _05__X ;
  logic [13:0] _05__S ;
  logic _06_;
  logic _06__T ;
  logic _06__R ;
  logic _06__C ;
  logic _06__X ;
  logic [13:0] _06__S ;
  logic _07_;
  logic _07__T ;
  logic _07__R ;
  logic _07__C ;
  logic _07__X ;
  logic [13:0] _07__S ;
  logic _08_;
  logic _08__T ;
  logic _08__R ;
  logic _08__C ;
  logic _08__X ;
  logic [13:0] _08__S ;
  logic _09_;
  logic _09__T ;
  logic _09__R ;
  logic _09__C ;
  logic _09__X ;
  logic [13:0] _09__S ;
  logic _10_;
  logic _10__T ;
  logic _10__R ;
  logic _10__C ;
  logic _10__X ;
  logic [13:0] _10__S ;
  logic _11_;
  logic _11__T ;
  logic _11__R ;
  logic _11__C ;
  logic _11__X ;
  logic [13:0] _11__S ;
  logic _12_;
  logic _12__T ;
  logic _12__R ;
  logic _12__C ;
  logic _12__X ;
  logic [13:0] _12__S ;
  logic _13_;
  logic _13__T ;
  logic _13__R ;
  logic _13__C ;
  logic _13__X ;
  logic [13:0] _13__S ;
  logic _14_;
  logic _14__T ;
  logic _14__R ;
  logic _14__C ;
  logic _14__X ;
  logic [13:0] _14__S ;
  logic _15_;
  logic _15__T ;
  logic _15__R ;
  logic _15__C ;
  logic _15__X ;
  logic [13:0] _15__S ;
  logic _16_;
  logic _16__T ;
  logic _16__R ;
  logic _16__C ;
  logic _16__X ;
  logic [13:0] _16__S ;
  logic _17_;
  logic _17__T ;
  logic _17__R ;
  logic _17__C ;
  logic _17__X ;
  logic [13:0] _17__S ;
  logic [6:0] D_Ra_reg_r0;
  logic [6:0] D_Ra_reg_r0_T ;
  logic [6:0] D_Ra_reg_r0_R ;
  logic [6:0] D_Ra_reg_r0_C ;
  logic [6:0] D_Ra_reg_r0_X ;
  logic [13:0] D_Ra_reg_r0_S ;
  logic Data_reg_SO_r0;
  logic Data_reg_SO_r0_T ;
  logic Data_reg_SO_r0_R ;
  logic Data_reg_SO_r0_C ;
  logic Data_reg_SO_r0_X ;
  logic [13:0] Data_reg_SO_r0_S ;
  logic [10:0] Data_reg_r0;
  logic [10:0] Data_reg_r0_T ;
  logic [10:0] Data_reg_r0_R ;
  logic [10:0] Data_reg_r0_C ;
  logic [10:0] Data_reg_r0_X ;
  logic [13:0] Data_reg_r0_S ;
  logic Ra_reg_SO_r0;
  logic Ra_reg_SO_r0_T ;
  logic Ra_reg_SO_r0_R ;
  logic Ra_reg_SO_r0_C ;
  logic Ra_reg_SO_r0_X ;
  logic [13:0] Ra_reg_SO_r0_S ;
  logic [6:0] Ra_reg_r0;
  logic [6:0] Ra_reg_r0_T ;
  logic [6:0] Ra_reg_r0_R ;
  logic [6:0] Ra_reg_r0_C ;
  logic [6:0] Ra_reg_r0_X ;
  logic [13:0] Ra_reg_r0_S ;
  logic [6:0] Ra_reg_r0_A;
  logic [6:0] Ra_reg_r0_A_T ;
  logic [6:0] Ra_reg_r0_A_R ;
  logic [6:0] Ra_reg_r0_A_C ;
  logic [6:0] Ra_reg_r0_A_X ;
  logic [13:0] Ra_reg_r0_A_S ;
  logic [6:0] Ra_reg_r0_B;
  logic [6:0] Ra_reg_r0_B_T ;
  logic [6:0] Ra_reg_r0_B_R ;
  logic [6:0] Ra_reg_r0_B_C ;
  logic [6:0] Ra_reg_r0_B_X ;
  logic [13:0] Ra_reg_r0_B_S ;
  logic Ra_reg_r0_S;
  logic Ra_reg_r0_S_T ;
  logic Ra_reg_r0_S_R ;
  logic Ra_reg_r0_S_C ;
  logic Ra_reg_r0_S_X ;
  logic [13:0] Ra_reg_r0_S_S ;
  input SI;
  input SI_T ;
  input [13:0] SI_S ;
  output SI_R ;
  output SI_X ;
  output SI_C ;
  output SO_int_net;
  logic SO_int_net ;
  output SO_int_net_T ;
  logic SO_int_net_T ;
  logic SO_int_net_R ;
  logic SO_int_net_C ;
  logic SO_int_net_X ;
  logic [13:0] SO_int_net_S ;
  input SO_int_net_R0 ;
  input SO_int_net_C0 ;
  input SO_int_net_X0 ;
  output [13:0] SO_int_net_S ;
  logic Wa_reg_SO_w0;
  logic Wa_reg_SO_w0_T ;
  logic Wa_reg_SO_w0_R ;
  logic Wa_reg_SO_w0_C ;
  logic Wa_reg_SO_w0_X ;
  logic [13:0] Wa_reg_SO_w0_S ;
  logic [6:0] Wa_reg_w0;
  logic [6:0] Wa_reg_w0_T ;
  logic [6:0] Wa_reg_w0_R ;
  logic [6:0] Wa_reg_w0_C ;
  logic [6:0] Wa_reg_w0_X ;
  logic [13:0] Wa_reg_w0_S ;
  logic [6:0] Wa_reg_w0_A;
  logic [6:0] Wa_reg_w0_A_T ;
  logic [6:0] Wa_reg_w0_A_R ;
  logic [6:0] Wa_reg_w0_A_C ;
  logic [6:0] Wa_reg_w0_A_X ;
  logic [13:0] Wa_reg_w0_A_S ;
  logic [6:0] Wa_reg_w0_B;
  logic [6:0] Wa_reg_w0_B_T ;
  logic [6:0] Wa_reg_w0_B_R ;
  logic [6:0] Wa_reg_w0_B_C ;
  logic [6:0] Wa_reg_w0_B_X ;
  logic [13:0] Wa_reg_w0_B_S ;
  logic Wa_reg_w0_S;
  logic Wa_reg_w0_S_T ;
  logic Wa_reg_w0_S_R ;
  logic Wa_reg_w0_S_C ;
  logic Wa_reg_w0_S_X ;
  logic [13:0] Wa_reg_w0_S_S ;
  logic [10:0] Wdata;
  logic [10:0] Wdata_T ;
  logic [10:0] Wdata_R ;
  logic [10:0] Wdata_C ;
  logic [10:0] Wdata_X ;
  logic [13:0] Wdata_S ;
  logic access_en_r;
  logic access_en_r_T ;
  logic access_en_r_R ;
  logic access_en_r_C ;
  logic access_en_r_X ;
  logic [13:0] access_en_r_S ;
  logic access_en_r_1p;
  logic  access_en_r_1p_T ;
  logic  access_en_r_1p_PREV_VAL1 ;
  logic  access_en_r_1p_PREV_VAL2 ;
  logic  access_en_r_1p_R ;
  logic  access_en_r_1p_X ;
  logic  access_en_r_1p_C ;
  logic [13:0] access_en_r_1p_S ;
  logic access_en_r_1p_t_flag ;
  logic access_en_r_1p_r_flag ;
  assign access_en_r_1p_S = 75 ;
  logic access_en_w;
  logic access_en_w_T ;
  logic access_en_w_R ;
  logic access_en_w_C ;
  logic access_en_w_X ;
  logic [13:0] access_en_w_S ;
  input ary_atpg_ctl;
  input ary_atpg_ctl_T ;
  input [13:0] ary_atpg_ctl_S ;
  output ary_atpg_ctl_R ;
  output ary_atpg_ctl_X ;
  output ary_atpg_ctl_C ;
  input ary_read_inh;
  input ary_read_inh_T ;
  input [13:0] ary_read_inh_S ;
  output ary_read_inh_R ;
  output ary_read_inh_X ;
  output ary_read_inh_C ;
  logic captureDR_r0;
  logic captureDR_r0_T ;
  logic captureDR_r0_R ;
  logic captureDR_r0_C ;
  logic captureDR_r0_X ;
  logic [13:0] captureDR_r0_S ;
  input clk;
  input clk_T ;
  input [13:0] clk_S ;
  output clk_R ;
  output clk_X ;
  output clk_C ;
  logic clk_en_core;
  logic clk_en_core_T ;
  logic clk_en_core_R ;
  logic clk_en_core_C ;
  logic clk_en_core_X ;
  logic [13:0] clk_en_core_S ;
  logic [10:0] data_regq;
  logic [10:0] data_regq_T ;
  logic [10:0] data_regq_R ;
  logic [10:0] data_regq_C ;
  logic [10:0] data_regq_X ;
  logic [13:0] data_regq_S ;
  input debug_mode;
  input debug_mode_T ;
  input [13:0] debug_mode_S ;
  output debug_mode_R ;
  output debug_mode_X ;
  output debug_mode_C ;
  logic debug_mode_sync;
  logic debug_mode_sync_T ;
  logic debug_mode_sync_R ;
  logic debug_mode_sync_C ;
  logic debug_mode_sync_X ;
  logic [13:0] debug_mode_sync_S ;
  logic dft_capdr_r;
  logic dft_capdr_r_T ;
  logic dft_capdr_r_R ;
  logic dft_capdr_r_C ;
  logic dft_capdr_r_X ;
  logic [13:0] dft_capdr_r_S ;
  logic dft_capdr_w;
  logic dft_capdr_w_T ;
  logic dft_capdr_w_R ;
  logic dft_capdr_w_C ;
  logic dft_capdr_w_X ;
  logic [13:0] dft_capdr_w_S ;
  logic dft_rst_gated_clk;
  logic dft_rst_gated_clk_T ;
  logic dft_rst_gated_clk_R ;
  logic dft_rst_gated_clk_C ;
  logic dft_rst_gated_clk_X ;
  logic [13:0] dft_rst_gated_clk_S ;
  input [10:0] di;
  input [10:0] di_T ;
  input [13:0] di_S ;
  output [10:0] di_R ;
  output [10:0] di_X ;
  output [10:0] di_C ;
  output [10:0] dout;
  logic [10:0] dout ;
  output [10:0] dout_T ;
  logic [10:0] dout_T ;
  logic [10:0] dout_R ;
  logic [10:0] dout_C ;
  logic [10:0] dout_X ;
  logic [13:0] dout_S ;
  input [10:0] dout_R0 ;
  input [10:0] dout_C0 ;
  input [10:0] dout_X0 ;
  output [13:0] dout_S ;
  logic [10:0] dout_0_0;
  logic [10:0] dout_0_0_T ;
  logic [10:0] dout_0_0_R ;
  logic [10:0] dout_0_0_C ;
  logic [10:0] dout_0_0_X ;
  logic [13:0] dout_0_0_S ;
  logic gated_clk_core;
  logic gated_clk_core_T ;
  logic gated_clk_core_R ;
  logic gated_clk_core_C ;
  logic gated_clk_core_X ;
  logic [13:0] gated_clk_core_S ;
  logic gated_clk_jtag_Data_reg_r0;
  logic gated_clk_jtag_Data_reg_r0_T ;
  logic gated_clk_jtag_Data_reg_r0_R ;
  logic gated_clk_jtag_Data_reg_r0_C ;
  logic gated_clk_jtag_Data_reg_r0_X ;
  logic [13:0] gated_clk_jtag_Data_reg_r0_S ;
  logic gated_clk_jtag_Wa_reg_w0;
  logic gated_clk_jtag_Wa_reg_w0_T ;
  logic gated_clk_jtag_Wa_reg_w0_R ;
  logic gated_clk_jtag_Wa_reg_w0_C ;
  logic gated_clk_jtag_Wa_reg_w0_X ;
  logic [13:0] gated_clk_jtag_Wa_reg_w0_S ;
  input iddq_mode;
  input iddq_mode_T ;
  input [13:0] iddq_mode_S ;
  output iddq_mode_R ;
  output iddq_mode_X ;
  output iddq_mode_C ;
  input jtag_readonly_mode;
  input jtag_readonly_mode_T ;
  input [13:0] jtag_readonly_mode_S ;
  output jtag_readonly_mode_R ;
  output jtag_readonly_mode_X ;
  output jtag_readonly_mode_C ;
  logic la_bist_clkr0;
  logic la_bist_clkr0_T ;
  logic la_bist_clkr0_R ;
  logic la_bist_clkr0_C ;
  logic la_bist_clkr0_X ;
  logic [13:0] la_bist_clkr0_S ;
  logic la_bist_clkw0;
  logic la_bist_clkw0_T ;
  logic la_bist_clkw0_R ;
  logic la_bist_clkw0_C ;
  logic la_bist_clkw0_X ;
  logic [13:0] la_bist_clkw0_S ;
  input [1:0] mbist_Di_w0;
  input [1:0] mbist_Di_w0_T ;
  input [13:0] mbist_Di_w0_S ;
  output [1:0] mbist_Di_w0_R ;
  output [1:0] mbist_Di_w0_X ;
  output [1:0] mbist_Di_w0_C ;
  output [10:0] mbist_Do_r0_int_net;
  logic [10:0] mbist_Do_r0_int_net ;
  output [10:0] mbist_Do_r0_int_net_T ;
  logic [10:0] mbist_Do_r0_int_net_T ;
  logic [10:0] mbist_Do_r0_int_net_R ;
  logic [10:0] mbist_Do_r0_int_net_C ;
  logic [10:0] mbist_Do_r0_int_net_X ;
  logic [13:0] mbist_Do_r0_int_net_S ;
  input [10:0] mbist_Do_r0_int_net_R0 ;
  input [10:0] mbist_Do_r0_int_net_C0 ;
  input [10:0] mbist_Do_r0_int_net_X0 ;
  output [13:0] mbist_Do_r0_int_net_S ;
  input [6:0] mbist_Ra_r0;
  input [6:0] mbist_Ra_r0_T ;
  input [13:0] mbist_Ra_r0_S ;
  output [6:0] mbist_Ra_r0_R ;
  output [6:0] mbist_Ra_r0_X ;
  output [6:0] mbist_Ra_r0_C ;
  input [6:0] mbist_Wa_w0;
  input [6:0] mbist_Wa_w0_T ;
  input [13:0] mbist_Wa_w0_S ;
  output [6:0] mbist_Wa_w0_R ;
  output [6:0] mbist_Wa_w0_X ;
  output [6:0] mbist_Wa_w0_C ;
  input mbist_ce_r0;
  input mbist_ce_r0_T ;
  input [13:0] mbist_ce_r0_S ;
  output mbist_ce_r0_R ;
  output mbist_ce_r0_X ;
  output mbist_ce_r0_C ;
  logic mbist_ce_r0_1p;
  logic  mbist_ce_r0_1p_T ;
  logic  mbist_ce_r0_1p_PREV_VAL1 ;
  logic  mbist_ce_r0_1p_PREV_VAL2 ;
  logic  mbist_ce_r0_1p_R ;
  logic  mbist_ce_r0_1p_X ;
  logic  mbist_ce_r0_1p_C ;
  logic [13:0] mbist_ce_r0_1p_S ;
  logic mbist_ce_r0_1p_t_flag ;
  logic mbist_ce_r0_1p_r_flag ;
  assign mbist_ce_r0_1p_S = 76 ;
  logic mbist_en_r;
  logic mbist_en_r_T ;
  logic mbist_en_r_R ;
  logic mbist_en_r_C ;
  logic mbist_en_r_X ;
  logic [13:0] mbist_en_r_S ;
  input mbist_en_sync;
  input mbist_en_sync_T ;
  input [13:0] mbist_en_sync_S ;
  output mbist_en_sync_R ;
  output mbist_en_sync_X ;
  output mbist_en_sync_C ;
  input mbist_ramaccess_rst_;
  input mbist_ramaccess_rst__T ;
  input [13:0] mbist_ramaccess_rst__S ;
  output mbist_ramaccess_rst__R ;
  output mbist_ramaccess_rst__X ;
  output mbist_ramaccess_rst__C ;
  input mbist_we_w0;
  input mbist_we_w0_T ;
  input [13:0] mbist_we_w0_S ;
  output mbist_we_w0_R ;
  output mbist_we_w0_X ;
  output mbist_we_w0_C ;
  logic [10:0] muxed_Di_w0;
  logic [10:0] muxed_Di_w0_T ;
  logic [10:0] muxed_Di_w0_R ;
  logic [10:0] muxed_Di_w0_C ;
  logic [10:0] muxed_Di_w0_X ;
  logic [13:0] muxed_Di_w0_S ;
  logic [10:0] muxed_Di_w0_A;
  logic [10:0] muxed_Di_w0_A_T ;
  logic [10:0] muxed_Di_w0_A_R ;
  logic [10:0] muxed_Di_w0_A_C ;
  logic [10:0] muxed_Di_w0_A_X ;
  logic [13:0] muxed_Di_w0_A_S ;
  logic [10:0] muxed_Di_w0_B;
  logic [10:0] muxed_Di_w0_B_T ;
  logic [10:0] muxed_Di_w0_B_R ;
  logic [10:0] muxed_Di_w0_B_C ;
  logic [10:0] muxed_Di_w0_B_X ;
  logic [13:0] muxed_Di_w0_B_S ;
  logic muxed_Di_w0_S;
  logic muxed_Di_w0_S_T ;
  logic muxed_Di_w0_S_R ;
  logic muxed_Di_w0_S_C ;
  logic muxed_Di_w0_S_X ;
  logic [13:0] muxed_Di_w0_S_S ;
  logic [6:0] muxed_Ra_r0;
  logic [6:0] muxed_Ra_r0_T ;
  logic [6:0] muxed_Ra_r0_R ;
  logic [6:0] muxed_Ra_r0_C ;
  logic [6:0] muxed_Ra_r0_X ;
  logic [13:0] muxed_Ra_r0_S ;
  logic [6:0] muxed_Ra_r0_A;
  logic [6:0] muxed_Ra_r0_A_T ;
  logic [6:0] muxed_Ra_r0_A_R ;
  logic [6:0] muxed_Ra_r0_A_C ;
  logic [6:0] muxed_Ra_r0_A_X ;
  logic [13:0] muxed_Ra_r0_A_S ;
  logic [6:0] muxed_Ra_r0_B;
  logic [6:0] muxed_Ra_r0_B_T ;
  logic [6:0] muxed_Ra_r0_B_R ;
  logic [6:0] muxed_Ra_r0_B_C ;
  logic [6:0] muxed_Ra_r0_B_X ;
  logic [13:0] muxed_Ra_r0_B_S ;
  logic muxed_Ra_r0_S;
  logic muxed_Ra_r0_S_T ;
  logic muxed_Ra_r0_S_R ;
  logic muxed_Ra_r0_S_C ;
  logic muxed_Ra_r0_S_X ;
  logic [13:0] muxed_Ra_r0_S_S ;
  logic [6:0] muxed_Wa_w0;
  logic [6:0] muxed_Wa_w0_T ;
  logic [6:0] muxed_Wa_w0_R ;
  logic [6:0] muxed_Wa_w0_C ;
  logic [6:0] muxed_Wa_w0_X ;
  logic [13:0] muxed_Wa_w0_S ;
  logic [6:0] muxed_Wa_w0_A;
  logic [6:0] muxed_Wa_w0_A_T ;
  logic [6:0] muxed_Wa_w0_A_R ;
  logic [6:0] muxed_Wa_w0_A_C ;
  logic [6:0] muxed_Wa_w0_A_X ;
  logic [13:0] muxed_Wa_w0_A_S ;
  logic [6:0] muxed_Wa_w0_B;
  logic [6:0] muxed_Wa_w0_B_T ;
  logic [6:0] muxed_Wa_w0_B_R ;
  logic [6:0] muxed_Wa_w0_B_C ;
  logic [6:0] muxed_Wa_w0_B_X ;
  logic [13:0] muxed_Wa_w0_B_S ;
  logic muxed_Wa_w0_S;
  logic muxed_Wa_w0_S_T ;
  logic muxed_Wa_w0_S_R ;
  logic muxed_Wa_w0_S_C ;
  logic muxed_Wa_w0_S_X ;
  logic [13:0] muxed_Wa_w0_S_S ;
  logic muxed_re_r0;
  logic muxed_re_r0_T ;
  logic muxed_re_r0_R ;
  logic muxed_re_r0_C ;
  logic muxed_re_r0_X ;
  logic [13:0] muxed_re_r0_S ;
  logic muxed_re_r0_A;
  logic muxed_re_r0_A_T ;
  logic muxed_re_r0_A_R ;
  logic muxed_re_r0_A_C ;
  logic muxed_re_r0_A_X ;
  logic [13:0] muxed_re_r0_A_S ;
  logic muxed_re_r0_B;
  logic muxed_re_r0_B_T ;
  logic muxed_re_r0_B_R ;
  logic muxed_re_r0_B_C ;
  logic muxed_re_r0_B_X ;
  logic [13:0] muxed_re_r0_B_S ;
  logic muxed_re_r0_S;
  logic muxed_re_r0_S_T ;
  logic muxed_re_r0_S_R ;
  logic muxed_re_r0_S_C ;
  logic muxed_re_r0_S_X ;
  logic [13:0] muxed_re_r0_S_S ;
  logic muxed_we_w0;
  logic muxed_we_w0_T ;
  logic muxed_we_w0_R ;
  logic muxed_we_w0_C ;
  logic muxed_we_w0_X ;
  logic [13:0] muxed_we_w0_S ;
  logic muxed_we_w0_A;
  logic muxed_we_w0_A_T ;
  logic muxed_we_w0_A_R ;
  logic muxed_we_w0_A_C ;
  logic muxed_we_w0_A_X ;
  logic [13:0] muxed_we_w0_A_S ;
  logic muxed_we_w0_B;
  logic muxed_we_w0_B_T ;
  logic muxed_we_w0_B_R ;
  logic muxed_we_w0_B_C ;
  logic muxed_we_w0_B_X ;
  logic [13:0] muxed_we_w0_B_S ;
  logic muxed_we_w0_S;
  logic muxed_we_w0_S_T ;
  logic muxed_we_w0_S_R ;
  logic muxed_we_w0_S_C ;
  logic muxed_we_w0_S_X ;
  logic [13:0] muxed_we_w0_S_S ;
  input ore;
  input ore_T ;
  input [13:0] ore_S ;
  output ore_R ;
  output ore_X ;
  output ore_C ;
  logic piece_re;
  logic piece_re_T ;
  logic piece_re_R ;
  logic piece_re_C ;
  logic piece_re_X ;
  logic [13:0] piece_re_S ;
  logic posedge_updateDR_sync;
  logic posedge_updateDR_sync_T ;
  logic posedge_updateDR_sync_R ;
  logic posedge_updateDR_sync_C ;
  logic posedge_updateDR_sync_X ;
  logic [13:0] posedge_updateDR_sync_S ;
  logic [6:0] pre_Ra_reg_r0;
  logic [6:0] pre_Ra_reg_r0_T ;
  logic [6:0] pre_Ra_reg_r0_R ;
  logic [6:0] pre_Ra_reg_r0_C ;
  logic [6:0] pre_Ra_reg_r0_X ;
  logic [13:0] pre_Ra_reg_r0_S ;
  logic [6:0] pre_Wa_reg_w0;
  logic [6:0] pre_Wa_reg_w0_T ;
  logic [6:0] pre_Wa_reg_w0_R ;
  logic [6:0] pre_Wa_reg_w0_C ;
  logic [6:0] pre_Wa_reg_w0_X ;
  logic [13:0] pre_Wa_reg_w0_S ;
  logic [10:0] pre_muxed_Di_w0;
  logic [10:0] pre_muxed_Di_w0_T ;
  logic [10:0] pre_muxed_Di_w0_R ;
  logic [10:0] pre_muxed_Di_w0_C ;
  logic [10:0] pre_muxed_Di_w0_X ;
  logic [13:0] pre_muxed_Di_w0_S ;
  logic [10:0] pre_muxed_Di_w0_A;
  logic [10:0] pre_muxed_Di_w0_A_T ;
  logic [10:0] pre_muxed_Di_w0_A_R ;
  logic [10:0] pre_muxed_Di_w0_A_C ;
  logic [10:0] pre_muxed_Di_w0_A_X ;
  logic [13:0] pre_muxed_Di_w0_A_S ;
  logic [10:0] pre_muxed_Di_w0_B;
  logic [10:0] pre_muxed_Di_w0_B_T ;
  logic [10:0] pre_muxed_Di_w0_B_R ;
  logic [10:0] pre_muxed_Di_w0_B_C ;
  logic [10:0] pre_muxed_Di_w0_B_X ;
  logic [13:0] pre_muxed_Di_w0_B_S ;
  logic pre_muxed_Di_w0_S;
  logic pre_muxed_Di_w0_S_T ;
  logic pre_muxed_Di_w0_S_R ;
  logic pre_muxed_Di_w0_S_C ;
  logic pre_muxed_Di_w0_S_X ;
  logic [13:0] pre_muxed_Di_w0_S_S ;
  logic pre_re_r0;
  logic pre_re_r0_T ;
  logic pre_re_r0_R ;
  logic pre_re_r0_C ;
  logic pre_re_r0_X ;
  logic [13:0] pre_re_r0_S ;
  logic pre_we_w0;
  logic pre_we_w0_T ;
  logic pre_we_w0_R ;
  logic pre_we_w0_C ;
  logic pre_we_w0_X ;
  logic [13:0] pre_we_w0_S ;
  input [31:0] pwrbus_ram_pd;
  input [31:0] pwrbus_ram_pd_T ;
  input [13:0] pwrbus_ram_pd_S ;
  output [31:0] pwrbus_ram_pd_R ;
  output [31:0] pwrbus_ram_pd_X ;
  output [31:0] pwrbus_ram_pd_C ;
  logic [10:0] r0_OutputMuxDataOut;
  logic [10:0] r0_OutputMuxDataOut_T ;
  logic [10:0] r0_OutputMuxDataOut_R ;
  logic [10:0] r0_OutputMuxDataOut_C ;
  logic [10:0] r0_OutputMuxDataOut_X ;
  logic [13:0] r0_OutputMuxDataOut_S ;
  input [6:0] ra;
  input [6:0] ra_T ;
  input [13:0] ra_S ;
  output [6:0] ra_R ;
  output [6:0] ra_X ;
  output [6:0] ra_C ;
  logic [6:0] ra_0_0;
  logic [6:0] ra_0_0_T ;
  logic [6:0] ra_0_0_R ;
  logic [6:0] ra_0_0_C ;
  logic [6:0] ra_0_0_X ;
  logic [13:0] ra_0_0_S ;
  logic [6:0] radr_q;
  logic [6:0] radr_q_T ;
  logic [6:0] radr_q_R ;
  logic [6:0] radr_q_C ;
  logic [6:0] radr_q_X ;
  logic [13:0] radr_q_S ;
  logic [10:0] ramDataOut;
  logic [10:0] ramDataOut_T ;
  logic [10:0] ramDataOut_R ;
  logic [10:0] ramDataOut_C ;
  logic [10:0] ramDataOut_X ;
  logic [13:0] ramDataOut_S ;
  logic ram_bypass;
  logic ram_bypass_T ;
  logic ram_bypass_R ;
  logic ram_bypass_C ;
  logic ram_bypass_X ;
  logic [13:0] ram_bypass_S ;
  logic [10:0] ram_r0_OutputMuxDataOut;
  logic [10:0] ram_r0_OutputMuxDataOut_T ;
  logic [10:0] ram_r0_OutputMuxDataOut_R ;
  logic [10:0] ram_r0_OutputMuxDataOut_C ;
  logic [10:0] ram_r0_OutputMuxDataOut_X ;
  logic [13:0] ram_r0_OutputMuxDataOut_S ;
  input re;
  input re_T ;
  input [13:0] re_S ;
  output re_R ;
  output re_X ;
  output re_C ;
  logic re_0_0;
  logic re_0_0_T ;
  logic re_0_0_R ;
  logic re_0_0_C ;
  logic re_0_0_X ;
  logic [13:0] re_0_0_S ;
  logic re_q;
  logic re_q_T ;
  logic re_q_R ;
  logic re_q_C ;
  logic re_q_X ;
  logic [13:0] re_q_S ;
  logic re_reg_SO_r0;
  logic re_reg_SO_r0_T ;
  logic re_reg_SO_r0_R ;
  logic re_reg_SO_r0_C ;
  logic re_reg_SO_r0_X ;
  logic [13:0] re_reg_SO_r0_S ;
  logic re_reg_r0;
  logic re_reg_r0_T ;
  logic re_reg_r0_R ;
  logic re_reg_r0_C ;
  logic re_reg_r0_X ;
  logic [13:0] re_reg_r0_S ;
  logic ret_en;
  logic ret_en_T ;
  logic ret_en_R ;
  logic ret_en_C ;
  logic ret_en_X ;
  logic [13:0] ret_en_S ;
  input scan_en;
  input scan_en_T ;
  input [13:0] scan_en_S ;
  output scan_en_R ;
  output scan_en_X ;
  output scan_en_C ;
  input scan_ramtms;
  input scan_ramtms_T ;
  input [13:0] scan_ramtms_S ;
  output scan_ramtms_R ;
  output scan_ramtms_X ;
  output scan_ramtms_C ;
  input shiftDR;
  input shiftDR_T ;
  input [13:0] shiftDR_S ;
  output shiftDR_R ;
  output shiftDR_X ;
  output shiftDR_C ;
  logic [7:0] sleep_en;
  logic [7:0] sleep_en_T ;
  logic [7:0] sleep_en_R ;
  logic [7:0] sleep_en_C ;
  logic [7:0] sleep_en_X ;
  logic [13:0] sleep_en_S ;
  input [1:0] svop;
  input [1:0] svop_T ;
  input [13:0] svop_S ;
  output [1:0] svop_R ;
  output [1:0] svop_X ;
  output [1:0] svop_C ;
  input updateDR;
  input updateDR_T ;
  input [13:0] updateDR_S ;
  output updateDR_R ;
  output updateDR_X ;
  output updateDR_C ;
  logic updateDR_sync;
  logic updateDR_sync_T ;
  logic updateDR_sync_R ;
  logic updateDR_sync_C ;
  logic updateDR_sync_X ;
  logic [13:0] updateDR_sync_S ;
  logic updateDR_sync_1p;
  logic  updateDR_sync_1p_T ;
  logic  updateDR_sync_1p_PREV_VAL1 ;
  logic  updateDR_sync_1p_PREV_VAL2 ;
  logic  updateDR_sync_1p_R ;
  logic  updateDR_sync_1p_X ;
  logic  updateDR_sync_1p_C ;
  logic [13:0] updateDR_sync_1p_S ;
  logic updateDR_sync_1p_t_flag ;
  logic updateDR_sync_1p_r_flag ;
  assign updateDR_sync_1p_S = 77 ;
  input [6:0] wa;
  input [6:0] wa_T ;
  input [13:0] wa_S ;
  output [6:0] wa_R ;
  output [6:0] wa_X ;
  output [6:0] wa_C ;
  logic [6:0] wa_0_0;
  logic [6:0] wa_0_0_T ;
  logic [6:0] wa_0_0_R ;
  logic [6:0] wa_0_0_C ;
  logic [6:0] wa_0_0_X ;
  logic [13:0] wa_0_0_S ;
  logic [6:0] wadr_q;
  logic [6:0] wadr_q_T ;
  logic [6:0] wadr_q_R ;
  logic [6:0] wadr_q_C ;
  logic [6:0] wadr_q_X ;
  logic [13:0] wadr_q_S ;
  input we;
  input we_T ;
  input [13:0] we_S ;
  output we_R ;
  output we_X ;
  output we_C ;
  logic we_0_0;
  logic we_0_0_T ;
  logic we_0_0_R ;
  logic we_0_0_C ;
  logic we_0_0_X ;
  logic [13:0] we_0_0_S ;
  logic we_q;
  logic we_q_T ;
  logic we_q_R ;
  logic we_q_C ;
  logic we_q_X ;
  logic [13:0] we_q_S ;
  logic we_reg_SO_w0;
  logic we_reg_SO_w0_T ;
  logic we_reg_SO_w0_R ;
  logic we_reg_SO_w0_C ;
  logic we_reg_SO_w0_X ;
  logic [13:0] we_reg_SO_w0_S ;
  logic we_reg_w0;
  logic we_reg_w0_T ;
  logic we_reg_w0_R ;
  logic we_reg_w0_C ;
  logic we_reg_w0_X ;
  logic [13:0] we_reg_w0_S ;
  logic web;
  logic web_T ;
  logic web_R ;
  logic web_C ;
  logic web_X ;
  logic [13:0] web_S ;
  input write_inh;
  input write_inh_T ;
  input [13:0] write_inh_S ;
  output write_inh_R ;
  output write_inh_X ;
  output write_inh_C ;
  assign posedge_updateDR_sync = updateDR_sync & _08_;
  assign posedge_updateDR_sync_S = 0 ;
  logic [0:0] updateDR_sync_C0 ;
  logic [0:0] updateDR_sync_R0 ;
  logic [0:0] updateDR_sync_X0 ;
  logic [0:0] _08__C0 ;
  logic [0:0] _08__R0 ;
  logic [0:0] _08__X0 ;
  assign posedge_updateDR_sync_T = updateDR_sync_T | _08__T ;
  assign updateDR_sync_C0 = posedge_updateDR_sync_C ;
  assign updateDR_sync_X0 = posedge_updateDR_sync_X ;
  assign _08__C0 = posedge_updateDR_sync_C ;
  assign _08__X0 = posedge_updateDR_sync_X ;
  assign updateDR_sync_R0 = ( posedge_updateDR_sync_R | posedge_updateDR_sync_C & _08__T ) & { 1{ _08_ != 0 }} ;
  assign _08__R0 = ( posedge_updateDR_sync_R | posedge_updateDR_sync_C & updateDR_sync_T ) & { 1{ updateDR_sync != 0 }} ;
  assign _00_ = posedge_updateDR_sync & we_q;
  assign _00__S = 0 ;
  logic [0:0] posedge_updateDR_sync_C0 ;
  logic [0:0] posedge_updateDR_sync_R0 ;
  logic [0:0] posedge_updateDR_sync_X0 ;
  logic [0:0] we_q_C0 ;
  logic [0:0] we_q_R0 ;
  logic [0:0] we_q_X0 ;
  assign _00__T = posedge_updateDR_sync_T | we_q_T ;
  assign posedge_updateDR_sync_C0 = _00__C ;
  assign posedge_updateDR_sync_X0 = _00__X ;
  assign we_q_C0 = _00__C ;
  assign we_q_X0 = _00__X ;
  assign posedge_updateDR_sync_R0 = ( _00__R | _00__C & we_q_T ) & { 1{ we_q != 0 }} ;
  assign we_q_R0 = ( _00__R | _00__C & posedge_updateDR_sync_T ) & { 1{ posedge_updateDR_sync != 0 }} ;
  assign _01_ = mbist_en_r & mbist_we_w0;
  assign _01__S = 0 ;
  logic [0:0] mbist_en_r_C0 ;
  logic [0:0] mbist_en_r_R0 ;
  logic [0:0] mbist_en_r_X0 ;
  logic [0:0] mbist_we_w0_C0 ;
  logic [0:0] mbist_we_w0_R0 ;
  logic [0:0] mbist_we_w0_X0 ;
  assign _01__T = mbist_en_r_T | mbist_we_w0_T ;
  assign mbist_en_r_C0 = _01__C ;
  assign mbist_en_r_X0 = _01__X ;
  assign mbist_we_w0_C0 = _01__C ;
  assign mbist_we_w0_X0 = _01__X ;
  assign mbist_en_r_R0 = ( _01__R | _01__C & mbist_we_w0_T ) & { 1{ mbist_we_w0 != 0 }} ;
  assign mbist_we_w0_R0 = ( _01__R | _01__C & mbist_en_r_T ) & { 1{ mbist_en_r != 0 }} ;
  assign access_en_r = posedge_updateDR_sync & re_q;
  assign access_en_r_S = 0 ;
  logic [0:0] posedge_updateDR_sync_C1 ;
  logic [0:0] posedge_updateDR_sync_R1 ;
  logic [0:0] posedge_updateDR_sync_X1 ;
  logic [0:0] re_q_C0 ;
  logic [0:0] re_q_R0 ;
  logic [0:0] re_q_X0 ;
  assign access_en_r_T = posedge_updateDR_sync_T | re_q_T ;
  assign posedge_updateDR_sync_C1 = access_en_r_C ;
  assign posedge_updateDR_sync_X1 = access_en_r_X ;
  assign re_q_C0 = access_en_r_C ;
  assign re_q_X0 = access_en_r_X ;
  assign posedge_updateDR_sync_R1 = ( access_en_r_R | access_en_r_C & re_q_T ) & { 1{ re_q != 0 }} ;
  assign re_q_R0 = ( access_en_r_R | access_en_r_C & posedge_updateDR_sync_T ) & { 1{ posedge_updateDR_sync != 0 }} ;
  assign _02_ = mbist_en_r & mbist_ce_r0;
  assign _02__S = 0 ;
  logic [0:0] mbist_en_r_C1 ;
  logic [0:0] mbist_en_r_R1 ;
  logic [0:0] mbist_en_r_X1 ;
  logic [0:0] mbist_ce_r0_C0 ;
  logic [0:0] mbist_ce_r0_R0 ;
  logic [0:0] mbist_ce_r0_X0 ;
  assign _02__T = mbist_en_r_T | mbist_ce_r0_T ;
  assign mbist_en_r_C1 = _02__C ;
  assign mbist_en_r_X1 = _02__X ;
  assign mbist_ce_r0_C0 = _02__C ;
  assign mbist_ce_r0_X0 = _02__X ;
  assign mbist_en_r_R1 = ( _02__R | _02__C & mbist_ce_r0_T ) & { 1{ mbist_ce_r0 != 0 }} ;
  assign mbist_ce_r0_R0 = ( _02__R | _02__C & mbist_en_r_T ) & { 1{ mbist_en_r != 0 }} ;
  assign _03_ = scan_en & jtag_readonly_mode;
  assign _03__S = 0 ;
  logic [0:0] scan_en_C0 ;
  logic [0:0] scan_en_R0 ;
  logic [0:0] scan_en_X0 ;
  logic [0:0] jtag_readonly_mode_C0 ;
  logic [0:0] jtag_readonly_mode_R0 ;
  logic [0:0] jtag_readonly_mode_X0 ;
  assign _03__T = scan_en_T | jtag_readonly_mode_T ;
  assign scan_en_C0 = _03__C ;
  assign scan_en_X0 = _03__X ;
  assign jtag_readonly_mode_C0 = _03__C ;
  assign jtag_readonly_mode_X0 = _03__X ;
  assign scan_en_R0 = ( _03__R | _03__C & jtag_readonly_mode_T ) & { 1{ jtag_readonly_mode != 0 }} ;
  assign jtag_readonly_mode_R0 = ( _03__R | _03__C & scan_en_T ) & { 1{ scan_en != 0 }} ;
  assign _04_ = ore & _10_;
  assign _04__S = 0 ;
  logic [0:0] ore_C0 ;
  logic [0:0] ore_R0 ;
  logic [0:0] ore_X0 ;
  logic [0:0] _10__C0 ;
  logic [0:0] _10__R0 ;
  logic [0:0] _10__X0 ;
  assign _04__T = ore_T | _10__T ;
  assign ore_C0 = _04__C ;
  assign ore_X0 = _04__X ;
  assign _10__C0 = _04__C ;
  assign _10__X0 = _04__X ;
  assign ore_R0 = ( _04__R | _04__C & _10__T ) & { 1{ _10_ != 0 }} ;
  assign _10__R0 = ( _04__R | _04__C & ore_T ) & { 1{ ore != 0 }} ;
  assign _05_ = _04_ & pre_muxed_Di_w0_S;
  assign _05__S = 0 ;
  logic [0:0] _04__C0 ;
  logic [0:0] _04__R0 ;
  logic [0:0] _04__X0 ;
  logic [0:0] pre_muxed_Di_w0_S_C0 ;
  logic [0:0] pre_muxed_Di_w0_S_R0 ;
  logic [0:0] pre_muxed_Di_w0_S_X0 ;
  assign _05__T = _04__T | pre_muxed_Di_w0_S_T ;
  assign _04__C0 = _05__C ;
  assign _04__X0 = _05__X ;
  assign pre_muxed_Di_w0_S_C0 = _05__C ;
  assign pre_muxed_Di_w0_S_X0 = _05__X ;
  assign _04__R0 = ( _05__R | _05__C & pre_muxed_Di_w0_S_T ) & { 1{ pre_muxed_Di_w0_S != 0 }} ;
  assign pre_muxed_Di_w0_S_R0 = ( _05__R | _05__C & _04__T ) & { 1{ _04_ != 0 }} ;
  assign _06_ = mbist_en_r & mbist_ce_r0_1p;
  assign _06__S = 0 ;
  logic [0:0] mbist_en_r_C2 ;
  logic [0:0] mbist_en_r_R2 ;
  logic [0:0] mbist_en_r_X2 ;
  logic [0:0] mbist_ce_r0_1p_C0 ;
  logic [0:0] mbist_ce_r0_1p_R0 ;
  logic [0:0] mbist_ce_r0_1p_X0 ;
  assign _06__T = mbist_en_r_T | mbist_ce_r0_1p_T ;
  assign mbist_en_r_C2 = _06__C ;
  assign mbist_en_r_X2 = _06__X ;
  assign mbist_ce_r0_1p_C0 = _06__C ;
  assign mbist_ce_r0_1p_X0 = _06__X ;
  assign mbist_en_r_R2 = ( _06__R | _06__C & mbist_ce_r0_1p_T ) & { 1{ mbist_ce_r0_1p != 0 }} ;
  assign mbist_ce_r0_1p_R0 = ( _06__R | _06__C & mbist_en_r_T ) & { 1{ mbist_en_r != 0 }} ;
  assign _07_ = debug_mode_sync & shiftDR;
  assign _07__S = 0 ;
  logic [0:0] debug_mode_sync_C0 ;
  logic [0:0] debug_mode_sync_R0 ;
  logic [0:0] debug_mode_sync_X0 ;
  logic [0:0] shiftDR_C0 ;
  logic [0:0] shiftDR_R0 ;
  logic [0:0] shiftDR_X0 ;
  assign _07__T = debug_mode_sync_T | shiftDR_T ;
  assign debug_mode_sync_C0 = _07__C ;
  assign debug_mode_sync_X0 = _07__X ;
  assign shiftDR_C0 = _07__C ;
  assign shiftDR_X0 = _07__X ;
  assign debug_mode_sync_R0 = ( _07__R | _07__C & shiftDR_T ) & { 1{ shiftDR != 0 }} ;
  assign shiftDR_R0 = ( _07__R | _07__C & debug_mode_sync_T ) & { 1{ debug_mode_sync != 0 }} ;
  assign pre_muxed_Di_w0_S = ! debug_mode_sync;
  logic [0:0] debug_mode_sync_C1 ;
  logic [0:0] debug_mode_sync_R1 ;
  logic [0:0] debug_mode_sync_X1 ;
  assign pre_muxed_Di_w0_S_T = | debug_mode_sync_T ;
  assign debug_mode_sync_C1 = { 1{ pre_muxed_Di_w0_S_C }} ;
  assign debug_mode_sync_X1 = { 1{ pre_muxed_Di_w0_S_X }} ;
  assign debug_mode_sync_R1 = { 1{ pre_muxed_Di_w0_S_R }} ;
  assign pre_muxed_Di_w0_S_S = 0 ;
  assign _08_ = ! updateDR_sync_1p;
  logic [0:0] updateDR_sync_1p_C0 ;
  logic [0:0] updateDR_sync_1p_R0 ;
  logic [0:0] updateDR_sync_1p_X0 ;
  assign _08__T = | updateDR_sync_1p_T ;
  assign updateDR_sync_1p_C0 = { 1{ _08__C }} ;
  assign updateDR_sync_1p_X0 = { 1{ _08__X }} ;
  assign updateDR_sync_1p_R0 = { 1{ _08__R }} ;
  assign _08__S = 0 ;
  assign _09_ = ! web;
  logic [0:0] web_C0 ;
  logic [0:0] web_R0 ;
  logic [0:0] web_X0 ;
  assign _09__T = | web_T ;
  assign web_C0 = { 1{ _09__C }} ;
  assign web_X0 = { 1{ _09__X }} ;
  assign web_R0 = { 1{ _09__R }} ;
  assign _09__S = 0 ;
  assign _10_ = ! mbist_en_r;
  logic [0:0] mbist_en_r_C3 ;
  logic [0:0] mbist_en_r_R3 ;
  logic [0:0] mbist_en_r_X3 ;
  assign _10__T = | mbist_en_r_T ;
  assign mbist_en_r_C3 = { 1{ _10__C }} ;
  assign mbist_en_r_X3 = { 1{ _10__X }} ;
  assign mbist_en_r_R3 = { 1{ _10__R }} ;
  assign _10__S = 0 ;
  assign _11_ = _05_ || _16_;
  assign _11__S = 0 ;
  logic [0:0] _05__C0 ;
  logic [0:0] _05__R0 ;
  logic [0:0] _05__X0 ;
  logic [0:0] _16__C0 ;
  logic [0:0] _16__R0 ;
  logic [0:0] _16__X0 ;
  assign _11__T = _05__T | _16__T ;
  assign _05__C0 = _11__C ;
  assign _05__X0 = _11__X ;
  assign _16__C0 = _11__C ;
  assign _16__X0 = _11__X ;
  assign _05__R0 = ( _11__R | _11__C & _16__T ) & { 1{ _16_ == 0 }} ;
  assign _16__R0 = ( _11__R | _11__C & _05__T ) & { 1{ _05_ == 0 }} ;
  assign _12_ = ~ muxed_we_w0;
  logic [0:0] muxed_we_w0_C0 ;
  logic [0:0] muxed_we_w0_R0 ;
  logic [0:0] muxed_we_w0_X0 ;
  assign _12__T = muxed_we_w0_T ;
  assign muxed_we_w0_C0 = _12__C ;
  assign muxed_we_w0_R0 = _12__R ;
  assign muxed_we_w0_X0 = _12__X ;
  assign _12__S = 0 ;
  assign ram_bypass = scan_ramtms | ary_read_inh;
  assign ram_bypass_S = 0 ;
  logic [0:0] scan_ramtms_C0 ;
  logic [0:0] scan_ramtms_R0 ;
  logic [0:0] scan_ramtms_X0 ;
  logic [0:0] ary_read_inh_C0 ;
  logic [0:0] ary_read_inh_R0 ;
  logic [0:0] ary_read_inh_X0 ;
  assign ram_bypass_T = scan_ramtms_T | ary_read_inh_T ;
  assign scan_ramtms_C0 = ram_bypass_C ;
  assign scan_ramtms_X0 = ram_bypass_X ;
  assign ary_read_inh_C0 = ram_bypass_C ;
  assign ary_read_inh_X0 = ram_bypass_X ;
  assign scan_ramtms_R0 = ( ram_bypass_R | ram_bypass_C & ary_read_inh_T ) & { 1{ ary_read_inh != 1'b1 }} ;
  assign ary_read_inh_R0 = ( ram_bypass_R | ram_bypass_C & scan_ramtms_T ) & { 1{ scan_ramtms != 1'b1 }} ;
  assign muxed_re_r0_S = mbist_en_r | debug_mode_sync;
  assign muxed_re_r0_S_S = 0 ;
  logic [0:0] mbist_en_r_C4 ;
  logic [0:0] mbist_en_r_R4 ;
  logic [0:0] mbist_en_r_X4 ;
  logic [0:0] debug_mode_sync_C2 ;
  logic [0:0] debug_mode_sync_R2 ;
  logic [0:0] debug_mode_sync_X2 ;
  assign muxed_re_r0_S_T = mbist_en_r_T | debug_mode_sync_T ;
  assign mbist_en_r_C4 = muxed_re_r0_S_C ;
  assign mbist_en_r_X4 = muxed_re_r0_S_X ;
  assign debug_mode_sync_C2 = muxed_re_r0_S_C ;
  assign debug_mode_sync_X2 = muxed_re_r0_S_X ;
  assign mbist_en_r_R4 = ( muxed_re_r0_S_R | muxed_re_r0_S_C & debug_mode_sync_T ) & { 1{ debug_mode_sync != 1'b1 }} ;
  assign debug_mode_sync_R2 = ( muxed_re_r0_S_R | muxed_re_r0_S_C & mbist_en_r_T ) & { 1{ mbist_en_r != 1'b1 }} ;
  assign clk_en_core = re | we;
  assign clk_en_core_S = 0 ;
  logic [0:0] re_C0 ;
  logic [0:0] re_R0 ;
  logic [0:0] re_X0 ;
  logic [0:0] we_C0 ;
  logic [0:0] we_R0 ;
  logic [0:0] we_X0 ;
  assign clk_en_core_T = re_T | we_T ;
  assign re_C0 = clk_en_core_C ;
  assign re_X0 = clk_en_core_X ;
  assign we_C0 = clk_en_core_C ;
  assign we_X0 = clk_en_core_X ;
  assign re_R0 = ( clk_en_core_R | clk_en_core_C & we_T ) & { 1{ we != 1'b1 }} ;
  assign we_R0 = ( clk_en_core_R | clk_en_core_C & re_T ) & { 1{ re != 1'b1 }} ;
  assign _13_ = muxed_re_r0_S | scan_en;
  assign _13__S = 0 ;
  logic [0:0] muxed_re_r0_S_C0 ;
  logic [0:0] muxed_re_r0_S_R0 ;
  logic [0:0] muxed_re_r0_S_X0 ;
  logic [0:0] scan_en_C1 ;
  logic [0:0] scan_en_R1 ;
  logic [0:0] scan_en_X1 ;
  assign _13__T = muxed_re_r0_S_T | scan_en_T ;
  assign muxed_re_r0_S_C0 = _13__C ;
  assign muxed_re_r0_S_X0 = _13__X ;
  assign scan_en_C1 = _13__C ;
  assign scan_en_X1 = _13__X ;
  assign muxed_re_r0_S_R0 = ( _13__R | _13__C & scan_en_T ) & { 1{ scan_en != 1'b1 }} ;
  assign scan_en_R1 = ( _13__R | _13__C & muxed_re_r0_S_T ) & { 1{ muxed_re_r0_S != 1'b1 }} ;
  assign web = _12_ | write_inh;
  assign web_S = 0 ;
  logic [0:0] _12__C0 ;
  logic [0:0] _12__R0 ;
  logic [0:0] _12__X0 ;
  logic [0:0] write_inh_C0 ;
  logic [0:0] write_inh_R0 ;
  logic [0:0] write_inh_X0 ;
  assign web_T = _12__T | write_inh_T ;
  assign _12__C0 = web_C ;
  assign _12__X0 = web_X ;
  assign write_inh_C0 = web_C ;
  assign write_inh_X0 = web_X ;
  assign _12__R0 = ( web_R | web_C & write_inh_T ) & { 1{ write_inh != 1'b1 }} ;
  assign write_inh_R0 = ( web_R | web_C & _12__T ) & { 1{ _12_ != 1'b1 }} ;
  assign piece_re = muxed_re_r0 | _03_;
  assign piece_re_S = 0 ;
  logic [0:0] muxed_re_r0_C0 ;
  logic [0:0] muxed_re_r0_R0 ;
  logic [0:0] muxed_re_r0_X0 ;
  logic [0:0] _03__C0 ;
  logic [0:0] _03__R0 ;
  logic [0:0] _03__X0 ;
  assign piece_re_T = muxed_re_r0_T | _03__T ;
  assign muxed_re_r0_C0 = piece_re_C ;
  assign muxed_re_r0_X0 = piece_re_X ;
  assign _03__C0 = piece_re_C ;
  assign _03__X0 = piece_re_X ;
  assign muxed_re_r0_R0 = ( piece_re_R | piece_re_C & _03__T ) & { 1{ _03_ != 1'b1 }} ;
  assign _03__R0 = ( piece_re_R | piece_re_C & muxed_re_r0_T ) & { 1{ muxed_re_r0 != 1'b1 }} ;
  assign captureDR_r0 = ary_atpg_ctl | _11_;
  assign captureDR_r0_S = 0 ;
  logic [0:0] ary_atpg_ctl_C0 ;
  logic [0:0] ary_atpg_ctl_R0 ;
  logic [0:0] ary_atpg_ctl_X0 ;
  logic [0:0] _11__C0 ;
  logic [0:0] _11__R0 ;
  logic [0:0] _11__X0 ;
  assign captureDR_r0_T = ary_atpg_ctl_T | _11__T ;
  assign ary_atpg_ctl_C0 = captureDR_r0_C ;
  assign ary_atpg_ctl_X0 = captureDR_r0_X ;
  assign _11__C0 = captureDR_r0_C ;
  assign _11__X0 = captureDR_r0_X ;
  assign ary_atpg_ctl_R0 = ( captureDR_r0_R | captureDR_r0_C & _11__T ) & { 1{ _11_ != 1'b1 }} ;
  assign _11__R0 = ( captureDR_r0_R | captureDR_r0_C & ary_atpg_ctl_T ) & { 1{ ary_atpg_ctl != 1'b1 }} ;
  assign _14_ = mbist_en_r | ary_atpg_ctl;
  assign _14__S = 0 ;
  logic [0:0] mbist_en_r_C5 ;
  logic [0:0] mbist_en_r_R5 ;
  logic [0:0] mbist_en_r_X5 ;
  logic [0:0] ary_atpg_ctl_C1 ;
  logic [0:0] ary_atpg_ctl_R1 ;
  logic [0:0] ary_atpg_ctl_X1 ;
  assign _14__T = mbist_en_r_T | ary_atpg_ctl_T ;
  assign mbist_en_r_C5 = _14__C ;
  assign mbist_en_r_X5 = _14__X ;
  assign ary_atpg_ctl_C1 = _14__C ;
  assign ary_atpg_ctl_X1 = _14__X ;
  assign mbist_en_r_R5 = ( _14__R | _14__C & ary_atpg_ctl_T ) & { 1{ ary_atpg_ctl != 1'b1 }} ;
  assign ary_atpg_ctl_R1 = ( _14__R | _14__C & mbist_en_r_T ) & { 1{ mbist_en_r != 1'b1 }} ;
  assign _15_ = captureDR_r0 | _07_;
  assign _15__S = 0 ;
  logic [0:0] captureDR_r0_C0 ;
  logic [0:0] captureDR_r0_R0 ;
  logic [0:0] captureDR_r0_X0 ;
  logic [0:0] _07__C0 ;
  logic [0:0] _07__R0 ;
  logic [0:0] _07__X0 ;
  assign _15__T = captureDR_r0_T | _07__T ;
  assign captureDR_r0_C0 = _15__C ;
  assign captureDR_r0_X0 = _15__X ;
  assign _07__C0 = _15__C ;
  assign _07__X0 = _15__X ;
  assign captureDR_r0_R0 = ( _15__R | _15__C & _07__T ) & { 1{ _07_ != 1'b1 }} ;
  assign _07__R0 = ( _15__R | _15__C & captureDR_r0_T ) & { 1{ captureDR_r0 != 1'b1 }} ;
  always @(posedge la_bist_clkr0)
      mbist_ce_r0_1p <= mbist_ce_r0;
  logic [0:0] mbist_ce_r0_X1 ;
  logic [0:0] mbist_ce_r0_R1 ;
  logic [0:0] mbist_ce_r0_C1 ;
  assign mbist_ce_r0_X1 = { 1{ mbist_ce_r0_1p_S != mbist_ce_r0_S }} ;
  assign mbist_ce_r0_R1 = 0 ;
  assign mbist_ce_r0_C1 = 0 ;
  always @( posedge la_bist_clkr0 )
      mbist_ce_r0_1p_T 		<= mbist_ramaccess_rst_ ? 0 : ( mbist_ce_r0_T & mbist_ce_r0_X1 );
  always @( posedge la_bist_clkr0 )
      mbist_ce_r0_1p_t_flag 	<= mbist_ramaccess_rst_ ? 0 : mbist_ce_r0_1p_t_flag ? 1 : | mbist_ce_r0_T & ( | mbist_ce_r0_X1 );
  always @( posedge la_bist_clkr0 )
      mbist_ce_r0_1p_r_flag 	<= mbist_ramaccess_rst_ ? 0 : mbist_ce_r0_1p_r_flag ? 1 : mbist_ce_r0_1p_t_flag ? 0 : ( | mbist_ce_r0_1p_R ) ;
  always @(posedge la_bist_clkr0 or negedge mbist_ramaccess_rst_)
    if (!mbist_ramaccess_rst_)
      access_en_r_1p <= 1'b0;
    else
      access_en_r_1p <= access_en_r;
  logic [0:0] access_en_r_X0 ;
  logic [0:0] access_en_r_R0 ;
  logic [0:0] access_en_r_C0 ;
  assign access_en_r_X0 = { 1{ access_en_r_1p_S != access_en_r_S }} ;
  assign access_en_r_R0 = 0 ;
  assign access_en_r_C0 = 0 ;
  always @( posedge la_bist_clkr0 )
      access_en_r_1p_T 		<= !mbist_ramaccess_rst_ ? 0 : ( access_en_r_T & access_en_r_X0 );
  always @( posedge la_bist_clkr0 )
      access_en_r_1p_t_flag 	<= !mbist_ramaccess_rst_ ? 0 : access_en_r_1p_t_flag ? 1 : | access_en_r_T & ( | access_en_r_X0 );
  always @( posedge la_bist_clkr0 )
      access_en_r_1p_r_flag 	<= !mbist_ramaccess_rst_ ? 0 : access_en_r_1p_r_flag ? 1 : access_en_r_1p_t_flag ? 0 : ( | access_en_r_1p_R ) ;
  always @(posedge la_bist_clkr0 or negedge mbist_ramaccess_rst_)
    if (!mbist_ramaccess_rst_)
      updateDR_sync_1p <= 1'b0;
    else
      updateDR_sync_1p <= updateDR_sync;
  logic [0:0] updateDR_sync_X1 ;
  logic [0:0] updateDR_sync_R1 ;
  logic [0:0] updateDR_sync_C1 ;
  assign updateDR_sync_X1 = { 1{ updateDR_sync_1p_S != updateDR_sync_S }} ;
  assign updateDR_sync_R1 = 0 ;
  assign updateDR_sync_C1 = 0 ;
  always @( posedge la_bist_clkr0 )
      updateDR_sync_1p_T 		<= !mbist_ramaccess_rst_ ? 0 : ( updateDR_sync_T & updateDR_sync_X1 );
  always @( posedge la_bist_clkr0 )
      updateDR_sync_1p_t_flag 	<= !mbist_ramaccess_rst_ ? 0 : updateDR_sync_1p_t_flag ? 1 : | updateDR_sync_T & ( | updateDR_sync_X1 );
  always @( posedge la_bist_clkr0 )
      updateDR_sync_1p_r_flag 	<= !mbist_ramaccess_rst_ ? 0 : updateDR_sync_1p_r_flag ? 1 : updateDR_sync_1p_t_flag ? 0 : ( | updateDR_sync_1p_R ) ;
  assign muxed_re_r0 = muxed_re_r0_S ? muxed_re_r0_B : re;
  logic [0:0] muxed_re_r0_S_C1 ;
  logic [0:0] muxed_re_r0_S_R1 ;
  logic [0:0] muxed_re_r0_S_X1 ;
  assign muxed_re_r0_S_C1 = | muxed_re_r0_C ;
  assign muxed_re_r0_S_X1 = | muxed_re_r0_X ;
  assign muxed_re_r0_T = muxed_re_r0_S ? ( { 1{ muxed_re_r0_S_T  }} | muxed_re_r0_B_T ) : ( { 1{ muxed_re_r0_S_T  }} | re_T );
  assign muxed_re_r0_S = muxed_re_r0_S ? muxed_re_r0_B_S : re_S ;
  assign muxed_re_r0_S_R1 = ( | (muxed_re_r0_R | ( muxed_re_r0_C & ( { 1{ muxed_re_r0_S }} & muxed_re_r0_B_T | { 1{ !muxed_re_r0_S }} & re_T )))) && muxed_re_r0_B != re ;
  logic [0:0] muxed_re_r0_B_C0 ;
  logic [0:0] muxed_re_r0_B_R0 ;
  logic [0:0] muxed_re_r0_B_X0 ;
  assign muxed_re_r0_B_C0 = { 1{ muxed_re_r0_S }} ;
  assign muxed_re_r0_B_R0 = { 1{ muxed_re_r0_S }} & ( muxed_re_r0_R | ( { 1{ muxed_re_r0_S_T  }} & muxed_re_r0_C ));
  assign muxed_re_r0_B_X0 = { 1{ muxed_re_r0_S }} & muxed_re_r0_X ;
  logic [0:0] re_C1 ;
  logic [0:0] re_R1 ;
  logic [0:0] re_X1 ;
  assign re_C1 = { 1{ !muxed_re_r0_S }} ;
  assign re_R1 = { 1{ !muxed_re_r0_S }} & ( muxed_re_r0_R | ( { 1{ muxed_re_r0_S_T  }} & muxed_re_r0_C ));
  assign re_X1 = { 1{ !muxed_re_r0_S }} & muxed_re_r0_X ;
  assign muxed_Ra_r0 = muxed_re_r0_S ? muxed_Ra_r0_B : ra;
  logic [0:0] muxed_re_r0_S_C2 ;
  logic [0:0] muxed_re_r0_S_R2 ;
  logic [0:0] muxed_re_r0_S_X2 ;
  assign muxed_re_r0_S_C2 = | muxed_Ra_r0_C ;
  assign muxed_re_r0_S_X2 = | muxed_Ra_r0_X ;
  assign muxed_Ra_r0_T = muxed_re_r0_S ? ( { 7{ muxed_re_r0_S_T  }} | muxed_Ra_r0_B_T ) : ( { 7{ muxed_re_r0_S_T  }} | ra_T );
  assign muxed_Ra_r0_S = muxed_re_r0_S ? muxed_Ra_r0_B_S : ra_S ;
  assign muxed_re_r0_S_R2 = ( | (muxed_Ra_r0_R | ( muxed_Ra_r0_C & ( { 7{ muxed_re_r0_S }} & muxed_Ra_r0_B_T | { 7{ !muxed_re_r0_S }} & ra_T )))) && muxed_Ra_r0_B != ra ;
  logic [6:0] muxed_Ra_r0_B_C0 ;
  logic [6:0] muxed_Ra_r0_B_R0 ;
  logic [6:0] muxed_Ra_r0_B_X0 ;
  assign muxed_Ra_r0_B_C0 = { 7{ muxed_re_r0_S }} ;
  assign muxed_Ra_r0_B_R0 = { 7{ muxed_re_r0_S }} & ( muxed_Ra_r0_R | ( { 7{ muxed_re_r0_S_T  }} & muxed_Ra_r0_C ));
  assign muxed_Ra_r0_B_X0 = { 7{ muxed_re_r0_S }} & muxed_Ra_r0_X ;
  logic [6:0] ra_C0 ;
  logic [6:0] ra_R0 ;
  logic [6:0] ra_X0 ;
  assign ra_C0 = { 7{ !muxed_re_r0_S }} ;
  assign ra_R0 = { 7{ !muxed_re_r0_S }} & ( muxed_Ra_r0_R | ( { 7{ muxed_re_r0_S_T  }} & muxed_Ra_r0_C ));
  assign ra_X0 = { 7{ !muxed_re_r0_S }} & muxed_Ra_r0_X ;
  assign muxed_Ra_r0_B = debug_mode_sync ? Ra_reg_r0_A : mbist_Ra_r0;
  logic [0:0] debug_mode_sync_C3 ;
  logic [0:0] debug_mode_sync_R3 ;
  logic [0:0] debug_mode_sync_X3 ;
  assign debug_mode_sync_C3 = | muxed_Ra_r0_B_C ;
  assign debug_mode_sync_X3 = | muxed_Ra_r0_B_X ;
  assign muxed_Ra_r0_B_T = debug_mode_sync ? ( { 7{ debug_mode_sync_T  }} | Ra_reg_r0_A_T ) : ( { 7{ debug_mode_sync_T  }} | mbist_Ra_r0_T );
  assign muxed_Ra_r0_B_S = debug_mode_sync ? Ra_reg_r0_A_S : mbist_Ra_r0_S ;
  assign debug_mode_sync_R3 = ( | (muxed_Ra_r0_B_R | ( muxed_Ra_r0_B_C & ( { 7{ debug_mode_sync }} & Ra_reg_r0_A_T | { 7{ !debug_mode_sync }} & mbist_Ra_r0_T )))) && Ra_reg_r0_A != mbist_Ra_r0 ;
  logic [6:0] Ra_reg_r0_A_C0 ;
  logic [6:0] Ra_reg_r0_A_R0 ;
  logic [6:0] Ra_reg_r0_A_X0 ;
  assign Ra_reg_r0_A_C0 = { 7{ debug_mode_sync }} ;
  assign Ra_reg_r0_A_R0 = { 7{ debug_mode_sync }} & ( muxed_Ra_r0_B_R | ( { 7{ debug_mode_sync_T  }} & muxed_Ra_r0_B_C ));
  assign Ra_reg_r0_A_X0 = { 7{ debug_mode_sync }} & muxed_Ra_r0_B_X ;
  logic [6:0] mbist_Ra_r0_C0 ;
  logic [6:0] mbist_Ra_r0_R0 ;
  logic [6:0] mbist_Ra_r0_X0 ;
  assign mbist_Ra_r0_C0 = { 7{ !debug_mode_sync }} ;
  assign mbist_Ra_r0_R0 = { 7{ !debug_mode_sync }} & ( muxed_Ra_r0_B_R | ( { 7{ debug_mode_sync_T  }} & muxed_Ra_r0_B_C ));
  assign mbist_Ra_r0_X0 = { 7{ !debug_mode_sync }} & muxed_Ra_r0_B_X ;
  assign muxed_we_w0 = muxed_re_r0_S ? muxed_we_w0_B : we;
  logic [0:0] muxed_re_r0_S_C3 ;
  logic [0:0] muxed_re_r0_S_R3 ;
  logic [0:0] muxed_re_r0_S_X3 ;
  assign muxed_re_r0_S_C3 = | muxed_we_w0_C ;
  assign muxed_re_r0_S_X3 = | muxed_we_w0_X ;
  assign muxed_we_w0_T = muxed_re_r0_S ? ( { 1{ muxed_re_r0_S_T  }} | muxed_we_w0_B_T ) : ( { 1{ muxed_re_r0_S_T  }} | we_T );
  assign muxed_we_w0_S = muxed_re_r0_S ? muxed_we_w0_B_S : we_S ;
  assign muxed_re_r0_S_R3 = ( | (muxed_we_w0_R | ( muxed_we_w0_C & ( { 1{ muxed_re_r0_S }} & muxed_we_w0_B_T | { 1{ !muxed_re_r0_S }} & we_T )))) && muxed_we_w0_B != we ;
  logic [0:0] muxed_we_w0_B_C0 ;
  logic [0:0] muxed_we_w0_B_R0 ;
  logic [0:0] muxed_we_w0_B_X0 ;
  assign muxed_we_w0_B_C0 = { 1{ muxed_re_r0_S }} ;
  assign muxed_we_w0_B_R0 = { 1{ muxed_re_r0_S }} & ( muxed_we_w0_R | ( { 1{ muxed_re_r0_S_T  }} & muxed_we_w0_C ));
  assign muxed_we_w0_B_X0 = { 1{ muxed_re_r0_S }} & muxed_we_w0_X ;
  logic [0:0] we_C1 ;
  logic [0:0] we_R1 ;
  logic [0:0] we_X1 ;
  assign we_C1 = { 1{ !muxed_re_r0_S }} ;
  assign we_R1 = { 1{ !muxed_re_r0_S }} & ( muxed_we_w0_R | ( { 1{ muxed_re_r0_S_T  }} & muxed_we_w0_C ));
  assign we_X1 = { 1{ !muxed_re_r0_S }} & muxed_we_w0_X ;
  assign muxed_Wa_w0 = muxed_re_r0_S ? muxed_Wa_w0_B : wa;
  logic [0:0] muxed_re_r0_S_C4 ;
  logic [0:0] muxed_re_r0_S_R4 ;
  logic [0:0] muxed_re_r0_S_X4 ;
  assign muxed_re_r0_S_C4 = | muxed_Wa_w0_C ;
  assign muxed_re_r0_S_X4 = | muxed_Wa_w0_X ;
  assign muxed_Wa_w0_T = muxed_re_r0_S ? ( { 7{ muxed_re_r0_S_T  }} | muxed_Wa_w0_B_T ) : ( { 7{ muxed_re_r0_S_T  }} | wa_T );
  assign muxed_Wa_w0_S = muxed_re_r0_S ? muxed_Wa_w0_B_S : wa_S ;
  assign muxed_re_r0_S_R4 = ( | (muxed_Wa_w0_R | ( muxed_Wa_w0_C & ( { 7{ muxed_re_r0_S }} & muxed_Wa_w0_B_T | { 7{ !muxed_re_r0_S }} & wa_T )))) && muxed_Wa_w0_B != wa ;
  logic [6:0] muxed_Wa_w0_B_C0 ;
  logic [6:0] muxed_Wa_w0_B_R0 ;
  logic [6:0] muxed_Wa_w0_B_X0 ;
  assign muxed_Wa_w0_B_C0 = { 7{ muxed_re_r0_S }} ;
  assign muxed_Wa_w0_B_R0 = { 7{ muxed_re_r0_S }} & ( muxed_Wa_w0_R | ( { 7{ muxed_re_r0_S_T  }} & muxed_Wa_w0_C ));
  assign muxed_Wa_w0_B_X0 = { 7{ muxed_re_r0_S }} & muxed_Wa_w0_X ;
  logic [6:0] wa_C0 ;
  logic [6:0] wa_R0 ;
  logic [6:0] wa_X0 ;
  assign wa_C0 = { 7{ !muxed_re_r0_S }} ;
  assign wa_R0 = { 7{ !muxed_re_r0_S }} & ( muxed_Wa_w0_R | ( { 7{ muxed_re_r0_S_T  }} & muxed_Wa_w0_C ));
  assign wa_X0 = { 7{ !muxed_re_r0_S }} & muxed_Wa_w0_X ;
  assign muxed_Wa_w0_B = debug_mode_sync ? Wa_reg_w0_A : mbist_Wa_w0;
  logic [0:0] debug_mode_sync_C4 ;
  logic [0:0] debug_mode_sync_R4 ;
  logic [0:0] debug_mode_sync_X4 ;
  assign debug_mode_sync_C4 = | muxed_Wa_w0_B_C ;
  assign debug_mode_sync_X4 = | muxed_Wa_w0_B_X ;
  assign muxed_Wa_w0_B_T = debug_mode_sync ? ( { 7{ debug_mode_sync_T  }} | Wa_reg_w0_A_T ) : ( { 7{ debug_mode_sync_T  }} | mbist_Wa_w0_T );
  assign muxed_Wa_w0_B_S = debug_mode_sync ? Wa_reg_w0_A_S : mbist_Wa_w0_S ;
  assign debug_mode_sync_R4 = ( | (muxed_Wa_w0_B_R | ( muxed_Wa_w0_B_C & ( { 7{ debug_mode_sync }} & Wa_reg_w0_A_T | { 7{ !debug_mode_sync }} & mbist_Wa_w0_T )))) && Wa_reg_w0_A != mbist_Wa_w0 ;
  logic [6:0] Wa_reg_w0_A_C0 ;
  logic [6:0] Wa_reg_w0_A_R0 ;
  logic [6:0] Wa_reg_w0_A_X0 ;
  assign Wa_reg_w0_A_C0 = { 7{ debug_mode_sync }} ;
  assign Wa_reg_w0_A_R0 = { 7{ debug_mode_sync }} & ( muxed_Wa_w0_B_R | ( { 7{ debug_mode_sync_T  }} & muxed_Wa_w0_B_C ));
  assign Wa_reg_w0_A_X0 = { 7{ debug_mode_sync }} & muxed_Wa_w0_B_X ;
  logic [6:0] mbist_Wa_w0_C0 ;
  logic [6:0] mbist_Wa_w0_R0 ;
  logic [6:0] mbist_Wa_w0_X0 ;
  assign mbist_Wa_w0_C0 = { 7{ !debug_mode_sync }} ;
  assign mbist_Wa_w0_R0 = { 7{ !debug_mode_sync }} & ( muxed_Wa_w0_B_R | ( { 7{ debug_mode_sync_T  }} & muxed_Wa_w0_B_C ));
  assign mbist_Wa_w0_X0 = { 7{ !debug_mode_sync }} & muxed_Wa_w0_B_X ;
  assign Wdata = muxed_re_r0_S ? muxed_Di_w0_B : di;
  logic [0:0] muxed_re_r0_S_C5 ;
  logic [0:0] muxed_re_r0_S_R5 ;
  logic [0:0] muxed_re_r0_S_X5 ;
  assign muxed_re_r0_S_C5 = | Wdata_C ;
  assign muxed_re_r0_S_X5 = | Wdata_X ;
  assign Wdata_T = muxed_re_r0_S ? ( { 11{ muxed_re_r0_S_T  }} | muxed_Di_w0_B_T ) : ( { 11{ muxed_re_r0_S_T  }} | di_T );
  assign Wdata_S = muxed_re_r0_S ? muxed_Di_w0_B_S : di_S ;
  assign muxed_re_r0_S_R5 = ( | (Wdata_R | ( Wdata_C & ( { 11{ muxed_re_r0_S }} & muxed_Di_w0_B_T | { 11{ !muxed_re_r0_S }} & di_T )))) && muxed_Di_w0_B != di ;
  logic [10:0] muxed_Di_w0_B_C0 ;
  logic [10:0] muxed_Di_w0_B_R0 ;
  logic [10:0] muxed_Di_w0_B_X0 ;
  assign muxed_Di_w0_B_C0 = { 11{ muxed_re_r0_S }} ;
  assign muxed_Di_w0_B_R0 = { 11{ muxed_re_r0_S }} & ( Wdata_R | ( { 11{ muxed_re_r0_S_T  }} & Wdata_C ));
  assign muxed_Di_w0_B_X0 = { 11{ muxed_re_r0_S }} & Wdata_X ;
  logic [10:0] di_C0 ;
  logic [10:0] di_R0 ;
  logic [10:0] di_X0 ;
  assign di_C0 = { 11{ !muxed_re_r0_S }} ;
  assign di_R0 = { 11{ !muxed_re_r0_S }} & ( Wdata_R | ( { 11{ muxed_re_r0_S_T  }} & Wdata_C ));
  assign di_X0 = { 11{ !muxed_re_r0_S }} & Wdata_X ;
  logic [10:0] fangyuan0;
  logic [10:0] fangyuan0_T ;
  logic [10:0] fangyuan0_R ;
  logic [10:0] fangyuan0_C ;
  logic [10:0] fangyuan0_X ;
  assign fangyuan0 = { mbist_Di_w0[0], mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0 };
  assign fangyuan0_T = {  mbist_Di_w0_T [0] , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T  };
  logic [13:0] fangyuan0_S ;
  assign fangyuan0_S = 0 ;
  logic [1:0] mbist_Di_w0_R0 ;
  logic [1:0] mbist_Di_w0_X0 ;
  logic [1:0] mbist_Di_w0_C0 ;
  assign mbist_Di_w0_R0 [0:0] = fangyuan0_R [10:10] ;
  assign mbist_Di_w0_X0 [0:0] = fangyuan0_X [10:10] ;
  assign mbist_Di_w0_C0 [0:0] = fangyuan0_C [10:10] ;
  assign { mbist_Di_w0_R0 [1:1] } = 0;
  assign { mbist_Di_w0_X0 [1:1] } = 0;
  assign { mbist_Di_w0_C0 [1:1] } = 0;
  logic [1:0] mbist_Di_w0_R1 ;
  logic [1:0] mbist_Di_w0_X1 ;
  logic [1:0] mbist_Di_w0_C1 ;
  assign mbist_Di_w0_R1 = fangyuan0_R [9:8] ;
  assign mbist_Di_w0_X1 = fangyuan0_X [9:8] ;
  assign mbist_Di_w0_C1 = fangyuan0_C [9:8] ;
  logic [1:0] mbist_Di_w0_R2 ;
  logic [1:0] mbist_Di_w0_X2 ;
  logic [1:0] mbist_Di_w0_C2 ;
  assign mbist_Di_w0_R2 = fangyuan0_R [7:6] ;
  assign mbist_Di_w0_X2 = fangyuan0_X [7:6] ;
  assign mbist_Di_w0_C2 = fangyuan0_C [7:6] ;
  logic [1:0] mbist_Di_w0_R3 ;
  logic [1:0] mbist_Di_w0_X3 ;
  logic [1:0] mbist_Di_w0_C3 ;
  assign mbist_Di_w0_R3 = fangyuan0_R [5:4] ;
  assign mbist_Di_w0_X3 = fangyuan0_X [5:4] ;
  assign mbist_Di_w0_C3 = fangyuan0_C [5:4] ;
  logic [1:0] mbist_Di_w0_R4 ;
  logic [1:0] mbist_Di_w0_X4 ;
  logic [1:0] mbist_Di_w0_C4 ;
  assign mbist_Di_w0_R4 = fangyuan0_R [3:2] ;
  assign mbist_Di_w0_X4 = fangyuan0_X [3:2] ;
  assign mbist_Di_w0_C4 = fangyuan0_C [3:2] ;
  logic [1:0] mbist_Di_w0_R5 ;
  logic [1:0] mbist_Di_w0_X5 ;
  logic [1:0] mbist_Di_w0_C5 ;
  assign mbist_Di_w0_R5 = fangyuan0_R [1:0] ;
  assign mbist_Di_w0_X5 = fangyuan0_X [1:0] ;
  assign mbist_Di_w0_C5 = fangyuan0_C [1:0] ;

  assign muxed_Di_w0_B = debug_mode_sync ? data_regq : fangyuan0;
  logic [0:0] debug_mode_sync_C5 ;
  logic [0:0] debug_mode_sync_R5 ;
  logic [0:0] debug_mode_sync_X5 ;
  assign debug_mode_sync_C5 = | muxed_Di_w0_B_C ;
  assign debug_mode_sync_X5 = | muxed_Di_w0_B_X ;
  assign muxed_Di_w0_B_T = debug_mode_sync ? ( { 11{ debug_mode_sync_T  }} | data_regq_T ) : ( { 11{ debug_mode_sync_T  }} | fangyuan0_T );
  assign muxed_Di_w0_B_S = debug_mode_sync ? data_regq_S : fangyuan0_S ;
  assign debug_mode_sync_R5 = ( | (muxed_Di_w0_B_R | ( muxed_Di_w0_B_C & ( { 11{ debug_mode_sync }} & data_regq_T | { 11{ !debug_mode_sync }} & fangyuan0_T )))) && data_regq != fangyuan0 ;
  logic [10:0] data_regq_C0 ;
  logic [10:0] data_regq_R0 ;
  logic [10:0] data_regq_X0 ;
  assign data_regq_C0 = { 11{ debug_mode_sync }} ;
  assign data_regq_R0 = { 11{ debug_mode_sync }} & ( muxed_Di_w0_B_R | ( { 11{ debug_mode_sync_T  }} & muxed_Di_w0_B_C ));
  assign data_regq_X0 = { 11{ debug_mode_sync }} & muxed_Di_w0_B_X ;
  logic [10:0] fangyuan0_C0 ;
  logic [10:0] fangyuan0_R0 ;
  logic [10:0] fangyuan0_X0 ;
  assign fangyuan0_C0 = { 11{ !debug_mode_sync }} ;
  assign fangyuan0_R0 = { 11{ !debug_mode_sync }} & ( muxed_Di_w0_B_R | ( { 11{ debug_mode_sync_T  }} & muxed_Di_w0_B_C ));
  assign fangyuan0_X0 = { 11{ !debug_mode_sync }} & muxed_Di_w0_B_X ;
  assign muxed_we_w0_B = debug_mode_sync ? _00_ : _01_;
  logic [0:0] debug_mode_sync_C6 ;
  logic [0:0] debug_mode_sync_R6 ;
  logic [0:0] debug_mode_sync_X6 ;
  assign debug_mode_sync_C6 = | muxed_we_w0_B_C ;
  assign debug_mode_sync_X6 = | muxed_we_w0_B_X ;
  assign muxed_we_w0_B_T = debug_mode_sync ? ( { 1{ debug_mode_sync_T  }} | _00__T ) : ( { 1{ debug_mode_sync_T  }} | _01__T );
  assign muxed_we_w0_B_S = debug_mode_sync ? _00__S : _01__S ;
  assign debug_mode_sync_R6 = ( | (muxed_we_w0_B_R | ( muxed_we_w0_B_C & ( { 1{ debug_mode_sync }} & _00__T | { 1{ !debug_mode_sync }} & _01__T )))) && _00_ != _01_ ;
  logic [0:0] _00__C0 ;
  logic [0:0] _00__R0 ;
  logic [0:0] _00__X0 ;
  assign _00__C0 = { 1{ debug_mode_sync }} ;
  assign _00__R0 = { 1{ debug_mode_sync }} & ( muxed_we_w0_B_R | ( { 1{ debug_mode_sync_T  }} & muxed_we_w0_B_C ));
  assign _00__X0 = { 1{ debug_mode_sync }} & muxed_we_w0_B_X ;
  logic [0:0] _01__C0 ;
  logic [0:0] _01__R0 ;
  logic [0:0] _01__X0 ;
  assign _01__C0 = { 1{ !debug_mode_sync }} ;
  assign _01__R0 = { 1{ !debug_mode_sync }} & ( muxed_we_w0_B_R | ( { 1{ debug_mode_sync_T  }} & muxed_we_w0_B_C ));
  assign _01__X0 = { 1{ !debug_mode_sync }} & muxed_we_w0_B_X ;
  assign muxed_re_r0_B = debug_mode_sync ? access_en_r : _02_;
  logic [0:0] debug_mode_sync_C7 ;
  logic [0:0] debug_mode_sync_R7 ;
  logic [0:0] debug_mode_sync_X7 ;
  assign debug_mode_sync_C7 = | muxed_re_r0_B_C ;
  assign debug_mode_sync_X7 = | muxed_re_r0_B_X ;
  assign muxed_re_r0_B_T = debug_mode_sync ? ( { 1{ debug_mode_sync_T  }} | access_en_r_T ) : ( { 1{ debug_mode_sync_T  }} | _02__T );
  assign muxed_re_r0_B_S = debug_mode_sync ? access_en_r_S : _02__S ;
  assign debug_mode_sync_R7 = ( | (muxed_re_r0_B_R | ( muxed_re_r0_B_C & ( { 1{ debug_mode_sync }} & access_en_r_T | { 1{ !debug_mode_sync }} & _02__T )))) && access_en_r != _02_ ;
  logic [0:0] access_en_r_C1 ;
  logic [0:0] access_en_r_R1 ;
  logic [0:0] access_en_r_X1 ;
  assign access_en_r_C1 = { 1{ debug_mode_sync }} ;
  assign access_en_r_R1 = { 1{ debug_mode_sync }} & ( muxed_re_r0_B_R | ( { 1{ debug_mode_sync_T  }} & muxed_re_r0_B_C ));
  assign access_en_r_X1 = { 1{ debug_mode_sync }} & muxed_re_r0_B_X ;
  logic [0:0] _02__C0 ;
  logic [0:0] _02__R0 ;
  logic [0:0] _02__X0 ;
  assign _02__C0 = { 1{ !debug_mode_sync }} ;
  assign _02__R0 = { 1{ !debug_mode_sync }} & ( muxed_re_r0_B_R | ( { 1{ debug_mode_sync_T  }} & muxed_re_r0_B_C ));
  assign _02__X0 = { 1{ !debug_mode_sync }} & muxed_re_r0_B_X ;
  assign r0_OutputMuxDataOut = ram_bypass ? Wdata : dout_0_0;
  logic [0:0] ram_bypass_C0 ;
  logic [0:0] ram_bypass_R0 ;
  logic [0:0] ram_bypass_X0 ;
  assign ram_bypass_C0 = | r0_OutputMuxDataOut_C ;
  assign ram_bypass_X0 = | r0_OutputMuxDataOut_X ;
  assign r0_OutputMuxDataOut_T = ram_bypass ? ( { 11{ ram_bypass_T  }} | Wdata_T ) : ( { 11{ ram_bypass_T  }} | dout_0_0_T );
  assign r0_OutputMuxDataOut_S = ram_bypass ? Wdata_S : dout_0_0_S ;
  assign ram_bypass_R0 = ( | (r0_OutputMuxDataOut_R | ( r0_OutputMuxDataOut_C & ( { 11{ ram_bypass }} & Wdata_T | { 11{ !ram_bypass }} & dout_0_0_T )))) && Wdata != dout_0_0 ;
  logic [10:0] Wdata_C0 ;
  logic [10:0] Wdata_R0 ;
  logic [10:0] Wdata_X0 ;
  assign Wdata_C0 = { 11{ ram_bypass }} ;
  assign Wdata_R0 = { 11{ ram_bypass }} & ( r0_OutputMuxDataOut_R | ( { 11{ ram_bypass_T  }} & r0_OutputMuxDataOut_C ));
  assign Wdata_X0 = { 11{ ram_bypass }} & r0_OutputMuxDataOut_X ;
  logic [10:0] dout_0_0_C0 ;
  logic [10:0] dout_0_0_R0 ;
  logic [10:0] dout_0_0_X0 ;
  assign dout_0_0_C0 = { 11{ !ram_bypass }} ;
  assign dout_0_0_R0 = { 11{ !ram_bypass }} & ( r0_OutputMuxDataOut_R | ( { 11{ ram_bypass_T  }} & r0_OutputMuxDataOut_C ));
  assign dout_0_0_X0 = { 11{ !ram_bypass }} & r0_OutputMuxDataOut_X ;
  assign _16_ = debug_mode_sync ? access_en_r_1p : _06_;
  logic [0:0] debug_mode_sync_C8 ;
  logic [0:0] debug_mode_sync_R8 ;
  logic [0:0] debug_mode_sync_X8 ;
  assign debug_mode_sync_C8 = | _16__C ;
  assign debug_mode_sync_X8 = | _16__X ;
  assign _16__T = debug_mode_sync ? ( { 1{ debug_mode_sync_T  }} | access_en_r_1p_T ) : ( { 1{ debug_mode_sync_T  }} | _06__T );
  assign _16__S = debug_mode_sync ? access_en_r_1p_S : _06__S ;
  assign debug_mode_sync_R8 = ( | (_16__R | ( _16__C & ( { 1{ debug_mode_sync }} & access_en_r_1p_T | { 1{ !debug_mode_sync }} & _06__T )))) && access_en_r_1p != _06_ ;
  logic [0:0] access_en_r_1p_C0 ;
  logic [0:0] access_en_r_1p_R0 ;
  logic [0:0] access_en_r_1p_X0 ;
  assign access_en_r_1p_C0 = { 1{ debug_mode_sync }} ;
  assign access_en_r_1p_R0 = { 1{ debug_mode_sync }} & ( _16__R | ( { 1{ debug_mode_sync_T  }} & _16__C ));
  assign access_en_r_1p_X0 = { 1{ debug_mode_sync }} & _16__X ;
  logic [0:0] _06__C0 ;
  logic [0:0] _06__R0 ;
  logic [0:0] _06__X0 ;
  assign _06__C0 = { 1{ !debug_mode_sync }} ;
  assign _06__R0 = { 1{ !debug_mode_sync }} & ( _16__R | ( { 1{ debug_mode_sync_T  }} & _16__C ));
  assign _06__X0 = { 1{ !debug_mode_sync }} & _16__X ;
  assign _17_ = debug_mode_sync ? shiftDR : _14_;
  logic [0:0] debug_mode_sync_C9 ;
  logic [0:0] debug_mode_sync_R9 ;
  logic [0:0] debug_mode_sync_X9 ;
  assign debug_mode_sync_C9 = | _17__C ;
  assign debug_mode_sync_X9 = | _17__X ;
  assign _17__T = debug_mode_sync ? ( { 1{ debug_mode_sync_T  }} | shiftDR_T ) : ( { 1{ debug_mode_sync_T  }} | _14__T );
  assign _17__S = debug_mode_sync ? shiftDR_S : _14__S ;
  assign debug_mode_sync_R9 = ( | (_17__R | ( _17__C & ( { 1{ debug_mode_sync }} & shiftDR_T | { 1{ !debug_mode_sync }} & _14__T )))) && shiftDR != _14_ ;
  logic [0:0] shiftDR_C1 ;
  logic [0:0] shiftDR_R1 ;
  logic [0:0] shiftDR_X1 ;
  assign shiftDR_C1 = { 1{ debug_mode_sync }} ;
  assign shiftDR_R1 = { 1{ debug_mode_sync }} & ( _17__R | ( { 1{ debug_mode_sync_T  }} & _17__C ));
  assign shiftDR_X1 = { 1{ debug_mode_sync }} & _17__X ;
  logic [0:0] _14__C0 ;
  logic [0:0] _14__R0 ;
  logic [0:0] _14__X0 ;
  assign _14__C0 = { 1{ !debug_mode_sync }} ;
  assign _14__R0 = { 1{ !debug_mode_sync }} & ( _17__R | ( { 1{ debug_mode_sync_T  }} & _17__C ));
  assign _14__X0 = { 1{ !debug_mode_sync }} & _17__X ;
  logic [0:0] clk_R0 ;
  logic [0:0] clk_X0 ;
  logic [0:0] clk_C0 ;
  logic [0:0] mbist_ramaccess_rst__R0 ;
  logic [0:0] mbist_ramaccess_rst__X0 ;
  logic [0:0] mbist_ramaccess_rst__C0 ;
  logic [0:0] scan_en_R2 ;
  logic [0:0] scan_en_X2 ;
  logic [0:0] scan_en_C2 ;
// module: CKLNQD12PO4
  CKLNQD12PO4 CLK_GATE_clk (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R0  ),
    .CP_X (  clk_X0  ),
    .CP_C (  clk_C0  ),
    .CP_S (  clk_S  ),
    .E_T (  mbist_ramaccess_rst__T  ),
    .E_R (  mbist_ramaccess_rst__R0  ),
    .E_X (  mbist_ramaccess_rst__X0  ),
    .E_C (  mbist_ramaccess_rst__C0  ),
    .E_S (  mbist_ramaccess_rst__S  ),
    .TE_T (  scan_en_T  ),
    .TE_R (  scan_en_R2  ),
    .TE_X (  scan_en_X2  ),
    .TE_C (  scan_en_C2  ),
    .TE_S (  scan_en_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  dft_rst_gated_clk_T  ),
    .Q_R0 (  dft_rst_gated_clk_R  ),
    .Q_X0 (  dft_rst_gated_clk_X  ),
    .Q_C0 (  dft_rst_gated_clk_C  ),
    .Q_S ( dft_rst_gated_clk_S ),
    .TE ( scan_en ),
    .Q ( dft_rst_gated_clk ),
    .CP ( clk ),
    .E ( mbist_ramaccess_rst_ )
  );
  logic [0:0] clk_R1 ;
  logic [0:0] clk_X1 ;
  logic [0:0] clk_C1 ;
  logic [0:0] clk_en_core_R0 ;
  logic [0:0] clk_en_core_X0 ;
  logic [0:0] clk_en_core_C0 ;
  logic [0:0] _13__R0 ;
  logic [0:0] _13__X0 ;
  logic [0:0] _13__C0 ;
// module: CKLNQD12PO4
  CKLNQD12PO4 UJ_clk_gate_core (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R1  ),
    .CP_X (  clk_X1  ),
    .CP_C (  clk_C1  ),
    .CP_S (  clk_S  ),
    .E_T (  clk_en_core_T  ),
    .E_R (  clk_en_core_R0  ),
    .E_X (  clk_en_core_X0  ),
    .E_C (  clk_en_core_C0  ),
    .E_S (  clk_en_core_S  ),
    .TE_T (  _13__T  ),
    .TE_R (  _13__R0  ),
    .TE_X (  _13__X0  ),
    .TE_C (  _13__C0  ),
    .TE_S (  _13__S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  gated_clk_core_T  ),
    .Q_R0 (  gated_clk_core_R  ),
    .Q_X0 (  gated_clk_core_X  ),
    .Q_C0 (  gated_clk_core_C  ),
    .Q_S ( gated_clk_core_S ),
    .TE ( _13_ ),
    .Q ( gated_clk_core ),
    .CP ( clk ),
    .E ( clk_en_core )
  );
  logic [0:0] clk_R2 ;
  logic [0:0] clk_X2 ;
  logic [0:0] clk_C2 ;
  logic [0:0] _15__R0 ;
  logic [0:0] _15__X0 ;
  logic [0:0] _15__C0 ;
  logic [0:0] scan_en_R3 ;
  logic [0:0] scan_en_X3 ;
  logic [0:0] scan_en_C3 ;
// module: CKLNQD12PO4
  CKLNQD12PO4 UJ_clk_jtag_Data_reg_r0 (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R2  ),
    .CP_X (  clk_X2  ),
    .CP_C (  clk_C2  ),
    .CP_S (  clk_S  ),
    .E_T (  _15__T  ),
    .E_R (  _15__R0  ),
    .E_X (  _15__X0  ),
    .E_C (  _15__C0  ),
    .E_S (  _15__S  ),
    .TE_T (  scan_en_T  ),
    .TE_R (  scan_en_R3  ),
    .TE_X (  scan_en_X3  ),
    .TE_C (  scan_en_C3  ),
    .TE_S (  scan_en_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  gated_clk_jtag_Data_reg_r0_T  ),
    .Q_R0 (  gated_clk_jtag_Data_reg_r0_R  ),
    .Q_X0 (  gated_clk_jtag_Data_reg_r0_X  ),
    .Q_C0 (  gated_clk_jtag_Data_reg_r0_C  ),
    .Q_S ( gated_clk_jtag_Data_reg_r0_S ),
    .TE ( scan_en ),
    .Q ( gated_clk_jtag_Data_reg_r0 ),
    .CP ( clk ),
    .E ( _15_ )
  );
  logic [0:0] clk_R3 ;
  logic [0:0] clk_X3 ;
  logic [0:0] clk_C3 ;
  logic [0:0] _17__R0 ;
  logic [0:0] _17__X0 ;
  logic [0:0] _17__C0 ;
  logic [0:0] scan_en_R4 ;
  logic [0:0] scan_en_X4 ;
  logic [0:0] scan_en_C4 ;
// module: CKLNQD12PO4
  CKLNQD12PO4 UJ_clk_jtag_Wa_reg_w0 (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R3  ),
    .CP_X (  clk_X3  ),
    .CP_C (  clk_C3  ),
    .CP_S (  clk_S  ),
    .E_T (  _17__T  ),
    .E_R (  _17__R0  ),
    .E_X (  _17__X0  ),
    .E_C (  _17__C0  ),
    .E_S (  _17__S  ),
    .TE_T (  scan_en_T  ),
    .TE_R (  scan_en_R4  ),
    .TE_X (  scan_en_X4  ),
    .TE_C (  scan_en_C4  ),
    .TE_S (  scan_en_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  gated_clk_jtag_Wa_reg_w0_T  ),
    .Q_R0 (  gated_clk_jtag_Wa_reg_w0_R  ),
    .Q_X0 (  gated_clk_jtag_Wa_reg_w0_X  ),
    .Q_C0 (  gated_clk_jtag_Wa_reg_w0_C  ),
    .Q_S ( gated_clk_jtag_Wa_reg_w0_S ),
    .TE ( scan_en ),
    .Q ( gated_clk_jtag_Wa_reg_w0 ),
    .CP ( clk ),
    .E ( _17_ )
  );
  logic [0:0] clk_R4 ;
  logic [0:0] clk_X4 ;
  logic [0:0] clk_C4 ;
  logic [0:0] muxed_re_r0_S_R6 ;
  logic [0:0] muxed_re_r0_S_X6 ;
  logic [0:0] muxed_re_r0_S_C6 ;
  logic [0:0] scan_en_R5 ;
  logic [0:0] scan_en_X5 ;
  logic [0:0] scan_en_C5 ;
// module: CKLNQD12PO4
  CKLNQD12PO4 UJ_la_bist_clkw0_gate (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R4  ),
    .CP_X (  clk_X4  ),
    .CP_C (  clk_C4  ),
    .CP_S (  clk_S  ),
    .E_T (  muxed_re_r0_S_T  ),
    .E_R (  muxed_re_r0_S_R6  ),
    .E_X (  muxed_re_r0_S_X6  ),
    .E_C (  muxed_re_r0_S_C6  ),
    .E_S (  muxed_re_r0_S_S  ),
    .TE_T (  scan_en_T  ),
    .TE_R (  scan_en_R5  ),
    .TE_X (  scan_en_X5  ),
    .TE_C (  scan_en_C5  ),
    .TE_S (  scan_en_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  la_bist_clkr0_T  ),
    .Q_R0 (  la_bist_clkr0_R  ),
    .Q_X0 (  la_bist_clkr0_X  ),
    .Q_C0 (  la_bist_clkr0_C  ),
    .Q_S ( la_bist_clkr0_S ),
    .TE ( scan_en ),
    .Q ( la_bist_clkr0 ),
    .CP ( clk ),
    .E ( muxed_re_r0_S )
  );
  logic [0:0] dft_rst_gated_clk_R0 ;
  logic [0:0] dft_rst_gated_clk_X0 ;
  logic [0:0] dft_rst_gated_clk_C0 ;
  logic [0:0] mbist_ramaccess_rst__R1 ;
  logic [0:0] mbist_ramaccess_rst__X1 ;
  logic [0:0] mbist_ramaccess_rst__C1 ;
  logic [0:0] debug_mode_R0 ;
  logic [0:0] debug_mode_X0 ;
  logic [0:0] debug_mode_C0 ;
// module: sync2d_c_pp
  sync2d_c_pp debug_mode_synchronizer (
    .clk_T (  dft_rst_gated_clk_T  ),
    .clk_R (  dft_rst_gated_clk_R0  ),
    .clk_X (  dft_rst_gated_clk_X0  ),
    .clk_C (  dft_rst_gated_clk_C0  ),
    .clk_S (  dft_rst_gated_clk_S  ),
    .clr__T (  mbist_ramaccess_rst__T  ),
    .clr__R (  mbist_ramaccess_rst__R1  ),
    .clr__X (  mbist_ramaccess_rst__X1  ),
    .clr__C (  mbist_ramaccess_rst__C1  ),
    .clr__S (  mbist_ramaccess_rst__S  ),
    .d_T (  debug_mode_T  ),
    .d_R (  debug_mode_R0  ),
    .d_X (  debug_mode_X0  ),
    .d_C (  debug_mode_C0  ),
    .d_S (  debug_mode_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .q_T (  debug_mode_sync_T  ),
    .q_R0 (  debug_mode_sync_R  ),
    .q_X0 (  debug_mode_sync_X  ),
    .q_C0 (  debug_mode_sync_C  ),
    .q_S ( debug_mode_sync_S ),
    .q ( debug_mode_sync ),
    .d ( debug_mode ),
    .clk ( dft_rst_gated_clk ),
    .clr_ ( mbist_ramaccess_rst_ )
  );
  logic [0:0] mbist_ramaccess_rst__R2 ;
  logic [0:0] mbist_ramaccess_rst__X2 ;
  logic [0:0] mbist_ramaccess_rst__C2 ;
  logic [0:0] dft_rst_gated_clk_R1 ;
  logic [0:0] dft_rst_gated_clk_X1 ;
  logic [0:0] dft_rst_gated_clk_C1 ;
  logic [0:0] mbist_en_sync_R0 ;
  logic [0:0] mbist_en_sync_X0 ;
  logic [0:0] mbist_en_sync_C0 ;
// module: p_SDFCNQD1PO4
  p_SDFCNQD1PO4 mbist_en_flop (
    .CDN_T (  mbist_ramaccess_rst__T  ),
    .CDN_R (  mbist_ramaccess_rst__R2  ),
    .CDN_X (  mbist_ramaccess_rst__X2  ),
    .CDN_C (  mbist_ramaccess_rst__C2  ),
    .CDN_S (  mbist_ramaccess_rst__S  ),
    .CP_T (  dft_rst_gated_clk_T  ),
    .CP_R (  dft_rst_gated_clk_R1  ),
    .CP_X (  dft_rst_gated_clk_X1  ),
    .CP_C (  dft_rst_gated_clk_C1  ),
    .CP_S (  dft_rst_gated_clk_S  ),
    .D_T (  mbist_en_sync_T  ),
    .D_R (  mbist_en_sync_R0  ),
    .D_X (  mbist_en_sync_X0  ),
    .D_C (  mbist_en_sync_C0  ),
    .D_S (  mbist_en_sync_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  mbist_en_r_T  ),
    .Q_R0 (  mbist_en_r_R  ),
    .Q_X0 (  mbist_en_r_X  ),
    .Q_C0 (  mbist_en_r_C  ),
    .Q_S ( mbist_en_r_S ),
    .Q ( mbist_en_r ),
    .CDN ( mbist_ramaccess_rst_ ),
    .D ( mbist_en_sync ),
    .CP ( dft_rst_gated_clk )
  );
  logic [0:0] gated_clk_core_R0 ;
  logic [0:0] gated_clk_core_X0 ;
  logic [0:0] gated_clk_core_C0 ;
  logic [0:0] gated_clk_core_R1 ;
  logic [0:0] gated_clk_core_X1 ;
  logic [0:0] gated_clk_core_C1 ;
  logic [0:0] iddq_mode_R0 ;
  logic [0:0] iddq_mode_X0 ;
  logic [0:0] iddq_mode_C0 ;
  logic [6:0] muxed_Ra_r0_R0 ;
  logic [6:0] muxed_Ra_r0_X0 ;
  logic [6:0] muxed_Ra_r0_C0 ;
  logic [0:0] piece_re_R0 ;
  logic [0:0] piece_re_X0 ;
  logic [0:0] piece_re_C0 ;
  logic [31:0] pwrbus_ram_pd_R0 ;
  logic [31:0] pwrbus_ram_pd_X0 ;
  logic [31:0] pwrbus_ram_pd_C0 ;
  logic [1:0] svop_R0 ;
  logic [1:0] svop_X0 ;
  logic [1:0] svop_C0 ;
  logic [6:0] muxed_Wa_w0_R0 ;
  logic [6:0] muxed_Wa_w0_X0 ;
  logic [6:0] muxed_Wa_w0_C0 ;
  logic [10:0] Wdata_R1 ;
  logic [10:0] Wdata_X1 ;
  logic [10:0] Wdata_C1 ;
  logic [0:0] _09__R0 ;
  logic [0:0] _09__X0 ;
  logic [0:0] _09__C0 ;
// module: RAMDP_128X11_GL_M2_E2
  RAMDP_128X11_GL_M2_E2 ram_Inst_128X11 (
    .CLK_R_T (  gated_clk_core_T  ),
    .CLK_R_R (  gated_clk_core_R0  ),
    .CLK_R_X (  gated_clk_core_X0  ),
    .CLK_R_C (  gated_clk_core_C0  ),
    .CLK_R_S (  gated_clk_core_S  ),
    .CLK_W_T (  gated_clk_core_T  ),
    .CLK_W_R (  gated_clk_core_R1  ),
    .CLK_W_X (  gated_clk_core_X1  ),
    .CLK_W_C (  gated_clk_core_C1  ),
    .CLK_W_S (  gated_clk_core_S  ),
    .IDDQ_T (  iddq_mode_T  ),
    .IDDQ_R (  iddq_mode_R0  ),
    .IDDQ_X (  iddq_mode_X0  ),
    .IDDQ_C (  iddq_mode_C0  ),
    .IDDQ_S (  iddq_mode_S  ),
    .RADR_0_T (  muxed_Ra_r0_T [0]  ),
    .RADR_0_R (  muxed_Ra_r0_R0 [0]  ),
    .RADR_0_X (  muxed_Ra_r0_X0 [0]  ),
    .RADR_0_C (  muxed_Ra_r0_C0 [0]  ),
    .RADR_0_S (  muxed_Ra_r0_S [0]  ),
    .RADR_1_T (  muxed_Ra_r0_T [1]  ),
    .RADR_1_R (  muxed_Ra_r0_R0 [1]  ),
    .RADR_1_X (  muxed_Ra_r0_X0 [1]  ),
    .RADR_1_C (  muxed_Ra_r0_C0 [1]  ),
    .RADR_1_S (  muxed_Ra_r0_S [1]  ),
    .RADR_2_T (  muxed_Ra_r0_T [2]  ),
    .RADR_2_R (  muxed_Ra_r0_R0 [2]  ),
    .RADR_2_X (  muxed_Ra_r0_X0 [2]  ),
    .RADR_2_C (  muxed_Ra_r0_C0 [2]  ),
    .RADR_2_S (  muxed_Ra_r0_S [2]  ),
    .RADR_3_T (  muxed_Ra_r0_T [3]  ),
    .RADR_3_R (  muxed_Ra_r0_R0 [3]  ),
    .RADR_3_X (  muxed_Ra_r0_X0 [3]  ),
    .RADR_3_C (  muxed_Ra_r0_C0 [3]  ),
    .RADR_3_S (  muxed_Ra_r0_S [3]  ),
    .RADR_4_T (  muxed_Ra_r0_T [4]  ),
    .RADR_4_R (  muxed_Ra_r0_R0 [4]  ),
    .RADR_4_X (  muxed_Ra_r0_X0 [4]  ),
    .RADR_4_C (  muxed_Ra_r0_C0 [4]  ),
    .RADR_4_S (  muxed_Ra_r0_S [4]  ),
    .RADR_5_T (  muxed_Ra_r0_T [5]  ),
    .RADR_5_R (  muxed_Ra_r0_R0 [5]  ),
    .RADR_5_X (  muxed_Ra_r0_X0 [5]  ),
    .RADR_5_C (  muxed_Ra_r0_C0 [5]  ),
    .RADR_5_S (  muxed_Ra_r0_S [5]  ),
    .RADR_6_T (  muxed_Ra_r0_T [6]  ),
    .RADR_6_R (  muxed_Ra_r0_R0 [6]  ),
    .RADR_6_X (  muxed_Ra_r0_X0 [6]  ),
    .RADR_6_C (  muxed_Ra_r0_C0 [6]  ),
    .RADR_6_S (  muxed_Ra_r0_S [6]  ),
    .RE_T (  piece_re_T  ),
    .RE_R (  piece_re_R0  ),
    .RE_X (  piece_re_X0  ),
    .RE_C (  piece_re_C0  ),
    .RE_S (  piece_re_S  ),
    .RET_EN_T (  pwrbus_ram_pd_T [8]  ),
    .RET_EN_R (  pwrbus_ram_pd_R0 [8]  ),
    .RET_EN_X (  pwrbus_ram_pd_X0 [8]  ),
    .RET_EN_C (  pwrbus_ram_pd_C0 [8]  ),
    .RET_EN_S (  pwrbus_ram_pd_S [8]  ),
    .SLEEP_EN_0_T (  pwrbus_ram_pd_T [0]  ),
    .SLEEP_EN_0_R (  pwrbus_ram_pd_R0 [0]  ),
    .SLEEP_EN_0_X (  pwrbus_ram_pd_X0 [0]  ),
    .SLEEP_EN_0_C (  pwrbus_ram_pd_C0 [0]  ),
    .SLEEP_EN_0_S (  pwrbus_ram_pd_S [0]  ),
    .SLEEP_EN_1_T (  pwrbus_ram_pd_T [1]  ),
    .SLEEP_EN_1_R (  pwrbus_ram_pd_R0 [1]  ),
    .SLEEP_EN_1_X (  pwrbus_ram_pd_X0 [1]  ),
    .SLEEP_EN_1_C (  pwrbus_ram_pd_C0 [1]  ),
    .SLEEP_EN_1_S (  pwrbus_ram_pd_S [1]  ),
    .SLEEP_EN_2_T (  pwrbus_ram_pd_T [2]  ),
    .SLEEP_EN_2_R (  pwrbus_ram_pd_R0 [2]  ),
    .SLEEP_EN_2_X (  pwrbus_ram_pd_X0 [2]  ),
    .SLEEP_EN_2_C (  pwrbus_ram_pd_C0 [2]  ),
    .SLEEP_EN_2_S (  pwrbus_ram_pd_S [2]  ),
    .SLEEP_EN_3_T (  pwrbus_ram_pd_T [3]  ),
    .SLEEP_EN_3_R (  pwrbus_ram_pd_R0 [3]  ),
    .SLEEP_EN_3_X (  pwrbus_ram_pd_X0 [3]  ),
    .SLEEP_EN_3_C (  pwrbus_ram_pd_C0 [3]  ),
    .SLEEP_EN_3_S (  pwrbus_ram_pd_S [3]  ),
    .SLEEP_EN_4_T (  pwrbus_ram_pd_T [4]  ),
    .SLEEP_EN_4_R (  pwrbus_ram_pd_R0 [4]  ),
    .SLEEP_EN_4_X (  pwrbus_ram_pd_X0 [4]  ),
    .SLEEP_EN_4_C (  pwrbus_ram_pd_C0 [4]  ),
    .SLEEP_EN_4_S (  pwrbus_ram_pd_S [4]  ),
    .SLEEP_EN_5_T (  pwrbus_ram_pd_T [5]  ),
    .SLEEP_EN_5_R (  pwrbus_ram_pd_R0 [5]  ),
    .SLEEP_EN_5_X (  pwrbus_ram_pd_X0 [5]  ),
    .SLEEP_EN_5_C (  pwrbus_ram_pd_C0 [5]  ),
    .SLEEP_EN_5_S (  pwrbus_ram_pd_S [5]  ),
    .SLEEP_EN_6_T (  pwrbus_ram_pd_T [6]  ),
    .SLEEP_EN_6_R (  pwrbus_ram_pd_R0 [6]  ),
    .SLEEP_EN_6_X (  pwrbus_ram_pd_X0 [6]  ),
    .SLEEP_EN_6_C (  pwrbus_ram_pd_C0 [6]  ),
    .SLEEP_EN_6_S (  pwrbus_ram_pd_S [6]  ),
    .SLEEP_EN_7_T (  pwrbus_ram_pd_T [7]  ),
    .SLEEP_EN_7_R (  pwrbus_ram_pd_R0 [7]  ),
    .SLEEP_EN_7_X (  pwrbus_ram_pd_X0 [7]  ),
    .SLEEP_EN_7_C (  pwrbus_ram_pd_C0 [7]  ),
    .SLEEP_EN_7_S (  pwrbus_ram_pd_S [7]  ),
    .SVOP_0_T (  svop_T [0]  ),
    .SVOP_0_R (  svop_R0 [0]  ),
    .SVOP_0_X (  svop_X0 [0]  ),
    .SVOP_0_C (  svop_C0 [0]  ),
    .SVOP_0_S (  svop_S [0]  ),
    .SVOP_1_T (  svop_T [1]  ),
    .SVOP_1_R (  svop_R0 [1]  ),
    .SVOP_1_X (  svop_X0 [1]  ),
    .SVOP_1_C (  svop_C0 [1]  ),
    .SVOP_1_S (  svop_S [1]  ),
    .WADR_0_T (  muxed_Wa_w0_T [0]  ),
    .WADR_0_R (  muxed_Wa_w0_R0 [0]  ),
    .WADR_0_X (  muxed_Wa_w0_X0 [0]  ),
    .WADR_0_C (  muxed_Wa_w0_C0 [0]  ),
    .WADR_0_S (  muxed_Wa_w0_S [0]  ),
    .WADR_1_T (  muxed_Wa_w0_T [1]  ),
    .WADR_1_R (  muxed_Wa_w0_R0 [1]  ),
    .WADR_1_X (  muxed_Wa_w0_X0 [1]  ),
    .WADR_1_C (  muxed_Wa_w0_C0 [1]  ),
    .WADR_1_S (  muxed_Wa_w0_S [1]  ),
    .WADR_2_T (  muxed_Wa_w0_T [2]  ),
    .WADR_2_R (  muxed_Wa_w0_R0 [2]  ),
    .WADR_2_X (  muxed_Wa_w0_X0 [2]  ),
    .WADR_2_C (  muxed_Wa_w0_C0 [2]  ),
    .WADR_2_S (  muxed_Wa_w0_S [2]  ),
    .WADR_3_T (  muxed_Wa_w0_T [3]  ),
    .WADR_3_R (  muxed_Wa_w0_R0 [3]  ),
    .WADR_3_X (  muxed_Wa_w0_X0 [3]  ),
    .WADR_3_C (  muxed_Wa_w0_C0 [3]  ),
    .WADR_3_S (  muxed_Wa_w0_S [3]  ),
    .WADR_4_T (  muxed_Wa_w0_T [4]  ),
    .WADR_4_R (  muxed_Wa_w0_R0 [4]  ),
    .WADR_4_X (  muxed_Wa_w0_X0 [4]  ),
    .WADR_4_C (  muxed_Wa_w0_C0 [4]  ),
    .WADR_4_S (  muxed_Wa_w0_S [4]  ),
    .WADR_5_T (  muxed_Wa_w0_T [5]  ),
    .WADR_5_R (  muxed_Wa_w0_R0 [5]  ),
    .WADR_5_X (  muxed_Wa_w0_X0 [5]  ),
    .WADR_5_C (  muxed_Wa_w0_C0 [5]  ),
    .WADR_5_S (  muxed_Wa_w0_S [5]  ),
    .WADR_6_T (  muxed_Wa_w0_T [6]  ),
    .WADR_6_R (  muxed_Wa_w0_R0 [6]  ),
    .WADR_6_X (  muxed_Wa_w0_X0 [6]  ),
    .WADR_6_C (  muxed_Wa_w0_C0 [6]  ),
    .WADR_6_S (  muxed_Wa_w0_S [6]  ),
    .WD_0_T (  Wdata_T [0]  ),
    .WD_0_R (  Wdata_R1 [0]  ),
    .WD_0_X (  Wdata_X1 [0]  ),
    .WD_0_C (  Wdata_C1 [0]  ),
    .WD_0_S (  Wdata_S [0]  ),
    .WD_1_T (  Wdata_T [1]  ),
    .WD_1_R (  Wdata_R1 [1]  ),
    .WD_1_X (  Wdata_X1 [1]  ),
    .WD_1_C (  Wdata_C1 [1]  ),
    .WD_1_S (  Wdata_S [1]  ),
    .WD_10_T (  Wdata_T [10]  ),
    .WD_10_R (  Wdata_R1 [10]  ),
    .WD_10_X (  Wdata_X1 [10]  ),
    .WD_10_C (  Wdata_C1 [10]  ),
    .WD_10_S (  Wdata_S [10]  ),
    .WD_2_T (  Wdata_T [2]  ),
    .WD_2_R (  Wdata_R1 [2]  ),
    .WD_2_X (  Wdata_X1 [2]  ),
    .WD_2_C (  Wdata_C1 [2]  ),
    .WD_2_S (  Wdata_S [2]  ),
    .WD_3_T (  Wdata_T [3]  ),
    .WD_3_R (  Wdata_R1 [3]  ),
    .WD_3_X (  Wdata_X1 [3]  ),
    .WD_3_C (  Wdata_C1 [3]  ),
    .WD_3_S (  Wdata_S [3]  ),
    .WD_4_T (  Wdata_T [4]  ),
    .WD_4_R (  Wdata_R1 [4]  ),
    .WD_4_X (  Wdata_X1 [4]  ),
    .WD_4_C (  Wdata_C1 [4]  ),
    .WD_4_S (  Wdata_S [4]  ),
    .WD_5_T (  Wdata_T [5]  ),
    .WD_5_R (  Wdata_R1 [5]  ),
    .WD_5_X (  Wdata_X1 [5]  ),
    .WD_5_C (  Wdata_C1 [5]  ),
    .WD_5_S (  Wdata_S [5]  ),
    .WD_6_T (  Wdata_T [6]  ),
    .WD_6_R (  Wdata_R1 [6]  ),
    .WD_6_X (  Wdata_X1 [6]  ),
    .WD_6_C (  Wdata_C1 [6]  ),
    .WD_6_S (  Wdata_S [6]  ),
    .WD_7_T (  Wdata_T [7]  ),
    .WD_7_R (  Wdata_R1 [7]  ),
    .WD_7_X (  Wdata_X1 [7]  ),
    .WD_7_C (  Wdata_C1 [7]  ),
    .WD_7_S (  Wdata_S [7]  ),
    .WD_8_T (  Wdata_T [8]  ),
    .WD_8_R (  Wdata_R1 [8]  ),
    .WD_8_X (  Wdata_X1 [8]  ),
    .WD_8_C (  Wdata_C1 [8]  ),
    .WD_8_S (  Wdata_S [8]  ),
    .WD_9_T (  Wdata_T [9]  ),
    .WD_9_R (  Wdata_R1 [9]  ),
    .WD_9_X (  Wdata_X1 [9]  ),
    .WD_9_C (  Wdata_C1 [9]  ),
    .WD_9_S (  Wdata_S [9]  ),
    .WE_T (  _09__T  ),
    .WE_R (  _09__R0  ),
    .WE_X (  _09__X0  ),
    .WE_C (  _09__C0  ),
    .WE_S (  _09__S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .RD_0_T (  dout_0_0_T [0]  ),
    .RD_0_R0 (  dout_0_0_R [0]  ),
    .RD_0_X0 (  dout_0_0_X [0]  ),
    .RD_0_C0 (  dout_0_0_C [0]  ),
    .RD_0_S ( dout_0_0_S ),
    .RD_1_T (  dout_0_0_T [1]  ),
    .RD_1_R0 (  dout_0_0_R [1]  ),
    .RD_1_X0 (  dout_0_0_X [1]  ),
    .RD_1_C0 (  dout_0_0_C [1]  ),
    .RD_1_S ( dout_0_0_S ),
    .RD_10_T (  dout_0_0_T [10]  ),
    .RD_10_R0 (  dout_0_0_R [10]  ),
    .RD_10_X0 (  dout_0_0_X [10]  ),
    .RD_10_C0 (  dout_0_0_C [10]  ),
    .RD_10_S ( dout_0_0_S ),
    .RD_2_T (  dout_0_0_T [2]  ),
    .RD_2_R0 (  dout_0_0_R [2]  ),
    .RD_2_X0 (  dout_0_0_X [2]  ),
    .RD_2_C0 (  dout_0_0_C [2]  ),
    .RD_2_S ( dout_0_0_S ),
    .RD_3_T (  dout_0_0_T [3]  ),
    .RD_3_R0 (  dout_0_0_R [3]  ),
    .RD_3_X0 (  dout_0_0_X [3]  ),
    .RD_3_C0 (  dout_0_0_C [3]  ),
    .RD_3_S ( dout_0_0_S ),
    .RD_4_T (  dout_0_0_T [4]  ),
    .RD_4_R0 (  dout_0_0_R [4]  ),
    .RD_4_X0 (  dout_0_0_X [4]  ),
    .RD_4_C0 (  dout_0_0_C [4]  ),
    .RD_4_S ( dout_0_0_S ),
    .RD_5_T (  dout_0_0_T [5]  ),
    .RD_5_R0 (  dout_0_0_R [5]  ),
    .RD_5_X0 (  dout_0_0_X [5]  ),
    .RD_5_C0 (  dout_0_0_C [5]  ),
    .RD_5_S ( dout_0_0_S ),
    .RD_6_T (  dout_0_0_T [6]  ),
    .RD_6_R0 (  dout_0_0_R [6]  ),
    .RD_6_X0 (  dout_0_0_X [6]  ),
    .RD_6_C0 (  dout_0_0_C [6]  ),
    .RD_6_S ( dout_0_0_S ),
    .RD_7_T (  dout_0_0_T [7]  ),
    .RD_7_R0 (  dout_0_0_R [7]  ),
    .RD_7_X0 (  dout_0_0_X [7]  ),
    .RD_7_C0 (  dout_0_0_C [7]  ),
    .RD_7_S ( dout_0_0_S ),
    .RD_8_T (  dout_0_0_T [8]  ),
    .RD_8_R0 (  dout_0_0_R [8]  ),
    .RD_8_X0 (  dout_0_0_X [8]  ),
    .RD_8_C0 (  dout_0_0_C [8]  ),
    .RD_8_S ( dout_0_0_S ),
    .RD_9_T (  dout_0_0_T [9]  ),
    .RD_9_R0 (  dout_0_0_R [9]  ),
    .RD_9_X0 (  dout_0_0_X [9]  ),
    .RD_9_C0 (  dout_0_0_C [9]  ),
    .RD_9_S ( dout_0_0_S ),
    .WE ( _09_ ),
    .WD_9 ( Wdata[9] ),
    .WD_8 ( Wdata[8] ),
    .WD_6 ( Wdata[6] ),
    .RD_8 ( dout_0_0[8] ),
    .RD_7 ( dout_0_0[7] ),
    .WADR_5 ( muxed_Wa_w0[5] ),
    .RD_6 ( dout_0_0[6] ),
    .WADR_3 ( muxed_Wa_w0[3] ),
    .RD_5 ( dout_0_0[5] ),
    .SVOP_1 ( svop[1] ),
    .RD_10 ( dout_0_0[10] ),
    .RD_1 ( dout_0_0[1] ),
    .WD_10 ( Wdata[10] ),
    .CLK_R ( gated_clk_core ),
    .RADR_1 ( muxed_Ra_r0[1] ),
    .WD_7 ( Wdata[7] ),
    .IDDQ ( iddq_mode ),
    .RADR_0 ( muxed_Ra_r0[0] ),
    .CLK_W ( gated_clk_core ),
    .RE ( piece_re ),
    .RADR_2 ( muxed_Ra_r0[2] ),
    .SLEEP_EN_7 ( pwrbus_ram_pd[7] ),
    .SVOP_0 ( svop[0] ),
    .RADR_3 ( muxed_Ra_r0[3] ),
    .RADR_5 ( muxed_Ra_r0[5] ),
    .WADR_6 ( muxed_Wa_w0[6] ),
    .WD_3 ( Wdata[3] ),
    .RD_2 ( dout_0_0[2] ),
    .SLEEP_EN_1 ( pwrbus_ram_pd[1] ),
    .RADR_6 ( muxed_Ra_r0[6] ),
    .RD_0 ( dout_0_0[0] ),
    .RET_EN ( pwrbus_ram_pd[8] ),
    .SLEEP_EN_0 ( pwrbus_ram_pd[0] ),
    .SLEEP_EN_2 ( pwrbus_ram_pd[2] ),
    .SLEEP_EN_3 ( pwrbus_ram_pd[3] ),
    .RD_9 ( dout_0_0[9] ),
    .RD_4 ( dout_0_0[4] ),
    .SLEEP_EN_4 ( pwrbus_ram_pd[4] ),
    .RADR_4 ( muxed_Ra_r0[4] ),
    .SLEEP_EN_5 ( pwrbus_ram_pd[5] ),
    .SLEEP_EN_6 ( pwrbus_ram_pd[6] ),
    .WD_0 ( Wdata[0] ),
    .WD_1 ( Wdata[1] ),
    .WADR_0 ( muxed_Wa_w0[0] ),
    .WD_4 ( Wdata[4] ),
    .WADR_1 ( muxed_Wa_w0[1] ),
    .RD_3 ( dout_0_0[3] ),
    .WD_5 ( Wdata[5] ),
    .WADR_2 ( muxed_Wa_w0[2] ),
    .WADR_4 ( muxed_Wa_w0[4] ),
    .WD_2 ( Wdata[2] )
  );
  logic [10:0] r0_OutputMuxDataOut_R0 ;
  logic [10:0] r0_OutputMuxDataOut_X0 ;
  logic [10:0] r0_OutputMuxDataOut_C0 ;
  logic [0:0] gated_clk_jtag_Data_reg_r0_R0 ;
  logic [0:0] gated_clk_jtag_Data_reg_r0_X0 ;
  logic [0:0] gated_clk_jtag_Data_reg_r0_C0 ;
  logic [0:0] re_reg_SO_r0_R0 ;
  logic [0:0] re_reg_SO_r0_X0 ;
  logic [0:0] re_reg_SO_r0_C0 ;
  logic [0:0] debug_mode_R1 ;
  logic [0:0] debug_mode_X1 ;
  logic [0:0] debug_mode_C1 ;
  logic [0:0] shiftDR_R2 ;
  logic [0:0] shiftDR_X2 ;
  logic [0:0] shiftDR_C2 ;
// module: \$paramod\ScanShareSel_JTAG_reg_ext_cg\JTAG_REG_WIDTH=11\HAS_RESET=0\RESET_VALUE=0
  \$paramod\ScanShareSel_JTAG_reg_ext_cg\JTAG_REG_WIDTH=11\HAS_RESET=0\RESET_VALUE=0 testInst_Data_reg_r0 (
    .D_T (  r0_OutputMuxDataOut_T  ),
    .D_R (  r0_OutputMuxDataOut_R0  ),
    .D_X (  r0_OutputMuxDataOut_X0  ),
    .D_C (  r0_OutputMuxDataOut_C0  ),
    .D_S (  r0_OutputMuxDataOut_S  ),
    .clk_T (  gated_clk_jtag_Data_reg_r0_T  ),
    .clk_R (  gated_clk_jtag_Data_reg_r0_R0  ),
    .clk_X (  gated_clk_jtag_Data_reg_r0_X0  ),
    .clk_C (  gated_clk_jtag_Data_reg_r0_C0  ),
    .clk_S (  gated_clk_jtag_Data_reg_r0_S  ),
    .reset__T (  1'h0  ),
    .reset__R (  nouse_zy0  ),
    .reset__X (  nouse_zy1  ),
    .reset__C (  nouse_zy2  ),
    .reset__S ( 1'h0 ),
    .scanin_T (  re_reg_SO_r0_T  ),
    .scanin_R (  re_reg_SO_r0_R0  ),
    .scanin_X (  re_reg_SO_r0_X0  ),
    .scanin_C (  re_reg_SO_r0_C0  ),
    .scanin_S (  re_reg_SO_r0_S  ),
    .sel_T (  debug_mode_T  ),
    .sel_R (  debug_mode_R1  ),
    .sel_X (  debug_mode_X1  ),
    .sel_C (  debug_mode_C1  ),
    .sel_S (  debug_mode_S  ),
    .shiftDR_T (  shiftDR_T  ),
    .shiftDR_R (  shiftDR_R2  ),
    .shiftDR_X (  shiftDR_X2  ),
    .shiftDR_C (  shiftDR_C2  ),
    .shiftDR_S (  shiftDR_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .Q_T (  data_regq_T  ),
    .Q_R0 (  data_regq_R  ),
    .Q_X0 (  data_regq_X  ),
    .Q_C0 (  data_regq_C  ),
    .Q_S ( data_regq_S ),
    .scanout_T (  Data_reg_SO_r0_T  ),
    .scanout_R0 (  Data_reg_SO_r0_R  ),
    .scanout_X0 (  Data_reg_SO_r0_X  ),
    .scanout_C0 (  Data_reg_SO_r0_C  ),
    .scanout_S ( Data_reg_SO_r0_S ),
    .scanout ( Data_reg_SO_r0 ),
    .Q ( data_regq ),
    .shiftDR ( shiftDR ),
    .sel ( debug_mode ),
    .D ( r0_OutputMuxDataOut ),
    .clk ( gated_clk_jtag_Data_reg_r0 ),
    .reset_ ( 1'b1 ),
    .scanin ( re_reg_SO_r0 )
  );
  logic [1-1:0] nouse_zy0 ;
  logic [1-1:0] nouse_zy1 ;
  logic [1-1:0] nouse_zy2 ;
  logic [6:0] muxed_Ra_r0_R1 ;
  logic [6:0] muxed_Ra_r0_X1 ;
  logic [6:0] muxed_Ra_r0_C1 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_R0 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_X0 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_C0 ;
  logic [0:0] we_reg_SO_w0_R0 ;
  logic [0:0] we_reg_SO_w0_X0 ;
  logic [0:0] we_reg_SO_w0_C0 ;
  logic [0:0] debug_mode_R2 ;
  logic [0:0] debug_mode_X2 ;
  logic [0:0] debug_mode_C2 ;
  logic [0:0] shiftDR_R3 ;
  logic [0:0] shiftDR_X3 ;
  logic [0:0] shiftDR_C3 ;
// module: \$paramod\ScanShareSel_JTAG_reg_ext_cg\JTAG_REG_WIDTH=7\HAS_RESET=0\RESET_VALUE=0
  \$paramod\ScanShareSel_JTAG_reg_ext_cg\JTAG_REG_WIDTH=7\HAS_RESET=0\RESET_VALUE=0 testInst_Ra_reg_r0 (
    .D_T (  muxed_Ra_r0_T  ),
    .D_R (  muxed_Ra_r0_R1  ),
    .D_X (  muxed_Ra_r0_X1  ),
    .D_C (  muxed_Ra_r0_C1  ),
    .D_S (  muxed_Ra_r0_S  ),
    .clk_T (  gated_clk_jtag_Wa_reg_w0_T  ),
    .clk_R (  gated_clk_jtag_Wa_reg_w0_R0  ),
    .clk_X (  gated_clk_jtag_Wa_reg_w0_X0  ),
    .clk_C (  gated_clk_jtag_Wa_reg_w0_C0  ),
    .clk_S (  gated_clk_jtag_Wa_reg_w0_S  ),
    .reset__T (  1'h0  ),
    .reset__R (  nouse_zy3  ),
    .reset__X (  nouse_zy4  ),
    .reset__C (  nouse_zy5  ),
    .reset__S ( 1'h0 ),
    .scanin_T (  we_reg_SO_w0_T  ),
    .scanin_R (  we_reg_SO_w0_R0  ),
    .scanin_X (  we_reg_SO_w0_X0  ),
    .scanin_C (  we_reg_SO_w0_C0  ),
    .scanin_S (  we_reg_SO_w0_S  ),
    .sel_T (  debug_mode_T  ),
    .sel_R (  debug_mode_R2  ),
    .sel_X (  debug_mode_X2  ),
    .sel_C (  debug_mode_C2  ),
    .sel_S (  debug_mode_S  ),
    .shiftDR_T (  shiftDR_T  ),
    .shiftDR_R (  shiftDR_R3  ),
    .shiftDR_X (  shiftDR_X3  ),
    .shiftDR_C (  shiftDR_C3  ),
    .shiftDR_S (  shiftDR_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .Q_T (  Ra_reg_r0_A_T  ),
    .Q_R0 (  Ra_reg_r0_A_R  ),
    .Q_X0 (  Ra_reg_r0_A_X  ),
    .Q_C0 (  Ra_reg_r0_A_C  ),
    .Q_S ( Ra_reg_r0_A_S ),
    .scanout_T (  Ra_reg_SO_r0_T  ),
    .scanout_R0 (  Ra_reg_SO_r0_R  ),
    .scanout_X0 (  Ra_reg_SO_r0_X  ),
    .scanout_C0 (  Ra_reg_SO_r0_C  ),
    .scanout_S ( Ra_reg_SO_r0_S ),
    .scanout ( Ra_reg_SO_r0 ),
    .Q ( Ra_reg_r0_A ),
    .shiftDR ( shiftDR ),
    .sel ( debug_mode ),
    .D ( muxed_Ra_r0 ),
    .clk ( gated_clk_jtag_Wa_reg_w0 ),
    .reset_ ( 1'b1 ),
    .scanin ( we_reg_SO_w0 )
  );
  logic [1-1:0] nouse_zy3 ;
  logic [1-1:0] nouse_zy4 ;
  logic [1-1:0] nouse_zy5 ;
  logic [6:0] muxed_Wa_w0_R1 ;
  logic [6:0] muxed_Wa_w0_X1 ;
  logic [6:0] muxed_Wa_w0_C1 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_R1 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_X1 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_C1 ;
  logic [0:0] SI_R0 ;
  logic [0:0] SI_X0 ;
  logic [0:0] SI_C0 ;
  logic [0:0] debug_mode_R3 ;
  logic [0:0] debug_mode_X3 ;
  logic [0:0] debug_mode_C3 ;
  logic [0:0] shiftDR_R4 ;
  logic [0:0] shiftDR_X4 ;
  logic [0:0] shiftDR_C4 ;
// module: \$paramod\ScanShareSel_JTAG_reg_ext_cg\JTAG_REG_WIDTH=7\HAS_RESET=0\RESET_VALUE=0
  \$paramod\ScanShareSel_JTAG_reg_ext_cg\JTAG_REG_WIDTH=7\HAS_RESET=0\RESET_VALUE=0 testInst_Wa_reg_w0 (
    .D_T (  muxed_Wa_w0_T  ),
    .D_R (  muxed_Wa_w0_R1  ),
    .D_X (  muxed_Wa_w0_X1  ),
    .D_C (  muxed_Wa_w0_C1  ),
    .D_S (  muxed_Wa_w0_S  ),
    .clk_T (  gated_clk_jtag_Wa_reg_w0_T  ),
    .clk_R (  gated_clk_jtag_Wa_reg_w0_R1  ),
    .clk_X (  gated_clk_jtag_Wa_reg_w0_X1  ),
    .clk_C (  gated_clk_jtag_Wa_reg_w0_C1  ),
    .clk_S (  gated_clk_jtag_Wa_reg_w0_S  ),
    .reset__T (  1'h0  ),
    .reset__R (  nouse_zy6  ),
    .reset__X (  nouse_zy7  ),
    .reset__C (  nouse_zy8  ),
    .reset__S ( 1'h0 ),
    .scanin_T (  SI_T  ),
    .scanin_R (  SI_R0  ),
    .scanin_X (  SI_X0  ),
    .scanin_C (  SI_C0  ),
    .scanin_S (  SI_S  ),
    .sel_T (  debug_mode_T  ),
    .sel_R (  debug_mode_R3  ),
    .sel_X (  debug_mode_X3  ),
    .sel_C (  debug_mode_C3  ),
    .sel_S (  debug_mode_S  ),
    .shiftDR_T (  shiftDR_T  ),
    .shiftDR_R (  shiftDR_R4  ),
    .shiftDR_X (  shiftDR_X4  ),
    .shiftDR_C (  shiftDR_C4  ),
    .shiftDR_S (  shiftDR_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .Q_T (  Wa_reg_w0_A_T  ),
    .Q_R0 (  Wa_reg_w0_A_R  ),
    .Q_X0 (  Wa_reg_w0_A_X  ),
    .Q_C0 (  Wa_reg_w0_A_C  ),
    .Q_S ( Wa_reg_w0_A_S ),
    .scanout_T (  Wa_reg_SO_w0_T  ),
    .scanout_R0 (  Wa_reg_SO_w0_R  ),
    .scanout_X0 (  Wa_reg_SO_w0_X  ),
    .scanout_C0 (  Wa_reg_SO_w0_C  ),
    .scanout_S ( Wa_reg_SO_w0_S ),
    .scanout ( Wa_reg_SO_w0 ),
    .Q ( Wa_reg_w0_A ),
    .shiftDR ( shiftDR ),
    .sel ( debug_mode ),
    .D ( muxed_Wa_w0 ),
    .clk ( gated_clk_jtag_Wa_reg_w0 ),
    .reset_ ( 1'b1 ),
    .scanin ( SI )
  );
  logic [1-1:0] nouse_zy6 ;
  logic [1-1:0] nouse_zy7 ;
  logic [1-1:0] nouse_zy8 ;
  logic [0:0] Data_reg_SO_r0_R0 ;
  logic [0:0] Data_reg_SO_r0_X0 ;
  logic [0:0] Data_reg_SO_r0_C0 ;
  logic [0:0] la_bist_clkr0_R0 ;
  logic [0:0] la_bist_clkr0_X0 ;
  logic [0:0] la_bist_clkr0_C0 ;
// module: LNQD1PO4
  LNQD1PO4 testInst_ram_access_lockup (
    .D_T (  Data_reg_SO_r0_T  ),
    .D_R (  Data_reg_SO_r0_R0  ),
    .D_X (  Data_reg_SO_r0_X0  ),
    .D_C (  Data_reg_SO_r0_C0  ),
    .D_S (  Data_reg_SO_r0_S  ),
    .EN_T (  la_bist_clkr0_T  ),
    .EN_R (  la_bist_clkr0_R0  ),
    .EN_X (  la_bist_clkr0_X0  ),
    .EN_C (  la_bist_clkr0_C0  ),
    .EN_S (  la_bist_clkr0_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  SO_int_net_T  ),
    .Q_R0 (  SO_int_net_R  ),
    .Q_X0 (  SO_int_net_X  ),
    .Q_C0 (  SO_int_net_C  ),
    .Q_S ( SO_int_net_S ),
    .Q ( SO_int_net ),
    .D ( Data_reg_SO_r0 ),
    .EN ( la_bist_clkr0 )
  );
  logic [0:0] muxed_re_r0_R1 ;
  logic [0:0] muxed_re_r0_X1 ;
  logic [0:0] muxed_re_r0_C1 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_R2 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_X2 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_C2 ;
  logic [0:0] Ra_reg_SO_r0_R0 ;
  logic [0:0] Ra_reg_SO_r0_X0 ;
  logic [0:0] Ra_reg_SO_r0_C0 ;
  logic [0:0] debug_mode_R4 ;
  logic [0:0] debug_mode_X4 ;
  logic [0:0] debug_mode_C4 ;
  logic [0:0] shiftDR_R5 ;
  logic [0:0] shiftDR_X5 ;
  logic [0:0] shiftDR_C5 ;
// module: \$paramod\ScanShareSel_JTAG_reg_ext_cg\JTAG_REG_WIDTH=1\HAS_RESET=0\RESET_VALUE=0
  \$paramod\ScanShareSel_JTAG_reg_ext_cg\JTAG_REG_WIDTH=1\HAS_RESET=0\RESET_VALUE=0 testInst_re_reg_r0 (
    .D_T (  muxed_re_r0_T  ),
    .D_R (  muxed_re_r0_R1  ),
    .D_X (  muxed_re_r0_X1  ),
    .D_C (  muxed_re_r0_C1  ),
    .D_S (  muxed_re_r0_S  ),
    .clk_T (  gated_clk_jtag_Wa_reg_w0_T  ),
    .clk_R (  gated_clk_jtag_Wa_reg_w0_R2  ),
    .clk_X (  gated_clk_jtag_Wa_reg_w0_X2  ),
    .clk_C (  gated_clk_jtag_Wa_reg_w0_C2  ),
    .clk_S (  gated_clk_jtag_Wa_reg_w0_S  ),
    .reset__T (  1'h0  ),
    .reset__R (  nouse_zy9  ),
    .reset__X (  nouse_zy10  ),
    .reset__C (  nouse_zy11  ),
    .reset__S ( 1'h0 ),
    .scanin_T (  Ra_reg_SO_r0_T  ),
    .scanin_R (  Ra_reg_SO_r0_R0  ),
    .scanin_X (  Ra_reg_SO_r0_X0  ),
    .scanin_C (  Ra_reg_SO_r0_C0  ),
    .scanin_S (  Ra_reg_SO_r0_S  ),
    .sel_T (  debug_mode_T  ),
    .sel_R (  debug_mode_R4  ),
    .sel_X (  debug_mode_X4  ),
    .sel_C (  debug_mode_C4  ),
    .sel_S (  debug_mode_S  ),
    .shiftDR_T (  shiftDR_T  ),
    .shiftDR_R (  shiftDR_R5  ),
    .shiftDR_X (  shiftDR_X5  ),
    .shiftDR_C (  shiftDR_C5  ),
    .shiftDR_S (  shiftDR_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .Q_T (  re_q_T  ),
    .Q_R0 (  re_q_R  ),
    .Q_X0 (  re_q_X  ),
    .Q_C0 (  re_q_C  ),
    .Q_S ( re_q_S ),
    .scanout_T (  re_reg_SO_r0_T  ),
    .scanout_R0 (  re_reg_SO_r0_R  ),
    .scanout_X0 (  re_reg_SO_r0_X  ),
    .scanout_C0 (  re_reg_SO_r0_C  ),
    .scanout_S ( re_reg_SO_r0_S ),
    .scanout ( re_reg_SO_r0 ),
    .Q ( re_q ),
    .shiftDR ( shiftDR ),
    .sel ( debug_mode ),
    .D ( muxed_re_r0 ),
    .clk ( gated_clk_jtag_Wa_reg_w0 ),
    .reset_ ( 1'b1 ),
    .scanin ( Ra_reg_SO_r0 )
  );
  logic [1-1:0] nouse_zy9 ;
  logic [1-1:0] nouse_zy10 ;
  logic [1-1:0] nouse_zy11 ;
  logic [0:0] muxed_we_w0_R1 ;
  logic [0:0] muxed_we_w0_X1 ;
  logic [0:0] muxed_we_w0_C1 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_R3 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_X3 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_C3 ;
  logic [0:0] Wa_reg_SO_w0_R0 ;
  logic [0:0] Wa_reg_SO_w0_X0 ;
  logic [0:0] Wa_reg_SO_w0_C0 ;
  logic [0:0] debug_mode_R5 ;
  logic [0:0] debug_mode_X5 ;
  logic [0:0] debug_mode_C5 ;
  logic [0:0] shiftDR_R6 ;
  logic [0:0] shiftDR_X6 ;
  logic [0:0] shiftDR_C6 ;
// module: \$paramod\ScanShareSel_JTAG_reg_ext_cg\JTAG_REG_WIDTH=1\HAS_RESET=0\RESET_VALUE=0
  \$paramod\ScanShareSel_JTAG_reg_ext_cg\JTAG_REG_WIDTH=1\HAS_RESET=0\RESET_VALUE=0 testInst_we_reg_w0 (
    .D_T (  muxed_we_w0_T  ),
    .D_R (  muxed_we_w0_R1  ),
    .D_X (  muxed_we_w0_X1  ),
    .D_C (  muxed_we_w0_C1  ),
    .D_S (  muxed_we_w0_S  ),
    .clk_T (  gated_clk_jtag_Wa_reg_w0_T  ),
    .clk_R (  gated_clk_jtag_Wa_reg_w0_R3  ),
    .clk_X (  gated_clk_jtag_Wa_reg_w0_X3  ),
    .clk_C (  gated_clk_jtag_Wa_reg_w0_C3  ),
    .clk_S (  gated_clk_jtag_Wa_reg_w0_S  ),
    .reset__T (  1'h0  ),
    .reset__R (  nouse_zy12  ),
    .reset__X (  nouse_zy13  ),
    .reset__C (  nouse_zy14  ),
    .reset__S ( 1'h0 ),
    .scanin_T (  Wa_reg_SO_w0_T  ),
    .scanin_R (  Wa_reg_SO_w0_R0  ),
    .scanin_X (  Wa_reg_SO_w0_X0  ),
    .scanin_C (  Wa_reg_SO_w0_C0  ),
    .scanin_S (  Wa_reg_SO_w0_S  ),
    .sel_T (  debug_mode_T  ),
    .sel_R (  debug_mode_R5  ),
    .sel_X (  debug_mode_X5  ),
    .sel_C (  debug_mode_C5  ),
    .sel_S (  debug_mode_S  ),
    .shiftDR_T (  shiftDR_T  ),
    .shiftDR_R (  shiftDR_R6  ),
    .shiftDR_X (  shiftDR_X6  ),
    .shiftDR_C (  shiftDR_C6  ),
    .shiftDR_S (  shiftDR_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .Q_T (  we_q_T  ),
    .Q_R0 (  we_q_R  ),
    .Q_X0 (  we_q_X  ),
    .Q_C0 (  we_q_C  ),
    .Q_S ( we_q_S ),
    .scanout_T (  we_reg_SO_w0_T  ),
    .scanout_R0 (  we_reg_SO_w0_R  ),
    .scanout_X0 (  we_reg_SO_w0_X  ),
    .scanout_C0 (  we_reg_SO_w0_C  ),
    .scanout_S ( we_reg_SO_w0_S ),
    .scanout ( we_reg_SO_w0 ),
    .Q ( we_q ),
    .shiftDR ( shiftDR ),
    .sel ( debug_mode ),
    .D ( muxed_we_w0 ),
    .clk ( gated_clk_jtag_Wa_reg_w0 ),
    .reset_ ( 1'b1 ),
    .scanin ( Wa_reg_SO_w0 )
  );
  logic [1-1:0] nouse_zy12 ;
  logic [1-1:0] nouse_zy13 ;
  logic [1-1:0] nouse_zy14 ;
  logic [0:0] la_bist_clkr0_R1 ;
  logic [0:0] la_bist_clkr0_X1 ;
  logic [0:0] la_bist_clkr0_C1 ;
  logic [0:0] mbist_ramaccess_rst__R3 ;
  logic [0:0] mbist_ramaccess_rst__X3 ;
  logic [0:0] mbist_ramaccess_rst__C3 ;
  logic [0:0] updateDR_R0 ;
  logic [0:0] updateDR_X0 ;
  logic [0:0] updateDR_C0 ;
// module: sync2d_c_pp
  sync2d_c_pp updateDR_synchronizer (
    .clk_T (  la_bist_clkr0_T  ),
    .clk_R (  la_bist_clkr0_R1  ),
    .clk_X (  la_bist_clkr0_X1  ),
    .clk_C (  la_bist_clkr0_C1  ),
    .clk_S (  la_bist_clkr0_S  ),
    .clr__T (  mbist_ramaccess_rst__T  ),
    .clr__R (  mbist_ramaccess_rst__R3  ),
    .clr__X (  mbist_ramaccess_rst__X3  ),
    .clr__C (  mbist_ramaccess_rst__C3  ),
    .clr__S (  mbist_ramaccess_rst__S  ),
    .d_T (  updateDR_T  ),
    .d_R (  updateDR_R0  ),
    .d_X (  updateDR_X0  ),
    .d_C (  updateDR_C0  ),
    .d_S (  updateDR_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .q_T (  updateDR_sync_T  ),
    .q_R0 (  updateDR_sync_R  ),
    .q_X0 (  updateDR_sync_X  ),
    .q_C0 (  updateDR_sync_C  ),
    .q_S ( updateDR_sync_S ),
    .q ( updateDR_sync ),
    .d ( updateDR ),
    .clk ( la_bist_clkr0 ),
    .clr_ ( mbist_ramaccess_rst_ )
  );
  assign D_Ra_reg_r0 = muxed_Ra_r0;
  logic [6:0] muxed_Ra_r0_C2 ;
  logic [6:0] muxed_Ra_r0_R2 ;
  logic [6:0] muxed_Ra_r0_X2 ;
  assign D_Ra_reg_r0_T = muxed_Ra_r0_T ;
  assign muxed_Ra_r0_C2 = D_Ra_reg_r0_C ;
  assign muxed_Ra_r0_R2 = D_Ra_reg_r0_R ;
  assign muxed_Ra_r0_X2 = D_Ra_reg_r0_X ;
  assign D_Ra_reg_r0_S = muxed_Ra_r0_S ;
  assign Data_reg_r0 = data_regq;
  logic [10:0] data_regq_C1 ;
  logic [10:0] data_regq_R1 ;
  logic [10:0] data_regq_X1 ;
  assign Data_reg_r0_T = data_regq_T ;
  assign data_regq_C1 = Data_reg_r0_C ;
  assign data_regq_R1 = Data_reg_r0_R ;
  assign data_regq_X1 = Data_reg_r0_X ;
  assign Data_reg_r0_S = data_regq_S ;
  assign Ra_reg_r0 = muxed_Ra_r0_B;
  logic [6:0] muxed_Ra_r0_B_C1 ;
  logic [6:0] muxed_Ra_r0_B_R1 ;
  logic [6:0] muxed_Ra_r0_B_X1 ;
  assign Ra_reg_r0_T = muxed_Ra_r0_B_T ;
  assign muxed_Ra_r0_B_C1 = Ra_reg_r0_C ;
  assign muxed_Ra_r0_B_R1 = Ra_reg_r0_R ;
  assign muxed_Ra_r0_B_X1 = Ra_reg_r0_X ;
  assign Ra_reg_r0_S = muxed_Ra_r0_B_S ;
  assign Ra_reg_r0_B = mbist_Ra_r0;
  logic [6:0] mbist_Ra_r0_C1 ;
  logic [6:0] mbist_Ra_r0_R1 ;
  logic [6:0] mbist_Ra_r0_X1 ;
  assign Ra_reg_r0_B_T = mbist_Ra_r0_T ;
  assign mbist_Ra_r0_C1 = Ra_reg_r0_B_C ;
  assign mbist_Ra_r0_R1 = Ra_reg_r0_B_R ;
  assign mbist_Ra_r0_X1 = Ra_reg_r0_B_X ;
  assign Ra_reg_r0_B_S = mbist_Ra_r0_S ;
  assign Ra_reg_r0_S = pre_muxed_Di_w0_S;
  logic [0:0] pre_muxed_Di_w0_S_C1 ;
  logic [0:0] pre_muxed_Di_w0_S_R1 ;
  logic [0:0] pre_muxed_Di_w0_S_X1 ;
  assign Ra_reg_r0_S_T = pre_muxed_Di_w0_S_T ;
  assign pre_muxed_Di_w0_S_C1 = Ra_reg_r0_S_C ;
  assign pre_muxed_Di_w0_S_R1 = Ra_reg_r0_S_R ;
  assign pre_muxed_Di_w0_S_X1 = Ra_reg_r0_S_X ;
  assign Ra_reg_r0_S_S = pre_muxed_Di_w0_S_S ;
  assign Wa_reg_w0 = muxed_Wa_w0_B;
  logic [6:0] muxed_Wa_w0_B_C1 ;
  logic [6:0] muxed_Wa_w0_B_R1 ;
  logic [6:0] muxed_Wa_w0_B_X1 ;
  assign Wa_reg_w0_T = muxed_Wa_w0_B_T ;
  assign muxed_Wa_w0_B_C1 = Wa_reg_w0_C ;
  assign muxed_Wa_w0_B_R1 = Wa_reg_w0_R ;
  assign muxed_Wa_w0_B_X1 = Wa_reg_w0_X ;
  assign Wa_reg_w0_S = muxed_Wa_w0_B_S ;
  assign Wa_reg_w0_B = mbist_Wa_w0;
  logic [6:0] mbist_Wa_w0_C1 ;
  logic [6:0] mbist_Wa_w0_R1 ;
  logic [6:0] mbist_Wa_w0_X1 ;
  assign Wa_reg_w0_B_T = mbist_Wa_w0_T ;
  assign mbist_Wa_w0_C1 = Wa_reg_w0_B_C ;
  assign mbist_Wa_w0_R1 = Wa_reg_w0_B_R ;
  assign mbist_Wa_w0_X1 = Wa_reg_w0_B_X ;
  assign Wa_reg_w0_B_S = mbist_Wa_w0_S ;
  assign Wa_reg_w0_S = pre_muxed_Di_w0_S;
  logic [0:0] pre_muxed_Di_w0_S_C2 ;
  logic [0:0] pre_muxed_Di_w0_S_R2 ;
  logic [0:0] pre_muxed_Di_w0_S_X2 ;
  assign Wa_reg_w0_S_T = pre_muxed_Di_w0_S_T ;
  assign pre_muxed_Di_w0_S_C2 = Wa_reg_w0_S_C ;
  assign pre_muxed_Di_w0_S_R2 = Wa_reg_w0_S_R ;
  assign pre_muxed_Di_w0_S_X2 = Wa_reg_w0_S_X ;
  assign Wa_reg_w0_S_S = pre_muxed_Di_w0_S_S ;
  assign access_en_w = posedge_updateDR_sync;
  logic [0:0] posedge_updateDR_sync_C2 ;
  logic [0:0] posedge_updateDR_sync_R2 ;
  logic [0:0] posedge_updateDR_sync_X2 ;
  assign access_en_w_T = posedge_updateDR_sync_T ;
  assign posedge_updateDR_sync_C2 = access_en_w_C ;
  assign posedge_updateDR_sync_R2 = access_en_w_R ;
  assign posedge_updateDR_sync_X2 = access_en_w_X ;
  assign access_en_w_S = posedge_updateDR_sync_S ;
  assign dft_capdr_r = ary_atpg_ctl;
  logic [0:0] ary_atpg_ctl_C2 ;
  logic [0:0] ary_atpg_ctl_R2 ;
  logic [0:0] ary_atpg_ctl_X2 ;
  assign dft_capdr_r_T = ary_atpg_ctl_T ;
  assign ary_atpg_ctl_C2 = dft_capdr_r_C ;
  assign ary_atpg_ctl_R2 = dft_capdr_r_R ;
  assign ary_atpg_ctl_X2 = dft_capdr_r_X ;
  assign dft_capdr_r_S = ary_atpg_ctl_S ;
  assign dft_capdr_w = ary_atpg_ctl;
  logic [0:0] ary_atpg_ctl_C3 ;
  logic [0:0] ary_atpg_ctl_R3 ;
  logic [0:0] ary_atpg_ctl_X3 ;
  assign dft_capdr_w_T = ary_atpg_ctl_T ;
  assign ary_atpg_ctl_C3 = dft_capdr_w_C ;
  assign ary_atpg_ctl_R3 = dft_capdr_w_R ;
  assign ary_atpg_ctl_X3 = dft_capdr_w_X ;
  assign dft_capdr_w_S = ary_atpg_ctl_S ;
  assign dout = data_regq;
  logic [10:0] data_regq_C2 ;
  logic [10:0] data_regq_R2 ;
  logic [10:0] data_regq_X2 ;
  assign dout_T = data_regq_T ;
  assign data_regq_C2 = dout_C ;
  assign data_regq_R2 = dout_R ;
  assign data_regq_X2 = dout_X ;
  assign dout_S = data_regq_S ;
  assign la_bist_clkw0 = la_bist_clkr0;
  logic [0:0] la_bist_clkr0_C2 ;
  logic [0:0] la_bist_clkr0_R2 ;
  logic [0:0] la_bist_clkr0_X2 ;
  assign la_bist_clkw0_T = la_bist_clkr0_T ;
  assign la_bist_clkr0_C2 = la_bist_clkw0_C ;
  assign la_bist_clkr0_R2 = la_bist_clkw0_R ;
  assign la_bist_clkr0_X2 = la_bist_clkw0_X ;
  assign la_bist_clkw0_S = la_bist_clkr0_S ;
  assign mbist_Do_r0_int_net = data_regq;
  logic [10:0] data_regq_C3 ;
  logic [10:0] data_regq_R3 ;
  logic [10:0] data_regq_X3 ;
  assign mbist_Do_r0_int_net_T = data_regq_T ;
  assign data_regq_C3 = mbist_Do_r0_int_net_C ;
  assign data_regq_R3 = mbist_Do_r0_int_net_R ;
  assign data_regq_X3 = mbist_Do_r0_int_net_X ;
  assign mbist_Do_r0_int_net_S = data_regq_S ;
  assign muxed_Di_w0 = Wdata;
  logic [10:0] Wdata_C2 ;
  logic [10:0] Wdata_R2 ;
  logic [10:0] Wdata_X2 ;
  assign muxed_Di_w0_T = Wdata_T ;
  assign Wdata_C2 = muxed_Di_w0_C ;
  assign Wdata_R2 = muxed_Di_w0_R ;
  assign Wdata_X2 = muxed_Di_w0_X ;
  assign muxed_Di_w0_S = Wdata_S ;
  assign muxed_Di_w0_A = di;
  logic [10:0] di_C1 ;
  logic [10:0] di_R1 ;
  logic [10:0] di_X1 ;
  assign muxed_Di_w0_A_T = di_T ;
  assign di_C1 = muxed_Di_w0_A_C ;
  assign di_R1 = muxed_Di_w0_A_R ;
  assign di_X1 = muxed_Di_w0_A_X ;
  assign muxed_Di_w0_A_S = di_S ;
  assign muxed_Di_w0_S = muxed_re_r0_S;
  logic [0:0] muxed_re_r0_S_C7 ;
  logic [0:0] muxed_re_r0_S_R7 ;
  logic [0:0] muxed_re_r0_S_X7 ;
  assign muxed_Di_w0_S_T = muxed_re_r0_S_T ;
  assign muxed_re_r0_S_C7 = muxed_Di_w0_S_C ;
  assign muxed_re_r0_S_R7 = muxed_Di_w0_S_R ;
  assign muxed_re_r0_S_X7 = muxed_Di_w0_S_X ;
  assign muxed_Di_w0_S_S = muxed_re_r0_S_S ;
  assign muxed_Ra_r0_A = ra;
  logic [6:0] ra_C1 ;
  logic [6:0] ra_R1 ;
  logic [6:0] ra_X1 ;
  assign muxed_Ra_r0_A_T = ra_T ;
  assign ra_C1 = muxed_Ra_r0_A_C ;
  assign ra_R1 = muxed_Ra_r0_A_R ;
  assign ra_X1 = muxed_Ra_r0_A_X ;
  assign muxed_Ra_r0_A_S = ra_S ;
  assign muxed_Ra_r0_S = muxed_re_r0_S;
  logic [0:0] muxed_re_r0_S_C8 ;
  logic [0:0] muxed_re_r0_S_R8 ;
  logic [0:0] muxed_re_r0_S_X8 ;
  assign muxed_Ra_r0_S_T = muxed_re_r0_S_T ;
  assign muxed_re_r0_S_C8 = muxed_Ra_r0_S_C ;
  assign muxed_re_r0_S_R8 = muxed_Ra_r0_S_R ;
  assign muxed_re_r0_S_X8 = muxed_Ra_r0_S_X ;
  assign muxed_Ra_r0_S_S = muxed_re_r0_S_S ;
  assign muxed_Wa_w0_A = wa;
  logic [6:0] wa_C1 ;
  logic [6:0] wa_R1 ;
  logic [6:0] wa_X1 ;
  assign muxed_Wa_w0_A_T = wa_T ;
  assign wa_C1 = muxed_Wa_w0_A_C ;
  assign wa_R1 = muxed_Wa_w0_A_R ;
  assign wa_X1 = muxed_Wa_w0_A_X ;
  assign muxed_Wa_w0_A_S = wa_S ;
  assign muxed_Wa_w0_S = muxed_re_r0_S;
  logic [0:0] muxed_re_r0_S_C9 ;
  logic [0:0] muxed_re_r0_S_R9 ;
  logic [0:0] muxed_re_r0_S_X9 ;
  assign muxed_Wa_w0_S_T = muxed_re_r0_S_T ;
  assign muxed_re_r0_S_C9 = muxed_Wa_w0_S_C ;
  assign muxed_re_r0_S_R9 = muxed_Wa_w0_S_R ;
  assign muxed_re_r0_S_X9 = muxed_Wa_w0_S_X ;
  assign muxed_Wa_w0_S_S = muxed_re_r0_S_S ;
  assign muxed_re_r0_A = re;
  logic [0:0] re_C2 ;
  logic [0:0] re_R2 ;
  logic [0:0] re_X2 ;
  assign muxed_re_r0_A_T = re_T ;
  assign re_C2 = muxed_re_r0_A_C ;
  assign re_R2 = muxed_re_r0_A_R ;
  assign re_X2 = muxed_re_r0_A_X ;
  assign muxed_re_r0_A_S = re_S ;
  assign muxed_we_w0_A = we;
  logic [0:0] we_C2 ;
  logic [0:0] we_R2 ;
  logic [0:0] we_X2 ;
  assign muxed_we_w0_A_T = we_T ;
  assign we_C2 = muxed_we_w0_A_C ;
  assign we_R2 = muxed_we_w0_A_R ;
  assign we_X2 = muxed_we_w0_A_X ;
  assign muxed_we_w0_A_S = we_S ;
  assign muxed_we_w0_S = muxed_re_r0_S;
  logic [0:0] muxed_re_r0_S_C10 ;
  logic [0:0] muxed_re_r0_S_R10 ;
  logic [0:0] muxed_re_r0_S_X10 ;
  assign muxed_we_w0_S_T = muxed_re_r0_S_T ;
  assign muxed_re_r0_S_C10 = muxed_we_w0_S_C ;
  assign muxed_re_r0_S_R10 = muxed_we_w0_S_R ;
  assign muxed_re_r0_S_X10 = muxed_we_w0_S_X ;
  assign muxed_we_w0_S_S = muxed_re_r0_S_S ;
  assign pre_Ra_reg_r0 = Ra_reg_r0_A;
  logic [6:0] Ra_reg_r0_A_C1 ;
  logic [6:0] Ra_reg_r0_A_R1 ;
  logic [6:0] Ra_reg_r0_A_X1 ;
  assign pre_Ra_reg_r0_T = Ra_reg_r0_A_T ;
  assign Ra_reg_r0_A_C1 = pre_Ra_reg_r0_C ;
  assign Ra_reg_r0_A_R1 = pre_Ra_reg_r0_R ;
  assign Ra_reg_r0_A_X1 = pre_Ra_reg_r0_X ;
  assign pre_Ra_reg_r0_S = Ra_reg_r0_A_S ;
  assign pre_Wa_reg_w0 = Wa_reg_w0_A;
  logic [6:0] Wa_reg_w0_A_C1 ;
  logic [6:0] Wa_reg_w0_A_R1 ;
  logic [6:0] Wa_reg_w0_A_X1 ;
  assign pre_Wa_reg_w0_T = Wa_reg_w0_A_T ;
  assign Wa_reg_w0_A_C1 = pre_Wa_reg_w0_C ;
  assign Wa_reg_w0_A_R1 = pre_Wa_reg_w0_R ;
  assign Wa_reg_w0_A_X1 = pre_Wa_reg_w0_X ;
  assign pre_Wa_reg_w0_S = Wa_reg_w0_A_S ;
  assign pre_muxed_Di_w0 = muxed_Di_w0_B;
  logic [10:0] muxed_Di_w0_B_C1 ;
  logic [10:0] muxed_Di_w0_B_R1 ;
  logic [10:0] muxed_Di_w0_B_X1 ;
  assign pre_muxed_Di_w0_T = muxed_Di_w0_B_T ;
  assign muxed_Di_w0_B_C1 = pre_muxed_Di_w0_C ;
  assign muxed_Di_w0_B_R1 = pre_muxed_Di_w0_R ;
  assign muxed_Di_w0_B_X1 = pre_muxed_Di_w0_X ;
  assign pre_muxed_Di_w0_S = muxed_Di_w0_B_S ;
  assign pre_muxed_Di_w0_A = data_regq;
  logic [10:0] data_regq_C4 ;
  logic [10:0] data_regq_R4 ;
  logic [10:0] data_regq_X4 ;
  assign pre_muxed_Di_w0_A_T = data_regq_T ;
  assign data_regq_C4 = pre_muxed_Di_w0_A_C ;
  assign data_regq_R4 = pre_muxed_Di_w0_A_R ;
  assign data_regq_X4 = pre_muxed_Di_w0_A_X ;
  assign pre_muxed_Di_w0_A_S = data_regq_S ;
  assign pre_muxed_Di_w0_B = { mbist_Di_w0[0], mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0 };
  assign pre_muxed_Di_w0_B_T = {  mbist_Di_w0_T [0] , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T  };
  logic [13:0] pre_muxed_Di_w0_B_S ;
  assign pre_muxed_Di_w0_B_S = 0 ;
  logic [1:0] mbist_Di_w0_R6 ;
  logic [1:0] mbist_Di_w0_X6 ;
  logic [1:0] mbist_Di_w0_C6 ;
  assign mbist_Di_w0_R6 [0:0] = pre_muxed_Di_w0_B_R [10:10] ;
  assign mbist_Di_w0_X6 [0:0] = pre_muxed_Di_w0_B_X [10:10] ;
  assign mbist_Di_w0_C6 [0:0] = pre_muxed_Di_w0_B_C [10:10] ;
  assign { mbist_Di_w0_R6 [1:1] } = 0;
  assign { mbist_Di_w0_X6 [1:1] } = 0;
  assign { mbist_Di_w0_C6 [1:1] } = 0;
  logic [1:0] mbist_Di_w0_R7 ;
  logic [1:0] mbist_Di_w0_X7 ;
  logic [1:0] mbist_Di_w0_C7 ;
  assign mbist_Di_w0_R7 = pre_muxed_Di_w0_B_R [9:8] ;
  assign mbist_Di_w0_X7 = pre_muxed_Di_w0_B_X [9:8] ;
  assign mbist_Di_w0_C7 = pre_muxed_Di_w0_B_C [9:8] ;
  logic [1:0] mbist_Di_w0_R8 ;
  logic [1:0] mbist_Di_w0_X8 ;
  logic [1:0] mbist_Di_w0_C8 ;
  assign mbist_Di_w0_R8 = pre_muxed_Di_w0_B_R [7:6] ;
  assign mbist_Di_w0_X8 = pre_muxed_Di_w0_B_X [7:6] ;
  assign mbist_Di_w0_C8 = pre_muxed_Di_w0_B_C [7:6] ;
  logic [1:0] mbist_Di_w0_R9 ;
  logic [1:0] mbist_Di_w0_X9 ;
  logic [1:0] mbist_Di_w0_C9 ;
  assign mbist_Di_w0_R9 = pre_muxed_Di_w0_B_R [5:4] ;
  assign mbist_Di_w0_X9 = pre_muxed_Di_w0_B_X [5:4] ;
  assign mbist_Di_w0_C9 = pre_muxed_Di_w0_B_C [5:4] ;
  logic [1:0] mbist_Di_w0_R10 ;
  logic [1:0] mbist_Di_w0_X10 ;
  logic [1:0] mbist_Di_w0_C10 ;
  assign mbist_Di_w0_R10 = pre_muxed_Di_w0_B_R [3:2] ;
  assign mbist_Di_w0_X10 = pre_muxed_Di_w0_B_X [3:2] ;
  assign mbist_Di_w0_C10 = pre_muxed_Di_w0_B_C [3:2] ;
  logic [1:0] mbist_Di_w0_R11 ;
  logic [1:0] mbist_Di_w0_X11 ;
  logic [1:0] mbist_Di_w0_C11 ;
  assign mbist_Di_w0_R11 = pre_muxed_Di_w0_B_R [1:0] ;
  assign mbist_Di_w0_X11 = pre_muxed_Di_w0_B_X [1:0] ;
  assign mbist_Di_w0_C11 = pre_muxed_Di_w0_B_C [1:0] ;
  assign pre_re_r0 = muxed_re_r0_B;
  logic [0:0] muxed_re_r0_B_C1 ;
  logic [0:0] muxed_re_r0_B_R1 ;
  logic [0:0] muxed_re_r0_B_X1 ;
  assign pre_re_r0_T = muxed_re_r0_B_T ;
  assign muxed_re_r0_B_C1 = pre_re_r0_C ;
  assign muxed_re_r0_B_R1 = pre_re_r0_R ;
  assign muxed_re_r0_B_X1 = pre_re_r0_X ;
  assign pre_re_r0_S = muxed_re_r0_B_S ;
  assign pre_we_w0 = muxed_we_w0_B;
  logic [0:0] muxed_we_w0_B_C1 ;
  logic [0:0] muxed_we_w0_B_R1 ;
  logic [0:0] muxed_we_w0_B_X1 ;
  assign pre_we_w0_T = muxed_we_w0_B_T ;
  assign muxed_we_w0_B_C1 = pre_we_w0_C ;
  assign muxed_we_w0_B_R1 = pre_we_w0_R ;
  assign muxed_we_w0_B_X1 = pre_we_w0_X ;
  assign pre_we_w0_S = muxed_we_w0_B_S ;
  assign ra_0_0 = muxed_Ra_r0;
  logic [6:0] muxed_Ra_r0_C3 ;
  logic [6:0] muxed_Ra_r0_R3 ;
  logic [6:0] muxed_Ra_r0_X3 ;
  assign ra_0_0_T = muxed_Ra_r0_T ;
  assign muxed_Ra_r0_C3 = ra_0_0_C ;
  assign muxed_Ra_r0_R3 = ra_0_0_R ;
  assign muxed_Ra_r0_X3 = ra_0_0_X ;
  assign ra_0_0_S = muxed_Ra_r0_S ;
  assign radr_q = Ra_reg_r0_A;
  logic [6:0] Ra_reg_r0_A_C2 ;
  logic [6:0] Ra_reg_r0_A_R2 ;
  logic [6:0] Ra_reg_r0_A_X2 ;
  assign radr_q_T = Ra_reg_r0_A_T ;
  assign Ra_reg_r0_A_C2 = radr_q_C ;
  assign Ra_reg_r0_A_R2 = radr_q_R ;
  assign Ra_reg_r0_A_X2 = radr_q_X ;
  assign radr_q_S = Ra_reg_r0_A_S ;
  assign ramDataOut = dout_0_0;
  logic [10:0] dout_0_0_C1 ;
  logic [10:0] dout_0_0_R1 ;
  logic [10:0] dout_0_0_X1 ;
  assign ramDataOut_T = dout_0_0_T ;
  assign dout_0_0_C1 = ramDataOut_C ;
  assign dout_0_0_R1 = ramDataOut_R ;
  assign dout_0_0_X1 = ramDataOut_X ;
  assign ramDataOut_S = dout_0_0_S ;
  assign ram_r0_OutputMuxDataOut = r0_OutputMuxDataOut;
  logic [10:0] r0_OutputMuxDataOut_C1 ;
  logic [10:0] r0_OutputMuxDataOut_R1 ;
  logic [10:0] r0_OutputMuxDataOut_X1 ;
  assign ram_r0_OutputMuxDataOut_T = r0_OutputMuxDataOut_T ;
  assign r0_OutputMuxDataOut_C1 = ram_r0_OutputMuxDataOut_C ;
  assign r0_OutputMuxDataOut_R1 = ram_r0_OutputMuxDataOut_R ;
  assign r0_OutputMuxDataOut_X1 = ram_r0_OutputMuxDataOut_X ;
  assign ram_r0_OutputMuxDataOut_S = r0_OutputMuxDataOut_S ;
  assign re_0_0 = re;
  logic [0:0] re_C3 ;
  logic [0:0] re_R3 ;
  logic [0:0] re_X3 ;
  assign re_0_0_T = re_T ;
  assign re_C3 = re_0_0_C ;
  assign re_R3 = re_0_0_R ;
  assign re_X3 = re_0_0_X ;
  assign re_0_0_S = re_S ;
  assign re_reg_r0 = re_q;
  logic [0:0] re_q_C1 ;
  logic [0:0] re_q_R1 ;
  logic [0:0] re_q_X1 ;
  assign re_reg_r0_T = re_q_T ;
  assign re_q_C1 = re_reg_r0_C ;
  assign re_q_R1 = re_reg_r0_R ;
  assign re_q_X1 = re_reg_r0_X ;
  assign re_reg_r0_S = re_q_S ;
  assign ret_en = pwrbus_ram_pd[8];
  assign { pwrbus_ram_pd_R0 [31:9] } = 0;
  assign { pwrbus_ram_pd_X0 [31:9] } = 0;
  assign { pwrbus_ram_pd_C0 [31:9] } = 0;
  logic [31:0] pwrbus_ram_pd_C1 ;
  logic [31:0] pwrbus_ram_pd_R1 ;
  logic [31:0] pwrbus_ram_pd_X1 ;
  assign ret_en_T = pwrbus_ram_pd_T [8] ;
  assign pwrbus_ram_pd_C1 [8] = ret_en_C ;
  assign pwrbus_ram_pd_R1 [8] = ret_en_R ;
  assign pwrbus_ram_pd_X1 [8] = ret_en_X ;
  assign ret_en_S = pwrbus_ram_pd_S ;
  assign sleep_en = pwrbus_ram_pd[7:0];
  assign sleep_en_T = pwrbus_ram_pd_T [7:0] ;
  assign pwrbus_ram_pd_C1 [7:0] = sleep_en_C ;
  assign pwrbus_ram_pd_R1 [7:0] = sleep_en_R ;
  assign pwrbus_ram_pd_X1 [7:0] = sleep_en_X ;
  assign sleep_en_S = pwrbus_ram_pd_S ;
  assign wa_0_0 = muxed_Wa_w0;
  logic [6:0] muxed_Wa_w0_C2 ;
  logic [6:0] muxed_Wa_w0_R2 ;
  logic [6:0] muxed_Wa_w0_X2 ;
  assign wa_0_0_T = muxed_Wa_w0_T ;
  assign muxed_Wa_w0_C2 = wa_0_0_C ;
  assign muxed_Wa_w0_R2 = wa_0_0_R ;
  assign muxed_Wa_w0_X2 = wa_0_0_X ;
  assign wa_0_0_S = muxed_Wa_w0_S ;
  assign wadr_q = Wa_reg_w0_A;
  logic [6:0] Wa_reg_w0_A_C2 ;
  logic [6:0] Wa_reg_w0_A_R2 ;
  logic [6:0] Wa_reg_w0_A_X2 ;
  assign wadr_q_T = Wa_reg_w0_A_T ;
  assign Wa_reg_w0_A_C2 = wadr_q_C ;
  assign Wa_reg_w0_A_R2 = wadr_q_R ;
  assign Wa_reg_w0_A_X2 = wadr_q_X ;
  assign wadr_q_S = Wa_reg_w0_A_S ;
  assign we_0_0 = we;
  logic [0:0] we_C3 ;
  logic [0:0] we_R3 ;
  logic [0:0] we_X3 ;
  assign we_0_0_T = we_T ;
  assign we_C3 = we_0_0_C ;
  assign we_R3 = we_0_0_R ;
  assign we_X3 = we_0_0_X ;
  assign we_0_0_S = we_S ;
  assign we_reg_w0 = we_q;
  logic [0:0] we_q_C1 ;
  logic [0:0] we_q_R1 ;
  logic [0:0] we_q_X1 ;
  assign we_reg_w0_T = we_q_T ;
  assign we_q_C1 = we_reg_w0_C ;
  assign we_q_R1 = we_reg_w0_R ;
  assign we_q_X1 = we_reg_w0_X ;
  assign we_reg_w0_S = we_q_S ;
  assign updateDR_C = ( updateDR_C0 );
  assign Wa_reg_SO_w0_C = ( Wa_reg_SO_w0_C0 );
  assign Ra_reg_SO_r0_C = ( Ra_reg_SO_r0_C0 );
  assign la_bist_clkr0_C = ( la_bist_clkr0_C0 ) | ( la_bist_clkr0_C1 ) | ( la_bist_clkr0_C2 );
  assign Data_reg_SO_r0_C = ( Data_reg_SO_r0_C0 );
  assign SI_C = ( SI_C0 );
  assign we_reg_SO_w0_C = ( we_reg_SO_w0_C0 );
  assign gated_clk_jtag_Wa_reg_w0_C = ( gated_clk_jtag_Wa_reg_w0_C0 ) | ( gated_clk_jtag_Wa_reg_w0_C1 ) | ( gated_clk_jtag_Wa_reg_w0_C2 ) | ( gated_clk_jtag_Wa_reg_w0_C3 );
  assign re_reg_SO_r0_C = ( re_reg_SO_r0_C0 );
  assign gated_clk_jtag_Data_reg_r0_C = ( gated_clk_jtag_Data_reg_r0_C0 );
  assign r0_OutputMuxDataOut_C = ( r0_OutputMuxDataOut_C0 ) | ( r0_OutputMuxDataOut_C1 );
  assign _09__C = ( _09__C0 );
  assign muxed_Wa_w0_C = ( muxed_Wa_w0_C0 ) | ( muxed_Wa_w0_C1 ) | ( muxed_Wa_w0_C2 );
  assign svop_C = ( svop_C0 );
  assign pwrbus_ram_pd_C = ( pwrbus_ram_pd_C0 ) | ( pwrbus_ram_pd_C1 );
  assign piece_re_C = ( piece_re_C0 );
  assign muxed_Ra_r0_C = ( muxed_Ra_r0_C0 ) | ( muxed_Ra_r0_C1 ) | ( muxed_Ra_r0_C2 ) | ( muxed_Ra_r0_C3 );
  assign iddq_mode_C = ( iddq_mode_C0 );
  assign gated_clk_core_C = ( gated_clk_core_C0 ) | ( gated_clk_core_C1 );
  assign mbist_en_sync_C = ( mbist_en_sync_C0 );
  assign debug_mode_C = ( debug_mode_C0 ) | ( debug_mode_C1 ) | ( debug_mode_C2 ) | ( debug_mode_C3 ) | ( debug_mode_C4 ) | ( debug_mode_C5 );
  assign dft_rst_gated_clk_C = ( dft_rst_gated_clk_C0 ) | ( dft_rst_gated_clk_C1 );
  assign _17__C = ( _17__C0 );
  assign _15__C = ( _15__C0 );
  assign _13__C = ( _13__C0 );
  assign clk_en_core_C = ( clk_en_core_C0 );
  assign mbist_ramaccess_rst__C = ( mbist_ramaccess_rst__C0 ) | ( mbist_ramaccess_rst__C1 ) | ( mbist_ramaccess_rst__C2 ) | ( mbist_ramaccess_rst__C3 );
  assign clk_C = ( clk_C0 ) | ( clk_C1 ) | ( clk_C2 ) | ( clk_C3 ) | ( clk_C4 );
  assign _14__C = ( _14__C0 );
  assign _06__C = ( _06__C0 );
  assign access_en_r_1p_C = ( access_en_r_1p_C0 );
  assign dout_0_0_C = ( dout_0_0_C0 ) | ( dout_0_0_C1 );
  assign Wdata_C = ( Wdata_C0 ) | ( Wdata_C1 ) | ( Wdata_C2 );
  assign ram_bypass_C = ( ram_bypass_C0 );
  assign _02__C = ( _02__C0 );
  assign _01__C = ( _01__C0 );
  assign _00__C = ( _00__C0 );
  assign fangyuan0_C = ( fangyuan0_C0 );
  assign data_regq_C = ( data_regq_C0 ) | ( data_regq_C1 ) | ( data_regq_C2 ) | ( data_regq_C3 ) | ( data_regq_C4 );
  assign mbist_Di_w0_C = ( mbist_Di_w0_C0 ) | ( mbist_Di_w0_C1 ) | ( mbist_Di_w0_C2 ) | ( mbist_Di_w0_C3 ) | ( mbist_Di_w0_C4 ) | ( mbist_Di_w0_C5 ) | ( mbist_Di_w0_C6 ) | ( mbist_Di_w0_C7 ) | ( mbist_Di_w0_C8 ) | ( mbist_Di_w0_C9 ) | ( mbist_Di_w0_C10 ) | ( mbist_Di_w0_C11 );
  assign di_C = ( di_C0 ) | ( di_C1 );
  assign muxed_Di_w0_B_C = ( muxed_Di_w0_B_C0 ) | ( muxed_Di_w0_B_C1 );
  assign mbist_Wa_w0_C = ( mbist_Wa_w0_C0 ) | ( mbist_Wa_w0_C1 );
  assign Wa_reg_w0_A_C = ( Wa_reg_w0_A_C0 ) | ( Wa_reg_w0_A_C1 ) | ( Wa_reg_w0_A_C2 );
  assign wa_C = ( wa_C0 ) | ( wa_C1 );
  assign muxed_Wa_w0_B_C = ( muxed_Wa_w0_B_C0 ) | ( muxed_Wa_w0_B_C1 );
  assign muxed_we_w0_B_C = ( muxed_we_w0_B_C0 ) | ( muxed_we_w0_B_C1 );
  assign mbist_Ra_r0_C = ( mbist_Ra_r0_C0 ) | ( mbist_Ra_r0_C1 );
  assign Ra_reg_r0_A_C = ( Ra_reg_r0_A_C0 ) | ( Ra_reg_r0_A_C1 ) | ( Ra_reg_r0_A_C2 );
  assign ra_C = ( ra_C0 ) | ( ra_C1 );
  assign muxed_Ra_r0_B_C = ( muxed_Ra_r0_B_C0 ) | ( muxed_Ra_r0_B_C1 );
  assign muxed_re_r0_B_C = ( muxed_re_r0_B_C0 ) | ( muxed_re_r0_B_C1 );
  assign access_en_r_C = ( access_en_r_C0 ) | ( access_en_r_C1 );
  assign _07__C = ( _07__C0 );
  assign captureDR_r0_C = ( captureDR_r0_C0 );
  assign _11__C = ( _11__C0 );
  assign ary_atpg_ctl_C = ( ary_atpg_ctl_C0 ) | ( ary_atpg_ctl_C1 ) | ( ary_atpg_ctl_C2 ) | ( ary_atpg_ctl_C3 );
  assign _03__C = ( _03__C0 );
  assign muxed_re_r0_C = ( muxed_re_r0_C0 ) | ( muxed_re_r0_C1 );
  assign write_inh_C = ( write_inh_C0 );
  assign _12__C = ( _12__C0 );
  assign muxed_re_r0_S_C = ( muxed_re_r0_S_C0 ) | ( muxed_re_r0_S_C1 ) | ( muxed_re_r0_S_C2 ) | ( muxed_re_r0_S_C3 ) | ( muxed_re_r0_S_C4 ) | ( muxed_re_r0_S_C5 ) | ( muxed_re_r0_S_C6 ) | ( muxed_re_r0_S_C7 ) | ( muxed_re_r0_S_C8 ) | ( muxed_re_r0_S_C9 ) | ( muxed_re_r0_S_C10 );
  assign we_C = ( we_C0 ) | ( we_C1 ) | ( we_C2 ) | ( we_C3 );
  assign re_C = ( re_C0 ) | ( re_C1 ) | ( re_C2 ) | ( re_C3 );
  assign ary_read_inh_C = ( ary_read_inh_C0 );
  assign scan_ramtms_C = ( scan_ramtms_C0 );
  assign muxed_we_w0_C = ( muxed_we_w0_C0 ) | ( muxed_we_w0_C1 );
  assign _16__C = ( _16__C0 );
  assign _05__C = ( _05__C0 );
  assign web_C = ( web_C0 );
  assign updateDR_sync_1p_C = ( updateDR_sync_1p_C0 );
  assign shiftDR_C = ( shiftDR_C0 ) | ( shiftDR_C1 ) | ( shiftDR_C2 ) | ( shiftDR_C3 ) | ( shiftDR_C4 ) | ( shiftDR_C5 ) | ( shiftDR_C6 );
  assign debug_mode_sync_C = ( debug_mode_sync_C0 ) | ( debug_mode_sync_C1 ) | ( debug_mode_sync_C2 ) | ( debug_mode_sync_C3 ) | ( debug_mode_sync_C4 ) | ( debug_mode_sync_C5 ) | ( debug_mode_sync_C6 ) | ( debug_mode_sync_C7 ) | ( debug_mode_sync_C8 ) | ( debug_mode_sync_C9 );
  assign mbist_ce_r0_1p_C = ( mbist_ce_r0_1p_C0 );
  assign pre_muxed_Di_w0_S_C = ( pre_muxed_Di_w0_S_C0 ) | ( pre_muxed_Di_w0_S_C1 ) | ( pre_muxed_Di_w0_S_C2 );
  assign _04__C = ( _04__C0 );
  assign _10__C = ( _10__C0 );
  assign ore_C = ( ore_C0 );
  assign jtag_readonly_mode_C = ( jtag_readonly_mode_C0 );
  assign scan_en_C = ( scan_en_C0 ) | ( scan_en_C1 ) | ( scan_en_C2 ) | ( scan_en_C3 ) | ( scan_en_C4 ) | ( scan_en_C5 );
  assign mbist_ce_r0_C = ( mbist_ce_r0_C0 ) | ( mbist_ce_r0_C1 );
  assign re_q_C = ( re_q_C0 ) | ( re_q_C1 );
  assign mbist_we_w0_C = ( mbist_we_w0_C0 );
  assign mbist_en_r_C = ( mbist_en_r_C0 ) | ( mbist_en_r_C1 ) | ( mbist_en_r_C2 ) | ( mbist_en_r_C3 ) | ( mbist_en_r_C4 ) | ( mbist_en_r_C5 );
  assign we_q_C = ( we_q_C0 ) | ( we_q_C1 );
  assign posedge_updateDR_sync_C = ( posedge_updateDR_sync_C0 ) | ( posedge_updateDR_sync_C1 ) | ( posedge_updateDR_sync_C2 );
  assign _08__C = ( _08__C0 );
  assign updateDR_sync_C = ( updateDR_sync_C0 ) | ( updateDR_sync_C1 );
  assign mbist_Do_r0_int_net_C = ( mbist_Do_r0_int_net_C0 );
  assign dout_C = ( dout_C0 );
  assign SO_int_net_C = ( SO_int_net_C0 );
  assign updateDR_X = ( updateDR_X0 );
  assign Wa_reg_SO_w0_X = ( Wa_reg_SO_w0_X0 );
  assign Ra_reg_SO_r0_X = ( Ra_reg_SO_r0_X0 );
  assign la_bist_clkr0_X = ( la_bist_clkr0_X0 ) | ( la_bist_clkr0_X1 ) | ( la_bist_clkr0_X2 );
  assign Data_reg_SO_r0_X = ( Data_reg_SO_r0_X0 );
  assign SI_X = ( SI_X0 );
  assign we_reg_SO_w0_X = ( we_reg_SO_w0_X0 );
  assign gated_clk_jtag_Wa_reg_w0_X = ( gated_clk_jtag_Wa_reg_w0_X0 ) | ( gated_clk_jtag_Wa_reg_w0_X1 ) | ( gated_clk_jtag_Wa_reg_w0_X2 ) | ( gated_clk_jtag_Wa_reg_w0_X3 );
  assign re_reg_SO_r0_X = ( re_reg_SO_r0_X0 );
  assign gated_clk_jtag_Data_reg_r0_X = ( gated_clk_jtag_Data_reg_r0_X0 );
  assign r0_OutputMuxDataOut_X = ( r0_OutputMuxDataOut_X0 ) | ( r0_OutputMuxDataOut_X1 );
  assign _09__X = ( _09__X0 );
  assign muxed_Wa_w0_X = ( muxed_Wa_w0_X0 ) | ( muxed_Wa_w0_X1 ) | ( muxed_Wa_w0_X2 );
  assign svop_X = ( svop_X0 );
  assign pwrbus_ram_pd_X = ( pwrbus_ram_pd_X0 ) | ( pwrbus_ram_pd_X1 );
  assign piece_re_X = ( piece_re_X0 );
  assign muxed_Ra_r0_X = ( muxed_Ra_r0_X0 ) | ( muxed_Ra_r0_X1 ) | ( muxed_Ra_r0_X2 ) | ( muxed_Ra_r0_X3 );
  assign iddq_mode_X = ( iddq_mode_X0 );
  assign gated_clk_core_X = ( gated_clk_core_X0 ) | ( gated_clk_core_X1 );
  assign mbist_en_sync_X = ( mbist_en_sync_X0 );
  assign debug_mode_X = ( debug_mode_X0 ) | ( debug_mode_X1 ) | ( debug_mode_X2 ) | ( debug_mode_X3 ) | ( debug_mode_X4 ) | ( debug_mode_X5 );
  assign dft_rst_gated_clk_X = ( dft_rst_gated_clk_X0 ) | ( dft_rst_gated_clk_X1 );
  assign _17__X = ( _17__X0 );
  assign _15__X = ( _15__X0 );
  assign _13__X = ( _13__X0 );
  assign clk_en_core_X = ( clk_en_core_X0 );
  assign mbist_ramaccess_rst__X = ( mbist_ramaccess_rst__X0 ) | ( mbist_ramaccess_rst__X1 ) | ( mbist_ramaccess_rst__X2 ) | ( mbist_ramaccess_rst__X3 );
  assign clk_X = ( clk_X0 ) | ( clk_X1 ) | ( clk_X2 ) | ( clk_X3 ) | ( clk_X4 );
  assign _14__X = ( _14__X0 );
  assign _06__X = ( _06__X0 );
  assign access_en_r_1p_X = ( access_en_r_1p_X0 );
  assign dout_0_0_X = ( dout_0_0_X0 ) | ( dout_0_0_X1 );
  assign Wdata_X = ( Wdata_X0 ) | ( Wdata_X1 ) | ( Wdata_X2 );
  assign ram_bypass_X = ( ram_bypass_X0 );
  assign _02__X = ( _02__X0 );
  assign _01__X = ( _01__X0 );
  assign _00__X = ( _00__X0 );
  assign fangyuan0_X = ( fangyuan0_X0 );
  assign data_regq_X = ( data_regq_X0 ) | ( data_regq_X1 ) | ( data_regq_X2 ) | ( data_regq_X3 ) | ( data_regq_X4 );
  assign mbist_Di_w0_X = ( mbist_Di_w0_X0 ) | ( mbist_Di_w0_X1 ) | ( mbist_Di_w0_X2 ) | ( mbist_Di_w0_X3 ) | ( mbist_Di_w0_X4 ) | ( mbist_Di_w0_X5 ) | ( mbist_Di_w0_X6 ) | ( mbist_Di_w0_X7 ) | ( mbist_Di_w0_X8 ) | ( mbist_Di_w0_X9 ) | ( mbist_Di_w0_X10 ) | ( mbist_Di_w0_X11 );
  assign di_X = ( di_X0 ) | ( di_X1 );
  assign muxed_Di_w0_B_X = ( muxed_Di_w0_B_X0 ) | ( muxed_Di_w0_B_X1 );
  assign mbist_Wa_w0_X = ( mbist_Wa_w0_X0 ) | ( mbist_Wa_w0_X1 );
  assign Wa_reg_w0_A_X = ( Wa_reg_w0_A_X0 ) | ( Wa_reg_w0_A_X1 ) | ( Wa_reg_w0_A_X2 );
  assign wa_X = ( wa_X0 ) | ( wa_X1 );
  assign muxed_Wa_w0_B_X = ( muxed_Wa_w0_B_X0 ) | ( muxed_Wa_w0_B_X1 );
  assign muxed_we_w0_B_X = ( muxed_we_w0_B_X0 ) | ( muxed_we_w0_B_X1 );
  assign mbist_Ra_r0_X = ( mbist_Ra_r0_X0 ) | ( mbist_Ra_r0_X1 );
  assign Ra_reg_r0_A_X = ( Ra_reg_r0_A_X0 ) | ( Ra_reg_r0_A_X1 ) | ( Ra_reg_r0_A_X2 );
  assign ra_X = ( ra_X0 ) | ( ra_X1 );
  assign muxed_Ra_r0_B_X = ( muxed_Ra_r0_B_X0 ) | ( muxed_Ra_r0_B_X1 );
  assign muxed_re_r0_B_X = ( muxed_re_r0_B_X0 ) | ( muxed_re_r0_B_X1 );
  assign access_en_r_X = ( access_en_r_X0 ) | ( access_en_r_X1 );
  assign _07__X = ( _07__X0 );
  assign captureDR_r0_X = ( captureDR_r0_X0 );
  assign _11__X = ( _11__X0 );
  assign ary_atpg_ctl_X = ( ary_atpg_ctl_X0 ) | ( ary_atpg_ctl_X1 ) | ( ary_atpg_ctl_X2 ) | ( ary_atpg_ctl_X3 );
  assign _03__X = ( _03__X0 );
  assign muxed_re_r0_X = ( muxed_re_r0_X0 ) | ( muxed_re_r0_X1 );
  assign write_inh_X = ( write_inh_X0 );
  assign _12__X = ( _12__X0 );
  assign muxed_re_r0_S_X = ( muxed_re_r0_S_X0 ) | ( muxed_re_r0_S_X1 ) | ( muxed_re_r0_S_X2 ) | ( muxed_re_r0_S_X3 ) | ( muxed_re_r0_S_X4 ) | ( muxed_re_r0_S_X5 ) | ( muxed_re_r0_S_X6 ) | ( muxed_re_r0_S_X7 ) | ( muxed_re_r0_S_X8 ) | ( muxed_re_r0_S_X9 ) | ( muxed_re_r0_S_X10 );
  assign we_X = ( we_X0 ) | ( we_X1 ) | ( we_X2 ) | ( we_X3 );
  assign re_X = ( re_X0 ) | ( re_X1 ) | ( re_X2 ) | ( re_X3 );
  assign ary_read_inh_X = ( ary_read_inh_X0 );
  assign scan_ramtms_X = ( scan_ramtms_X0 );
  assign muxed_we_w0_X = ( muxed_we_w0_X0 ) | ( muxed_we_w0_X1 );
  assign _16__X = ( _16__X0 );
  assign _05__X = ( _05__X0 );
  assign web_X = ( web_X0 );
  assign updateDR_sync_1p_X = ( updateDR_sync_1p_X0 );
  assign shiftDR_X = ( shiftDR_X0 ) | ( shiftDR_X1 ) | ( shiftDR_X2 ) | ( shiftDR_X3 ) | ( shiftDR_X4 ) | ( shiftDR_X5 ) | ( shiftDR_X6 );
  assign debug_mode_sync_X = ( debug_mode_sync_X0 ) | ( debug_mode_sync_X1 ) | ( debug_mode_sync_X2 ) | ( debug_mode_sync_X3 ) | ( debug_mode_sync_X4 ) | ( debug_mode_sync_X5 ) | ( debug_mode_sync_X6 ) | ( debug_mode_sync_X7 ) | ( debug_mode_sync_X8 ) | ( debug_mode_sync_X9 );
  assign mbist_ce_r0_1p_X = ( mbist_ce_r0_1p_X0 );
  assign pre_muxed_Di_w0_S_X = ( pre_muxed_Di_w0_S_X0 ) | ( pre_muxed_Di_w0_S_X1 ) | ( pre_muxed_Di_w0_S_X2 );
  assign _04__X = ( _04__X0 );
  assign _10__X = ( _10__X0 );
  assign ore_X = ( ore_X0 );
  assign jtag_readonly_mode_X = ( jtag_readonly_mode_X0 );
  assign scan_en_X = ( scan_en_X0 ) | ( scan_en_X1 ) | ( scan_en_X2 ) | ( scan_en_X3 ) | ( scan_en_X4 ) | ( scan_en_X5 );
  assign mbist_ce_r0_X = ( mbist_ce_r0_X0 ) | ( mbist_ce_r0_X1 );
  assign re_q_X = ( re_q_X0 ) | ( re_q_X1 );
  assign mbist_we_w0_X = ( mbist_we_w0_X0 );
  assign mbist_en_r_X = ( mbist_en_r_X0 ) | ( mbist_en_r_X1 ) | ( mbist_en_r_X2 ) | ( mbist_en_r_X3 ) | ( mbist_en_r_X4 ) | ( mbist_en_r_X5 );
  assign we_q_X = ( we_q_X0 ) | ( we_q_X1 );
  assign posedge_updateDR_sync_X = ( posedge_updateDR_sync_X0 ) | ( posedge_updateDR_sync_X1 ) | ( posedge_updateDR_sync_X2 );
  assign _08__X = ( _08__X0 );
  assign updateDR_sync_X = ( updateDR_sync_X0 ) | ( updateDR_sync_X1 );
  assign mbist_Do_r0_int_net_X = ( mbist_Do_r0_int_net_X0 );
  assign dout_X = ( dout_X0 );
  assign SO_int_net_X = ( SO_int_net_X0 );
  assign updateDR_R = ( updateDR_X0 & updateDR_R0 );
  assign Wa_reg_SO_w0_R = ( Wa_reg_SO_w0_X0 & Wa_reg_SO_w0_R0 );
  assign Ra_reg_SO_r0_R = ( Ra_reg_SO_r0_X0 & Ra_reg_SO_r0_R0 );
  assign la_bist_clkr0_R = ( la_bist_clkr0_X0 & la_bist_clkr0_R0 ) | ( la_bist_clkr0_X1 & la_bist_clkr0_R1 ) | ( la_bist_clkr0_X2 & la_bist_clkr0_R2 );
  assign Data_reg_SO_r0_R = ( Data_reg_SO_r0_X0 & Data_reg_SO_r0_R0 );
  assign SI_R = ( SI_X0 & SI_R0 );
  assign we_reg_SO_w0_R = ( we_reg_SO_w0_X0 & we_reg_SO_w0_R0 );
  assign gated_clk_jtag_Wa_reg_w0_R = ( gated_clk_jtag_Wa_reg_w0_X0 & gated_clk_jtag_Wa_reg_w0_R0 ) | ( gated_clk_jtag_Wa_reg_w0_X1 & gated_clk_jtag_Wa_reg_w0_R1 ) | ( gated_clk_jtag_Wa_reg_w0_X2 & gated_clk_jtag_Wa_reg_w0_R2 ) | ( gated_clk_jtag_Wa_reg_w0_X3 & gated_clk_jtag_Wa_reg_w0_R3 );
  assign re_reg_SO_r0_R = ( re_reg_SO_r0_X0 & re_reg_SO_r0_R0 );
  assign gated_clk_jtag_Data_reg_r0_R = ( gated_clk_jtag_Data_reg_r0_X0 & gated_clk_jtag_Data_reg_r0_R0 );
  assign r0_OutputMuxDataOut_R = ( r0_OutputMuxDataOut_X0 & r0_OutputMuxDataOut_R0 ) | ( r0_OutputMuxDataOut_X1 & r0_OutputMuxDataOut_R1 );
  assign _09__R = ( _09__X0 & _09__R0 );
  assign muxed_Wa_w0_R = ( muxed_Wa_w0_X0 & muxed_Wa_w0_R0 ) | ( muxed_Wa_w0_X1 & muxed_Wa_w0_R1 ) | ( muxed_Wa_w0_X2 & muxed_Wa_w0_R2 );
  assign svop_R = ( svop_X0 & svop_R0 );
  assign pwrbus_ram_pd_R = ( pwrbus_ram_pd_X0 & pwrbus_ram_pd_R0 ) | ( pwrbus_ram_pd_X1 & pwrbus_ram_pd_R1 );
  assign piece_re_R = ( piece_re_X0 & piece_re_R0 );
  assign muxed_Ra_r0_R = ( muxed_Ra_r0_X0 & muxed_Ra_r0_R0 ) | ( muxed_Ra_r0_X1 & muxed_Ra_r0_R1 ) | ( muxed_Ra_r0_X2 & muxed_Ra_r0_R2 ) | ( muxed_Ra_r0_X3 & muxed_Ra_r0_R3 );
  assign iddq_mode_R = ( iddq_mode_X0 & iddq_mode_R0 );
  assign gated_clk_core_R = ( gated_clk_core_X0 & gated_clk_core_R0 ) | ( gated_clk_core_X1 & gated_clk_core_R1 );
  assign mbist_en_sync_R = ( mbist_en_sync_X0 & mbist_en_sync_R0 );
  assign debug_mode_R = ( debug_mode_X0 & debug_mode_R0 ) | ( debug_mode_X1 & debug_mode_R1 ) | ( debug_mode_X2 & debug_mode_R2 ) | ( debug_mode_X3 & debug_mode_R3 ) | ( debug_mode_X4 & debug_mode_R4 ) | ( debug_mode_X5 & debug_mode_R5 );
  assign dft_rst_gated_clk_R = ( dft_rst_gated_clk_X0 & dft_rst_gated_clk_R0 ) | ( dft_rst_gated_clk_X1 & dft_rst_gated_clk_R1 );
  assign _17__R = ( _17__X0 & _17__R0 );
  assign _15__R = ( _15__X0 & _15__R0 );
  assign _13__R = ( _13__X0 & _13__R0 );
  assign clk_en_core_R = ( clk_en_core_X0 & clk_en_core_R0 );
  assign mbist_ramaccess_rst__R = ( mbist_ramaccess_rst__X0 & mbist_ramaccess_rst__R0 ) | ( mbist_ramaccess_rst__X1 & mbist_ramaccess_rst__R1 ) | ( mbist_ramaccess_rst__X2 & mbist_ramaccess_rst__R2 ) | ( mbist_ramaccess_rst__X3 & mbist_ramaccess_rst__R3 );
  assign clk_R = ( clk_X0 & clk_R0 ) | ( clk_X1 & clk_R1 ) | ( clk_X2 & clk_R2 ) | ( clk_X3 & clk_R3 ) | ( clk_X4 & clk_R4 );
  assign _14__R = ( _14__X0 & _14__R0 );
  assign _06__R = ( _06__X0 & _06__R0 );
  assign access_en_r_1p_R = ( access_en_r_1p_X0 & access_en_r_1p_R0 );
  assign dout_0_0_R = ( dout_0_0_X0 & dout_0_0_R0 ) | ( dout_0_0_X1 & dout_0_0_R1 );
  assign Wdata_R = ( Wdata_X0 & Wdata_R0 ) | ( Wdata_X1 & Wdata_R1 ) | ( Wdata_X2 & Wdata_R2 );
  assign ram_bypass_R = ( ram_bypass_X0 & ram_bypass_R0 );
  assign _02__R = ( _02__X0 & _02__R0 );
  assign _01__R = ( _01__X0 & _01__R0 );
  assign _00__R = ( _00__X0 & _00__R0 );
  assign fangyuan0_R = ( fangyuan0_X0 & fangyuan0_R0 );
  assign data_regq_R = ( data_regq_X0 & data_regq_R0 ) | ( data_regq_X1 & data_regq_R1 ) | ( data_regq_X2 & data_regq_R2 ) | ( data_regq_X3 & data_regq_R3 ) | ( data_regq_X4 & data_regq_R4 );
  assign mbist_Di_w0_R = ( mbist_Di_w0_X0 & mbist_Di_w0_R0 ) | ( mbist_Di_w0_X1 & mbist_Di_w0_R1 ) | ( mbist_Di_w0_X2 & mbist_Di_w0_R2 ) | ( mbist_Di_w0_X3 & mbist_Di_w0_R3 ) | ( mbist_Di_w0_X4 & mbist_Di_w0_R4 ) | ( mbist_Di_w0_X5 & mbist_Di_w0_R5 ) | ( mbist_Di_w0_X6 & mbist_Di_w0_R6 ) | ( mbist_Di_w0_X7 & mbist_Di_w0_R7 ) | ( mbist_Di_w0_X8 & mbist_Di_w0_R8 ) | ( mbist_Di_w0_X9 & mbist_Di_w0_R9 ) | ( mbist_Di_w0_X10 & mbist_Di_w0_R10 ) | ( mbist_Di_w0_X11 & mbist_Di_w0_R11 );
  assign di_R = ( di_X0 & di_R0 ) | ( di_X1 & di_R1 );
  assign muxed_Di_w0_B_R = ( muxed_Di_w0_B_X0 & muxed_Di_w0_B_R0 ) | ( muxed_Di_w0_B_X1 & muxed_Di_w0_B_R1 );
  assign mbist_Wa_w0_R = ( mbist_Wa_w0_X0 & mbist_Wa_w0_R0 ) | ( mbist_Wa_w0_X1 & mbist_Wa_w0_R1 );
  assign Wa_reg_w0_A_R = ( Wa_reg_w0_A_X0 & Wa_reg_w0_A_R0 ) | ( Wa_reg_w0_A_X1 & Wa_reg_w0_A_R1 ) | ( Wa_reg_w0_A_X2 & Wa_reg_w0_A_R2 );
  assign wa_R = ( wa_X0 & wa_R0 ) | ( wa_X1 & wa_R1 );
  assign muxed_Wa_w0_B_R = ( muxed_Wa_w0_B_X0 & muxed_Wa_w0_B_R0 ) | ( muxed_Wa_w0_B_X1 & muxed_Wa_w0_B_R1 );
  assign muxed_we_w0_B_R = ( muxed_we_w0_B_X0 & muxed_we_w0_B_R0 ) | ( muxed_we_w0_B_X1 & muxed_we_w0_B_R1 );
  assign mbist_Ra_r0_R = ( mbist_Ra_r0_X0 & mbist_Ra_r0_R0 ) | ( mbist_Ra_r0_X1 & mbist_Ra_r0_R1 );
  assign Ra_reg_r0_A_R = ( Ra_reg_r0_A_X0 & Ra_reg_r0_A_R0 ) | ( Ra_reg_r0_A_X1 & Ra_reg_r0_A_R1 ) | ( Ra_reg_r0_A_X2 & Ra_reg_r0_A_R2 );
  assign ra_R = ( ra_X0 & ra_R0 ) | ( ra_X1 & ra_R1 );
  assign muxed_Ra_r0_B_R = ( muxed_Ra_r0_B_X0 & muxed_Ra_r0_B_R0 ) | ( muxed_Ra_r0_B_X1 & muxed_Ra_r0_B_R1 );
  assign muxed_re_r0_B_R = ( muxed_re_r0_B_X0 & muxed_re_r0_B_R0 ) | ( muxed_re_r0_B_X1 & muxed_re_r0_B_R1 );
  assign access_en_r_R = ( access_en_r_X0 & access_en_r_R0 ) | ( access_en_r_X1 & access_en_r_R1 );
  assign _07__R = ( _07__X0 & _07__R0 );
  assign captureDR_r0_R = ( captureDR_r0_X0 & captureDR_r0_R0 );
  assign _11__R = ( _11__X0 & _11__R0 );
  assign ary_atpg_ctl_R = ( ary_atpg_ctl_X0 & ary_atpg_ctl_R0 ) | ( ary_atpg_ctl_X1 & ary_atpg_ctl_R1 ) | ( ary_atpg_ctl_X2 & ary_atpg_ctl_R2 ) | ( ary_atpg_ctl_X3 & ary_atpg_ctl_R3 );
  assign _03__R = ( _03__X0 & _03__R0 );
  assign muxed_re_r0_R = ( muxed_re_r0_X0 & muxed_re_r0_R0 ) | ( muxed_re_r0_X1 & muxed_re_r0_R1 );
  assign write_inh_R = ( write_inh_X0 & write_inh_R0 );
  assign _12__R = ( _12__X0 & _12__R0 );
  assign muxed_re_r0_S_R = ( muxed_re_r0_S_X0 & muxed_re_r0_S_R0 ) | ( muxed_re_r0_S_X1 & muxed_re_r0_S_R1 ) | ( muxed_re_r0_S_X2 & muxed_re_r0_S_R2 ) | ( muxed_re_r0_S_X3 & muxed_re_r0_S_R3 ) | ( muxed_re_r0_S_X4 & muxed_re_r0_S_R4 ) | ( muxed_re_r0_S_X5 & muxed_re_r0_S_R5 ) | ( muxed_re_r0_S_X6 & muxed_re_r0_S_R6 ) | ( muxed_re_r0_S_X7 & muxed_re_r0_S_R7 ) | ( muxed_re_r0_S_X8 & muxed_re_r0_S_R8 ) | ( muxed_re_r0_S_X9 & muxed_re_r0_S_R9 ) | ( muxed_re_r0_S_X10 & muxed_re_r0_S_R10 );
  assign we_R = ( we_X0 & we_R0 ) | ( we_X1 & we_R1 ) | ( we_X2 & we_R2 ) | ( we_X3 & we_R3 );
  assign re_R = ( re_X0 & re_R0 ) | ( re_X1 & re_R1 ) | ( re_X2 & re_R2 ) | ( re_X3 & re_R3 );
  assign ary_read_inh_R = ( ary_read_inh_X0 & ary_read_inh_R0 );
  assign scan_ramtms_R = ( scan_ramtms_X0 & scan_ramtms_R0 );
  assign muxed_we_w0_R = ( muxed_we_w0_X0 & muxed_we_w0_R0 ) | ( muxed_we_w0_X1 & muxed_we_w0_R1 );
  assign _16__R = ( _16__X0 & _16__R0 );
  assign _05__R = ( _05__X0 & _05__R0 );
  assign web_R = ( web_X0 & web_R0 );
  assign updateDR_sync_1p_R = ( updateDR_sync_1p_X0 & updateDR_sync_1p_R0 );
  assign shiftDR_R = ( shiftDR_X0 & shiftDR_R0 ) | ( shiftDR_X1 & shiftDR_R1 ) | ( shiftDR_X2 & shiftDR_R2 ) | ( shiftDR_X3 & shiftDR_R3 ) | ( shiftDR_X4 & shiftDR_R4 ) | ( shiftDR_X5 & shiftDR_R5 ) | ( shiftDR_X6 & shiftDR_R6 );
  assign debug_mode_sync_R = ( debug_mode_sync_X0 & debug_mode_sync_R0 ) | ( debug_mode_sync_X1 & debug_mode_sync_R1 ) | ( debug_mode_sync_X2 & debug_mode_sync_R2 ) | ( debug_mode_sync_X3 & debug_mode_sync_R3 ) | ( debug_mode_sync_X4 & debug_mode_sync_R4 ) | ( debug_mode_sync_X5 & debug_mode_sync_R5 ) | ( debug_mode_sync_X6 & debug_mode_sync_R6 ) | ( debug_mode_sync_X7 & debug_mode_sync_R7 ) | ( debug_mode_sync_X8 & debug_mode_sync_R8 ) | ( debug_mode_sync_X9 & debug_mode_sync_R9 );
  assign mbist_ce_r0_1p_R = ( mbist_ce_r0_1p_X0 & mbist_ce_r0_1p_R0 );
  assign pre_muxed_Di_w0_S_R = ( pre_muxed_Di_w0_S_X0 & pre_muxed_Di_w0_S_R0 ) | ( pre_muxed_Di_w0_S_X1 & pre_muxed_Di_w0_S_R1 ) | ( pre_muxed_Di_w0_S_X2 & pre_muxed_Di_w0_S_R2 );
  assign _04__R = ( _04__X0 & _04__R0 );
  assign _10__R = ( _10__X0 & _10__R0 );
  assign ore_R = ( ore_X0 & ore_R0 );
  assign jtag_readonly_mode_R = ( jtag_readonly_mode_X0 & jtag_readonly_mode_R0 );
  assign scan_en_R = ( scan_en_X0 & scan_en_R0 ) | ( scan_en_X1 & scan_en_R1 ) | ( scan_en_X2 & scan_en_R2 ) | ( scan_en_X3 & scan_en_R3 ) | ( scan_en_X4 & scan_en_R4 ) | ( scan_en_X5 & scan_en_R5 );
  assign mbist_ce_r0_R = ( mbist_ce_r0_X0 & mbist_ce_r0_R0 ) | ( mbist_ce_r0_X1 & mbist_ce_r0_R1 );
  assign re_q_R = ( re_q_X0 & re_q_R0 ) | ( re_q_X1 & re_q_R1 );
  assign mbist_we_w0_R = ( mbist_we_w0_X0 & mbist_we_w0_R0 );
  assign mbist_en_r_R = ( mbist_en_r_X0 & mbist_en_r_R0 ) | ( mbist_en_r_X1 & mbist_en_r_R1 ) | ( mbist_en_r_X2 & mbist_en_r_R2 ) | ( mbist_en_r_X3 & mbist_en_r_R3 ) | ( mbist_en_r_X4 & mbist_en_r_R4 ) | ( mbist_en_r_X5 & mbist_en_r_R5 );
  assign we_q_R = ( we_q_X0 & we_q_R0 ) | ( we_q_X1 & we_q_R1 );
  assign posedge_updateDR_sync_R = ( posedge_updateDR_sync_X0 & posedge_updateDR_sync_R0 ) | ( posedge_updateDR_sync_X1 & posedge_updateDR_sync_R1 ) | ( posedge_updateDR_sync_X2 & posedge_updateDR_sync_R2 );
  assign _08__R = ( _08__X0 & _08__R0 );
  assign updateDR_sync_R = ( updateDR_sync_X0 & updateDR_sync_R0 ) | ( updateDR_sync_X1 & updateDR_sync_R1 );
  assign mbist_Do_r0_int_net_R = ( mbist_Do_r0_int_net_X0 & mbist_Do_r0_int_net_R0 );
  assign dout_R = ( dout_X0 & dout_R0 );
  assign SO_int_net_R = ( SO_int_net_X0 & SO_int_net_R0 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { D_Ra_reg_r0_R , D_Ra_reg_r0_C , D_Ra_reg_r0_X , Data_reg_r0_R , Data_reg_r0_C , Data_reg_r0_X , Ra_reg_r0_R , Ra_reg_r0_C , Ra_reg_r0_X , Ra_reg_r0_B_R , Ra_reg_r0_B_C , Ra_reg_r0_B_X , Ra_reg_r0_S_R , Ra_reg_r0_S_C , Ra_reg_r0_S_X , Wa_reg_w0_R , Wa_reg_w0_C , Wa_reg_w0_X , Wa_reg_w0_B_R , Wa_reg_w0_B_C , Wa_reg_w0_B_X , Wa_reg_w0_S_R , Wa_reg_w0_S_C , Wa_reg_w0_S_X , access_en_w_R , access_en_w_C , access_en_w_X , dft_capdr_r_R , dft_capdr_r_C , dft_capdr_r_X , dft_capdr_w_R , dft_capdr_w_C , dft_capdr_w_X , la_bist_clkw0_R , la_bist_clkw0_C , la_bist_clkw0_X , muxed_Di_w0_R , muxed_Di_w0_C , muxed_Di_w0_X , muxed_Di_w0_A_R , muxed_Di_w0_A_C , muxed_Di_w0_A_X , muxed_Di_w0_S_R , muxed_Di_w0_S_C , muxed_Di_w0_S_X , muxed_Ra_r0_A_R , muxed_Ra_r0_A_C , muxed_Ra_r0_A_X , muxed_Ra_r0_S_R , muxed_Ra_r0_S_C , muxed_Ra_r0_S_X , muxed_Wa_w0_A_R , muxed_Wa_w0_A_C , muxed_Wa_w0_A_X , muxed_Wa_w0_S_R , muxed_Wa_w0_S_C , muxed_Wa_w0_S_X , muxed_re_r0_A_R , muxed_re_r0_A_C , muxed_re_r0_A_X , muxed_we_w0_A_R , muxed_we_w0_A_C , muxed_we_w0_A_X , muxed_we_w0_S_R , muxed_we_w0_S_C , muxed_we_w0_S_X , pre_Ra_reg_r0_R , pre_Ra_reg_r0_C , pre_Ra_reg_r0_X , pre_Wa_reg_w0_R , pre_Wa_reg_w0_C , pre_Wa_reg_w0_X , pre_muxed_Di_w0_R , pre_muxed_Di_w0_C , pre_muxed_Di_w0_X , pre_muxed_Di_w0_A_R , pre_muxed_Di_w0_A_C , pre_muxed_Di_w0_A_X , pre_muxed_Di_w0_B_R , pre_muxed_Di_w0_B_C , pre_muxed_Di_w0_B_X , pre_re_r0_R , pre_re_r0_C , pre_re_r0_X , pre_we_w0_R , pre_we_w0_C , pre_we_w0_X , ra_0_0_R , ra_0_0_C , ra_0_0_X , radr_q_R , radr_q_C , radr_q_X , ramDataOut_R , ramDataOut_C , ramDataOut_X , ram_r0_OutputMuxDataOut_R , ram_r0_OutputMuxDataOut_C , ram_r0_OutputMuxDataOut_X , re_0_0_R , re_0_0_C , re_0_0_X , re_reg_r0_R , re_reg_r0_C , re_reg_r0_X , ret_en_R , ret_en_C , ret_en_X , sleep_en_R , sleep_en_C , sleep_en_X , wa_0_0_R , wa_0_0_C , wa_0_0_X , wadr_q_R , wadr_q_C , wadr_q_X , we_0_0_R , we_0_0_C , we_0_0_X , we_reg_w0_R , we_reg_w0_C , we_reg_w0_X  } = 0;
  always @( posedge la_bist_clkr0 ) begin
    if( !mbist_ramaccess_rst_ ) mbist_ce_r0_1p_PREV_VAL1 <= 0 ;
    if( !mbist_ramaccess_rst_ ) mbist_ce_r0_1p_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) mbist_ce_r0_1p_PREV_VAL1 <= mbist_ce_r0_1p ;
    if( INSTR_IN_ZY ) mbist_ce_r0_1p_PREV_VAL2 <= mbist_ce_r0_1p_PREV_VAL1 ;
  end
  always @( posedge la_bist_clkr0 ) begin
    if( !mbist_ramaccess_rst_ ) access_en_r_1p_PREV_VAL1 <= 0 ;
    if( !mbist_ramaccess_rst_ ) access_en_r_1p_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) access_en_r_1p_PREV_VAL1 <= access_en_r_1p ;
    if( INSTR_IN_ZY ) access_en_r_1p_PREV_VAL2 <= access_en_r_1p_PREV_VAL1 ;
  end
  always @( posedge la_bist_clkr0 ) begin
    if( !mbist_ramaccess_rst_ ) updateDR_sync_1p_PREV_VAL1 <= 0 ;
    if( !mbist_ramaccess_rst_ ) updateDR_sync_1p_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) updateDR_sync_1p_PREV_VAL1 <= updateDR_sync_1p ;
    if( INSTR_IN_ZY ) updateDR_sync_1p_PREV_VAL2 <= updateDR_sync_1p_PREV_VAL1 ;
  end
 // ground taints for unused wire slices
  assign { pwrbus_ram_pd_R1 [31:9] } = 0;
  assign { pwrbus_ram_pd_X1 [31:9] } = 0;
  assign { pwrbus_ram_pd_C1 [31:9] } = 0;
  assert property( access_en_r_1p_r_flag == 0 || access_en_r_1p_PREV_VAL1 == access_en_r_1p_PREV_VAL2 );
  assert property( mbist_ce_r0_1p_r_flag == 0 || mbist_ce_r0_1p_PREV_VAL1 == mbist_ce_r0_1p_PREV_VAL2 );
  assert property( updateDR_sync_1p_r_flag == 0 || updateDR_sync_1p_PREV_VAL1 == updateDR_sync_1p_PREV_VAL2 );
  assign rst_zy = !mbist_ramaccess_rst_ ;
endmodule
