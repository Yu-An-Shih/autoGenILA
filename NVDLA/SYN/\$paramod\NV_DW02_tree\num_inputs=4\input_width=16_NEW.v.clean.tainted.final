module \$paramod\NV_DW02_tree\num_inputs=4\input_width=16 ( INPUT , INSTR_IN_ZY , rst_zy , INPUT_T , INPUT_S , OUT0_R0 , OUT1_R0 , OUT0 , OUT1 , INPUT_R , OUT0_T , OUT0_S , OUT1_T , OUT1_S );
  input rst_zy;
  integer i;
  input INSTR_IN_ZY;
  logic [14:0] _00_;
  logic [14:0] _00__T ;
  logic [14:0] _00__R ;
  logic [13:0] _00__S ;
  logic [15:0] _01_;
  logic [15:0] _01__T ;
  logic [15:0] _01__R ;
  logic [13:0] _01__S ;
  logic [15:0] _02_;
  logic [15:0] _02__T ;
  logic [15:0] _02__R ;
  logic [13:0] _02__S ;
  logic [15:0] _03_;
  logic [15:0] _03__T ;
  logic [15:0] _03__R ;
  logic [13:0] _03__S ;
  logic [15:0] _04_;
  logic [15:0] _04__T ;
  logic [15:0] _04__R ;
  logic [13:0] _04__S ;
  logic [15:0] _05_;
  logic [15:0] _05__T ;
  logic [15:0] _05__R ;
  logic [13:0] _05__S ;
  logic [15:0] _06_;
  logic [15:0] _06__T ;
  logic [15:0] _06__R ;
  logic [13:0] _06__S ;
  logic [15:0] _07_;
  logic [15:0] _07__T ;
  logic [15:0] _07__R ;
  logic [13:0] _07__S ;
  logic [15:0] _08_;
  logic [15:0] _08__T ;
  logic [15:0] _08__R ;
  logic [13:0] _08__S ;
  logic [15:0] _09_;
  logic [15:0] _09__T ;
  logic [15:0] _09__R ;
  logic [13:0] _09__S ;
  logic [15:0] _10_;
  logic [15:0] _10__T ;
  logic [15:0] _10__R ;
  logic [13:0] _10__S ;
  logic [15:0] _11_;
  logic [15:0] _11__T ;
  logic [15:0] _11__R ;
  logic [13:0] _11__S ;
  input [63:0] INPUT;
  input [63:0] INPUT_T ;
  output [63:0] INPUT_R ;
  input [13:0] INPUT_S ;
  output [15:0] OUT0;
  logic [15:0] OUT0 ;
  output [15:0] OUT0_T ;
  logic [15:0] OUT0_T ;
  logic [15:0] OUT0_R ;
  logic [13:0] OUT0_S ;
  input [15:0] OUT0_R0 ;
  output [13:0] OUT0_S ;
  output [15:0] OUT1;
  logic [15:0] OUT1 ;
  output [15:0] OUT1_T ;
  logic [15:0] OUT1_T ;
  logic [15:0] OUT1_R ;
  logic [13:0] OUT1_S ;
  input [15:0] OUT1_R0 ;
  output [13:0] OUT1_S ;
  logic [31:0] i;
  logic [31:0] i_T ;
  logic [31:0] i_R ;
  logic [13:0] i_S ;
  logic [15:0] \input_array[0] ;
  logic [15:0] \input_array[0]_T ;
  logic [15:0] \input_array[0]_R ;
  logic [13:0] \input_array[0]_S ;
  logic [15:0] \input_array[1] ;
  logic [15:0] \input_array[1]_T ;
  logic [15:0] \input_array[1]_R ;
  logic [13:0] \input_array[1]_S ;
  logic [15:0] \input_array[2] ;
  logic [15:0] \input_array[2]_T ;
  logic [15:0] \input_array[2]_R ;
  logic [13:0] \input_array[2]_S ;
  logic [15:0] input_slice;
  logic [15:0] input_slice_T ;
  logic [15:0] input_slice_R ;
  logic [13:0] input_slice_S ;
  logic [31:0] j;
  logic [31:0] j_T ;
  logic [31:0] j_R ;
  logic [13:0] j_S ;
  logic [31:0] num_in;
  logic [31:0] num_in_T ;
  logic [31:0] num_in_R ;
  logic [13:0] num_in_S ;
  logic [15:0] \temp_array[0] ;
  logic [15:0] \temp_array[0]_T ;
  logic [15:0] \temp_array[0]_R ;
  logic [13:0] \temp_array[0]_S ;
  logic [15:0] \temp_array[1] ;
  logic [15:0] \temp_array[1]_T ;
  logic [15:0] \temp_array[1]_R ;
  logic [13:0] \temp_array[1]_S ;
  logic [15:0] \temp_array[2] ;
  logic [15:0] \temp_array[2]_T ;
  logic [15:0] \temp_array[2]_R ;
  logic [13:0] \temp_array[2]_S ;
  assign _00_ = INPUT[14:0] & INPUT[30:16];
  assign _00__S = 0 ;
  logic [63:0] INPUT_R0 ;
  assign _00__T = ( INPUT_T [14:0] & INPUT[30:16] ) | ( INPUT_T [30:16] & INPUT[14:0] ) ;
  assign INPUT_R0 [14:0] = _00__R & { 15{ INPUT[30:16] != 0 }} ;
  assign INPUT_R0 [30:16] = _00__R & { 15{ INPUT[14:0] != 0 }} ;
  assign _01_[14:0] = INPUT[30:16] & INPUT[46:32];
  assign _01__S = 0 ;
  assign { INPUT_R0 [15], INPUT_R0 [63:31] } = 0;
  logic [63:0] INPUT_R1 ;
  assign _01__T [14:0] = ( INPUT_T [30:16] & INPUT[46:32] ) | ( INPUT_T [46:32] & INPUT[30:16] ) ;
  assign INPUT_R1 [30:16] = _01__R [14:0] & { 15{ INPUT[46:32] != 0 }} ;
  assign INPUT_R1 [46:32] = _01__R [14:0] & { 15{ INPUT[30:16] != 0 }} ;
  assign _02_[14:0] = INPUT[14:0] & INPUT[46:32];
  assign _02__S = 0 ;
  assign { INPUT_R1 [15], INPUT_R1 [31], INPUT_R1 [63:47] } = 0;
  logic [63:0] INPUT_R2 ;
  assign _02__T [14:0] = ( INPUT_T [14:0] & INPUT[46:32] ) | ( INPUT_T [46:32] & INPUT[14:0] ) ;
  assign INPUT_R1 [14:0] = _02__R [14:0] & { 15{ INPUT[46:32] != 0 }} ;
  assign INPUT_R2 [46:32] = _02__R [14:0] & { 15{ INPUT[14:0] != 0 }} ;
  logic [14:0] fangyuan0;
  logic [14:0] fangyuan0_T ;
  logic [14:0] fangyuan0_R ;
  assign fangyuan0 = { _07_[13:0], 1'b0 };
  assign fangyuan0_T = {  _07__T [13:0] , 1'h0  };
  logic [13:0] fangyuan0_S ;
  assign fangyuan0_S = 0 ;
  logic [15:0] _07__R0 ;
  assign _07__R0 [13:0] = fangyuan0_R [14:1] ;
  assign _03_[14:0] = _10_[14:0] & fangyuan0;
  assign _03__S = 0 ;
  logic [15:0] _10__R0 ;
  logic [14:0] fangyuan0_R0 ;
  assign _03__T [14:0] = ( _10__T [14:0] & fangyuan0 ) | ( fangyuan0_T & _10_[14:0] ) ;
  assign _10__R0 [14:0] = _03__R [14:0] & { 15{ fangyuan0 != 0 }} ;
  assign fangyuan0_R0 = _03__R [14:0] & { 15{ _10_[14:0] != 0 }} ;
  logic [14:0] fangyuan1;
  logic [14:0] fangyuan1_T ;
  logic [14:0] fangyuan1_R ;
  assign fangyuan1 = { _07_[13:0], 1'b0 };
  assign fangyuan1_T = {  _07__T [13:0] , 1'h0  };
  logic [13:0] fangyuan1_S ;
  assign fangyuan1_S = 0 ;
  assign { _07__R0 [15:14] } = 0;
  logic [15:0] _07__R1 ;
  assign _07__R1 [13:0] = fangyuan1_R [14:1] ;
  assign _04_[14:0] = fangyuan1 & INPUT[62:48];
  assign _04__S = 0 ;
  logic [14:0] fangyuan1_R0 ;
  assign _04__T [14:0] = ( fangyuan1_T & INPUT[62:48] ) | ( INPUT_T [62:48] & fangyuan1 ) ;
  assign fangyuan1_R0 = _04__R [14:0] & { 15{ INPUT[62:48] != 0 }} ;
  assign INPUT_R2 [62:48] = _04__R [14:0] & { 15{ fangyuan1 != 0 }} ;
  assign _05_[14:0] = _10_[14:0] & INPUT[62:48];
  assign _05__S = 0 ;
  assign { _10__R0 [15:15] } = 0;
  assign { INPUT_R2 [0], INPUT_R2 [1], INPUT_R2 [2], INPUT_R2 [3], INPUT_R2 [4], INPUT_R2 [5], INPUT_R2 [6], INPUT_R2 [7], INPUT_R2 [8], INPUT_R2 [9], INPUT_R2 [10], INPUT_R2 [11], INPUT_R2 [12], INPUT_R2 [13], INPUT_R2 [14], INPUT_R2 [15], INPUT_R2 [16], INPUT_R2 [17], INPUT_R2 [18], INPUT_R2 [19], INPUT_R2 [20], INPUT_R2 [21], INPUT_R2 [22], INPUT_R2 [23], INPUT_R2 [24], INPUT_R2 [25], INPUT_R2 [26], INPUT_R2 [27], INPUT_R2 [28], INPUT_R2 [29], INPUT_R2 [30], INPUT_R2 [31], INPUT_R2 [47], INPUT_R2 [63:63] } = 0;
  logic [15:0] _10__R1 ;
  logic [63:0] INPUT_R3 ;
  assign _05__T [14:0] = ( _10__T [14:0] & INPUT[62:48] ) | ( INPUT_T [62:48] & _10_[14:0] ) ;
  assign _10__R1 [14:0] = _05__R [14:0] & { 15{ INPUT[62:48] != 0 }} ;
  assign INPUT_R3 [62:48] = _05__R [14:0] & { 15{ _10_[14:0] != 0 }} ;
  assign _06_[14:0] = _00_ | _01_[14:0];
  assign _06__S = 0 ;
  logic [14:0] _00__R0 ;
  logic [15:0] _01__R0 ;
  assign _06__T [14:0] = ( _00__T & ~_01_[14:0] ) | ( _01__T [14:0] & ~_00_ ) ;
  assign _00__R0 = _06__R [14:0] & { 15{ _01_[14:0] != 15'b111111111111111 }} ;
  assign _01__R0 [14:0] = _06__R [14:0] & { 15{ _00_ != 15'b111111111111111 }} ;
  assign _07_[14:0] = _06_[14:0] | _02_[14:0];
  assign _07__S = 0 ;
  logic [15:0] _06__R0 ;
  logic [15:0] _02__R0 ;
  assign _07__T [14:0] = ( _06__T [14:0] & ~_02_[14:0] ) | ( _02__T [14:0] & ~_06_[14:0] ) ;
  assign _06__R0 [14:0] = _07__R [14:0] & { 15{ _02_[14:0] != 15'b111111111111111 }} ;
  assign _02__R0 [14:0] = _07__R [14:0] & { 15{ _06_[14:0] != 15'b111111111111111 }} ;
  assign _08_[14:0] = _03_[14:0] | _04_[14:0];
  assign _08__S = 0 ;
  logic [15:0] _03__R0 ;
  logic [15:0] _04__R0 ;
  assign _08__T [14:0] = ( _03__T [14:0] & ~_04_[14:0] ) | ( _04__T [14:0] & ~_03_[14:0] ) ;
  assign _03__R0 [14:0] = _08__R [14:0] & { 15{ _04_[14:0] != 15'b111111111111111 }} ;
  assign _04__R0 [14:0] = _08__R [14:0] & { 15{ _03_[14:0] != 15'b111111111111111 }} ;
  assign OUT1[15:1] = _08_[14:0] | _05_[14:0];
  assign OUT1_S = 0 ;
  logic [15:0] _08__R0 ;
  logic [15:0] _05__R0 ;
  assign OUT1_T [15:1] = ( _08__T [14:0] & ~_05_[14:0] ) | ( _05__T [14:0] & ~_08_[14:0] ) ;
  assign _08__R0 [14:0] = OUT1_R [15:1] & { 15{ _05_[14:0] != 15'b111111111111111 }} ;
  assign _05__R0 [14:0] = OUT1_R [15:1] & { 15{ _08_[14:0] != 15'b111111111111111 }} ;
  assign _09_ = INPUT[15:0] ^ INPUT[31:16];
  assign _09__S = 0 ;
  assign _09__T = INPUT_T [15:0] | INPUT_T [31:16] ;
  assign INPUT_R3 [15:0] = _09__R ;
  assign INPUT_R3 [31:16] = _09__R ;
  assign _10_ = _09_ ^ INPUT[47:32];
  assign _10__S = 0 ;
  logic [15:0] _09__R0 ;
  assign _10__T = _09__T | INPUT_T [47:32] ;
  assign _09__R0 = _10__R ;
  assign INPUT_R3 [47:32] = _10__R ;
  logic [15:0] fangyuan2;
  logic [15:0] fangyuan2_T ;
  logic [15:0] fangyuan2_R ;
  assign fangyuan2 = { _07_[14:0], 1'b0 };
  assign fangyuan2_T = {  _07__T [14:0] , 1'h0  };
  logic [13:0] fangyuan2_S ;
  assign fangyuan2_S = 0 ;
  assign { _07__R1 [15:14] } = 0;
  logic [15:0] _07__R2 ;
  assign _07__R2 [14:0] = fangyuan2_R [15:1] ;
  assign _11_ = _10_ ^ fangyuan2;
  assign _11__S = 0 ;
  assign { _10__R1 [15:15] } = 0;
  logic [15:0] _10__R2 ;
  logic [15:0] fangyuan2_R0 ;
  assign _11__T = _10__T | fangyuan2_T ;
  assign _10__R2 = _11__R ;
  assign fangyuan2_R0 = _11__R ;
  assign OUT0 = _11_ ^ INPUT[63:48];
  assign OUT0_S = 0 ;
  assign { INPUT_R3 [63:63] } = 0;
  logic [15:0] _11__R0 ;
  logic [63:0] INPUT_R4 ;
  assign OUT0_T = _11__T | INPUT_T [63:48] ;
  assign _11__R0 = OUT0_R ;
  assign INPUT_R4 [63:48] = OUT0_R ;
  assign OUT1[0] = 1'b0;
  assign OUT1_T [0] = 0 ;
  assign OUT1_S = 14'b1 ;
  assign i = 32'd3;
  assign i_T = 0 ;
  assign i_S = 14'b1 ;
  assign \input_array[0] = OUT0;
  logic [15:0] OUT0_R1 ;
  assign \input_array[0]_T = OUT0_T ;
  assign OUT0_R1 = \input_array[0]_R ;
  assign \input_array[0]_S = OUT0_S ;
  assign \input_array[1] = { OUT1[15:1], 1'b0 };
  assign \input_array[1]_T = {  OUT1_T [15:1] , 1'h0  };
  logic [13:0] \input_array[1]_S ;
  assign \input_array[1]_S = 0 ;
  logic [15:0] OUT1_R1 ;
  assign OUT1_R1 [15:1] = \input_array[1]_R [15:1] ;
  assign \input_array[2] = INPUT[63:48];
  assign { INPUT_R4 [0], INPUT_R4 [1], INPUT_R4 [2], INPUT_R4 [3], INPUT_R4 [4], INPUT_R4 [5], INPUT_R4 [6], INPUT_R4 [7], INPUT_R4 [8], INPUT_R4 [9], INPUT_R4 [10], INPUT_R4 [11], INPUT_R4 [12], INPUT_R4 [13], INPUT_R4 [14], INPUT_R4 [15], INPUT_R4 [16], INPUT_R4 [17], INPUT_R4 [18], INPUT_R4 [19], INPUT_R4 [20], INPUT_R4 [21], INPUT_R4 [22], INPUT_R4 [23], INPUT_R4 [24], INPUT_R4 [25], INPUT_R4 [26], INPUT_R4 [27], INPUT_R4 [28], INPUT_R4 [29], INPUT_R4 [30], INPUT_R4 [31], INPUT_R4 [32], INPUT_R4 [33], INPUT_R4 [34], INPUT_R4 [35], INPUT_R4 [36], INPUT_R4 [37], INPUT_R4 [38], INPUT_R4 [39], INPUT_R4 [40], INPUT_R4 [41], INPUT_R4 [42], INPUT_R4 [43], INPUT_R4 [44], INPUT_R4 [45], INPUT_R4 [46], INPUT_R4 [47] } = 0;
  logic [63:0] INPUT_R5 ;
  assign \input_array[2]_T = INPUT_T [63:48] ;
  assign INPUT_R5 [63:48] = \input_array[2]_R ;
  assign \input_array[2]_S = INPUT_S ;
  assign input_slice = INPUT[63:48];
  assign { INPUT_R5 [0], INPUT_R5 [1], INPUT_R5 [2], INPUT_R5 [3], INPUT_R5 [4], INPUT_R5 [5], INPUT_R5 [6], INPUT_R5 [7], INPUT_R5 [8], INPUT_R5 [9], INPUT_R5 [10], INPUT_R5 [11], INPUT_R5 [12], INPUT_R5 [13], INPUT_R5 [14], INPUT_R5 [15], INPUT_R5 [16], INPUT_R5 [17], INPUT_R5 [18], INPUT_R5 [19], INPUT_R5 [20], INPUT_R5 [21], INPUT_R5 [22], INPUT_R5 [23], INPUT_R5 [24], INPUT_R5 [25], INPUT_R5 [26], INPUT_R5 [27], INPUT_R5 [28], INPUT_R5 [29], INPUT_R5 [30], INPUT_R5 [31], INPUT_R5 [32], INPUT_R5 [33], INPUT_R5 [34], INPUT_R5 [35], INPUT_R5 [36], INPUT_R5 [37], INPUT_R5 [38], INPUT_R5 [39], INPUT_R5 [40], INPUT_R5 [41], INPUT_R5 [42], INPUT_R5 [43], INPUT_R5 [44], INPUT_R5 [45], INPUT_R5 [46], INPUT_R5 [47] } = 0;
  logic [63:0] INPUT_R6 ;
  assign input_slice_T = INPUT_T [63:48] ;
  assign INPUT_R6 [63:48] = input_slice_R ;
  assign input_slice_S = INPUT_S ;
  assign j = 32'd16;
  assign j_T = 0 ;
  assign j_S = 14'b1 ;
  assign num_in = 32'd2;
  assign num_in_T = 0 ;
  assign num_in_S = 14'b1 ;
  assign \temp_array[0] = OUT0;
  logic [15:0] OUT0_R2 ;
  assign \temp_array[0]_T = OUT0_T ;
  assign OUT0_R2 = \temp_array[0]_R ;
  assign \temp_array[0]_S = OUT0_S ;
  assign \temp_array[1] = { OUT1[15:1], 1'b0 };
  assign \temp_array[1]_T = {  OUT1_T [15:1] , 1'h0  };
  logic [13:0] \temp_array[1]_S ;
  assign \temp_array[1]_S = 0 ;
  assign { OUT1_R1 [0] } = 0;
  logic [15:0] OUT1_R2 ;
  assign OUT1_R2 [15:1] = \temp_array[1]_R [15:1] ;
  assign \temp_array[2] = INPUT[63:48];
  assign { INPUT_R6 [0], INPUT_R6 [1], INPUT_R6 [2], INPUT_R6 [3], INPUT_R6 [4], INPUT_R6 [5], INPUT_R6 [6], INPUT_R6 [7], INPUT_R6 [8], INPUT_R6 [9], INPUT_R6 [10], INPUT_R6 [11], INPUT_R6 [12], INPUT_R6 [13], INPUT_R6 [14], INPUT_R6 [15], INPUT_R6 [16], INPUT_R6 [17], INPUT_R6 [18], INPUT_R6 [19], INPUT_R6 [20], INPUT_R6 [21], INPUT_R6 [22], INPUT_R6 [23], INPUT_R6 [24], INPUT_R6 [25], INPUT_R6 [26], INPUT_R6 [27], INPUT_R6 [28], INPUT_R6 [29], INPUT_R6 [30], INPUT_R6 [31], INPUT_R6 [32], INPUT_R6 [33], INPUT_R6 [34], INPUT_R6 [35], INPUT_R6 [36], INPUT_R6 [37], INPUT_R6 [38], INPUT_R6 [39], INPUT_R6 [40], INPUT_R6 [41], INPUT_R6 [42], INPUT_R6 [43], INPUT_R6 [44], INPUT_R6 [45], INPUT_R6 [46], INPUT_R6 [47] } = 0;
  logic [63:0] INPUT_R7 ;
  assign \temp_array[2]_T = INPUT_T [63:48] ;
  assign INPUT_R7 [63:48] = \temp_array[2]_R ;
  assign \temp_array[2]_S = INPUT_S ;
  assign _11__R = ( _11__R0 );
  assign fangyuan2_R = ( fangyuan2_R0 );
  assign _09__R = ( _09__R0 );
  assign _05__R = ( _05__R0 );
  assign _08__R = ( _08__R0 );
  assign _04__R = ( _04__R0 );
  assign _03__R = ( _03__R0 );
  assign _06__R = ( _06__R0 );
  assign _00__R = ( _00__R0 );
  assign fangyuan1_R = ( fangyuan1_R0 );
  assign fangyuan0_R = ( fangyuan0_R0 );
  assign _02__R = ( _02__R0 );
  assign _10__R = ( _10__R0 ) | ( _10__R1 ) | ( _10__R2 );
  assign _07__R = ( _07__R0 ) | ( _07__R1 ) | ( _07__R2 );
  assign INPUT_R = ( INPUT_R0 ) | ( INPUT_R1 ) | ( INPUT_R2 ) | ( INPUT_R3 ) | ( INPUT_R4 ) | ( INPUT_R5 ) | ( INPUT_R6 ) | ( INPUT_R7 );
  assign OUT1_R = ( OUT1_R0 ) | ( OUT1_R1 ) | ( OUT1_R2 );
  assign _01__R = ( _01__R0 );
  assign OUT0_R = ( OUT0_R0 ) | ( OUT0_R1 ) | ( OUT0_R2 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { \input_array[0]_R , \input_array[1]_R , \input_array[2]_R , \temp_array[0]_R , \temp_array[1]_R , \temp_array[2]_R , i_R , input_slice_R , j_R , num_in_R  } = 0;
 // ground taints for unused wire slices
  assign { _05__R0 [15:15] } = 0;
  assign { _08__R0 [15:15] } = 0;
  assign { _04__R0 [15:15] } = 0;
  assign { _03__R0 [15:15] } = 0;
  assign { _06__R0 [15:15] } = 0;
  assign { _02__R0 [15:15] } = 0;
  assign { _07__R2 [15:15] } = 0;
  assign { INPUT_R7 [0], INPUT_R7 [1], INPUT_R7 [2], INPUT_R7 [3], INPUT_R7 [4], INPUT_R7 [5], INPUT_R7 [6], INPUT_R7 [7], INPUT_R7 [8], INPUT_R7 [9], INPUT_R7 [10], INPUT_R7 [11], INPUT_R7 [12], INPUT_R7 [13], INPUT_R7 [14], INPUT_R7 [15], INPUT_R7 [16], INPUT_R7 [17], INPUT_R7 [18], INPUT_R7 [19], INPUT_R7 [20], INPUT_R7 [21], INPUT_R7 [22], INPUT_R7 [23], INPUT_R7 [24], INPUT_R7 [25], INPUT_R7 [26], INPUT_R7 [27], INPUT_R7 [28], INPUT_R7 [29], INPUT_R7 [30], INPUT_R7 [31], INPUT_R7 [32], INPUT_R7 [33], INPUT_R7 [34], INPUT_R7 [35], INPUT_R7 [36], INPUT_R7 [37], INPUT_R7 [38], INPUT_R7 [39], INPUT_R7 [40], INPUT_R7 [41], INPUT_R7 [42], INPUT_R7 [43], INPUT_R7 [44], INPUT_R7 [45], INPUT_R7 [46], INPUT_R7 [47] } = 0;
  assign { OUT1_R2 [0] } = 0;
  assign { _01__R0 [15:15] } = 0;
endmodule
