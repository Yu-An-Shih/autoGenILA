module \$paramod\FP32_SUB_mgc_shift_bl_v4\width_a=24\signd_a=0\width_s=9\width_z=49 ( a , s , INSTR_IN_ZY , rst_zy , a_T , a_S , s_T , s_S , z_R0 , z , a_R , s_R , z_T , z_S );
  input rst_zy;
  integer i;
  input INSTR_IN_ZY;
  logic [8:0] _0_;
  logic [8:0] _0__T ;
  logic [8:0] _0__R ;
  logic [13:0] _0__S ;
  logic [48:0] _1_;
  logic [48:0] _1__T ;
  logic [48:0] _1__R ;
  logic [13:0] _1__S ;
  logic [48:0] _2_;
  logic [48:0] _2__T ;
  logic [48:0] _2__R ;
  logic [13:0] _2__S ;
  input [23:0] a;
  input [23:0] a_T ;
  output [23:0] a_R ;
  input [13:0] a_S ;
  input [8:0] s;
  input [8:0] s_T ;
  output [8:0] s_R ;
  input [13:0] s_S ;
  output [48:0] z;
  logic [48:0] z ;
  output [48:0] z_T ;
  logic [48:0] z_T ;
  logic [48:0] z_R ;
  logic [13:0] z_S ;
  input [48:0] z_R0 ;
  output [13:0] z_S ;
  assign _0_ = ~ s;
  logic [8:0] s_R0 ;
  assign _0__T = s_T ;
  assign s_R0 = _0__R ;
  assign _0__S = 0 ;
  assign z = s[8] ? _2_ : _1_;
  logic [8:0] s_R1 ;
  assign s_R1 [8] = ( | z_R ) && _2_ != _1_ ;
  assign z_T = s[8] ? ( { 49{ s_T  [8] }} | _2__T ) : ( { 49{ s_T  [8] }} | _1__T );
  assign z_S = s[8] ? _2__S : _1__S ;
  logic [48:0] _2__R0 ;
  assign _2__R0 = { 49{ s[8] }} & ( z_R );
  logic [48:0] _1__R0 ;
  assign _1__R0 = { 49{ !s[8] }} & ( z_R );
  assign _1_ = a <<< s;
  assign _1__S = 0 ;
  assign { s_R1 [0], s_R1 [1], s_R1 [2], s_R1 [3], s_R1 [4], s_R1 [5], s_R1 [6], s_R1 [7] } = 0;
  logic [23:0] a_R0 ;
  logic [8:0] s_R2 ;
  assign _1__T = { 49{ (| a_T ) | (|s_T ) }} ;
  assign a_R0 = { 24{ | _1__R }} ;
  assign s_R2 = { 9{ | _1__R }} ;
  logic [23:0] fangyuan0;
  logic [23:0] fangyuan0_T ;
  logic [23:0] fangyuan0_R ;
  assign fangyuan0 = { 1'b0, a[23:1] };
  assign fangyuan0_T = {  1'h0 , a_T [23:1]  };
  logic [13:0] fangyuan0_S ;
  assign fangyuan0_S = 0 ;
  logic [23:0] a_R1 ;
  assign a_R1 [23:1] = fangyuan0_R [22:0] ;
 assign _2_ = fangyuan0 >>> _0_;
 assign _2__S = 0 ;
 logic [23:0] fangyuan0_R0 ;
 logic [8:0] _0__R0 ;
 assign _2__T = { 49{ (| fangyuan0_T ) | (|_0__T ) }} ;
 assign fangyuan0_R0 = { 24{ | _2__R }} ;
 assign _0__R0 = { 9{ | _2__R }} ;
  assign _0__R = ( _0__R0 );
  assign fangyuan0_R = ( fangyuan0_R0 );
  assign a_R = ( a_R0 ) | ( a_R1 );
  assign _1__R = ( _1__R0 );
  assign _2__R = ( _2__R0 );
  assign s_R = ( s_R0 ) | ( s_R1 ) | ( s_R2 );
  assign z_R = ( z_R0 );
 // ground taints for floating regs
 // ground taints for unused wires
 // ground taints for unused wire slices
  assign { a_R1 [0] } = 0;
endmodule
