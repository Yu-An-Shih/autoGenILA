module \$paramod\nv_ram_rwsthp_19x80_logic\FORCE_CONTENTION_ASSERTION_RESET_ACTIVE=1'1 ( SI , ary_atpg_ctl , ary_read_inh , byp_sel , clk , dbyp , debug_mode , di , iddq_mode , jtag_readonly_mode , mbist_Di_w0 , mbist_Ra_r0 , mbist_Wa_w0 , mbist_ce_r0 , mbist_en_sync , mbist_ramaccess_rst_ , mbist_we_w0 , ore , pwrbus_ram_pd , ra , re , scan_en , scan_ramtms , shiftDR , svop , test_mode , updateDR , wa , we , write_inh , INSTR_IN_ZY , SI_T , SI_S , SO_int_net_R0 , SO_int_net_C0 , SO_int_net_X0 , ary_atpg_ctl_T , ary_atpg_ctl_S , ary_read_inh_T , ary_read_inh_S , byp_sel_T , byp_sel_S , clk_T , clk_S , dbyp_T , dbyp_S , debug_mode_T , debug_mode_S , di_T , di_S , dout_R0 , dout_C0 , dout_X0 , iddq_mode_T , iddq_mode_S , jtag_readonly_mode_T , jtag_readonly_mode_S , mbist_Di_w0_T , mbist_Di_w0_S , mbist_Do_r0_int_net_R0 , mbist_Do_r0_int_net_C0 , mbist_Do_r0_int_net_X0 , mbist_Ra_r0_T , mbist_Ra_r0_S , mbist_Wa_w0_T , mbist_Wa_w0_S , mbist_ce_r0_T , mbist_ce_r0_S , mbist_en_sync_T , mbist_en_sync_S , mbist_ramaccess_rst__T , mbist_ramaccess_rst__S , mbist_we_w0_T , mbist_we_w0_S , ore_T , ore_S , pwrbus_ram_pd_T , pwrbus_ram_pd_S , ra_T , ra_S , re_T , re_S , scan_en_T , scan_en_S , scan_ramtms_T , scan_ramtms_S , shiftDR_T , shiftDR_S , svop_T , svop_S , test_mode_T , test_mode_S , updateDR_T , updateDR_S , wa_T , wa_S , we_T , we_S , write_inh_T , write_inh_S , SO_int_net , dout , mbist_Do_r0_int_net , SI_R , SI_X , SI_C , SO_int_net_T , SO_int_net_S , ary_atpg_ctl_R , ary_atpg_ctl_X , ary_atpg_ctl_C , ary_read_inh_R , ary_read_inh_X , ary_read_inh_C , byp_sel_R , byp_sel_X , byp_sel_C , clk_R , clk_X , clk_C , dbyp_R , dbyp_X , dbyp_C , debug_mode_R , debug_mode_X , debug_mode_C , di_R , di_X , di_C , dout_T , dout_S , iddq_mode_R , iddq_mode_X , iddq_mode_C , jtag_readonly_mode_R , jtag_readonly_mode_X , jtag_readonly_mode_C , mbist_Di_w0_R , mbist_Di_w0_X , mbist_Di_w0_C , mbist_Do_r0_int_net_T , mbist_Do_r0_int_net_S , mbist_Ra_r0_R , mbist_Ra_r0_X , mbist_Ra_r0_C , mbist_Wa_w0_R , mbist_Wa_w0_X , mbist_Wa_w0_C , mbist_ce_r0_R , mbist_ce_r0_X , mbist_ce_r0_C , mbist_en_sync_R , mbist_en_sync_X , mbist_en_sync_C , mbist_ramaccess_rst__R , mbist_ramaccess_rst__X , mbist_ramaccess_rst__C , mbist_we_w0_R , mbist_we_w0_X , mbist_we_w0_C , ore_R , ore_X , ore_C , pwrbus_ram_pd_R , pwrbus_ram_pd_X , pwrbus_ram_pd_C , ra_R , ra_X , ra_C , re_R , re_X , re_C , scan_en_R , scan_en_X , scan_en_C , scan_ramtms_R , scan_ramtms_X , scan_ramtms_C , shiftDR_R , shiftDR_X , shiftDR_C , svop_R , svop_X , svop_C , test_mode_R , test_mode_X , test_mode_C , updateDR_R , updateDR_X , updateDR_C , wa_R , wa_X , wa_C , we_R , we_X , we_C , write_inh_R , write_inh_X , write_inh_C );
  logic rst_zy;
  integer i;
  input INSTR_IN_ZY;
  logic [79:0] _00_;
  logic [79:0] _00__T ;
  logic [79:0] _00__R ;
  logic [79:0] _00__C ;
  logic [79:0] _00__X ;
  logic [13:0] _00__S ;
  logic _01_;
  logic _01__T ;
  logic _01__R ;
  logic _01__C ;
  logic _01__X ;
  logic [13:0] _01__S ;
  logic _02_;
  logic _02__T ;
  logic _02__R ;
  logic _02__C ;
  logic _02__X ;
  logic [13:0] _02__S ;
  logic _03_;
  logic _03__T ;
  logic _03__R ;
  logic _03__C ;
  logic _03__X ;
  logic [13:0] _03__S ;
  logic _04_;
  logic _04__T ;
  logic _04__R ;
  logic _04__C ;
  logic _04__X ;
  logic [13:0] _04__S ;
  logic _05_;
  logic _05__T ;
  logic _05__R ;
  logic _05__C ;
  logic _05__X ;
  logic [13:0] _05__S ;
  logic _06_;
  logic _06__T ;
  logic _06__R ;
  logic _06__C ;
  logic _06__X ;
  logic [13:0] _06__S ;
  logic _07_;
  logic _07__T ;
  logic _07__R ;
  logic _07__C ;
  logic _07__X ;
  logic [13:0] _07__S ;
  logic _08_;
  logic _08__T ;
  logic _08__R ;
  logic _08__C ;
  logic _08__X ;
  logic [13:0] _08__S ;
  logic _09_;
  logic _09__T ;
  logic _09__R ;
  logic _09__C ;
  logic _09__X ;
  logic [13:0] _09__S ;
  logic _10_;
  logic _10__T ;
  logic _10__R ;
  logic _10__C ;
  logic _10__X ;
  logic [13:0] _10__S ;
  logic _11_;
  logic _11__T ;
  logic _11__R ;
  logic _11__C ;
  logic _11__X ;
  logic [13:0] _11__S ;
  logic _12_;
  logic _12__T ;
  logic _12__R ;
  logic _12__C ;
  logic _12__X ;
  logic [13:0] _12__S ;
  logic _13_;
  logic _13__T ;
  logic _13__R ;
  logic _13__C ;
  logic _13__X ;
  logic [13:0] _13__S ;
  logic _14_;
  logic _14__T ;
  logic _14__R ;
  logic _14__C ;
  logic _14__X ;
  logic [13:0] _14__S ;
  logic _15_;
  logic _15__T ;
  logic _15__R ;
  logic _15__C ;
  logic _15__X ;
  logic [13:0] _15__S ;
  logic _16_;
  logic _16__T ;
  logic _16__R ;
  logic _16__C ;
  logic _16__X ;
  logic [13:0] _16__S ;
  logic _17_;
  logic _17__T ;
  logic _17__R ;
  logic _17__C ;
  logic _17__X ;
  logic [13:0] _17__S ;
  logic _18_;
  logic _18__T ;
  logic _18__R ;
  logic _18__C ;
  logic _18__X ;
  logic [13:0] _18__S ;
  logic _19_;
  logic _19__T ;
  logic _19__R ;
  logic _19__C ;
  logic _19__X ;
  logic [13:0] _19__S ;
  logic _20_;
  logic _20__T ;
  logic _20__R ;
  logic _20__C ;
  logic _20__X ;
  logic [13:0] _20__S ;
  logic _21_;
  logic _21__T ;
  logic _21__R ;
  logic _21__C ;
  logic _21__X ;
  logic [13:0] _21__S ;
  logic _22_;
  logic _22__T ;
  logic _22__R ;
  logic _22__C ;
  logic _22__X ;
  logic [13:0] _22__S ;
  logic _23_;
  logic _23__T ;
  logic _23__R ;
  logic _23__C ;
  logic _23__X ;
  logic [13:0] _23__S ;
  logic _24_;
  logic _24__T ;
  logic _24__R ;
  logic _24__C ;
  logic _24__X ;
  logic [13:0] _24__S ;
  logic _25_;
  logic _25__T ;
  logic _25__R ;
  logic _25__C ;
  logic _25__X ;
  logic [13:0] _25__S ;
  logic _26_;
  logic _26__T ;
  logic _26__R ;
  logic _26__C ;
  logic _26__X ;
  logic [13:0] _26__S ;
  logic _27_;
  logic _27__T ;
  logic _27__R ;
  logic _27__C ;
  logic _27__X ;
  logic [13:0] _27__S ;
  logic _28_;
  logic _28__T ;
  logic _28__R ;
  logic _28__C ;
  logic _28__X ;
  logic [13:0] _28__S ;
  logic _29_;
  logic _29__T ;
  logic _29__R ;
  logic _29__C ;
  logic _29__X ;
  logic [13:0] _29__S ;
  logic _30_;
  logic _30__T ;
  logic _30__R ;
  logic _30__C ;
  logic _30__X ;
  logic [13:0] _30__S ;
  logic _31_;
  logic _31__T ;
  logic _31__R ;
  logic _31__C ;
  logic _31__X ;
  logic [13:0] _31__S ;
  logic _32_;
  logic _32__T ;
  logic _32__R ;
  logic _32__C ;
  logic _32__X ;
  logic [13:0] _32__S ;
  logic _33_;
  logic _33__T ;
  logic _33__R ;
  logic _33__C ;
  logic _33__X ;
  logic [13:0] _33__S ;
  logic _34_;
  logic _34__T ;
  logic _34__R ;
  logic _34__C ;
  logic _34__X ;
  logic [13:0] _34__S ;
  logic [4:0] D_Ra_reg_r0;
  logic [4:0] D_Ra_reg_r0_T ;
  logic [4:0] D_Ra_reg_r0_R ;
  logic [4:0] D_Ra_reg_r0_C ;
  logic [4:0] D_Ra_reg_r0_X ;
  logic [13:0] D_Ra_reg_r0_S ;
  logic Data_reg_SO_r0;
  logic Data_reg_SO_r0_T ;
  logic Data_reg_SO_r0_R ;
  logic Data_reg_SO_r0_C ;
  logic Data_reg_SO_r0_X ;
  logic [13:0] Data_reg_SO_r0_S ;
  logic [79:0] Data_reg_r0;
  logic [79:0] Data_reg_r0_T ;
  logic [79:0] Data_reg_r0_R ;
  logic [79:0] Data_reg_r0_C ;
  logic [79:0] Data_reg_r0_X ;
  logic [13:0] Data_reg_r0_S ;
  logic Ra_reg_SO_r0;
  logic Ra_reg_SO_r0_T ;
  logic Ra_reg_SO_r0_R ;
  logic Ra_reg_SO_r0_C ;
  logic Ra_reg_SO_r0_X ;
  logic [13:0] Ra_reg_SO_r0_S ;
  logic [4:0] Ra_reg_r0;
  logic [4:0] Ra_reg_r0_T ;
  logic [4:0] Ra_reg_r0_R ;
  logic [4:0] Ra_reg_r0_C ;
  logic [4:0] Ra_reg_r0_X ;
  logic [13:0] Ra_reg_r0_S ;
  logic [4:0] Ra_reg_r0_A;
  logic [4:0] Ra_reg_r0_A_T ;
  logic [4:0] Ra_reg_r0_A_R ;
  logic [4:0] Ra_reg_r0_A_C ;
  logic [4:0] Ra_reg_r0_A_X ;
  logic [13:0] Ra_reg_r0_A_S ;
  logic [4:0] Ra_reg_r0_B;
  logic [4:0] Ra_reg_r0_B_T ;
  logic [4:0] Ra_reg_r0_B_R ;
  logic [4:0] Ra_reg_r0_B_C ;
  logic [4:0] Ra_reg_r0_B_X ;
  logic [13:0] Ra_reg_r0_B_S ;
  logic Ra_reg_r0_S;
  logic Ra_reg_r0_S_T ;
  logic Ra_reg_r0_S_R ;
  logic Ra_reg_r0_S_C ;
  logic Ra_reg_r0_S_X ;
  logic [13:0] Ra_reg_r0_S_S ;
  input SI;
  input SI_T ;
  input [13:0] SI_S ;
  output SI_R ;
  output SI_X ;
  output SI_C ;
  output SO_int_net;
  logic SO_int_net ;
  output SO_int_net_T ;
  logic SO_int_net_T ;
  logic SO_int_net_R ;
  logic SO_int_net_C ;
  logic SO_int_net_X ;
  logic [13:0] SO_int_net_S ;
  input SO_int_net_R0 ;
  input SO_int_net_C0 ;
  input SO_int_net_X0 ;
  output [13:0] SO_int_net_S ;
  logic Wa_reg_SO_w0;
  logic Wa_reg_SO_w0_T ;
  logic Wa_reg_SO_w0_R ;
  logic Wa_reg_SO_w0_C ;
  logic Wa_reg_SO_w0_X ;
  logic [13:0] Wa_reg_SO_w0_S ;
  logic [4:0] Wa_reg_w0;
  logic [4:0] Wa_reg_w0_T ;
  logic [4:0] Wa_reg_w0_R ;
  logic [4:0] Wa_reg_w0_C ;
  logic [4:0] Wa_reg_w0_X ;
  logic [13:0] Wa_reg_w0_S ;
  logic [4:0] Wa_reg_w0_A;
  logic [4:0] Wa_reg_w0_A_T ;
  logic [4:0] Wa_reg_w0_A_R ;
  logic [4:0] Wa_reg_w0_A_C ;
  logic [4:0] Wa_reg_w0_A_X ;
  logic [13:0] Wa_reg_w0_A_S ;
  logic [4:0] Wa_reg_w0_B;
  logic [4:0] Wa_reg_w0_B_T ;
  logic [4:0] Wa_reg_w0_B_R ;
  logic [4:0] Wa_reg_w0_B_C ;
  logic [4:0] Wa_reg_w0_B_X ;
  logic [13:0] Wa_reg_w0_B_S ;
  logic Wa_reg_w0_S;
  logic Wa_reg_w0_S_T ;
  logic Wa_reg_w0_S_R ;
  logic Wa_reg_w0_S_C ;
  logic Wa_reg_w0_S_X ;
  logic [13:0] Wa_reg_w0_S_S ;
  logic [79:0] Wdata;
  logic [79:0] Wdata_T ;
  logic [79:0] Wdata_R ;
  logic [79:0] Wdata_C ;
  logic [79:0] Wdata_X ;
  logic [13:0] Wdata_S ;
  logic access_en_r;
  logic access_en_r_T ;
  logic access_en_r_R ;
  logic access_en_r_C ;
  logic access_en_r_X ;
  logic [13:0] access_en_r_S ;
  logic access_en_r_1p;
  logic  access_en_r_1p_T ;
  logic  access_en_r_1p_PREV_VAL1 ;
  logic  access_en_r_1p_PREV_VAL2 ;
  logic  access_en_r_1p_R ;
  logic  access_en_r_1p_X ;
  logic  access_en_r_1p_C ;
  logic [13:0] access_en_r_1p_S ;
  logic access_en_r_1p_t_flag ;
  logic access_en_r_1p_r_flag ;
  assign access_en_r_1p_S = 180 ;
  logic access_en_w;
  logic access_en_w_T ;
  logic access_en_w_R ;
  logic access_en_w_C ;
  logic access_en_w_X ;
  logic [13:0] access_en_w_S ;
  input ary_atpg_ctl;
  input ary_atpg_ctl_T ;
  input [13:0] ary_atpg_ctl_S ;
  output ary_atpg_ctl_R ;
  output ary_atpg_ctl_X ;
  output ary_atpg_ctl_C ;
  input ary_read_inh;
  input ary_read_inh_T ;
  input [13:0] ary_read_inh_S ;
  output ary_read_inh_R ;
  output ary_read_inh_X ;
  output ary_read_inh_C ;
  input byp_sel;
  input byp_sel_T ;
  input [13:0] byp_sel_S ;
  output byp_sel_R ;
  output byp_sel_X ;
  output byp_sel_C ;
  logic captureDR_r0;
  logic captureDR_r0_T ;
  logic captureDR_r0_R ;
  logic captureDR_r0_C ;
  logic captureDR_r0_X ;
  logic [13:0] captureDR_r0_S ;
  input clk;
  input clk_T ;
  input [13:0] clk_S ;
  output clk_R ;
  output clk_X ;
  output clk_C ;
  logic clk_en_core;
  logic clk_en_core_T ;
  logic clk_en_core_R ;
  logic clk_en_core_C ;
  logic clk_en_core_X ;
  logic [13:0] clk_en_core_S ;
  logic [79:0] data_regq;
  logic [79:0] data_regq_T ;
  logic [79:0] data_regq_R ;
  logic [79:0] data_regq_C ;
  logic [79:0] data_regq_X ;
  logic [13:0] data_regq_S ;
  input [79:0] dbyp;
  input [79:0] dbyp_T ;
  input [13:0] dbyp_S ;
  output [79:0] dbyp_R ;
  output [79:0] dbyp_X ;
  output [79:0] dbyp_C ;
  input debug_mode;
  input debug_mode_T ;
  input [13:0] debug_mode_S ;
  output debug_mode_R ;
  output debug_mode_X ;
  output debug_mode_C ;
  logic debug_mode_sync;
  logic debug_mode_sync_T ;
  logic debug_mode_sync_R ;
  logic debug_mode_sync_C ;
  logic debug_mode_sync_X ;
  logic [13:0] debug_mode_sync_S ;
  logic dft_capdr_r;
  logic dft_capdr_r_T ;
  logic dft_capdr_r_R ;
  logic dft_capdr_r_C ;
  logic dft_capdr_r_X ;
  logic [13:0] dft_capdr_r_S ;
  logic dft_capdr_w;
  logic dft_capdr_w_T ;
  logic dft_capdr_w_R ;
  logic dft_capdr_w_C ;
  logic dft_capdr_w_X ;
  logic [13:0] dft_capdr_w_S ;
  logic dft_rst_gated_clk;
  logic dft_rst_gated_clk_T ;
  logic dft_rst_gated_clk_R ;
  logic dft_rst_gated_clk_C ;
  logic dft_rst_gated_clk_X ;
  logic [13:0] dft_rst_gated_clk_S ;
  input [79:0] di;
  input [79:0] di_T ;
  input [13:0] di_S ;
  output [79:0] di_R ;
  output [79:0] di_X ;
  output [79:0] di_C ;
  output [79:0] dout;
  logic [79:0] dout ;
  output [79:0] dout_T ;
  logic [79:0] dout_T ;
  logic [79:0] dout_R ;
  logic [79:0] dout_C ;
  logic [79:0] dout_X ;
  logic [13:0] dout_S ;
  input [79:0] dout_R0 ;
  input [79:0] dout_C0 ;
  input [79:0] dout_X0 ;
  output [13:0] dout_S ;
  logic [79:0] dout_0_0;
  logic [79:0] dout_0_0_T ;
  logic [79:0] dout_0_0_R ;
  logic [79:0] dout_0_0_C ;
  logic [79:0] dout_0_0_X ;
  logic [13:0] dout_0_0_S ;
  logic [79:0] functional_byp_muxed_r0_OutputMuxDataOut;
  logic [79:0] functional_byp_muxed_r0_OutputMuxDataOut_T ;
  logic [79:0] functional_byp_muxed_r0_OutputMuxDataOut_R ;
  logic [79:0] functional_byp_muxed_r0_OutputMuxDataOut_C ;
  logic [79:0] functional_byp_muxed_r0_OutputMuxDataOut_X ;
  logic [13:0] functional_byp_muxed_r0_OutputMuxDataOut_S ;
  logic gated_clk_core;
  logic gated_clk_core_T ;
  logic gated_clk_core_R ;
  logic gated_clk_core_C ;
  logic gated_clk_core_X ;
  logic [13:0] gated_clk_core_S ;
  logic gated_clk_jtag_Data_reg_r0;
  logic gated_clk_jtag_Data_reg_r0_T ;
  logic gated_clk_jtag_Data_reg_r0_R ;
  logic gated_clk_jtag_Data_reg_r0_C ;
  logic gated_clk_jtag_Data_reg_r0_X ;
  logic [13:0] gated_clk_jtag_Data_reg_r0_S ;
  logic gated_clk_jtag_Wa_reg_w0;
  logic gated_clk_jtag_Wa_reg_w0_T ;
  logic gated_clk_jtag_Wa_reg_w0_R ;
  logic gated_clk_jtag_Wa_reg_w0_C ;
  logic gated_clk_jtag_Wa_reg_w0_X ;
  logic [13:0] gated_clk_jtag_Wa_reg_w0_S ;
  input iddq_mode;
  input iddq_mode_T ;
  input [13:0] iddq_mode_S ;
  output iddq_mode_R ;
  output iddq_mode_X ;
  output iddq_mode_C ;
  input jtag_readonly_mode;
  input jtag_readonly_mode_T ;
  input [13:0] jtag_readonly_mode_S ;
  output jtag_readonly_mode_R ;
  output jtag_readonly_mode_X ;
  output jtag_readonly_mode_C ;
  logic la_bist_clkr0;
  logic la_bist_clkr0_T ;
  logic la_bist_clkr0_R ;
  logic la_bist_clkr0_C ;
  logic la_bist_clkr0_X ;
  logic [13:0] la_bist_clkr0_S ;
  logic la_bist_clkw0;
  logic la_bist_clkw0_T ;
  logic la_bist_clkw0_R ;
  logic la_bist_clkw0_C ;
  logic la_bist_clkw0_X ;
  logic [13:0] la_bist_clkw0_S ;
  input [1:0] mbist_Di_w0;
  input [1:0] mbist_Di_w0_T ;
  input [13:0] mbist_Di_w0_S ;
  output [1:0] mbist_Di_w0_R ;
  output [1:0] mbist_Di_w0_X ;
  output [1:0] mbist_Di_w0_C ;
  output [79:0] mbist_Do_r0_int_net;
  logic [79:0] mbist_Do_r0_int_net ;
  output [79:0] mbist_Do_r0_int_net_T ;
  logic [79:0] mbist_Do_r0_int_net_T ;
  logic [79:0] mbist_Do_r0_int_net_R ;
  logic [79:0] mbist_Do_r0_int_net_C ;
  logic [79:0] mbist_Do_r0_int_net_X ;
  logic [13:0] mbist_Do_r0_int_net_S ;
  input [79:0] mbist_Do_r0_int_net_R0 ;
  input [79:0] mbist_Do_r0_int_net_C0 ;
  input [79:0] mbist_Do_r0_int_net_X0 ;
  output [13:0] mbist_Do_r0_int_net_S ;
  input [4:0] mbist_Ra_r0;
  input [4:0] mbist_Ra_r0_T ;
  input [13:0] mbist_Ra_r0_S ;
  output [4:0] mbist_Ra_r0_R ;
  output [4:0] mbist_Ra_r0_X ;
  output [4:0] mbist_Ra_r0_C ;
  input [4:0] mbist_Wa_w0;
  input [4:0] mbist_Wa_w0_T ;
  input [13:0] mbist_Wa_w0_S ;
  output [4:0] mbist_Wa_w0_R ;
  output [4:0] mbist_Wa_w0_X ;
  output [4:0] mbist_Wa_w0_C ;
  input mbist_ce_r0;
  input mbist_ce_r0_T ;
  input [13:0] mbist_ce_r0_S ;
  output mbist_ce_r0_R ;
  output mbist_ce_r0_X ;
  output mbist_ce_r0_C ;
  logic mbist_ce_r0_1p;
  logic  mbist_ce_r0_1p_T ;
  logic  mbist_ce_r0_1p_PREV_VAL1 ;
  logic  mbist_ce_r0_1p_PREV_VAL2 ;
  logic  mbist_ce_r0_1p_R ;
  logic  mbist_ce_r0_1p_X ;
  logic  mbist_ce_r0_1p_C ;
  logic [13:0] mbist_ce_r0_1p_S ;
  logic mbist_ce_r0_1p_t_flag ;
  logic mbist_ce_r0_1p_r_flag ;
  assign mbist_ce_r0_1p_S = 181 ;
  logic mbist_en_r;
  logic mbist_en_r_T ;
  logic mbist_en_r_R ;
  logic mbist_en_r_C ;
  logic mbist_en_r_X ;
  logic [13:0] mbist_en_r_S ;
  input mbist_en_sync;
  input mbist_en_sync_T ;
  input [13:0] mbist_en_sync_S ;
  output mbist_en_sync_R ;
  output mbist_en_sync_X ;
  output mbist_en_sync_C ;
  input mbist_ramaccess_rst_;
  input mbist_ramaccess_rst__T ;
  input [13:0] mbist_ramaccess_rst__S ;
  output mbist_ramaccess_rst__R ;
  output mbist_ramaccess_rst__X ;
  output mbist_ramaccess_rst__C ;
  input mbist_we_w0;
  input mbist_we_w0_T ;
  input [13:0] mbist_we_w0_S ;
  output mbist_we_w0_R ;
  output mbist_we_w0_X ;
  output mbist_we_w0_C ;
  logic [79:0] muxed_Di_w0;
  logic [79:0] muxed_Di_w0_T ;
  logic [79:0] muxed_Di_w0_R ;
  logic [79:0] muxed_Di_w0_C ;
  logic [79:0] muxed_Di_w0_X ;
  logic [13:0] muxed_Di_w0_S ;
  logic [79:0] muxed_Di_w0_A;
  logic [79:0] muxed_Di_w0_A_T ;
  logic [79:0] muxed_Di_w0_A_R ;
  logic [79:0] muxed_Di_w0_A_C ;
  logic [79:0] muxed_Di_w0_A_X ;
  logic [13:0] muxed_Di_w0_A_S ;
  logic [79:0] muxed_Di_w0_B;
  logic [79:0] muxed_Di_w0_B_T ;
  logic [79:0] muxed_Di_w0_B_R ;
  logic [79:0] muxed_Di_w0_B_C ;
  logic [79:0] muxed_Di_w0_B_X ;
  logic [13:0] muxed_Di_w0_B_S ;
  logic muxed_Di_w0_S;
  logic muxed_Di_w0_S_T ;
  logic muxed_Di_w0_S_R ;
  logic muxed_Di_w0_S_C ;
  logic muxed_Di_w0_S_X ;
  logic [13:0] muxed_Di_w0_S_S ;
  logic [4:0] muxed_Ra_r0;
  logic [4:0] muxed_Ra_r0_T ;
  logic [4:0] muxed_Ra_r0_R ;
  logic [4:0] muxed_Ra_r0_C ;
  logic [4:0] muxed_Ra_r0_X ;
  logic [13:0] muxed_Ra_r0_S ;
  logic [4:0] muxed_Ra_r0_A;
  logic [4:0] muxed_Ra_r0_A_T ;
  logic [4:0] muxed_Ra_r0_A_R ;
  logic [4:0] muxed_Ra_r0_A_C ;
  logic [4:0] muxed_Ra_r0_A_X ;
  logic [13:0] muxed_Ra_r0_A_S ;
  logic [4:0] muxed_Ra_r0_B;
  logic [4:0] muxed_Ra_r0_B_T ;
  logic [4:0] muxed_Ra_r0_B_R ;
  logic [4:0] muxed_Ra_r0_B_C ;
  logic [4:0] muxed_Ra_r0_B_X ;
  logic [13:0] muxed_Ra_r0_B_S ;
  logic muxed_Ra_r0_S;
  logic muxed_Ra_r0_S_T ;
  logic muxed_Ra_r0_S_R ;
  logic muxed_Ra_r0_S_C ;
  logic muxed_Ra_r0_S_X ;
  logic [13:0] muxed_Ra_r0_S_S ;
  logic [4:0] muxed_Wa_w0;
  logic [4:0] muxed_Wa_w0_T ;
  logic [4:0] muxed_Wa_w0_R ;
  logic [4:0] muxed_Wa_w0_C ;
  logic [4:0] muxed_Wa_w0_X ;
  logic [13:0] muxed_Wa_w0_S ;
  logic [4:0] muxed_Wa_w0_A;
  logic [4:0] muxed_Wa_w0_A_T ;
  logic [4:0] muxed_Wa_w0_A_R ;
  logic [4:0] muxed_Wa_w0_A_C ;
  logic [4:0] muxed_Wa_w0_A_X ;
  logic [13:0] muxed_Wa_w0_A_S ;
  logic [4:0] muxed_Wa_w0_B;
  logic [4:0] muxed_Wa_w0_B_T ;
  logic [4:0] muxed_Wa_w0_B_R ;
  logic [4:0] muxed_Wa_w0_B_C ;
  logic [4:0] muxed_Wa_w0_B_X ;
  logic [13:0] muxed_Wa_w0_B_S ;
  logic muxed_Wa_w0_S;
  logic muxed_Wa_w0_S_T ;
  logic muxed_Wa_w0_S_R ;
  logic muxed_Wa_w0_S_C ;
  logic muxed_Wa_w0_S_X ;
  logic [13:0] muxed_Wa_w0_S_S ;
  logic [79:0] muxed_r0_OutputMuxDataOut;
  logic [79:0] muxed_r0_OutputMuxDataOut_T ;
  logic [79:0] muxed_r0_OutputMuxDataOut_R ;
  logic [79:0] muxed_r0_OutputMuxDataOut_C ;
  logic [79:0] muxed_r0_OutputMuxDataOut_X ;
  logic [13:0] muxed_r0_OutputMuxDataOut_S ;
  logic muxed_re_r0;
  logic muxed_re_r0_T ;
  logic muxed_re_r0_R ;
  logic muxed_re_r0_C ;
  logic muxed_re_r0_X ;
  logic [13:0] muxed_re_r0_S ;
  logic muxed_re_r0_A;
  logic muxed_re_r0_A_T ;
  logic muxed_re_r0_A_R ;
  logic muxed_re_r0_A_C ;
  logic muxed_re_r0_A_X ;
  logic [13:0] muxed_re_r0_A_S ;
  logic muxed_re_r0_B;
  logic muxed_re_r0_B_T ;
  logic muxed_re_r0_B_R ;
  logic muxed_re_r0_B_C ;
  logic muxed_re_r0_B_X ;
  logic [13:0] muxed_re_r0_B_S ;
  logic muxed_re_r0_S;
  logic muxed_re_r0_S_T ;
  logic muxed_re_r0_S_R ;
  logic muxed_re_r0_S_C ;
  logic muxed_re_r0_S_X ;
  logic [13:0] muxed_re_r0_S_S ;
  logic muxed_we_w0;
  logic muxed_we_w0_T ;
  logic muxed_we_w0_R ;
  logic muxed_we_w0_C ;
  logic muxed_we_w0_X ;
  logic [13:0] muxed_we_w0_S ;
  logic muxed_we_w0_A;
  logic muxed_we_w0_A_T ;
  logic muxed_we_w0_A_R ;
  logic muxed_we_w0_A_C ;
  logic muxed_we_w0_A_X ;
  logic [13:0] muxed_we_w0_A_S ;
  logic muxed_we_w0_B;
  logic muxed_we_w0_B_T ;
  logic muxed_we_w0_B_R ;
  logic muxed_we_w0_B_C ;
  logic muxed_we_w0_B_X ;
  logic [13:0] muxed_we_w0_B_S ;
  logic muxed_we_w0_S;
  logic muxed_we_w0_S_T ;
  logic muxed_we_w0_S_R ;
  logic muxed_we_w0_S_C ;
  logic muxed_we_w0_S_X ;
  logic [13:0] muxed_we_w0_S_S ;
  input ore;
  input ore_T ;
  input [13:0] ore_S ;
  output ore_R ;
  output ore_X ;
  output ore_C ;
  logic piece_re;
  logic piece_re_T ;
  logic piece_re_R ;
  logic piece_re_C ;
  logic piece_re_X ;
  logic [13:0] piece_re_S ;
  logic posedge_updateDR_sync;
  logic posedge_updateDR_sync_T ;
  logic posedge_updateDR_sync_R ;
  logic posedge_updateDR_sync_C ;
  logic posedge_updateDR_sync_X ;
  logic [13:0] posedge_updateDR_sync_S ;
  logic [4:0] pre_Ra_reg_r0;
  logic [4:0] pre_Ra_reg_r0_T ;
  logic [4:0] pre_Ra_reg_r0_R ;
  logic [4:0] pre_Ra_reg_r0_C ;
  logic [4:0] pre_Ra_reg_r0_X ;
  logic [13:0] pre_Ra_reg_r0_S ;
  logic [4:0] pre_Wa_reg_w0;
  logic [4:0] pre_Wa_reg_w0_T ;
  logic [4:0] pre_Wa_reg_w0_R ;
  logic [4:0] pre_Wa_reg_w0_C ;
  logic [4:0] pre_Wa_reg_w0_X ;
  logic [13:0] pre_Wa_reg_w0_S ;
  logic [79:0] pre_muxed_Di_w0;
  logic [79:0] pre_muxed_Di_w0_T ;
  logic [79:0] pre_muxed_Di_w0_R ;
  logic [79:0] pre_muxed_Di_w0_C ;
  logic [79:0] pre_muxed_Di_w0_X ;
  logic [13:0] pre_muxed_Di_w0_S ;
  logic [79:0] pre_muxed_Di_w0_A;
  logic [79:0] pre_muxed_Di_w0_A_T ;
  logic [79:0] pre_muxed_Di_w0_A_R ;
  logic [79:0] pre_muxed_Di_w0_A_C ;
  logic [79:0] pre_muxed_Di_w0_A_X ;
  logic [13:0] pre_muxed_Di_w0_A_S ;
  logic [79:0] pre_muxed_Di_w0_B;
  logic [79:0] pre_muxed_Di_w0_B_T ;
  logic [79:0] pre_muxed_Di_w0_B_R ;
  logic [79:0] pre_muxed_Di_w0_B_C ;
  logic [79:0] pre_muxed_Di_w0_B_X ;
  logic [13:0] pre_muxed_Di_w0_B_S ;
  logic pre_muxed_Di_w0_S;
  logic pre_muxed_Di_w0_S_T ;
  logic pre_muxed_Di_w0_S_R ;
  logic pre_muxed_Di_w0_S_C ;
  logic pre_muxed_Di_w0_S_X ;
  logic [13:0] pre_muxed_Di_w0_S_S ;
  logic pre_re_r0;
  logic pre_re_r0_T ;
  logic pre_re_r0_R ;
  logic pre_re_r0_C ;
  logic pre_re_r0_X ;
  logic [13:0] pre_re_r0_S ;
  logic pre_we_w0;
  logic pre_we_w0_T ;
  logic pre_we_w0_R ;
  logic pre_we_w0_C ;
  logic pre_we_w0_X ;
  logic [13:0] pre_we_w0_S ;
  input [31:0] pwrbus_ram_pd;
  input [31:0] pwrbus_ram_pd_T ;
  input [13:0] pwrbus_ram_pd_S ;
  output [31:0] pwrbus_ram_pd_R ;
  output [31:0] pwrbus_ram_pd_X ;
  output [31:0] pwrbus_ram_pd_C ;
  logic [79:0] r0_OutputMuxDataOut;
  logic [79:0] r0_OutputMuxDataOut_T ;
  logic [79:0] r0_OutputMuxDataOut_R ;
  logic [79:0] r0_OutputMuxDataOut_C ;
  logic [79:0] r0_OutputMuxDataOut_X ;
  logic [13:0] r0_OutputMuxDataOut_S ;
  input [4:0] ra;
  input [4:0] ra_T ;
  input [13:0] ra_S ;
  output [4:0] ra_R ;
  output [4:0] ra_X ;
  output [4:0] ra_C ;
  logic [4:0] ra_0_0;
  logic [4:0] ra_0_0_T ;
  logic [4:0] ra_0_0_R ;
  logic [4:0] ra_0_0_C ;
  logic [4:0] ra_0_0_X ;
  logic [13:0] ra_0_0_S ;
  logic [4:0] radr_q;
  logic [4:0] radr_q_T ;
  logic [4:0] radr_q_R ;
  logic [4:0] radr_q_C ;
  logic [4:0] radr_q_X ;
  logic [13:0] radr_q_S ;
  logic [79:0] ramDataOut;
  logic [79:0] ramDataOut_T ;
  logic [79:0] ramDataOut_R ;
  logic [79:0] ramDataOut_C ;
  logic [79:0] ramDataOut_X ;
  logic [13:0] ramDataOut_S ;
  logic ram_bypass;
  logic ram_bypass_T ;
  logic ram_bypass_R ;
  logic ram_bypass_C ;
  logic ram_bypass_X ;
  logic [13:0] ram_bypass_S ;
  logic [79:0] ram_r0_OutputMuxDataOut;
  logic [79:0] ram_r0_OutputMuxDataOut_T ;
  logic [79:0] ram_r0_OutputMuxDataOut_R ;
  logic [79:0] ram_r0_OutputMuxDataOut_C ;
  logic [79:0] ram_r0_OutputMuxDataOut_X ;
  logic [13:0] ram_r0_OutputMuxDataOut_S ;
  input re;
  input re_T ;
  input [13:0] re_S ;
  output re_R ;
  output re_X ;
  output re_C ;
  logic re_0_0;
  logic re_0_0_T ;
  logic re_0_0_R ;
  logic re_0_0_C ;
  logic re_0_0_X ;
  logic [13:0] re_0_0_S ;
  logic re_q;
  logic re_q_T ;
  logic re_q_R ;
  logic re_q_C ;
  logic re_q_X ;
  logic [13:0] re_q_S ;
  logic re_reg_SO_r0;
  logic re_reg_SO_r0_T ;
  logic re_reg_SO_r0_R ;
  logic re_reg_SO_r0_C ;
  logic re_reg_SO_r0_X ;
  logic [13:0] re_reg_SO_r0_S ;
  logic re_reg_r0;
  logic re_reg_r0_T ;
  logic re_reg_r0_R ;
  logic re_reg_r0_C ;
  logic re_reg_r0_X ;
  logic [13:0] re_reg_r0_S ;
  logic ret_en;
  logic ret_en_T ;
  logic ret_en_R ;
  logic ret_en_C ;
  logic ret_en_X ;
  logic [13:0] ret_en_S ;
  input scan_en;
  input scan_en_T ;
  input [13:0] scan_en_S ;
  output scan_en_R ;
  output scan_en_X ;
  output scan_en_C ;
  input scan_ramtms;
  input scan_ramtms_T ;
  input [13:0] scan_ramtms_S ;
  output scan_ramtms_R ;
  output scan_ramtms_X ;
  output scan_ramtms_C ;
  input shiftDR;
  input shiftDR_T ;
  input [13:0] shiftDR_S ;
  output shiftDR_R ;
  output shiftDR_X ;
  output shiftDR_C ;
  logic [7:0] sleep_en;
  logic [7:0] sleep_en_T ;
  logic [7:0] sleep_en_R ;
  logic [7:0] sleep_en_C ;
  logic [7:0] sleep_en_X ;
  logic [13:0] sleep_en_S ;
  input [1:0] svop;
  input [1:0] svop_T ;
  input [13:0] svop_S ;
  output [1:0] svop_R ;
  output [1:0] svop_X ;
  output [1:0] svop_C ;
  input test_mode;
  input test_mode_T ;
  input [13:0] test_mode_S ;
  output test_mode_R ;
  output test_mode_X ;
  output test_mode_C ;
  input updateDR;
  input updateDR_T ;
  input [13:0] updateDR_S ;
  output updateDR_R ;
  output updateDR_X ;
  output updateDR_C ;
  logic updateDR_sync;
  logic updateDR_sync_T ;
  logic updateDR_sync_R ;
  logic updateDR_sync_C ;
  logic updateDR_sync_X ;
  logic [13:0] updateDR_sync_S ;
  logic updateDR_sync_1p;
  logic  updateDR_sync_1p_T ;
  logic  updateDR_sync_1p_PREV_VAL1 ;
  logic  updateDR_sync_1p_PREV_VAL2 ;
  logic  updateDR_sync_1p_R ;
  logic  updateDR_sync_1p_X ;
  logic  updateDR_sync_1p_C ;
  logic [13:0] updateDR_sync_1p_S ;
  logic updateDR_sync_1p_t_flag ;
  logic updateDR_sync_1p_r_flag ;
  assign updateDR_sync_1p_S = 182 ;
  input [4:0] wa;
  input [4:0] wa_T ;
  input [13:0] wa_S ;
  output [4:0] wa_R ;
  output [4:0] wa_X ;
  output [4:0] wa_C ;
  logic [4:0] wa_0_0;
  logic [4:0] wa_0_0_T ;
  logic [4:0] wa_0_0_R ;
  logic [4:0] wa_0_0_C ;
  logic [4:0] wa_0_0_X ;
  logic [13:0] wa_0_0_S ;
  logic [4:0] wadr_q;
  logic [4:0] wadr_q_T ;
  logic [4:0] wadr_q_R ;
  logic [4:0] wadr_q_C ;
  logic [4:0] wadr_q_X ;
  logic [13:0] wadr_q_S ;
  input we;
  input we_T ;
  input [13:0] we_S ;
  output we_R ;
  output we_X ;
  output we_C ;
  logic we_0_0;
  logic we_0_0_T ;
  logic we_0_0_R ;
  logic we_0_0_C ;
  logic we_0_0_X ;
  logic [13:0] we_0_0_S ;
  logic we_q;
  logic we_q_T ;
  logic we_q_R ;
  logic we_q_C ;
  logic we_q_X ;
  logic [13:0] we_q_S ;
  logic we_reg_SO_w0;
  logic we_reg_SO_w0_T ;
  logic we_reg_SO_w0_R ;
  logic we_reg_SO_w0_C ;
  logic we_reg_SO_w0_X ;
  logic [13:0] we_reg_SO_w0_S ;
  logic we_reg_w0;
  logic we_reg_w0_T ;
  logic we_reg_w0_R ;
  logic we_reg_w0_C ;
  logic we_reg_w0_X ;
  logic [13:0] we_reg_w0_S ;
  logic web;
  logic web_T ;
  logic web_R ;
  logic web_C ;
  logic web_X ;
  logic [13:0] web_S ;
  input write_inh;
  input write_inh_T ;
  input [13:0] write_inh_S ;
  output write_inh_R ;
  output write_inh_X ;
  output write_inh_C ;
  logic wthru;
  logic wthru_T ;
  logic wthru_R ;
  logic wthru_C ;
  logic wthru_X ;
  logic [13:0] wthru_S ;
  logic [79:0] wthru_di;
  logic [79:0]  wthru_di_T ;
  logic [79:0]  wthru_di_PREV_VAL1 ;
  logic [79:0]  wthru_di_PREV_VAL2 ;
  logic [79:0]  wthru_di_R ;
  logic [79:0]  wthru_di_X ;
  logic [79:0]  wthru_di_C ;
  logic [13:0] wthru_di_S ;
  logic wthru_di_t_flag ;
  logic wthru_di_r_flag ;
  assign wthru_di_S = 183 ;
  logic wthru_en;
  logic  wthru_en_T ;
  logic  wthru_en_PREV_VAL1 ;
  logic  wthru_en_PREV_VAL2 ;
  logic  wthru_en_R ;
  logic  wthru_en_X ;
  logic  wthru_en_C ;
  logic [13:0] wthru_en_S ;
  logic wthru_en_t_flag ;
  logic wthru_en_r_flag ;
  assign wthru_en_S = 184 ;
  assign _02_ = _20_ & re;
  assign _02__S = 0 ;
  logic [0:0] _20__C0 ;
  logic [0:0] _20__R0 ;
  logic [0:0] _20__X0 ;
  logic [0:0] re_C0 ;
  logic [0:0] re_R0 ;
  logic [0:0] re_X0 ;
  assign _02__T = _20__T | re_T ;
  assign _20__C0 = _02__C ;
  assign _20__X0 = _02__X ;
  assign re_C0 = _02__C ;
  assign re_X0 = _02__X ;
  assign _20__R0 = ( _02__R | _02__C & re_T ) & { 1{ re != 0 }} ;
  assign re_R0 = ( _02__R | _02__C & _20__T ) & { 1{ _20_ != 0 }} ;
  assign _03_ = _02_ & we;
  assign _03__S = 0 ;
  logic [0:0] _02__C0 ;
  logic [0:0] _02__R0 ;
  logic [0:0] _02__X0 ;
  logic [0:0] we_C0 ;
  logic [0:0] we_R0 ;
  logic [0:0] we_X0 ;
  assign _03__T = _02__T | we_T ;
  assign _02__C0 = _03__C ;
  assign _02__X0 = _03__X ;
  assign we_C0 = _03__C ;
  assign we_X0 = _03__X ;
  assign _02__R0 = ( _03__R | _03__C & we_T ) & { 1{ we != 0 }} ;
  assign we_R0 = ( _03__R | _03__C & _02__T ) & { 1{ _02_ != 0 }} ;
  assign _04_ = _03_ & Ra_reg_r0_S;
  assign _04__S = 0 ;
  logic [0:0] _03__C0 ;
  logic [0:0] _03__R0 ;
  logic [0:0] _03__X0 ;
  logic [0:0] Ra_reg_r0_S_C0 ;
  logic [0:0] Ra_reg_r0_S_R0 ;
  logic [0:0] Ra_reg_r0_S_X0 ;
  assign _04__T = _03__T | Ra_reg_r0_S_T ;
  assign _03__C0 = _04__C ;
  assign _03__X0 = _04__X ;
  assign Ra_reg_r0_S_C0 = _04__C ;
  assign Ra_reg_r0_S_X0 = _04__X ;
  assign _03__R0 = ( _04__R | _04__C & Ra_reg_r0_S_T ) & { 1{ Ra_reg_r0_S != 0 }} ;
  assign Ra_reg_r0_S_R0 = ( _04__R | _04__C & _03__T ) & { 1{ _03_ != 0 }} ;
  assign wthru = _04_ & _21_;
  assign wthru_S = 0 ;
  logic [0:0] _04__C0 ;
  logic [0:0] _04__R0 ;
  logic [0:0] _04__X0 ;
  logic [0:0] _21__C0 ;
  logic [0:0] _21__R0 ;
  logic [0:0] _21__X0 ;
  assign wthru_T = _04__T | _21__T ;
  assign _04__C0 = wthru_C ;
  assign _04__X0 = wthru_X ;
  assign _21__C0 = wthru_C ;
  assign _21__X0 = wthru_X ;
  assign _04__R0 = ( wthru_R | wthru_C & _21__T ) & { 1{ _21_ != 0 }} ;
  assign _21__R0 = ( wthru_R | wthru_C & _04__T ) & { 1{ _04_ != 0 }} ;
  assign _05_ = wthru_en & _22_;
  assign _05__S = 0 ;
  logic [0:0] wthru_en_C0 ;
  logic [0:0] wthru_en_R0 ;
  logic [0:0] wthru_en_X0 ;
  logic [0:0] _22__C0 ;
  logic [0:0] _22__R0 ;
  logic [0:0] _22__X0 ;
  assign _05__T = wthru_en_T | _22__T ;
  assign wthru_en_C0 = _05__C ;
  assign wthru_en_X0 = _05__X ;
  assign _22__C0 = _05__C ;
  assign _22__X0 = _05__X ;
  assign wthru_en_R0 = ( _05__R | _05__C & _22__T ) & { 1{ _22_ != 0 }} ;
  assign _22__R0 = ( _05__R | _05__C & wthru_en_T ) & { 1{ wthru_en != 0 }} ;
  assign _06_ = _28_ & Ra_reg_r0_S;
  assign _06__S = 0 ;
  logic [0:0] _28__C0 ;
  logic [0:0] _28__R0 ;
  logic [0:0] _28__X0 ;
  logic [0:0] Ra_reg_r0_S_C1 ;
  logic [0:0] Ra_reg_r0_S_R1 ;
  logic [0:0] Ra_reg_r0_S_X1 ;
  assign _06__T = _28__T | Ra_reg_r0_S_T ;
  assign _28__C0 = _06__C ;
  assign _28__X0 = _06__X ;
  assign Ra_reg_r0_S_C1 = _06__C ;
  assign Ra_reg_r0_S_X1 = _06__X ;
  assign _28__R0 = ( _06__R | _06__C & Ra_reg_r0_S_T ) & { 1{ Ra_reg_r0_S != 0 }} ;
  assign Ra_reg_r0_S_R1 = ( _06__R | _06__C & _28__T ) & { 1{ _28_ != 0 }} ;
  assign _01_ = _06_ & _21_;
  assign _01__S = 0 ;
  logic [0:0] _06__C0 ;
  logic [0:0] _06__R0 ;
  logic [0:0] _06__X0 ;
  logic [0:0] _21__C1 ;
  logic [0:0] _21__R1 ;
  logic [0:0] _21__X1 ;
  assign _01__T = _06__T | _21__T ;
  assign _06__C0 = _01__C ;
  assign _06__X0 = _01__X ;
  assign _21__C1 = _01__C ;
  assign _21__X1 = _01__X ;
  assign _06__R0 = ( _01__R | _01__C & _21__T ) & { 1{ _21_ != 0 }} ;
  assign _21__R1 = ( _01__R | _01__C & _06__T ) & { 1{ _06_ != 0 }} ;
  assign posedge_updateDR_sync = updateDR_sync & _23_;
  assign posedge_updateDR_sync_S = 0 ;
  logic [0:0] updateDR_sync_C0 ;
  logic [0:0] updateDR_sync_R0 ;
  logic [0:0] updateDR_sync_X0 ;
  logic [0:0] _23__C0 ;
  logic [0:0] _23__R0 ;
  logic [0:0] _23__X0 ;
  assign posedge_updateDR_sync_T = updateDR_sync_T | _23__T ;
  assign updateDR_sync_C0 = posedge_updateDR_sync_C ;
  assign updateDR_sync_X0 = posedge_updateDR_sync_X ;
  assign _23__C0 = posedge_updateDR_sync_C ;
  assign _23__X0 = posedge_updateDR_sync_X ;
  assign updateDR_sync_R0 = ( posedge_updateDR_sync_R | posedge_updateDR_sync_C & _23__T ) & { 1{ _23_ != 0 }} ;
  assign _23__R0 = ( posedge_updateDR_sync_R | posedge_updateDR_sync_C & updateDR_sync_T ) & { 1{ updateDR_sync != 0 }} ;
  assign _07_ = posedge_updateDR_sync & we_q;
  assign _07__S = 0 ;
  logic [0:0] posedge_updateDR_sync_C0 ;
  logic [0:0] posedge_updateDR_sync_R0 ;
  logic [0:0] posedge_updateDR_sync_X0 ;
  logic [0:0] we_q_C0 ;
  logic [0:0] we_q_R0 ;
  logic [0:0] we_q_X0 ;
  assign _07__T = posedge_updateDR_sync_T | we_q_T ;
  assign posedge_updateDR_sync_C0 = _07__C ;
  assign posedge_updateDR_sync_X0 = _07__X ;
  assign we_q_C0 = _07__C ;
  assign we_q_X0 = _07__X ;
  assign posedge_updateDR_sync_R0 = ( _07__R | _07__C & we_q_T ) & { 1{ we_q != 0 }} ;
  assign we_q_R0 = ( _07__R | _07__C & posedge_updateDR_sync_T ) & { 1{ posedge_updateDR_sync != 0 }} ;
  assign _08_ = mbist_en_r & mbist_we_w0;
  assign _08__S = 0 ;
  logic [0:0] mbist_en_r_C0 ;
  logic [0:0] mbist_en_r_R0 ;
  logic [0:0] mbist_en_r_X0 ;
  logic [0:0] mbist_we_w0_C0 ;
  logic [0:0] mbist_we_w0_R0 ;
  logic [0:0] mbist_we_w0_X0 ;
  assign _08__T = mbist_en_r_T | mbist_we_w0_T ;
  assign mbist_en_r_C0 = _08__C ;
  assign mbist_en_r_X0 = _08__X ;
  assign mbist_we_w0_C0 = _08__C ;
  assign mbist_we_w0_X0 = _08__X ;
  assign mbist_en_r_R0 = ( _08__R | _08__C & mbist_we_w0_T ) & { 1{ mbist_we_w0 != 0 }} ;
  assign mbist_we_w0_R0 = ( _08__R | _08__C & mbist_en_r_T ) & { 1{ mbist_en_r != 0 }} ;
  assign access_en_r = posedge_updateDR_sync & re_q;
  assign access_en_r_S = 0 ;
  logic [0:0] posedge_updateDR_sync_C1 ;
  logic [0:0] posedge_updateDR_sync_R1 ;
  logic [0:0] posedge_updateDR_sync_X1 ;
  logic [0:0] re_q_C0 ;
  logic [0:0] re_q_R0 ;
  logic [0:0] re_q_X0 ;
  assign access_en_r_T = posedge_updateDR_sync_T | re_q_T ;
  assign posedge_updateDR_sync_C1 = access_en_r_C ;
  assign posedge_updateDR_sync_X1 = access_en_r_X ;
  assign re_q_C0 = access_en_r_C ;
  assign re_q_X0 = access_en_r_X ;
  assign posedge_updateDR_sync_R1 = ( access_en_r_R | access_en_r_C & re_q_T ) & { 1{ re_q != 0 }} ;
  assign re_q_R0 = ( access_en_r_R | access_en_r_C & posedge_updateDR_sync_T ) & { 1{ posedge_updateDR_sync != 0 }} ;
  assign _09_ = mbist_en_r & mbist_ce_r0;
  assign _09__S = 0 ;
  logic [0:0] mbist_en_r_C1 ;
  logic [0:0] mbist_en_r_R1 ;
  logic [0:0] mbist_en_r_X1 ;
  logic [0:0] mbist_ce_r0_C0 ;
  logic [0:0] mbist_ce_r0_R0 ;
  logic [0:0] mbist_ce_r0_X0 ;
  assign _09__T = mbist_en_r_T | mbist_ce_r0_T ;
  assign mbist_en_r_C1 = _09__C ;
  assign mbist_en_r_X1 = _09__X ;
  assign mbist_ce_r0_C0 = _09__C ;
  assign mbist_ce_r0_X0 = _09__X ;
  assign mbist_en_r_R1 = ( _09__R | _09__C & mbist_ce_r0_T ) & { 1{ mbist_ce_r0 != 0 }} ;
  assign mbist_ce_r0_R0 = ( _09__R | _09__C & mbist_en_r_T ) & { 1{ mbist_en_r != 0 }} ;
  assign _10_ = scan_en & jtag_readonly_mode;
  assign _10__S = 0 ;
  logic [0:0] scan_en_C0 ;
  logic [0:0] scan_en_R0 ;
  logic [0:0] scan_en_X0 ;
  logic [0:0] jtag_readonly_mode_C0 ;
  logic [0:0] jtag_readonly_mode_R0 ;
  logic [0:0] jtag_readonly_mode_X0 ;
  assign _10__T = scan_en_T | jtag_readonly_mode_T ;
  assign scan_en_C0 = _10__C ;
  assign scan_en_X0 = _10__X ;
  assign jtag_readonly_mode_C0 = _10__C ;
  assign jtag_readonly_mode_X0 = _10__X ;
  assign scan_en_R0 = ( _10__R | _10__C & jtag_readonly_mode_T ) & { 1{ jtag_readonly_mode != 0 }} ;
  assign jtag_readonly_mode_R0 = ( _10__R | _10__C & scan_en_T ) & { 1{ scan_en != 0 }} ;
  assign _11_ = muxed_Ra_r0[4] & _25_;
  assign _11__S = 0 ;
  logic [4:0] muxed_Ra_r0_C0 ;
  logic [4:0] muxed_Ra_r0_R0 ;
  logic [4:0] muxed_Ra_r0_X0 ;
  logic [0:0] _25__C0 ;
  logic [0:0] _25__R0 ;
  logic [0:0] _25__X0 ;
  assign _11__T = muxed_Ra_r0_T [4] | _25__T ;
  assign muxed_Ra_r0_C0 [4] = _11__C ;
  assign muxed_Ra_r0_X0 [4] = _11__X ;
  assign _25__C0 = _11__C ;
  assign _25__X0 = _11__X ;
  assign muxed_Ra_r0_R0 [4] = ( _11__R | _11__C & _25__T ) & { 1{ _25_ != 0 }} ;
  assign _25__R0 = ( _11__R | _11__C & muxed_Ra_r0_T [4] ) & { 1{ muxed_Ra_r0[4] != 0 }} ;
  assign _12_ = byp_sel & Ra_reg_r0_S;
  assign _12__S = 0 ;
  logic [0:0] byp_sel_C0 ;
  logic [0:0] byp_sel_R0 ;
  logic [0:0] byp_sel_X0 ;
  logic [0:0] Ra_reg_r0_S_C2 ;
  logic [0:0] Ra_reg_r0_S_R2 ;
  logic [0:0] Ra_reg_r0_S_X2 ;
  assign _12__T = byp_sel_T | Ra_reg_r0_S_T ;
  assign byp_sel_C0 = _12__C ;
  assign byp_sel_X0 = _12__X ;
  assign Ra_reg_r0_S_C2 = _12__C ;
  assign Ra_reg_r0_S_X2 = _12__X ;
  assign byp_sel_R0 = ( _12__R | _12__C & Ra_reg_r0_S_T ) & { 1{ Ra_reg_r0_S != 0 }} ;
  assign Ra_reg_r0_S_R2 = ( _12__R | _12__C & byp_sel_T ) & { 1{ byp_sel != 0 }} ;
  assign _13_ = _12_ & _21_;
  assign _13__S = 0 ;
  logic [0:0] _12__C0 ;
  logic [0:0] _12__R0 ;
  logic [0:0] _12__X0 ;
  logic [0:0] _21__C2 ;
  logic [0:0] _21__R2 ;
  logic [0:0] _21__X2 ;
  assign _13__T = _12__T | _21__T ;
  assign _12__C0 = _13__C ;
  assign _12__X0 = _13__X ;
  assign _21__C2 = _13__C ;
  assign _21__X2 = _13__X ;
  assign _12__R0 = ( _13__R | _13__C & _21__T ) & { 1{ _21_ != 0 }} ;
  assign _21__R2 = ( _13__R | _13__C & _12__T ) & { 1{ _12_ != 0 }} ;
  assign _14_ = _21_ & Ra_reg_r0_S;
  assign _14__S = 0 ;
  logic [0:0] _21__C3 ;
  logic [0:0] _21__R3 ;
  logic [0:0] _21__X3 ;
  logic [0:0] Ra_reg_r0_S_C3 ;
  logic [0:0] Ra_reg_r0_S_R3 ;
  logic [0:0] Ra_reg_r0_S_X3 ;
  assign _14__T = _21__T | Ra_reg_r0_S_T ;
  assign _21__C3 = _14__C ;
  assign _21__X3 = _14__X ;
  assign Ra_reg_r0_S_C3 = _14__C ;
  assign Ra_reg_r0_S_X3 = _14__X ;
  assign _21__R3 = ( _14__R | _14__C & Ra_reg_r0_S_T ) & { 1{ Ra_reg_r0_S != 0 }} ;
  assign Ra_reg_r0_S_R3 = ( _14__R | _14__C & _21__T ) & { 1{ _21_ != 0 }} ;
  assign _15_ = _14_ & wthru_en;
  assign _15__S = 0 ;
  logic [0:0] _14__C0 ;
  logic [0:0] _14__R0 ;
  logic [0:0] _14__X0 ;
  logic [0:0] wthru_en_C1 ;
  logic [0:0] wthru_en_R1 ;
  logic [0:0] wthru_en_X1 ;
  assign _15__T = _14__T | wthru_en_T ;
  assign _14__C0 = _15__C ;
  assign _14__X0 = _15__X ;
  assign wthru_en_C1 = _15__C ;
  assign wthru_en_X1 = _15__X ;
  assign _14__R0 = ( _15__R | _15__C & wthru_en_T ) & { 1{ wthru_en != 0 }} ;
  assign wthru_en_R1 = ( _15__R | _15__C & _14__T ) & { 1{ _14_ != 0 }} ;
  assign _16_ = ore & _21_;
  assign _16__S = 0 ;
  logic [0:0] ore_C0 ;
  logic [0:0] ore_R0 ;
  logic [0:0] ore_X0 ;
  logic [0:0] _21__C4 ;
  logic [0:0] _21__R4 ;
  logic [0:0] _21__X4 ;
  assign _16__T = ore_T | _21__T ;
  assign ore_C0 = _16__C ;
  assign ore_X0 = _16__X ;
  assign _21__C4 = _16__C ;
  assign _21__X4 = _16__X ;
  assign ore_R0 = ( _16__R | _16__C & _21__T ) & { 1{ _21_ != 0 }} ;
  assign _21__R4 = ( _16__R | _16__C & ore_T ) & { 1{ ore != 0 }} ;
  assign _17_ = _16_ & Ra_reg_r0_S;
  assign _17__S = 0 ;
  logic [0:0] _16__C0 ;
  logic [0:0] _16__R0 ;
  logic [0:0] _16__X0 ;
  logic [0:0] Ra_reg_r0_S_C4 ;
  logic [0:0] Ra_reg_r0_S_R4 ;
  logic [0:0] Ra_reg_r0_S_X4 ;
  assign _17__T = _16__T | Ra_reg_r0_S_T ;
  assign _16__C0 = _17__C ;
  assign _16__X0 = _17__X ;
  assign Ra_reg_r0_S_C4 = _17__C ;
  assign Ra_reg_r0_S_X4 = _17__X ;
  assign _16__R0 = ( _17__R | _17__C & Ra_reg_r0_S_T ) & { 1{ Ra_reg_r0_S != 0 }} ;
  assign Ra_reg_r0_S_R4 = ( _17__R | _17__C & _16__T ) & { 1{ _16_ != 0 }} ;
  assign _18_ = mbist_en_r & mbist_ce_r0_1p;
  assign _18__S = 0 ;
  logic [0:0] mbist_en_r_C2 ;
  logic [0:0] mbist_en_r_R2 ;
  logic [0:0] mbist_en_r_X2 ;
  logic [0:0] mbist_ce_r0_1p_C0 ;
  logic [0:0] mbist_ce_r0_1p_R0 ;
  logic [0:0] mbist_ce_r0_1p_X0 ;
  assign _18__T = mbist_en_r_T | mbist_ce_r0_1p_T ;
  assign mbist_en_r_C2 = _18__C ;
  assign mbist_en_r_X2 = _18__X ;
  assign mbist_ce_r0_1p_C0 = _18__C ;
  assign mbist_ce_r0_1p_X0 = _18__X ;
  assign mbist_en_r_R2 = ( _18__R | _18__C & mbist_ce_r0_1p_T ) & { 1{ mbist_ce_r0_1p != 0 }} ;
  assign mbist_ce_r0_1p_R0 = ( _18__R | _18__C & mbist_en_r_T ) & { 1{ mbist_en_r != 0 }} ;
  assign _19_ = debug_mode_sync & shiftDR;
  assign _19__S = 0 ;
  logic [0:0] debug_mode_sync_C0 ;
  logic [0:0] debug_mode_sync_R0 ;
  logic [0:0] debug_mode_sync_X0 ;
  logic [0:0] shiftDR_C0 ;
  logic [0:0] shiftDR_R0 ;
  logic [0:0] shiftDR_X0 ;
  assign _19__T = debug_mode_sync_T | shiftDR_T ;
  assign debug_mode_sync_C0 = _19__C ;
  assign debug_mode_sync_X0 = _19__X ;
  assign shiftDR_C0 = _19__C ;
  assign shiftDR_X0 = _19__X ;
  assign debug_mode_sync_R0 = ( _19__R | _19__C & shiftDR_T ) & { 1{ shiftDR != 0 }} ;
  assign shiftDR_R0 = ( _19__R | _19__C & debug_mode_sync_T ) & { 1{ debug_mode_sync != 0 }} ;
  assign _20_ = ra == wa;
  assign _20__S = 0 ;
  logic [4:0] ra_C0 ;
  logic [4:0] ra_R0 ;
  logic [4:0] ra_X0 ;
  logic [4:0] wa_C0 ;
  logic [4:0] wa_R0 ;
  logic [4:0] wa_X0 ;
  assign _20__T = (| ra_T ) | (|wa_T ) ;
  assign ra_C0 = { 5{ _20__C }} ;
  assign ra_R0 = { 5{ _20__R }} | ( { 5{ _20__C }} & wa_T );
  assign ra_X0 = { 5{ _20__X }} ;
  assign wa_C0 = { 5{ _20__C }} ;
  assign wa_R0 = { 5{ _20__R }} | ( { 5{ _20__C }} & ra_T );
  assign wa_X0 = { 5{ _20__X }} ;
  assign Ra_reg_r0_S = ! debug_mode_sync;
  logic [0:0] debug_mode_sync_C1 ;
  logic [0:0] debug_mode_sync_R1 ;
  logic [0:0] debug_mode_sync_X1 ;
  assign Ra_reg_r0_S_T = | debug_mode_sync_T ;
  assign debug_mode_sync_C1 = { 1{ Ra_reg_r0_S_C }} ;
  assign debug_mode_sync_X1 = { 1{ Ra_reg_r0_S_X }} ;
  assign debug_mode_sync_R1 = { 1{ Ra_reg_r0_S_R }} ;
  assign Ra_reg_r0_S_S = 0 ;
  assign _21_ = ! mbist_en_r;
  logic [0:0] mbist_en_r_C3 ;
  logic [0:0] mbist_en_r_R3 ;
  logic [0:0] mbist_en_r_X3 ;
  assign _21__T = | mbist_en_r_T ;
  assign mbist_en_r_C3 = { 1{ _21__C }} ;
  assign mbist_en_r_X3 = { 1{ _21__X }} ;
  assign mbist_en_r_R3 = { 1{ _21__R }} ;
  assign _21__S = 0 ;
  assign _22_ = ! re;
  logic [0:0] re_C1 ;
  logic [0:0] re_R1 ;
  logic [0:0] re_X1 ;
  assign _22__T = | re_T ;
  assign re_C1 = { 1{ _22__C }} ;
  assign re_X1 = { 1{ _22__X }} ;
  assign re_R1 = { 1{ _22__R }} ;
  assign _22__S = 0 ;
  assign _23_ = ! updateDR_sync_1p;
  logic [0:0] updateDR_sync_1p_C0 ;
  logic [0:0] updateDR_sync_1p_R0 ;
  logic [0:0] updateDR_sync_1p_X0 ;
  assign _23__T = | updateDR_sync_1p_T ;
  assign updateDR_sync_1p_C0 = { 1{ _23__C }} ;
  assign updateDR_sync_1p_X0 = { 1{ _23__X }} ;
  assign updateDR_sync_1p_R0 = { 1{ _23__R }} ;
  assign _23__S = 0 ;
  assign _24_ = ! web;
  logic [0:0] web_C0 ;
  logic [0:0] web_R0 ;
  logic [0:0] web_X0 ;
  assign _24__T = | web_T ;
  assign web_C0 = { 1{ _24__C }} ;
  assign web_X0 = { 1{ _24__X }} ;
  assign web_R0 = { 1{ _24__R }} ;
  assign _24__S = 0 ;
  assign _25_ = ! test_mode;
  logic [0:0] test_mode_C0 ;
  logic [0:0] test_mode_R0 ;
  logic [0:0] test_mode_X0 ;
  assign _25__T = | test_mode_T ;
  assign test_mode_C0 = { 1{ _25__C }} ;
  assign test_mode_X0 = { 1{ _25__X }} ;
  assign test_mode_R0 = { 1{ _25__R }} ;
  assign _25__S = 0 ;
  assign _26_ = _17_ || _33_;
  assign _26__S = 0 ;
  logic [0:0] _17__C0 ;
  logic [0:0] _17__R0 ;
  logic [0:0] _17__X0 ;
  logic [0:0] _33__C0 ;
  logic [0:0] _33__R0 ;
  logic [0:0] _33__X0 ;
  assign _26__T = _17__T | _33__T ;
  assign _17__C0 = _26__C ;
  assign _17__X0 = _26__X ;
  assign _33__C0 = _26__C ;
  assign _33__X0 = _26__X ;
  assign _17__R0 = ( _26__R | _26__C & _33__T ) & { 1{ _33_ == 0 }} ;
  assign _33__R0 = ( _26__R | _26__C & _17__T ) & { 1{ _17_ == 0 }} ;
  assign _27_ = ~ muxed_we_w0;
  logic [0:0] muxed_we_w0_C0 ;
  logic [0:0] muxed_we_w0_R0 ;
  logic [0:0] muxed_we_w0_X0 ;
  assign _27__T = muxed_we_w0_T ;
  assign muxed_we_w0_C0 = _27__C ;
  assign muxed_we_w0_R0 = _27__R ;
  assign muxed_we_w0_X0 = _27__X ;
  assign _27__S = 0 ;
  assign ram_bypass = scan_ramtms | ary_read_inh;
  assign ram_bypass_S = 0 ;
  logic [0:0] scan_ramtms_C0 ;
  logic [0:0] scan_ramtms_R0 ;
  logic [0:0] scan_ramtms_X0 ;
  logic [0:0] ary_read_inh_C0 ;
  logic [0:0] ary_read_inh_R0 ;
  logic [0:0] ary_read_inh_X0 ;
  assign ram_bypass_T = scan_ramtms_T | ary_read_inh_T ;
  assign scan_ramtms_C0 = ram_bypass_C ;
  assign scan_ramtms_X0 = ram_bypass_X ;
  assign ary_read_inh_C0 = ram_bypass_C ;
  assign ary_read_inh_X0 = ram_bypass_X ;
  assign scan_ramtms_R0 = ( ram_bypass_R | ram_bypass_C & ary_read_inh_T ) & { 1{ ary_read_inh != 1'b1 }} ;
  assign ary_read_inh_R0 = ( ram_bypass_R | ram_bypass_C & scan_ramtms_T ) & { 1{ scan_ramtms != 1'b1 }} ;
  assign muxed_re_r0_S = mbist_en_r | debug_mode_sync;
  assign muxed_re_r0_S_S = 0 ;
  logic [0:0] mbist_en_r_C4 ;
  logic [0:0] mbist_en_r_R4 ;
  logic [0:0] mbist_en_r_X4 ;
  logic [0:0] debug_mode_sync_C2 ;
  logic [0:0] debug_mode_sync_R2 ;
  logic [0:0] debug_mode_sync_X2 ;
  assign muxed_re_r0_S_T = mbist_en_r_T | debug_mode_sync_T ;
  assign mbist_en_r_C4 = muxed_re_r0_S_C ;
  assign mbist_en_r_X4 = muxed_re_r0_S_X ;
  assign debug_mode_sync_C2 = muxed_re_r0_S_C ;
  assign debug_mode_sync_X2 = muxed_re_r0_S_X ;
  assign mbist_en_r_R4 = ( muxed_re_r0_S_R | muxed_re_r0_S_C & debug_mode_sync_T ) & { 1{ debug_mode_sync != 1'b1 }} ;
  assign debug_mode_sync_R2 = ( muxed_re_r0_S_R | muxed_re_r0_S_C & mbist_en_r_T ) & { 1{ mbist_en_r != 1'b1 }} ;
  assign _28_ = wthru | _05_;
  assign _28__S = 0 ;
  logic [0:0] wthru_C0 ;
  logic [0:0] wthru_R0 ;
  logic [0:0] wthru_X0 ;
  logic [0:0] _05__C0 ;
  logic [0:0] _05__R0 ;
  logic [0:0] _05__X0 ;
  assign _28__T = wthru_T | _05__T ;
  assign wthru_C0 = _28__C ;
  assign wthru_X0 = _28__X ;
  assign _05__C0 = _28__C ;
  assign _05__X0 = _28__X ;
  assign wthru_R0 = ( _28__R | _28__C & _05__T ) & { 1{ _05_ != 1'b1 }} ;
  assign _05__R0 = ( _28__R | _28__C & wthru_T ) & { 1{ wthru != 1'b1 }} ;
  assign clk_en_core = re | we;
  assign clk_en_core_S = 0 ;
  logic [0:0] re_C2 ;
  logic [0:0] re_R2 ;
  logic [0:0] re_X2 ;
  logic [0:0] we_C1 ;
  logic [0:0] we_R1 ;
  logic [0:0] we_X1 ;
  assign clk_en_core_T = re_T | we_T ;
  assign re_C2 = clk_en_core_C ;
  assign re_X2 = clk_en_core_X ;
  assign we_C1 = clk_en_core_C ;
  assign we_X1 = clk_en_core_X ;
  assign re_R2 = ( clk_en_core_R | clk_en_core_C & we_T ) & { 1{ we != 1'b1 }} ;
  assign we_R1 = ( clk_en_core_R | clk_en_core_C & re_T ) & { 1{ re != 1'b1 }} ;
  assign _29_ = muxed_re_r0_S | scan_en;
  assign _29__S = 0 ;
  logic [0:0] muxed_re_r0_S_C0 ;
  logic [0:0] muxed_re_r0_S_R0 ;
  logic [0:0] muxed_re_r0_S_X0 ;
  logic [0:0] scan_en_C1 ;
  logic [0:0] scan_en_R1 ;
  logic [0:0] scan_en_X1 ;
  assign _29__T = muxed_re_r0_S_T | scan_en_T ;
  assign muxed_re_r0_S_C0 = _29__C ;
  assign muxed_re_r0_S_X0 = _29__X ;
  assign scan_en_C1 = _29__C ;
  assign scan_en_X1 = _29__X ;
  assign muxed_re_r0_S_R0 = ( _29__R | _29__C & scan_en_T ) & { 1{ scan_en != 1'b1 }} ;
  assign scan_en_R1 = ( _29__R | _29__C & muxed_re_r0_S_T ) & { 1{ muxed_re_r0_S != 1'b1 }} ;
  assign web = _27_ | write_inh;
  assign web_S = 0 ;
  logic [0:0] _27__C0 ;
  logic [0:0] _27__R0 ;
  logic [0:0] _27__X0 ;
  logic [0:0] write_inh_C0 ;
  logic [0:0] write_inh_R0 ;
  logic [0:0] write_inh_X0 ;
  assign web_T = _27__T | write_inh_T ;
  assign _27__C0 = web_C ;
  assign _27__X0 = web_X ;
  assign write_inh_C0 = web_C ;
  assign write_inh_X0 = web_X ;
  assign _27__R0 = ( web_R | web_C & write_inh_T ) & { 1{ write_inh != 1'b1 }} ;
  assign write_inh_R0 = ( web_R | web_C & _27__T ) & { 1{ _27_ != 1'b1 }} ;
  assign piece_re = muxed_re_r0 | _10_;
  assign piece_re_S = 0 ;
  logic [0:0] muxed_re_r0_C0 ;
  logic [0:0] muxed_re_r0_R0 ;
  logic [0:0] muxed_re_r0_X0 ;
  logic [0:0] _10__C0 ;
  logic [0:0] _10__R0 ;
  logic [0:0] _10__X0 ;
  assign piece_re_T = muxed_re_r0_T | _10__T ;
  assign muxed_re_r0_C0 = piece_re_C ;
  assign muxed_re_r0_X0 = piece_re_X ;
  assign _10__C0 = piece_re_C ;
  assign _10__X0 = piece_re_X ;
  assign muxed_re_r0_R0 = ( piece_re_R | piece_re_C & _10__T ) & { 1{ _10_ != 1'b1 }} ;
  assign _10__R0 = ( piece_re_R | piece_re_C & muxed_re_r0_T ) & { 1{ muxed_re_r0 != 1'b1 }} ;
  assign _30_ = _15_ | _13_;
  assign _30__S = 0 ;
  logic [0:0] _15__C0 ;
  logic [0:0] _15__R0 ;
  logic [0:0] _15__X0 ;
  logic [0:0] _13__C0 ;
  logic [0:0] _13__R0 ;
  logic [0:0] _13__X0 ;
  assign _30__T = _15__T | _13__T ;
  assign _15__C0 = _30__C ;
  assign _15__X0 = _30__X ;
  assign _13__C0 = _30__C ;
  assign _13__X0 = _30__X ;
  assign _15__R0 = ( _30__R | _30__C & _13__T ) & { 1{ _13_ != 1'b1 }} ;
  assign _13__R0 = ( _30__R | _30__C & _15__T ) & { 1{ _15_ != 1'b1 }} ;
  assign captureDR_r0 = ary_atpg_ctl | _26_;
  assign captureDR_r0_S = 0 ;
  logic [0:0] ary_atpg_ctl_C0 ;
  logic [0:0] ary_atpg_ctl_R0 ;
  logic [0:0] ary_atpg_ctl_X0 ;
  logic [0:0] _26__C0 ;
  logic [0:0] _26__R0 ;
  logic [0:0] _26__X0 ;
  assign captureDR_r0_T = ary_atpg_ctl_T | _26__T ;
  assign ary_atpg_ctl_C0 = captureDR_r0_C ;
  assign ary_atpg_ctl_X0 = captureDR_r0_X ;
  assign _26__C0 = captureDR_r0_C ;
  assign _26__X0 = captureDR_r0_X ;
  assign ary_atpg_ctl_R0 = ( captureDR_r0_R | captureDR_r0_C & _26__T ) & { 1{ _26_ != 1'b1 }} ;
  assign _26__R0 = ( captureDR_r0_R | captureDR_r0_C & ary_atpg_ctl_T ) & { 1{ ary_atpg_ctl != 1'b1 }} ;
  assign _31_ = mbist_en_r | ary_atpg_ctl;
  assign _31__S = 0 ;
  logic [0:0] mbist_en_r_C5 ;
  logic [0:0] mbist_en_r_R5 ;
  logic [0:0] mbist_en_r_X5 ;
  logic [0:0] ary_atpg_ctl_C1 ;
  logic [0:0] ary_atpg_ctl_R1 ;
  logic [0:0] ary_atpg_ctl_X1 ;
  assign _31__T = mbist_en_r_T | ary_atpg_ctl_T ;
  assign mbist_en_r_C5 = _31__C ;
  assign mbist_en_r_X5 = _31__X ;
  assign ary_atpg_ctl_C1 = _31__C ;
  assign ary_atpg_ctl_X1 = _31__X ;
  assign mbist_en_r_R5 = ( _31__R | _31__C & ary_atpg_ctl_T ) & { 1{ ary_atpg_ctl != 1'b1 }} ;
  assign ary_atpg_ctl_R1 = ( _31__R | _31__C & mbist_en_r_T ) & { 1{ mbist_en_r != 1'b1 }} ;
  assign _32_ = captureDR_r0 | _19_;
  assign _32__S = 0 ;
  logic [0:0] captureDR_r0_C0 ;
  logic [0:0] captureDR_r0_R0 ;
  logic [0:0] captureDR_r0_X0 ;
  logic [0:0] _19__C0 ;
  logic [0:0] _19__R0 ;
  logic [0:0] _19__X0 ;
  assign _32__T = captureDR_r0_T | _19__T ;
  assign captureDR_r0_C0 = _32__C ;
  assign captureDR_r0_X0 = _32__X ;
  assign _19__C0 = _32__C ;
  assign _19__X0 = _32__X ;
  assign captureDR_r0_R0 = ( _32__R | _32__C & _19__T ) & { 1{ _19_ != 1'b1 }} ;
  assign _19__R0 = ( _32__R | _32__C & captureDR_r0_T ) & { 1{ captureDR_r0 != 1'b1 }} ;
  always @(posedge la_bist_clkr0)
      mbist_ce_r0_1p <= mbist_ce_r0;
  logic [0:0] mbist_ce_r0_X1 ;
  logic [0:0] mbist_ce_r0_R1 ;
  logic [0:0] mbist_ce_r0_C1 ;
  assign mbist_ce_r0_X1 = { 1{ mbist_ce_r0_1p_S != mbist_ce_r0_S }} ;
  assign mbist_ce_r0_R1 = 0 ;
  assign mbist_ce_r0_C1 = 0 ;
  always @( posedge la_bist_clkr0 )
      mbist_ce_r0_1p_T 		<= mbist_ramaccess_rst_ ? 0 : ( mbist_ce_r0_T & mbist_ce_r0_X1 );
  always @( posedge la_bist_clkr0 )
      mbist_ce_r0_1p_t_flag 	<= mbist_ramaccess_rst_ ? 0 : mbist_ce_r0_1p_t_flag ? 1 : | mbist_ce_r0_T & ( | mbist_ce_r0_X1 );
  always @( posedge la_bist_clkr0 )
      mbist_ce_r0_1p_r_flag 	<= mbist_ramaccess_rst_ ? 0 : mbist_ce_r0_1p_r_flag ? 1 : mbist_ce_r0_1p_t_flag ? 0 : ( | mbist_ce_r0_1p_R ) ;
  always @(posedge la_bist_clkr0 or negedge mbist_ramaccess_rst_)
    if (!mbist_ramaccess_rst_)
      access_en_r_1p <= 1'b0;
    else
      access_en_r_1p <= access_en_r;
  logic [0:0] access_en_r_X0 ;
  logic [0:0] access_en_r_R0 ;
  logic [0:0] access_en_r_C0 ;
  assign access_en_r_X0 = { 1{ access_en_r_1p_S != access_en_r_S }} ;
  assign access_en_r_R0 = 0 ;
  assign access_en_r_C0 = 0 ;
  always @( posedge la_bist_clkr0 )
      access_en_r_1p_T 		<= !mbist_ramaccess_rst_ ? 0 : ( access_en_r_T & access_en_r_X0 );
  always @( posedge la_bist_clkr0 )
      access_en_r_1p_t_flag 	<= !mbist_ramaccess_rst_ ? 0 : access_en_r_1p_t_flag ? 1 : | access_en_r_T & ( | access_en_r_X0 );
  always @( posedge la_bist_clkr0 )
      access_en_r_1p_r_flag 	<= !mbist_ramaccess_rst_ ? 0 : access_en_r_1p_r_flag ? 1 : access_en_r_1p_t_flag ? 0 : ( | access_en_r_1p_R ) ;
  always @(posedge clk)
      wthru_di <= _00_;
  logic [79:0] _00__X0 ;
  logic [79:0] _00__R0 ;
  logic [79:0] _00__C0 ;
  assign _00__X0 = { 80{ wthru_di_S != _00__S }} ;
  assign _00__R0 = 0 ;
  assign _00__C0 = 0 ;
  always @( posedge clk )
      wthru_di_T 		<= !mbist_ramaccess_rst_ ? 0 : ( _00__T & _00__X0 );
  always @( posedge clk )
      wthru_di_t_flag 	<= !mbist_ramaccess_rst_ ? 0 : wthru_di_t_flag ? 1 : | _00__T & ( | _00__X0 );
  always @( posedge clk )
      wthru_di_r_flag 	<= !mbist_ramaccess_rst_ ? 0 : wthru_di_r_flag ? 1 : wthru_di_t_flag ? 0 : ( | wthru_di_R ) ;
  always @(posedge clk)
      wthru_en <= _01_;
  logic [0:0] _01__X0 ;
  logic [0:0] _01__R0 ;
  logic [0:0] _01__C0 ;
  assign _01__X0 = { 1{ wthru_en_S != _01__S }} ;
  assign _01__R0 = 0 ;
  assign _01__C0 = 0 ;
  always @( posedge clk )
      wthru_en_T 		<= !mbist_ramaccess_rst_ ? 0 : ( _01__T & _01__X0 );
  always @( posedge clk )
      wthru_en_t_flag 	<= !mbist_ramaccess_rst_ ? 0 : wthru_en_t_flag ? 1 : | _01__T & ( | _01__X0 );
  always @( posedge clk )
      wthru_en_r_flag 	<= !mbist_ramaccess_rst_ ? 0 : wthru_en_r_flag ? 1 : wthru_en_t_flag ? 0 : ( | wthru_en_R ) ;
  always @(posedge la_bist_clkr0 or negedge mbist_ramaccess_rst_)
    if (!mbist_ramaccess_rst_)
      updateDR_sync_1p <= 1'b0;
    else
      updateDR_sync_1p <= updateDR_sync;
  logic [0:0] updateDR_sync_X1 ;
  logic [0:0] updateDR_sync_R1 ;
  logic [0:0] updateDR_sync_C1 ;
  assign updateDR_sync_X1 = { 1{ updateDR_sync_1p_S != updateDR_sync_S }} ;
  assign updateDR_sync_R1 = 0 ;
  assign updateDR_sync_C1 = 0 ;
  always @( posedge la_bist_clkr0 )
      updateDR_sync_1p_T 		<= !mbist_ramaccess_rst_ ? 0 : ( updateDR_sync_T & updateDR_sync_X1 );
  always @( posedge la_bist_clkr0 )
      updateDR_sync_1p_t_flag 	<= !mbist_ramaccess_rst_ ? 0 : updateDR_sync_1p_t_flag ? 1 : | updateDR_sync_T & ( | updateDR_sync_X1 );
  always @( posedge la_bist_clkr0 )
      updateDR_sync_1p_r_flag 	<= !mbist_ramaccess_rst_ ? 0 : updateDR_sync_1p_r_flag ? 1 : updateDR_sync_1p_t_flag ? 0 : ( | updateDR_sync_1p_R ) ;
  assign muxed_re_r0 = muxed_re_r0_S ? muxed_re_r0_B : re;
  logic [0:0] muxed_re_r0_S_C1 ;
  logic [0:0] muxed_re_r0_S_R1 ;
  logic [0:0] muxed_re_r0_S_X1 ;
  assign muxed_re_r0_S_C1 = | muxed_re_r0_C ;
  assign muxed_re_r0_S_X1 = | muxed_re_r0_X ;
  assign muxed_re_r0_T = muxed_re_r0_S ? ( { 1{ muxed_re_r0_S_T  }} | muxed_re_r0_B_T ) : ( { 1{ muxed_re_r0_S_T  }} | re_T );
  assign muxed_re_r0_S = muxed_re_r0_S ? muxed_re_r0_B_S : re_S ;
  assign muxed_re_r0_S_R1 = ( | (muxed_re_r0_R | ( muxed_re_r0_C & ( { 1{ muxed_re_r0_S }} & muxed_re_r0_B_T | { 1{ !muxed_re_r0_S }} & re_T )))) && muxed_re_r0_B != re ;
  logic [0:0] muxed_re_r0_B_C0 ;
  logic [0:0] muxed_re_r0_B_R0 ;
  logic [0:0] muxed_re_r0_B_X0 ;
  assign muxed_re_r0_B_C0 = { 1{ muxed_re_r0_S }} ;
  assign muxed_re_r0_B_R0 = { 1{ muxed_re_r0_S }} & ( muxed_re_r0_R | ( { 1{ muxed_re_r0_S_T  }} & muxed_re_r0_C ));
  assign muxed_re_r0_B_X0 = { 1{ muxed_re_r0_S }} & muxed_re_r0_X ;
  logic [0:0] re_C3 ;
  logic [0:0] re_R3 ;
  logic [0:0] re_X3 ;
  assign re_C3 = { 1{ !muxed_re_r0_S }} ;
  assign re_R3 = { 1{ !muxed_re_r0_S }} & ( muxed_re_r0_R | ( { 1{ muxed_re_r0_S_T  }} & muxed_re_r0_C ));
  assign re_X3 = { 1{ !muxed_re_r0_S }} & muxed_re_r0_X ;
  assign muxed_Ra_r0 = muxed_re_r0_S ? muxed_Ra_r0_B : ra;
  logic [0:0] muxed_re_r0_S_C2 ;
  logic [0:0] muxed_re_r0_S_R2 ;
  logic [0:0] muxed_re_r0_S_X2 ;
  assign muxed_re_r0_S_C2 = | muxed_Ra_r0_C ;
  assign muxed_re_r0_S_X2 = | muxed_Ra_r0_X ;
  assign muxed_Ra_r0_T = muxed_re_r0_S ? ( { 5{ muxed_re_r0_S_T  }} | muxed_Ra_r0_B_T ) : ( { 5{ muxed_re_r0_S_T  }} | ra_T );
  assign muxed_Ra_r0_S = muxed_re_r0_S ? muxed_Ra_r0_B_S : ra_S ;
  assign muxed_re_r0_S_R2 = ( | (muxed_Ra_r0_R | ( muxed_Ra_r0_C & ( { 5{ muxed_re_r0_S }} & muxed_Ra_r0_B_T | { 5{ !muxed_re_r0_S }} & ra_T )))) && muxed_Ra_r0_B != ra ;
  logic [4:0] muxed_Ra_r0_B_C0 ;
  logic [4:0] muxed_Ra_r0_B_R0 ;
  logic [4:0] muxed_Ra_r0_B_X0 ;
  assign muxed_Ra_r0_B_C0 = { 5{ muxed_re_r0_S }} ;
  assign muxed_Ra_r0_B_R0 = { 5{ muxed_re_r0_S }} & ( muxed_Ra_r0_R | ( { 5{ muxed_re_r0_S_T  }} & muxed_Ra_r0_C ));
  assign muxed_Ra_r0_B_X0 = { 5{ muxed_re_r0_S }} & muxed_Ra_r0_X ;
  logic [4:0] ra_C1 ;
  logic [4:0] ra_R1 ;
  logic [4:0] ra_X1 ;
  assign ra_C1 = { 5{ !muxed_re_r0_S }} ;
  assign ra_R1 = { 5{ !muxed_re_r0_S }} & ( muxed_Ra_r0_R | ( { 5{ muxed_re_r0_S_T  }} & muxed_Ra_r0_C ));
  assign ra_X1 = { 5{ !muxed_re_r0_S }} & muxed_Ra_r0_X ;
  assign muxed_Ra_r0_B = debug_mode_sync ? Ra_reg_r0_A : mbist_Ra_r0;
  logic [0:0] debug_mode_sync_C3 ;
  logic [0:0] debug_mode_sync_R3 ;
  logic [0:0] debug_mode_sync_X3 ;
  assign debug_mode_sync_C3 = | muxed_Ra_r0_B_C ;
  assign debug_mode_sync_X3 = | muxed_Ra_r0_B_X ;
  assign muxed_Ra_r0_B_T = debug_mode_sync ? ( { 5{ debug_mode_sync_T  }} | Ra_reg_r0_A_T ) : ( { 5{ debug_mode_sync_T  }} | mbist_Ra_r0_T );
  assign muxed_Ra_r0_B_S = debug_mode_sync ? Ra_reg_r0_A_S : mbist_Ra_r0_S ;
  assign debug_mode_sync_R3 = ( | (muxed_Ra_r0_B_R | ( muxed_Ra_r0_B_C & ( { 5{ debug_mode_sync }} & Ra_reg_r0_A_T | { 5{ !debug_mode_sync }} & mbist_Ra_r0_T )))) && Ra_reg_r0_A != mbist_Ra_r0 ;
  logic [4:0] Ra_reg_r0_A_C0 ;
  logic [4:0] Ra_reg_r0_A_R0 ;
  logic [4:0] Ra_reg_r0_A_X0 ;
  assign Ra_reg_r0_A_C0 = { 5{ debug_mode_sync }} ;
  assign Ra_reg_r0_A_R0 = { 5{ debug_mode_sync }} & ( muxed_Ra_r0_B_R | ( { 5{ debug_mode_sync_T  }} & muxed_Ra_r0_B_C ));
  assign Ra_reg_r0_A_X0 = { 5{ debug_mode_sync }} & muxed_Ra_r0_B_X ;
  logic [4:0] mbist_Ra_r0_C0 ;
  logic [4:0] mbist_Ra_r0_R0 ;
  logic [4:0] mbist_Ra_r0_X0 ;
  assign mbist_Ra_r0_C0 = { 5{ !debug_mode_sync }} ;
  assign mbist_Ra_r0_R0 = { 5{ !debug_mode_sync }} & ( muxed_Ra_r0_B_R | ( { 5{ debug_mode_sync_T  }} & muxed_Ra_r0_B_C ));
  assign mbist_Ra_r0_X0 = { 5{ !debug_mode_sync }} & muxed_Ra_r0_B_X ;
  assign muxed_we_w0 = muxed_re_r0_S ? muxed_we_w0_B : we;
  logic [0:0] muxed_re_r0_S_C3 ;
  logic [0:0] muxed_re_r0_S_R3 ;
  logic [0:0] muxed_re_r0_S_X3 ;
  assign muxed_re_r0_S_C3 = | muxed_we_w0_C ;
  assign muxed_re_r0_S_X3 = | muxed_we_w0_X ;
  assign muxed_we_w0_T = muxed_re_r0_S ? ( { 1{ muxed_re_r0_S_T  }} | muxed_we_w0_B_T ) : ( { 1{ muxed_re_r0_S_T  }} | we_T );
  assign muxed_we_w0_S = muxed_re_r0_S ? muxed_we_w0_B_S : we_S ;
  assign muxed_re_r0_S_R3 = ( | (muxed_we_w0_R | ( muxed_we_w0_C & ( { 1{ muxed_re_r0_S }} & muxed_we_w0_B_T | { 1{ !muxed_re_r0_S }} & we_T )))) && muxed_we_w0_B != we ;
  logic [0:0] muxed_we_w0_B_C0 ;
  logic [0:0] muxed_we_w0_B_R0 ;
  logic [0:0] muxed_we_w0_B_X0 ;
  assign muxed_we_w0_B_C0 = { 1{ muxed_re_r0_S }} ;
  assign muxed_we_w0_B_R0 = { 1{ muxed_re_r0_S }} & ( muxed_we_w0_R | ( { 1{ muxed_re_r0_S_T  }} & muxed_we_w0_C ));
  assign muxed_we_w0_B_X0 = { 1{ muxed_re_r0_S }} & muxed_we_w0_X ;
  logic [0:0] we_C2 ;
  logic [0:0] we_R2 ;
  logic [0:0] we_X2 ;
  assign we_C2 = { 1{ !muxed_re_r0_S }} ;
  assign we_R2 = { 1{ !muxed_re_r0_S }} & ( muxed_we_w0_R | ( { 1{ muxed_re_r0_S_T  }} & muxed_we_w0_C ));
  assign we_X2 = { 1{ !muxed_re_r0_S }} & muxed_we_w0_X ;
  assign muxed_Wa_w0 = muxed_re_r0_S ? muxed_Wa_w0_B : wa;
  logic [0:0] muxed_re_r0_S_C4 ;
  logic [0:0] muxed_re_r0_S_R4 ;
  logic [0:0] muxed_re_r0_S_X4 ;
  assign muxed_re_r0_S_C4 = | muxed_Wa_w0_C ;
  assign muxed_re_r0_S_X4 = | muxed_Wa_w0_X ;
  assign muxed_Wa_w0_T = muxed_re_r0_S ? ( { 5{ muxed_re_r0_S_T  }} | muxed_Wa_w0_B_T ) : ( { 5{ muxed_re_r0_S_T  }} | wa_T );
  assign muxed_Wa_w0_S = muxed_re_r0_S ? muxed_Wa_w0_B_S : wa_S ;
  assign muxed_re_r0_S_R4 = ( | (muxed_Wa_w0_R | ( muxed_Wa_w0_C & ( { 5{ muxed_re_r0_S }} & muxed_Wa_w0_B_T | { 5{ !muxed_re_r0_S }} & wa_T )))) && muxed_Wa_w0_B != wa ;
  logic [4:0] muxed_Wa_w0_B_C0 ;
  logic [4:0] muxed_Wa_w0_B_R0 ;
  logic [4:0] muxed_Wa_w0_B_X0 ;
  assign muxed_Wa_w0_B_C0 = { 5{ muxed_re_r0_S }} ;
  assign muxed_Wa_w0_B_R0 = { 5{ muxed_re_r0_S }} & ( muxed_Wa_w0_R | ( { 5{ muxed_re_r0_S_T  }} & muxed_Wa_w0_C ));
  assign muxed_Wa_w0_B_X0 = { 5{ muxed_re_r0_S }} & muxed_Wa_w0_X ;
  logic [4:0] wa_C1 ;
  logic [4:0] wa_R1 ;
  logic [4:0] wa_X1 ;
  assign wa_C1 = { 5{ !muxed_re_r0_S }} ;
  assign wa_R1 = { 5{ !muxed_re_r0_S }} & ( muxed_Wa_w0_R | ( { 5{ muxed_re_r0_S_T  }} & muxed_Wa_w0_C ));
  assign wa_X1 = { 5{ !muxed_re_r0_S }} & muxed_Wa_w0_X ;
  assign muxed_Wa_w0_B = debug_mode_sync ? Wa_reg_w0_A : mbist_Wa_w0;
  logic [0:0] debug_mode_sync_C4 ;
  logic [0:0] debug_mode_sync_R4 ;
  logic [0:0] debug_mode_sync_X4 ;
  assign debug_mode_sync_C4 = | muxed_Wa_w0_B_C ;
  assign debug_mode_sync_X4 = | muxed_Wa_w0_B_X ;
  assign muxed_Wa_w0_B_T = debug_mode_sync ? ( { 5{ debug_mode_sync_T  }} | Wa_reg_w0_A_T ) : ( { 5{ debug_mode_sync_T  }} | mbist_Wa_w0_T );
  assign muxed_Wa_w0_B_S = debug_mode_sync ? Wa_reg_w0_A_S : mbist_Wa_w0_S ;
  assign debug_mode_sync_R4 = ( | (muxed_Wa_w0_B_R | ( muxed_Wa_w0_B_C & ( { 5{ debug_mode_sync }} & Wa_reg_w0_A_T | { 5{ !debug_mode_sync }} & mbist_Wa_w0_T )))) && Wa_reg_w0_A != mbist_Wa_w0 ;
  logic [4:0] Wa_reg_w0_A_C0 ;
  logic [4:0] Wa_reg_w0_A_R0 ;
  logic [4:0] Wa_reg_w0_A_X0 ;
  assign Wa_reg_w0_A_C0 = { 5{ debug_mode_sync }} ;
  assign Wa_reg_w0_A_R0 = { 5{ debug_mode_sync }} & ( muxed_Wa_w0_B_R | ( { 5{ debug_mode_sync_T  }} & muxed_Wa_w0_B_C ));
  assign Wa_reg_w0_A_X0 = { 5{ debug_mode_sync }} & muxed_Wa_w0_B_X ;
  logic [4:0] mbist_Wa_w0_C0 ;
  logic [4:0] mbist_Wa_w0_R0 ;
  logic [4:0] mbist_Wa_w0_X0 ;
  assign mbist_Wa_w0_C0 = { 5{ !debug_mode_sync }} ;
  assign mbist_Wa_w0_R0 = { 5{ !debug_mode_sync }} & ( muxed_Wa_w0_B_R | ( { 5{ debug_mode_sync_T  }} & muxed_Wa_w0_B_C ));
  assign mbist_Wa_w0_X0 = { 5{ !debug_mode_sync }} & muxed_Wa_w0_B_X ;
  assign Wdata = muxed_re_r0_S ? muxed_Di_w0_B : di;
  logic [0:0] muxed_re_r0_S_C5 ;
  logic [0:0] muxed_re_r0_S_R5 ;
  logic [0:0] muxed_re_r0_S_X5 ;
  assign muxed_re_r0_S_C5 = | Wdata_C ;
  assign muxed_re_r0_S_X5 = | Wdata_X ;
  assign Wdata_T = muxed_re_r0_S ? ( { 80{ muxed_re_r0_S_T  }} | muxed_Di_w0_B_T ) : ( { 80{ muxed_re_r0_S_T  }} | di_T );
  assign Wdata_S = muxed_re_r0_S ? muxed_Di_w0_B_S : di_S ;
  assign muxed_re_r0_S_R5 = ( | (Wdata_R | ( Wdata_C & ( { 80{ muxed_re_r0_S }} & muxed_Di_w0_B_T | { 80{ !muxed_re_r0_S }} & di_T )))) && muxed_Di_w0_B != di ;
  logic [79:0] muxed_Di_w0_B_C0 ;
  logic [79:0] muxed_Di_w0_B_R0 ;
  logic [79:0] muxed_Di_w0_B_X0 ;
  assign muxed_Di_w0_B_C0 = { 80{ muxed_re_r0_S }} ;
  assign muxed_Di_w0_B_R0 = { 80{ muxed_re_r0_S }} & ( Wdata_R | ( { 80{ muxed_re_r0_S_T  }} & Wdata_C ));
  assign muxed_Di_w0_B_X0 = { 80{ muxed_re_r0_S }} & Wdata_X ;
  logic [79:0] di_C0 ;
  logic [79:0] di_R0 ;
  logic [79:0] di_X0 ;
  assign di_C0 = { 80{ !muxed_re_r0_S }} ;
  assign di_R0 = { 80{ !muxed_re_r0_S }} & ( Wdata_R | ( { 80{ muxed_re_r0_S_T  }} & Wdata_C ));
  assign di_X0 = { 80{ !muxed_re_r0_S }} & Wdata_X ;
  logic [79:0] fangyuan0;
  logic [79:0] fangyuan0_T ;
  logic [79:0] fangyuan0_R ;
  logic [79:0] fangyuan0_C ;
  logic [79:0] fangyuan0_X ;
  assign fangyuan0 = { mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0 };
  assign fangyuan0_T = {  mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T  };
  logic [13:0] fangyuan0_S ;
  assign fangyuan0_S = 0 ;
  logic [1:0] mbist_Di_w0_R0 ;
  logic [1:0] mbist_Di_w0_X0 ;
  logic [1:0] mbist_Di_w0_C0 ;
  assign mbist_Di_w0_R0 = fangyuan0_R [79:78] ;
  assign mbist_Di_w0_X0 = fangyuan0_X [79:78] ;
  assign mbist_Di_w0_C0 = fangyuan0_C [79:78] ;
  logic [1:0] mbist_Di_w0_R1 ;
  logic [1:0] mbist_Di_w0_X1 ;
  logic [1:0] mbist_Di_w0_C1 ;
  assign mbist_Di_w0_R1 = fangyuan0_R [77:76] ;
  assign mbist_Di_w0_X1 = fangyuan0_X [77:76] ;
  assign mbist_Di_w0_C1 = fangyuan0_C [77:76] ;
  logic [1:0] mbist_Di_w0_R2 ;
  logic [1:0] mbist_Di_w0_X2 ;
  logic [1:0] mbist_Di_w0_C2 ;
  assign mbist_Di_w0_R2 = fangyuan0_R [75:74] ;
  assign mbist_Di_w0_X2 = fangyuan0_X [75:74] ;
  assign mbist_Di_w0_C2 = fangyuan0_C [75:74] ;
  logic [1:0] mbist_Di_w0_R3 ;
  logic [1:0] mbist_Di_w0_X3 ;
  logic [1:0] mbist_Di_w0_C3 ;
  assign mbist_Di_w0_R3 = fangyuan0_R [73:72] ;
  assign mbist_Di_w0_X3 = fangyuan0_X [73:72] ;
  assign mbist_Di_w0_C3 = fangyuan0_C [73:72] ;
  logic [1:0] mbist_Di_w0_R4 ;
  logic [1:0] mbist_Di_w0_X4 ;
  logic [1:0] mbist_Di_w0_C4 ;
  assign mbist_Di_w0_R4 = fangyuan0_R [71:70] ;
  assign mbist_Di_w0_X4 = fangyuan0_X [71:70] ;
  assign mbist_Di_w0_C4 = fangyuan0_C [71:70] ;
  logic [1:0] mbist_Di_w0_R5 ;
  logic [1:0] mbist_Di_w0_X5 ;
  logic [1:0] mbist_Di_w0_C5 ;
  assign mbist_Di_w0_R5 = fangyuan0_R [69:68] ;
  assign mbist_Di_w0_X5 = fangyuan0_X [69:68] ;
  assign mbist_Di_w0_C5 = fangyuan0_C [69:68] ;
  logic [1:0] mbist_Di_w0_R6 ;
  logic [1:0] mbist_Di_w0_X6 ;
  logic [1:0] mbist_Di_w0_C6 ;
  assign mbist_Di_w0_R6 = fangyuan0_R [67:66] ;
  assign mbist_Di_w0_X6 = fangyuan0_X [67:66] ;
  assign mbist_Di_w0_C6 = fangyuan0_C [67:66] ;
  logic [1:0] mbist_Di_w0_R7 ;
  logic [1:0] mbist_Di_w0_X7 ;
  logic [1:0] mbist_Di_w0_C7 ;
  assign mbist_Di_w0_R7 = fangyuan0_R [65:64] ;
  assign mbist_Di_w0_X7 = fangyuan0_X [65:64] ;
  assign mbist_Di_w0_C7 = fangyuan0_C [65:64] ;
  logic [1:0] mbist_Di_w0_R8 ;
  logic [1:0] mbist_Di_w0_X8 ;
  logic [1:0] mbist_Di_w0_C8 ;
  assign mbist_Di_w0_R8 = fangyuan0_R [63:62] ;
  assign mbist_Di_w0_X8 = fangyuan0_X [63:62] ;
  assign mbist_Di_w0_C8 = fangyuan0_C [63:62] ;
  logic [1:0] mbist_Di_w0_R9 ;
  logic [1:0] mbist_Di_w0_X9 ;
  logic [1:0] mbist_Di_w0_C9 ;
  assign mbist_Di_w0_R9 = fangyuan0_R [61:60] ;
  assign mbist_Di_w0_X9 = fangyuan0_X [61:60] ;
  assign mbist_Di_w0_C9 = fangyuan0_C [61:60] ;
  logic [1:0] mbist_Di_w0_R10 ;
  logic [1:0] mbist_Di_w0_X10 ;
  logic [1:0] mbist_Di_w0_C10 ;
  assign mbist_Di_w0_R10 = fangyuan0_R [59:58] ;
  assign mbist_Di_w0_X10 = fangyuan0_X [59:58] ;
  assign mbist_Di_w0_C10 = fangyuan0_C [59:58] ;
  logic [1:0] mbist_Di_w0_R11 ;
  logic [1:0] mbist_Di_w0_X11 ;
  logic [1:0] mbist_Di_w0_C11 ;
  assign mbist_Di_w0_R11 = fangyuan0_R [57:56] ;
  assign mbist_Di_w0_X11 = fangyuan0_X [57:56] ;
  assign mbist_Di_w0_C11 = fangyuan0_C [57:56] ;
  logic [1:0] mbist_Di_w0_R12 ;
  logic [1:0] mbist_Di_w0_X12 ;
  logic [1:0] mbist_Di_w0_C12 ;
  assign mbist_Di_w0_R12 = fangyuan0_R [55:54] ;
  assign mbist_Di_w0_X12 = fangyuan0_X [55:54] ;
  assign mbist_Di_w0_C12 = fangyuan0_C [55:54] ;
  logic [1:0] mbist_Di_w0_R13 ;
  logic [1:0] mbist_Di_w0_X13 ;
  logic [1:0] mbist_Di_w0_C13 ;
  assign mbist_Di_w0_R13 = fangyuan0_R [53:52] ;
  assign mbist_Di_w0_X13 = fangyuan0_X [53:52] ;
  assign mbist_Di_w0_C13 = fangyuan0_C [53:52] ;
  logic [1:0] mbist_Di_w0_R14 ;
  logic [1:0] mbist_Di_w0_X14 ;
  logic [1:0] mbist_Di_w0_C14 ;
  assign mbist_Di_w0_R14 = fangyuan0_R [51:50] ;
  assign mbist_Di_w0_X14 = fangyuan0_X [51:50] ;
  assign mbist_Di_w0_C14 = fangyuan0_C [51:50] ;
  logic [1:0] mbist_Di_w0_R15 ;
  logic [1:0] mbist_Di_w0_X15 ;
  logic [1:0] mbist_Di_w0_C15 ;
  assign mbist_Di_w0_R15 = fangyuan0_R [49:48] ;
  assign mbist_Di_w0_X15 = fangyuan0_X [49:48] ;
  assign mbist_Di_w0_C15 = fangyuan0_C [49:48] ;
  logic [1:0] mbist_Di_w0_R16 ;
  logic [1:0] mbist_Di_w0_X16 ;
  logic [1:0] mbist_Di_w0_C16 ;
  assign mbist_Di_w0_R16 = fangyuan0_R [47:46] ;
  assign mbist_Di_w0_X16 = fangyuan0_X [47:46] ;
  assign mbist_Di_w0_C16 = fangyuan0_C [47:46] ;
  logic [1:0] mbist_Di_w0_R17 ;
  logic [1:0] mbist_Di_w0_X17 ;
  logic [1:0] mbist_Di_w0_C17 ;
  assign mbist_Di_w0_R17 = fangyuan0_R [45:44] ;
  assign mbist_Di_w0_X17 = fangyuan0_X [45:44] ;
  assign mbist_Di_w0_C17 = fangyuan0_C [45:44] ;
  logic [1:0] mbist_Di_w0_R18 ;
  logic [1:0] mbist_Di_w0_X18 ;
  logic [1:0] mbist_Di_w0_C18 ;
  assign mbist_Di_w0_R18 = fangyuan0_R [43:42] ;
  assign mbist_Di_w0_X18 = fangyuan0_X [43:42] ;
  assign mbist_Di_w0_C18 = fangyuan0_C [43:42] ;
  logic [1:0] mbist_Di_w0_R19 ;
  logic [1:0] mbist_Di_w0_X19 ;
  logic [1:0] mbist_Di_w0_C19 ;
  assign mbist_Di_w0_R19 = fangyuan0_R [41:40] ;
  assign mbist_Di_w0_X19 = fangyuan0_X [41:40] ;
  assign mbist_Di_w0_C19 = fangyuan0_C [41:40] ;
  logic [1:0] mbist_Di_w0_R20 ;
  logic [1:0] mbist_Di_w0_X20 ;
  logic [1:0] mbist_Di_w0_C20 ;
  assign mbist_Di_w0_R20 = fangyuan0_R [39:38] ;
  assign mbist_Di_w0_X20 = fangyuan0_X [39:38] ;
  assign mbist_Di_w0_C20 = fangyuan0_C [39:38] ;
  logic [1:0] mbist_Di_w0_R21 ;
  logic [1:0] mbist_Di_w0_X21 ;
  logic [1:0] mbist_Di_w0_C21 ;
  assign mbist_Di_w0_R21 = fangyuan0_R [37:36] ;
  assign mbist_Di_w0_X21 = fangyuan0_X [37:36] ;
  assign mbist_Di_w0_C21 = fangyuan0_C [37:36] ;
  logic [1:0] mbist_Di_w0_R22 ;
  logic [1:0] mbist_Di_w0_X22 ;
  logic [1:0] mbist_Di_w0_C22 ;
  assign mbist_Di_w0_R22 = fangyuan0_R [35:34] ;
  assign mbist_Di_w0_X22 = fangyuan0_X [35:34] ;
  assign mbist_Di_w0_C22 = fangyuan0_C [35:34] ;
  logic [1:0] mbist_Di_w0_R23 ;
  logic [1:0] mbist_Di_w0_X23 ;
  logic [1:0] mbist_Di_w0_C23 ;
  assign mbist_Di_w0_R23 = fangyuan0_R [33:32] ;
  assign mbist_Di_w0_X23 = fangyuan0_X [33:32] ;
  assign mbist_Di_w0_C23 = fangyuan0_C [33:32] ;
  logic [1:0] mbist_Di_w0_R24 ;
  logic [1:0] mbist_Di_w0_X24 ;
  logic [1:0] mbist_Di_w0_C24 ;
  assign mbist_Di_w0_R24 = fangyuan0_R [31:30] ;
  assign mbist_Di_w0_X24 = fangyuan0_X [31:30] ;
  assign mbist_Di_w0_C24 = fangyuan0_C [31:30] ;
  logic [1:0] mbist_Di_w0_R25 ;
  logic [1:0] mbist_Di_w0_X25 ;
  logic [1:0] mbist_Di_w0_C25 ;
  assign mbist_Di_w0_R25 = fangyuan0_R [29:28] ;
  assign mbist_Di_w0_X25 = fangyuan0_X [29:28] ;
  assign mbist_Di_w0_C25 = fangyuan0_C [29:28] ;
  logic [1:0] mbist_Di_w0_R26 ;
  logic [1:0] mbist_Di_w0_X26 ;
  logic [1:0] mbist_Di_w0_C26 ;
  assign mbist_Di_w0_R26 = fangyuan0_R [27:26] ;
  assign mbist_Di_w0_X26 = fangyuan0_X [27:26] ;
  assign mbist_Di_w0_C26 = fangyuan0_C [27:26] ;
  logic [1:0] mbist_Di_w0_R27 ;
  logic [1:0] mbist_Di_w0_X27 ;
  logic [1:0] mbist_Di_w0_C27 ;
  assign mbist_Di_w0_R27 = fangyuan0_R [25:24] ;
  assign mbist_Di_w0_X27 = fangyuan0_X [25:24] ;
  assign mbist_Di_w0_C27 = fangyuan0_C [25:24] ;
  logic [1:0] mbist_Di_w0_R28 ;
  logic [1:0] mbist_Di_w0_X28 ;
  logic [1:0] mbist_Di_w0_C28 ;
  assign mbist_Di_w0_R28 = fangyuan0_R [23:22] ;
  assign mbist_Di_w0_X28 = fangyuan0_X [23:22] ;
  assign mbist_Di_w0_C28 = fangyuan0_C [23:22] ;
  logic [1:0] mbist_Di_w0_R29 ;
  logic [1:0] mbist_Di_w0_X29 ;
  logic [1:0] mbist_Di_w0_C29 ;
  assign mbist_Di_w0_R29 = fangyuan0_R [21:20] ;
  assign mbist_Di_w0_X29 = fangyuan0_X [21:20] ;
  assign mbist_Di_w0_C29 = fangyuan0_C [21:20] ;
  logic [1:0] mbist_Di_w0_R30 ;
  logic [1:0] mbist_Di_w0_X30 ;
  logic [1:0] mbist_Di_w0_C30 ;
  assign mbist_Di_w0_R30 = fangyuan0_R [19:18] ;
  assign mbist_Di_w0_X30 = fangyuan0_X [19:18] ;
  assign mbist_Di_w0_C30 = fangyuan0_C [19:18] ;
  logic [1:0] mbist_Di_w0_R31 ;
  logic [1:0] mbist_Di_w0_X31 ;
  logic [1:0] mbist_Di_w0_C31 ;
  assign mbist_Di_w0_R31 = fangyuan0_R [17:16] ;
  assign mbist_Di_w0_X31 = fangyuan0_X [17:16] ;
  assign mbist_Di_w0_C31 = fangyuan0_C [17:16] ;
  logic [1:0] mbist_Di_w0_R32 ;
  logic [1:0] mbist_Di_w0_X32 ;
  logic [1:0] mbist_Di_w0_C32 ;
  assign mbist_Di_w0_R32 = fangyuan0_R [15:14] ;
  assign mbist_Di_w0_X32 = fangyuan0_X [15:14] ;
  assign mbist_Di_w0_C32 = fangyuan0_C [15:14] ;
  logic [1:0] mbist_Di_w0_R33 ;
  logic [1:0] mbist_Di_w0_X33 ;
  logic [1:0] mbist_Di_w0_C33 ;
  assign mbist_Di_w0_R33 = fangyuan0_R [13:12] ;
  assign mbist_Di_w0_X33 = fangyuan0_X [13:12] ;
  assign mbist_Di_w0_C33 = fangyuan0_C [13:12] ;
  logic [1:0] mbist_Di_w0_R34 ;
  logic [1:0] mbist_Di_w0_X34 ;
  logic [1:0] mbist_Di_w0_C34 ;
  assign mbist_Di_w0_R34 = fangyuan0_R [11:10] ;
  assign mbist_Di_w0_X34 = fangyuan0_X [11:10] ;
  assign mbist_Di_w0_C34 = fangyuan0_C [11:10] ;
  logic [1:0] mbist_Di_w0_R35 ;
  logic [1:0] mbist_Di_w0_X35 ;
  logic [1:0] mbist_Di_w0_C35 ;
  assign mbist_Di_w0_R35 = fangyuan0_R [9:8] ;
  assign mbist_Di_w0_X35 = fangyuan0_X [9:8] ;
  assign mbist_Di_w0_C35 = fangyuan0_C [9:8] ;
  logic [1:0] mbist_Di_w0_R36 ;
  logic [1:0] mbist_Di_w0_X36 ;
  logic [1:0] mbist_Di_w0_C36 ;
  assign mbist_Di_w0_R36 = fangyuan0_R [7:6] ;
  assign mbist_Di_w0_X36 = fangyuan0_X [7:6] ;
  assign mbist_Di_w0_C36 = fangyuan0_C [7:6] ;
  logic [1:0] mbist_Di_w0_R37 ;
  logic [1:0] mbist_Di_w0_X37 ;
  logic [1:0] mbist_Di_w0_C37 ;
  assign mbist_Di_w0_R37 = fangyuan0_R [5:4] ;
  assign mbist_Di_w0_X37 = fangyuan0_X [5:4] ;
  assign mbist_Di_w0_C37 = fangyuan0_C [5:4] ;
  logic [1:0] mbist_Di_w0_R38 ;
  logic [1:0] mbist_Di_w0_X38 ;
  logic [1:0] mbist_Di_w0_C38 ;
  assign mbist_Di_w0_R38 = fangyuan0_R [3:2] ;
  assign mbist_Di_w0_X38 = fangyuan0_X [3:2] ;
  assign mbist_Di_w0_C38 = fangyuan0_C [3:2] ;
  logic [1:0] mbist_Di_w0_R39 ;
  logic [1:0] mbist_Di_w0_X39 ;
  logic [1:0] mbist_Di_w0_C39 ;
  assign mbist_Di_w0_R39 = fangyuan0_R [1:0] ;
  assign mbist_Di_w0_X39 = fangyuan0_X [1:0] ;
  assign mbist_Di_w0_C39 = fangyuan0_C [1:0] ;

  assign muxed_Di_w0_B = debug_mode_sync ? data_regq : fangyuan0;
  logic [0:0] debug_mode_sync_C5 ;
  logic [0:0] debug_mode_sync_R5 ;
  logic [0:0] debug_mode_sync_X5 ;
  assign debug_mode_sync_C5 = | muxed_Di_w0_B_C ;
  assign debug_mode_sync_X5 = | muxed_Di_w0_B_X ;
  assign muxed_Di_w0_B_T = debug_mode_sync ? ( { 80{ debug_mode_sync_T  }} | data_regq_T ) : ( { 80{ debug_mode_sync_T  }} | fangyuan0_T );
  assign muxed_Di_w0_B_S = debug_mode_sync ? data_regq_S : fangyuan0_S ;
  assign debug_mode_sync_R5 = ( | (muxed_Di_w0_B_R | ( muxed_Di_w0_B_C & ( { 80{ debug_mode_sync }} & data_regq_T | { 80{ !debug_mode_sync }} & fangyuan0_T )))) && data_regq != fangyuan0 ;
  logic [79:0] data_regq_C0 ;
  logic [79:0] data_regq_R0 ;
  logic [79:0] data_regq_X0 ;
  assign data_regq_C0 = { 80{ debug_mode_sync }} ;
  assign data_regq_R0 = { 80{ debug_mode_sync }} & ( muxed_Di_w0_B_R | ( { 80{ debug_mode_sync_T  }} & muxed_Di_w0_B_C ));
  assign data_regq_X0 = { 80{ debug_mode_sync }} & muxed_Di_w0_B_X ;
  logic [79:0] fangyuan0_C0 ;
  logic [79:0] fangyuan0_R0 ;
  logic [79:0] fangyuan0_X0 ;
  assign fangyuan0_C0 = { 80{ !debug_mode_sync }} ;
  assign fangyuan0_R0 = { 80{ !debug_mode_sync }} & ( muxed_Di_w0_B_R | ( { 80{ debug_mode_sync_T  }} & muxed_Di_w0_B_C ));
  assign fangyuan0_X0 = { 80{ !debug_mode_sync }} & muxed_Di_w0_B_X ;
  assign _00_ = wthru ? di : wthru_di;
  logic [0:0] wthru_C1 ;
  logic [0:0] wthru_R1 ;
  logic [0:0] wthru_X1 ;
  assign wthru_C1 = | _00__C ;
  assign wthru_X1 = | _00__X ;
  assign _00__T = wthru ? ( { 80{ wthru_T  }} | di_T ) : ( { 80{ wthru_T  }} | wthru_di_T );
  assign _00__S = wthru ? di_S : wthru_di_S ;
  assign wthru_R1 = ( | (_00__R | ( _00__C & ( { 80{ wthru }} & di_T | { 80{ !wthru }} & wthru_di_T )))) && di != wthru_di ;
  logic [79:0] di_C1 ;
  logic [79:0] di_R1 ;
  logic [79:0] di_X1 ;
  assign di_C1 = { 80{ wthru }} ;
  assign di_R1 = { 80{ wthru }} & ( _00__R | ( { 80{ wthru_T  }} & _00__C ));
  assign di_X1 = { 80{ wthru }} & _00__X ;
  logic [79:0] wthru_di_C0 ;
  logic [79:0] wthru_di_R0 ;
  logic [79:0] wthru_di_X0 ;
  assign wthru_di_C0 = { 80{ !wthru }} ;
  assign wthru_di_R0 = { 80{ !wthru }} & ( _00__R | ( { 80{ wthru_T  }} & _00__C ));
  assign wthru_di_X0 = { 80{ !wthru }} & _00__X ;
  assign muxed_we_w0_B = debug_mode_sync ? _07_ : _08_;
  logic [0:0] debug_mode_sync_C6 ;
  logic [0:0] debug_mode_sync_R6 ;
  logic [0:0] debug_mode_sync_X6 ;
  assign debug_mode_sync_C6 = | muxed_we_w0_B_C ;
  assign debug_mode_sync_X6 = | muxed_we_w0_B_X ;
  assign muxed_we_w0_B_T = debug_mode_sync ? ( { 1{ debug_mode_sync_T  }} | _07__T ) : ( { 1{ debug_mode_sync_T  }} | _08__T );
  assign muxed_we_w0_B_S = debug_mode_sync ? _07__S : _08__S ;
  assign debug_mode_sync_R6 = ( | (muxed_we_w0_B_R | ( muxed_we_w0_B_C & ( { 1{ debug_mode_sync }} & _07__T | { 1{ !debug_mode_sync }} & _08__T )))) && _07_ != _08_ ;
  logic [0:0] _07__C0 ;
  logic [0:0] _07__R0 ;
  logic [0:0] _07__X0 ;
  assign _07__C0 = { 1{ debug_mode_sync }} ;
  assign _07__R0 = { 1{ debug_mode_sync }} & ( muxed_we_w0_B_R | ( { 1{ debug_mode_sync_T  }} & muxed_we_w0_B_C ));
  assign _07__X0 = { 1{ debug_mode_sync }} & muxed_we_w0_B_X ;
  logic [0:0] _08__C0 ;
  logic [0:0] _08__R0 ;
  logic [0:0] _08__X0 ;
  assign _08__C0 = { 1{ !debug_mode_sync }} ;
  assign _08__R0 = { 1{ !debug_mode_sync }} & ( muxed_we_w0_B_R | ( { 1{ debug_mode_sync_T  }} & muxed_we_w0_B_C ));
  assign _08__X0 = { 1{ !debug_mode_sync }} & muxed_we_w0_B_X ;
  assign muxed_re_r0_B = debug_mode_sync ? access_en_r : _09_;
  logic [0:0] debug_mode_sync_C7 ;
  logic [0:0] debug_mode_sync_R7 ;
  logic [0:0] debug_mode_sync_X7 ;
  assign debug_mode_sync_C7 = | muxed_re_r0_B_C ;
  assign debug_mode_sync_X7 = | muxed_re_r0_B_X ;
  assign muxed_re_r0_B_T = debug_mode_sync ? ( { 1{ debug_mode_sync_T  }} | access_en_r_T ) : ( { 1{ debug_mode_sync_T  }} | _09__T );
  assign muxed_re_r0_B_S = debug_mode_sync ? access_en_r_S : _09__S ;
  assign debug_mode_sync_R7 = ( | (muxed_re_r0_B_R | ( muxed_re_r0_B_C & ( { 1{ debug_mode_sync }} & access_en_r_T | { 1{ !debug_mode_sync }} & _09__T )))) && access_en_r != _09_ ;
  logic [0:0] access_en_r_C1 ;
  logic [0:0] access_en_r_R1 ;
  logic [0:0] access_en_r_X1 ;
  assign access_en_r_C1 = { 1{ debug_mode_sync }} ;
  assign access_en_r_R1 = { 1{ debug_mode_sync }} & ( muxed_re_r0_B_R | ( { 1{ debug_mode_sync_T  }} & muxed_re_r0_B_C ));
  assign access_en_r_X1 = { 1{ debug_mode_sync }} & muxed_re_r0_B_X ;
  logic [0:0] _09__C0 ;
  logic [0:0] _09__R0 ;
  logic [0:0] _09__X0 ;
  assign _09__C0 = { 1{ !debug_mode_sync }} ;
  assign _09__R0 = { 1{ !debug_mode_sync }} & ( muxed_re_r0_B_R | ( { 1{ debug_mode_sync_T  }} & muxed_re_r0_B_C ));
  assign _09__X0 = { 1{ !debug_mode_sync }} & muxed_re_r0_B_X ;
  assign r0_OutputMuxDataOut = ram_bypass ? Wdata : dout_0_0;
  logic [0:0] ram_bypass_C0 ;
  logic [0:0] ram_bypass_R0 ;
  logic [0:0] ram_bypass_X0 ;
  assign ram_bypass_C0 = | r0_OutputMuxDataOut_C ;
  assign ram_bypass_X0 = | r0_OutputMuxDataOut_X ;
  assign r0_OutputMuxDataOut_T = ram_bypass ? ( { 80{ ram_bypass_T  }} | Wdata_T ) : ( { 80{ ram_bypass_T  }} | dout_0_0_T );
  assign r0_OutputMuxDataOut_S = ram_bypass ? Wdata_S : dout_0_0_S ;
  assign ram_bypass_R0 = ( | (r0_OutputMuxDataOut_R | ( r0_OutputMuxDataOut_C & ( { 80{ ram_bypass }} & Wdata_T | { 80{ !ram_bypass }} & dout_0_0_T )))) && Wdata != dout_0_0 ;
  logic [79:0] Wdata_C0 ;
  logic [79:0] Wdata_R0 ;
  logic [79:0] Wdata_X0 ;
  assign Wdata_C0 = { 80{ ram_bypass }} ;
  assign Wdata_R0 = { 80{ ram_bypass }} & ( r0_OutputMuxDataOut_R | ( { 80{ ram_bypass_T  }} & r0_OutputMuxDataOut_C ));
  assign Wdata_X0 = { 80{ ram_bypass }} & r0_OutputMuxDataOut_X ;
  logic [79:0] dout_0_0_C0 ;
  logic [79:0] dout_0_0_R0 ;
  logic [79:0] dout_0_0_X0 ;
  assign dout_0_0_C0 = { 80{ !ram_bypass }} ;
  assign dout_0_0_R0 = { 80{ !ram_bypass }} & ( r0_OutputMuxDataOut_R | ( { 80{ ram_bypass_T  }} & r0_OutputMuxDataOut_C ));
  assign dout_0_0_X0 = { 80{ !ram_bypass }} & r0_OutputMuxDataOut_X ;
  assign functional_byp_muxed_r0_OutputMuxDataOut = _13_ ? dbyp : wthru_di;
  logic [0:0] _13__C1 ;
  logic [0:0] _13__R1 ;
  logic [0:0] _13__X1 ;
  assign _13__C1 = | functional_byp_muxed_r0_OutputMuxDataOut_C ;
  assign _13__X1 = | functional_byp_muxed_r0_OutputMuxDataOut_X ;
  assign functional_byp_muxed_r0_OutputMuxDataOut_T = _13_ ? ( { 80{ _13__T  }} | dbyp_T ) : ( { 80{ _13__T  }} | wthru_di_T );
  assign functional_byp_muxed_r0_OutputMuxDataOut_S = _13_ ? dbyp_S : wthru_di_S ;
  assign _13__R1 = ( | (functional_byp_muxed_r0_OutputMuxDataOut_R | ( functional_byp_muxed_r0_OutputMuxDataOut_C & ( { 80{ _13_ }} & dbyp_T | { 80{ !_13_ }} & wthru_di_T )))) && dbyp != wthru_di ;
  logic [79:0] dbyp_C0 ;
  logic [79:0] dbyp_R0 ;
  logic [79:0] dbyp_X0 ;
  assign dbyp_C0 = { 80{ _13_ }} ;
  assign dbyp_R0 = { 80{ _13_ }} & ( functional_byp_muxed_r0_OutputMuxDataOut_R | ( { 80{ _13__T  }} & functional_byp_muxed_r0_OutputMuxDataOut_C ));
  assign dbyp_X0 = { 80{ _13_ }} & functional_byp_muxed_r0_OutputMuxDataOut_X ;
  logic [79:0] wthru_di_C1 ;
  logic [79:0] wthru_di_R1 ;
  logic [79:0] wthru_di_X1 ;
  assign wthru_di_C1 = { 80{ !_13_ }} ;
  assign wthru_di_R1 = { 80{ !_13_ }} & ( functional_byp_muxed_r0_OutputMuxDataOut_R | ( { 80{ _13__T  }} & functional_byp_muxed_r0_OutputMuxDataOut_C ));
  assign wthru_di_X1 = { 80{ !_13_ }} & functional_byp_muxed_r0_OutputMuxDataOut_X ;
  assign muxed_r0_OutputMuxDataOut = _30_ ? functional_byp_muxed_r0_OutputMuxDataOut : r0_OutputMuxDataOut;
  logic [0:0] _30__C0 ;
  logic [0:0] _30__R0 ;
  logic [0:0] _30__X0 ;
  assign _30__C0 = | muxed_r0_OutputMuxDataOut_C ;
  assign _30__X0 = | muxed_r0_OutputMuxDataOut_X ;
  assign muxed_r0_OutputMuxDataOut_T = _30_ ? ( { 80{ _30__T  }} | functional_byp_muxed_r0_OutputMuxDataOut_T ) : ( { 80{ _30__T  }} | r0_OutputMuxDataOut_T );
  assign muxed_r0_OutputMuxDataOut_S = _30_ ? functional_byp_muxed_r0_OutputMuxDataOut_S : r0_OutputMuxDataOut_S ;
  assign _30__R0 = ( | (muxed_r0_OutputMuxDataOut_R | ( muxed_r0_OutputMuxDataOut_C & ( { 80{ _30_ }} & functional_byp_muxed_r0_OutputMuxDataOut_T | { 80{ !_30_ }} & r0_OutputMuxDataOut_T )))) && functional_byp_muxed_r0_OutputMuxDataOut != r0_OutputMuxDataOut ;
  logic [79:0] functional_byp_muxed_r0_OutputMuxDataOut_C0 ;
  logic [79:0] functional_byp_muxed_r0_OutputMuxDataOut_R0 ;
  logic [79:0] functional_byp_muxed_r0_OutputMuxDataOut_X0 ;
  assign functional_byp_muxed_r0_OutputMuxDataOut_C0 = { 80{ _30_ }} ;
  assign functional_byp_muxed_r0_OutputMuxDataOut_R0 = { 80{ _30_ }} & ( muxed_r0_OutputMuxDataOut_R | ( { 80{ _30__T  }} & muxed_r0_OutputMuxDataOut_C ));
  assign functional_byp_muxed_r0_OutputMuxDataOut_X0 = { 80{ _30_ }} & muxed_r0_OutputMuxDataOut_X ;
  logic [79:0] r0_OutputMuxDataOut_C0 ;
  logic [79:0] r0_OutputMuxDataOut_R0 ;
  logic [79:0] r0_OutputMuxDataOut_X0 ;
  assign r0_OutputMuxDataOut_C0 = { 80{ !_30_ }} ;
  assign r0_OutputMuxDataOut_R0 = { 80{ !_30_ }} & ( muxed_r0_OutputMuxDataOut_R | ( { 80{ _30__T  }} & muxed_r0_OutputMuxDataOut_C ));
  assign r0_OutputMuxDataOut_X0 = { 80{ !_30_ }} & muxed_r0_OutputMuxDataOut_X ;
  assign _33_ = debug_mode_sync ? access_en_r_1p : _18_;
  logic [0:0] debug_mode_sync_C8 ;
  logic [0:0] debug_mode_sync_R8 ;
  logic [0:0] debug_mode_sync_X8 ;
  assign debug_mode_sync_C8 = | _33__C ;
  assign debug_mode_sync_X8 = | _33__X ;
  assign _33__T = debug_mode_sync ? ( { 1{ debug_mode_sync_T  }} | access_en_r_1p_T ) : ( { 1{ debug_mode_sync_T  }} | _18__T );
  assign _33__S = debug_mode_sync ? access_en_r_1p_S : _18__S ;
  assign debug_mode_sync_R8 = ( | (_33__R | ( _33__C & ( { 1{ debug_mode_sync }} & access_en_r_1p_T | { 1{ !debug_mode_sync }} & _18__T )))) && access_en_r_1p != _18_ ;
  logic [0:0] access_en_r_1p_C0 ;
  logic [0:0] access_en_r_1p_R0 ;
  logic [0:0] access_en_r_1p_X0 ;
  assign access_en_r_1p_C0 = { 1{ debug_mode_sync }} ;
  assign access_en_r_1p_R0 = { 1{ debug_mode_sync }} & ( _33__R | ( { 1{ debug_mode_sync_T  }} & _33__C ));
  assign access_en_r_1p_X0 = { 1{ debug_mode_sync }} & _33__X ;
  logic [0:0] _18__C0 ;
  logic [0:0] _18__R0 ;
  logic [0:0] _18__X0 ;
  assign _18__C0 = { 1{ !debug_mode_sync }} ;
  assign _18__R0 = { 1{ !debug_mode_sync }} & ( _33__R | ( { 1{ debug_mode_sync_T  }} & _33__C ));
  assign _18__X0 = { 1{ !debug_mode_sync }} & _33__X ;
  assign _34_ = debug_mode_sync ? shiftDR : _31_;
  logic [0:0] debug_mode_sync_C9 ;
  logic [0:0] debug_mode_sync_R9 ;
  logic [0:0] debug_mode_sync_X9 ;
  assign debug_mode_sync_C9 = | _34__C ;
  assign debug_mode_sync_X9 = | _34__X ;
  assign _34__T = debug_mode_sync ? ( { 1{ debug_mode_sync_T  }} | shiftDR_T ) : ( { 1{ debug_mode_sync_T  }} | _31__T );
  assign _34__S = debug_mode_sync ? shiftDR_S : _31__S ;
  assign debug_mode_sync_R9 = ( | (_34__R | ( _34__C & ( { 1{ debug_mode_sync }} & shiftDR_T | { 1{ !debug_mode_sync }} & _31__T )))) && shiftDR != _31_ ;
  logic [0:0] shiftDR_C1 ;
  logic [0:0] shiftDR_R1 ;
  logic [0:0] shiftDR_X1 ;
  assign shiftDR_C1 = { 1{ debug_mode_sync }} ;
  assign shiftDR_R1 = { 1{ debug_mode_sync }} & ( _34__R | ( { 1{ debug_mode_sync_T  }} & _34__C ));
  assign shiftDR_X1 = { 1{ debug_mode_sync }} & _34__X ;
  logic [0:0] _31__C0 ;
  logic [0:0] _31__R0 ;
  logic [0:0] _31__X0 ;
  assign _31__C0 = { 1{ !debug_mode_sync }} ;
  assign _31__R0 = { 1{ !debug_mode_sync }} & ( _34__R | ( { 1{ debug_mode_sync_T  }} & _34__C ));
  assign _31__X0 = { 1{ !debug_mode_sync }} & _34__X ;
  logic [0:0] clk_R0 ;
  logic [0:0] clk_X0 ;
  logic [0:0] clk_C0 ;
  logic [0:0] mbist_ramaccess_rst__R0 ;
  logic [0:0] mbist_ramaccess_rst__X0 ;
  logic [0:0] mbist_ramaccess_rst__C0 ;
  logic [0:0] scan_en_R2 ;
  logic [0:0] scan_en_X2 ;
  logic [0:0] scan_en_C2 ;
// module: CKLNQD12PO4
  CKLNQD12PO4 CLK_GATE_clk (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R0  ),
    .CP_X (  clk_X0  ),
    .CP_C (  clk_C0  ),
    .CP_S (  clk_S  ),
    .E_T (  mbist_ramaccess_rst__T  ),
    .E_R (  mbist_ramaccess_rst__R0  ),
    .E_X (  mbist_ramaccess_rst__X0  ),
    .E_C (  mbist_ramaccess_rst__C0  ),
    .E_S (  mbist_ramaccess_rst__S  ),
    .TE_T (  scan_en_T  ),
    .TE_R (  scan_en_R2  ),
    .TE_X (  scan_en_X2  ),
    .TE_C (  scan_en_C2  ),
    .TE_S (  scan_en_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  dft_rst_gated_clk_T  ),
    .Q_R0 (  dft_rst_gated_clk_R  ),
    .Q_X0 (  dft_rst_gated_clk_X  ),
    .Q_C0 (  dft_rst_gated_clk_C  ),
    .Q_S ( dft_rst_gated_clk_S ),
    .TE ( scan_en ),
    .Q ( dft_rst_gated_clk ),
    .CP ( clk ),
    .E ( mbist_ramaccess_rst_ )
  );
  logic [0:0] clk_R1 ;
  logic [0:0] clk_X1 ;
  logic [0:0] clk_C1 ;
  logic [0:0] clk_en_core_R0 ;
  logic [0:0] clk_en_core_X0 ;
  logic [0:0] clk_en_core_C0 ;
  logic [0:0] _29__R0 ;
  logic [0:0] _29__X0 ;
  logic [0:0] _29__C0 ;
// module: CKLNQD12PO4
  CKLNQD12PO4 UJ_clk_gate_core (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R1  ),
    .CP_X (  clk_X1  ),
    .CP_C (  clk_C1  ),
    .CP_S (  clk_S  ),
    .E_T (  clk_en_core_T  ),
    .E_R (  clk_en_core_R0  ),
    .E_X (  clk_en_core_X0  ),
    .E_C (  clk_en_core_C0  ),
    .E_S (  clk_en_core_S  ),
    .TE_T (  _29__T  ),
    .TE_R (  _29__R0  ),
    .TE_X (  _29__X0  ),
    .TE_C (  _29__C0  ),
    .TE_S (  _29__S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  gated_clk_core_T  ),
    .Q_R0 (  gated_clk_core_R  ),
    .Q_X0 (  gated_clk_core_X  ),
    .Q_C0 (  gated_clk_core_C  ),
    .Q_S ( gated_clk_core_S ),
    .TE ( _29_ ),
    .Q ( gated_clk_core ),
    .CP ( clk ),
    .E ( clk_en_core )
  );
  logic [0:0] clk_R2 ;
  logic [0:0] clk_X2 ;
  logic [0:0] clk_C2 ;
  logic [0:0] _32__R0 ;
  logic [0:0] _32__X0 ;
  logic [0:0] _32__C0 ;
  logic [0:0] scan_en_R3 ;
  logic [0:0] scan_en_X3 ;
  logic [0:0] scan_en_C3 ;
// module: CKLNQD12PO4
  CKLNQD12PO4 UJ_clk_jtag_Data_reg_r0 (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R2  ),
    .CP_X (  clk_X2  ),
    .CP_C (  clk_C2  ),
    .CP_S (  clk_S  ),
    .E_T (  _32__T  ),
    .E_R (  _32__R0  ),
    .E_X (  _32__X0  ),
    .E_C (  _32__C0  ),
    .E_S (  _32__S  ),
    .TE_T (  scan_en_T  ),
    .TE_R (  scan_en_R3  ),
    .TE_X (  scan_en_X3  ),
    .TE_C (  scan_en_C3  ),
    .TE_S (  scan_en_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  gated_clk_jtag_Data_reg_r0_T  ),
    .Q_R0 (  gated_clk_jtag_Data_reg_r0_R  ),
    .Q_X0 (  gated_clk_jtag_Data_reg_r0_X  ),
    .Q_C0 (  gated_clk_jtag_Data_reg_r0_C  ),
    .Q_S ( gated_clk_jtag_Data_reg_r0_S ),
    .TE ( scan_en ),
    .Q ( gated_clk_jtag_Data_reg_r0 ),
    .CP ( clk ),
    .E ( _32_ )
  );
  logic [0:0] clk_R3 ;
  logic [0:0] clk_X3 ;
  logic [0:0] clk_C3 ;
  logic [0:0] _34__R0 ;
  logic [0:0] _34__X0 ;
  logic [0:0] _34__C0 ;
  logic [0:0] scan_en_R4 ;
  logic [0:0] scan_en_X4 ;
  logic [0:0] scan_en_C4 ;
// module: CKLNQD12PO4
  CKLNQD12PO4 UJ_clk_jtag_Wa_reg_w0 (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R3  ),
    .CP_X (  clk_X3  ),
    .CP_C (  clk_C3  ),
    .CP_S (  clk_S  ),
    .E_T (  _34__T  ),
    .E_R (  _34__R0  ),
    .E_X (  _34__X0  ),
    .E_C (  _34__C0  ),
    .E_S (  _34__S  ),
    .TE_T (  scan_en_T  ),
    .TE_R (  scan_en_R4  ),
    .TE_X (  scan_en_X4  ),
    .TE_C (  scan_en_C4  ),
    .TE_S (  scan_en_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  gated_clk_jtag_Wa_reg_w0_T  ),
    .Q_R0 (  gated_clk_jtag_Wa_reg_w0_R  ),
    .Q_X0 (  gated_clk_jtag_Wa_reg_w0_X  ),
    .Q_C0 (  gated_clk_jtag_Wa_reg_w0_C  ),
    .Q_S ( gated_clk_jtag_Wa_reg_w0_S ),
    .TE ( scan_en ),
    .Q ( gated_clk_jtag_Wa_reg_w0 ),
    .CP ( clk ),
    .E ( _34_ )
  );
  logic [0:0] clk_R4 ;
  logic [0:0] clk_X4 ;
  logic [0:0] clk_C4 ;
  logic [0:0] muxed_re_r0_S_R6 ;
  logic [0:0] muxed_re_r0_S_X6 ;
  logic [0:0] muxed_re_r0_S_C6 ;
  logic [0:0] scan_en_R5 ;
  logic [0:0] scan_en_X5 ;
  logic [0:0] scan_en_C5 ;
// module: CKLNQD12PO4
  CKLNQD12PO4 UJ_la_bist_clkw0_gate (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R4  ),
    .CP_X (  clk_X4  ),
    .CP_C (  clk_C4  ),
    .CP_S (  clk_S  ),
    .E_T (  muxed_re_r0_S_T  ),
    .E_R (  muxed_re_r0_S_R6  ),
    .E_X (  muxed_re_r0_S_X6  ),
    .E_C (  muxed_re_r0_S_C6  ),
    .E_S (  muxed_re_r0_S_S  ),
    .TE_T (  scan_en_T  ),
    .TE_R (  scan_en_R5  ),
    .TE_X (  scan_en_X5  ),
    .TE_C (  scan_en_C5  ),
    .TE_S (  scan_en_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  la_bist_clkr0_T  ),
    .Q_R0 (  la_bist_clkr0_R  ),
    .Q_X0 (  la_bist_clkr0_X  ),
    .Q_C0 (  la_bist_clkr0_C  ),
    .Q_S ( la_bist_clkr0_S ),
    .TE ( scan_en ),
    .Q ( la_bist_clkr0 ),
    .CP ( clk ),
    .E ( muxed_re_r0_S )
  );
  logic [0:0] dft_rst_gated_clk_R0 ;
  logic [0:0] dft_rst_gated_clk_X0 ;
  logic [0:0] dft_rst_gated_clk_C0 ;
  logic [0:0] mbist_ramaccess_rst__R1 ;
  logic [0:0] mbist_ramaccess_rst__X1 ;
  logic [0:0] mbist_ramaccess_rst__C1 ;
  logic [0:0] debug_mode_R0 ;
  logic [0:0] debug_mode_X0 ;
  logic [0:0] debug_mode_C0 ;
// module: sync2d_c_pp
  sync2d_c_pp debug_mode_synchronizer (
    .clk_T (  dft_rst_gated_clk_T  ),
    .clk_R (  dft_rst_gated_clk_R0  ),
    .clk_X (  dft_rst_gated_clk_X0  ),
    .clk_C (  dft_rst_gated_clk_C0  ),
    .clk_S (  dft_rst_gated_clk_S  ),
    .clr__T (  mbist_ramaccess_rst__T  ),
    .clr__R (  mbist_ramaccess_rst__R1  ),
    .clr__X (  mbist_ramaccess_rst__X1  ),
    .clr__C (  mbist_ramaccess_rst__C1  ),
    .clr__S (  mbist_ramaccess_rst__S  ),
    .d_T (  debug_mode_T  ),
    .d_R (  debug_mode_R0  ),
    .d_X (  debug_mode_X0  ),
    .d_C (  debug_mode_C0  ),
    .d_S (  debug_mode_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .q_T (  debug_mode_sync_T  ),
    .q_R0 (  debug_mode_sync_R  ),
    .q_X0 (  debug_mode_sync_X  ),
    .q_C0 (  debug_mode_sync_C  ),
    .q_S ( debug_mode_sync_S ),
    .q ( debug_mode_sync ),
    .d ( debug_mode ),
    .clk ( dft_rst_gated_clk ),
    .clr_ ( mbist_ramaccess_rst_ )
  );
  logic [0:0] mbist_ramaccess_rst__R2 ;
  logic [0:0] mbist_ramaccess_rst__X2 ;
  logic [0:0] mbist_ramaccess_rst__C2 ;
  logic [0:0] dft_rst_gated_clk_R1 ;
  logic [0:0] dft_rst_gated_clk_X1 ;
  logic [0:0] dft_rst_gated_clk_C1 ;
  logic [0:0] mbist_en_sync_R0 ;
  logic [0:0] mbist_en_sync_X0 ;
  logic [0:0] mbist_en_sync_C0 ;
// module: p_SDFCNQD1PO4
  p_SDFCNQD1PO4 mbist_en_flop (
    .CDN_T (  mbist_ramaccess_rst__T  ),
    .CDN_R (  mbist_ramaccess_rst__R2  ),
    .CDN_X (  mbist_ramaccess_rst__X2  ),
    .CDN_C (  mbist_ramaccess_rst__C2  ),
    .CDN_S (  mbist_ramaccess_rst__S  ),
    .CP_T (  dft_rst_gated_clk_T  ),
    .CP_R (  dft_rst_gated_clk_R1  ),
    .CP_X (  dft_rst_gated_clk_X1  ),
    .CP_C (  dft_rst_gated_clk_C1  ),
    .CP_S (  dft_rst_gated_clk_S  ),
    .D_T (  mbist_en_sync_T  ),
    .D_R (  mbist_en_sync_R0  ),
    .D_X (  mbist_en_sync_X0  ),
    .D_C (  mbist_en_sync_C0  ),
    .D_S (  mbist_en_sync_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  mbist_en_r_T  ),
    .Q_R0 (  mbist_en_r_R  ),
    .Q_X0 (  mbist_en_r_X  ),
    .Q_C0 (  mbist_en_r_C  ),
    .Q_S ( mbist_en_r_S ),
    .Q ( mbist_en_r ),
    .CDN ( mbist_ramaccess_rst_ ),
    .D ( mbist_en_sync ),
    .CP ( dft_rst_gated_clk )
  );
  logic [0:0] gated_clk_core_R0 ;
  logic [0:0] gated_clk_core_X0 ;
  logic [0:0] gated_clk_core_C0 ;
  logic [0:0] gated_clk_core_R1 ;
  logic [0:0] gated_clk_core_X1 ;
  logic [0:0] gated_clk_core_C1 ;
  logic [0:0] iddq_mode_R0 ;
  logic [0:0] iddq_mode_X0 ;
  logic [0:0] iddq_mode_C0 ;
  logic [0:0] _11__R0 ;
  logic [0:0] _11__X0 ;
  logic [0:0] _11__C0 ;
  logic [0:0] piece_re_R0 ;
  logic [0:0] piece_re_X0 ;
  logic [0:0] piece_re_C0 ;
  logic [31:0] pwrbus_ram_pd_R0 ;
  logic [31:0] pwrbus_ram_pd_X0 ;
  logic [31:0] pwrbus_ram_pd_C0 ;
  logic [1:0] svop_R0 ;
  logic [1:0] svop_X0 ;
  logic [1:0] svop_C0 ;
  logic [4:0] muxed_Wa_w0_R0 ;
  logic [4:0] muxed_Wa_w0_X0 ;
  logic [4:0] muxed_Wa_w0_C0 ;
  logic [79:0] Wdata_R1 ;
  logic [79:0] Wdata_X1 ;
  logic [79:0] Wdata_C1 ;
  logic [0:0] _24__R0 ;
  logic [0:0] _24__X0 ;
  logic [0:0] _24__C0 ;
// module: RAMDP_20X80_GL_M1_E2
  RAMDP_20X80_GL_M1_E2 ram_Inst_19X80 (
    .CLK_R_T (  gated_clk_core_T  ),
    .CLK_R_R (  gated_clk_core_R0  ),
    .CLK_R_X (  gated_clk_core_X0  ),
    .CLK_R_C (  gated_clk_core_C0  ),
    .CLK_R_S (  gated_clk_core_S  ),
    .CLK_W_T (  gated_clk_core_T  ),
    .CLK_W_R (  gated_clk_core_R1  ),
    .CLK_W_X (  gated_clk_core_X1  ),
    .CLK_W_C (  gated_clk_core_C1  ),
    .CLK_W_S (  gated_clk_core_S  ),
    .IDDQ_T (  iddq_mode_T  ),
    .IDDQ_R (  iddq_mode_R0  ),
    .IDDQ_X (  iddq_mode_X0  ),
    .IDDQ_C (  iddq_mode_C0  ),
    .IDDQ_S (  iddq_mode_S  ),
    .RADR_0_T (  muxed_Ra_r0_T [0]  ),
    .RADR_0_R (  muxed_Ra_r0_R0 [0]  ),
    .RADR_0_X (  muxed_Ra_r0_X0 [0]  ),
    .RADR_0_C (  muxed_Ra_r0_C0 [0]  ),
    .RADR_0_S (  muxed_Ra_r0_S [0]  ),
    .RADR_1_T (  muxed_Ra_r0_T [1]  ),
    .RADR_1_R (  muxed_Ra_r0_R0 [1]  ),
    .RADR_1_X (  muxed_Ra_r0_X0 [1]  ),
    .RADR_1_C (  muxed_Ra_r0_C0 [1]  ),
    .RADR_1_S (  muxed_Ra_r0_S [1]  ),
    .RADR_2_T (  muxed_Ra_r0_T [2]  ),
    .RADR_2_R (  muxed_Ra_r0_R0 [2]  ),
    .RADR_2_X (  muxed_Ra_r0_X0 [2]  ),
    .RADR_2_C (  muxed_Ra_r0_C0 [2]  ),
    .RADR_2_S (  muxed_Ra_r0_S [2]  ),
    .RADR_3_T (  muxed_Ra_r0_T [3]  ),
    .RADR_3_R (  muxed_Ra_r0_R0 [3]  ),
    .RADR_3_X (  muxed_Ra_r0_X0 [3]  ),
    .RADR_3_C (  muxed_Ra_r0_C0 [3]  ),
    .RADR_3_S (  muxed_Ra_r0_S [3]  ),
    .RADR_4_T (  _11__T  ),
    .RADR_4_R (  _11__R0  ),
    .RADR_4_X (  _11__X0  ),
    .RADR_4_C (  _11__C0  ),
    .RADR_4_S (  _11__S  ),
    .RE_T (  piece_re_T  ),
    .RE_R (  piece_re_R0  ),
    .RE_X (  piece_re_X0  ),
    .RE_C (  piece_re_C0  ),
    .RE_S (  piece_re_S  ),
    .RET_EN_T (  pwrbus_ram_pd_T [8]  ),
    .RET_EN_R (  pwrbus_ram_pd_R0 [8]  ),
    .RET_EN_X (  pwrbus_ram_pd_X0 [8]  ),
    .RET_EN_C (  pwrbus_ram_pd_C0 [8]  ),
    .RET_EN_S (  pwrbus_ram_pd_S [8]  ),
    .SLEEP_EN_0_T (  pwrbus_ram_pd_T [0]  ),
    .SLEEP_EN_0_R (  pwrbus_ram_pd_R0 [0]  ),
    .SLEEP_EN_0_X (  pwrbus_ram_pd_X0 [0]  ),
    .SLEEP_EN_0_C (  pwrbus_ram_pd_C0 [0]  ),
    .SLEEP_EN_0_S (  pwrbus_ram_pd_S [0]  ),
    .SLEEP_EN_1_T (  pwrbus_ram_pd_T [1]  ),
    .SLEEP_EN_1_R (  pwrbus_ram_pd_R0 [1]  ),
    .SLEEP_EN_1_X (  pwrbus_ram_pd_X0 [1]  ),
    .SLEEP_EN_1_C (  pwrbus_ram_pd_C0 [1]  ),
    .SLEEP_EN_1_S (  pwrbus_ram_pd_S [1]  ),
    .SLEEP_EN_2_T (  pwrbus_ram_pd_T [2]  ),
    .SLEEP_EN_2_R (  pwrbus_ram_pd_R0 [2]  ),
    .SLEEP_EN_2_X (  pwrbus_ram_pd_X0 [2]  ),
    .SLEEP_EN_2_C (  pwrbus_ram_pd_C0 [2]  ),
    .SLEEP_EN_2_S (  pwrbus_ram_pd_S [2]  ),
    .SLEEP_EN_3_T (  pwrbus_ram_pd_T [3]  ),
    .SLEEP_EN_3_R (  pwrbus_ram_pd_R0 [3]  ),
    .SLEEP_EN_3_X (  pwrbus_ram_pd_X0 [3]  ),
    .SLEEP_EN_3_C (  pwrbus_ram_pd_C0 [3]  ),
    .SLEEP_EN_3_S (  pwrbus_ram_pd_S [3]  ),
    .SLEEP_EN_4_T (  pwrbus_ram_pd_T [4]  ),
    .SLEEP_EN_4_R (  pwrbus_ram_pd_R0 [4]  ),
    .SLEEP_EN_4_X (  pwrbus_ram_pd_X0 [4]  ),
    .SLEEP_EN_4_C (  pwrbus_ram_pd_C0 [4]  ),
    .SLEEP_EN_4_S (  pwrbus_ram_pd_S [4]  ),
    .SLEEP_EN_5_T (  pwrbus_ram_pd_T [5]  ),
    .SLEEP_EN_5_R (  pwrbus_ram_pd_R0 [5]  ),
    .SLEEP_EN_5_X (  pwrbus_ram_pd_X0 [5]  ),
    .SLEEP_EN_5_C (  pwrbus_ram_pd_C0 [5]  ),
    .SLEEP_EN_5_S (  pwrbus_ram_pd_S [5]  ),
    .SLEEP_EN_6_T (  pwrbus_ram_pd_T [6]  ),
    .SLEEP_EN_6_R (  pwrbus_ram_pd_R0 [6]  ),
    .SLEEP_EN_6_X (  pwrbus_ram_pd_X0 [6]  ),
    .SLEEP_EN_6_C (  pwrbus_ram_pd_C0 [6]  ),
    .SLEEP_EN_6_S (  pwrbus_ram_pd_S [6]  ),
    .SLEEP_EN_7_T (  pwrbus_ram_pd_T [7]  ),
    .SLEEP_EN_7_R (  pwrbus_ram_pd_R0 [7]  ),
    .SLEEP_EN_7_X (  pwrbus_ram_pd_X0 [7]  ),
    .SLEEP_EN_7_C (  pwrbus_ram_pd_C0 [7]  ),
    .SLEEP_EN_7_S (  pwrbus_ram_pd_S [7]  ),
    .SVOP_0_T (  svop_T [0]  ),
    .SVOP_0_R (  svop_R0 [0]  ),
    .SVOP_0_X (  svop_X0 [0]  ),
    .SVOP_0_C (  svop_C0 [0]  ),
    .SVOP_0_S (  svop_S [0]  ),
    .SVOP_1_T (  svop_T [1]  ),
    .SVOP_1_R (  svop_R0 [1]  ),
    .SVOP_1_X (  svop_X0 [1]  ),
    .SVOP_1_C (  svop_C0 [1]  ),
    .SVOP_1_S (  svop_S [1]  ),
    .WADR_0_T (  muxed_Wa_w0_T [0]  ),
    .WADR_0_R (  muxed_Wa_w0_R0 [0]  ),
    .WADR_0_X (  muxed_Wa_w0_X0 [0]  ),
    .WADR_0_C (  muxed_Wa_w0_C0 [0]  ),
    .WADR_0_S (  muxed_Wa_w0_S [0]  ),
    .WADR_1_T (  muxed_Wa_w0_T [1]  ),
    .WADR_1_R (  muxed_Wa_w0_R0 [1]  ),
    .WADR_1_X (  muxed_Wa_w0_X0 [1]  ),
    .WADR_1_C (  muxed_Wa_w0_C0 [1]  ),
    .WADR_1_S (  muxed_Wa_w0_S [1]  ),
    .WADR_2_T (  muxed_Wa_w0_T [2]  ),
    .WADR_2_R (  muxed_Wa_w0_R0 [2]  ),
    .WADR_2_X (  muxed_Wa_w0_X0 [2]  ),
    .WADR_2_C (  muxed_Wa_w0_C0 [2]  ),
    .WADR_2_S (  muxed_Wa_w0_S [2]  ),
    .WADR_3_T (  muxed_Wa_w0_T [3]  ),
    .WADR_3_R (  muxed_Wa_w0_R0 [3]  ),
    .WADR_3_X (  muxed_Wa_w0_X0 [3]  ),
    .WADR_3_C (  muxed_Wa_w0_C0 [3]  ),
    .WADR_3_S (  muxed_Wa_w0_S [3]  ),
    .WADR_4_T (  muxed_Wa_w0_T [4]  ),
    .WADR_4_R (  muxed_Wa_w0_R0 [4]  ),
    .WADR_4_X (  muxed_Wa_w0_X0 [4]  ),
    .WADR_4_C (  muxed_Wa_w0_C0 [4]  ),
    .WADR_4_S (  muxed_Wa_w0_S [4]  ),
    .WD_0_T (  Wdata_T [0]  ),
    .WD_0_R (  Wdata_R1 [0]  ),
    .WD_0_X (  Wdata_X1 [0]  ),
    .WD_0_C (  Wdata_C1 [0]  ),
    .WD_0_S (  Wdata_S [0]  ),
    .WD_1_T (  Wdata_T [1]  ),
    .WD_1_R (  Wdata_R1 [1]  ),
    .WD_1_X (  Wdata_X1 [1]  ),
    .WD_1_C (  Wdata_C1 [1]  ),
    .WD_1_S (  Wdata_S [1]  ),
    .WD_10_T (  Wdata_T [10]  ),
    .WD_10_R (  Wdata_R1 [10]  ),
    .WD_10_X (  Wdata_X1 [10]  ),
    .WD_10_C (  Wdata_C1 [10]  ),
    .WD_10_S (  Wdata_S [10]  ),
    .WD_11_T (  Wdata_T [11]  ),
    .WD_11_R (  Wdata_R1 [11]  ),
    .WD_11_X (  Wdata_X1 [11]  ),
    .WD_11_C (  Wdata_C1 [11]  ),
    .WD_11_S (  Wdata_S [11]  ),
    .WD_12_T (  Wdata_T [12]  ),
    .WD_12_R (  Wdata_R1 [12]  ),
    .WD_12_X (  Wdata_X1 [12]  ),
    .WD_12_C (  Wdata_C1 [12]  ),
    .WD_12_S (  Wdata_S [12]  ),
    .WD_13_T (  Wdata_T [13]  ),
    .WD_13_R (  Wdata_R1 [13]  ),
    .WD_13_X (  Wdata_X1 [13]  ),
    .WD_13_C (  Wdata_C1 [13]  ),
    .WD_13_S (  Wdata_S [13]  ),
    .WD_14_T (  Wdata_T [14]  ),
    .WD_14_R (  Wdata_R1 [14]  ),
    .WD_14_X (  Wdata_X1 [14]  ),
    .WD_14_C (  Wdata_C1 [14]  ),
    .WD_14_S (  Wdata_S [14]  ),
    .WD_15_T (  Wdata_T [15]  ),
    .WD_15_R (  Wdata_R1 [15]  ),
    .WD_15_X (  Wdata_X1 [15]  ),
    .WD_15_C (  Wdata_C1 [15]  ),
    .WD_15_S (  Wdata_S [15]  ),
    .WD_16_T (  Wdata_T [16]  ),
    .WD_16_R (  Wdata_R1 [16]  ),
    .WD_16_X (  Wdata_X1 [16]  ),
    .WD_16_C (  Wdata_C1 [16]  ),
    .WD_16_S (  Wdata_S [16]  ),
    .WD_17_T (  Wdata_T [17]  ),
    .WD_17_R (  Wdata_R1 [17]  ),
    .WD_17_X (  Wdata_X1 [17]  ),
    .WD_17_C (  Wdata_C1 [17]  ),
    .WD_17_S (  Wdata_S [17]  ),
    .WD_18_T (  Wdata_T [18]  ),
    .WD_18_R (  Wdata_R1 [18]  ),
    .WD_18_X (  Wdata_X1 [18]  ),
    .WD_18_C (  Wdata_C1 [18]  ),
    .WD_18_S (  Wdata_S [18]  ),
    .WD_19_T (  Wdata_T [19]  ),
    .WD_19_R (  Wdata_R1 [19]  ),
    .WD_19_X (  Wdata_X1 [19]  ),
    .WD_19_C (  Wdata_C1 [19]  ),
    .WD_19_S (  Wdata_S [19]  ),
    .WD_2_T (  Wdata_T [2]  ),
    .WD_2_R (  Wdata_R1 [2]  ),
    .WD_2_X (  Wdata_X1 [2]  ),
    .WD_2_C (  Wdata_C1 [2]  ),
    .WD_2_S (  Wdata_S [2]  ),
    .WD_20_T (  Wdata_T [20]  ),
    .WD_20_R (  Wdata_R1 [20]  ),
    .WD_20_X (  Wdata_X1 [20]  ),
    .WD_20_C (  Wdata_C1 [20]  ),
    .WD_20_S (  Wdata_S [20]  ),
    .WD_21_T (  Wdata_T [21]  ),
    .WD_21_R (  Wdata_R1 [21]  ),
    .WD_21_X (  Wdata_X1 [21]  ),
    .WD_21_C (  Wdata_C1 [21]  ),
    .WD_21_S (  Wdata_S [21]  ),
    .WD_22_T (  Wdata_T [22]  ),
    .WD_22_R (  Wdata_R1 [22]  ),
    .WD_22_X (  Wdata_X1 [22]  ),
    .WD_22_C (  Wdata_C1 [22]  ),
    .WD_22_S (  Wdata_S [22]  ),
    .WD_23_T (  Wdata_T [23]  ),
    .WD_23_R (  Wdata_R1 [23]  ),
    .WD_23_X (  Wdata_X1 [23]  ),
    .WD_23_C (  Wdata_C1 [23]  ),
    .WD_23_S (  Wdata_S [23]  ),
    .WD_24_T (  Wdata_T [24]  ),
    .WD_24_R (  Wdata_R1 [24]  ),
    .WD_24_X (  Wdata_X1 [24]  ),
    .WD_24_C (  Wdata_C1 [24]  ),
    .WD_24_S (  Wdata_S [24]  ),
    .WD_25_T (  Wdata_T [25]  ),
    .WD_25_R (  Wdata_R1 [25]  ),
    .WD_25_X (  Wdata_X1 [25]  ),
    .WD_25_C (  Wdata_C1 [25]  ),
    .WD_25_S (  Wdata_S [25]  ),
    .WD_26_T (  Wdata_T [26]  ),
    .WD_26_R (  Wdata_R1 [26]  ),
    .WD_26_X (  Wdata_X1 [26]  ),
    .WD_26_C (  Wdata_C1 [26]  ),
    .WD_26_S (  Wdata_S [26]  ),
    .WD_27_T (  Wdata_T [27]  ),
    .WD_27_R (  Wdata_R1 [27]  ),
    .WD_27_X (  Wdata_X1 [27]  ),
    .WD_27_C (  Wdata_C1 [27]  ),
    .WD_27_S (  Wdata_S [27]  ),
    .WD_28_T (  Wdata_T [28]  ),
    .WD_28_R (  Wdata_R1 [28]  ),
    .WD_28_X (  Wdata_X1 [28]  ),
    .WD_28_C (  Wdata_C1 [28]  ),
    .WD_28_S (  Wdata_S [28]  ),
    .WD_29_T (  Wdata_T [29]  ),
    .WD_29_R (  Wdata_R1 [29]  ),
    .WD_29_X (  Wdata_X1 [29]  ),
    .WD_29_C (  Wdata_C1 [29]  ),
    .WD_29_S (  Wdata_S [29]  ),
    .WD_3_T (  Wdata_T [3]  ),
    .WD_3_R (  Wdata_R1 [3]  ),
    .WD_3_X (  Wdata_X1 [3]  ),
    .WD_3_C (  Wdata_C1 [3]  ),
    .WD_3_S (  Wdata_S [3]  ),
    .WD_30_T (  Wdata_T [30]  ),
    .WD_30_R (  Wdata_R1 [30]  ),
    .WD_30_X (  Wdata_X1 [30]  ),
    .WD_30_C (  Wdata_C1 [30]  ),
    .WD_30_S (  Wdata_S [30]  ),
    .WD_31_T (  Wdata_T [31]  ),
    .WD_31_R (  Wdata_R1 [31]  ),
    .WD_31_X (  Wdata_X1 [31]  ),
    .WD_31_C (  Wdata_C1 [31]  ),
    .WD_31_S (  Wdata_S [31]  ),
    .WD_32_T (  Wdata_T [32]  ),
    .WD_32_R (  Wdata_R1 [32]  ),
    .WD_32_X (  Wdata_X1 [32]  ),
    .WD_32_C (  Wdata_C1 [32]  ),
    .WD_32_S (  Wdata_S [32]  ),
    .WD_33_T (  Wdata_T [33]  ),
    .WD_33_R (  Wdata_R1 [33]  ),
    .WD_33_X (  Wdata_X1 [33]  ),
    .WD_33_C (  Wdata_C1 [33]  ),
    .WD_33_S (  Wdata_S [33]  ),
    .WD_34_T (  Wdata_T [34]  ),
    .WD_34_R (  Wdata_R1 [34]  ),
    .WD_34_X (  Wdata_X1 [34]  ),
    .WD_34_C (  Wdata_C1 [34]  ),
    .WD_34_S (  Wdata_S [34]  ),
    .WD_35_T (  Wdata_T [35]  ),
    .WD_35_R (  Wdata_R1 [35]  ),
    .WD_35_X (  Wdata_X1 [35]  ),
    .WD_35_C (  Wdata_C1 [35]  ),
    .WD_35_S (  Wdata_S [35]  ),
    .WD_36_T (  Wdata_T [36]  ),
    .WD_36_R (  Wdata_R1 [36]  ),
    .WD_36_X (  Wdata_X1 [36]  ),
    .WD_36_C (  Wdata_C1 [36]  ),
    .WD_36_S (  Wdata_S [36]  ),
    .WD_37_T (  Wdata_T [37]  ),
    .WD_37_R (  Wdata_R1 [37]  ),
    .WD_37_X (  Wdata_X1 [37]  ),
    .WD_37_C (  Wdata_C1 [37]  ),
    .WD_37_S (  Wdata_S [37]  ),
    .WD_38_T (  Wdata_T [38]  ),
    .WD_38_R (  Wdata_R1 [38]  ),
    .WD_38_X (  Wdata_X1 [38]  ),
    .WD_38_C (  Wdata_C1 [38]  ),
    .WD_38_S (  Wdata_S [38]  ),
    .WD_39_T (  Wdata_T [39]  ),
    .WD_39_R (  Wdata_R1 [39]  ),
    .WD_39_X (  Wdata_X1 [39]  ),
    .WD_39_C (  Wdata_C1 [39]  ),
    .WD_39_S (  Wdata_S [39]  ),
    .WD_4_T (  Wdata_T [4]  ),
    .WD_4_R (  Wdata_R1 [4]  ),
    .WD_4_X (  Wdata_X1 [4]  ),
    .WD_4_C (  Wdata_C1 [4]  ),
    .WD_4_S (  Wdata_S [4]  ),
    .WD_40_T (  Wdata_T [40]  ),
    .WD_40_R (  Wdata_R1 [40]  ),
    .WD_40_X (  Wdata_X1 [40]  ),
    .WD_40_C (  Wdata_C1 [40]  ),
    .WD_40_S (  Wdata_S [40]  ),
    .WD_41_T (  Wdata_T [41]  ),
    .WD_41_R (  Wdata_R1 [41]  ),
    .WD_41_X (  Wdata_X1 [41]  ),
    .WD_41_C (  Wdata_C1 [41]  ),
    .WD_41_S (  Wdata_S [41]  ),
    .WD_42_T (  Wdata_T [42]  ),
    .WD_42_R (  Wdata_R1 [42]  ),
    .WD_42_X (  Wdata_X1 [42]  ),
    .WD_42_C (  Wdata_C1 [42]  ),
    .WD_42_S (  Wdata_S [42]  ),
    .WD_43_T (  Wdata_T [43]  ),
    .WD_43_R (  Wdata_R1 [43]  ),
    .WD_43_X (  Wdata_X1 [43]  ),
    .WD_43_C (  Wdata_C1 [43]  ),
    .WD_43_S (  Wdata_S [43]  ),
    .WD_44_T (  Wdata_T [44]  ),
    .WD_44_R (  Wdata_R1 [44]  ),
    .WD_44_X (  Wdata_X1 [44]  ),
    .WD_44_C (  Wdata_C1 [44]  ),
    .WD_44_S (  Wdata_S [44]  ),
    .WD_45_T (  Wdata_T [45]  ),
    .WD_45_R (  Wdata_R1 [45]  ),
    .WD_45_X (  Wdata_X1 [45]  ),
    .WD_45_C (  Wdata_C1 [45]  ),
    .WD_45_S (  Wdata_S [45]  ),
    .WD_46_T (  Wdata_T [46]  ),
    .WD_46_R (  Wdata_R1 [46]  ),
    .WD_46_X (  Wdata_X1 [46]  ),
    .WD_46_C (  Wdata_C1 [46]  ),
    .WD_46_S (  Wdata_S [46]  ),
    .WD_47_T (  Wdata_T [47]  ),
    .WD_47_R (  Wdata_R1 [47]  ),
    .WD_47_X (  Wdata_X1 [47]  ),
    .WD_47_C (  Wdata_C1 [47]  ),
    .WD_47_S (  Wdata_S [47]  ),
    .WD_48_T (  Wdata_T [48]  ),
    .WD_48_R (  Wdata_R1 [48]  ),
    .WD_48_X (  Wdata_X1 [48]  ),
    .WD_48_C (  Wdata_C1 [48]  ),
    .WD_48_S (  Wdata_S [48]  ),
    .WD_49_T (  Wdata_T [49]  ),
    .WD_49_R (  Wdata_R1 [49]  ),
    .WD_49_X (  Wdata_X1 [49]  ),
    .WD_49_C (  Wdata_C1 [49]  ),
    .WD_49_S (  Wdata_S [49]  ),
    .WD_5_T (  Wdata_T [5]  ),
    .WD_5_R (  Wdata_R1 [5]  ),
    .WD_5_X (  Wdata_X1 [5]  ),
    .WD_5_C (  Wdata_C1 [5]  ),
    .WD_5_S (  Wdata_S [5]  ),
    .WD_50_T (  Wdata_T [50]  ),
    .WD_50_R (  Wdata_R1 [50]  ),
    .WD_50_X (  Wdata_X1 [50]  ),
    .WD_50_C (  Wdata_C1 [50]  ),
    .WD_50_S (  Wdata_S [50]  ),
    .WD_51_T (  Wdata_T [51]  ),
    .WD_51_R (  Wdata_R1 [51]  ),
    .WD_51_X (  Wdata_X1 [51]  ),
    .WD_51_C (  Wdata_C1 [51]  ),
    .WD_51_S (  Wdata_S [51]  ),
    .WD_52_T (  Wdata_T [52]  ),
    .WD_52_R (  Wdata_R1 [52]  ),
    .WD_52_X (  Wdata_X1 [52]  ),
    .WD_52_C (  Wdata_C1 [52]  ),
    .WD_52_S (  Wdata_S [52]  ),
    .WD_53_T (  Wdata_T [53]  ),
    .WD_53_R (  Wdata_R1 [53]  ),
    .WD_53_X (  Wdata_X1 [53]  ),
    .WD_53_C (  Wdata_C1 [53]  ),
    .WD_53_S (  Wdata_S [53]  ),
    .WD_54_T (  Wdata_T [54]  ),
    .WD_54_R (  Wdata_R1 [54]  ),
    .WD_54_X (  Wdata_X1 [54]  ),
    .WD_54_C (  Wdata_C1 [54]  ),
    .WD_54_S (  Wdata_S [54]  ),
    .WD_55_T (  Wdata_T [55]  ),
    .WD_55_R (  Wdata_R1 [55]  ),
    .WD_55_X (  Wdata_X1 [55]  ),
    .WD_55_C (  Wdata_C1 [55]  ),
    .WD_55_S (  Wdata_S [55]  ),
    .WD_56_T (  Wdata_T [56]  ),
    .WD_56_R (  Wdata_R1 [56]  ),
    .WD_56_X (  Wdata_X1 [56]  ),
    .WD_56_C (  Wdata_C1 [56]  ),
    .WD_56_S (  Wdata_S [56]  ),
    .WD_57_T (  Wdata_T [57]  ),
    .WD_57_R (  Wdata_R1 [57]  ),
    .WD_57_X (  Wdata_X1 [57]  ),
    .WD_57_C (  Wdata_C1 [57]  ),
    .WD_57_S (  Wdata_S [57]  ),
    .WD_58_T (  Wdata_T [58]  ),
    .WD_58_R (  Wdata_R1 [58]  ),
    .WD_58_X (  Wdata_X1 [58]  ),
    .WD_58_C (  Wdata_C1 [58]  ),
    .WD_58_S (  Wdata_S [58]  ),
    .WD_59_T (  Wdata_T [59]  ),
    .WD_59_R (  Wdata_R1 [59]  ),
    .WD_59_X (  Wdata_X1 [59]  ),
    .WD_59_C (  Wdata_C1 [59]  ),
    .WD_59_S (  Wdata_S [59]  ),
    .WD_6_T (  Wdata_T [6]  ),
    .WD_6_R (  Wdata_R1 [6]  ),
    .WD_6_X (  Wdata_X1 [6]  ),
    .WD_6_C (  Wdata_C1 [6]  ),
    .WD_6_S (  Wdata_S [6]  ),
    .WD_60_T (  Wdata_T [60]  ),
    .WD_60_R (  Wdata_R1 [60]  ),
    .WD_60_X (  Wdata_X1 [60]  ),
    .WD_60_C (  Wdata_C1 [60]  ),
    .WD_60_S (  Wdata_S [60]  ),
    .WD_61_T (  Wdata_T [61]  ),
    .WD_61_R (  Wdata_R1 [61]  ),
    .WD_61_X (  Wdata_X1 [61]  ),
    .WD_61_C (  Wdata_C1 [61]  ),
    .WD_61_S (  Wdata_S [61]  ),
    .WD_62_T (  Wdata_T [62]  ),
    .WD_62_R (  Wdata_R1 [62]  ),
    .WD_62_X (  Wdata_X1 [62]  ),
    .WD_62_C (  Wdata_C1 [62]  ),
    .WD_62_S (  Wdata_S [62]  ),
    .WD_63_T (  Wdata_T [63]  ),
    .WD_63_R (  Wdata_R1 [63]  ),
    .WD_63_X (  Wdata_X1 [63]  ),
    .WD_63_C (  Wdata_C1 [63]  ),
    .WD_63_S (  Wdata_S [63]  ),
    .WD_64_T (  Wdata_T [64]  ),
    .WD_64_R (  Wdata_R1 [64]  ),
    .WD_64_X (  Wdata_X1 [64]  ),
    .WD_64_C (  Wdata_C1 [64]  ),
    .WD_64_S (  Wdata_S [64]  ),
    .WD_65_T (  Wdata_T [65]  ),
    .WD_65_R (  Wdata_R1 [65]  ),
    .WD_65_X (  Wdata_X1 [65]  ),
    .WD_65_C (  Wdata_C1 [65]  ),
    .WD_65_S (  Wdata_S [65]  ),
    .WD_66_T (  Wdata_T [66]  ),
    .WD_66_R (  Wdata_R1 [66]  ),
    .WD_66_X (  Wdata_X1 [66]  ),
    .WD_66_C (  Wdata_C1 [66]  ),
    .WD_66_S (  Wdata_S [66]  ),
    .WD_67_T (  Wdata_T [67]  ),
    .WD_67_R (  Wdata_R1 [67]  ),
    .WD_67_X (  Wdata_X1 [67]  ),
    .WD_67_C (  Wdata_C1 [67]  ),
    .WD_67_S (  Wdata_S [67]  ),
    .WD_68_T (  Wdata_T [68]  ),
    .WD_68_R (  Wdata_R1 [68]  ),
    .WD_68_X (  Wdata_X1 [68]  ),
    .WD_68_C (  Wdata_C1 [68]  ),
    .WD_68_S (  Wdata_S [68]  ),
    .WD_69_T (  Wdata_T [69]  ),
    .WD_69_R (  Wdata_R1 [69]  ),
    .WD_69_X (  Wdata_X1 [69]  ),
    .WD_69_C (  Wdata_C1 [69]  ),
    .WD_69_S (  Wdata_S [69]  ),
    .WD_7_T (  Wdata_T [7]  ),
    .WD_7_R (  Wdata_R1 [7]  ),
    .WD_7_X (  Wdata_X1 [7]  ),
    .WD_7_C (  Wdata_C1 [7]  ),
    .WD_7_S (  Wdata_S [7]  ),
    .WD_70_T (  Wdata_T [70]  ),
    .WD_70_R (  Wdata_R1 [70]  ),
    .WD_70_X (  Wdata_X1 [70]  ),
    .WD_70_C (  Wdata_C1 [70]  ),
    .WD_70_S (  Wdata_S [70]  ),
    .WD_71_T (  Wdata_T [71]  ),
    .WD_71_R (  Wdata_R1 [71]  ),
    .WD_71_X (  Wdata_X1 [71]  ),
    .WD_71_C (  Wdata_C1 [71]  ),
    .WD_71_S (  Wdata_S [71]  ),
    .WD_72_T (  Wdata_T [72]  ),
    .WD_72_R (  Wdata_R1 [72]  ),
    .WD_72_X (  Wdata_X1 [72]  ),
    .WD_72_C (  Wdata_C1 [72]  ),
    .WD_72_S (  Wdata_S [72]  ),
    .WD_73_T (  Wdata_T [73]  ),
    .WD_73_R (  Wdata_R1 [73]  ),
    .WD_73_X (  Wdata_X1 [73]  ),
    .WD_73_C (  Wdata_C1 [73]  ),
    .WD_73_S (  Wdata_S [73]  ),
    .WD_74_T (  Wdata_T [74]  ),
    .WD_74_R (  Wdata_R1 [74]  ),
    .WD_74_X (  Wdata_X1 [74]  ),
    .WD_74_C (  Wdata_C1 [74]  ),
    .WD_74_S (  Wdata_S [74]  ),
    .WD_75_T (  Wdata_T [75]  ),
    .WD_75_R (  Wdata_R1 [75]  ),
    .WD_75_X (  Wdata_X1 [75]  ),
    .WD_75_C (  Wdata_C1 [75]  ),
    .WD_75_S (  Wdata_S [75]  ),
    .WD_76_T (  Wdata_T [76]  ),
    .WD_76_R (  Wdata_R1 [76]  ),
    .WD_76_X (  Wdata_X1 [76]  ),
    .WD_76_C (  Wdata_C1 [76]  ),
    .WD_76_S (  Wdata_S [76]  ),
    .WD_77_T (  Wdata_T [77]  ),
    .WD_77_R (  Wdata_R1 [77]  ),
    .WD_77_X (  Wdata_X1 [77]  ),
    .WD_77_C (  Wdata_C1 [77]  ),
    .WD_77_S (  Wdata_S [77]  ),
    .WD_78_T (  Wdata_T [78]  ),
    .WD_78_R (  Wdata_R1 [78]  ),
    .WD_78_X (  Wdata_X1 [78]  ),
    .WD_78_C (  Wdata_C1 [78]  ),
    .WD_78_S (  Wdata_S [78]  ),
    .WD_79_T (  Wdata_T [79]  ),
    .WD_79_R (  Wdata_R1 [79]  ),
    .WD_79_X (  Wdata_X1 [79]  ),
    .WD_79_C (  Wdata_C1 [79]  ),
    .WD_79_S (  Wdata_S [79]  ),
    .WD_8_T (  Wdata_T [8]  ),
    .WD_8_R (  Wdata_R1 [8]  ),
    .WD_8_X (  Wdata_X1 [8]  ),
    .WD_8_C (  Wdata_C1 [8]  ),
    .WD_8_S (  Wdata_S [8]  ),
    .WD_9_T (  Wdata_T [9]  ),
    .WD_9_R (  Wdata_R1 [9]  ),
    .WD_9_X (  Wdata_X1 [9]  ),
    .WD_9_C (  Wdata_C1 [9]  ),
    .WD_9_S (  Wdata_S [9]  ),
    .WE_T (  _24__T  ),
    .WE_R (  _24__R0  ),
    .WE_X (  _24__X0  ),
    .WE_C (  _24__C0  ),
    .WE_S (  _24__S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .RD_0_T (  dout_0_0_T [0]  ),
    .RD_0_R0 (  dout_0_0_R [0]  ),
    .RD_0_X0 (  dout_0_0_X [0]  ),
    .RD_0_C0 (  dout_0_0_C [0]  ),
    .RD_0_S ( dout_0_0_S ),
    .RD_1_T (  dout_0_0_T [1]  ),
    .RD_1_R0 (  dout_0_0_R [1]  ),
    .RD_1_X0 (  dout_0_0_X [1]  ),
    .RD_1_C0 (  dout_0_0_C [1]  ),
    .RD_1_S ( dout_0_0_S ),
    .RD_10_T (  dout_0_0_T [10]  ),
    .RD_10_R0 (  dout_0_0_R [10]  ),
    .RD_10_X0 (  dout_0_0_X [10]  ),
    .RD_10_C0 (  dout_0_0_C [10]  ),
    .RD_10_S ( dout_0_0_S ),
    .RD_11_T (  dout_0_0_T [11]  ),
    .RD_11_R0 (  dout_0_0_R [11]  ),
    .RD_11_X0 (  dout_0_0_X [11]  ),
    .RD_11_C0 (  dout_0_0_C [11]  ),
    .RD_11_S ( dout_0_0_S ),
    .RD_12_T (  dout_0_0_T [12]  ),
    .RD_12_R0 (  dout_0_0_R [12]  ),
    .RD_12_X0 (  dout_0_0_X [12]  ),
    .RD_12_C0 (  dout_0_0_C [12]  ),
    .RD_12_S ( dout_0_0_S ),
    .RD_13_T (  dout_0_0_T [13]  ),
    .RD_13_R0 (  dout_0_0_R [13]  ),
    .RD_13_X0 (  dout_0_0_X [13]  ),
    .RD_13_C0 (  dout_0_0_C [13]  ),
    .RD_13_S ( dout_0_0_S ),
    .RD_14_T (  dout_0_0_T [14]  ),
    .RD_14_R0 (  dout_0_0_R [14]  ),
    .RD_14_X0 (  dout_0_0_X [14]  ),
    .RD_14_C0 (  dout_0_0_C [14]  ),
    .RD_14_S ( dout_0_0_S ),
    .RD_15_T (  dout_0_0_T [15]  ),
    .RD_15_R0 (  dout_0_0_R [15]  ),
    .RD_15_X0 (  dout_0_0_X [15]  ),
    .RD_15_C0 (  dout_0_0_C [15]  ),
    .RD_15_S ( dout_0_0_S ),
    .RD_16_T (  dout_0_0_T [16]  ),
    .RD_16_R0 (  dout_0_0_R [16]  ),
    .RD_16_X0 (  dout_0_0_X [16]  ),
    .RD_16_C0 (  dout_0_0_C [16]  ),
    .RD_16_S ( dout_0_0_S ),
    .RD_17_T (  dout_0_0_T [17]  ),
    .RD_17_R0 (  dout_0_0_R [17]  ),
    .RD_17_X0 (  dout_0_0_X [17]  ),
    .RD_17_C0 (  dout_0_0_C [17]  ),
    .RD_17_S ( dout_0_0_S ),
    .RD_18_T (  dout_0_0_T [18]  ),
    .RD_18_R0 (  dout_0_0_R [18]  ),
    .RD_18_X0 (  dout_0_0_X [18]  ),
    .RD_18_C0 (  dout_0_0_C [18]  ),
    .RD_18_S ( dout_0_0_S ),
    .RD_19_T (  dout_0_0_T [19]  ),
    .RD_19_R0 (  dout_0_0_R [19]  ),
    .RD_19_X0 (  dout_0_0_X [19]  ),
    .RD_19_C0 (  dout_0_0_C [19]  ),
    .RD_19_S ( dout_0_0_S ),
    .RD_2_T (  dout_0_0_T [2]  ),
    .RD_2_R0 (  dout_0_0_R [2]  ),
    .RD_2_X0 (  dout_0_0_X [2]  ),
    .RD_2_C0 (  dout_0_0_C [2]  ),
    .RD_2_S ( dout_0_0_S ),
    .RD_20_T (  dout_0_0_T [20]  ),
    .RD_20_R0 (  dout_0_0_R [20]  ),
    .RD_20_X0 (  dout_0_0_X [20]  ),
    .RD_20_C0 (  dout_0_0_C [20]  ),
    .RD_20_S ( dout_0_0_S ),
    .RD_21_T (  dout_0_0_T [21]  ),
    .RD_21_R0 (  dout_0_0_R [21]  ),
    .RD_21_X0 (  dout_0_0_X [21]  ),
    .RD_21_C0 (  dout_0_0_C [21]  ),
    .RD_21_S ( dout_0_0_S ),
    .RD_22_T (  dout_0_0_T [22]  ),
    .RD_22_R0 (  dout_0_0_R [22]  ),
    .RD_22_X0 (  dout_0_0_X [22]  ),
    .RD_22_C0 (  dout_0_0_C [22]  ),
    .RD_22_S ( dout_0_0_S ),
    .RD_23_T (  dout_0_0_T [23]  ),
    .RD_23_R0 (  dout_0_0_R [23]  ),
    .RD_23_X0 (  dout_0_0_X [23]  ),
    .RD_23_C0 (  dout_0_0_C [23]  ),
    .RD_23_S ( dout_0_0_S ),
    .RD_24_T (  dout_0_0_T [24]  ),
    .RD_24_R0 (  dout_0_0_R [24]  ),
    .RD_24_X0 (  dout_0_0_X [24]  ),
    .RD_24_C0 (  dout_0_0_C [24]  ),
    .RD_24_S ( dout_0_0_S ),
    .RD_25_T (  dout_0_0_T [25]  ),
    .RD_25_R0 (  dout_0_0_R [25]  ),
    .RD_25_X0 (  dout_0_0_X [25]  ),
    .RD_25_C0 (  dout_0_0_C [25]  ),
    .RD_25_S ( dout_0_0_S ),
    .RD_26_T (  dout_0_0_T [26]  ),
    .RD_26_R0 (  dout_0_0_R [26]  ),
    .RD_26_X0 (  dout_0_0_X [26]  ),
    .RD_26_C0 (  dout_0_0_C [26]  ),
    .RD_26_S ( dout_0_0_S ),
    .RD_27_T (  dout_0_0_T [27]  ),
    .RD_27_R0 (  dout_0_0_R [27]  ),
    .RD_27_X0 (  dout_0_0_X [27]  ),
    .RD_27_C0 (  dout_0_0_C [27]  ),
    .RD_27_S ( dout_0_0_S ),
    .RD_28_T (  dout_0_0_T [28]  ),
    .RD_28_R0 (  dout_0_0_R [28]  ),
    .RD_28_X0 (  dout_0_0_X [28]  ),
    .RD_28_C0 (  dout_0_0_C [28]  ),
    .RD_28_S ( dout_0_0_S ),
    .RD_29_T (  dout_0_0_T [29]  ),
    .RD_29_R0 (  dout_0_0_R [29]  ),
    .RD_29_X0 (  dout_0_0_X [29]  ),
    .RD_29_C0 (  dout_0_0_C [29]  ),
    .RD_29_S ( dout_0_0_S ),
    .RD_3_T (  dout_0_0_T [3]  ),
    .RD_3_R0 (  dout_0_0_R [3]  ),
    .RD_3_X0 (  dout_0_0_X [3]  ),
    .RD_3_C0 (  dout_0_0_C [3]  ),
    .RD_3_S ( dout_0_0_S ),
    .RD_30_T (  dout_0_0_T [30]  ),
    .RD_30_R0 (  dout_0_0_R [30]  ),
    .RD_30_X0 (  dout_0_0_X [30]  ),
    .RD_30_C0 (  dout_0_0_C [30]  ),
    .RD_30_S ( dout_0_0_S ),
    .RD_31_T (  dout_0_0_T [31]  ),
    .RD_31_R0 (  dout_0_0_R [31]  ),
    .RD_31_X0 (  dout_0_0_X [31]  ),
    .RD_31_C0 (  dout_0_0_C [31]  ),
    .RD_31_S ( dout_0_0_S ),
    .RD_32_T (  dout_0_0_T [32]  ),
    .RD_32_R0 (  dout_0_0_R [32]  ),
    .RD_32_X0 (  dout_0_0_X [32]  ),
    .RD_32_C0 (  dout_0_0_C [32]  ),
    .RD_32_S ( dout_0_0_S ),
    .RD_33_T (  dout_0_0_T [33]  ),
    .RD_33_R0 (  dout_0_0_R [33]  ),
    .RD_33_X0 (  dout_0_0_X [33]  ),
    .RD_33_C0 (  dout_0_0_C [33]  ),
    .RD_33_S ( dout_0_0_S ),
    .RD_34_T (  dout_0_0_T [34]  ),
    .RD_34_R0 (  dout_0_0_R [34]  ),
    .RD_34_X0 (  dout_0_0_X [34]  ),
    .RD_34_C0 (  dout_0_0_C [34]  ),
    .RD_34_S ( dout_0_0_S ),
    .RD_35_T (  dout_0_0_T [35]  ),
    .RD_35_R0 (  dout_0_0_R [35]  ),
    .RD_35_X0 (  dout_0_0_X [35]  ),
    .RD_35_C0 (  dout_0_0_C [35]  ),
    .RD_35_S ( dout_0_0_S ),
    .RD_36_T (  dout_0_0_T [36]  ),
    .RD_36_R0 (  dout_0_0_R [36]  ),
    .RD_36_X0 (  dout_0_0_X [36]  ),
    .RD_36_C0 (  dout_0_0_C [36]  ),
    .RD_36_S ( dout_0_0_S ),
    .RD_37_T (  dout_0_0_T [37]  ),
    .RD_37_R0 (  dout_0_0_R [37]  ),
    .RD_37_X0 (  dout_0_0_X [37]  ),
    .RD_37_C0 (  dout_0_0_C [37]  ),
    .RD_37_S ( dout_0_0_S ),
    .RD_38_T (  dout_0_0_T [38]  ),
    .RD_38_R0 (  dout_0_0_R [38]  ),
    .RD_38_X0 (  dout_0_0_X [38]  ),
    .RD_38_C0 (  dout_0_0_C [38]  ),
    .RD_38_S ( dout_0_0_S ),
    .RD_39_T (  dout_0_0_T [39]  ),
    .RD_39_R0 (  dout_0_0_R [39]  ),
    .RD_39_X0 (  dout_0_0_X [39]  ),
    .RD_39_C0 (  dout_0_0_C [39]  ),
    .RD_39_S ( dout_0_0_S ),
    .RD_4_T (  dout_0_0_T [4]  ),
    .RD_4_R0 (  dout_0_0_R [4]  ),
    .RD_4_X0 (  dout_0_0_X [4]  ),
    .RD_4_C0 (  dout_0_0_C [4]  ),
    .RD_4_S ( dout_0_0_S ),
    .RD_40_T (  dout_0_0_T [40]  ),
    .RD_40_R0 (  dout_0_0_R [40]  ),
    .RD_40_X0 (  dout_0_0_X [40]  ),
    .RD_40_C0 (  dout_0_0_C [40]  ),
    .RD_40_S ( dout_0_0_S ),
    .RD_41_T (  dout_0_0_T [41]  ),
    .RD_41_R0 (  dout_0_0_R [41]  ),
    .RD_41_X0 (  dout_0_0_X [41]  ),
    .RD_41_C0 (  dout_0_0_C [41]  ),
    .RD_41_S ( dout_0_0_S ),
    .RD_42_T (  dout_0_0_T [42]  ),
    .RD_42_R0 (  dout_0_0_R [42]  ),
    .RD_42_X0 (  dout_0_0_X [42]  ),
    .RD_42_C0 (  dout_0_0_C [42]  ),
    .RD_42_S ( dout_0_0_S ),
    .RD_43_T (  dout_0_0_T [43]  ),
    .RD_43_R0 (  dout_0_0_R [43]  ),
    .RD_43_X0 (  dout_0_0_X [43]  ),
    .RD_43_C0 (  dout_0_0_C [43]  ),
    .RD_43_S ( dout_0_0_S ),
    .RD_44_T (  dout_0_0_T [44]  ),
    .RD_44_R0 (  dout_0_0_R [44]  ),
    .RD_44_X0 (  dout_0_0_X [44]  ),
    .RD_44_C0 (  dout_0_0_C [44]  ),
    .RD_44_S ( dout_0_0_S ),
    .RD_45_T (  dout_0_0_T [45]  ),
    .RD_45_R0 (  dout_0_0_R [45]  ),
    .RD_45_X0 (  dout_0_0_X [45]  ),
    .RD_45_C0 (  dout_0_0_C [45]  ),
    .RD_45_S ( dout_0_0_S ),
    .RD_46_T (  dout_0_0_T [46]  ),
    .RD_46_R0 (  dout_0_0_R [46]  ),
    .RD_46_X0 (  dout_0_0_X [46]  ),
    .RD_46_C0 (  dout_0_0_C [46]  ),
    .RD_46_S ( dout_0_0_S ),
    .RD_47_T (  dout_0_0_T [47]  ),
    .RD_47_R0 (  dout_0_0_R [47]  ),
    .RD_47_X0 (  dout_0_0_X [47]  ),
    .RD_47_C0 (  dout_0_0_C [47]  ),
    .RD_47_S ( dout_0_0_S ),
    .RD_48_T (  dout_0_0_T [48]  ),
    .RD_48_R0 (  dout_0_0_R [48]  ),
    .RD_48_X0 (  dout_0_0_X [48]  ),
    .RD_48_C0 (  dout_0_0_C [48]  ),
    .RD_48_S ( dout_0_0_S ),
    .RD_49_T (  dout_0_0_T [49]  ),
    .RD_49_R0 (  dout_0_0_R [49]  ),
    .RD_49_X0 (  dout_0_0_X [49]  ),
    .RD_49_C0 (  dout_0_0_C [49]  ),
    .RD_49_S ( dout_0_0_S ),
    .RD_5_T (  dout_0_0_T [5]  ),
    .RD_5_R0 (  dout_0_0_R [5]  ),
    .RD_5_X0 (  dout_0_0_X [5]  ),
    .RD_5_C0 (  dout_0_0_C [5]  ),
    .RD_5_S ( dout_0_0_S ),
    .RD_50_T (  dout_0_0_T [50]  ),
    .RD_50_R0 (  dout_0_0_R [50]  ),
    .RD_50_X0 (  dout_0_0_X [50]  ),
    .RD_50_C0 (  dout_0_0_C [50]  ),
    .RD_50_S ( dout_0_0_S ),
    .RD_51_T (  dout_0_0_T [51]  ),
    .RD_51_R0 (  dout_0_0_R [51]  ),
    .RD_51_X0 (  dout_0_0_X [51]  ),
    .RD_51_C0 (  dout_0_0_C [51]  ),
    .RD_51_S ( dout_0_0_S ),
    .RD_52_T (  dout_0_0_T [52]  ),
    .RD_52_R0 (  dout_0_0_R [52]  ),
    .RD_52_X0 (  dout_0_0_X [52]  ),
    .RD_52_C0 (  dout_0_0_C [52]  ),
    .RD_52_S ( dout_0_0_S ),
    .RD_53_T (  dout_0_0_T [53]  ),
    .RD_53_R0 (  dout_0_0_R [53]  ),
    .RD_53_X0 (  dout_0_0_X [53]  ),
    .RD_53_C0 (  dout_0_0_C [53]  ),
    .RD_53_S ( dout_0_0_S ),
    .RD_54_T (  dout_0_0_T [54]  ),
    .RD_54_R0 (  dout_0_0_R [54]  ),
    .RD_54_X0 (  dout_0_0_X [54]  ),
    .RD_54_C0 (  dout_0_0_C [54]  ),
    .RD_54_S ( dout_0_0_S ),
    .RD_55_T (  dout_0_0_T [55]  ),
    .RD_55_R0 (  dout_0_0_R [55]  ),
    .RD_55_X0 (  dout_0_0_X [55]  ),
    .RD_55_C0 (  dout_0_0_C [55]  ),
    .RD_55_S ( dout_0_0_S ),
    .RD_56_T (  dout_0_0_T [56]  ),
    .RD_56_R0 (  dout_0_0_R [56]  ),
    .RD_56_X0 (  dout_0_0_X [56]  ),
    .RD_56_C0 (  dout_0_0_C [56]  ),
    .RD_56_S ( dout_0_0_S ),
    .RD_57_T (  dout_0_0_T [57]  ),
    .RD_57_R0 (  dout_0_0_R [57]  ),
    .RD_57_X0 (  dout_0_0_X [57]  ),
    .RD_57_C0 (  dout_0_0_C [57]  ),
    .RD_57_S ( dout_0_0_S ),
    .RD_58_T (  dout_0_0_T [58]  ),
    .RD_58_R0 (  dout_0_0_R [58]  ),
    .RD_58_X0 (  dout_0_0_X [58]  ),
    .RD_58_C0 (  dout_0_0_C [58]  ),
    .RD_58_S ( dout_0_0_S ),
    .RD_59_T (  dout_0_0_T [59]  ),
    .RD_59_R0 (  dout_0_0_R [59]  ),
    .RD_59_X0 (  dout_0_0_X [59]  ),
    .RD_59_C0 (  dout_0_0_C [59]  ),
    .RD_59_S ( dout_0_0_S ),
    .RD_6_T (  dout_0_0_T [6]  ),
    .RD_6_R0 (  dout_0_0_R [6]  ),
    .RD_6_X0 (  dout_0_0_X [6]  ),
    .RD_6_C0 (  dout_0_0_C [6]  ),
    .RD_6_S ( dout_0_0_S ),
    .RD_60_T (  dout_0_0_T [60]  ),
    .RD_60_R0 (  dout_0_0_R [60]  ),
    .RD_60_X0 (  dout_0_0_X [60]  ),
    .RD_60_C0 (  dout_0_0_C [60]  ),
    .RD_60_S ( dout_0_0_S ),
    .RD_61_T (  dout_0_0_T [61]  ),
    .RD_61_R0 (  dout_0_0_R [61]  ),
    .RD_61_X0 (  dout_0_0_X [61]  ),
    .RD_61_C0 (  dout_0_0_C [61]  ),
    .RD_61_S ( dout_0_0_S ),
    .RD_62_T (  dout_0_0_T [62]  ),
    .RD_62_R0 (  dout_0_0_R [62]  ),
    .RD_62_X0 (  dout_0_0_X [62]  ),
    .RD_62_C0 (  dout_0_0_C [62]  ),
    .RD_62_S ( dout_0_0_S ),
    .RD_63_T (  dout_0_0_T [63]  ),
    .RD_63_R0 (  dout_0_0_R [63]  ),
    .RD_63_X0 (  dout_0_0_X [63]  ),
    .RD_63_C0 (  dout_0_0_C [63]  ),
    .RD_63_S ( dout_0_0_S ),
    .RD_64_T (  dout_0_0_T [64]  ),
    .RD_64_R0 (  dout_0_0_R [64]  ),
    .RD_64_X0 (  dout_0_0_X [64]  ),
    .RD_64_C0 (  dout_0_0_C [64]  ),
    .RD_64_S ( dout_0_0_S ),
    .RD_65_T (  dout_0_0_T [65]  ),
    .RD_65_R0 (  dout_0_0_R [65]  ),
    .RD_65_X0 (  dout_0_0_X [65]  ),
    .RD_65_C0 (  dout_0_0_C [65]  ),
    .RD_65_S ( dout_0_0_S ),
    .RD_66_T (  dout_0_0_T [66]  ),
    .RD_66_R0 (  dout_0_0_R [66]  ),
    .RD_66_X0 (  dout_0_0_X [66]  ),
    .RD_66_C0 (  dout_0_0_C [66]  ),
    .RD_66_S ( dout_0_0_S ),
    .RD_67_T (  dout_0_0_T [67]  ),
    .RD_67_R0 (  dout_0_0_R [67]  ),
    .RD_67_X0 (  dout_0_0_X [67]  ),
    .RD_67_C0 (  dout_0_0_C [67]  ),
    .RD_67_S ( dout_0_0_S ),
    .RD_68_T (  dout_0_0_T [68]  ),
    .RD_68_R0 (  dout_0_0_R [68]  ),
    .RD_68_X0 (  dout_0_0_X [68]  ),
    .RD_68_C0 (  dout_0_0_C [68]  ),
    .RD_68_S ( dout_0_0_S ),
    .RD_69_T (  dout_0_0_T [69]  ),
    .RD_69_R0 (  dout_0_0_R [69]  ),
    .RD_69_X0 (  dout_0_0_X [69]  ),
    .RD_69_C0 (  dout_0_0_C [69]  ),
    .RD_69_S ( dout_0_0_S ),
    .RD_7_T (  dout_0_0_T [7]  ),
    .RD_7_R0 (  dout_0_0_R [7]  ),
    .RD_7_X0 (  dout_0_0_X [7]  ),
    .RD_7_C0 (  dout_0_0_C [7]  ),
    .RD_7_S ( dout_0_0_S ),
    .RD_70_T (  dout_0_0_T [70]  ),
    .RD_70_R0 (  dout_0_0_R [70]  ),
    .RD_70_X0 (  dout_0_0_X [70]  ),
    .RD_70_C0 (  dout_0_0_C [70]  ),
    .RD_70_S ( dout_0_0_S ),
    .RD_71_T (  dout_0_0_T [71]  ),
    .RD_71_R0 (  dout_0_0_R [71]  ),
    .RD_71_X0 (  dout_0_0_X [71]  ),
    .RD_71_C0 (  dout_0_0_C [71]  ),
    .RD_71_S ( dout_0_0_S ),
    .RD_72_T (  dout_0_0_T [72]  ),
    .RD_72_R0 (  dout_0_0_R [72]  ),
    .RD_72_X0 (  dout_0_0_X [72]  ),
    .RD_72_C0 (  dout_0_0_C [72]  ),
    .RD_72_S ( dout_0_0_S ),
    .RD_73_T (  dout_0_0_T [73]  ),
    .RD_73_R0 (  dout_0_0_R [73]  ),
    .RD_73_X0 (  dout_0_0_X [73]  ),
    .RD_73_C0 (  dout_0_0_C [73]  ),
    .RD_73_S ( dout_0_0_S ),
    .RD_74_T (  dout_0_0_T [74]  ),
    .RD_74_R0 (  dout_0_0_R [74]  ),
    .RD_74_X0 (  dout_0_0_X [74]  ),
    .RD_74_C0 (  dout_0_0_C [74]  ),
    .RD_74_S ( dout_0_0_S ),
    .RD_75_T (  dout_0_0_T [75]  ),
    .RD_75_R0 (  dout_0_0_R [75]  ),
    .RD_75_X0 (  dout_0_0_X [75]  ),
    .RD_75_C0 (  dout_0_0_C [75]  ),
    .RD_75_S ( dout_0_0_S ),
    .RD_76_T (  dout_0_0_T [76]  ),
    .RD_76_R0 (  dout_0_0_R [76]  ),
    .RD_76_X0 (  dout_0_0_X [76]  ),
    .RD_76_C0 (  dout_0_0_C [76]  ),
    .RD_76_S ( dout_0_0_S ),
    .RD_77_T (  dout_0_0_T [77]  ),
    .RD_77_R0 (  dout_0_0_R [77]  ),
    .RD_77_X0 (  dout_0_0_X [77]  ),
    .RD_77_C0 (  dout_0_0_C [77]  ),
    .RD_77_S ( dout_0_0_S ),
    .RD_78_T (  dout_0_0_T [78]  ),
    .RD_78_R0 (  dout_0_0_R [78]  ),
    .RD_78_X0 (  dout_0_0_X [78]  ),
    .RD_78_C0 (  dout_0_0_C [78]  ),
    .RD_78_S ( dout_0_0_S ),
    .RD_79_T (  dout_0_0_T [79]  ),
    .RD_79_R0 (  dout_0_0_R [79]  ),
    .RD_79_X0 (  dout_0_0_X [79]  ),
    .RD_79_C0 (  dout_0_0_C [79]  ),
    .RD_79_S ( dout_0_0_S ),
    .RD_8_T (  dout_0_0_T [8]  ),
    .RD_8_R0 (  dout_0_0_R [8]  ),
    .RD_8_X0 (  dout_0_0_X [8]  ),
    .RD_8_C0 (  dout_0_0_C [8]  ),
    .RD_8_S ( dout_0_0_S ),
    .RD_9_T (  dout_0_0_T [9]  ),
    .RD_9_R0 (  dout_0_0_R [9]  ),
    .RD_9_X0 (  dout_0_0_X [9]  ),
    .RD_9_C0 (  dout_0_0_C [9]  ),
    .RD_9_S ( dout_0_0_S ),
    .WE ( _24_ ),
    .WD_76 ( Wdata[76] ),
    .WD_72 ( Wdata[72] ),
    .WD_71 ( Wdata[71] ),
    .WD_70 ( Wdata[70] ),
    .WD_7 ( Wdata[7] ),
    .WD_69 ( Wdata[69] ),
    .WD_67 ( Wdata[67] ),
    .WD_59 ( Wdata[59] ),
    .WD_55 ( Wdata[55] ),
    .WD_51 ( Wdata[51] ),
    .WD_6 ( Wdata[6] ),
    .WD_48 ( Wdata[48] ),
    .WD_78 ( Wdata[78] ),
    .WD_77 ( Wdata[77] ),
    .WD_47 ( Wdata[47] ),
    .WD_46 ( Wdata[46] ),
    .WD_41 ( Wdata[41] ),
    .WD_40 ( Wdata[40] ),
    .WD_60 ( Wdata[60] ),
    .WD_36 ( Wdata[36] ),
    .WD_34 ( Wdata[34] ),
    .WD_66 ( Wdata[66] ),
    .WD_32 ( Wdata[32] ),
    .WD_31 ( Wdata[31] ),
    .WD_3 ( Wdata[3] ),
    .WD_44 ( Wdata[44] ),
    .WD_29 ( Wdata[29] ),
    .WD_27 ( Wdata[27] ),
    .WD_26 ( Wdata[26] ),
    .WD_56 ( Wdata[56] ),
    .WD_54 ( Wdata[54] ),
    .WD_23 ( Wdata[23] ),
    .WD_57 ( Wdata[57] ),
    .WD_22 ( Wdata[22] ),
    .WD_2 ( Wdata[2] ),
    .WD_19 ( Wdata[19] ),
    .WD_18 ( Wdata[18] ),
    .WD_8 ( Wdata[8] ),
    .WD_58 ( Wdata[58] ),
    .WD_17 ( Wdata[17] ),
    .WD_16 ( Wdata[16] ),
    .WD_15 ( Wdata[15] ),
    .WD_65 ( Wdata[65] ),
    .WD_14 ( Wdata[14] ),
    .WD_12 ( Wdata[12] ),
    .WD_10 ( Wdata[10] ),
    .WD_1 ( Wdata[1] ),
    .WD_0 ( Wdata[0] ),
    .WD_37 ( Wdata[37] ),
    .WADR_3 ( muxed_Wa_w0[3] ),
    .WADR_2 ( muxed_Wa_w0[2] ),
    .SVOP_0 ( svop[0] ),
    .WD_73 ( Wdata[73] ),
    .SLEEP_EN_7 ( pwrbus_ram_pd[7] ),
    .RD_42 ( dout_0_0[42] ),
    .RD_32 ( dout_0_0[32] ),
    .WD_62 ( Wdata[62] ),
    .RD_31 ( dout_0_0[31] ),
    .RD_33 ( dout_0_0[33] ),
    .RD_30 ( dout_0_0[30] ),
    .RD_4 ( dout_0_0[4] ),
    .RD_9 ( dout_0_0[9] ),
    .WD_61 ( Wdata[61] ),
    .SLEEP_EN_4 ( pwrbus_ram_pd[4] ),
    .RD_28 ( dout_0_0[28] ),
    .WD_35 ( Wdata[35] ),
    .RD_27 ( dout_0_0[27] ),
    .WD_45 ( Wdata[45] ),
    .IDDQ ( iddq_mode ),
    .WD_63 ( Wdata[63] ),
    .RD_24 ( dout_0_0[24] ),
    .RD_23 ( dout_0_0[23] ),
    .RD_35 ( dout_0_0[35] ),
    .RADR_2 ( muxed_Ra_r0[2] ),
    .RD_52 ( dout_0_0[52] ),
    .RD_10 ( dout_0_0[10] ),
    .WD_50 ( Wdata[50] ),
    .WD_11 ( Wdata[11] ),
    .RD_13 ( dout_0_0[13] ),
    .WD_64 ( Wdata[64] ),
    .RD_0 ( dout_0_0[0] ),
    .WD_53 ( Wdata[53] ),
    .SLEEP_EN_1 ( pwrbus_ram_pd[1] ),
    .RD_41 ( dout_0_0[41] ),
    .WADR_0 ( muxed_Wa_w0[0] ),
    .SVOP_1 ( svop[1] ),
    .RD_6 ( dout_0_0[6] ),
    .WD_5 ( Wdata[5] ),
    .RD_2 ( dout_0_0[2] ),
    .RD_59 ( dout_0_0[59] ),
    .RD_26 ( dout_0_0[26] ),
    .RD_45 ( dout_0_0[45] ),
    .RD_58 ( dout_0_0[58] ),
    .WADR_1 ( muxed_Wa_w0[1] ),
    .RD_25 ( dout_0_0[25] ),
    .RD_18 ( dout_0_0[18] ),
    .RD_21 ( dout_0_0[21] ),
    .RADR_0 ( muxed_Ra_r0[0] ),
    .WD_21 ( Wdata[21] ),
    .RD_19 ( dout_0_0[19] ),
    .WD_28 ( Wdata[28] ),
    .RD_29 ( dout_0_0[29] ),
    .WD_68 ( Wdata[68] ),
    .WD_49 ( Wdata[49] ),
    .RD_17 ( dout_0_0[17] ),
    .RD_34 ( dout_0_0[34] ),
    .WD_39 ( Wdata[39] ),
    .RD_71 ( dout_0_0[71] ),
    .RADR_3 ( muxed_Ra_r0[3] ),
    .RD_16 ( dout_0_0[16] ),
    .RD_62 ( dout_0_0[62] ),
    .RADR_1 ( muxed_Ra_r0[1] ),
    .CLK_R ( gated_clk_core ),
    .RD_51 ( dout_0_0[51] ),
    .RD_74 ( dout_0_0[74] ),
    .CLK_W ( gated_clk_core ),
    .RD_38 ( dout_0_0[38] ),
    .RD_3 ( dout_0_0[3] ),
    .RD_40 ( dout_0_0[40] ),
    .RD_12 ( dout_0_0[12] ),
    .RD_14 ( dout_0_0[14] ),
    .WD_4 ( Wdata[4] ),
    .RD_50 ( dout_0_0[50] ),
    .RD_11 ( dout_0_0[11] ),
    .WD_74 ( Wdata[74] ),
    .WD_13 ( Wdata[13] ),
    .RD_43 ( dout_0_0[43] ),
    .RD_44 ( dout_0_0[44] ),
    .RD_1 ( dout_0_0[1] ),
    .RD_77 ( dout_0_0[77] ),
    .RD_15 ( dout_0_0[15] ),
    .WD_9 ( Wdata[9] ),
    .RADR_4 ( _11_ ),
    .RD_76 ( dout_0_0[76] ),
    .WD_79 ( Wdata[79] ),
    .RD_39 ( dout_0_0[39] ),
    .SLEEP_EN_5 ( pwrbus_ram_pd[5] ),
    .RD_37 ( dout_0_0[37] ),
    .RD_20 ( dout_0_0[20] ),
    .RD_46 ( dout_0_0[46] ),
    .RD_75 ( dout_0_0[75] ),
    .RD_47 ( dout_0_0[47] ),
    .RD_48 ( dout_0_0[48] ),
    .WADR_4 ( muxed_Wa_w0[4] ),
    .RD_7 ( dout_0_0[7] ),
    .WD_20 ( Wdata[20] ),
    .RD_5 ( dout_0_0[5] ),
    .WD_42 ( Wdata[42] ),
    .RD_36 ( dout_0_0[36] ),
    .RD_53 ( dout_0_0[53] ),
    .WD_38 ( Wdata[38] ),
    .RD_54 ( dout_0_0[54] ),
    .RD_55 ( dout_0_0[55] ),
    .WD_33 ( Wdata[33] ),
    .RD_56 ( dout_0_0[56] ),
    .WD_75 ( Wdata[75] ),
    .RD_57 ( dout_0_0[57] ),
    .WD_25 ( Wdata[25] ),
    .RD_60 ( dout_0_0[60] ),
    .RD_61 ( dout_0_0[61] ),
    .RD_64 ( dout_0_0[64] ),
    .RD_65 ( dout_0_0[65] ),
    .WD_43 ( Wdata[43] ),
    .RD_67 ( dout_0_0[67] ),
    .RD_49 ( dout_0_0[49] ),
    .RD_66 ( dout_0_0[66] ),
    .RD_68 ( dout_0_0[68] ),
    .RD_63 ( dout_0_0[63] ),
    .RE ( piece_re ),
    .RD_70 ( dout_0_0[70] ),
    .RD_72 ( dout_0_0[72] ),
    .RD_78 ( dout_0_0[78] ),
    .RD_69 ( dout_0_0[69] ),
    .RD_79 ( dout_0_0[79] ),
    .RET_EN ( pwrbus_ram_pd[8] ),
    .WD_30 ( Wdata[30] ),
    .SLEEP_EN_0 ( pwrbus_ram_pd[0] ),
    .WD_24 ( Wdata[24] ),
    .RD_8 ( dout_0_0[8] ),
    .RD_73 ( dout_0_0[73] ),
    .SLEEP_EN_2 ( pwrbus_ram_pd[2] ),
    .RD_22 ( dout_0_0[22] ),
    .SLEEP_EN_3 ( pwrbus_ram_pd[3] ),
    .WD_52 ( Wdata[52] ),
    .SLEEP_EN_6 ( pwrbus_ram_pd[6] )
  );
  logic [79:0] muxed_r0_OutputMuxDataOut_R0 ;
  logic [79:0] muxed_r0_OutputMuxDataOut_X0 ;
  logic [79:0] muxed_r0_OutputMuxDataOut_C0 ;
  logic [0:0] gated_clk_jtag_Data_reg_r0_R0 ;
  logic [0:0] gated_clk_jtag_Data_reg_r0_X0 ;
  logic [0:0] gated_clk_jtag_Data_reg_r0_C0 ;
  logic [0:0] re_reg_SO_r0_R0 ;
  logic [0:0] re_reg_SO_r0_X0 ;
  logic [0:0] re_reg_SO_r0_C0 ;
  logic [0:0] debug_mode_R1 ;
  logic [0:0] debug_mode_X1 ;
  logic [0:0] debug_mode_C1 ;
  logic [0:0] shiftDR_R2 ;
  logic [0:0] shiftDR_X2 ;
  logic [0:0] shiftDR_C2 ;
// module: \$paramod\ScanShareSel_JTAG_reg_ext_cg\JTAG_REG_WIDTH=80\HAS_RESET=0\RESET_VALUE=0
  \$paramod\ScanShareSel_JTAG_reg_ext_cg\JTAG_REG_WIDTH=80\HAS_RESET=0\RESET_VALUE=0 testInst_Data_reg_r0 (
    .D_T (  muxed_r0_OutputMuxDataOut_T  ),
    .D_R (  muxed_r0_OutputMuxDataOut_R0  ),
    .D_X (  muxed_r0_OutputMuxDataOut_X0  ),
    .D_C (  muxed_r0_OutputMuxDataOut_C0  ),
    .D_S (  muxed_r0_OutputMuxDataOut_S  ),
    .clk_T (  gated_clk_jtag_Data_reg_r0_T  ),
    .clk_R (  gated_clk_jtag_Data_reg_r0_R0  ),
    .clk_X (  gated_clk_jtag_Data_reg_r0_X0  ),
    .clk_C (  gated_clk_jtag_Data_reg_r0_C0  ),
    .clk_S (  gated_clk_jtag_Data_reg_r0_S  ),
    .reset__T (  1'h0  ),
    .reset__R (  nouse_zy0  ),
    .reset__X (  nouse_zy1  ),
    .reset__C (  nouse_zy2  ),
    .reset__S ( 1'h0 ),
    .scanin_T (  re_reg_SO_r0_T  ),
    .scanin_R (  re_reg_SO_r0_R0  ),
    .scanin_X (  re_reg_SO_r0_X0  ),
    .scanin_C (  re_reg_SO_r0_C0  ),
    .scanin_S (  re_reg_SO_r0_S  ),
    .sel_T (  debug_mode_T  ),
    .sel_R (  debug_mode_R1  ),
    .sel_X (  debug_mode_X1  ),
    .sel_C (  debug_mode_C1  ),
    .sel_S (  debug_mode_S  ),
    .shiftDR_T (  shiftDR_T  ),
    .shiftDR_R (  shiftDR_R2  ),
    .shiftDR_X (  shiftDR_X2  ),
    .shiftDR_C (  shiftDR_C2  ),
    .shiftDR_S (  shiftDR_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .Q_T (  data_regq_T  ),
    .Q_R0 (  data_regq_R  ),
    .Q_X0 (  data_regq_X  ),
    .Q_C0 (  data_regq_C  ),
    .Q_S ( data_regq_S ),
    .scanout_T (  Data_reg_SO_r0_T  ),
    .scanout_R0 (  Data_reg_SO_r0_R  ),
    .scanout_X0 (  Data_reg_SO_r0_X  ),
    .scanout_C0 (  Data_reg_SO_r0_C  ),
    .scanout_S ( Data_reg_SO_r0_S ),
    .scanout ( Data_reg_SO_r0 ),
    .Q ( data_regq ),
    .shiftDR ( shiftDR ),
    .sel ( debug_mode ),
    .D ( muxed_r0_OutputMuxDataOut ),
    .clk ( gated_clk_jtag_Data_reg_r0 ),
    .reset_ ( 1'b1 ),
    .scanin ( re_reg_SO_r0 )
  );
  logic [1-1:0] nouse_zy0 ;
  logic [1-1:0] nouse_zy1 ;
  logic [1-1:0] nouse_zy2 ;
  logic [4:0] muxed_Ra_r0_R1 ;
  logic [4:0] muxed_Ra_r0_X1 ;
  logic [4:0] muxed_Ra_r0_C1 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_R0 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_X0 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_C0 ;
  logic [0:0] we_reg_SO_w0_R0 ;
  logic [0:0] we_reg_SO_w0_X0 ;
  logic [0:0] we_reg_SO_w0_C0 ;
  logic [0:0] debug_mode_R2 ;
  logic [0:0] debug_mode_X2 ;
  logic [0:0] debug_mode_C2 ;
  logic [0:0] shiftDR_R3 ;
  logic [0:0] shiftDR_X3 ;
  logic [0:0] shiftDR_C3 ;
// module: \$paramod\ScanShareSel_JTAG_reg_ext_cg\JTAG_REG_WIDTH=5\HAS_RESET=0\RESET_VALUE=0
  \$paramod\ScanShareSel_JTAG_reg_ext_cg\JTAG_REG_WIDTH=5\HAS_RESET=0\RESET_VALUE=0 testInst_Ra_reg_r0 (
    .D_T (  muxed_Ra_r0_T  ),
    .D_R (  muxed_Ra_r0_R1  ),
    .D_X (  muxed_Ra_r0_X1  ),
    .D_C (  muxed_Ra_r0_C1  ),
    .D_S (  muxed_Ra_r0_S  ),
    .clk_T (  gated_clk_jtag_Wa_reg_w0_T  ),
    .clk_R (  gated_clk_jtag_Wa_reg_w0_R0  ),
    .clk_X (  gated_clk_jtag_Wa_reg_w0_X0  ),
    .clk_C (  gated_clk_jtag_Wa_reg_w0_C0  ),
    .clk_S (  gated_clk_jtag_Wa_reg_w0_S  ),
    .reset__T (  1'h0  ),
    .reset__R (  nouse_zy3  ),
    .reset__X (  nouse_zy4  ),
    .reset__C (  nouse_zy5  ),
    .reset__S ( 1'h0 ),
    .scanin_T (  we_reg_SO_w0_T  ),
    .scanin_R (  we_reg_SO_w0_R0  ),
    .scanin_X (  we_reg_SO_w0_X0  ),
    .scanin_C (  we_reg_SO_w0_C0  ),
    .scanin_S (  we_reg_SO_w0_S  ),
    .sel_T (  debug_mode_T  ),
    .sel_R (  debug_mode_R2  ),
    .sel_X (  debug_mode_X2  ),
    .sel_C (  debug_mode_C2  ),
    .sel_S (  debug_mode_S  ),
    .shiftDR_T (  shiftDR_T  ),
    .shiftDR_R (  shiftDR_R3  ),
    .shiftDR_X (  shiftDR_X3  ),
    .shiftDR_C (  shiftDR_C3  ),
    .shiftDR_S (  shiftDR_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .Q_T (  Ra_reg_r0_A_T  ),
    .Q_R0 (  Ra_reg_r0_A_R  ),
    .Q_X0 (  Ra_reg_r0_A_X  ),
    .Q_C0 (  Ra_reg_r0_A_C  ),
    .Q_S ( Ra_reg_r0_A_S ),
    .scanout_T (  Ra_reg_SO_r0_T  ),
    .scanout_R0 (  Ra_reg_SO_r0_R  ),
    .scanout_X0 (  Ra_reg_SO_r0_X  ),
    .scanout_C0 (  Ra_reg_SO_r0_C  ),
    .scanout_S ( Ra_reg_SO_r0_S ),
    .scanout ( Ra_reg_SO_r0 ),
    .Q ( Ra_reg_r0_A ),
    .shiftDR ( shiftDR ),
    .sel ( debug_mode ),
    .D ( muxed_Ra_r0 ),
    .clk ( gated_clk_jtag_Wa_reg_w0 ),
    .reset_ ( 1'b1 ),
    .scanin ( we_reg_SO_w0 )
  );
  logic [1-1:0] nouse_zy3 ;
  logic [1-1:0] nouse_zy4 ;
  logic [1-1:0] nouse_zy5 ;
  logic [4:0] muxed_Wa_w0_R1 ;
  logic [4:0] muxed_Wa_w0_X1 ;
  logic [4:0] muxed_Wa_w0_C1 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_R1 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_X1 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_C1 ;
  logic [0:0] SI_R0 ;
  logic [0:0] SI_X0 ;
  logic [0:0] SI_C0 ;
  logic [0:0] debug_mode_R3 ;
  logic [0:0] debug_mode_X3 ;
  logic [0:0] debug_mode_C3 ;
  logic [0:0] shiftDR_R4 ;
  logic [0:0] shiftDR_X4 ;
  logic [0:0] shiftDR_C4 ;
// module: \$paramod\ScanShareSel_JTAG_reg_ext_cg\JTAG_REG_WIDTH=5\HAS_RESET=0\RESET_VALUE=0
  \$paramod\ScanShareSel_JTAG_reg_ext_cg\JTAG_REG_WIDTH=5\HAS_RESET=0\RESET_VALUE=0 testInst_Wa_reg_w0 (
    .D_T (  muxed_Wa_w0_T  ),
    .D_R (  muxed_Wa_w0_R1  ),
    .D_X (  muxed_Wa_w0_X1  ),
    .D_C (  muxed_Wa_w0_C1  ),
    .D_S (  muxed_Wa_w0_S  ),
    .clk_T (  gated_clk_jtag_Wa_reg_w0_T  ),
    .clk_R (  gated_clk_jtag_Wa_reg_w0_R1  ),
    .clk_X (  gated_clk_jtag_Wa_reg_w0_X1  ),
    .clk_C (  gated_clk_jtag_Wa_reg_w0_C1  ),
    .clk_S (  gated_clk_jtag_Wa_reg_w0_S  ),
    .reset__T (  1'h0  ),
    .reset__R (  nouse_zy6  ),
    .reset__X (  nouse_zy7  ),
    .reset__C (  nouse_zy8  ),
    .reset__S ( 1'h0 ),
    .scanin_T (  SI_T  ),
    .scanin_R (  SI_R0  ),
    .scanin_X (  SI_X0  ),
    .scanin_C (  SI_C0  ),
    .scanin_S (  SI_S  ),
    .sel_T (  debug_mode_T  ),
    .sel_R (  debug_mode_R3  ),
    .sel_X (  debug_mode_X3  ),
    .sel_C (  debug_mode_C3  ),
    .sel_S (  debug_mode_S  ),
    .shiftDR_T (  shiftDR_T  ),
    .shiftDR_R (  shiftDR_R4  ),
    .shiftDR_X (  shiftDR_X4  ),
    .shiftDR_C (  shiftDR_C4  ),
    .shiftDR_S (  shiftDR_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .Q_T (  Wa_reg_w0_A_T  ),
    .Q_R0 (  Wa_reg_w0_A_R  ),
    .Q_X0 (  Wa_reg_w0_A_X  ),
    .Q_C0 (  Wa_reg_w0_A_C  ),
    .Q_S ( Wa_reg_w0_A_S ),
    .scanout_T (  Wa_reg_SO_w0_T  ),
    .scanout_R0 (  Wa_reg_SO_w0_R  ),
    .scanout_X0 (  Wa_reg_SO_w0_X  ),
    .scanout_C0 (  Wa_reg_SO_w0_C  ),
    .scanout_S ( Wa_reg_SO_w0_S ),
    .scanout ( Wa_reg_SO_w0 ),
    .Q ( Wa_reg_w0_A ),
    .shiftDR ( shiftDR ),
    .sel ( debug_mode ),
    .D ( muxed_Wa_w0 ),
    .clk ( gated_clk_jtag_Wa_reg_w0 ),
    .reset_ ( 1'b1 ),
    .scanin ( SI )
  );
  logic [1-1:0] nouse_zy6 ;
  logic [1-1:0] nouse_zy7 ;
  logic [1-1:0] nouse_zy8 ;
  logic [0:0] Data_reg_SO_r0_R0 ;
  logic [0:0] Data_reg_SO_r0_X0 ;
  logic [0:0] Data_reg_SO_r0_C0 ;
  logic [0:0] la_bist_clkr0_R0 ;
  logic [0:0] la_bist_clkr0_X0 ;
  logic [0:0] la_bist_clkr0_C0 ;
// module: LNQD1PO4
  LNQD1PO4 testInst_ram_access_lockup (
    .D_T (  Data_reg_SO_r0_T  ),
    .D_R (  Data_reg_SO_r0_R0  ),
    .D_X (  Data_reg_SO_r0_X0  ),
    .D_C (  Data_reg_SO_r0_C0  ),
    .D_S (  Data_reg_SO_r0_S  ),
    .EN_T (  la_bist_clkr0_T  ),
    .EN_R (  la_bist_clkr0_R0  ),
    .EN_X (  la_bist_clkr0_X0  ),
    .EN_C (  la_bist_clkr0_C0  ),
    .EN_S (  la_bist_clkr0_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  SO_int_net_T  ),
    .Q_R0 (  SO_int_net_R  ),
    .Q_X0 (  SO_int_net_X  ),
    .Q_C0 (  SO_int_net_C  ),
    .Q_S ( SO_int_net_S ),
    .Q ( SO_int_net ),
    .D ( Data_reg_SO_r0 ),
    .EN ( la_bist_clkr0 )
  );
  logic [0:0] muxed_re_r0_R1 ;
  logic [0:0] muxed_re_r0_X1 ;
  logic [0:0] muxed_re_r0_C1 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_R2 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_X2 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_C2 ;
  logic [0:0] Ra_reg_SO_r0_R0 ;
  logic [0:0] Ra_reg_SO_r0_X0 ;
  logic [0:0] Ra_reg_SO_r0_C0 ;
  logic [0:0] debug_mode_R4 ;
  logic [0:0] debug_mode_X4 ;
  logic [0:0] debug_mode_C4 ;
  logic [0:0] shiftDR_R5 ;
  logic [0:0] shiftDR_X5 ;
  logic [0:0] shiftDR_C5 ;
// module: \$paramod\ScanShareSel_JTAG_reg_ext_cg\JTAG_REG_WIDTH=1\HAS_RESET=0\RESET_VALUE=0
  \$paramod\ScanShareSel_JTAG_reg_ext_cg\JTAG_REG_WIDTH=1\HAS_RESET=0\RESET_VALUE=0 testInst_re_reg_r0 (
    .D_T (  muxed_re_r0_T  ),
    .D_R (  muxed_re_r0_R1  ),
    .D_X (  muxed_re_r0_X1  ),
    .D_C (  muxed_re_r0_C1  ),
    .D_S (  muxed_re_r0_S  ),
    .clk_T (  gated_clk_jtag_Wa_reg_w0_T  ),
    .clk_R (  gated_clk_jtag_Wa_reg_w0_R2  ),
    .clk_X (  gated_clk_jtag_Wa_reg_w0_X2  ),
    .clk_C (  gated_clk_jtag_Wa_reg_w0_C2  ),
    .clk_S (  gated_clk_jtag_Wa_reg_w0_S  ),
    .reset__T (  1'h0  ),
    .reset__R (  nouse_zy9  ),
    .reset__X (  nouse_zy10  ),
    .reset__C (  nouse_zy11  ),
    .reset__S ( 1'h0 ),
    .scanin_T (  Ra_reg_SO_r0_T  ),
    .scanin_R (  Ra_reg_SO_r0_R0  ),
    .scanin_X (  Ra_reg_SO_r0_X0  ),
    .scanin_C (  Ra_reg_SO_r0_C0  ),
    .scanin_S (  Ra_reg_SO_r0_S  ),
    .sel_T (  debug_mode_T  ),
    .sel_R (  debug_mode_R4  ),
    .sel_X (  debug_mode_X4  ),
    .sel_C (  debug_mode_C4  ),
    .sel_S (  debug_mode_S  ),
    .shiftDR_T (  shiftDR_T  ),
    .shiftDR_R (  shiftDR_R5  ),
    .shiftDR_X (  shiftDR_X5  ),
    .shiftDR_C (  shiftDR_C5  ),
    .shiftDR_S (  shiftDR_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .Q_T (  re_q_T  ),
    .Q_R0 (  re_q_R  ),
    .Q_X0 (  re_q_X  ),
    .Q_C0 (  re_q_C  ),
    .Q_S ( re_q_S ),
    .scanout_T (  re_reg_SO_r0_T  ),
    .scanout_R0 (  re_reg_SO_r0_R  ),
    .scanout_X0 (  re_reg_SO_r0_X  ),
    .scanout_C0 (  re_reg_SO_r0_C  ),
    .scanout_S ( re_reg_SO_r0_S ),
    .scanout ( re_reg_SO_r0 ),
    .Q ( re_q ),
    .shiftDR ( shiftDR ),
    .sel ( debug_mode ),
    .D ( muxed_re_r0 ),
    .clk ( gated_clk_jtag_Wa_reg_w0 ),
    .reset_ ( 1'b1 ),
    .scanin ( Ra_reg_SO_r0 )
  );
  logic [1-1:0] nouse_zy9 ;
  logic [1-1:0] nouse_zy10 ;
  logic [1-1:0] nouse_zy11 ;
  logic [0:0] muxed_we_w0_R1 ;
  logic [0:0] muxed_we_w0_X1 ;
  logic [0:0] muxed_we_w0_C1 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_R3 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_X3 ;
  logic [0:0] gated_clk_jtag_Wa_reg_w0_C3 ;
  logic [0:0] Wa_reg_SO_w0_R0 ;
  logic [0:0] Wa_reg_SO_w0_X0 ;
  logic [0:0] Wa_reg_SO_w0_C0 ;
  logic [0:0] debug_mode_R5 ;
  logic [0:0] debug_mode_X5 ;
  logic [0:0] debug_mode_C5 ;
  logic [0:0] shiftDR_R6 ;
  logic [0:0] shiftDR_X6 ;
  logic [0:0] shiftDR_C6 ;
// module: \$paramod\ScanShareSel_JTAG_reg_ext_cg\JTAG_REG_WIDTH=1\HAS_RESET=0\RESET_VALUE=0
  \$paramod\ScanShareSel_JTAG_reg_ext_cg\JTAG_REG_WIDTH=1\HAS_RESET=0\RESET_VALUE=0 testInst_we_reg_w0 (
    .D_T (  muxed_we_w0_T  ),
    .D_R (  muxed_we_w0_R1  ),
    .D_X (  muxed_we_w0_X1  ),
    .D_C (  muxed_we_w0_C1  ),
    .D_S (  muxed_we_w0_S  ),
    .clk_T (  gated_clk_jtag_Wa_reg_w0_T  ),
    .clk_R (  gated_clk_jtag_Wa_reg_w0_R3  ),
    .clk_X (  gated_clk_jtag_Wa_reg_w0_X3  ),
    .clk_C (  gated_clk_jtag_Wa_reg_w0_C3  ),
    .clk_S (  gated_clk_jtag_Wa_reg_w0_S  ),
    .reset__T (  1'h0  ),
    .reset__R (  nouse_zy12  ),
    .reset__X (  nouse_zy13  ),
    .reset__C (  nouse_zy14  ),
    .reset__S ( 1'h0 ),
    .scanin_T (  Wa_reg_SO_w0_T  ),
    .scanin_R (  Wa_reg_SO_w0_R0  ),
    .scanin_X (  Wa_reg_SO_w0_X0  ),
    .scanin_C (  Wa_reg_SO_w0_C0  ),
    .scanin_S (  Wa_reg_SO_w0_S  ),
    .sel_T (  debug_mode_T  ),
    .sel_R (  debug_mode_R5  ),
    .sel_X (  debug_mode_X5  ),
    .sel_C (  debug_mode_C5  ),
    .sel_S (  debug_mode_S  ),
    .shiftDR_T (  shiftDR_T  ),
    .shiftDR_R (  shiftDR_R6  ),
    .shiftDR_X (  shiftDR_X6  ),
    .shiftDR_C (  shiftDR_C6  ),
    .shiftDR_S (  shiftDR_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .Q_T (  we_q_T  ),
    .Q_R0 (  we_q_R  ),
    .Q_X0 (  we_q_X  ),
    .Q_C0 (  we_q_C  ),
    .Q_S ( we_q_S ),
    .scanout_T (  we_reg_SO_w0_T  ),
    .scanout_R0 (  we_reg_SO_w0_R  ),
    .scanout_X0 (  we_reg_SO_w0_X  ),
    .scanout_C0 (  we_reg_SO_w0_C  ),
    .scanout_S ( we_reg_SO_w0_S ),
    .scanout ( we_reg_SO_w0 ),
    .Q ( we_q ),
    .shiftDR ( shiftDR ),
    .sel ( debug_mode ),
    .D ( muxed_we_w0 ),
    .clk ( gated_clk_jtag_Wa_reg_w0 ),
    .reset_ ( 1'b1 ),
    .scanin ( Wa_reg_SO_w0 )
  );
  logic [1-1:0] nouse_zy12 ;
  logic [1-1:0] nouse_zy13 ;
  logic [1-1:0] nouse_zy14 ;
  logic [0:0] la_bist_clkr0_R1 ;
  logic [0:0] la_bist_clkr0_X1 ;
  logic [0:0] la_bist_clkr0_C1 ;
  logic [0:0] mbist_ramaccess_rst__R3 ;
  logic [0:0] mbist_ramaccess_rst__X3 ;
  logic [0:0] mbist_ramaccess_rst__C3 ;
  logic [0:0] updateDR_R0 ;
  logic [0:0] updateDR_X0 ;
  logic [0:0] updateDR_C0 ;
// module: sync2d_c_pp
  sync2d_c_pp updateDR_synchronizer (
    .clk_T (  la_bist_clkr0_T  ),
    .clk_R (  la_bist_clkr0_R1  ),
    .clk_X (  la_bist_clkr0_X1  ),
    .clk_C (  la_bist_clkr0_C1  ),
    .clk_S (  la_bist_clkr0_S  ),
    .clr__T (  mbist_ramaccess_rst__T  ),
    .clr__R (  mbist_ramaccess_rst__R3  ),
    .clr__X (  mbist_ramaccess_rst__X3  ),
    .clr__C (  mbist_ramaccess_rst__C3  ),
    .clr__S (  mbist_ramaccess_rst__S  ),
    .d_T (  updateDR_T  ),
    .d_R (  updateDR_R0  ),
    .d_X (  updateDR_X0  ),
    .d_C (  updateDR_C0  ),
    .d_S (  updateDR_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .q_T (  updateDR_sync_T  ),
    .q_R0 (  updateDR_sync_R  ),
    .q_X0 (  updateDR_sync_X  ),
    .q_C0 (  updateDR_sync_C  ),
    .q_S ( updateDR_sync_S ),
    .q ( updateDR_sync ),
    .d ( updateDR ),
    .clk ( la_bist_clkr0 ),
    .clr_ ( mbist_ramaccess_rst_ )
  );
  assign D_Ra_reg_r0 = muxed_Ra_r0;
  logic [4:0] muxed_Ra_r0_C2 ;
  logic [4:0] muxed_Ra_r0_R2 ;
  logic [4:0] muxed_Ra_r0_X2 ;
  assign D_Ra_reg_r0_T = muxed_Ra_r0_T ;
  assign muxed_Ra_r0_C2 = D_Ra_reg_r0_C ;
  assign muxed_Ra_r0_R2 = D_Ra_reg_r0_R ;
  assign muxed_Ra_r0_X2 = D_Ra_reg_r0_X ;
  assign D_Ra_reg_r0_S = muxed_Ra_r0_S ;
  assign Data_reg_r0 = data_regq;
  logic [79:0] data_regq_C1 ;
  logic [79:0] data_regq_R1 ;
  logic [79:0] data_regq_X1 ;
  assign Data_reg_r0_T = data_regq_T ;
  assign data_regq_C1 = Data_reg_r0_C ;
  assign data_regq_R1 = Data_reg_r0_R ;
  assign data_regq_X1 = Data_reg_r0_X ;
  assign Data_reg_r0_S = data_regq_S ;
  assign Ra_reg_r0 = muxed_Ra_r0_B;
  logic [4:0] muxed_Ra_r0_B_C1 ;
  logic [4:0] muxed_Ra_r0_B_R1 ;
  logic [4:0] muxed_Ra_r0_B_X1 ;
  assign Ra_reg_r0_T = muxed_Ra_r0_B_T ;
  assign muxed_Ra_r0_B_C1 = Ra_reg_r0_C ;
  assign muxed_Ra_r0_B_R1 = Ra_reg_r0_R ;
  assign muxed_Ra_r0_B_X1 = Ra_reg_r0_X ;
  assign Ra_reg_r0_S = muxed_Ra_r0_B_S ;
  assign Ra_reg_r0_B = mbist_Ra_r0;
  logic [4:0] mbist_Ra_r0_C1 ;
  logic [4:0] mbist_Ra_r0_R1 ;
  logic [4:0] mbist_Ra_r0_X1 ;
  assign Ra_reg_r0_B_T = mbist_Ra_r0_T ;
  assign mbist_Ra_r0_C1 = Ra_reg_r0_B_C ;
  assign mbist_Ra_r0_R1 = Ra_reg_r0_B_R ;
  assign mbist_Ra_r0_X1 = Ra_reg_r0_B_X ;
  assign Ra_reg_r0_B_S = mbist_Ra_r0_S ;
  assign Wa_reg_w0 = muxed_Wa_w0_B;
  logic [4:0] muxed_Wa_w0_B_C1 ;
  logic [4:0] muxed_Wa_w0_B_R1 ;
  logic [4:0] muxed_Wa_w0_B_X1 ;
  assign Wa_reg_w0_T = muxed_Wa_w0_B_T ;
  assign muxed_Wa_w0_B_C1 = Wa_reg_w0_C ;
  assign muxed_Wa_w0_B_R1 = Wa_reg_w0_R ;
  assign muxed_Wa_w0_B_X1 = Wa_reg_w0_X ;
  assign Wa_reg_w0_S = muxed_Wa_w0_B_S ;
  assign Wa_reg_w0_B = mbist_Wa_w0;
  logic [4:0] mbist_Wa_w0_C1 ;
  logic [4:0] mbist_Wa_w0_R1 ;
  logic [4:0] mbist_Wa_w0_X1 ;
  assign Wa_reg_w0_B_T = mbist_Wa_w0_T ;
  assign mbist_Wa_w0_C1 = Wa_reg_w0_B_C ;
  assign mbist_Wa_w0_R1 = Wa_reg_w0_B_R ;
  assign mbist_Wa_w0_X1 = Wa_reg_w0_B_X ;
  assign Wa_reg_w0_B_S = mbist_Wa_w0_S ;
  assign Wa_reg_w0_S = Ra_reg_r0_S;
  logic [0:0] Ra_reg_r0_S_C5 ;
  logic [0:0] Ra_reg_r0_S_R5 ;
  logic [0:0] Ra_reg_r0_S_X5 ;
  assign Wa_reg_w0_S_T = Ra_reg_r0_S_T ;
  assign Ra_reg_r0_S_C5 = Wa_reg_w0_S_C ;
  assign Ra_reg_r0_S_R5 = Wa_reg_w0_S_R ;
  assign Ra_reg_r0_S_X5 = Wa_reg_w0_S_X ;
  assign Wa_reg_w0_S_S = Ra_reg_r0_S_S ;
  assign access_en_w = posedge_updateDR_sync;
  logic [0:0] posedge_updateDR_sync_C2 ;
  logic [0:0] posedge_updateDR_sync_R2 ;
  logic [0:0] posedge_updateDR_sync_X2 ;
  assign access_en_w_T = posedge_updateDR_sync_T ;
  assign posedge_updateDR_sync_C2 = access_en_w_C ;
  assign posedge_updateDR_sync_R2 = access_en_w_R ;
  assign posedge_updateDR_sync_X2 = access_en_w_X ;
  assign access_en_w_S = posedge_updateDR_sync_S ;
  assign dft_capdr_r = ary_atpg_ctl;
  logic [0:0] ary_atpg_ctl_C2 ;
  logic [0:0] ary_atpg_ctl_R2 ;
  logic [0:0] ary_atpg_ctl_X2 ;
  assign dft_capdr_r_T = ary_atpg_ctl_T ;
  assign ary_atpg_ctl_C2 = dft_capdr_r_C ;
  assign ary_atpg_ctl_R2 = dft_capdr_r_R ;
  assign ary_atpg_ctl_X2 = dft_capdr_r_X ;
  assign dft_capdr_r_S = ary_atpg_ctl_S ;
  assign dft_capdr_w = ary_atpg_ctl;
  logic [0:0] ary_atpg_ctl_C3 ;
  logic [0:0] ary_atpg_ctl_R3 ;
  logic [0:0] ary_atpg_ctl_X3 ;
  assign dft_capdr_w_T = ary_atpg_ctl_T ;
  assign ary_atpg_ctl_C3 = dft_capdr_w_C ;
  assign ary_atpg_ctl_R3 = dft_capdr_w_R ;
  assign ary_atpg_ctl_X3 = dft_capdr_w_X ;
  assign dft_capdr_w_S = ary_atpg_ctl_S ;
  assign dout = data_regq;
  logic [79:0] data_regq_C2 ;
  logic [79:0] data_regq_R2 ;
  logic [79:0] data_regq_X2 ;
  assign dout_T = data_regq_T ;
  assign data_regq_C2 = dout_C ;
  assign data_regq_R2 = dout_R ;
  assign data_regq_X2 = dout_X ;
  assign dout_S = data_regq_S ;
  assign la_bist_clkw0 = la_bist_clkr0;
  logic [0:0] la_bist_clkr0_C2 ;
  logic [0:0] la_bist_clkr0_R2 ;
  logic [0:0] la_bist_clkr0_X2 ;
  assign la_bist_clkw0_T = la_bist_clkr0_T ;
  assign la_bist_clkr0_C2 = la_bist_clkw0_C ;
  assign la_bist_clkr0_R2 = la_bist_clkw0_R ;
  assign la_bist_clkr0_X2 = la_bist_clkw0_X ;
  assign la_bist_clkw0_S = la_bist_clkr0_S ;
  assign mbist_Do_r0_int_net = data_regq;
  logic [79:0] data_regq_C3 ;
  logic [79:0] data_regq_R3 ;
  logic [79:0] data_regq_X3 ;
  assign mbist_Do_r0_int_net_T = data_regq_T ;
  assign data_regq_C3 = mbist_Do_r0_int_net_C ;
  assign data_regq_R3 = mbist_Do_r0_int_net_R ;
  assign data_regq_X3 = mbist_Do_r0_int_net_X ;
  assign mbist_Do_r0_int_net_S = data_regq_S ;
  assign muxed_Di_w0 = Wdata;
  logic [79:0] Wdata_C2 ;
  logic [79:0] Wdata_R2 ;
  logic [79:0] Wdata_X2 ;
  assign muxed_Di_w0_T = Wdata_T ;
  assign Wdata_C2 = muxed_Di_w0_C ;
  assign Wdata_R2 = muxed_Di_w0_R ;
  assign Wdata_X2 = muxed_Di_w0_X ;
  assign muxed_Di_w0_S = Wdata_S ;
  assign muxed_Di_w0_A = di;
  logic [79:0] di_C2 ;
  logic [79:0] di_R2 ;
  logic [79:0] di_X2 ;
  assign muxed_Di_w0_A_T = di_T ;
  assign di_C2 = muxed_Di_w0_A_C ;
  assign di_R2 = muxed_Di_w0_A_R ;
  assign di_X2 = muxed_Di_w0_A_X ;
  assign muxed_Di_w0_A_S = di_S ;
  assign muxed_Di_w0_S = muxed_re_r0_S;
  logic [0:0] muxed_re_r0_S_C7 ;
  logic [0:0] muxed_re_r0_S_R7 ;
  logic [0:0] muxed_re_r0_S_X7 ;
  assign muxed_Di_w0_S_T = muxed_re_r0_S_T ;
  assign muxed_re_r0_S_C7 = muxed_Di_w0_S_C ;
  assign muxed_re_r0_S_R7 = muxed_Di_w0_S_R ;
  assign muxed_re_r0_S_X7 = muxed_Di_w0_S_X ;
  assign muxed_Di_w0_S_S = muxed_re_r0_S_S ;
  assign muxed_Ra_r0_A = ra;
  logic [4:0] ra_C2 ;
  logic [4:0] ra_R2 ;
  logic [4:0] ra_X2 ;
  assign muxed_Ra_r0_A_T = ra_T ;
  assign ra_C2 = muxed_Ra_r0_A_C ;
  assign ra_R2 = muxed_Ra_r0_A_R ;
  assign ra_X2 = muxed_Ra_r0_A_X ;
  assign muxed_Ra_r0_A_S = ra_S ;
  assign muxed_Ra_r0_S = muxed_re_r0_S;
  logic [0:0] muxed_re_r0_S_C8 ;
  logic [0:0] muxed_re_r0_S_R8 ;
  logic [0:0] muxed_re_r0_S_X8 ;
  assign muxed_Ra_r0_S_T = muxed_re_r0_S_T ;
  assign muxed_re_r0_S_C8 = muxed_Ra_r0_S_C ;
  assign muxed_re_r0_S_R8 = muxed_Ra_r0_S_R ;
  assign muxed_re_r0_S_X8 = muxed_Ra_r0_S_X ;
  assign muxed_Ra_r0_S_S = muxed_re_r0_S_S ;
  assign muxed_Wa_w0_A = wa;
  logic [4:0] wa_C2 ;
  logic [4:0] wa_R2 ;
  logic [4:0] wa_X2 ;
  assign muxed_Wa_w0_A_T = wa_T ;
  assign wa_C2 = muxed_Wa_w0_A_C ;
  assign wa_R2 = muxed_Wa_w0_A_R ;
  assign wa_X2 = muxed_Wa_w0_A_X ;
  assign muxed_Wa_w0_A_S = wa_S ;
  assign muxed_Wa_w0_S = muxed_re_r0_S;
  logic [0:0] muxed_re_r0_S_C9 ;
  logic [0:0] muxed_re_r0_S_R9 ;
  logic [0:0] muxed_re_r0_S_X9 ;
  assign muxed_Wa_w0_S_T = muxed_re_r0_S_T ;
  assign muxed_re_r0_S_C9 = muxed_Wa_w0_S_C ;
  assign muxed_re_r0_S_R9 = muxed_Wa_w0_S_R ;
  assign muxed_re_r0_S_X9 = muxed_Wa_w0_S_X ;
  assign muxed_Wa_w0_S_S = muxed_re_r0_S_S ;
  assign muxed_re_r0_A = re;
  logic [0:0] re_C4 ;
  logic [0:0] re_R4 ;
  logic [0:0] re_X4 ;
  assign muxed_re_r0_A_T = re_T ;
  assign re_C4 = muxed_re_r0_A_C ;
  assign re_R4 = muxed_re_r0_A_R ;
  assign re_X4 = muxed_re_r0_A_X ;
  assign muxed_re_r0_A_S = re_S ;
  assign muxed_we_w0_A = we;
  logic [0:0] we_C3 ;
  logic [0:0] we_R3 ;
  logic [0:0] we_X3 ;
  assign muxed_we_w0_A_T = we_T ;
  assign we_C3 = muxed_we_w0_A_C ;
  assign we_R3 = muxed_we_w0_A_R ;
  assign we_X3 = muxed_we_w0_A_X ;
  assign muxed_we_w0_A_S = we_S ;
  assign muxed_we_w0_S = muxed_re_r0_S;
  logic [0:0] muxed_re_r0_S_C10 ;
  logic [0:0] muxed_re_r0_S_R10 ;
  logic [0:0] muxed_re_r0_S_X10 ;
  assign muxed_we_w0_S_T = muxed_re_r0_S_T ;
  assign muxed_re_r0_S_C10 = muxed_we_w0_S_C ;
  assign muxed_re_r0_S_R10 = muxed_we_w0_S_R ;
  assign muxed_re_r0_S_X10 = muxed_we_w0_S_X ;
  assign muxed_we_w0_S_S = muxed_re_r0_S_S ;
  assign pre_Ra_reg_r0 = Ra_reg_r0_A;
  logic [4:0] Ra_reg_r0_A_C1 ;
  logic [4:0] Ra_reg_r0_A_R1 ;
  logic [4:0] Ra_reg_r0_A_X1 ;
  assign pre_Ra_reg_r0_T = Ra_reg_r0_A_T ;
  assign Ra_reg_r0_A_C1 = pre_Ra_reg_r0_C ;
  assign Ra_reg_r0_A_R1 = pre_Ra_reg_r0_R ;
  assign Ra_reg_r0_A_X1 = pre_Ra_reg_r0_X ;
  assign pre_Ra_reg_r0_S = Ra_reg_r0_A_S ;
  assign pre_Wa_reg_w0 = Wa_reg_w0_A;
  logic [4:0] Wa_reg_w0_A_C1 ;
  logic [4:0] Wa_reg_w0_A_R1 ;
  logic [4:0] Wa_reg_w0_A_X1 ;
  assign pre_Wa_reg_w0_T = Wa_reg_w0_A_T ;
  assign Wa_reg_w0_A_C1 = pre_Wa_reg_w0_C ;
  assign Wa_reg_w0_A_R1 = pre_Wa_reg_w0_R ;
  assign Wa_reg_w0_A_X1 = pre_Wa_reg_w0_X ;
  assign pre_Wa_reg_w0_S = Wa_reg_w0_A_S ;
  assign pre_muxed_Di_w0 = muxed_Di_w0_B;
  logic [79:0] muxed_Di_w0_B_C1 ;
  logic [79:0] muxed_Di_w0_B_R1 ;
  logic [79:0] muxed_Di_w0_B_X1 ;
  assign pre_muxed_Di_w0_T = muxed_Di_w0_B_T ;
  assign muxed_Di_w0_B_C1 = pre_muxed_Di_w0_C ;
  assign muxed_Di_w0_B_R1 = pre_muxed_Di_w0_R ;
  assign muxed_Di_w0_B_X1 = pre_muxed_Di_w0_X ;
  assign pre_muxed_Di_w0_S = muxed_Di_w0_B_S ;
  assign pre_muxed_Di_w0_A = data_regq;
  logic [79:0] data_regq_C4 ;
  logic [79:0] data_regq_R4 ;
  logic [79:0] data_regq_X4 ;
  assign pre_muxed_Di_w0_A_T = data_regq_T ;
  assign data_regq_C4 = pre_muxed_Di_w0_A_C ;
  assign data_regq_R4 = pre_muxed_Di_w0_A_R ;
  assign data_regq_X4 = pre_muxed_Di_w0_A_X ;
  assign pre_muxed_Di_w0_A_S = data_regq_S ;
  assign pre_muxed_Di_w0_B = { mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0, mbist_Di_w0 };
  assign pre_muxed_Di_w0_B_T = {  mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T , mbist_Di_w0_T  };
  logic [13:0] pre_muxed_Di_w0_B_S ;
  assign pre_muxed_Di_w0_B_S = 0 ;
  logic [1:0] mbist_Di_w0_R40 ;
  logic [1:0] mbist_Di_w0_X40 ;
  logic [1:0] mbist_Di_w0_C40 ;
  assign mbist_Di_w0_R40 = pre_muxed_Di_w0_B_R [79:78] ;
  assign mbist_Di_w0_X40 = pre_muxed_Di_w0_B_X [79:78] ;
  assign mbist_Di_w0_C40 = pre_muxed_Di_w0_B_C [79:78] ;
  logic [1:0] mbist_Di_w0_R41 ;
  logic [1:0] mbist_Di_w0_X41 ;
  logic [1:0] mbist_Di_w0_C41 ;
  assign mbist_Di_w0_R41 = pre_muxed_Di_w0_B_R [77:76] ;
  assign mbist_Di_w0_X41 = pre_muxed_Di_w0_B_X [77:76] ;
  assign mbist_Di_w0_C41 = pre_muxed_Di_w0_B_C [77:76] ;
  logic [1:0] mbist_Di_w0_R42 ;
  logic [1:0] mbist_Di_w0_X42 ;
  logic [1:0] mbist_Di_w0_C42 ;
  assign mbist_Di_w0_R42 = pre_muxed_Di_w0_B_R [75:74] ;
  assign mbist_Di_w0_X42 = pre_muxed_Di_w0_B_X [75:74] ;
  assign mbist_Di_w0_C42 = pre_muxed_Di_w0_B_C [75:74] ;
  logic [1:0] mbist_Di_w0_R43 ;
  logic [1:0] mbist_Di_w0_X43 ;
  logic [1:0] mbist_Di_w0_C43 ;
  assign mbist_Di_w0_R43 = pre_muxed_Di_w0_B_R [73:72] ;
  assign mbist_Di_w0_X43 = pre_muxed_Di_w0_B_X [73:72] ;
  assign mbist_Di_w0_C43 = pre_muxed_Di_w0_B_C [73:72] ;
  logic [1:0] mbist_Di_w0_R44 ;
  logic [1:0] mbist_Di_w0_X44 ;
  logic [1:0] mbist_Di_w0_C44 ;
  assign mbist_Di_w0_R44 = pre_muxed_Di_w0_B_R [71:70] ;
  assign mbist_Di_w0_X44 = pre_muxed_Di_w0_B_X [71:70] ;
  assign mbist_Di_w0_C44 = pre_muxed_Di_w0_B_C [71:70] ;
  logic [1:0] mbist_Di_w0_R45 ;
  logic [1:0] mbist_Di_w0_X45 ;
  logic [1:0] mbist_Di_w0_C45 ;
  assign mbist_Di_w0_R45 = pre_muxed_Di_w0_B_R [69:68] ;
  assign mbist_Di_w0_X45 = pre_muxed_Di_w0_B_X [69:68] ;
  assign mbist_Di_w0_C45 = pre_muxed_Di_w0_B_C [69:68] ;
  logic [1:0] mbist_Di_w0_R46 ;
  logic [1:0] mbist_Di_w0_X46 ;
  logic [1:0] mbist_Di_w0_C46 ;
  assign mbist_Di_w0_R46 = pre_muxed_Di_w0_B_R [67:66] ;
  assign mbist_Di_w0_X46 = pre_muxed_Di_w0_B_X [67:66] ;
  assign mbist_Di_w0_C46 = pre_muxed_Di_w0_B_C [67:66] ;
  logic [1:0] mbist_Di_w0_R47 ;
  logic [1:0] mbist_Di_w0_X47 ;
  logic [1:0] mbist_Di_w0_C47 ;
  assign mbist_Di_w0_R47 = pre_muxed_Di_w0_B_R [65:64] ;
  assign mbist_Di_w0_X47 = pre_muxed_Di_w0_B_X [65:64] ;
  assign mbist_Di_w0_C47 = pre_muxed_Di_w0_B_C [65:64] ;
  logic [1:0] mbist_Di_w0_R48 ;
  logic [1:0] mbist_Di_w0_X48 ;
  logic [1:0] mbist_Di_w0_C48 ;
  assign mbist_Di_w0_R48 = pre_muxed_Di_w0_B_R [63:62] ;
  assign mbist_Di_w0_X48 = pre_muxed_Di_w0_B_X [63:62] ;
  assign mbist_Di_w0_C48 = pre_muxed_Di_w0_B_C [63:62] ;
  logic [1:0] mbist_Di_w0_R49 ;
  logic [1:0] mbist_Di_w0_X49 ;
  logic [1:0] mbist_Di_w0_C49 ;
  assign mbist_Di_w0_R49 = pre_muxed_Di_w0_B_R [61:60] ;
  assign mbist_Di_w0_X49 = pre_muxed_Di_w0_B_X [61:60] ;
  assign mbist_Di_w0_C49 = pre_muxed_Di_w0_B_C [61:60] ;
  logic [1:0] mbist_Di_w0_R50 ;
  logic [1:0] mbist_Di_w0_X50 ;
  logic [1:0] mbist_Di_w0_C50 ;
  assign mbist_Di_w0_R50 = pre_muxed_Di_w0_B_R [59:58] ;
  assign mbist_Di_w0_X50 = pre_muxed_Di_w0_B_X [59:58] ;
  assign mbist_Di_w0_C50 = pre_muxed_Di_w0_B_C [59:58] ;
  logic [1:0] mbist_Di_w0_R51 ;
  logic [1:0] mbist_Di_w0_X51 ;
  logic [1:0] mbist_Di_w0_C51 ;
  assign mbist_Di_w0_R51 = pre_muxed_Di_w0_B_R [57:56] ;
  assign mbist_Di_w0_X51 = pre_muxed_Di_w0_B_X [57:56] ;
  assign mbist_Di_w0_C51 = pre_muxed_Di_w0_B_C [57:56] ;
  logic [1:0] mbist_Di_w0_R52 ;
  logic [1:0] mbist_Di_w0_X52 ;
  logic [1:0] mbist_Di_w0_C52 ;
  assign mbist_Di_w0_R52 = pre_muxed_Di_w0_B_R [55:54] ;
  assign mbist_Di_w0_X52 = pre_muxed_Di_w0_B_X [55:54] ;
  assign mbist_Di_w0_C52 = pre_muxed_Di_w0_B_C [55:54] ;
  logic [1:0] mbist_Di_w0_R53 ;
  logic [1:0] mbist_Di_w0_X53 ;
  logic [1:0] mbist_Di_w0_C53 ;
  assign mbist_Di_w0_R53 = pre_muxed_Di_w0_B_R [53:52] ;
  assign mbist_Di_w0_X53 = pre_muxed_Di_w0_B_X [53:52] ;
  assign mbist_Di_w0_C53 = pre_muxed_Di_w0_B_C [53:52] ;
  logic [1:0] mbist_Di_w0_R54 ;
  logic [1:0] mbist_Di_w0_X54 ;
  logic [1:0] mbist_Di_w0_C54 ;
  assign mbist_Di_w0_R54 = pre_muxed_Di_w0_B_R [51:50] ;
  assign mbist_Di_w0_X54 = pre_muxed_Di_w0_B_X [51:50] ;
  assign mbist_Di_w0_C54 = pre_muxed_Di_w0_B_C [51:50] ;
  logic [1:0] mbist_Di_w0_R55 ;
  logic [1:0] mbist_Di_w0_X55 ;
  logic [1:0] mbist_Di_w0_C55 ;
  assign mbist_Di_w0_R55 = pre_muxed_Di_w0_B_R [49:48] ;
  assign mbist_Di_w0_X55 = pre_muxed_Di_w0_B_X [49:48] ;
  assign mbist_Di_w0_C55 = pre_muxed_Di_w0_B_C [49:48] ;
  logic [1:0] mbist_Di_w0_R56 ;
  logic [1:0] mbist_Di_w0_X56 ;
  logic [1:0] mbist_Di_w0_C56 ;
  assign mbist_Di_w0_R56 = pre_muxed_Di_w0_B_R [47:46] ;
  assign mbist_Di_w0_X56 = pre_muxed_Di_w0_B_X [47:46] ;
  assign mbist_Di_w0_C56 = pre_muxed_Di_w0_B_C [47:46] ;
  logic [1:0] mbist_Di_w0_R57 ;
  logic [1:0] mbist_Di_w0_X57 ;
  logic [1:0] mbist_Di_w0_C57 ;
  assign mbist_Di_w0_R57 = pre_muxed_Di_w0_B_R [45:44] ;
  assign mbist_Di_w0_X57 = pre_muxed_Di_w0_B_X [45:44] ;
  assign mbist_Di_w0_C57 = pre_muxed_Di_w0_B_C [45:44] ;
  logic [1:0] mbist_Di_w0_R58 ;
  logic [1:0] mbist_Di_w0_X58 ;
  logic [1:0] mbist_Di_w0_C58 ;
  assign mbist_Di_w0_R58 = pre_muxed_Di_w0_B_R [43:42] ;
  assign mbist_Di_w0_X58 = pre_muxed_Di_w0_B_X [43:42] ;
  assign mbist_Di_w0_C58 = pre_muxed_Di_w0_B_C [43:42] ;
  logic [1:0] mbist_Di_w0_R59 ;
  logic [1:0] mbist_Di_w0_X59 ;
  logic [1:0] mbist_Di_w0_C59 ;
  assign mbist_Di_w0_R59 = pre_muxed_Di_w0_B_R [41:40] ;
  assign mbist_Di_w0_X59 = pre_muxed_Di_w0_B_X [41:40] ;
  assign mbist_Di_w0_C59 = pre_muxed_Di_w0_B_C [41:40] ;
  logic [1:0] mbist_Di_w0_R60 ;
  logic [1:0] mbist_Di_w0_X60 ;
  logic [1:0] mbist_Di_w0_C60 ;
  assign mbist_Di_w0_R60 = pre_muxed_Di_w0_B_R [39:38] ;
  assign mbist_Di_w0_X60 = pre_muxed_Di_w0_B_X [39:38] ;
  assign mbist_Di_w0_C60 = pre_muxed_Di_w0_B_C [39:38] ;
  logic [1:0] mbist_Di_w0_R61 ;
  logic [1:0] mbist_Di_w0_X61 ;
  logic [1:0] mbist_Di_w0_C61 ;
  assign mbist_Di_w0_R61 = pre_muxed_Di_w0_B_R [37:36] ;
  assign mbist_Di_w0_X61 = pre_muxed_Di_w0_B_X [37:36] ;
  assign mbist_Di_w0_C61 = pre_muxed_Di_w0_B_C [37:36] ;
  logic [1:0] mbist_Di_w0_R62 ;
  logic [1:0] mbist_Di_w0_X62 ;
  logic [1:0] mbist_Di_w0_C62 ;
  assign mbist_Di_w0_R62 = pre_muxed_Di_w0_B_R [35:34] ;
  assign mbist_Di_w0_X62 = pre_muxed_Di_w0_B_X [35:34] ;
  assign mbist_Di_w0_C62 = pre_muxed_Di_w0_B_C [35:34] ;
  logic [1:0] mbist_Di_w0_R63 ;
  logic [1:0] mbist_Di_w0_X63 ;
  logic [1:0] mbist_Di_w0_C63 ;
  assign mbist_Di_w0_R63 = pre_muxed_Di_w0_B_R [33:32] ;
  assign mbist_Di_w0_X63 = pre_muxed_Di_w0_B_X [33:32] ;
  assign mbist_Di_w0_C63 = pre_muxed_Di_w0_B_C [33:32] ;
  logic [1:0] mbist_Di_w0_R64 ;
  logic [1:0] mbist_Di_w0_X64 ;
  logic [1:0] mbist_Di_w0_C64 ;
  assign mbist_Di_w0_R64 = pre_muxed_Di_w0_B_R [31:30] ;
  assign mbist_Di_w0_X64 = pre_muxed_Di_w0_B_X [31:30] ;
  assign mbist_Di_w0_C64 = pre_muxed_Di_w0_B_C [31:30] ;
  logic [1:0] mbist_Di_w0_R65 ;
  logic [1:0] mbist_Di_w0_X65 ;
  logic [1:0] mbist_Di_w0_C65 ;
  assign mbist_Di_w0_R65 = pre_muxed_Di_w0_B_R [29:28] ;
  assign mbist_Di_w0_X65 = pre_muxed_Di_w0_B_X [29:28] ;
  assign mbist_Di_w0_C65 = pre_muxed_Di_w0_B_C [29:28] ;
  logic [1:0] mbist_Di_w0_R66 ;
  logic [1:0] mbist_Di_w0_X66 ;
  logic [1:0] mbist_Di_w0_C66 ;
  assign mbist_Di_w0_R66 = pre_muxed_Di_w0_B_R [27:26] ;
  assign mbist_Di_w0_X66 = pre_muxed_Di_w0_B_X [27:26] ;
  assign mbist_Di_w0_C66 = pre_muxed_Di_w0_B_C [27:26] ;
  logic [1:0] mbist_Di_w0_R67 ;
  logic [1:0] mbist_Di_w0_X67 ;
  logic [1:0] mbist_Di_w0_C67 ;
  assign mbist_Di_w0_R67 = pre_muxed_Di_w0_B_R [25:24] ;
  assign mbist_Di_w0_X67 = pre_muxed_Di_w0_B_X [25:24] ;
  assign mbist_Di_w0_C67 = pre_muxed_Di_w0_B_C [25:24] ;
  logic [1:0] mbist_Di_w0_R68 ;
  logic [1:0] mbist_Di_w0_X68 ;
  logic [1:0] mbist_Di_w0_C68 ;
  assign mbist_Di_w0_R68 = pre_muxed_Di_w0_B_R [23:22] ;
  assign mbist_Di_w0_X68 = pre_muxed_Di_w0_B_X [23:22] ;
  assign mbist_Di_w0_C68 = pre_muxed_Di_w0_B_C [23:22] ;
  logic [1:0] mbist_Di_w0_R69 ;
  logic [1:0] mbist_Di_w0_X69 ;
  logic [1:0] mbist_Di_w0_C69 ;
  assign mbist_Di_w0_R69 = pre_muxed_Di_w0_B_R [21:20] ;
  assign mbist_Di_w0_X69 = pre_muxed_Di_w0_B_X [21:20] ;
  assign mbist_Di_w0_C69 = pre_muxed_Di_w0_B_C [21:20] ;
  logic [1:0] mbist_Di_w0_R70 ;
  logic [1:0] mbist_Di_w0_X70 ;
  logic [1:0] mbist_Di_w0_C70 ;
  assign mbist_Di_w0_R70 = pre_muxed_Di_w0_B_R [19:18] ;
  assign mbist_Di_w0_X70 = pre_muxed_Di_w0_B_X [19:18] ;
  assign mbist_Di_w0_C70 = pre_muxed_Di_w0_B_C [19:18] ;
  logic [1:0] mbist_Di_w0_R71 ;
  logic [1:0] mbist_Di_w0_X71 ;
  logic [1:0] mbist_Di_w0_C71 ;
  assign mbist_Di_w0_R71 = pre_muxed_Di_w0_B_R [17:16] ;
  assign mbist_Di_w0_X71 = pre_muxed_Di_w0_B_X [17:16] ;
  assign mbist_Di_w0_C71 = pre_muxed_Di_w0_B_C [17:16] ;
  logic [1:0] mbist_Di_w0_R72 ;
  logic [1:0] mbist_Di_w0_X72 ;
  logic [1:0] mbist_Di_w0_C72 ;
  assign mbist_Di_w0_R72 = pre_muxed_Di_w0_B_R [15:14] ;
  assign mbist_Di_w0_X72 = pre_muxed_Di_w0_B_X [15:14] ;
  assign mbist_Di_w0_C72 = pre_muxed_Di_w0_B_C [15:14] ;
  logic [1:0] mbist_Di_w0_R73 ;
  logic [1:0] mbist_Di_w0_X73 ;
  logic [1:0] mbist_Di_w0_C73 ;
  assign mbist_Di_w0_R73 = pre_muxed_Di_w0_B_R [13:12] ;
  assign mbist_Di_w0_X73 = pre_muxed_Di_w0_B_X [13:12] ;
  assign mbist_Di_w0_C73 = pre_muxed_Di_w0_B_C [13:12] ;
  logic [1:0] mbist_Di_w0_R74 ;
  logic [1:0] mbist_Di_w0_X74 ;
  logic [1:0] mbist_Di_w0_C74 ;
  assign mbist_Di_w0_R74 = pre_muxed_Di_w0_B_R [11:10] ;
  assign mbist_Di_w0_X74 = pre_muxed_Di_w0_B_X [11:10] ;
  assign mbist_Di_w0_C74 = pre_muxed_Di_w0_B_C [11:10] ;
  logic [1:0] mbist_Di_w0_R75 ;
  logic [1:0] mbist_Di_w0_X75 ;
  logic [1:0] mbist_Di_w0_C75 ;
  assign mbist_Di_w0_R75 = pre_muxed_Di_w0_B_R [9:8] ;
  assign mbist_Di_w0_X75 = pre_muxed_Di_w0_B_X [9:8] ;
  assign mbist_Di_w0_C75 = pre_muxed_Di_w0_B_C [9:8] ;
  logic [1:0] mbist_Di_w0_R76 ;
  logic [1:0] mbist_Di_w0_X76 ;
  logic [1:0] mbist_Di_w0_C76 ;
  assign mbist_Di_w0_R76 = pre_muxed_Di_w0_B_R [7:6] ;
  assign mbist_Di_w0_X76 = pre_muxed_Di_w0_B_X [7:6] ;
  assign mbist_Di_w0_C76 = pre_muxed_Di_w0_B_C [7:6] ;
  logic [1:0] mbist_Di_w0_R77 ;
  logic [1:0] mbist_Di_w0_X77 ;
  logic [1:0] mbist_Di_w0_C77 ;
  assign mbist_Di_w0_R77 = pre_muxed_Di_w0_B_R [5:4] ;
  assign mbist_Di_w0_X77 = pre_muxed_Di_w0_B_X [5:4] ;
  assign mbist_Di_w0_C77 = pre_muxed_Di_w0_B_C [5:4] ;
  logic [1:0] mbist_Di_w0_R78 ;
  logic [1:0] mbist_Di_w0_X78 ;
  logic [1:0] mbist_Di_w0_C78 ;
  assign mbist_Di_w0_R78 = pre_muxed_Di_w0_B_R [3:2] ;
  assign mbist_Di_w0_X78 = pre_muxed_Di_w0_B_X [3:2] ;
  assign mbist_Di_w0_C78 = pre_muxed_Di_w0_B_C [3:2] ;
  logic [1:0] mbist_Di_w0_R79 ;
  logic [1:0] mbist_Di_w0_X79 ;
  logic [1:0] mbist_Di_w0_C79 ;
  assign mbist_Di_w0_R79 = pre_muxed_Di_w0_B_R [1:0] ;
  assign mbist_Di_w0_X79 = pre_muxed_Di_w0_B_X [1:0] ;
  assign mbist_Di_w0_C79 = pre_muxed_Di_w0_B_C [1:0] ;
  assign pre_muxed_Di_w0_S = Ra_reg_r0_S;
  logic [0:0] Ra_reg_r0_S_C6 ;
  logic [0:0] Ra_reg_r0_S_R6 ;
  logic [0:0] Ra_reg_r0_S_X6 ;
  assign pre_muxed_Di_w0_S_T = Ra_reg_r0_S_T ;
  assign Ra_reg_r0_S_C6 = pre_muxed_Di_w0_S_C ;
  assign Ra_reg_r0_S_R6 = pre_muxed_Di_w0_S_R ;
  assign Ra_reg_r0_S_X6 = pre_muxed_Di_w0_S_X ;
  assign pre_muxed_Di_w0_S_S = Ra_reg_r0_S_S ;
  assign pre_re_r0 = muxed_re_r0_B;
  logic [0:0] muxed_re_r0_B_C1 ;
  logic [0:0] muxed_re_r0_B_R1 ;
  logic [0:0] muxed_re_r0_B_X1 ;
  assign pre_re_r0_T = muxed_re_r0_B_T ;
  assign muxed_re_r0_B_C1 = pre_re_r0_C ;
  assign muxed_re_r0_B_R1 = pre_re_r0_R ;
  assign muxed_re_r0_B_X1 = pre_re_r0_X ;
  assign pre_re_r0_S = muxed_re_r0_B_S ;
  assign pre_we_w0 = muxed_we_w0_B;
  logic [0:0] muxed_we_w0_B_C1 ;
  logic [0:0] muxed_we_w0_B_R1 ;
  logic [0:0] muxed_we_w0_B_X1 ;
  assign pre_we_w0_T = muxed_we_w0_B_T ;
  assign muxed_we_w0_B_C1 = pre_we_w0_C ;
  assign muxed_we_w0_B_R1 = pre_we_w0_R ;
  assign muxed_we_w0_B_X1 = pre_we_w0_X ;
  assign pre_we_w0_S = muxed_we_w0_B_S ;
  assign ra_0_0 = muxed_Ra_r0;
  logic [4:0] muxed_Ra_r0_C3 ;
  logic [4:0] muxed_Ra_r0_R3 ;
  logic [4:0] muxed_Ra_r0_X3 ;
  assign ra_0_0_T = muxed_Ra_r0_T ;
  assign muxed_Ra_r0_C3 = ra_0_0_C ;
  assign muxed_Ra_r0_R3 = ra_0_0_R ;
  assign muxed_Ra_r0_X3 = ra_0_0_X ;
  assign ra_0_0_S = muxed_Ra_r0_S ;
  assign radr_q = Ra_reg_r0_A;
  logic [4:0] Ra_reg_r0_A_C2 ;
  logic [4:0] Ra_reg_r0_A_R2 ;
  logic [4:0] Ra_reg_r0_A_X2 ;
  assign radr_q_T = Ra_reg_r0_A_T ;
  assign Ra_reg_r0_A_C2 = radr_q_C ;
  assign Ra_reg_r0_A_R2 = radr_q_R ;
  assign Ra_reg_r0_A_X2 = radr_q_X ;
  assign radr_q_S = Ra_reg_r0_A_S ;
  assign ramDataOut = dout_0_0;
  logic [79:0] dout_0_0_C1 ;
  logic [79:0] dout_0_0_R1 ;
  logic [79:0] dout_0_0_X1 ;
  assign ramDataOut_T = dout_0_0_T ;
  assign dout_0_0_C1 = ramDataOut_C ;
  assign dout_0_0_R1 = ramDataOut_R ;
  assign dout_0_0_X1 = ramDataOut_X ;
  assign ramDataOut_S = dout_0_0_S ;
  assign ram_r0_OutputMuxDataOut = r0_OutputMuxDataOut;
  logic [79:0] r0_OutputMuxDataOut_C1 ;
  logic [79:0] r0_OutputMuxDataOut_R1 ;
  logic [79:0] r0_OutputMuxDataOut_X1 ;
  assign ram_r0_OutputMuxDataOut_T = r0_OutputMuxDataOut_T ;
  assign r0_OutputMuxDataOut_C1 = ram_r0_OutputMuxDataOut_C ;
  assign r0_OutputMuxDataOut_R1 = ram_r0_OutputMuxDataOut_R ;
  assign r0_OutputMuxDataOut_X1 = ram_r0_OutputMuxDataOut_X ;
  assign ram_r0_OutputMuxDataOut_S = r0_OutputMuxDataOut_S ;
  assign re_0_0 = re;
  logic [0:0] re_C5 ;
  logic [0:0] re_R5 ;
  logic [0:0] re_X5 ;
  assign re_0_0_T = re_T ;
  assign re_C5 = re_0_0_C ;
  assign re_R5 = re_0_0_R ;
  assign re_X5 = re_0_0_X ;
  assign re_0_0_S = re_S ;
  assign re_reg_r0 = re_q;
  logic [0:0] re_q_C1 ;
  logic [0:0] re_q_R1 ;
  logic [0:0] re_q_X1 ;
  assign re_reg_r0_T = re_q_T ;
  assign re_q_C1 = re_reg_r0_C ;
  assign re_q_R1 = re_reg_r0_R ;
  assign re_q_X1 = re_reg_r0_X ;
  assign re_reg_r0_S = re_q_S ;
  assign ret_en = pwrbus_ram_pd[8];
  assign { pwrbus_ram_pd_R0 [31:9] } = 0;
  assign { pwrbus_ram_pd_X0 [31:9] } = 0;
  assign { pwrbus_ram_pd_C0 [31:9] } = 0;
  logic [31:0] pwrbus_ram_pd_C1 ;
  logic [31:0] pwrbus_ram_pd_R1 ;
  logic [31:0] pwrbus_ram_pd_X1 ;
  assign ret_en_T = pwrbus_ram_pd_T [8] ;
  assign pwrbus_ram_pd_C1 [8] = ret_en_C ;
  assign pwrbus_ram_pd_R1 [8] = ret_en_R ;
  assign pwrbus_ram_pd_X1 [8] = ret_en_X ;
  assign ret_en_S = pwrbus_ram_pd_S ;
  assign sleep_en = pwrbus_ram_pd[7:0];
  assign sleep_en_T = pwrbus_ram_pd_T [7:0] ;
  assign pwrbus_ram_pd_C1 [7:0] = sleep_en_C ;
  assign pwrbus_ram_pd_R1 [7:0] = sleep_en_R ;
  assign pwrbus_ram_pd_X1 [7:0] = sleep_en_X ;
  assign sleep_en_S = pwrbus_ram_pd_S ;
  assign wa_0_0 = muxed_Wa_w0;
  logic [4:0] muxed_Wa_w0_C2 ;
  logic [4:0] muxed_Wa_w0_R2 ;
  logic [4:0] muxed_Wa_w0_X2 ;
  assign wa_0_0_T = muxed_Wa_w0_T ;
  assign muxed_Wa_w0_C2 = wa_0_0_C ;
  assign muxed_Wa_w0_R2 = wa_0_0_R ;
  assign muxed_Wa_w0_X2 = wa_0_0_X ;
  assign wa_0_0_S = muxed_Wa_w0_S ;
  assign wadr_q = Wa_reg_w0_A;
  logic [4:0] Wa_reg_w0_A_C2 ;
  logic [4:0] Wa_reg_w0_A_R2 ;
  logic [4:0] Wa_reg_w0_A_X2 ;
  assign wadr_q_T = Wa_reg_w0_A_T ;
  assign Wa_reg_w0_A_C2 = wadr_q_C ;
  assign Wa_reg_w0_A_R2 = wadr_q_R ;
  assign Wa_reg_w0_A_X2 = wadr_q_X ;
  assign wadr_q_S = Wa_reg_w0_A_S ;
  assign we_0_0 = we;
  logic [0:0] we_C4 ;
  logic [0:0] we_R4 ;
  logic [0:0] we_X4 ;
  assign we_0_0_T = we_T ;
  assign we_C4 = we_0_0_C ;
  assign we_R4 = we_0_0_R ;
  assign we_X4 = we_0_0_X ;
  assign we_0_0_S = we_S ;
  assign we_reg_w0 = we_q;
  logic [0:0] we_q_C1 ;
  logic [0:0] we_q_R1 ;
  logic [0:0] we_q_X1 ;
  assign we_reg_w0_T = we_q_T ;
  assign we_q_C1 = we_reg_w0_C ;
  assign we_q_R1 = we_reg_w0_R ;
  assign we_q_X1 = we_reg_w0_X ;
  assign we_reg_w0_S = we_q_S ;
  assign updateDR_C = ( updateDR_C0 );
  assign Wa_reg_SO_w0_C = ( Wa_reg_SO_w0_C0 );
  assign Ra_reg_SO_r0_C = ( Ra_reg_SO_r0_C0 );
  assign la_bist_clkr0_C = ( la_bist_clkr0_C0 ) | ( la_bist_clkr0_C1 ) | ( la_bist_clkr0_C2 );
  assign Data_reg_SO_r0_C = ( Data_reg_SO_r0_C0 );
  assign SI_C = ( SI_C0 );
  assign we_reg_SO_w0_C = ( we_reg_SO_w0_C0 );
  assign gated_clk_jtag_Wa_reg_w0_C = ( gated_clk_jtag_Wa_reg_w0_C0 ) | ( gated_clk_jtag_Wa_reg_w0_C1 ) | ( gated_clk_jtag_Wa_reg_w0_C2 ) | ( gated_clk_jtag_Wa_reg_w0_C3 );
  assign re_reg_SO_r0_C = ( re_reg_SO_r0_C0 );
  assign gated_clk_jtag_Data_reg_r0_C = ( gated_clk_jtag_Data_reg_r0_C0 );
  assign muxed_r0_OutputMuxDataOut_C = ( muxed_r0_OutputMuxDataOut_C0 );
  assign _24__C = ( _24__C0 );
  assign muxed_Wa_w0_C = ( muxed_Wa_w0_C0 ) | ( muxed_Wa_w0_C1 ) | ( muxed_Wa_w0_C2 );
  assign svop_C = ( svop_C0 );
  assign pwrbus_ram_pd_C = ( pwrbus_ram_pd_C0 ) | ( pwrbus_ram_pd_C1 );
  assign piece_re_C = ( piece_re_C0 );
  assign _11__C = ( _11__C0 );
  assign iddq_mode_C = ( iddq_mode_C0 );
  assign gated_clk_core_C = ( gated_clk_core_C0 ) | ( gated_clk_core_C1 );
  assign mbist_en_sync_C = ( mbist_en_sync_C0 );
  assign debug_mode_C = ( debug_mode_C0 ) | ( debug_mode_C1 ) | ( debug_mode_C2 ) | ( debug_mode_C3 ) | ( debug_mode_C4 ) | ( debug_mode_C5 );
  assign dft_rst_gated_clk_C = ( dft_rst_gated_clk_C0 ) | ( dft_rst_gated_clk_C1 );
  assign _34__C = ( _34__C0 );
  assign _32__C = ( _32__C0 );
  assign _29__C = ( _29__C0 );
  assign clk_en_core_C = ( clk_en_core_C0 );
  assign mbist_ramaccess_rst__C = ( mbist_ramaccess_rst__C0 ) | ( mbist_ramaccess_rst__C1 ) | ( mbist_ramaccess_rst__C2 ) | ( mbist_ramaccess_rst__C3 );
  assign clk_C = ( clk_C0 ) | ( clk_C1 ) | ( clk_C2 ) | ( clk_C3 ) | ( clk_C4 );
  assign _31__C = ( _31__C0 );
  assign _18__C = ( _18__C0 );
  assign access_en_r_1p_C = ( access_en_r_1p_C0 );
  assign r0_OutputMuxDataOut_C = ( r0_OutputMuxDataOut_C0 ) | ( r0_OutputMuxDataOut_C1 );
  assign functional_byp_muxed_r0_OutputMuxDataOut_C = ( functional_byp_muxed_r0_OutputMuxDataOut_C0 );
  assign _30__C = ( _30__C0 );
  assign dbyp_C = ( dbyp_C0 );
  assign dout_0_0_C = ( dout_0_0_C0 ) | ( dout_0_0_C1 );
  assign Wdata_C = ( Wdata_C0 ) | ( Wdata_C1 ) | ( Wdata_C2 );
  assign ram_bypass_C = ( ram_bypass_C0 );
  assign _09__C = ( _09__C0 );
  assign _08__C = ( _08__C0 );
  assign _07__C = ( _07__C0 );
  assign wthru_di_C = ( wthru_di_C0 ) | ( wthru_di_C1 );
  assign fangyuan0_C = ( fangyuan0_C0 );
  assign data_regq_C = ( data_regq_C0 ) | ( data_regq_C1 ) | ( data_regq_C2 ) | ( data_regq_C3 ) | ( data_regq_C4 );
  assign mbist_Di_w0_C = ( mbist_Di_w0_C0 ) | ( mbist_Di_w0_C1 ) | ( mbist_Di_w0_C2 ) | ( mbist_Di_w0_C3 ) | ( mbist_Di_w0_C4 ) | ( mbist_Di_w0_C5 ) | ( mbist_Di_w0_C6 ) | ( mbist_Di_w0_C7 ) | ( mbist_Di_w0_C8 ) | ( mbist_Di_w0_C9 ) | ( mbist_Di_w0_C10 ) | ( mbist_Di_w0_C11 ) | ( mbist_Di_w0_C12 ) | ( mbist_Di_w0_C13 ) | ( mbist_Di_w0_C14 ) | ( mbist_Di_w0_C15 ) | ( mbist_Di_w0_C16 ) | ( mbist_Di_w0_C17 ) | ( mbist_Di_w0_C18 ) | ( mbist_Di_w0_C19 ) | ( mbist_Di_w0_C20 ) | ( mbist_Di_w0_C21 ) | ( mbist_Di_w0_C22 ) | ( mbist_Di_w0_C23 ) | ( mbist_Di_w0_C24 ) | ( mbist_Di_w0_C25 ) | ( mbist_Di_w0_C26 ) | ( mbist_Di_w0_C27 ) | ( mbist_Di_w0_C28 ) | ( mbist_Di_w0_C29 ) | ( mbist_Di_w0_C30 ) | ( mbist_Di_w0_C31 ) | ( mbist_Di_w0_C32 ) | ( mbist_Di_w0_C33 ) | ( mbist_Di_w0_C34 ) | ( mbist_Di_w0_C35 ) | ( mbist_Di_w0_C36 ) | ( mbist_Di_w0_C37 ) | ( mbist_Di_w0_C38 ) | ( mbist_Di_w0_C39 ) | ( mbist_Di_w0_C40 ) | ( mbist_Di_w0_C41 ) | ( mbist_Di_w0_C42 ) | ( mbist_Di_w0_C43 ) | ( mbist_Di_w0_C44 ) | ( mbist_Di_w0_C45 ) | ( mbist_Di_w0_C46 ) | ( mbist_Di_w0_C47 ) | ( mbist_Di_w0_C48 ) | ( mbist_Di_w0_C49 ) | ( mbist_Di_w0_C50 ) | ( mbist_Di_w0_C51 ) | ( mbist_Di_w0_C52 ) | ( mbist_Di_w0_C53 ) | ( mbist_Di_w0_C54 ) | ( mbist_Di_w0_C55 ) | ( mbist_Di_w0_C56 ) | ( mbist_Di_w0_C57 ) | ( mbist_Di_w0_C58 ) | ( mbist_Di_w0_C59 ) | ( mbist_Di_w0_C60 ) | ( mbist_Di_w0_C61 ) | ( mbist_Di_w0_C62 ) | ( mbist_Di_w0_C63 ) | ( mbist_Di_w0_C64 ) | ( mbist_Di_w0_C65 ) | ( mbist_Di_w0_C66 ) | ( mbist_Di_w0_C67 ) | ( mbist_Di_w0_C68 ) | ( mbist_Di_w0_C69 ) | ( mbist_Di_w0_C70 ) | ( mbist_Di_w0_C71 ) | ( mbist_Di_w0_C72 ) | ( mbist_Di_w0_C73 ) | ( mbist_Di_w0_C74 ) | ( mbist_Di_w0_C75 ) | ( mbist_Di_w0_C76 ) | ( mbist_Di_w0_C77 ) | ( mbist_Di_w0_C78 ) | ( mbist_Di_w0_C79 );
  assign di_C = ( di_C0 ) | ( di_C1 ) | ( di_C2 );
  assign muxed_Di_w0_B_C = ( muxed_Di_w0_B_C0 ) | ( muxed_Di_w0_B_C1 );
  assign mbist_Wa_w0_C = ( mbist_Wa_w0_C0 ) | ( mbist_Wa_w0_C1 );
  assign Wa_reg_w0_A_C = ( Wa_reg_w0_A_C0 ) | ( Wa_reg_w0_A_C1 ) | ( Wa_reg_w0_A_C2 );
  assign muxed_Wa_w0_B_C = ( muxed_Wa_w0_B_C0 ) | ( muxed_Wa_w0_B_C1 );
  assign muxed_we_w0_B_C = ( muxed_we_w0_B_C0 ) | ( muxed_we_w0_B_C1 );
  assign mbist_Ra_r0_C = ( mbist_Ra_r0_C0 ) | ( mbist_Ra_r0_C1 );
  assign Ra_reg_r0_A_C = ( Ra_reg_r0_A_C0 ) | ( Ra_reg_r0_A_C1 ) | ( Ra_reg_r0_A_C2 );
  assign muxed_Ra_r0_B_C = ( muxed_Ra_r0_B_C0 ) | ( muxed_Ra_r0_B_C1 );
  assign muxed_re_r0_B_C = ( muxed_re_r0_B_C0 ) | ( muxed_re_r0_B_C1 );
  assign _01__C = ( _01__C0 );
  assign _00__C = ( _00__C0 );
  assign access_en_r_C = ( access_en_r_C0 ) | ( access_en_r_C1 );
  assign _19__C = ( _19__C0 );
  assign captureDR_r0_C = ( captureDR_r0_C0 );
  assign _26__C = ( _26__C0 );
  assign ary_atpg_ctl_C = ( ary_atpg_ctl_C0 ) | ( ary_atpg_ctl_C1 ) | ( ary_atpg_ctl_C2 ) | ( ary_atpg_ctl_C3 );
  assign _13__C = ( _13__C0 ) | ( _13__C1 );
  assign _15__C = ( _15__C0 );
  assign _10__C = ( _10__C0 );
  assign muxed_re_r0_C = ( muxed_re_r0_C0 ) | ( muxed_re_r0_C1 );
  assign write_inh_C = ( write_inh_C0 );
  assign _27__C = ( _27__C0 );
  assign muxed_re_r0_S_C = ( muxed_re_r0_S_C0 ) | ( muxed_re_r0_S_C1 ) | ( muxed_re_r0_S_C2 ) | ( muxed_re_r0_S_C3 ) | ( muxed_re_r0_S_C4 ) | ( muxed_re_r0_S_C5 ) | ( muxed_re_r0_S_C6 ) | ( muxed_re_r0_S_C7 ) | ( muxed_re_r0_S_C8 ) | ( muxed_re_r0_S_C9 ) | ( muxed_re_r0_S_C10 );
  assign _05__C = ( _05__C0 );
  assign wthru_C = ( wthru_C0 ) | ( wthru_C1 );
  assign ary_read_inh_C = ( ary_read_inh_C0 );
  assign scan_ramtms_C = ( scan_ramtms_C0 );
  assign muxed_we_w0_C = ( muxed_we_w0_C0 ) | ( muxed_we_w0_C1 );
  assign _33__C = ( _33__C0 );
  assign _17__C = ( _17__C0 );
  assign test_mode_C = ( test_mode_C0 );
  assign web_C = ( web_C0 );
  assign updateDR_sync_1p_C = ( updateDR_sync_1p_C0 );
  assign wa_C = ( wa_C0 ) | ( wa_C1 ) | ( wa_C2 );
  assign ra_C = ( ra_C0 ) | ( ra_C1 ) | ( ra_C2 );
  assign shiftDR_C = ( shiftDR_C0 ) | ( shiftDR_C1 ) | ( shiftDR_C2 ) | ( shiftDR_C3 ) | ( shiftDR_C4 ) | ( shiftDR_C5 ) | ( shiftDR_C6 );
  assign debug_mode_sync_C = ( debug_mode_sync_C0 ) | ( debug_mode_sync_C1 ) | ( debug_mode_sync_C2 ) | ( debug_mode_sync_C3 ) | ( debug_mode_sync_C4 ) | ( debug_mode_sync_C5 ) | ( debug_mode_sync_C6 ) | ( debug_mode_sync_C7 ) | ( debug_mode_sync_C8 ) | ( debug_mode_sync_C9 );
  assign mbist_ce_r0_1p_C = ( mbist_ce_r0_1p_C0 );
  assign _16__C = ( _16__C0 );
  assign ore_C = ( ore_C0 );
  assign _14__C = ( _14__C0 );
  assign _12__C = ( _12__C0 );
  assign byp_sel_C = ( byp_sel_C0 );
  assign _25__C = ( _25__C0 );
  assign muxed_Ra_r0_C = ( muxed_Ra_r0_C0 ) | ( muxed_Ra_r0_C1 ) | ( muxed_Ra_r0_C2 ) | ( muxed_Ra_r0_C3 );
  assign jtag_readonly_mode_C = ( jtag_readonly_mode_C0 );
  assign scan_en_C = ( scan_en_C0 ) | ( scan_en_C1 ) | ( scan_en_C2 ) | ( scan_en_C3 ) | ( scan_en_C4 ) | ( scan_en_C5 );
  assign mbist_ce_r0_C = ( mbist_ce_r0_C0 ) | ( mbist_ce_r0_C1 );
  assign re_q_C = ( re_q_C0 ) | ( re_q_C1 );
  assign mbist_we_w0_C = ( mbist_we_w0_C0 );
  assign mbist_en_r_C = ( mbist_en_r_C0 ) | ( mbist_en_r_C1 ) | ( mbist_en_r_C2 ) | ( mbist_en_r_C3 ) | ( mbist_en_r_C4 ) | ( mbist_en_r_C5 );
  assign we_q_C = ( we_q_C0 ) | ( we_q_C1 );
  assign posedge_updateDR_sync_C = ( posedge_updateDR_sync_C0 ) | ( posedge_updateDR_sync_C1 ) | ( posedge_updateDR_sync_C2 );
  assign _23__C = ( _23__C0 );
  assign updateDR_sync_C = ( updateDR_sync_C0 ) | ( updateDR_sync_C1 );
  assign _06__C = ( _06__C0 );
  assign _28__C = ( _28__C0 );
  assign _22__C = ( _22__C0 );
  assign wthru_en_C = ( wthru_en_C0 ) | ( wthru_en_C1 );
  assign _21__C = ( _21__C0 ) | ( _21__C1 ) | ( _21__C2 ) | ( _21__C3 ) | ( _21__C4 );
  assign _04__C = ( _04__C0 );
  assign Ra_reg_r0_S_C = ( Ra_reg_r0_S_C0 ) | ( Ra_reg_r0_S_C1 ) | ( Ra_reg_r0_S_C2 ) | ( Ra_reg_r0_S_C3 ) | ( Ra_reg_r0_S_C4 ) | ( Ra_reg_r0_S_C5 ) | ( Ra_reg_r0_S_C6 );
  assign _03__C = ( _03__C0 );
  assign we_C = ( we_C0 ) | ( we_C1 ) | ( we_C2 ) | ( we_C3 ) | ( we_C4 );
  assign _02__C = ( _02__C0 );
  assign re_C = ( re_C0 ) | ( re_C1 ) | ( re_C2 ) | ( re_C3 ) | ( re_C4 ) | ( re_C5 );
  assign _20__C = ( _20__C0 );
  assign mbist_Do_r0_int_net_C = ( mbist_Do_r0_int_net_C0 );
  assign dout_C = ( dout_C0 );
  assign SO_int_net_C = ( SO_int_net_C0 );
  assign updateDR_X = ( updateDR_X0 );
  assign Wa_reg_SO_w0_X = ( Wa_reg_SO_w0_X0 );
  assign Ra_reg_SO_r0_X = ( Ra_reg_SO_r0_X0 );
  assign la_bist_clkr0_X = ( la_bist_clkr0_X0 ) | ( la_bist_clkr0_X1 ) | ( la_bist_clkr0_X2 );
  assign Data_reg_SO_r0_X = ( Data_reg_SO_r0_X0 );
  assign SI_X = ( SI_X0 );
  assign we_reg_SO_w0_X = ( we_reg_SO_w0_X0 );
  assign gated_clk_jtag_Wa_reg_w0_X = ( gated_clk_jtag_Wa_reg_w0_X0 ) | ( gated_clk_jtag_Wa_reg_w0_X1 ) | ( gated_clk_jtag_Wa_reg_w0_X2 ) | ( gated_clk_jtag_Wa_reg_w0_X3 );
  assign re_reg_SO_r0_X = ( re_reg_SO_r0_X0 );
  assign gated_clk_jtag_Data_reg_r0_X = ( gated_clk_jtag_Data_reg_r0_X0 );
  assign muxed_r0_OutputMuxDataOut_X = ( muxed_r0_OutputMuxDataOut_X0 );
  assign _24__X = ( _24__X0 );
  assign muxed_Wa_w0_X = ( muxed_Wa_w0_X0 ) | ( muxed_Wa_w0_X1 ) | ( muxed_Wa_w0_X2 );
  assign svop_X = ( svop_X0 );
  assign pwrbus_ram_pd_X = ( pwrbus_ram_pd_X0 ) | ( pwrbus_ram_pd_X1 );
  assign piece_re_X = ( piece_re_X0 );
  assign _11__X = ( _11__X0 );
  assign iddq_mode_X = ( iddq_mode_X0 );
  assign gated_clk_core_X = ( gated_clk_core_X0 ) | ( gated_clk_core_X1 );
  assign mbist_en_sync_X = ( mbist_en_sync_X0 );
  assign debug_mode_X = ( debug_mode_X0 ) | ( debug_mode_X1 ) | ( debug_mode_X2 ) | ( debug_mode_X3 ) | ( debug_mode_X4 ) | ( debug_mode_X5 );
  assign dft_rst_gated_clk_X = ( dft_rst_gated_clk_X0 ) | ( dft_rst_gated_clk_X1 );
  assign _34__X = ( _34__X0 );
  assign _32__X = ( _32__X0 );
  assign _29__X = ( _29__X0 );
  assign clk_en_core_X = ( clk_en_core_X0 );
  assign mbist_ramaccess_rst__X = ( mbist_ramaccess_rst__X0 ) | ( mbist_ramaccess_rst__X1 ) | ( mbist_ramaccess_rst__X2 ) | ( mbist_ramaccess_rst__X3 );
  assign clk_X = ( clk_X0 ) | ( clk_X1 ) | ( clk_X2 ) | ( clk_X3 ) | ( clk_X4 );
  assign _31__X = ( _31__X0 );
  assign _18__X = ( _18__X0 );
  assign access_en_r_1p_X = ( access_en_r_1p_X0 );
  assign r0_OutputMuxDataOut_X = ( r0_OutputMuxDataOut_X0 ) | ( r0_OutputMuxDataOut_X1 );
  assign functional_byp_muxed_r0_OutputMuxDataOut_X = ( functional_byp_muxed_r0_OutputMuxDataOut_X0 );
  assign _30__X = ( _30__X0 );
  assign dbyp_X = ( dbyp_X0 );
  assign dout_0_0_X = ( dout_0_0_X0 ) | ( dout_0_0_X1 );
  assign Wdata_X = ( Wdata_X0 ) | ( Wdata_X1 ) | ( Wdata_X2 );
  assign ram_bypass_X = ( ram_bypass_X0 );
  assign _09__X = ( _09__X0 );
  assign _08__X = ( _08__X0 );
  assign _07__X = ( _07__X0 );
  assign wthru_di_X = ( wthru_di_X0 ) | ( wthru_di_X1 );
  assign fangyuan0_X = ( fangyuan0_X0 );
  assign data_regq_X = ( data_regq_X0 ) | ( data_regq_X1 ) | ( data_regq_X2 ) | ( data_regq_X3 ) | ( data_regq_X4 );
  assign mbist_Di_w0_X = ( mbist_Di_w0_X0 ) | ( mbist_Di_w0_X1 ) | ( mbist_Di_w0_X2 ) | ( mbist_Di_w0_X3 ) | ( mbist_Di_w0_X4 ) | ( mbist_Di_w0_X5 ) | ( mbist_Di_w0_X6 ) | ( mbist_Di_w0_X7 ) | ( mbist_Di_w0_X8 ) | ( mbist_Di_w0_X9 ) | ( mbist_Di_w0_X10 ) | ( mbist_Di_w0_X11 ) | ( mbist_Di_w0_X12 ) | ( mbist_Di_w0_X13 ) | ( mbist_Di_w0_X14 ) | ( mbist_Di_w0_X15 ) | ( mbist_Di_w0_X16 ) | ( mbist_Di_w0_X17 ) | ( mbist_Di_w0_X18 ) | ( mbist_Di_w0_X19 ) | ( mbist_Di_w0_X20 ) | ( mbist_Di_w0_X21 ) | ( mbist_Di_w0_X22 ) | ( mbist_Di_w0_X23 ) | ( mbist_Di_w0_X24 ) | ( mbist_Di_w0_X25 ) | ( mbist_Di_w0_X26 ) | ( mbist_Di_w0_X27 ) | ( mbist_Di_w0_X28 ) | ( mbist_Di_w0_X29 ) | ( mbist_Di_w0_X30 ) | ( mbist_Di_w0_X31 ) | ( mbist_Di_w0_X32 ) | ( mbist_Di_w0_X33 ) | ( mbist_Di_w0_X34 ) | ( mbist_Di_w0_X35 ) | ( mbist_Di_w0_X36 ) | ( mbist_Di_w0_X37 ) | ( mbist_Di_w0_X38 ) | ( mbist_Di_w0_X39 ) | ( mbist_Di_w0_X40 ) | ( mbist_Di_w0_X41 ) | ( mbist_Di_w0_X42 ) | ( mbist_Di_w0_X43 ) | ( mbist_Di_w0_X44 ) | ( mbist_Di_w0_X45 ) | ( mbist_Di_w0_X46 ) | ( mbist_Di_w0_X47 ) | ( mbist_Di_w0_X48 ) | ( mbist_Di_w0_X49 ) | ( mbist_Di_w0_X50 ) | ( mbist_Di_w0_X51 ) | ( mbist_Di_w0_X52 ) | ( mbist_Di_w0_X53 ) | ( mbist_Di_w0_X54 ) | ( mbist_Di_w0_X55 ) | ( mbist_Di_w0_X56 ) | ( mbist_Di_w0_X57 ) | ( mbist_Di_w0_X58 ) | ( mbist_Di_w0_X59 ) | ( mbist_Di_w0_X60 ) | ( mbist_Di_w0_X61 ) | ( mbist_Di_w0_X62 ) | ( mbist_Di_w0_X63 ) | ( mbist_Di_w0_X64 ) | ( mbist_Di_w0_X65 ) | ( mbist_Di_w0_X66 ) | ( mbist_Di_w0_X67 ) | ( mbist_Di_w0_X68 ) | ( mbist_Di_w0_X69 ) | ( mbist_Di_w0_X70 ) | ( mbist_Di_w0_X71 ) | ( mbist_Di_w0_X72 ) | ( mbist_Di_w0_X73 ) | ( mbist_Di_w0_X74 ) | ( mbist_Di_w0_X75 ) | ( mbist_Di_w0_X76 ) | ( mbist_Di_w0_X77 ) | ( mbist_Di_w0_X78 ) | ( mbist_Di_w0_X79 );
  assign di_X = ( di_X0 ) | ( di_X1 ) | ( di_X2 );
  assign muxed_Di_w0_B_X = ( muxed_Di_w0_B_X0 ) | ( muxed_Di_w0_B_X1 );
  assign mbist_Wa_w0_X = ( mbist_Wa_w0_X0 ) | ( mbist_Wa_w0_X1 );
  assign Wa_reg_w0_A_X = ( Wa_reg_w0_A_X0 ) | ( Wa_reg_w0_A_X1 ) | ( Wa_reg_w0_A_X2 );
  assign muxed_Wa_w0_B_X = ( muxed_Wa_w0_B_X0 ) | ( muxed_Wa_w0_B_X1 );
  assign muxed_we_w0_B_X = ( muxed_we_w0_B_X0 ) | ( muxed_we_w0_B_X1 );
  assign mbist_Ra_r0_X = ( mbist_Ra_r0_X0 ) | ( mbist_Ra_r0_X1 );
  assign Ra_reg_r0_A_X = ( Ra_reg_r0_A_X0 ) | ( Ra_reg_r0_A_X1 ) | ( Ra_reg_r0_A_X2 );
  assign muxed_Ra_r0_B_X = ( muxed_Ra_r0_B_X0 ) | ( muxed_Ra_r0_B_X1 );
  assign muxed_re_r0_B_X = ( muxed_re_r0_B_X0 ) | ( muxed_re_r0_B_X1 );
  assign _01__X = ( _01__X0 );
  assign _00__X = ( _00__X0 );
  assign access_en_r_X = ( access_en_r_X0 ) | ( access_en_r_X1 );
  assign _19__X = ( _19__X0 );
  assign captureDR_r0_X = ( captureDR_r0_X0 );
  assign _26__X = ( _26__X0 );
  assign ary_atpg_ctl_X = ( ary_atpg_ctl_X0 ) | ( ary_atpg_ctl_X1 ) | ( ary_atpg_ctl_X2 ) | ( ary_atpg_ctl_X3 );
  assign _13__X = ( _13__X0 ) | ( _13__X1 );
  assign _15__X = ( _15__X0 );
  assign _10__X = ( _10__X0 );
  assign muxed_re_r0_X = ( muxed_re_r0_X0 ) | ( muxed_re_r0_X1 );
  assign write_inh_X = ( write_inh_X0 );
  assign _27__X = ( _27__X0 );
  assign muxed_re_r0_S_X = ( muxed_re_r0_S_X0 ) | ( muxed_re_r0_S_X1 ) | ( muxed_re_r0_S_X2 ) | ( muxed_re_r0_S_X3 ) | ( muxed_re_r0_S_X4 ) | ( muxed_re_r0_S_X5 ) | ( muxed_re_r0_S_X6 ) | ( muxed_re_r0_S_X7 ) | ( muxed_re_r0_S_X8 ) | ( muxed_re_r0_S_X9 ) | ( muxed_re_r0_S_X10 );
  assign _05__X = ( _05__X0 );
  assign wthru_X = ( wthru_X0 ) | ( wthru_X1 );
  assign ary_read_inh_X = ( ary_read_inh_X0 );
  assign scan_ramtms_X = ( scan_ramtms_X0 );
  assign muxed_we_w0_X = ( muxed_we_w0_X0 ) | ( muxed_we_w0_X1 );
  assign _33__X = ( _33__X0 );
  assign _17__X = ( _17__X0 );
  assign test_mode_X = ( test_mode_X0 );
  assign web_X = ( web_X0 );
  assign updateDR_sync_1p_X = ( updateDR_sync_1p_X0 );
  assign wa_X = ( wa_X0 ) | ( wa_X1 ) | ( wa_X2 );
  assign ra_X = ( ra_X0 ) | ( ra_X1 ) | ( ra_X2 );
  assign shiftDR_X = ( shiftDR_X0 ) | ( shiftDR_X1 ) | ( shiftDR_X2 ) | ( shiftDR_X3 ) | ( shiftDR_X4 ) | ( shiftDR_X5 ) | ( shiftDR_X6 );
  assign debug_mode_sync_X = ( debug_mode_sync_X0 ) | ( debug_mode_sync_X1 ) | ( debug_mode_sync_X2 ) | ( debug_mode_sync_X3 ) | ( debug_mode_sync_X4 ) | ( debug_mode_sync_X5 ) | ( debug_mode_sync_X6 ) | ( debug_mode_sync_X7 ) | ( debug_mode_sync_X8 ) | ( debug_mode_sync_X9 );
  assign mbist_ce_r0_1p_X = ( mbist_ce_r0_1p_X0 );
  assign _16__X = ( _16__X0 );
  assign ore_X = ( ore_X0 );
  assign _14__X = ( _14__X0 );
  assign _12__X = ( _12__X0 );
  assign byp_sel_X = ( byp_sel_X0 );
  assign _25__X = ( _25__X0 );
  assign muxed_Ra_r0_X = ( muxed_Ra_r0_X0 ) | ( muxed_Ra_r0_X1 ) | ( muxed_Ra_r0_X2 ) | ( muxed_Ra_r0_X3 );
  assign jtag_readonly_mode_X = ( jtag_readonly_mode_X0 );
  assign scan_en_X = ( scan_en_X0 ) | ( scan_en_X1 ) | ( scan_en_X2 ) | ( scan_en_X3 ) | ( scan_en_X4 ) | ( scan_en_X5 );
  assign mbist_ce_r0_X = ( mbist_ce_r0_X0 ) | ( mbist_ce_r0_X1 );
  assign re_q_X = ( re_q_X0 ) | ( re_q_X1 );
  assign mbist_we_w0_X = ( mbist_we_w0_X0 );
  assign mbist_en_r_X = ( mbist_en_r_X0 ) | ( mbist_en_r_X1 ) | ( mbist_en_r_X2 ) | ( mbist_en_r_X3 ) | ( mbist_en_r_X4 ) | ( mbist_en_r_X5 );
  assign we_q_X = ( we_q_X0 ) | ( we_q_X1 );
  assign posedge_updateDR_sync_X = ( posedge_updateDR_sync_X0 ) | ( posedge_updateDR_sync_X1 ) | ( posedge_updateDR_sync_X2 );
  assign _23__X = ( _23__X0 );
  assign updateDR_sync_X = ( updateDR_sync_X0 ) | ( updateDR_sync_X1 );
  assign _06__X = ( _06__X0 );
  assign _28__X = ( _28__X0 );
  assign _22__X = ( _22__X0 );
  assign wthru_en_X = ( wthru_en_X0 ) | ( wthru_en_X1 );
  assign _21__X = ( _21__X0 ) | ( _21__X1 ) | ( _21__X2 ) | ( _21__X3 ) | ( _21__X4 );
  assign _04__X = ( _04__X0 );
  assign Ra_reg_r0_S_X = ( Ra_reg_r0_S_X0 ) | ( Ra_reg_r0_S_X1 ) | ( Ra_reg_r0_S_X2 ) | ( Ra_reg_r0_S_X3 ) | ( Ra_reg_r0_S_X4 ) | ( Ra_reg_r0_S_X5 ) | ( Ra_reg_r0_S_X6 );
  assign _03__X = ( _03__X0 );
  assign we_X = ( we_X0 ) | ( we_X1 ) | ( we_X2 ) | ( we_X3 ) | ( we_X4 );
  assign _02__X = ( _02__X0 );
  assign re_X = ( re_X0 ) | ( re_X1 ) | ( re_X2 ) | ( re_X3 ) | ( re_X4 ) | ( re_X5 );
  assign _20__X = ( _20__X0 );
  assign mbist_Do_r0_int_net_X = ( mbist_Do_r0_int_net_X0 );
  assign dout_X = ( dout_X0 );
  assign SO_int_net_X = ( SO_int_net_X0 );
  assign updateDR_R = ( updateDR_X0 & updateDR_R0 );
  assign Wa_reg_SO_w0_R = ( Wa_reg_SO_w0_X0 & Wa_reg_SO_w0_R0 );
  assign Ra_reg_SO_r0_R = ( Ra_reg_SO_r0_X0 & Ra_reg_SO_r0_R0 );
  assign la_bist_clkr0_R = ( la_bist_clkr0_X0 & la_bist_clkr0_R0 ) | ( la_bist_clkr0_X1 & la_bist_clkr0_R1 ) | ( la_bist_clkr0_X2 & la_bist_clkr0_R2 );
  assign Data_reg_SO_r0_R = ( Data_reg_SO_r0_X0 & Data_reg_SO_r0_R0 );
  assign SI_R = ( SI_X0 & SI_R0 );
  assign we_reg_SO_w0_R = ( we_reg_SO_w0_X0 & we_reg_SO_w0_R0 );
  assign gated_clk_jtag_Wa_reg_w0_R = ( gated_clk_jtag_Wa_reg_w0_X0 & gated_clk_jtag_Wa_reg_w0_R0 ) | ( gated_clk_jtag_Wa_reg_w0_X1 & gated_clk_jtag_Wa_reg_w0_R1 ) | ( gated_clk_jtag_Wa_reg_w0_X2 & gated_clk_jtag_Wa_reg_w0_R2 ) | ( gated_clk_jtag_Wa_reg_w0_X3 & gated_clk_jtag_Wa_reg_w0_R3 );
  assign re_reg_SO_r0_R = ( re_reg_SO_r0_X0 & re_reg_SO_r0_R0 );
  assign gated_clk_jtag_Data_reg_r0_R = ( gated_clk_jtag_Data_reg_r0_X0 & gated_clk_jtag_Data_reg_r0_R0 );
  assign muxed_r0_OutputMuxDataOut_R = ( muxed_r0_OutputMuxDataOut_X0 & muxed_r0_OutputMuxDataOut_R0 );
  assign _24__R = ( _24__X0 & _24__R0 );
  assign muxed_Wa_w0_R = ( muxed_Wa_w0_X0 & muxed_Wa_w0_R0 ) | ( muxed_Wa_w0_X1 & muxed_Wa_w0_R1 ) | ( muxed_Wa_w0_X2 & muxed_Wa_w0_R2 );
  assign svop_R = ( svop_X0 & svop_R0 );
  assign pwrbus_ram_pd_R = ( pwrbus_ram_pd_X0 & pwrbus_ram_pd_R0 ) | ( pwrbus_ram_pd_X1 & pwrbus_ram_pd_R1 );
  assign piece_re_R = ( piece_re_X0 & piece_re_R0 );
  assign _11__R = ( _11__X0 & _11__R0 );
  assign iddq_mode_R = ( iddq_mode_X0 & iddq_mode_R0 );
  assign gated_clk_core_R = ( gated_clk_core_X0 & gated_clk_core_R0 ) | ( gated_clk_core_X1 & gated_clk_core_R1 );
  assign mbist_en_sync_R = ( mbist_en_sync_X0 & mbist_en_sync_R0 );
  assign debug_mode_R = ( debug_mode_X0 & debug_mode_R0 ) | ( debug_mode_X1 & debug_mode_R1 ) | ( debug_mode_X2 & debug_mode_R2 ) | ( debug_mode_X3 & debug_mode_R3 ) | ( debug_mode_X4 & debug_mode_R4 ) | ( debug_mode_X5 & debug_mode_R5 );
  assign dft_rst_gated_clk_R = ( dft_rst_gated_clk_X0 & dft_rst_gated_clk_R0 ) | ( dft_rst_gated_clk_X1 & dft_rst_gated_clk_R1 );
  assign _34__R = ( _34__X0 & _34__R0 );
  assign _32__R = ( _32__X0 & _32__R0 );
  assign _29__R = ( _29__X0 & _29__R0 );
  assign clk_en_core_R = ( clk_en_core_X0 & clk_en_core_R0 );
  assign mbist_ramaccess_rst__R = ( mbist_ramaccess_rst__X0 & mbist_ramaccess_rst__R0 ) | ( mbist_ramaccess_rst__X1 & mbist_ramaccess_rst__R1 ) | ( mbist_ramaccess_rst__X2 & mbist_ramaccess_rst__R2 ) | ( mbist_ramaccess_rst__X3 & mbist_ramaccess_rst__R3 );
  assign clk_R = ( clk_X0 & clk_R0 ) | ( clk_X1 & clk_R1 ) | ( clk_X2 & clk_R2 ) | ( clk_X3 & clk_R3 ) | ( clk_X4 & clk_R4 );
  assign _31__R = ( _31__X0 & _31__R0 );
  assign _18__R = ( _18__X0 & _18__R0 );
  assign access_en_r_1p_R = ( access_en_r_1p_X0 & access_en_r_1p_R0 );
  assign r0_OutputMuxDataOut_R = ( r0_OutputMuxDataOut_X0 & r0_OutputMuxDataOut_R0 ) | ( r0_OutputMuxDataOut_X1 & r0_OutputMuxDataOut_R1 );
  assign functional_byp_muxed_r0_OutputMuxDataOut_R = ( functional_byp_muxed_r0_OutputMuxDataOut_X0 & functional_byp_muxed_r0_OutputMuxDataOut_R0 );
  assign _30__R = ( _30__X0 & _30__R0 );
  assign dbyp_R = ( dbyp_X0 & dbyp_R0 );
  assign dout_0_0_R = ( dout_0_0_X0 & dout_0_0_R0 ) | ( dout_0_0_X1 & dout_0_0_R1 );
  assign Wdata_R = ( Wdata_X0 & Wdata_R0 ) | ( Wdata_X1 & Wdata_R1 ) | ( Wdata_X2 & Wdata_R2 );
  assign ram_bypass_R = ( ram_bypass_X0 & ram_bypass_R0 );
  assign _09__R = ( _09__X0 & _09__R0 );
  assign _08__R = ( _08__X0 & _08__R0 );
  assign _07__R = ( _07__X0 & _07__R0 );
  assign wthru_di_R = ( wthru_di_X0 & wthru_di_R0 ) | ( wthru_di_X1 & wthru_di_R1 );
  assign fangyuan0_R = ( fangyuan0_X0 & fangyuan0_R0 );
  assign data_regq_R = ( data_regq_X0 & data_regq_R0 ) | ( data_regq_X1 & data_regq_R1 ) | ( data_regq_X2 & data_regq_R2 ) | ( data_regq_X3 & data_regq_R3 ) | ( data_regq_X4 & data_regq_R4 );
  assign mbist_Di_w0_R = ( mbist_Di_w0_X0 & mbist_Di_w0_R0 ) | ( mbist_Di_w0_X1 & mbist_Di_w0_R1 ) | ( mbist_Di_w0_X2 & mbist_Di_w0_R2 ) | ( mbist_Di_w0_X3 & mbist_Di_w0_R3 ) | ( mbist_Di_w0_X4 & mbist_Di_w0_R4 ) | ( mbist_Di_w0_X5 & mbist_Di_w0_R5 ) | ( mbist_Di_w0_X6 & mbist_Di_w0_R6 ) | ( mbist_Di_w0_X7 & mbist_Di_w0_R7 ) | ( mbist_Di_w0_X8 & mbist_Di_w0_R8 ) | ( mbist_Di_w0_X9 & mbist_Di_w0_R9 ) | ( mbist_Di_w0_X10 & mbist_Di_w0_R10 ) | ( mbist_Di_w0_X11 & mbist_Di_w0_R11 ) | ( mbist_Di_w0_X12 & mbist_Di_w0_R12 ) | ( mbist_Di_w0_X13 & mbist_Di_w0_R13 ) | ( mbist_Di_w0_X14 & mbist_Di_w0_R14 ) | ( mbist_Di_w0_X15 & mbist_Di_w0_R15 ) | ( mbist_Di_w0_X16 & mbist_Di_w0_R16 ) | ( mbist_Di_w0_X17 & mbist_Di_w0_R17 ) | ( mbist_Di_w0_X18 & mbist_Di_w0_R18 ) | ( mbist_Di_w0_X19 & mbist_Di_w0_R19 ) | ( mbist_Di_w0_X20 & mbist_Di_w0_R20 ) | ( mbist_Di_w0_X21 & mbist_Di_w0_R21 ) | ( mbist_Di_w0_X22 & mbist_Di_w0_R22 ) | ( mbist_Di_w0_X23 & mbist_Di_w0_R23 ) | ( mbist_Di_w0_X24 & mbist_Di_w0_R24 ) | ( mbist_Di_w0_X25 & mbist_Di_w0_R25 ) | ( mbist_Di_w0_X26 & mbist_Di_w0_R26 ) | ( mbist_Di_w0_X27 & mbist_Di_w0_R27 ) | ( mbist_Di_w0_X28 & mbist_Di_w0_R28 ) | ( mbist_Di_w0_X29 & mbist_Di_w0_R29 ) | ( mbist_Di_w0_X30 & mbist_Di_w0_R30 ) | ( mbist_Di_w0_X31 & mbist_Di_w0_R31 ) | ( mbist_Di_w0_X32 & mbist_Di_w0_R32 ) | ( mbist_Di_w0_X33 & mbist_Di_w0_R33 ) | ( mbist_Di_w0_X34 & mbist_Di_w0_R34 ) | ( mbist_Di_w0_X35 & mbist_Di_w0_R35 ) | ( mbist_Di_w0_X36 & mbist_Di_w0_R36 ) | ( mbist_Di_w0_X37 & mbist_Di_w0_R37 ) | ( mbist_Di_w0_X38 & mbist_Di_w0_R38 ) | ( mbist_Di_w0_X39 & mbist_Di_w0_R39 ) | ( mbist_Di_w0_X40 & mbist_Di_w0_R40 ) | ( mbist_Di_w0_X41 & mbist_Di_w0_R41 ) | ( mbist_Di_w0_X42 & mbist_Di_w0_R42 ) | ( mbist_Di_w0_X43 & mbist_Di_w0_R43 ) | ( mbist_Di_w0_X44 & mbist_Di_w0_R44 ) | ( mbist_Di_w0_X45 & mbist_Di_w0_R45 ) | ( mbist_Di_w0_X46 & mbist_Di_w0_R46 ) | ( mbist_Di_w0_X47 & mbist_Di_w0_R47 ) | ( mbist_Di_w0_X48 & mbist_Di_w0_R48 ) | ( mbist_Di_w0_X49 & mbist_Di_w0_R49 ) | ( mbist_Di_w0_X50 & mbist_Di_w0_R50 ) | ( mbist_Di_w0_X51 & mbist_Di_w0_R51 ) | ( mbist_Di_w0_X52 & mbist_Di_w0_R52 ) | ( mbist_Di_w0_X53 & mbist_Di_w0_R53 ) | ( mbist_Di_w0_X54 & mbist_Di_w0_R54 ) | ( mbist_Di_w0_X55 & mbist_Di_w0_R55 ) | ( mbist_Di_w0_X56 & mbist_Di_w0_R56 ) | ( mbist_Di_w0_X57 & mbist_Di_w0_R57 ) | ( mbist_Di_w0_X58 & mbist_Di_w0_R58 ) | ( mbist_Di_w0_X59 & mbist_Di_w0_R59 ) | ( mbist_Di_w0_X60 & mbist_Di_w0_R60 ) | ( mbist_Di_w0_X61 & mbist_Di_w0_R61 ) | ( mbist_Di_w0_X62 & mbist_Di_w0_R62 ) | ( mbist_Di_w0_X63 & mbist_Di_w0_R63 ) | ( mbist_Di_w0_X64 & mbist_Di_w0_R64 ) | ( mbist_Di_w0_X65 & mbist_Di_w0_R65 ) | ( mbist_Di_w0_X66 & mbist_Di_w0_R66 ) | ( mbist_Di_w0_X67 & mbist_Di_w0_R67 ) | ( mbist_Di_w0_X68 & mbist_Di_w0_R68 ) | ( mbist_Di_w0_X69 & mbist_Di_w0_R69 ) | ( mbist_Di_w0_X70 & mbist_Di_w0_R70 ) | ( mbist_Di_w0_X71 & mbist_Di_w0_R71 ) | ( mbist_Di_w0_X72 & mbist_Di_w0_R72 ) | ( mbist_Di_w0_X73 & mbist_Di_w0_R73 ) | ( mbist_Di_w0_X74 & mbist_Di_w0_R74 ) | ( mbist_Di_w0_X75 & mbist_Di_w0_R75 ) | ( mbist_Di_w0_X76 & mbist_Di_w0_R76 ) | ( mbist_Di_w0_X77 & mbist_Di_w0_R77 ) | ( mbist_Di_w0_X78 & mbist_Di_w0_R78 ) | ( mbist_Di_w0_X79 & mbist_Di_w0_R79 );
  assign di_R = ( di_X0 & di_R0 ) | ( di_X1 & di_R1 ) | ( di_X2 & di_R2 );
  assign muxed_Di_w0_B_R = ( muxed_Di_w0_B_X0 & muxed_Di_w0_B_R0 ) | ( muxed_Di_w0_B_X1 & muxed_Di_w0_B_R1 );
  assign mbist_Wa_w0_R = ( mbist_Wa_w0_X0 & mbist_Wa_w0_R0 ) | ( mbist_Wa_w0_X1 & mbist_Wa_w0_R1 );
  assign Wa_reg_w0_A_R = ( Wa_reg_w0_A_X0 & Wa_reg_w0_A_R0 ) | ( Wa_reg_w0_A_X1 & Wa_reg_w0_A_R1 ) | ( Wa_reg_w0_A_X2 & Wa_reg_w0_A_R2 );
  assign muxed_Wa_w0_B_R = ( muxed_Wa_w0_B_X0 & muxed_Wa_w0_B_R0 ) | ( muxed_Wa_w0_B_X1 & muxed_Wa_w0_B_R1 );
  assign muxed_we_w0_B_R = ( muxed_we_w0_B_X0 & muxed_we_w0_B_R0 ) | ( muxed_we_w0_B_X1 & muxed_we_w0_B_R1 );
  assign mbist_Ra_r0_R = ( mbist_Ra_r0_X0 & mbist_Ra_r0_R0 ) | ( mbist_Ra_r0_X1 & mbist_Ra_r0_R1 );
  assign Ra_reg_r0_A_R = ( Ra_reg_r0_A_X0 & Ra_reg_r0_A_R0 ) | ( Ra_reg_r0_A_X1 & Ra_reg_r0_A_R1 ) | ( Ra_reg_r0_A_X2 & Ra_reg_r0_A_R2 );
  assign muxed_Ra_r0_B_R = ( muxed_Ra_r0_B_X0 & muxed_Ra_r0_B_R0 ) | ( muxed_Ra_r0_B_X1 & muxed_Ra_r0_B_R1 );
  assign muxed_re_r0_B_R = ( muxed_re_r0_B_X0 & muxed_re_r0_B_R0 ) | ( muxed_re_r0_B_X1 & muxed_re_r0_B_R1 );
  assign _01__R = ( _01__X0 & _01__R0 );
  assign _00__R = ( _00__X0 & _00__R0 );
  assign access_en_r_R = ( access_en_r_X0 & access_en_r_R0 ) | ( access_en_r_X1 & access_en_r_R1 );
  assign _19__R = ( _19__X0 & _19__R0 );
  assign captureDR_r0_R = ( captureDR_r0_X0 & captureDR_r0_R0 );
  assign _26__R = ( _26__X0 & _26__R0 );
  assign ary_atpg_ctl_R = ( ary_atpg_ctl_X0 & ary_atpg_ctl_R0 ) | ( ary_atpg_ctl_X1 & ary_atpg_ctl_R1 ) | ( ary_atpg_ctl_X2 & ary_atpg_ctl_R2 ) | ( ary_atpg_ctl_X3 & ary_atpg_ctl_R3 );
  assign _13__R = ( _13__X0 & _13__R0 ) | ( _13__X1 & _13__R1 );
  assign _15__R = ( _15__X0 & _15__R0 );
  assign _10__R = ( _10__X0 & _10__R0 );
  assign muxed_re_r0_R = ( muxed_re_r0_X0 & muxed_re_r0_R0 ) | ( muxed_re_r0_X1 & muxed_re_r0_R1 );
  assign write_inh_R = ( write_inh_X0 & write_inh_R0 );
  assign _27__R = ( _27__X0 & _27__R0 );
  assign muxed_re_r0_S_R = ( muxed_re_r0_S_X0 & muxed_re_r0_S_R0 ) | ( muxed_re_r0_S_X1 & muxed_re_r0_S_R1 ) | ( muxed_re_r0_S_X2 & muxed_re_r0_S_R2 ) | ( muxed_re_r0_S_X3 & muxed_re_r0_S_R3 ) | ( muxed_re_r0_S_X4 & muxed_re_r0_S_R4 ) | ( muxed_re_r0_S_X5 & muxed_re_r0_S_R5 ) | ( muxed_re_r0_S_X6 & muxed_re_r0_S_R6 ) | ( muxed_re_r0_S_X7 & muxed_re_r0_S_R7 ) | ( muxed_re_r0_S_X8 & muxed_re_r0_S_R8 ) | ( muxed_re_r0_S_X9 & muxed_re_r0_S_R9 ) | ( muxed_re_r0_S_X10 & muxed_re_r0_S_R10 );
  assign _05__R = ( _05__X0 & _05__R0 );
  assign wthru_R = ( wthru_X0 & wthru_R0 ) | ( wthru_X1 & wthru_R1 );
  assign ary_read_inh_R = ( ary_read_inh_X0 & ary_read_inh_R0 );
  assign scan_ramtms_R = ( scan_ramtms_X0 & scan_ramtms_R0 );
  assign muxed_we_w0_R = ( muxed_we_w0_X0 & muxed_we_w0_R0 ) | ( muxed_we_w0_X1 & muxed_we_w0_R1 );
  assign _33__R = ( _33__X0 & _33__R0 );
  assign _17__R = ( _17__X0 & _17__R0 );
  assign test_mode_R = ( test_mode_X0 & test_mode_R0 );
  assign web_R = ( web_X0 & web_R0 );
  assign updateDR_sync_1p_R = ( updateDR_sync_1p_X0 & updateDR_sync_1p_R0 );
  assign wa_R = ( wa_X0 & wa_R0 ) | ( wa_X1 & wa_R1 ) | ( wa_X2 & wa_R2 );
  assign ra_R = ( ra_X0 & ra_R0 ) | ( ra_X1 & ra_R1 ) | ( ra_X2 & ra_R2 );
  assign shiftDR_R = ( shiftDR_X0 & shiftDR_R0 ) | ( shiftDR_X1 & shiftDR_R1 ) | ( shiftDR_X2 & shiftDR_R2 ) | ( shiftDR_X3 & shiftDR_R3 ) | ( shiftDR_X4 & shiftDR_R4 ) | ( shiftDR_X5 & shiftDR_R5 ) | ( shiftDR_X6 & shiftDR_R6 );
  assign debug_mode_sync_R = ( debug_mode_sync_X0 & debug_mode_sync_R0 ) | ( debug_mode_sync_X1 & debug_mode_sync_R1 ) | ( debug_mode_sync_X2 & debug_mode_sync_R2 ) | ( debug_mode_sync_X3 & debug_mode_sync_R3 ) | ( debug_mode_sync_X4 & debug_mode_sync_R4 ) | ( debug_mode_sync_X5 & debug_mode_sync_R5 ) | ( debug_mode_sync_X6 & debug_mode_sync_R6 ) | ( debug_mode_sync_X7 & debug_mode_sync_R7 ) | ( debug_mode_sync_X8 & debug_mode_sync_R8 ) | ( debug_mode_sync_X9 & debug_mode_sync_R9 );
  assign mbist_ce_r0_1p_R = ( mbist_ce_r0_1p_X0 & mbist_ce_r0_1p_R0 );
  assign _16__R = ( _16__X0 & _16__R0 );
  assign ore_R = ( ore_X0 & ore_R0 );
  assign _14__R = ( _14__X0 & _14__R0 );
  assign _12__R = ( _12__X0 & _12__R0 );
  assign byp_sel_R = ( byp_sel_X0 & byp_sel_R0 );
  assign _25__R = ( _25__X0 & _25__R0 );
  assign muxed_Ra_r0_R = ( muxed_Ra_r0_X0 & muxed_Ra_r0_R0 ) | ( muxed_Ra_r0_X1 & muxed_Ra_r0_R1 ) | ( muxed_Ra_r0_X2 & muxed_Ra_r0_R2 ) | ( muxed_Ra_r0_X3 & muxed_Ra_r0_R3 );
  assign jtag_readonly_mode_R = ( jtag_readonly_mode_X0 & jtag_readonly_mode_R0 );
  assign scan_en_R = ( scan_en_X0 & scan_en_R0 ) | ( scan_en_X1 & scan_en_R1 ) | ( scan_en_X2 & scan_en_R2 ) | ( scan_en_X3 & scan_en_R3 ) | ( scan_en_X4 & scan_en_R4 ) | ( scan_en_X5 & scan_en_R5 );
  assign mbist_ce_r0_R = ( mbist_ce_r0_X0 & mbist_ce_r0_R0 ) | ( mbist_ce_r0_X1 & mbist_ce_r0_R1 );
  assign re_q_R = ( re_q_X0 & re_q_R0 ) | ( re_q_X1 & re_q_R1 );
  assign mbist_we_w0_R = ( mbist_we_w0_X0 & mbist_we_w0_R0 );
  assign mbist_en_r_R = ( mbist_en_r_X0 & mbist_en_r_R0 ) | ( mbist_en_r_X1 & mbist_en_r_R1 ) | ( mbist_en_r_X2 & mbist_en_r_R2 ) | ( mbist_en_r_X3 & mbist_en_r_R3 ) | ( mbist_en_r_X4 & mbist_en_r_R4 ) | ( mbist_en_r_X5 & mbist_en_r_R5 );
  assign we_q_R = ( we_q_X0 & we_q_R0 ) | ( we_q_X1 & we_q_R1 );
  assign posedge_updateDR_sync_R = ( posedge_updateDR_sync_X0 & posedge_updateDR_sync_R0 ) | ( posedge_updateDR_sync_X1 & posedge_updateDR_sync_R1 ) | ( posedge_updateDR_sync_X2 & posedge_updateDR_sync_R2 );
  assign _23__R = ( _23__X0 & _23__R0 );
  assign updateDR_sync_R = ( updateDR_sync_X0 & updateDR_sync_R0 ) | ( updateDR_sync_X1 & updateDR_sync_R1 );
  assign _06__R = ( _06__X0 & _06__R0 );
  assign _28__R = ( _28__X0 & _28__R0 );
  assign _22__R = ( _22__X0 & _22__R0 );
  assign wthru_en_R = ( wthru_en_X0 & wthru_en_R0 ) | ( wthru_en_X1 & wthru_en_R1 );
  assign _21__R = ( _21__X0 & _21__R0 ) | ( _21__X1 & _21__R1 ) | ( _21__X2 & _21__R2 ) | ( _21__X3 & _21__R3 ) | ( _21__X4 & _21__R4 );
  assign _04__R = ( _04__X0 & _04__R0 );
  assign Ra_reg_r0_S_R = ( Ra_reg_r0_S_X0 & Ra_reg_r0_S_R0 ) | ( Ra_reg_r0_S_X1 & Ra_reg_r0_S_R1 ) | ( Ra_reg_r0_S_X2 & Ra_reg_r0_S_R2 ) | ( Ra_reg_r0_S_X3 & Ra_reg_r0_S_R3 ) | ( Ra_reg_r0_S_X4 & Ra_reg_r0_S_R4 ) | ( Ra_reg_r0_S_X5 & Ra_reg_r0_S_R5 ) | ( Ra_reg_r0_S_X6 & Ra_reg_r0_S_R6 );
  assign _03__R = ( _03__X0 & _03__R0 );
  assign we_R = ( we_X0 & we_R0 ) | ( we_X1 & we_R1 ) | ( we_X2 & we_R2 ) | ( we_X3 & we_R3 ) | ( we_X4 & we_R4 );
  assign _02__R = ( _02__X0 & _02__R0 );
  assign re_R = ( re_X0 & re_R0 ) | ( re_X1 & re_R1 ) | ( re_X2 & re_R2 ) | ( re_X3 & re_R3 ) | ( re_X4 & re_R4 ) | ( re_X5 & re_R5 );
  assign _20__R = ( _20__X0 & _20__R0 );
  assign mbist_Do_r0_int_net_R = ( mbist_Do_r0_int_net_X0 & mbist_Do_r0_int_net_R0 );
  assign dout_R = ( dout_X0 & dout_R0 );
  assign SO_int_net_R = ( SO_int_net_X0 & SO_int_net_R0 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { D_Ra_reg_r0_R , D_Ra_reg_r0_C , D_Ra_reg_r0_X , Data_reg_r0_R , Data_reg_r0_C , Data_reg_r0_X , Ra_reg_r0_R , Ra_reg_r0_C , Ra_reg_r0_X , Ra_reg_r0_B_R , Ra_reg_r0_B_C , Ra_reg_r0_B_X , Wa_reg_w0_R , Wa_reg_w0_C , Wa_reg_w0_X , Wa_reg_w0_B_R , Wa_reg_w0_B_C , Wa_reg_w0_B_X , Wa_reg_w0_S_R , Wa_reg_w0_S_C , Wa_reg_w0_S_X , access_en_w_R , access_en_w_C , access_en_w_X , dft_capdr_r_R , dft_capdr_r_C , dft_capdr_r_X , dft_capdr_w_R , dft_capdr_w_C , dft_capdr_w_X , la_bist_clkw0_R , la_bist_clkw0_C , la_bist_clkw0_X , muxed_Di_w0_R , muxed_Di_w0_C , muxed_Di_w0_X , muxed_Di_w0_A_R , muxed_Di_w0_A_C , muxed_Di_w0_A_X , muxed_Di_w0_S_R , muxed_Di_w0_S_C , muxed_Di_w0_S_X , muxed_Ra_r0_A_R , muxed_Ra_r0_A_C , muxed_Ra_r0_A_X , muxed_Ra_r0_S_R , muxed_Ra_r0_S_C , muxed_Ra_r0_S_X , muxed_Wa_w0_A_R , muxed_Wa_w0_A_C , muxed_Wa_w0_A_X , muxed_Wa_w0_S_R , muxed_Wa_w0_S_C , muxed_Wa_w0_S_X , muxed_re_r0_A_R , muxed_re_r0_A_C , muxed_re_r0_A_X , muxed_we_w0_A_R , muxed_we_w0_A_C , muxed_we_w0_A_X , muxed_we_w0_S_R , muxed_we_w0_S_C , muxed_we_w0_S_X , pre_Ra_reg_r0_R , pre_Ra_reg_r0_C , pre_Ra_reg_r0_X , pre_Wa_reg_w0_R , pre_Wa_reg_w0_C , pre_Wa_reg_w0_X , pre_muxed_Di_w0_R , pre_muxed_Di_w0_C , pre_muxed_Di_w0_X , pre_muxed_Di_w0_A_R , pre_muxed_Di_w0_A_C , pre_muxed_Di_w0_A_X , pre_muxed_Di_w0_B_R , pre_muxed_Di_w0_B_C , pre_muxed_Di_w0_B_X , pre_muxed_Di_w0_S_R , pre_muxed_Di_w0_S_C , pre_muxed_Di_w0_S_X , pre_re_r0_R , pre_re_r0_C , pre_re_r0_X , pre_we_w0_R , pre_we_w0_C , pre_we_w0_X , ra_0_0_R , ra_0_0_C , ra_0_0_X , radr_q_R , radr_q_C , radr_q_X , ramDataOut_R , ramDataOut_C , ramDataOut_X , ram_r0_OutputMuxDataOut_R , ram_r0_OutputMuxDataOut_C , ram_r0_OutputMuxDataOut_X , re_0_0_R , re_0_0_C , re_0_0_X , re_reg_r0_R , re_reg_r0_C , re_reg_r0_X , ret_en_R , ret_en_C , ret_en_X , sleep_en_R , sleep_en_C , sleep_en_X , wa_0_0_R , wa_0_0_C , wa_0_0_X , wadr_q_R , wadr_q_C , wadr_q_X , we_0_0_R , we_0_0_C , we_0_0_X , we_reg_w0_R , we_reg_w0_C , we_reg_w0_X  } = 0;
  always @( posedge la_bist_clkr0 ) begin
    if( !mbist_ramaccess_rst_ ) mbist_ce_r0_1p_PREV_VAL1 <= 0 ;
    if( !mbist_ramaccess_rst_ ) mbist_ce_r0_1p_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) mbist_ce_r0_1p_PREV_VAL1 <= mbist_ce_r0_1p ;
    if( INSTR_IN_ZY ) mbist_ce_r0_1p_PREV_VAL2 <= mbist_ce_r0_1p_PREV_VAL1 ;
  end
  always @( posedge la_bist_clkr0 ) begin
    if( !mbist_ramaccess_rst_ ) access_en_r_1p_PREV_VAL1 <= 0 ;
    if( !mbist_ramaccess_rst_ ) access_en_r_1p_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) access_en_r_1p_PREV_VAL1 <= access_en_r_1p ;
    if( INSTR_IN_ZY ) access_en_r_1p_PREV_VAL2 <= access_en_r_1p_PREV_VAL1 ;
  end
  always @( posedge la_bist_clkr0 ) begin
    if( !mbist_ramaccess_rst_ ) wthru_di_PREV_VAL1 <= 0 ;
    if( !mbist_ramaccess_rst_ ) wthru_di_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) wthru_di_PREV_VAL1 <= wthru_di ;
    if( INSTR_IN_ZY ) wthru_di_PREV_VAL2 <= wthru_di_PREV_VAL1 ;
  end
  always @( posedge la_bist_clkr0 ) begin
    if( !mbist_ramaccess_rst_ ) wthru_en_PREV_VAL1 <= 0 ;
    if( !mbist_ramaccess_rst_ ) wthru_en_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) wthru_en_PREV_VAL1 <= wthru_en ;
    if( INSTR_IN_ZY ) wthru_en_PREV_VAL2 <= wthru_en_PREV_VAL1 ;
  end
  always @( posedge la_bist_clkr0 ) begin
    if( !mbist_ramaccess_rst_ ) updateDR_sync_1p_PREV_VAL1 <= 0 ;
    if( !mbist_ramaccess_rst_ ) updateDR_sync_1p_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) updateDR_sync_1p_PREV_VAL1 <= updateDR_sync_1p ;
    if( INSTR_IN_ZY ) updateDR_sync_1p_PREV_VAL2 <= updateDR_sync_1p_PREV_VAL1 ;
  end
 // ground taints for unused wire slices
  assign { pwrbus_ram_pd_R1 [31:9] } = 0;
  assign { pwrbus_ram_pd_X1 [31:9] } = 0;
  assign { pwrbus_ram_pd_C1 [31:9] } = 0;
  assert property( access_en_r_1p_r_flag == 0 || access_en_r_1p_PREV_VAL1 == access_en_r_1p_PREV_VAL2 );
  assert property( mbist_ce_r0_1p_r_flag == 0 || mbist_ce_r0_1p_PREV_VAL1 == mbist_ce_r0_1p_PREV_VAL2 );
  assert property( updateDR_sync_1p_r_flag == 0 || updateDR_sync_1p_PREV_VAL1 == updateDR_sync_1p_PREV_VAL2 );
  assert property( wthru_di_r_flag == 0 || wthru_di_PREV_VAL1 == wthru_di_PREV_VAL2 );
  assert property( wthru_en_r_flag == 0 || wthru_en_PREV_VAL1 == wthru_en_PREV_VAL2 );
  assign rst_zy = !mbist_ramaccess_rst_ ;
endmodule
