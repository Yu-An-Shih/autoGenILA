module NV_NVDLA_BDMA_load(nvdla_core_clk, nvdla_core_rstn, bdma2cvif_rd_req_ready, bdma2mcif_rd_req_ready, csb2ld_vld, ld2st_wr_idle, ld2st_wr_prdy, reg2dp_cmd_dst_ram_type, reg2dp_cmd_interrupt, reg2dp_cmd_interrupt_ptr, reg2dp_cmd_src_ram_type, reg2dp_dst_addr_high_v8, reg2dp_dst_addr_low_v32, reg2dp_dst_line_stride, reg2dp_dst_surf_stride, reg2dp_line_repeat_number, reg2dp_line_size, reg2dp_src_addr_high_v8, reg2dp_src_addr_low_v32, reg2dp_src_line_stride, reg2dp_src_surf_stride, reg2dp_surf_repeat_number, st2ld_load_idle, bdma2cvif_rd_req_pd, bdma2cvif_rd_req_valid, bdma2mcif_rd_req_pd, bdma2mcif_rd_req_valid, csb2ld_rdy, ld2csb_grp0_dma_stall_inc, ld2csb_grp1_dma_stall_inc, ld2csb_idle, ld2gate_slcg_en, ld2st_wr_pd, ld2st_wr_pvld);
  wire _000_;
  wire [63:0] _001_;
  wire [23:0] _002_;
  wire _003_;
  wire [23:0] _004_;
  wire [12:0] _005_;
  wire [31:0] _006_;
  wire [23:0] _007_;
  wire [31:0] _008_;
  wire [63:0] _009_;
  wire [23:0] _010_;
  wire _011_;
  wire [63:0] _012_;
  wire [63:0] _013_;
  wire [23:0] _014_;
  wire [23:0] _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire [23:0] _028_;
  wire [23:0] _029_;
  wire [23:0] _030_;
  wire [63:0] _031_;
  wire [63:0] _032_;
  wire [63:0] _033_;
  wire [63:0] _034_;
  output [78:0] bdma2cvif_rd_req_pd;
  input bdma2cvif_rd_req_ready;
  output bdma2cvif_rd_req_valid;
  output [78:0] bdma2mcif_rd_req_pd;
  input bdma2mcif_rd_req_ready;
  output bdma2mcif_rd_req_valid;
  wire cmd_ready;
  wire cmd_valid;
  output csb2ld_rdy;
  input csb2ld_vld;
  wire cv_dma_rd_req_rdy;
  wire cv_dma_rd_req_vld;
  wire [78:0] cv_int_rd_req_pd;
  wire [78:0] cv_int_rd_req_pd_d0;
  wire cv_int_rd_req_ready;
  wire cv_int_rd_req_ready_d0;
  wire cv_int_rd_req_valid;
  wire cv_int_rd_req_valid_d0;
  wire cv_rd_req_rdyi;
  wire [63:0] dma_rd_req_addr;
  wire [78:0] dma_rd_req_pd;
  wire dma_rd_req_rdy;
  wire [14:0] dma_rd_req_size;
  wire dma_rd_req_type;
  wire dma_rd_req_vld;
  wire dma_stall_inc;
  wire is_cube_end;
  wire is_last_req_in_line;
  wire is_src_ram_type_switching;
  wire is_surf_end;
  output ld2csb_grp0_dma_stall_inc;
  output ld2csb_grp1_dma_stall_inc;
  output ld2csb_idle;
  output ld2gate_slcg_en;
  reg ld2gate_slcg_en;
  wire [63:0] ld2st_addr;
  wire ld2st_cmd_dst_ram_type;
  wire ld2st_cmd_interrupt;
  wire ld2st_cmd_interrupt_ptr;
  wire ld2st_cmd_src_ram_type;
  wire [23:0] ld2st_line_repeat_number;
  wire [12:0] ld2st_line_size;
  wire [26:0] ld2st_line_stride;
  wire [23:0] ld2st_surf_repeat_number;
  wire [26:0] ld2st_surf_stride;
  input ld2st_wr_idle;
  output [160:0] ld2st_wr_pd;
  input ld2st_wr_prdy;
  output ld2st_wr_pvld;
  wire ld_idle;
  reg [63:0] line_addr;
  reg [23:0] line_count;
  wire load_cmd;
  wire load_cmd_en;
  wire mc_dma_rd_req_rdy;
  wire mc_dma_rd_req_vld;
  wire [78:0] mc_int_rd_req_pd;
  wire [78:0] mc_int_rd_req_pd_d0;
  wire mc_int_rd_req_ready;
  wire mc_int_rd_req_ready_d0;
  wire mc_int_rd_req_valid;
  wire mc_int_rd_req_valid_d0;
  wire mc_rd_req_rdyi;
  input nvdla_core_clk;
  input nvdla_core_rstn;
  wire rd_req_rdyi;
  wire [54:0] reg2dp_addr;
  input reg2dp_cmd_dst_ram_type;
  input reg2dp_cmd_interrupt;
  input reg2dp_cmd_interrupt_ptr;
  input reg2dp_cmd_src_ram_type;
  wire [63:0] reg2dp_dst_addr;
  input [31:0] reg2dp_dst_addr_high_v8;
  input [26:0] reg2dp_dst_addr_low_v32;
  input [26:0] reg2dp_dst_line_stride;
  input [26:0] reg2dp_dst_surf_stride;
  input [23:0] reg2dp_line_repeat_number;
  input [12:0] reg2dp_line_size;
  input [31:0] reg2dp_src_addr_high_v8;
  input [26:0] reg2dp_src_addr_low_v32;
  input [26:0] reg2dp_src_line_stride;
  wire [31:0] reg2dp_src_line_stride_ext;
  input [26:0] reg2dp_src_surf_stride;
  wire [31:0] reg2dp_src_surf_stride_ext;
  input [23:0] reg2dp_surf_repeat_number;
  reg reg_cmd_src_ram_type;
  reg [23:0] reg_line_repeat_number;
  reg [12:0] reg_line_size;
  reg [31:0] reg_line_stride;
  reg [23:0] reg_surf_repeat_number;
  reg [31:0] reg_surf_stride;
  input st2ld_load_idle;
  reg [63:0] surf_addr;
  reg [23:0] surf_count;
  wire tran_accept;
  wire [63:0] tran_addr;
  wire tran_ready;
  wire [14:0] tran_size;
  reg tran_valid;
  assign _012_ = surf_addr + reg_surf_stride;
  assign _013_ = line_addr + reg_line_stride;
  assign _014_ = line_count + 1'b1;
  assign _015_ = surf_count + 1'b1;
  assign _016_ = ld2st_wr_prdy & cmd_ready;
  assign csb2ld_rdy = _016_ & load_cmd_en;
  assign _017_ = csb2ld_vld & cmd_ready;
  assign ld2st_wr_pvld = _017_ & load_cmd_en;
  assign _018_ = csb2ld_vld & ld2st_wr_prdy;
  assign cmd_valid = _018_ & load_cmd_en;
  assign _019_ = tran_accept & is_cube_end;
  assign tran_accept = tran_valid & dma_rd_req_rdy;
  assign load_cmd = cmd_valid & cmd_ready;
  assign _020_ = ld_idle & st2ld_load_idle;
  assign load_cmd_en = csb2ld_vld & _027_;
  assign ld_idle = ld2st_wr_idle & _024_;
  assign is_cube_end = is_surf_end & _021_;
  assign cv_dma_rd_req_vld = tran_valid & _022_;
  assign mc_dma_rd_req_vld = tran_valid & reg_cmd_src_ram_type;
  assign cv_rd_req_rdyi = cv_dma_rd_req_rdy & _022_;
  assign mc_rd_req_rdyi = mc_dma_rd_req_rdy & reg_cmd_src_ram_type;
  assign dma_stall_inc = tran_valid & _026_;
  assign ld2csb_grp0_dma_stall_inc = dma_stall_inc & _023_;
  assign ld2csb_grp1_dma_stall_inc = dma_stall_inc & reg2dp_cmd_interrupt_ptr;
  assign is_surf_end = line_count == reg_line_repeat_number;
  assign _021_ = surf_count == reg_surf_repeat_number;
  assign _022_ = ~ reg_cmd_src_ram_type;
  assign _023_ = ~ reg2dp_cmd_interrupt_ptr;
  assign _024_ = ! tran_valid;
  assign _025_ = ! is_src_ram_type_switching;
  assign _000_ = ! ld_idle;
  assign _026_ = ! dma_rd_req_rdy;
  assign _027_ = _020_ || _025_;
  assign is_src_ram_type_switching = reg2dp_cmd_src_ram_type != reg_cmd_src_ram_type;
  assign cmd_ready = _024_ | _019_;
  assign dma_rd_req_rdy = mc_rd_req_rdyi | cv_rd_req_rdyi;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      surf_count <= 24'b000000000000000000000000;
    else
      surf_count <= _010_;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      line_count <= 24'b000000000000000000000000;
    else
      line_count <= _002_;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      surf_addr <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    else
      surf_addr <= _009_;
  always @(posedge nvdla_core_clk)
      line_addr <= _001_;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      reg_cmd_src_ram_type <= 1'b0;
    else
      reg_cmd_src_ram_type <= _003_;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      reg_line_repeat_number <= 24'b000000000000000000000000;
    else
      reg_line_repeat_number <= _004_;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      reg_line_size <= 13'b0000000000000;
    else
      reg_line_size <= _005_;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      reg_line_stride <= 32'd0;
    else
      reg_line_stride <= _006_;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      reg_surf_repeat_number <= 24'b000000000000000000000000;
    else
      reg_surf_repeat_number <= _007_;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      reg_surf_stride <= 32'd0;
    else
      reg_surf_stride <= _008_;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      ld2gate_slcg_en <= 1'b0;
    else
      ld2gate_slcg_en <= _000_;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      tran_valid <= 1'b0;
    else
      tran_valid <= _011_;
  assign _028_ = is_surf_end ? _015_ : surf_count;
  assign _029_ = is_cube_end ? 24'b000000000000000000000000 : _028_;
  assign _010_ = tran_accept ? _029_ : surf_count;
  assign _030_ = is_surf_end ? 24'b000000000000000000000000 : _014_;
  assign _002_ = tran_accept ? _030_ : line_count;
  assign _031_ = is_surf_end ? _012_ : surf_addr;
  assign _032_ = tran_accept ? _031_ : surf_addr;
  wire [63:0] fangyuan0;
  assign fangyuan0 = { reg2dp_src_addr_high_v8, reg2dp_src_addr_low_v32, 5'b00000 };

  assign _009_ = load_cmd ? fangyuan0 : _032_;
  assign _033_ = is_surf_end ? _012_ : _013_;
  assign _034_ = tran_accept ? _033_ : line_addr;
  wire [63:0] fangyuan1;
  assign fangyuan1 = { reg2dp_src_addr_high_v8, reg2dp_src_addr_low_v32, 5'b00000 };

  assign _001_ = load_cmd ? fangyuan1 : _034_;
  wire [31:0] fangyuan2;
  assign fangyuan2 = { reg2dp_src_surf_stride, 5'b00000 };

  assign _008_ = load_cmd ? fangyuan2 : reg_surf_stride;
  assign _007_ = load_cmd ? reg2dp_surf_repeat_number : reg_surf_repeat_number;
  wire [31:0] fangyuan3;
  assign fangyuan3 = { reg2dp_src_line_stride, 5'b00000 };

  assign _006_ = load_cmd ? fangyuan3 : reg_line_stride;
  assign _005_ = load_cmd ? reg2dp_line_size : reg_line_size;
  assign _004_ = load_cmd ? reg2dp_line_repeat_number : reg_line_repeat_number;
  assign _003_ = load_cmd ? reg2dp_cmd_src_ram_type : reg_cmd_src_ram_type;
  assign _011_ = cmd_ready ? cmd_valid : tran_valid;
  NV_NVDLA_BDMA_LOAD_pipe_p1 pipe_p1 (
    .dma_rd_req_pd({ 2'b00, reg_line_size, line_addr }),
    .mc_dma_rd_req_rdy(mc_dma_rd_req_rdy),
    .mc_dma_rd_req_vld(mc_dma_rd_req_vld),
    .mc_int_rd_req_pd(mc_int_rd_req_pd),
    .mc_int_rd_req_ready(bdma2mcif_rd_req_ready),
    .mc_int_rd_req_valid(mc_int_rd_req_valid),
    .nvdla_core_clk(nvdla_core_clk),
    .nvdla_core_rstn(nvdla_core_rstn)
  );
  NV_NVDLA_BDMA_LOAD_pipe_p2 pipe_p2 (
    .cv_dma_rd_req_rdy(cv_dma_rd_req_rdy),
    .cv_dma_rd_req_vld(cv_dma_rd_req_vld),
    .cv_int_rd_req_pd(cv_int_rd_req_pd),
    .cv_int_rd_req_ready(bdma2cvif_rd_req_ready),
    .cv_int_rd_req_valid(cv_int_rd_req_valid),
    .dma_rd_req_pd({ 2'b00, reg_line_size, line_addr }),
    .nvdla_core_clk(nvdla_core_clk),
    .nvdla_core_rstn(nvdla_core_rstn)
  );
  assign bdma2cvif_rd_req_pd = cv_int_rd_req_pd;
  assign bdma2cvif_rd_req_valid = cv_int_rd_req_valid;
  assign bdma2mcif_rd_req_pd = mc_int_rd_req_pd;
  assign bdma2mcif_rd_req_valid = mc_int_rd_req_valid;
  assign cv_int_rd_req_pd_d0 = cv_int_rd_req_pd;
  assign cv_int_rd_req_ready = bdma2cvif_rd_req_ready;
  assign cv_int_rd_req_ready_d0 = bdma2cvif_rd_req_ready;
  assign cv_int_rd_req_valid_d0 = cv_int_rd_req_valid;
  assign dma_rd_req_addr = line_addr;
  assign dma_rd_req_pd = { 2'b00, reg_line_size, line_addr };
  assign dma_rd_req_size = { 2'b00, reg_line_size };
  assign dma_rd_req_type = reg_cmd_src_ram_type;
  assign dma_rd_req_vld = tran_valid;
  assign is_last_req_in_line = 1'b1;
  assign ld2csb_idle = ld_idle;
  assign ld2st_addr = { reg2dp_dst_addr_high_v8, reg2dp_dst_addr_low_v32, 5'b00000 };
  assign ld2st_cmd_dst_ram_type = reg2dp_cmd_dst_ram_type;
  assign ld2st_cmd_interrupt = reg2dp_cmd_interrupt;
  assign ld2st_cmd_interrupt_ptr = reg2dp_cmd_interrupt_ptr;
  assign ld2st_cmd_src_ram_type = reg2dp_cmd_src_ram_type;
  assign ld2st_line_repeat_number = reg2dp_line_repeat_number;
  assign ld2st_line_size = reg2dp_line_size;
  assign ld2st_line_stride = reg2dp_dst_line_stride;
  assign ld2st_surf_repeat_number = reg2dp_surf_repeat_number;
  assign ld2st_surf_stride = reg2dp_dst_surf_stride;
  assign ld2st_wr_pd = { reg2dp_surf_repeat_number[12:0], reg2dp_dst_surf_stride, reg2dp_line_repeat_number[12:0], reg2dp_dst_line_stride, reg2dp_cmd_interrupt_ptr, reg2dp_cmd_interrupt, reg2dp_cmd_dst_ram_type, reg2dp_cmd_src_ram_type, reg2dp_line_size, reg2dp_dst_addr_high_v8, reg2dp_dst_addr_low_v32, 5'b00000 };
  assign mc_int_rd_req_pd_d0 = mc_int_rd_req_pd;
  assign mc_int_rd_req_ready = bdma2mcif_rd_req_ready;
  assign mc_int_rd_req_ready_d0 = bdma2mcif_rd_req_ready;
  assign mc_int_rd_req_valid_d0 = mc_int_rd_req_valid;
  assign rd_req_rdyi = dma_rd_req_rdy;
  assign reg2dp_addr = { reg2dp_src_addr_high_v8[22:0], reg2dp_src_addr_low_v32, 5'b00000 };
  assign reg2dp_dst_addr = { reg2dp_dst_addr_high_v8, reg2dp_dst_addr_low_v32, 5'b00000 };
  assign reg2dp_src_line_stride_ext = { reg2dp_src_line_stride, 5'b00000 };
  assign reg2dp_src_surf_stride_ext = { reg2dp_src_surf_stride, 5'b00000 };
  assign tran_addr = line_addr;
  assign tran_ready = dma_rd_req_rdy;
  assign tran_size = { 2'b00, reg_line_size };
endmodule
