  logic [33:0] _000_;
  logic [33:0] _000__T ;
  logic [33:0] _000__R ;
  logic [33:0] _000__C ;
  logic [33:0] _000__X ;
  logic [13:0] _000__S ;
  logic [4:0] _001_;
  logic [4:0] _001__T ;
  logic [4:0] _001__R ;
  logic [4:0] _001__C ;
  logic [4:0] _001__X ;
  logic [13:0] _001__S ;
  logic _002_;
  logic _002__T ;
  logic _002__R ;
  logic _002__C ;
  logic _002__X ;
  logic [13:0] _002__S ;
  logic _003_;
  logic _003__T ;
  logic _003__R ;
  logic _003__C ;
  logic _003__X ;
  logic [13:0] _003__S ;
  logic [31:0] _004_;
  logic [31:0] _004__T ;
  logic [31:0] _004__R ;
  logic [31:0] _004__C ;
  logic [31:0] _004__X ;
  logic [13:0] _004__S ;
  logic [31:0] _005_;
  logic [31:0] _005__T ;
  logic [31:0] _005__R ;
  logic [31:0] _005__C ;
  logic [31:0] _005__X ;
  logic [13:0] _005__S ;
  logic [4:0] _006_;
  logic [4:0] _006__T ;
  logic [4:0] _006__R ;
  logic [4:0] _006__C ;
  logic [4:0] _006__X ;
  logic [13:0] _006__S ;
  logic _007_;
  logic _007__T ;
  logic _007__R ;
  logic _007__C ;
  logic _007__X ;
  logic [13:0] _007__S ;
  logic [62:0] _008_;
  logic [62:0] _008__T ;
  logic [62:0] _008__R ;
  logic [62:0] _008__C ;
  logic [62:0] _008__X ;
  logic [13:0] _008__S ;
  logic _009_;
  logic _009__T ;
  logic _009__R ;
  logic _009__C ;
  logic _009__X ;
  logic [13:0] _009__S ;
  logic _010_;
  logic _010__T ;
  logic _010__R ;
  logic _010__C ;
  logic _010__X ;
  logic [13:0] _010__S ;
  logic [31:0] _011_;
  logic [31:0] _011__T ;
  logic [31:0] _011__R ;
  logic [31:0] _011__C ;
  logic [31:0] _011__X ;
  logic [13:0] _011__S ;
  logic [31:0] _012_;
  logic [31:0] _012__T ;
  logic [31:0] _012__R ;
  logic [31:0] _012__C ;
  logic [31:0] _012__X ;
  logic [13:0] _012__S ;
  logic _013_;
  logic _013__T ;
  logic _013__R ;
  logic _013__C ;
  logic _013__X ;
  logic [13:0] _013__S ;
  logic [31:0] _014_;
  logic [31:0] _014__T ;
  logic [31:0] _014__R ;
  logic [31:0] _014__C ;
  logic [31:0] _014__X ;
  logic [13:0] _014__S ;
  logic [31:0] _015_;
  logic [31:0] _015__T ;
  logic [31:0] _015__R ;
  logic [31:0] _015__C ;
  logic [31:0] _015__X ;
  logic [13:0] _015__S ;
  logic [4:0] _016_;
  logic [4:0] _016__T ;
  logic [4:0] _016__R ;
  logic [4:0] _016__C ;
  logic [4:0] _016__X ;
  logic [13:0] _016__S ;
  logic [32:0] _017_;
  logic [32:0] _017__T ;
  logic [32:0] _017__R ;
  logic [32:0] _017__C ;
  logic [32:0] _017__X ;
  logic [13:0] _017__S ;
  logic [32:0] _018_;
  logic [32:0] _018__T ;
  logic [32:0] _018__R ;
  logic [32:0] _018__C ;
  logic [32:0] _018__X ;
  logic [13:0] _018__S ;
  logic _019_;
  logic _019__T ;
  logic _019__R ;
  logic _019__C ;
  logic _019__X ;
  logic [13:0] _019__S ;
  logic [31:0] _020_;
  logic [31:0] _020__T ;
  logic [31:0] _020__R ;
  logic [31:0] _020__C ;
  logic [31:0] _020__X ;
  logic [13:0] _020__S ;
  logic [32:0] _021_;
  logic [32:0] _021__T ;
  logic [32:0] _021__R ;
  logic [32:0] _021__C ;
  logic [32:0] _021__X ;
  logic [13:0] _021__S ;
  logic _022_;
  logic _022__T ;
  logic _022__R ;
  logic _022__C ;
  logic _022__X ;
  logic [13:0] _022__S ;
  logic _023_;
  logic _023__T ;
  logic _023__R ;
  logic _023__C ;
  logic _023__X ;
  logic [13:0] _023__S ;
  logic _024_;
  logic _024__T ;
  logic _024__R ;
  logic _024__C ;
  logic _024__X ;
  logic [13:0] _024__S ;
  logic _025_;
  logic _025__T ;
  logic _025__R ;
  logic _025__C ;
  logic _025__X ;
  logic [13:0] _025__S ;
  logic [31:0] _026_;
  logic [31:0] _026__T ;
  logic [31:0] _026__R ;
  logic [31:0] _026__C ;
  logic [31:0] _026__X ;
  logic [13:0] _026__S ;
  logic [31:0] _027_;
  logic [31:0] _027__T ;
  logic [31:0] _027__R ;
  logic [31:0] _027__C ;
  logic [31:0] _027__X ;
  logic [13:0] _027__S ;
  logic [31:0] _028_;
  logic [31:0] _028__T ;
  logic [31:0] _028__R ;
  logic [31:0] _028__C ;
  logic [31:0] _028__X ;
  logic [13:0] _028__S ;
  logic [31:0] _029_;
  logic [31:0] _029__T ;
  logic [31:0] _029__R ;
  logic [31:0] _029__C ;
  logic [31:0] _029__X ;
  logic [13:0] _029__S ;
  logic _030_;
  logic _030__T ;
  logic _030__R ;
  logic _030__C ;
  logic _030__X ;
  logic [13:0] _030__S ;
  logic _031_;
  logic _031__T ;
  logic _031__R ;
  logic _031__C ;
  logic _031__X ;
  logic [13:0] _031__S ;
  logic _032_;
  logic _032__T ;
  logic _032__R ;
  logic _032__C ;
  logic _032__X ;
  logic [13:0] _032__S ;
  logic _033_;
  logic _033__T ;
  logic _033__R ;
  logic _033__C ;
  logic _033__X ;
  logic [13:0] _033__S ;
  logic _034_;
  logic _034__T ;
  logic _034__R ;
  logic _034__C ;
  logic _034__X ;
  logic [13:0] _034__S ;
  logic [4:0] _035_;
  logic [4:0] _035__T ;
  logic [4:0] _035__R ;
  logic [4:0] _035__C ;
  logic [4:0] _035__X ;
  logic [13:0] _035__S ;
  logic [4:0] _036_;
  logic [4:0] _036__T ;
  logic [4:0] _036__R ;
  logic [4:0] _036__C ;
  logic [4:0] _036__X ;
  logic [13:0] _036__S ;
  logic [4:0] _037_;
  logic [4:0] _037__T ;
  logic [4:0] _037__R ;
  logic [4:0] _037__C ;
  logic [4:0] _037__X ;
  logic [13:0] _037__S ;
  logic [4:0] _038_;
  logic [4:0] _038__T ;
  logic [4:0] _038__R ;
  logic [4:0] _038__C ;
  logic [4:0] _038__X ;
  logic [13:0] _038__S ;
  logic _039_;
  logic _039__T ;
  logic _039__R ;
  logic _039__C ;
  logic _039__X ;
  logic [13:0] _039__S ;
  logic [4:0] _040_;
  logic [4:0] _040__T ;
  logic [4:0] _040__R ;
  logic [4:0] _040__C ;
  logic [4:0] _040__X ;
  logic [13:0] _040__S ;
  output [33:0] bdma2csb_resp_pd;
  logic [33:0] bdma2csb_resp_pd ;
  output [33:0] bdma2csb_resp_pd_T ;
  logic [33:0] bdma2csb_resp_pd_T ;
  logic [33:0] bdma2csb_resp_pd_R ;
  logic [33:0] bdma2csb_resp_pd_C ;
  logic [33:0] bdma2csb_resp_pd_X ;
  logic [13:0] bdma2csb_resp_pd_S ;
  input [33:0] bdma2csb_resp_pd_R0 ;
  input [33:0] bdma2csb_resp_pd_C0 ;
  input [33:0] bdma2csb_resp_pd_X0 ;
  output [13:0] bdma2csb_resp_pd_S ;
  logic [33:0] bdma2csb_resp_pd;
  logic [33:0]  bdma2csb_resp_pd_T ;
  logic [33:0]  bdma2csb_resp_pd_PREV_VAL1 ;
  logic [33:0]  bdma2csb_resp_pd_PREV_VAL2 ;
  logic bdma2csb_resp_pd_t_flag ;
  logic bdma2csb_resp_pd_r_flag ;
  assign bdma2csb_resp_pd_S = 842 ;
  output bdma2csb_resp_valid;
  logic bdma2csb_resp_valid ;
  output bdma2csb_resp_valid_T ;
  logic bdma2csb_resp_valid_T ;
  logic bdma2csb_resp_valid_R ;
  logic bdma2csb_resp_valid_C ;
  logic bdma2csb_resp_valid_X ;
  logic [13:0] bdma2csb_resp_valid_S ;
  input bdma2csb_resp_valid_R0 ;
  input bdma2csb_resp_valid_C0 ;
  input bdma2csb_resp_valid_X0 ;
  output [13:0] bdma2csb_resp_valid_S ;
  logic bdma2csb_resp_valid;
  logic  bdma2csb_resp_valid_T ;
  logic  bdma2csb_resp_valid_PREV_VAL1 ;
  logic  bdma2csb_resp_valid_PREV_VAL2 ;
  logic bdma2csb_resp_valid_t_flag ;
  logic bdma2csb_resp_valid_r_flag ;
  assign bdma2csb_resp_valid_S = 843 ;
  output [1:0] bdma2glb_done_intr_pd;
  logic [1:0] bdma2glb_done_intr_pd ;
  output [1:0] bdma2glb_done_intr_pd_T ;
  logic [1:0] bdma2glb_done_intr_pd_T ;
  logic [1:0] bdma2glb_done_intr_pd_R ;
  logic [1:0] bdma2glb_done_intr_pd_C ;
  logic [1:0] bdma2glb_done_intr_pd_X ;
  logic [13:0] bdma2glb_done_intr_pd_S ;
  input [1:0] bdma2glb_done_intr_pd_R0 ;
  input [1:0] bdma2glb_done_intr_pd_C0 ;
  input [1:0] bdma2glb_done_intr_pd_X0 ;
  output [13:0] bdma2glb_done_intr_pd_S ;
  logic [1:0] bdma2glb_done_intr_pd;
  logic [1:0]  bdma2glb_done_intr_pd_T ;
  logic [1:0]  bdma2glb_done_intr_pd_PREV_VAL1 ;
  logic [1:0]  bdma2glb_done_intr_pd_PREV_VAL2 ;
  logic bdma2glb_done_intr_pd_t_flag ;
  logic bdma2glb_done_intr_pd_r_flag ;
  assign bdma2glb_done_intr_pd_S = 844 ;
  logic cmd_launch_rdy;
  logic cmd_launch_rdy_T ;
  logic cmd_launch_rdy_R ;
  logic cmd_launch_rdy_C ;
  logic cmd_launch_rdy_X ;
  logic [13:0] cmd_launch_rdy_S ;
  logic cmd_launch_vld;
  logic cmd_launch_vld_T ;
  logic cmd_launch_vld_R ;
  logic cmd_launch_vld_C ;
  logic cmd_launch_vld_X ;
  logic [13:0] cmd_launch_vld_S ;
  input [62:0] csb2bdma_req_pd;
  input [62:0] csb2bdma_req_pd_T ;
  input [13:0] csb2bdma_req_pd_S ;
  output [62:0] csb2bdma_req_pd_R ;
  output [62:0] csb2bdma_req_pd_X ;
  output [62:0] csb2bdma_req_pd_C ;
  output csb2bdma_req_prdy;
  logic csb2bdma_req_prdy ;
  output csb2bdma_req_prdy_T ;
  logic csb2bdma_req_prdy_T ;
  logic csb2bdma_req_prdy_R ;
  logic csb2bdma_req_prdy_C ;
  logic csb2bdma_req_prdy_X ;
  logic [13:0] csb2bdma_req_prdy_S ;
  input csb2bdma_req_prdy_R0 ;
  input csb2bdma_req_prdy_C0 ;
  input csb2bdma_req_prdy_X0 ;
  output [13:0] csb2bdma_req_prdy_S ;
  input csb2bdma_req_pvld;
  input csb2bdma_req_pvld_T ;
  input [13:0] csb2bdma_req_pvld_S ;
  output csb2bdma_req_pvld_R ;
  output csb2bdma_req_pvld_X ;
  output csb2bdma_req_pvld_C ;
  output csb2gate_slcg_en;
  logic csb2gate_slcg_en ;
  output csb2gate_slcg_en_T ;
  logic csb2gate_slcg_en_T ;
  logic csb2gate_slcg_en_R ;
  logic csb2gate_slcg_en_C ;
  logic csb2gate_slcg_en_X ;
  logic [13:0] csb2gate_slcg_en_S ;
  input csb2gate_slcg_en_R0 ;
  input csb2gate_slcg_en_C0 ;
  input csb2gate_slcg_en_X0 ;
  output [13:0] csb2gate_slcg_en_S ;
  input csb2ld_rdy;
  input csb2ld_rdy_T ;
  input [13:0] csb2ld_rdy_S ;
  output csb2ld_rdy_R ;
  output csb2ld_rdy_X ;
  output csb2ld_rdy_C ;
  output csb2ld_vld;
  logic csb2ld_vld ;
  output csb2ld_vld_T ;
  logic csb2ld_vld_T ;
  logic csb2ld_vld_R ;
  logic csb2ld_vld_C ;
  logic csb2ld_vld_X ;
  logic [13:0] csb2ld_vld_S ;
  input csb2ld_vld_R0 ;
  input csb2ld_vld_C0 ;
  input csb2ld_vld_X0 ;
  output [13:0] csb2ld_vld_S ;
  logic [288:0] csb_fifo_rd_pd;
  logic [288:0] csb_fifo_rd_pd_T ;
  logic [288:0] csb_fifo_rd_pd_R ;
  logic [288:0] csb_fifo_rd_pd_C ;
  logic [288:0] csb_fifo_rd_pd_X ;
  logic [13:0] csb_fifo_rd_pd_S ;
  logic csb_fifo_rd_prdy;
  logic csb_fifo_rd_prdy_T ;
  logic csb_fifo_rd_prdy_R ;
  logic csb_fifo_rd_prdy_C ;
  logic csb_fifo_rd_prdy_X ;
  logic [13:0] csb_fifo_rd_prdy_S ;
  logic csb_fifo_rd_pvld;
  logic csb_fifo_rd_pvld_T ;
  logic csb_fifo_rd_pvld_R ;
  logic csb_fifo_rd_pvld_C ;
  logic csb_fifo_rd_pvld_X ;
  logic [13:0] csb_fifo_rd_pvld_S ;
  logic [4:0] csb_fifo_wr_count;
  logic [4:0] csb_fifo_wr_count_T ;
  logic [4:0] csb_fifo_wr_count_R ;
  logic [4:0] csb_fifo_wr_count_C ;
  logic [4:0] csb_fifo_wr_count_X ;
  logic [13:0] csb_fifo_wr_count_S ;
  logic csb_fifo_wr_idle;
  logic csb_fifo_wr_idle_T ;
  logic csb_fifo_wr_idle_R ;
  logic csb_fifo_wr_idle_C ;
  logic csb_fifo_wr_idle_X ;
  logic [13:0] csb_fifo_wr_idle_S ;
  logic [288:0] csb_fifo_wr_pd;
  logic [288:0] csb_fifo_wr_pd_T ;
  logic [288:0] csb_fifo_wr_pd_R ;
  logic [288:0] csb_fifo_wr_pd_C ;
  logic [288:0] csb_fifo_wr_pd_X ;
  logic [13:0] csb_fifo_wr_pd_S ;
  logic csb_fifo_wr_prdy;
  logic csb_fifo_wr_prdy_T ;
  logic csb_fifo_wr_prdy_R ;
  logic csb_fifo_wr_prdy_C ;
  logic csb_fifo_wr_prdy_X ;
  logic [13:0] csb_fifo_wr_prdy_S ;
  logic csb_fifo_wr_pvld;
  logic csb_fifo_wr_pvld_T ;
  logic csb_fifo_wr_pvld_R ;
  logic csb_fifo_wr_pvld_C ;
  logic csb_fifo_wr_pvld_X ;
  logic [13:0] csb_fifo_wr_pvld_S ;
  logic csb_idle;
  logic csb_idle_T ;
  logic csb_idle_R ;
  logic csb_idle_C ;
  logic csb_idle_X ;
  logic [13:0] csb_idle_S ;
  logic csb_processing;
  logic csb_processing_T ;
  logic csb_processing_R ;
  logic csb_processing_C ;
  logic csb_processing_X ;
  logic [13:0] csb_processing_S ;
  logic csb_processing_d;
  logic  csb_processing_d_T ;
  logic  csb_processing_d_PREV_VAL1 ;
  logic  csb_processing_d_PREV_VAL2 ;
  logic  csb_processing_d_R ;
  logic  csb_processing_d_X ;
  logic  csb_processing_d_C ;
  logic [13:0] csb_processing_d_S ;
  logic csb_processing_d_t_flag ;
  logic csb_processing_d_r_flag ;
  assign csb_processing_d_S = 845 ;
  logic dma_read_stall_count_cen;
  logic dma_read_stall_count_cen_T ;
  logic dma_read_stall_count_cen_R ;
  logic dma_read_stall_count_cen_C ;
  logic dma_read_stall_count_cen_X ;
  logic [13:0] dma_read_stall_count_cen_S ;
  input [31:0] dma_write_stall_count;
  input [31:0] dma_write_stall_count_T ;
  input [13:0] dma_write_stall_count_S ;
  output [31:0] dma_write_stall_count_R ;
  output [31:0] dma_write_stall_count_X ;
  output [31:0] dma_write_stall_count_C ;
  output dma_write_stall_count_cen;
  logic dma_write_stall_count_cen ;
  output dma_write_stall_count_cen_T ;
  logic dma_write_stall_count_cen_T ;
  logic dma_write_stall_count_cen_R ;
  logic dma_write_stall_count_cen_C ;
  logic dma_write_stall_count_cen_X ;
  logic [13:0] dma_write_stall_count_cen_S ;
  input dma_write_stall_count_cen_R0 ;
  input dma_write_stall_count_cen_C0 ;
  input dma_write_stall_count_cen_X0 ;
  output [13:0] dma_write_stall_count_cen_S ;
  logic [4:0] gather_count;
  logic [4:0]  gather_count_T ;
  logic [4:0]  gather_count_PREV_VAL1 ;
  logic [4:0]  gather_count_PREV_VAL2 ;
  logic [4:0]  gather_count_R ;
  logic [4:0]  gather_count_X ;
  logic [4:0]  gather_count_C ;
  logic [13:0] gather_count_S ;
  logic gather_count_t_flag ;
  logic gather_count_r_flag ;
  assign gather_count_S = 846 ;
  logic gather_ptr;
  logic  gather_ptr_T ;
  logic  gather_ptr_PREV_VAL1 ;
  logic  gather_ptr_PREV_VAL2 ;
  logic  gather_ptr_R ;
  logic  gather_ptr_X ;
  logic  gather_ptr_C ;
  logic [13:0] gather_ptr_S ;
  logic gather_ptr_t_flag ;
  logic gather_ptr_r_flag ;
  assign gather_ptr_S = 847 ;
  logic gather_rdy;
  logic gather_rdy_T ;
  logic gather_rdy_R ;
  logic gather_rdy_C ;
  logic gather_rdy_X ;
  logic [13:0] gather_rdy_S ;
  logic gather_to_launch;
  logic gather_to_launch_T ;
  logic gather_to_launch_R ;
  logic gather_to_launch_C ;
  logic gather_to_launch_X ;
  logic [13:0] gather_to_launch_S ;
  logic gather_vld;
  logic  gather_vld_T ;
  logic  gather_vld_PREV_VAL1 ;
  logic  gather_vld_PREV_VAL2 ;
  logic  gather_vld_R ;
  logic  gather_vld_X ;
  logic  gather_vld_C ;
  logic [13:0] gather_vld_S ;
  logic gather_vld_t_flag ;
  logic gather_vld_r_flag ;
  assign gather_vld_S = 848 ;
  logic grp0_cmd_launch;
  logic grp0_cmd_launch_T ;
  logic grp0_cmd_launch_R ;
  logic grp0_cmd_launch_C ;
  logic grp0_cmd_launch_X ;
  logic [13:0] grp0_cmd_launch_S ;
  logic grp0_cmd_launch_trigger;
  logic  grp0_cmd_launch_trigger_T ;
  logic  grp0_cmd_launch_trigger_PREV_VAL1 ;
  logic  grp0_cmd_launch_trigger_PREV_VAL2 ;
  logic  grp0_cmd_launch_trigger_R ;
  logic  grp0_cmd_launch_trigger_X ;
  logic  grp0_cmd_launch_trigger_C ;
  logic [13:0] grp0_cmd_launch_trigger_S ;
  logic grp0_cmd_launch_trigger_t_flag ;
  logic grp0_cmd_launch_trigger_r_flag ;
  assign grp0_cmd_launch_trigger_S = 849 ;
  logic grp0_read_stall_cnt_adv;
  logic grp0_read_stall_cnt_adv_T ;
  logic grp0_read_stall_cnt_adv_R ;
  logic grp0_read_stall_cnt_adv_C ;
  logic grp0_read_stall_cnt_adv_X ;
  logic [13:0] grp0_read_stall_cnt_adv_S ;
  logic [31:0] grp0_read_stall_cnt_cnt_cur;
  logic [31:0]  grp0_read_stall_cnt_cnt_cur_T ;
  logic [31:0]  grp0_read_stall_cnt_cnt_cur_PREV_VAL1 ;
  logic [31:0]  grp0_read_stall_cnt_cnt_cur_PREV_VAL2 ;
  logic [31:0]  grp0_read_stall_cnt_cnt_cur_R ;
  logic [31:0]  grp0_read_stall_cnt_cnt_cur_X ;
  logic [31:0]  grp0_read_stall_cnt_cnt_cur_C ;
  logic [13:0] grp0_read_stall_cnt_cnt_cur_S ;
  logic grp0_read_stall_cnt_cnt_cur_t_flag ;
  logic grp0_read_stall_cnt_cnt_cur_r_flag ;
  assign grp0_read_stall_cnt_cnt_cur_S = 850 ;
  logic [33:0] grp0_read_stall_cnt_cnt_ext;
  logic [33:0] grp0_read_stall_cnt_cnt_ext_T ;
  logic [33:0] grp0_read_stall_cnt_cnt_ext_R ;
  logic [33:0] grp0_read_stall_cnt_cnt_ext_C ;
  logic [33:0] grp0_read_stall_cnt_cnt_ext_X ;
  logic [13:0] grp0_read_stall_cnt_cnt_ext_S ;
  logic [31:0] grp0_read_stall_cnt_cnt_inc;
  logic [31:0] grp0_read_stall_cnt_cnt_inc_T ;
  logic [31:0] grp0_read_stall_cnt_cnt_inc_R ;
  logic [31:0] grp0_read_stall_cnt_cnt_inc_C ;
  logic [31:0] grp0_read_stall_cnt_cnt_inc_X ;
  logic [13:0] grp0_read_stall_cnt_cnt_inc_S ;
  logic [31:0] grp0_read_stall_cnt_cnt_mod;
  logic [31:0] grp0_read_stall_cnt_cnt_mod_T ;
  logic [31:0] grp0_read_stall_cnt_cnt_mod_R ;
  logic [31:0] grp0_read_stall_cnt_cnt_mod_C ;
  logic [31:0] grp0_read_stall_cnt_cnt_mod_X ;
  logic [13:0] grp0_read_stall_cnt_cnt_mod_S ;
  logic [31:0] grp0_read_stall_cnt_cnt_new;
  logic [31:0] grp0_read_stall_cnt_cnt_new_T ;
  logic [31:0] grp0_read_stall_cnt_cnt_new_R ;
  logic [31:0] grp0_read_stall_cnt_cnt_new_C ;
  logic [31:0] grp0_read_stall_cnt_cnt_new_X ;
  logic [13:0] grp0_read_stall_cnt_cnt_new_S ;
  logic [31:0] grp0_read_stall_cnt_cnt_nxt;
  logic [31:0] grp0_read_stall_cnt_cnt_nxt_T ;
  logic [31:0] grp0_read_stall_cnt_cnt_nxt_R ;
  logic [31:0] grp0_read_stall_cnt_cnt_nxt_C ;
  logic [31:0] grp0_read_stall_cnt_cnt_nxt_X ;
  logic [13:0] grp0_read_stall_cnt_cnt_nxt_S ;
  logic [31:0] grp0_read_stall_count;
  logic [31:0] grp0_read_stall_count_T ;
  logic [31:0] grp0_read_stall_count_R ;
  logic [31:0] grp0_read_stall_count_C ;
  logic [31:0] grp0_read_stall_count_X ;
  logic [13:0] grp0_read_stall_count_S ;
  logic grp0_read_stall_count_dec;
  logic grp0_read_stall_count_dec_T ;
  logic grp0_read_stall_count_dec_R ;
  logic grp0_read_stall_count_dec_C ;
  logic grp0_read_stall_count_dec_X ;
  logic [13:0] grp0_read_stall_count_dec_S ;
  logic grp1_cmd_launch;
  logic grp1_cmd_launch_T ;
  logic grp1_cmd_launch_R ;
  logic grp1_cmd_launch_C ;
  logic grp1_cmd_launch_X ;
  logic [13:0] grp1_cmd_launch_S ;
  logic grp1_cmd_launch_trigger;
  logic  grp1_cmd_launch_trigger_T ;
  logic  grp1_cmd_launch_trigger_PREV_VAL1 ;
  logic  grp1_cmd_launch_trigger_PREV_VAL2 ;
  logic  grp1_cmd_launch_trigger_R ;
  logic  grp1_cmd_launch_trigger_X ;
  logic  grp1_cmd_launch_trigger_C ;
  logic [13:0] grp1_cmd_launch_trigger_S ;
  logic grp1_cmd_launch_trigger_t_flag ;
  logic grp1_cmd_launch_trigger_r_flag ;
  assign grp1_cmd_launch_trigger_S = 851 ;
  logic grp1_read_stall_cnt_adv;
  logic grp1_read_stall_cnt_adv_T ;
  logic grp1_read_stall_cnt_adv_R ;
  logic grp1_read_stall_cnt_adv_C ;
  logic grp1_read_stall_cnt_adv_X ;
  logic [13:0] grp1_read_stall_cnt_adv_S ;
  logic [31:0] grp1_read_stall_cnt_cnt_cur;
  logic [31:0]  grp1_read_stall_cnt_cnt_cur_T ;
  logic [31:0]  grp1_read_stall_cnt_cnt_cur_PREV_VAL1 ;
  logic [31:0]  grp1_read_stall_cnt_cnt_cur_PREV_VAL2 ;
  logic [31:0]  grp1_read_stall_cnt_cnt_cur_R ;
  logic [31:0]  grp1_read_stall_cnt_cnt_cur_X ;
  logic [31:0]  grp1_read_stall_cnt_cnt_cur_C ;
  logic [13:0] grp1_read_stall_cnt_cnt_cur_S ;
  logic grp1_read_stall_cnt_cnt_cur_t_flag ;
  logic grp1_read_stall_cnt_cnt_cur_r_flag ;
  assign grp1_read_stall_cnt_cnt_cur_S = 852 ;
  logic [33:0] grp1_read_stall_cnt_cnt_ext;
  logic [33:0] grp1_read_stall_cnt_cnt_ext_T ;
  logic [33:0] grp1_read_stall_cnt_cnt_ext_R ;
  logic [33:0] grp1_read_stall_cnt_cnt_ext_C ;
  logic [33:0] grp1_read_stall_cnt_cnt_ext_X ;
  logic [13:0] grp1_read_stall_cnt_cnt_ext_S ;
  logic [31:0] grp1_read_stall_cnt_cnt_inc;
  logic [31:0] grp1_read_stall_cnt_cnt_inc_T ;
  logic [31:0] grp1_read_stall_cnt_cnt_inc_R ;
  logic [31:0] grp1_read_stall_cnt_cnt_inc_C ;
  logic [31:0] grp1_read_stall_cnt_cnt_inc_X ;
  logic [13:0] grp1_read_stall_cnt_cnt_inc_S ;
  logic [31:0] grp1_read_stall_cnt_cnt_mod;
  logic [31:0] grp1_read_stall_cnt_cnt_mod_T ;
  logic [31:0] grp1_read_stall_cnt_cnt_mod_R ;
  logic [31:0] grp1_read_stall_cnt_cnt_mod_C ;
  logic [31:0] grp1_read_stall_cnt_cnt_mod_X ;
  logic [13:0] grp1_read_stall_cnt_cnt_mod_S ;
  logic [31:0] grp1_read_stall_cnt_cnt_new;
  logic [31:0] grp1_read_stall_cnt_cnt_new_T ;
  logic [31:0] grp1_read_stall_cnt_cnt_new_R ;
  logic [31:0] grp1_read_stall_cnt_cnt_new_C ;
  logic [31:0] grp1_read_stall_cnt_cnt_new_X ;
  logic [13:0] grp1_read_stall_cnt_cnt_new_S ;
  logic [31:0] grp1_read_stall_cnt_cnt_nxt;
  logic [31:0] grp1_read_stall_cnt_cnt_nxt_T ;
  logic [31:0] grp1_read_stall_cnt_cnt_nxt_R ;
  logic [31:0] grp1_read_stall_cnt_cnt_nxt_C ;
  logic [31:0] grp1_read_stall_cnt_cnt_nxt_X ;
  logic [13:0] grp1_read_stall_cnt_cnt_nxt_S ;
  logic [31:0] grp1_read_stall_count;
  logic [31:0] grp1_read_stall_count_T ;
  logic [31:0] grp1_read_stall_count_R ;
  logic [31:0] grp1_read_stall_count_C ;
  logic [31:0] grp1_read_stall_count_X ;
  logic [13:0] grp1_read_stall_count_S ;
  logic grp1_read_stall_count_dec;
  logic grp1_read_stall_count_dec_T ;
  logic grp1_read_stall_count_dec_R ;
  logic grp1_read_stall_count_dec_C ;
  logic grp1_read_stall_count_dec_X ;
  logic [13:0] grp1_read_stall_count_dec_S ;
  logic is_last_cmd;
  logic is_last_cmd_T ;
  logic is_last_cmd_R ;
  logic is_last_cmd_C ;
  logic is_last_cmd_X ;
  logic [13:0] is_last_cmd_S ;
  logic is_last_cmd_rdy;
  logic is_last_cmd_rdy_T ;
  logic is_last_cmd_rdy_R ;
  logic is_last_cmd_rdy_C ;
  logic is_last_cmd_rdy_X ;
  logic [13:0] is_last_cmd_rdy_S ;
  logic [4:0] launch_count;
  logic [4:0]  launch_count_T ;
  logic [4:0]  launch_count_PREV_VAL1 ;
  logic [4:0]  launch_count_PREV_VAL2 ;
  logic [4:0]  launch_count_R ;
  logic [4:0]  launch_count_X ;
  logic [4:0]  launch_count_C ;
  logic [13:0] launch_count_S ;
  logic launch_count_t_flag ;
  logic launch_count_r_flag ;
  assign launch_count_S = 853 ;
  logic launch_ptr;
  logic  launch_ptr_T ;
  logic  launch_ptr_PREV_VAL1 ;
  logic  launch_ptr_PREV_VAL2 ;
  logic  launch_ptr_R ;
  logic  launch_ptr_X ;
  logic  launch_ptr_C ;
  logic [13:0] launch_ptr_S ;
  logic launch_ptr_t_flag ;
  logic launch_ptr_r_flag ;
  assign launch_ptr_S = 854 ;
  logic launch_rdy;
  logic launch_rdy_T ;
  logic launch_rdy_R ;
  logic launch_rdy_C ;
  logic launch_rdy_X ;
  logic [13:0] launch_rdy_S ;
  logic launch_vld;
  logic launch_vld_T ;
  logic launch_vld_R ;
  logic launch_vld_C ;
  logic launch_vld_X ;
  logic [13:0] launch_vld_S ;
  input ld2csb_grp0_dma_stall_inc;
  input ld2csb_grp0_dma_stall_inc_T ;
  input [13:0] ld2csb_grp0_dma_stall_inc_S ;
  output ld2csb_grp0_dma_stall_inc_R ;
  output ld2csb_grp0_dma_stall_inc_X ;
  output ld2csb_grp0_dma_stall_inc_C ;
  input ld2csb_grp1_dma_stall_inc;
  input ld2csb_grp1_dma_stall_inc_T ;
  input [13:0] ld2csb_grp1_dma_stall_inc_S ;
  output ld2csb_grp1_dma_stall_inc_R ;
  output ld2csb_grp1_dma_stall_inc_X ;
  output ld2csb_grp1_dma_stall_inc_C ;
  input ld2csb_idle;
  input ld2csb_idle_T ;
  input [13:0] ld2csb_idle_S ;
  output ld2csb_idle_R ;
  output ld2csb_idle_X ;
  output ld2csb_idle_C ;
  logic load_idle;
  logic load_idle_T ;
  logic load_idle_R ;
  logic load_idle_C ;
  logic load_idle_X ;
  logic [13:0] load_idle_S ;
  logic mon_csb_fifo_rd_pvld;
  logic mon_csb_fifo_rd_pvld_T ;
  logic mon_csb_fifo_rd_pvld_R ;
  logic mon_csb_fifo_rd_pvld_C ;
  logic mon_csb_fifo_rd_pvld_X ;
  logic [13:0] mon_csb_fifo_rd_pvld_S ;
  logic mon_csb_fifo_wr_prdy;
  logic mon_csb_fifo_wr_prdy_T ;
  logic mon_csb_fifo_wr_prdy_R ;
  logic mon_csb_fifo_wr_prdy_C ;
  logic mon_csb_fifo_wr_prdy_X ;
  logic [13:0] mon_csb_fifo_wr_prdy_S ;
  logic nvdla_bdma_cfg_cmd_0_dst_ram_type;
  logic nvdla_bdma_cfg_cmd_0_dst_ram_type_T ;
  logic nvdla_bdma_cfg_cmd_0_dst_ram_type_R ;
  logic nvdla_bdma_cfg_cmd_0_dst_ram_type_C ;
  logic nvdla_bdma_cfg_cmd_0_dst_ram_type_X ;
  logic [13:0] nvdla_bdma_cfg_cmd_0_dst_ram_type_S ;
  logic nvdla_bdma_cfg_cmd_0_src_ram_type;
  logic nvdla_bdma_cfg_cmd_0_src_ram_type_T ;
  logic nvdla_bdma_cfg_cmd_0_src_ram_type_R ;
  logic nvdla_bdma_cfg_cmd_0_src_ram_type_C ;
  logic nvdla_bdma_cfg_cmd_0_src_ram_type_X ;
  logic [13:0] nvdla_bdma_cfg_cmd_0_src_ram_type_S ;
  logic [31:0] nvdla_bdma_cfg_dst_addr_high_0_v8;
  logic [31:0] nvdla_bdma_cfg_dst_addr_high_0_v8_T ;
  logic [31:0] nvdla_bdma_cfg_dst_addr_high_0_v8_R ;
  logic [31:0] nvdla_bdma_cfg_dst_addr_high_0_v8_C ;
  logic [31:0] nvdla_bdma_cfg_dst_addr_high_0_v8_X ;
  logic [13:0] nvdla_bdma_cfg_dst_addr_high_0_v8_S ;
  logic [26:0] nvdla_bdma_cfg_dst_addr_low_0_v32;
  logic [26:0] nvdla_bdma_cfg_dst_addr_low_0_v32_T ;
  logic [26:0] nvdla_bdma_cfg_dst_addr_low_0_v32_R ;
  logic [26:0] nvdla_bdma_cfg_dst_addr_low_0_v32_C ;
  logic [26:0] nvdla_bdma_cfg_dst_addr_low_0_v32_X ;
  logic [13:0] nvdla_bdma_cfg_dst_addr_low_0_v32_S ;
  logic [26:0] nvdla_bdma_cfg_dst_line_0_stride;
  logic [26:0] nvdla_bdma_cfg_dst_line_0_stride_T ;
  logic [26:0] nvdla_bdma_cfg_dst_line_0_stride_R ;
  logic [26:0] nvdla_bdma_cfg_dst_line_0_stride_C ;
  logic [26:0] nvdla_bdma_cfg_dst_line_0_stride_X ;
  logic [13:0] nvdla_bdma_cfg_dst_line_0_stride_S ;
  logic [26:0] nvdla_bdma_cfg_dst_surf_0_stride;
  logic [26:0] nvdla_bdma_cfg_dst_surf_0_stride_T ;
  logic [26:0] nvdla_bdma_cfg_dst_surf_0_stride_R ;
  logic [26:0] nvdla_bdma_cfg_dst_surf_0_stride_C ;
  logic [26:0] nvdla_bdma_cfg_dst_surf_0_stride_X ;
  logic [13:0] nvdla_bdma_cfg_dst_surf_0_stride_S ;
  logic nvdla_bdma_cfg_launch0_0_grp0_launch;
  logic nvdla_bdma_cfg_launch0_0_grp0_launch_T ;
  logic nvdla_bdma_cfg_launch0_0_grp0_launch_R ;
  logic nvdla_bdma_cfg_launch0_0_grp0_launch_C ;
  logic nvdla_bdma_cfg_launch0_0_grp0_launch_X ;
  logic [13:0] nvdla_bdma_cfg_launch0_0_grp0_launch_S ;
  logic nvdla_bdma_cfg_launch0_0_grp0_launch_trigger;
  logic nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_T ;
  logic nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_R ;
  logic nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_C ;
  logic nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_X ;
  logic [13:0] nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_S ;
  logic nvdla_bdma_cfg_launch1_0_grp1_launch;
  logic nvdla_bdma_cfg_launch1_0_grp1_launch_T ;
  logic nvdla_bdma_cfg_launch1_0_grp1_launch_R ;
  logic nvdla_bdma_cfg_launch1_0_grp1_launch_C ;
  logic nvdla_bdma_cfg_launch1_0_grp1_launch_X ;
  logic [13:0] nvdla_bdma_cfg_launch1_0_grp1_launch_S ;
  logic nvdla_bdma_cfg_launch1_0_grp1_launch_trigger;
  logic nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_T ;
  logic nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_R ;
  logic nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_C ;
  logic nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_X ;
  logic [13:0] nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_S ;
  logic [12:0] nvdla_bdma_cfg_line_0_size;
  logic [12:0] nvdla_bdma_cfg_line_0_size_T ;
  logic [12:0] nvdla_bdma_cfg_line_0_size_R ;
  logic [12:0] nvdla_bdma_cfg_line_0_size_C ;
  logic [12:0] nvdla_bdma_cfg_line_0_size_X ;
  logic [13:0] nvdla_bdma_cfg_line_0_size_S ;
  logic [23:0] nvdla_bdma_cfg_line_repeat_0_number;
  logic [23:0] nvdla_bdma_cfg_line_repeat_0_number_T ;
  logic [23:0] nvdla_bdma_cfg_line_repeat_0_number_R ;
  logic [23:0] nvdla_bdma_cfg_line_repeat_0_number_C ;
  logic [23:0] nvdla_bdma_cfg_line_repeat_0_number_X ;
  logic [13:0] nvdla_bdma_cfg_line_repeat_0_number_S ;
  logic nvdla_bdma_cfg_op_0_en;
  logic nvdla_bdma_cfg_op_0_en_T ;
  logic nvdla_bdma_cfg_op_0_en_R ;
  logic nvdla_bdma_cfg_op_0_en_C ;
  logic nvdla_bdma_cfg_op_0_en_X ;
  logic [13:0] nvdla_bdma_cfg_op_0_en_S ;
  logic nvdla_bdma_cfg_op_0_en_trigger;
  logic nvdla_bdma_cfg_op_0_en_trigger_T ;
  logic nvdla_bdma_cfg_op_0_en_trigger_R ;
  logic nvdla_bdma_cfg_op_0_en_trigger_C ;
  logic nvdla_bdma_cfg_op_0_en_trigger_X ;
  logic [13:0] nvdla_bdma_cfg_op_0_en_trigger_S ;
  logic [31:0] nvdla_bdma_cfg_src_addr_high_0_v8;
  logic [31:0] nvdla_bdma_cfg_src_addr_high_0_v8_T ;
  logic [31:0] nvdla_bdma_cfg_src_addr_high_0_v8_R ;
  logic [31:0] nvdla_bdma_cfg_src_addr_high_0_v8_C ;
  logic [31:0] nvdla_bdma_cfg_src_addr_high_0_v8_X ;
  logic [13:0] nvdla_bdma_cfg_src_addr_high_0_v8_S ;
  logic [26:0] nvdla_bdma_cfg_src_addr_low_0_v32;
  logic [26:0] nvdla_bdma_cfg_src_addr_low_0_v32_T ;
  logic [26:0] nvdla_bdma_cfg_src_addr_low_0_v32_R ;
  logic [26:0] nvdla_bdma_cfg_src_addr_low_0_v32_C ;
  logic [26:0] nvdla_bdma_cfg_src_addr_low_0_v32_X ;
  logic [13:0] nvdla_bdma_cfg_src_addr_low_0_v32_S ;
  logic [26:0] nvdla_bdma_cfg_src_line_0_stride;
  logic [26:0] nvdla_bdma_cfg_src_line_0_stride_T ;
  logic [26:0] nvdla_bdma_cfg_src_line_0_stride_R ;
  logic [26:0] nvdla_bdma_cfg_src_line_0_stride_C ;
  logic [26:0] nvdla_bdma_cfg_src_line_0_stride_X ;
  logic [13:0] nvdla_bdma_cfg_src_line_0_stride_S ;
  logic [26:0] nvdla_bdma_cfg_src_surf_0_stride;
  logic [26:0] nvdla_bdma_cfg_src_surf_0_stride_T ;
  logic [26:0] nvdla_bdma_cfg_src_surf_0_stride_R ;
  logic [26:0] nvdla_bdma_cfg_src_surf_0_stride_C ;
  logic [26:0] nvdla_bdma_cfg_src_surf_0_stride_X ;
  logic [13:0] nvdla_bdma_cfg_src_surf_0_stride_S ;
  logic nvdla_bdma_cfg_status_0_stall_count_en;
  logic nvdla_bdma_cfg_status_0_stall_count_en_T ;
  logic nvdla_bdma_cfg_status_0_stall_count_en_R ;
  logic nvdla_bdma_cfg_status_0_stall_count_en_C ;
  logic nvdla_bdma_cfg_status_0_stall_count_en_X ;
  logic [13:0] nvdla_bdma_cfg_status_0_stall_count_en_S ;
  logic [23:0] nvdla_bdma_cfg_surf_repeat_0_number;
  logic [23:0] nvdla_bdma_cfg_surf_repeat_0_number_T ;
  logic [23:0] nvdla_bdma_cfg_surf_repeat_0_number_R ;
  logic [23:0] nvdla_bdma_cfg_surf_repeat_0_number_C ;
  logic [23:0] nvdla_bdma_cfg_surf_repeat_0_number_X ;
  logic [13:0] nvdla_bdma_cfg_surf_repeat_0_number_S ;
  logic [7:0] nvdla_bdma_status_0_free_slot;
  logic [7:0] nvdla_bdma_status_0_free_slot_T ;
  logic [7:0] nvdla_bdma_status_0_free_slot_R ;
  logic [7:0] nvdla_bdma_status_0_free_slot_C ;
  logic [7:0] nvdla_bdma_status_0_free_slot_X ;
  logic [13:0] nvdla_bdma_status_0_free_slot_S ;
  logic nvdla_bdma_status_0_grp0_busy;
  logic nvdla_bdma_status_0_grp0_busy_T ;
  logic nvdla_bdma_status_0_grp0_busy_R ;
  logic nvdla_bdma_status_0_grp0_busy_C ;
  logic nvdla_bdma_status_0_grp0_busy_X ;
  logic [13:0] nvdla_bdma_status_0_grp0_busy_S ;
  logic nvdla_bdma_status_0_grp1_busy;
  logic nvdla_bdma_status_0_grp1_busy_T ;
  logic nvdla_bdma_status_0_grp1_busy_R ;
  logic nvdla_bdma_status_0_grp1_busy_C ;
  logic nvdla_bdma_status_0_grp1_busy_X ;
  logic [13:0] nvdla_bdma_status_0_grp1_busy_S ;
  logic nvdla_bdma_status_0_idle;
  logic nvdla_bdma_status_0_idle_T ;
  logic nvdla_bdma_status_0_idle_R ;
  logic nvdla_bdma_status_0_idle_C ;
  logic nvdla_bdma_status_0_idle_X ;
  logic [13:0] nvdla_bdma_status_0_idle_S ;
  logic [31:0] nvdla_bdma_status_grp0_read_stall_0_count;
  logic [31:0] nvdla_bdma_status_grp0_read_stall_0_count_T ;
  logic [31:0] nvdla_bdma_status_grp0_read_stall_0_count_R ;
  logic [31:0] nvdla_bdma_status_grp0_read_stall_0_count_C ;
  logic [31:0] nvdla_bdma_status_grp0_read_stall_0_count_X ;
  logic [13:0] nvdla_bdma_status_grp0_read_stall_0_count_S ;
  logic [31:0] nvdla_bdma_status_grp0_write_stall_0_count;
  logic [31:0] nvdla_bdma_status_grp0_write_stall_0_count_T ;
  logic [31:0] nvdla_bdma_status_grp0_write_stall_0_count_R ;
  logic [31:0] nvdla_bdma_status_grp0_write_stall_0_count_C ;
  logic [31:0] nvdla_bdma_status_grp0_write_stall_0_count_X ;
  logic [13:0] nvdla_bdma_status_grp0_write_stall_0_count_S ;
  logic [31:0] nvdla_bdma_status_grp1_read_stall_0_count;
  logic [31:0] nvdla_bdma_status_grp1_read_stall_0_count_T ;
  logic [31:0] nvdla_bdma_status_grp1_read_stall_0_count_R ;
  logic [31:0] nvdla_bdma_status_grp1_read_stall_0_count_C ;
  logic [31:0] nvdla_bdma_status_grp1_read_stall_0_count_X ;
  logic [13:0] nvdla_bdma_status_grp1_read_stall_0_count_S ;
  logic [31:0] nvdla_bdma_status_grp1_write_stall_0_count;
  logic [31:0] nvdla_bdma_status_grp1_write_stall_0_count_T ;
  logic [31:0] nvdla_bdma_status_grp1_write_stall_0_count_R ;
  logic [31:0] nvdla_bdma_status_grp1_write_stall_0_count_C ;
  logic [31:0] nvdla_bdma_status_grp1_write_stall_0_count_X ;
  logic [13:0] nvdla_bdma_status_grp1_write_stall_0_count_S ;
  input nvdla_core_clk;
  input nvdla_core_clk_T ;
  input [13:0] nvdla_core_clk_S ;
  output nvdla_core_clk_R ;
  output nvdla_core_clk_X ;
  output nvdla_core_clk_C ;
  input nvdla_core_rstn;
  input nvdla_core_rstn_T ;
  input [13:0] nvdla_core_rstn_S ;
  output nvdla_core_rstn_R ;
  output nvdla_core_rstn_X ;
  output nvdla_core_rstn_C ;
  logic op_en_trigger;
  logic  op_en_trigger_T ;
  logic  op_en_trigger_PREV_VAL1 ;
  logic  op_en_trigger_PREV_VAL2 ;
  logic  op_en_trigger_R ;
  logic  op_en_trigger_X ;
  logic  op_en_trigger_C ;
  logic [13:0] op_en_trigger_S ;
  logic op_en_trigger_t_flag ;
  logic op_en_trigger_r_flag ;
  assign op_en_trigger_S = 855 ;
  input [31:0] pwrbus_ram_pd;
  input [31:0] pwrbus_ram_pd_T ;
  input [13:0] pwrbus_ram_pd_S ;
  output [31:0] pwrbus_ram_pd_R ;
  output [31:0] pwrbus_ram_pd_X ;
  output [31:0] pwrbus_ram_pd_C ;
  output reg2dp_cmd_dst_ram_type;
  logic reg2dp_cmd_dst_ram_type ;
  output reg2dp_cmd_dst_ram_type_T ;
  logic reg2dp_cmd_dst_ram_type_T ;
  logic reg2dp_cmd_dst_ram_type_R ;
  logic reg2dp_cmd_dst_ram_type_C ;
  logic reg2dp_cmd_dst_ram_type_X ;
  logic [13:0] reg2dp_cmd_dst_ram_type_S ;
  input reg2dp_cmd_dst_ram_type_R0 ;
  input reg2dp_cmd_dst_ram_type_C0 ;
  input reg2dp_cmd_dst_ram_type_X0 ;
  output [13:0] reg2dp_cmd_dst_ram_type_S ;
  output reg2dp_cmd_interrupt;
  logic reg2dp_cmd_interrupt ;
  output reg2dp_cmd_interrupt_T ;
  logic reg2dp_cmd_interrupt_T ;
  logic reg2dp_cmd_interrupt_R ;
  logic reg2dp_cmd_interrupt_C ;
  logic reg2dp_cmd_interrupt_X ;
  logic [13:0] reg2dp_cmd_interrupt_S ;
  input reg2dp_cmd_interrupt_R0 ;
  input reg2dp_cmd_interrupt_C0 ;
  input reg2dp_cmd_interrupt_X0 ;
  output [13:0] reg2dp_cmd_interrupt_S ;
  output reg2dp_cmd_interrupt_ptr;
  logic reg2dp_cmd_interrupt_ptr ;
  output reg2dp_cmd_interrupt_ptr_T ;
  logic reg2dp_cmd_interrupt_ptr_T ;
  logic reg2dp_cmd_interrupt_ptr_R ;
  logic reg2dp_cmd_interrupt_ptr_C ;
  logic reg2dp_cmd_interrupt_ptr_X ;
  logic [13:0] reg2dp_cmd_interrupt_ptr_S ;
  input reg2dp_cmd_interrupt_ptr_R0 ;
  input reg2dp_cmd_interrupt_ptr_C0 ;
  input reg2dp_cmd_interrupt_ptr_X0 ;
  output [13:0] reg2dp_cmd_interrupt_ptr_S ;
  output reg2dp_cmd_src_ram_type;
  logic reg2dp_cmd_src_ram_type ;
  output reg2dp_cmd_src_ram_type_T ;
  logic reg2dp_cmd_src_ram_type_T ;
  logic reg2dp_cmd_src_ram_type_R ;
  logic reg2dp_cmd_src_ram_type_C ;
  logic reg2dp_cmd_src_ram_type_X ;
  logic [13:0] reg2dp_cmd_src_ram_type_S ;
  input reg2dp_cmd_src_ram_type_R0 ;
  input reg2dp_cmd_src_ram_type_C0 ;
  input reg2dp_cmd_src_ram_type_X0 ;
  output [13:0] reg2dp_cmd_src_ram_type_S ;
  output [31:0] reg2dp_dst_addr_high_v8;
  logic [31:0] reg2dp_dst_addr_high_v8 ;
  output [31:0] reg2dp_dst_addr_high_v8_T ;
  logic [31:0] reg2dp_dst_addr_high_v8_T ;
  logic [31:0] reg2dp_dst_addr_high_v8_R ;
  logic [31:0] reg2dp_dst_addr_high_v8_C ;
  logic [31:0] reg2dp_dst_addr_high_v8_X ;
  logic [13:0] reg2dp_dst_addr_high_v8_S ;
  input [31:0] reg2dp_dst_addr_high_v8_R0 ;
  input [31:0] reg2dp_dst_addr_high_v8_C0 ;
  input [31:0] reg2dp_dst_addr_high_v8_X0 ;
  output [13:0] reg2dp_dst_addr_high_v8_S ;
  output [26:0] reg2dp_dst_addr_low_v32;
  logic [26:0] reg2dp_dst_addr_low_v32 ;
  output [26:0] reg2dp_dst_addr_low_v32_T ;
  logic [26:0] reg2dp_dst_addr_low_v32_T ;
  logic [26:0] reg2dp_dst_addr_low_v32_R ;
  logic [26:0] reg2dp_dst_addr_low_v32_C ;
  logic [26:0] reg2dp_dst_addr_low_v32_X ;
  logic [13:0] reg2dp_dst_addr_low_v32_S ;
  input [26:0] reg2dp_dst_addr_low_v32_R0 ;
  input [26:0] reg2dp_dst_addr_low_v32_C0 ;
  input [26:0] reg2dp_dst_addr_low_v32_X0 ;
  output [13:0] reg2dp_dst_addr_low_v32_S ;
  output [26:0] reg2dp_dst_line_stride;
  logic [26:0] reg2dp_dst_line_stride ;
  output [26:0] reg2dp_dst_line_stride_T ;
  logic [26:0] reg2dp_dst_line_stride_T ;
  logic [26:0] reg2dp_dst_line_stride_R ;
  logic [26:0] reg2dp_dst_line_stride_C ;
  logic [26:0] reg2dp_dst_line_stride_X ;
  logic [13:0] reg2dp_dst_line_stride_S ;
  input [26:0] reg2dp_dst_line_stride_R0 ;
  input [26:0] reg2dp_dst_line_stride_C0 ;
  input [26:0] reg2dp_dst_line_stride_X0 ;
  output [13:0] reg2dp_dst_line_stride_S ;
  output [26:0] reg2dp_dst_surf_stride;
  logic [26:0] reg2dp_dst_surf_stride ;
  output [26:0] reg2dp_dst_surf_stride_T ;
  logic [26:0] reg2dp_dst_surf_stride_T ;
  logic [26:0] reg2dp_dst_surf_stride_R ;
  logic [26:0] reg2dp_dst_surf_stride_C ;
  logic [26:0] reg2dp_dst_surf_stride_X ;
  logic [13:0] reg2dp_dst_surf_stride_S ;
  input [26:0] reg2dp_dst_surf_stride_R0 ;
  input [26:0] reg2dp_dst_surf_stride_C0 ;
  input [26:0] reg2dp_dst_surf_stride_X0 ;
  output [13:0] reg2dp_dst_surf_stride_S ;
  output [23:0] reg2dp_line_repeat_number;
  logic [23:0] reg2dp_line_repeat_number ;
  output [23:0] reg2dp_line_repeat_number_T ;
  logic [23:0] reg2dp_line_repeat_number_T ;
  logic [23:0] reg2dp_line_repeat_number_R ;
  logic [23:0] reg2dp_line_repeat_number_C ;
  logic [23:0] reg2dp_line_repeat_number_X ;
  logic [13:0] reg2dp_line_repeat_number_S ;
  input [23:0] reg2dp_line_repeat_number_R0 ;
  input [23:0] reg2dp_line_repeat_number_C0 ;
  input [23:0] reg2dp_line_repeat_number_X0 ;
  output [13:0] reg2dp_line_repeat_number_S ;
  output [12:0] reg2dp_line_size;
  logic [12:0] reg2dp_line_size ;
  output [12:0] reg2dp_line_size_T ;
  logic [12:0] reg2dp_line_size_T ;
  logic [12:0] reg2dp_line_size_R ;
  logic [12:0] reg2dp_line_size_C ;
  logic [12:0] reg2dp_line_size_X ;
  logic [13:0] reg2dp_line_size_S ;
  input [12:0] reg2dp_line_size_R0 ;
  input [12:0] reg2dp_line_size_C0 ;
  input [12:0] reg2dp_line_size_X0 ;
  output [13:0] reg2dp_line_size_S ;
  output [31:0] reg2dp_src_addr_high_v8;
  logic [31:0] reg2dp_src_addr_high_v8 ;
  output [31:0] reg2dp_src_addr_high_v8_T ;
  logic [31:0] reg2dp_src_addr_high_v8_T ;
  logic [31:0] reg2dp_src_addr_high_v8_R ;
  logic [31:0] reg2dp_src_addr_high_v8_C ;
  logic [31:0] reg2dp_src_addr_high_v8_X ;
  logic [13:0] reg2dp_src_addr_high_v8_S ;
  input [31:0] reg2dp_src_addr_high_v8_R0 ;
  input [31:0] reg2dp_src_addr_high_v8_C0 ;
  input [31:0] reg2dp_src_addr_high_v8_X0 ;
  output [13:0] reg2dp_src_addr_high_v8_S ;
  output [26:0] reg2dp_src_addr_low_v32;
  logic [26:0] reg2dp_src_addr_low_v32 ;
  output [26:0] reg2dp_src_addr_low_v32_T ;
  logic [26:0] reg2dp_src_addr_low_v32_T ;
  logic [26:0] reg2dp_src_addr_low_v32_R ;
  logic [26:0] reg2dp_src_addr_low_v32_C ;
  logic [26:0] reg2dp_src_addr_low_v32_X ;
  logic [13:0] reg2dp_src_addr_low_v32_S ;
  input [26:0] reg2dp_src_addr_low_v32_R0 ;
  input [26:0] reg2dp_src_addr_low_v32_C0 ;
  input [26:0] reg2dp_src_addr_low_v32_X0 ;
  output [13:0] reg2dp_src_addr_low_v32_S ;
  output [26:0] reg2dp_src_line_stride;
  logic [26:0] reg2dp_src_line_stride ;
  output [26:0] reg2dp_src_line_stride_T ;
  logic [26:0] reg2dp_src_line_stride_T ;
  logic [26:0] reg2dp_src_line_stride_R ;
  logic [26:0] reg2dp_src_line_stride_C ;
  logic [26:0] reg2dp_src_line_stride_X ;
  logic [13:0] reg2dp_src_line_stride_S ;
  input [26:0] reg2dp_src_line_stride_R0 ;
  input [26:0] reg2dp_src_line_stride_C0 ;
  input [26:0] reg2dp_src_line_stride_X0 ;
  output [13:0] reg2dp_src_line_stride_S ;
  output [26:0] reg2dp_src_surf_stride;
  logic [26:0] reg2dp_src_surf_stride ;
  output [26:0] reg2dp_src_surf_stride_T ;
  logic [26:0] reg2dp_src_surf_stride_T ;
  logic [26:0] reg2dp_src_surf_stride_R ;
  logic [26:0] reg2dp_src_surf_stride_C ;
  logic [26:0] reg2dp_src_surf_stride_X ;
  logic [13:0] reg2dp_src_surf_stride_S ;
  input [26:0] reg2dp_src_surf_stride_R0 ;
  input [26:0] reg2dp_src_surf_stride_C0 ;
  input [26:0] reg2dp_src_surf_stride_X0 ;
  output [13:0] reg2dp_src_surf_stride_S ;
  output [23:0] reg2dp_surf_repeat_number;
  logic [23:0] reg2dp_surf_repeat_number ;
  output [23:0] reg2dp_surf_repeat_number_T ;
  logic [23:0] reg2dp_surf_repeat_number_T ;
  logic [23:0] reg2dp_surf_repeat_number_R ;
  logic [23:0] reg2dp_surf_repeat_number_C ;
  logic [23:0] reg2dp_surf_repeat_number_X ;
  logic [13:0] reg2dp_surf_repeat_number_S ;
  input [23:0] reg2dp_surf_repeat_number_R0 ;
  input [23:0] reg2dp_surf_repeat_number_C0 ;
  input [23:0] reg2dp_surf_repeat_number_X0 ;
  output [13:0] reg2dp_surf_repeat_number_S ;
  logic [11:0] reg_offset;
  logic [11:0] reg_offset_T ;
  logic [11:0] reg_offset_R ;
  logic [11:0] reg_offset_C ;
  logic [11:0] reg_offset_X ;
  logic [13:0] reg_offset_S ;
  logic [31:0] reg_rd_data;
  logic [31:0] reg_rd_data_T ;
  logic [31:0] reg_rd_data_R ;
  logic [31:0] reg_rd_data_C ;
  logic [31:0] reg_rd_data_X ;
  logic [13:0] reg_rd_data_S ;
  logic [31:0] reg_wr_data;
  logic [31:0] reg_wr_data_T ;
  logic [31:0] reg_wr_data_R ;
  logic [31:0] reg_wr_data_C ;
  logic [31:0] reg_wr_data_X ;
  logic [13:0] reg_wr_data_S ;
  logic reg_wr_en;
  logic reg_wr_en_T ;
  logic reg_wr_en_R ;
  logic reg_wr_en_C ;
  logic reg_wr_en_X ;
  logic [13:0] reg_wr_en_S ;
  logic [21:0] req_addr;
  logic [21:0] req_addr_T ;
  logic [21:0] req_addr_R ;
  logic [21:0] req_addr_C ;
  logic [21:0] req_addr_X ;
  logic [13:0] req_addr_S ;
  logic [1:0] req_level_NC;
  logic [1:0] req_level_NC_T ;
  logic [1:0] req_level_NC_R ;
  logic [1:0] req_level_NC_C ;
  logic [1:0] req_level_NC_X ;
  logic [13:0] req_level_NC_S ;
  logic req_nposted;
  logic req_nposted_T ;
  logic req_nposted_R ;
  logic req_nposted_C ;
  logic req_nposted_X ;
  logic [13:0] req_nposted_S ;
  logic [62:0] req_pd;
  logic [62:0]  req_pd_T ;
  logic [62:0]  req_pd_PREV_VAL1 ;
  logic [62:0]  req_pd_PREV_VAL2 ;
  logic [62:0]  req_pd_R ;
  logic [62:0]  req_pd_X ;
  logic [62:0]  req_pd_C ;
  logic [13:0] req_pd_S ;
  logic req_pd_t_flag ;
  logic req_pd_r_flag ;
  assign req_pd_S = 856 ;
  logic req_srcpriv_NC;
  logic req_srcpriv_NC_T ;
  logic req_srcpriv_NC_R ;
  logic req_srcpriv_NC_C ;
  logic req_srcpriv_NC_X ;
  logic [13:0] req_srcpriv_NC_S ;
  logic req_vld;
  logic  req_vld_T ;
  logic  req_vld_PREV_VAL1 ;
  logic  req_vld_PREV_VAL2 ;
  logic  req_vld_R ;
  logic  req_vld_X ;
  logic  req_vld_C ;
  logic [13:0] req_vld_S ;
  logic req_vld_t_flag ;
  logic req_vld_r_flag ;
  assign req_vld_S = 857 ;
  logic [31:0] req_wdat;
  logic [31:0] req_wdat_T ;
  logic [31:0] req_wdat_R ;
  logic [31:0] req_wdat_C ;
  logic [31:0] req_wdat_X ;
  logic [13:0] req_wdat_S ;
  logic [3:0] req_wrbe_NC;
  logic [3:0] req_wrbe_NC_T ;
  logic [3:0] req_wrbe_NC_R ;
  logic [3:0] req_wrbe_NC_C ;
  logic [3:0] req_wrbe_NC_X ;
  logic [13:0] req_wrbe_NC_S ;
  logic req_write;
  logic req_write_T ;
  logic req_write_R ;
  logic req_write_C ;
  logic req_write_X ;
  logic [13:0] req_write_S ;
  logic [32:0] rsp_pd;
  logic [32:0] rsp_pd_T ;
  logic [32:0] rsp_pd_R ;
  logic [32:0] rsp_pd_C ;
  logic [32:0] rsp_pd_X ;
  logic [13:0] rsp_pd_S ;
  logic rsp_rd_error;
  logic rsp_rd_error_T ;
  logic rsp_rd_error_R ;
  logic rsp_rd_error_C ;
  logic rsp_rd_error_X ;
  logic [13:0] rsp_rd_error_S ;
  logic [16:0] rsp_rd_pd;
  logic [16:0] rsp_rd_pd_T ;
  logic [16:0] rsp_rd_pd_R ;
  logic [16:0] rsp_rd_pd_C ;
  logic [16:0] rsp_rd_pd_X ;
  logic [13:0] rsp_rd_pd_S ;
  logic [16:0] rsp_rd_rdat;
  logic [16:0] rsp_rd_rdat_T ;
  logic [16:0] rsp_rd_rdat_R ;
  logic [16:0] rsp_rd_rdat_C ;
  logic [16:0] rsp_rd_rdat_X ;
  logic [13:0] rsp_rd_rdat_S ;
  logic rsp_rd_vld;
  logic rsp_rd_vld_T ;
  logic rsp_rd_vld_R ;
  logic rsp_rd_vld_C ;
  logic rsp_rd_vld_X ;
  logic [13:0] rsp_rd_vld_S ;
  logic rsp_vld;
  logic rsp_vld_T ;
  logic rsp_vld_R ;
  logic rsp_vld_C ;
  logic rsp_vld_X ;
  logic [13:0] rsp_vld_S ;
  logic rsp_wr_error;
  logic rsp_wr_error_T ;
  logic rsp_wr_error_R ;
  logic rsp_wr_error_C ;
  logic rsp_wr_error_X ;
  logic [13:0] rsp_wr_error_S ;
  logic [32:0] rsp_wr_pd;
  logic [32:0] rsp_wr_pd_T ;
  logic [32:0] rsp_wr_pd_R ;
  logic [32:0] rsp_wr_pd_C ;
  logic [32:0] rsp_wr_pd_X ;
  logic [13:0] rsp_wr_pd_S ;
  logic [31:0] rsp_wr_rdat;
  logic [31:0] rsp_wr_rdat_T ;
  logic [31:0] rsp_wr_rdat_R ;
  logic [31:0] rsp_wr_rdat_C ;
  logic [31:0] rsp_wr_rdat_X ;
  logic [13:0] rsp_wr_rdat_S ;
  logic rsp_wr_vld;
  logic rsp_wr_vld_T ;
  logic rsp_wr_vld_R ;
  logic rsp_wr_vld_C ;
  logic rsp_wr_vld_X ;
  logic [13:0] rsp_wr_vld_S ;
  logic slcg_en;
  logic  slcg_en_T ;
  logic  slcg_en_PREV_VAL1 ;
  logic  slcg_en_PREV_VAL2 ;
  logic  slcg_en_R ;
  logic  slcg_en_X ;
  logic  slcg_en_C ;
  logic [13:0] slcg_en_S ;
  logic slcg_en_t_flag ;
  logic slcg_en_r_flag ;
  assign slcg_en_S = 858 ;
  input st2csb_grp0_done;
  input st2csb_grp0_done_T ;
  input [13:0] st2csb_grp0_done_S ;
  output st2csb_grp0_done_R ;
  output st2csb_grp0_done_X ;
  output st2csb_grp0_done_C ;
  input st2csb_grp1_done;
  input st2csb_grp1_done_T ;
  input [13:0] st2csb_grp1_done_S ;
  output st2csb_grp1_done_R ;
  output st2csb_grp1_done_X ;
  output st2csb_grp1_done_C ;
  input st2csb_idle;
  input st2csb_idle_T ;
  input [13:0] st2csb_idle_S ;
  output st2csb_idle_R ;
  output st2csb_idle_X ;
  output st2csb_idle_C ;
  logic status_grp0_busy;
  logic  status_grp0_busy_T ;
  logic  status_grp0_busy_PREV_VAL1 ;
  logic  status_grp0_busy_PREV_VAL2 ;
  logic  status_grp0_busy_R ;
  logic  status_grp0_busy_X ;
  logic  status_grp0_busy_C ;
  logic [13:0] status_grp0_busy_S ;
  logic status_grp0_busy_t_flag ;
  logic status_grp0_busy_r_flag ;
  assign status_grp0_busy_S = 859 ;
  logic status_grp0_clr;
  logic status_grp0_clr_T ;
  logic status_grp0_clr_R ;
  logic status_grp0_clr_C ;
  logic status_grp0_clr_X ;
  logic [13:0] status_grp0_clr_S ;
  logic [31:0] status_grp0_read_stall_count;
  logic [31:0]  status_grp0_read_stall_count_T ;
  logic [31:0]  status_grp0_read_stall_count_PREV_VAL1 ;
  logic [31:0]  status_grp0_read_stall_count_PREV_VAL2 ;
  logic [31:0]  status_grp0_read_stall_count_R ;
  logic [31:0]  status_grp0_read_stall_count_X ;
  logic [31:0]  status_grp0_read_stall_count_C ;
  logic [13:0] status_grp0_read_stall_count_S ;
  logic status_grp0_read_stall_count_t_flag ;
  logic status_grp0_read_stall_count_r_flag ;
  assign status_grp0_read_stall_count_S = 860 ;
  logic status_grp0_set;
  logic status_grp0_set_T ;
  logic status_grp0_set_R ;
  logic status_grp0_set_C ;
  logic status_grp0_set_X ;
  logic [13:0] status_grp0_set_S ;
  logic [31:0] status_grp0_write_stall_count;
  logic [31:0]  status_grp0_write_stall_count_T ;
  logic [31:0]  status_grp0_write_stall_count_PREV_VAL1 ;
  logic [31:0]  status_grp0_write_stall_count_PREV_VAL2 ;
  logic [31:0]  status_grp0_write_stall_count_R ;
  logic [31:0]  status_grp0_write_stall_count_X ;
  logic [31:0]  status_grp0_write_stall_count_C ;
  logic [13:0] status_grp0_write_stall_count_S ;
  logic status_grp0_write_stall_count_t_flag ;
  logic status_grp0_write_stall_count_r_flag ;
  assign status_grp0_write_stall_count_S = 861 ;
  logic status_grp1_busy;
  logic  status_grp1_busy_T ;
  logic  status_grp1_busy_PREV_VAL1 ;
  logic  status_grp1_busy_PREV_VAL2 ;
  logic  status_grp1_busy_R ;
  logic  status_grp1_busy_X ;
  logic  status_grp1_busy_C ;
  logic [13:0] status_grp1_busy_S ;
  logic status_grp1_busy_t_flag ;
  logic status_grp1_busy_r_flag ;
  assign status_grp1_busy_S = 862 ;
  logic status_grp1_clr;
  logic status_grp1_clr_T ;
  logic status_grp1_clr_R ;
  logic status_grp1_clr_C ;
  logic status_grp1_clr_X ;
  logic [13:0] status_grp1_clr_S ;
  logic [31:0] status_grp1_read_stall_count;
  logic [31:0]  status_grp1_read_stall_count_T ;
  logic [31:0]  status_grp1_read_stall_count_PREV_VAL1 ;
  logic [31:0]  status_grp1_read_stall_count_PREV_VAL2 ;
  logic [31:0]  status_grp1_read_stall_count_R ;
  logic [31:0]  status_grp1_read_stall_count_X ;
  logic [31:0]  status_grp1_read_stall_count_C ;
  logic [13:0] status_grp1_read_stall_count_S ;
  logic status_grp1_read_stall_count_t_flag ;
  logic status_grp1_read_stall_count_r_flag ;
  assign status_grp1_read_stall_count_S = 863 ;
  logic status_grp1_set;
  logic status_grp1_set_T ;
  logic status_grp1_set_R ;
  logic status_grp1_set_C ;
  logic status_grp1_set_X ;
  logic [13:0] status_grp1_set_S ;
  logic [31:0] status_grp1_write_stall_count;
  logic [31:0]  status_grp1_write_stall_count_T ;
  logic [31:0]  status_grp1_write_stall_count_PREV_VAL1 ;
  logic [31:0]  status_grp1_write_stall_count_PREV_VAL2 ;
  logic [31:0]  status_grp1_write_stall_count_R ;
  logic [31:0]  status_grp1_write_stall_count_X ;
  logic [31:0]  status_grp1_write_stall_count_C ;
  logic [13:0] status_grp1_write_stall_count_S ;
  logic status_grp1_write_stall_count_t_flag ;
  logic status_grp1_write_stall_count_r_flag ;
  assign status_grp1_write_stall_count_S = 864 ;
  logic store_idle;
  logic store_idle_T ;
  logic store_idle_R ;
  logic store_idle_C ;
  logic store_idle_X ;
  logic [13:0] store_idle_S ;
  assign _016_ = gather_count + 1'b1;
  assign _016__S = 0 ;
  logic [4:0] gather_count_C0 ;
  logic [4:0] gather_count_R0 ;
  logic [4:0] gather_count_X0 ;
  assign _016__T = gather_count_T ;
  assign gather_count_C0 = _016__C ;
  assign gather_count_R0 = _016__R ;
  assign gather_count_X0 = _016__X ;
  assign grp0_read_stall_cnt_cnt_inc = grp0_read_stall_cnt_cnt_cur + 1'b1;
  assign grp0_read_stall_cnt_cnt_inc_S = 0 ;
  logic [31:0] grp0_read_stall_cnt_cnt_cur_C0 ;
  logic [31:0] grp0_read_stall_cnt_cnt_cur_R0 ;
  logic [31:0] grp0_read_stall_cnt_cnt_cur_X0 ;
  assign grp0_read_stall_cnt_cnt_inc_T = grp0_read_stall_cnt_cnt_cur_T ;
  assign grp0_read_stall_cnt_cnt_cur_C0 = grp0_read_stall_cnt_cnt_inc_C ;
  assign grp0_read_stall_cnt_cnt_cur_R0 = grp0_read_stall_cnt_cnt_inc_R ;
  assign grp0_read_stall_cnt_cnt_cur_X0 = grp0_read_stall_cnt_cnt_inc_X ;
  assign grp1_read_stall_cnt_cnt_inc = grp1_read_stall_cnt_cnt_cur + 1'b1;
  assign grp1_read_stall_cnt_cnt_inc_S = 0 ;
  logic [31:0] grp1_read_stall_cnt_cnt_cur_C0 ;
  logic [31:0] grp1_read_stall_cnt_cnt_cur_R0 ;
  logic [31:0] grp1_read_stall_cnt_cnt_cur_X0 ;
  assign grp1_read_stall_cnt_cnt_inc_T = grp1_read_stall_cnt_cnt_cur_T ;
  assign grp1_read_stall_cnt_cnt_cur_C0 = grp1_read_stall_cnt_cnt_inc_C ;
  assign grp1_read_stall_cnt_cnt_cur_R0 = grp1_read_stall_cnt_cnt_inc_R ;
  assign grp1_read_stall_cnt_cnt_cur_X0 = grp1_read_stall_cnt_cnt_inc_X ;
  assign rsp_rd_vld = req_vld & _024_;
  assign rsp_rd_vld_S = 0 ;
  logic [0:0] req_vld_C0 ;
  logic [0:0] req_vld_R0 ;
  logic [0:0] req_vld_X0 ;
  logic [0:0] _024__C0 ;
  logic [0:0] _024__R0 ;
  logic [0:0] _024__X0 ;
  assign rsp_rd_vld_T = req_vld_T | _024__T ;
  assign req_vld_C0 = rsp_rd_vld_C ;
  assign req_vld_X0 = rsp_rd_vld_X ;
  assign _024__C0 = rsp_rd_vld_C ;
  assign _024__X0 = rsp_rd_vld_X ;
  assign req_vld_R0 = ( rsp_rd_vld_R | rsp_rd_vld_C & _024__T ) & { 1{ _024_ != 0 }} ;
  assign _024__R0 = ( rsp_rd_vld_R | rsp_rd_vld_C & req_vld_T ) & { 1{ req_vld != 0 }} ;
  logic [31:0] fangyuan0;
  logic [31:0] fangyuan0_T ;
  logic [31:0] fangyuan0_R ;
  logic [31:0] fangyuan0_C ;
  logic [31:0] fangyuan0_X ;
  assign fangyuan0 = { _021_[31:17], rsp_rd_pd };
  assign fangyuan0_T = {  _021__T [31:17] , rsp_rd_pd_T  };
  logic [13:0] fangyuan0_S ;
  assign fangyuan0_S = 0 ;
  logic [32:0] _021__R0 ;
  logic [32:0] _021__X0 ;
  logic [32:0] _021__C0 ;
  assign _021__R0 [31:17] = fangyuan0_R [31:17] ;
  assign _021__X0 [31:17] = fangyuan0_X [31:17] ;
  assign _021__C0 [31:17] = fangyuan0_C [31:17] ;
  logic [16:0] rsp_rd_pd_R0 ;
  logic [16:0] rsp_rd_pd_X0 ;
  logic [16:0] rsp_rd_pd_C0 ;
  assign rsp_rd_pd_R0 = fangyuan0_R [16:0] ;
  assign rsp_rd_pd_X0 = fangyuan0_X [16:0] ;
  assign rsp_rd_pd_C0 = fangyuan0_C [16:0] ;
  logic [31:0] fangyuan1;
  logic [31:0] fangyuan1_T ;
  logic [31:0] fangyuan1_R ;
  logic [31:0] fangyuan1_C ;
  logic [31:0] fangyuan1_X ;
  assign fangyuan1 = { rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld };
  assign fangyuan1_T = {  rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T  };
  logic [13:0] fangyuan1_S ;
  assign fangyuan1_S = 0 ;
  logic [0:0] rsp_rd_vld_R0 ;
  logic [0:0] rsp_rd_vld_X0 ;
  logic [0:0] rsp_rd_vld_C0 ;
  assign rsp_rd_vld_R0 = fangyuan1_R [31:31] ;
  assign rsp_rd_vld_X0 = fangyuan1_X [31:31] ;
  assign rsp_rd_vld_C0 = fangyuan1_C [31:31] ;
  logic [0:0] rsp_rd_vld_R1 ;
  logic [0:0] rsp_rd_vld_X1 ;
  logic [0:0] rsp_rd_vld_C1 ;
  assign rsp_rd_vld_R1 = fangyuan1_R [30:30] ;
  assign rsp_rd_vld_X1 = fangyuan1_X [30:30] ;
  assign rsp_rd_vld_C1 = fangyuan1_C [30:30] ;
  logic [0:0] rsp_rd_vld_R2 ;
  logic [0:0] rsp_rd_vld_X2 ;
  logic [0:0] rsp_rd_vld_C2 ;
  assign rsp_rd_vld_R2 = fangyuan1_R [29:29] ;
  assign rsp_rd_vld_X2 = fangyuan1_X [29:29] ;
  assign rsp_rd_vld_C2 = fangyuan1_C [29:29] ;
  logic [0:0] rsp_rd_vld_R3 ;
  logic [0:0] rsp_rd_vld_X3 ;
  logic [0:0] rsp_rd_vld_C3 ;
  assign rsp_rd_vld_R3 = fangyuan1_R [28:28] ;
  assign rsp_rd_vld_X3 = fangyuan1_X [28:28] ;
  assign rsp_rd_vld_C3 = fangyuan1_C [28:28] ;
  logic [0:0] rsp_rd_vld_R4 ;
  logic [0:0] rsp_rd_vld_X4 ;
  logic [0:0] rsp_rd_vld_C4 ;
  assign rsp_rd_vld_R4 = fangyuan1_R [27:27] ;
  assign rsp_rd_vld_X4 = fangyuan1_X [27:27] ;
  assign rsp_rd_vld_C4 = fangyuan1_C [27:27] ;
  logic [0:0] rsp_rd_vld_R5 ;
  logic [0:0] rsp_rd_vld_X5 ;
  logic [0:0] rsp_rd_vld_C5 ;
  assign rsp_rd_vld_R5 = fangyuan1_R [26:26] ;
  assign rsp_rd_vld_X5 = fangyuan1_X [26:26] ;
  assign rsp_rd_vld_C5 = fangyuan1_C [26:26] ;
  logic [0:0] rsp_rd_vld_R6 ;
  logic [0:0] rsp_rd_vld_X6 ;
  logic [0:0] rsp_rd_vld_C6 ;
  assign rsp_rd_vld_R6 = fangyuan1_R [25:25] ;
  assign rsp_rd_vld_X6 = fangyuan1_X [25:25] ;
  assign rsp_rd_vld_C6 = fangyuan1_C [25:25] ;
  logic [0:0] rsp_rd_vld_R7 ;
  logic [0:0] rsp_rd_vld_X7 ;
  logic [0:0] rsp_rd_vld_C7 ;
  assign rsp_rd_vld_R7 = fangyuan1_R [24:24] ;
  assign rsp_rd_vld_X7 = fangyuan1_X [24:24] ;
  assign rsp_rd_vld_C7 = fangyuan1_C [24:24] ;
  logic [0:0] rsp_rd_vld_R8 ;
  logic [0:0] rsp_rd_vld_X8 ;
  logic [0:0] rsp_rd_vld_C8 ;
  assign rsp_rd_vld_R8 = fangyuan1_R [23:23] ;
  assign rsp_rd_vld_X8 = fangyuan1_X [23:23] ;
  assign rsp_rd_vld_C8 = fangyuan1_C [23:23] ;
  logic [0:0] rsp_rd_vld_R9 ;
  logic [0:0] rsp_rd_vld_X9 ;
  logic [0:0] rsp_rd_vld_C9 ;
  assign rsp_rd_vld_R9 = fangyuan1_R [22:22] ;
  assign rsp_rd_vld_X9 = fangyuan1_X [22:22] ;
  assign rsp_rd_vld_C9 = fangyuan1_C [22:22] ;
  logic [0:0] rsp_rd_vld_R10 ;
  logic [0:0] rsp_rd_vld_X10 ;
  logic [0:0] rsp_rd_vld_C10 ;
  assign rsp_rd_vld_R10 = fangyuan1_R [21:21] ;
  assign rsp_rd_vld_X10 = fangyuan1_X [21:21] ;
  assign rsp_rd_vld_C10 = fangyuan1_C [21:21] ;
  logic [0:0] rsp_rd_vld_R11 ;
  logic [0:0] rsp_rd_vld_X11 ;
  logic [0:0] rsp_rd_vld_C11 ;
  assign rsp_rd_vld_R11 = fangyuan1_R [20:20] ;
  assign rsp_rd_vld_X11 = fangyuan1_X [20:20] ;
  assign rsp_rd_vld_C11 = fangyuan1_C [20:20] ;
  logic [0:0] rsp_rd_vld_R12 ;
  logic [0:0] rsp_rd_vld_X12 ;
  logic [0:0] rsp_rd_vld_C12 ;
  assign rsp_rd_vld_R12 = fangyuan1_R [19:19] ;
  assign rsp_rd_vld_X12 = fangyuan1_X [19:19] ;
  assign rsp_rd_vld_C12 = fangyuan1_C [19:19] ;
  logic [0:0] rsp_rd_vld_R13 ;
  logic [0:0] rsp_rd_vld_X13 ;
  logic [0:0] rsp_rd_vld_C13 ;
  assign rsp_rd_vld_R13 = fangyuan1_R [18:18] ;
  assign rsp_rd_vld_X13 = fangyuan1_X [18:18] ;
  assign rsp_rd_vld_C13 = fangyuan1_C [18:18] ;
  logic [0:0] rsp_rd_vld_R14 ;
  logic [0:0] rsp_rd_vld_X14 ;
  logic [0:0] rsp_rd_vld_C14 ;
  assign rsp_rd_vld_R14 = fangyuan1_R [17:17] ;
  assign rsp_rd_vld_X14 = fangyuan1_X [17:17] ;
  assign rsp_rd_vld_C14 = fangyuan1_C [17:17] ;
  logic [0:0] rsp_rd_vld_R15 ;
  logic [0:0] rsp_rd_vld_X15 ;
  logic [0:0] rsp_rd_vld_C15 ;
  assign rsp_rd_vld_R15 = fangyuan1_R [16:16] ;
  assign rsp_rd_vld_X15 = fangyuan1_X [16:16] ;
  assign rsp_rd_vld_C15 = fangyuan1_C [16:16] ;
  logic [0:0] rsp_rd_vld_R16 ;
  logic [0:0] rsp_rd_vld_X16 ;
  logic [0:0] rsp_rd_vld_C16 ;
  assign rsp_rd_vld_R16 = fangyuan1_R [15:15] ;
  assign rsp_rd_vld_X16 = fangyuan1_X [15:15] ;
  assign rsp_rd_vld_C16 = fangyuan1_C [15:15] ;
  logic [0:0] rsp_rd_vld_R17 ;
  logic [0:0] rsp_rd_vld_X17 ;
  logic [0:0] rsp_rd_vld_C17 ;
  assign rsp_rd_vld_R17 = fangyuan1_R [14:14] ;
  assign rsp_rd_vld_X17 = fangyuan1_X [14:14] ;
  assign rsp_rd_vld_C17 = fangyuan1_C [14:14] ;
  logic [0:0] rsp_rd_vld_R18 ;
  logic [0:0] rsp_rd_vld_X18 ;
  logic [0:0] rsp_rd_vld_C18 ;
  assign rsp_rd_vld_R18 = fangyuan1_R [13:13] ;
  assign rsp_rd_vld_X18 = fangyuan1_X [13:13] ;
  assign rsp_rd_vld_C18 = fangyuan1_C [13:13] ;
  logic [0:0] rsp_rd_vld_R19 ;
  logic [0:0] rsp_rd_vld_X19 ;
  logic [0:0] rsp_rd_vld_C19 ;
  assign rsp_rd_vld_R19 = fangyuan1_R [12:12] ;
  assign rsp_rd_vld_X19 = fangyuan1_X [12:12] ;
  assign rsp_rd_vld_C19 = fangyuan1_C [12:12] ;
  logic [0:0] rsp_rd_vld_R20 ;
  logic [0:0] rsp_rd_vld_X20 ;
  logic [0:0] rsp_rd_vld_C20 ;
  assign rsp_rd_vld_R20 = fangyuan1_R [11:11] ;
  assign rsp_rd_vld_X20 = fangyuan1_X [11:11] ;
  assign rsp_rd_vld_C20 = fangyuan1_C [11:11] ;
  logic [0:0] rsp_rd_vld_R21 ;
  logic [0:0] rsp_rd_vld_X21 ;
  logic [0:0] rsp_rd_vld_C21 ;
  assign rsp_rd_vld_R21 = fangyuan1_R [10:10] ;
  assign rsp_rd_vld_X21 = fangyuan1_X [10:10] ;
  assign rsp_rd_vld_C21 = fangyuan1_C [10:10] ;
  logic [0:0] rsp_rd_vld_R22 ;
  logic [0:0] rsp_rd_vld_X22 ;
  logic [0:0] rsp_rd_vld_C22 ;
  assign rsp_rd_vld_R22 = fangyuan1_R [9:9] ;
  assign rsp_rd_vld_X22 = fangyuan1_X [9:9] ;
  assign rsp_rd_vld_C22 = fangyuan1_C [9:9] ;
  logic [0:0] rsp_rd_vld_R23 ;
  logic [0:0] rsp_rd_vld_X23 ;
  logic [0:0] rsp_rd_vld_C23 ;
  assign rsp_rd_vld_R23 = fangyuan1_R [8:8] ;
  assign rsp_rd_vld_X23 = fangyuan1_X [8:8] ;
  assign rsp_rd_vld_C23 = fangyuan1_C [8:8] ;
  logic [0:0] rsp_rd_vld_R24 ;
  logic [0:0] rsp_rd_vld_X24 ;
  logic [0:0] rsp_rd_vld_C24 ;
  assign rsp_rd_vld_R24 = fangyuan1_R [7:7] ;
  assign rsp_rd_vld_X24 = fangyuan1_X [7:7] ;
  assign rsp_rd_vld_C24 = fangyuan1_C [7:7] ;
  logic [0:0] rsp_rd_vld_R25 ;
  logic [0:0] rsp_rd_vld_X25 ;
  logic [0:0] rsp_rd_vld_C25 ;
  assign rsp_rd_vld_R25 = fangyuan1_R [6:6] ;
  assign rsp_rd_vld_X25 = fangyuan1_X [6:6] ;
  assign rsp_rd_vld_C25 = fangyuan1_C [6:6] ;
  logic [0:0] rsp_rd_vld_R26 ;
  logic [0:0] rsp_rd_vld_X26 ;
  logic [0:0] rsp_rd_vld_C26 ;
  assign rsp_rd_vld_R26 = fangyuan1_R [5:5] ;
  assign rsp_rd_vld_X26 = fangyuan1_X [5:5] ;
  assign rsp_rd_vld_C26 = fangyuan1_C [5:5] ;
  logic [0:0] rsp_rd_vld_R27 ;
  logic [0:0] rsp_rd_vld_X27 ;
  logic [0:0] rsp_rd_vld_C27 ;
  assign rsp_rd_vld_R27 = fangyuan1_R [4:4] ;
  assign rsp_rd_vld_X27 = fangyuan1_X [4:4] ;
  assign rsp_rd_vld_C27 = fangyuan1_C [4:4] ;
  logic [0:0] rsp_rd_vld_R28 ;
  logic [0:0] rsp_rd_vld_X28 ;
  logic [0:0] rsp_rd_vld_C28 ;
  assign rsp_rd_vld_R28 = fangyuan1_R [3:3] ;
  assign rsp_rd_vld_X28 = fangyuan1_X [3:3] ;
  assign rsp_rd_vld_C28 = fangyuan1_C [3:3] ;
  logic [0:0] rsp_rd_vld_R29 ;
  logic [0:0] rsp_rd_vld_X29 ;
  logic [0:0] rsp_rd_vld_C29 ;
  assign rsp_rd_vld_R29 = fangyuan1_R [2:2] ;
  assign rsp_rd_vld_X29 = fangyuan1_X [2:2] ;
  assign rsp_rd_vld_C29 = fangyuan1_C [2:2] ;
  logic [0:0] rsp_rd_vld_R30 ;
  logic [0:0] rsp_rd_vld_X30 ;
  logic [0:0] rsp_rd_vld_C30 ;
  assign rsp_rd_vld_R30 = fangyuan1_R [1:1] ;
  assign rsp_rd_vld_X30 = fangyuan1_X [1:1] ;
  assign rsp_rd_vld_C30 = fangyuan1_C [1:1] ;
  logic [0:0] rsp_rd_vld_R31 ;
  logic [0:0] rsp_rd_vld_X31 ;
  logic [0:0] rsp_rd_vld_C31 ;
  assign rsp_rd_vld_R31 = fangyuan1_R [0:0] ;
  assign rsp_rd_vld_X31 = fangyuan1_X [0:0] ;
  assign rsp_rd_vld_C31 = fangyuan1_C [0:0] ;

  assign fangyuan0 = fangyuan1 & reg_rd_data;
  assign fangyuan0_S = 0 ;
  logic [31:0] fangyuan1_C0 ;
  logic [31:0] fangyuan1_R0 ;
  logic [31:0] fangyuan1_X0 ;
  logic [31:0] reg_rd_data_C0 ;
  logic [31:0] reg_rd_data_R0 ;
  logic [31:0] reg_rd_data_X0 ;
  assign fangyuan0_T = fangyuan1_T | reg_rd_data_T ;
  assign fangyuan1_C0 = fangyuan0_C ;
  assign fangyuan1_X0 = fangyuan0_X ;
  assign reg_rd_data_C0 = fangyuan0_C ;
  assign reg_rd_data_X0 = fangyuan0_X ;
  assign fangyuan1_R0 = ( fangyuan0_R | fangyuan0_C & reg_rd_data_T ) & { 32{ reg_rd_data != 0 }} ;
  assign reg_rd_data_R0 = ( fangyuan0_R | fangyuan0_C & fangyuan1_T ) & { 32{ fangyuan1 != 0 }} ;
  assign reg_wr_en = req_vld & req_pd[54];
  assign reg_wr_en_S = 0 ;
  logic [0:0] req_vld_C1 ;
  logic [0:0] req_vld_R1 ;
  logic [0:0] req_vld_X1 ;
  logic [62:0] req_pd_C0 ;
  logic [62:0] req_pd_R0 ;
  logic [62:0] req_pd_X0 ;
  assign reg_wr_en_T = req_vld_T | req_pd_T [54] ;
  assign req_vld_C1 = reg_wr_en_C ;
  assign req_vld_X1 = reg_wr_en_X ;
  assign req_pd_C0 [54] = reg_wr_en_C ;
  assign req_pd_X0 [54] = reg_wr_en_X ;
  assign req_vld_R1 = ( reg_wr_en_R | reg_wr_en_C & req_pd_T [54] ) & { 1{ req_pd[54] != 0 }} ;
  assign req_pd_R0 [54] = ( reg_wr_en_R | reg_wr_en_C & req_vld_T ) & { 1{ req_vld != 0 }} ;
  assign rsp_wr_vld = reg_wr_en & req_pd[55];
  assign rsp_wr_vld_S = 0 ;
  logic [0:0] reg_wr_en_C0 ;
  logic [0:0] reg_wr_en_R0 ;
  logic [0:0] reg_wr_en_X0 ;
  assign rsp_wr_vld_T = reg_wr_en_T | req_pd_T [55] ;
  assign reg_wr_en_C0 = rsp_wr_vld_C ;
  assign reg_wr_en_X0 = rsp_wr_vld_X ;
  assign req_pd_C0 [55] = rsp_wr_vld_C ;
  assign req_pd_X0 [55] = rsp_wr_vld_X ;
  assign reg_wr_en_R0 = ( rsp_wr_vld_R | rsp_wr_vld_C & req_pd_T [55] ) & { 1{ req_pd[55] != 0 }} ;
  assign req_pd_R0 [55] = ( rsp_wr_vld_R | rsp_wr_vld_C & reg_wr_en_T ) & { 1{ reg_wr_en != 0 }} ;
  logic [32:0] fangyuan2;
  logic [32:0] fangyuan2_T ;
  logic [32:0] fangyuan2_R ;
  logic [32:0] fangyuan2_C ;
  logic [32:0] fangyuan2_X ;
  assign fangyuan2 = { rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld, rsp_rd_vld };
  assign fangyuan2_T = {  rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T , rsp_rd_vld_T  };
  logic [13:0] fangyuan2_S ;
  assign fangyuan2_S = 0 ;
  logic [0:0] rsp_rd_vld_R32 ;
  logic [0:0] rsp_rd_vld_X32 ;
  logic [0:0] rsp_rd_vld_C32 ;
  assign rsp_rd_vld_R32 = fangyuan2_R [32:32] ;
  assign rsp_rd_vld_X32 = fangyuan2_X [32:32] ;
  assign rsp_rd_vld_C32 = fangyuan2_C [32:32] ;
  logic [0:0] rsp_rd_vld_R33 ;
  logic [0:0] rsp_rd_vld_X33 ;
  logic [0:0] rsp_rd_vld_C33 ;
  assign rsp_rd_vld_R33 = fangyuan2_R [31:31] ;
  assign rsp_rd_vld_X33 = fangyuan2_X [31:31] ;
  assign rsp_rd_vld_C33 = fangyuan2_C [31:31] ;
  logic [0:0] rsp_rd_vld_R34 ;
  logic [0:0] rsp_rd_vld_X34 ;
  logic [0:0] rsp_rd_vld_C34 ;
  assign rsp_rd_vld_R34 = fangyuan2_R [30:30] ;
  assign rsp_rd_vld_X34 = fangyuan2_X [30:30] ;
  assign rsp_rd_vld_C34 = fangyuan2_C [30:30] ;
  logic [0:0] rsp_rd_vld_R35 ;
  logic [0:0] rsp_rd_vld_X35 ;
  logic [0:0] rsp_rd_vld_C35 ;
  assign rsp_rd_vld_R35 = fangyuan2_R [29:29] ;
  assign rsp_rd_vld_X35 = fangyuan2_X [29:29] ;
  assign rsp_rd_vld_C35 = fangyuan2_C [29:29] ;
  logic [0:0] rsp_rd_vld_R36 ;
  logic [0:0] rsp_rd_vld_X36 ;
  logic [0:0] rsp_rd_vld_C36 ;
  assign rsp_rd_vld_R36 = fangyuan2_R [28:28] ;
  assign rsp_rd_vld_X36 = fangyuan2_X [28:28] ;
  assign rsp_rd_vld_C36 = fangyuan2_C [28:28] ;
  logic [0:0] rsp_rd_vld_R37 ;
  logic [0:0] rsp_rd_vld_X37 ;
  logic [0:0] rsp_rd_vld_C37 ;
  assign rsp_rd_vld_R37 = fangyuan2_R [27:27] ;
  assign rsp_rd_vld_X37 = fangyuan2_X [27:27] ;
  assign rsp_rd_vld_C37 = fangyuan2_C [27:27] ;
  logic [0:0] rsp_rd_vld_R38 ;
  logic [0:0] rsp_rd_vld_X38 ;
  logic [0:0] rsp_rd_vld_C38 ;
  assign rsp_rd_vld_R38 = fangyuan2_R [26:26] ;
  assign rsp_rd_vld_X38 = fangyuan2_X [26:26] ;
  assign rsp_rd_vld_C38 = fangyuan2_C [26:26] ;
  logic [0:0] rsp_rd_vld_R39 ;
  logic [0:0] rsp_rd_vld_X39 ;
  logic [0:0] rsp_rd_vld_C39 ;
  assign rsp_rd_vld_R39 = fangyuan2_R [25:25] ;
  assign rsp_rd_vld_X39 = fangyuan2_X [25:25] ;
  assign rsp_rd_vld_C39 = fangyuan2_C [25:25] ;
  logic [0:0] rsp_rd_vld_R40 ;
  logic [0:0] rsp_rd_vld_X40 ;
  logic [0:0] rsp_rd_vld_C40 ;
  assign rsp_rd_vld_R40 = fangyuan2_R [24:24] ;
  assign rsp_rd_vld_X40 = fangyuan2_X [24:24] ;
  assign rsp_rd_vld_C40 = fangyuan2_C [24:24] ;
  logic [0:0] rsp_rd_vld_R41 ;
  logic [0:0] rsp_rd_vld_X41 ;
  logic [0:0] rsp_rd_vld_C41 ;
  assign rsp_rd_vld_R41 = fangyuan2_R [23:23] ;
  assign rsp_rd_vld_X41 = fangyuan2_X [23:23] ;
  assign rsp_rd_vld_C41 = fangyuan2_C [23:23] ;
  logic [0:0] rsp_rd_vld_R42 ;
  logic [0:0] rsp_rd_vld_X42 ;
  logic [0:0] rsp_rd_vld_C42 ;
  assign rsp_rd_vld_R42 = fangyuan2_R [22:22] ;
  assign rsp_rd_vld_X42 = fangyuan2_X [22:22] ;
  assign rsp_rd_vld_C42 = fangyuan2_C [22:22] ;
  logic [0:0] rsp_rd_vld_R43 ;
  logic [0:0] rsp_rd_vld_X43 ;
  logic [0:0] rsp_rd_vld_C43 ;
  assign rsp_rd_vld_R43 = fangyuan2_R [21:21] ;
  assign rsp_rd_vld_X43 = fangyuan2_X [21:21] ;
  assign rsp_rd_vld_C43 = fangyuan2_C [21:21] ;
  logic [0:0] rsp_rd_vld_R44 ;
  logic [0:0] rsp_rd_vld_X44 ;
  logic [0:0] rsp_rd_vld_C44 ;
  assign rsp_rd_vld_R44 = fangyuan2_R [20:20] ;
  assign rsp_rd_vld_X44 = fangyuan2_X [20:20] ;
  assign rsp_rd_vld_C44 = fangyuan2_C [20:20] ;
  logic [0:0] rsp_rd_vld_R45 ;
  logic [0:0] rsp_rd_vld_X45 ;
  logic [0:0] rsp_rd_vld_C45 ;
  assign rsp_rd_vld_R45 = fangyuan2_R [19:19] ;
  assign rsp_rd_vld_X45 = fangyuan2_X [19:19] ;
  assign rsp_rd_vld_C45 = fangyuan2_C [19:19] ;
  logic [0:0] rsp_rd_vld_R46 ;
  logic [0:0] rsp_rd_vld_X46 ;
  logic [0:0] rsp_rd_vld_C46 ;
  assign rsp_rd_vld_R46 = fangyuan2_R [18:18] ;
  assign rsp_rd_vld_X46 = fangyuan2_X [18:18] ;
  assign rsp_rd_vld_C46 = fangyuan2_C [18:18] ;
  logic [0:0] rsp_rd_vld_R47 ;
  logic [0:0] rsp_rd_vld_X47 ;
  logic [0:0] rsp_rd_vld_C47 ;
  assign rsp_rd_vld_R47 = fangyuan2_R [17:17] ;
  assign rsp_rd_vld_X47 = fangyuan2_X [17:17] ;
  assign rsp_rd_vld_C47 = fangyuan2_C [17:17] ;
  logic [0:0] rsp_rd_vld_R48 ;
  logic [0:0] rsp_rd_vld_X48 ;
  logic [0:0] rsp_rd_vld_C48 ;
  assign rsp_rd_vld_R48 = fangyuan2_R [16:16] ;
  assign rsp_rd_vld_X48 = fangyuan2_X [16:16] ;
  assign rsp_rd_vld_C48 = fangyuan2_C [16:16] ;
  logic [0:0] rsp_rd_vld_R49 ;
  logic [0:0] rsp_rd_vld_X49 ;
  logic [0:0] rsp_rd_vld_C49 ;
  assign rsp_rd_vld_R49 = fangyuan2_R [15:15] ;
  assign rsp_rd_vld_X49 = fangyuan2_X [15:15] ;
  assign rsp_rd_vld_C49 = fangyuan2_C [15:15] ;
  logic [0:0] rsp_rd_vld_R50 ;
  logic [0:0] rsp_rd_vld_X50 ;
  logic [0:0] rsp_rd_vld_C50 ;
  assign rsp_rd_vld_R50 = fangyuan2_R [14:14] ;
  assign rsp_rd_vld_X50 = fangyuan2_X [14:14] ;
  assign rsp_rd_vld_C50 = fangyuan2_C [14:14] ;
  logic [0:0] rsp_rd_vld_R51 ;
  logic [0:0] rsp_rd_vld_X51 ;
  logic [0:0] rsp_rd_vld_C51 ;
  assign rsp_rd_vld_R51 = fangyuan2_R [13:13] ;
  assign rsp_rd_vld_X51 = fangyuan2_X [13:13] ;
  assign rsp_rd_vld_C51 = fangyuan2_C [13:13] ;
  logic [0:0] rsp_rd_vld_R52 ;
  logic [0:0] rsp_rd_vld_X52 ;
  logic [0:0] rsp_rd_vld_C52 ;
  assign rsp_rd_vld_R52 = fangyuan2_R [12:12] ;
  assign rsp_rd_vld_X52 = fangyuan2_X [12:12] ;
  assign rsp_rd_vld_C52 = fangyuan2_C [12:12] ;
  logic [0:0] rsp_rd_vld_R53 ;
  logic [0:0] rsp_rd_vld_X53 ;
  logic [0:0] rsp_rd_vld_C53 ;
  assign rsp_rd_vld_R53 = fangyuan2_R [11:11] ;
  assign rsp_rd_vld_X53 = fangyuan2_X [11:11] ;
  assign rsp_rd_vld_C53 = fangyuan2_C [11:11] ;
  logic [0:0] rsp_rd_vld_R54 ;
  logic [0:0] rsp_rd_vld_X54 ;
  logic [0:0] rsp_rd_vld_C54 ;
  assign rsp_rd_vld_R54 = fangyuan2_R [10:10] ;
  assign rsp_rd_vld_X54 = fangyuan2_X [10:10] ;
  assign rsp_rd_vld_C54 = fangyuan2_C [10:10] ;
  logic [0:0] rsp_rd_vld_R55 ;
  logic [0:0] rsp_rd_vld_X55 ;
  logic [0:0] rsp_rd_vld_C55 ;
  assign rsp_rd_vld_R55 = fangyuan2_R [9:9] ;
  assign rsp_rd_vld_X55 = fangyuan2_X [9:9] ;
  assign rsp_rd_vld_C55 = fangyuan2_C [9:9] ;
  logic [0:0] rsp_rd_vld_R56 ;
  logic [0:0] rsp_rd_vld_X56 ;
  logic [0:0] rsp_rd_vld_C56 ;
  assign rsp_rd_vld_R56 = fangyuan2_R [8:8] ;
  assign rsp_rd_vld_X56 = fangyuan2_X [8:8] ;
  assign rsp_rd_vld_C56 = fangyuan2_C [8:8] ;
  logic [0:0] rsp_rd_vld_R57 ;
  logic [0:0] rsp_rd_vld_X57 ;
  logic [0:0] rsp_rd_vld_C57 ;
  assign rsp_rd_vld_R57 = fangyuan2_R [7:7] ;
  assign rsp_rd_vld_X57 = fangyuan2_X [7:7] ;
  assign rsp_rd_vld_C57 = fangyuan2_C [7:7] ;
  logic [0:0] rsp_rd_vld_R58 ;
  logic [0:0] rsp_rd_vld_X58 ;
  logic [0:0] rsp_rd_vld_C58 ;
  assign rsp_rd_vld_R58 = fangyuan2_R [6:6] ;
  assign rsp_rd_vld_X58 = fangyuan2_X [6:6] ;
  assign rsp_rd_vld_C58 = fangyuan2_C [6:6] ;
  logic [0:0] rsp_rd_vld_R59 ;
  logic [0:0] rsp_rd_vld_X59 ;
  logic [0:0] rsp_rd_vld_C59 ;
  assign rsp_rd_vld_R59 = fangyuan2_R [5:5] ;
  assign rsp_rd_vld_X59 = fangyuan2_X [5:5] ;
  assign rsp_rd_vld_C59 = fangyuan2_C [5:5] ;
  logic [0:0] rsp_rd_vld_R60 ;
  logic [0:0] rsp_rd_vld_X60 ;
  logic [0:0] rsp_rd_vld_C60 ;
  assign rsp_rd_vld_R60 = fangyuan2_R [4:4] ;
  assign rsp_rd_vld_X60 = fangyuan2_X [4:4] ;
  assign rsp_rd_vld_C60 = fangyuan2_C [4:4] ;
  logic [0:0] rsp_rd_vld_R61 ;
  logic [0:0] rsp_rd_vld_X61 ;
  logic [0:0] rsp_rd_vld_C61 ;
  assign rsp_rd_vld_R61 = fangyuan2_R [3:3] ;
  assign rsp_rd_vld_X61 = fangyuan2_X [3:3] ;
  assign rsp_rd_vld_C61 = fangyuan2_C [3:3] ;
  logic [0:0] rsp_rd_vld_R62 ;
  logic [0:0] rsp_rd_vld_X62 ;
  logic [0:0] rsp_rd_vld_C62 ;
  assign rsp_rd_vld_R62 = fangyuan2_R [2:2] ;
  assign rsp_rd_vld_X62 = fangyuan2_X [2:2] ;
  assign rsp_rd_vld_C62 = fangyuan2_C [2:2] ;
  logic [0:0] rsp_rd_vld_R63 ;
  logic [0:0] rsp_rd_vld_X63 ;
  logic [0:0] rsp_rd_vld_C63 ;
  assign rsp_rd_vld_R63 = fangyuan2_R [1:1] ;
  assign rsp_rd_vld_X63 = fangyuan2_X [1:1] ;
  assign rsp_rd_vld_C63 = fangyuan2_C [1:1] ;
  logic [0:0] rsp_rd_vld_R64 ;
  logic [0:0] rsp_rd_vld_X64 ;
  logic [0:0] rsp_rd_vld_C64 ;
  assign rsp_rd_vld_R64 = fangyuan2_R [0:0] ;
  assign rsp_rd_vld_X64 = fangyuan2_X [0:0] ;
  assign rsp_rd_vld_C64 = fangyuan2_C [0:0] ;
  logic [31:0] fangyuan3;
  logic [31:0] fangyuan3_T ;
  logic [31:0] fangyuan3_R ;
  logic [31:0] fangyuan3_C ;
  logic [31:0] fangyuan3_X ;
  assign fangyuan3 = { _021_[31:17], rsp_rd_pd };
  assign fangyuan3_T = {  _021__T [31:17] , rsp_rd_pd_T  };
  logic [13:0] fangyuan3_S ;
  assign fangyuan3_S = 0 ;
  assign { _021__R0 [0], _021__R0 [1], _021__R0 [2], _021__R0 [3], _021__R0 [4], _021__R0 [5], _021__R0 [6], _021__R0 [7], _021__R0 [8], _021__R0 [9], _021__R0 [10], _021__R0 [11], _021__R0 [12], _021__R0 [13], _021__R0 [14], _021__R0 [15], _021__R0 [16], _021__R0 [32:32] } = 0;
  assign { _021__X0 [0], _021__X0 [1], _021__X0 [2], _021__X0 [3], _021__X0 [4], _021__X0 [5], _021__X0 [6], _021__X0 [7], _021__X0 [8], _021__X0 [9], _021__X0 [10], _021__X0 [11], _021__X0 [12], _021__X0 [13], _021__X0 [14], _021__X0 [15], _021__X0 [16], _021__X0 [32:32] } = 0;
  assign { _021__C0 [0], _021__C0 [1], _021__C0 [2], _021__C0 [3], _021__C0 [4], _021__C0 [5], _021__C0 [6], _021__C0 [7], _021__C0 [8], _021__C0 [9], _021__C0 [10], _021__C0 [11], _021__C0 [12], _021__C0 [13], _021__C0 [14], _021__C0 [15], _021__C0 [16], _021__C0 [32:32] } = 0;
  logic [32:0] _021__R1 ;
  logic [32:0] _021__X1 ;
  logic [32:0] _021__C1 ;
  assign _021__R1 [31:17] = fangyuan3_R [31:17] ;
  assign _021__X1 [31:17] = fangyuan3_X [31:17] ;
  assign _021__C1 [31:17] = fangyuan3_C [31:17] ;
  logic [16:0] rsp_rd_pd_R1 ;
  logic [16:0] rsp_rd_pd_X1 ;
  logic [16:0] rsp_rd_pd_C1 ;
  assign rsp_rd_pd_R1 = fangyuan3_R [16:0] ;
  assign rsp_rd_pd_X1 = fangyuan3_X [16:0] ;
  assign rsp_rd_pd_C1 = fangyuan3_C [16:0] ;

  assign _017_ = fangyuan2 & fangyuan3;
  assign _017__S = 0 ;
  logic [32:0] fangyuan2_C0 ;
  logic [32:0] fangyuan2_R0 ;
  logic [32:0] fangyuan2_X0 ;
  logic [31:0] fangyuan3_C0 ;
  logic [31:0] fangyuan3_R0 ;
  logic [31:0] fangyuan3_X0 ;
  assign _017__T = fangyuan2_T | fangyuan3_T ;
  assign fangyuan2_C0 = _017__C ;
  assign fangyuan2_X0 = _017__X ;
  assign fangyuan3_C0 = _017__C ;
  assign fangyuan3_X0 = _017__X ;
  assign fangyuan2_R0 = ( _017__R | _017__C & fangyuan3_T ) & { 32{ fangyuan3 != 0 }} ;
  assign fangyuan3_R0 = ( _017__R | _017__C & fangyuan2_T ) & { 33{ fangyuan2 != 0 }} ;
  logic [32:0] fangyuan4;
  logic [32:0] fangyuan4_T ;
  logic [32:0] fangyuan4_R ;
  logic [32:0] fangyuan4_C ;
  logic [32:0] fangyuan4_X ;
  assign fangyuan4 = { rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld, rsp_wr_vld };
  assign fangyuan4_T = {  rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T , rsp_wr_vld_T  };
  logic [13:0] fangyuan4_S ;
  assign fangyuan4_S = 0 ;
  logic [0:0] rsp_wr_vld_R0 ;
  logic [0:0] rsp_wr_vld_X0 ;
  logic [0:0] rsp_wr_vld_C0 ;
  assign rsp_wr_vld_R0 = fangyuan4_R [32:32] ;
  assign rsp_wr_vld_X0 = fangyuan4_X [32:32] ;
  assign rsp_wr_vld_C0 = fangyuan4_C [32:32] ;
  logic [0:0] rsp_wr_vld_R1 ;
  logic [0:0] rsp_wr_vld_X1 ;
  logic [0:0] rsp_wr_vld_C1 ;
  assign rsp_wr_vld_R1 = fangyuan4_R [31:31] ;
  assign rsp_wr_vld_X1 = fangyuan4_X [31:31] ;
  assign rsp_wr_vld_C1 = fangyuan4_C [31:31] ;
  logic [0:0] rsp_wr_vld_R2 ;
  logic [0:0] rsp_wr_vld_X2 ;
  logic [0:0] rsp_wr_vld_C2 ;
  assign rsp_wr_vld_R2 = fangyuan4_R [30:30] ;
  assign rsp_wr_vld_X2 = fangyuan4_X [30:30] ;
  assign rsp_wr_vld_C2 = fangyuan4_C [30:30] ;
  logic [0:0] rsp_wr_vld_R3 ;
  logic [0:0] rsp_wr_vld_X3 ;
  logic [0:0] rsp_wr_vld_C3 ;
  assign rsp_wr_vld_R3 = fangyuan4_R [29:29] ;
  assign rsp_wr_vld_X3 = fangyuan4_X [29:29] ;
  assign rsp_wr_vld_C3 = fangyuan4_C [29:29] ;
  logic [0:0] rsp_wr_vld_R4 ;
  logic [0:0] rsp_wr_vld_X4 ;
  logic [0:0] rsp_wr_vld_C4 ;
  assign rsp_wr_vld_R4 = fangyuan4_R [28:28] ;
  assign rsp_wr_vld_X4 = fangyuan4_X [28:28] ;
  assign rsp_wr_vld_C4 = fangyuan4_C [28:28] ;
  logic [0:0] rsp_wr_vld_R5 ;
  logic [0:0] rsp_wr_vld_X5 ;
  logic [0:0] rsp_wr_vld_C5 ;
  assign rsp_wr_vld_R5 = fangyuan4_R [27:27] ;
  assign rsp_wr_vld_X5 = fangyuan4_X [27:27] ;
  assign rsp_wr_vld_C5 = fangyuan4_C [27:27] ;
  logic [0:0] rsp_wr_vld_R6 ;
  logic [0:0] rsp_wr_vld_X6 ;
  logic [0:0] rsp_wr_vld_C6 ;
  assign rsp_wr_vld_R6 = fangyuan4_R [26:26] ;
  assign rsp_wr_vld_X6 = fangyuan4_X [26:26] ;
  assign rsp_wr_vld_C6 = fangyuan4_C [26:26] ;
  logic [0:0] rsp_wr_vld_R7 ;
  logic [0:0] rsp_wr_vld_X7 ;
  logic [0:0] rsp_wr_vld_C7 ;
  assign rsp_wr_vld_R7 = fangyuan4_R [25:25] ;
  assign rsp_wr_vld_X7 = fangyuan4_X [25:25] ;
  assign rsp_wr_vld_C7 = fangyuan4_C [25:25] ;
  logic [0:0] rsp_wr_vld_R8 ;
  logic [0:0] rsp_wr_vld_X8 ;
  logic [0:0] rsp_wr_vld_C8 ;
  assign rsp_wr_vld_R8 = fangyuan4_R [24:24] ;
  assign rsp_wr_vld_X8 = fangyuan4_X [24:24] ;
  assign rsp_wr_vld_C8 = fangyuan4_C [24:24] ;
  logic [0:0] rsp_wr_vld_R9 ;
  logic [0:0] rsp_wr_vld_X9 ;
  logic [0:0] rsp_wr_vld_C9 ;
  assign rsp_wr_vld_R9 = fangyuan4_R [23:23] ;
  assign rsp_wr_vld_X9 = fangyuan4_X [23:23] ;
  assign rsp_wr_vld_C9 = fangyuan4_C [23:23] ;
  logic [0:0] rsp_wr_vld_R10 ;
  logic [0:0] rsp_wr_vld_X10 ;
  logic [0:0] rsp_wr_vld_C10 ;
  assign rsp_wr_vld_R10 = fangyuan4_R [22:22] ;
  assign rsp_wr_vld_X10 = fangyuan4_X [22:22] ;
  assign rsp_wr_vld_C10 = fangyuan4_C [22:22] ;
  logic [0:0] rsp_wr_vld_R11 ;
  logic [0:0] rsp_wr_vld_X11 ;
  logic [0:0] rsp_wr_vld_C11 ;
  assign rsp_wr_vld_R11 = fangyuan4_R [21:21] ;
  assign rsp_wr_vld_X11 = fangyuan4_X [21:21] ;
  assign rsp_wr_vld_C11 = fangyuan4_C [21:21] ;
  logic [0:0] rsp_wr_vld_R12 ;
  logic [0:0] rsp_wr_vld_X12 ;
  logic [0:0] rsp_wr_vld_C12 ;
  assign rsp_wr_vld_R12 = fangyuan4_R [20:20] ;
  assign rsp_wr_vld_X12 = fangyuan4_X [20:20] ;
  assign rsp_wr_vld_C12 = fangyuan4_C [20:20] ;
  logic [0:0] rsp_wr_vld_R13 ;
  logic [0:0] rsp_wr_vld_X13 ;
  logic [0:0] rsp_wr_vld_C13 ;
  assign rsp_wr_vld_R13 = fangyuan4_R [19:19] ;
  assign rsp_wr_vld_X13 = fangyuan4_X [19:19] ;
  assign rsp_wr_vld_C13 = fangyuan4_C [19:19] ;
  logic [0:0] rsp_wr_vld_R14 ;
  logic [0:0] rsp_wr_vld_X14 ;
  logic [0:0] rsp_wr_vld_C14 ;
  assign rsp_wr_vld_R14 = fangyuan4_R [18:18] ;
  assign rsp_wr_vld_X14 = fangyuan4_X [18:18] ;
  assign rsp_wr_vld_C14 = fangyuan4_C [18:18] ;
  logic [0:0] rsp_wr_vld_R15 ;
  logic [0:0] rsp_wr_vld_X15 ;
  logic [0:0] rsp_wr_vld_C15 ;
  assign rsp_wr_vld_R15 = fangyuan4_R [17:17] ;
  assign rsp_wr_vld_X15 = fangyuan4_X [17:17] ;
  assign rsp_wr_vld_C15 = fangyuan4_C [17:17] ;
  logic [0:0] rsp_wr_vld_R16 ;
  logic [0:0] rsp_wr_vld_X16 ;
  logic [0:0] rsp_wr_vld_C16 ;
  assign rsp_wr_vld_R16 = fangyuan4_R [16:16] ;
  assign rsp_wr_vld_X16 = fangyuan4_X [16:16] ;
  assign rsp_wr_vld_C16 = fangyuan4_C [16:16] ;
  logic [0:0] rsp_wr_vld_R17 ;
  logic [0:0] rsp_wr_vld_X17 ;
  logic [0:0] rsp_wr_vld_C17 ;
  assign rsp_wr_vld_R17 = fangyuan4_R [15:15] ;
  assign rsp_wr_vld_X17 = fangyuan4_X [15:15] ;
  assign rsp_wr_vld_C17 = fangyuan4_C [15:15] ;
  logic [0:0] rsp_wr_vld_R18 ;
  logic [0:0] rsp_wr_vld_X18 ;
  logic [0:0] rsp_wr_vld_C18 ;
  assign rsp_wr_vld_R18 = fangyuan4_R [14:14] ;
  assign rsp_wr_vld_X18 = fangyuan4_X [14:14] ;
  assign rsp_wr_vld_C18 = fangyuan4_C [14:14] ;
  logic [0:0] rsp_wr_vld_R19 ;
  logic [0:0] rsp_wr_vld_X19 ;
  logic [0:0] rsp_wr_vld_C19 ;
  assign rsp_wr_vld_R19 = fangyuan4_R [13:13] ;
  assign rsp_wr_vld_X19 = fangyuan4_X [13:13] ;
  assign rsp_wr_vld_C19 = fangyuan4_C [13:13] ;
  logic [0:0] rsp_wr_vld_R20 ;
  logic [0:0] rsp_wr_vld_X20 ;
  logic [0:0] rsp_wr_vld_C20 ;
  assign rsp_wr_vld_R20 = fangyuan4_R [12:12] ;
  assign rsp_wr_vld_X20 = fangyuan4_X [12:12] ;
  assign rsp_wr_vld_C20 = fangyuan4_C [12:12] ;
  logic [0:0] rsp_wr_vld_R21 ;
  logic [0:0] rsp_wr_vld_X21 ;
  logic [0:0] rsp_wr_vld_C21 ;
  assign rsp_wr_vld_R21 = fangyuan4_R [11:11] ;
  assign rsp_wr_vld_X21 = fangyuan4_X [11:11] ;
  assign rsp_wr_vld_C21 = fangyuan4_C [11:11] ;
  logic [0:0] rsp_wr_vld_R22 ;
  logic [0:0] rsp_wr_vld_X22 ;
  logic [0:0] rsp_wr_vld_C22 ;
  assign rsp_wr_vld_R22 = fangyuan4_R [10:10] ;
  assign rsp_wr_vld_X22 = fangyuan4_X [10:10] ;
  assign rsp_wr_vld_C22 = fangyuan4_C [10:10] ;
  logic [0:0] rsp_wr_vld_R23 ;
  logic [0:0] rsp_wr_vld_X23 ;
  logic [0:0] rsp_wr_vld_C23 ;
  assign rsp_wr_vld_R23 = fangyuan4_R [9:9] ;
  assign rsp_wr_vld_X23 = fangyuan4_X [9:9] ;
  assign rsp_wr_vld_C23 = fangyuan4_C [9:9] ;
  logic [0:0] rsp_wr_vld_R24 ;
  logic [0:0] rsp_wr_vld_X24 ;
  logic [0:0] rsp_wr_vld_C24 ;
  assign rsp_wr_vld_R24 = fangyuan4_R [8:8] ;
  assign rsp_wr_vld_X24 = fangyuan4_X [8:8] ;
  assign rsp_wr_vld_C24 = fangyuan4_C [8:8] ;
  logic [0:0] rsp_wr_vld_R25 ;
  logic [0:0] rsp_wr_vld_X25 ;
  logic [0:0] rsp_wr_vld_C25 ;
  assign rsp_wr_vld_R25 = fangyuan4_R [7:7] ;
  assign rsp_wr_vld_X25 = fangyuan4_X [7:7] ;
  assign rsp_wr_vld_C25 = fangyuan4_C [7:7] ;
  logic [0:0] rsp_wr_vld_R26 ;
  logic [0:0] rsp_wr_vld_X26 ;
  logic [0:0] rsp_wr_vld_C26 ;
  assign rsp_wr_vld_R26 = fangyuan4_R [6:6] ;
  assign rsp_wr_vld_X26 = fangyuan4_X [6:6] ;
  assign rsp_wr_vld_C26 = fangyuan4_C [6:6] ;
  logic [0:0] rsp_wr_vld_R27 ;
  logic [0:0] rsp_wr_vld_X27 ;
  logic [0:0] rsp_wr_vld_C27 ;
  assign rsp_wr_vld_R27 = fangyuan4_R [5:5] ;
  assign rsp_wr_vld_X27 = fangyuan4_X [5:5] ;
  assign rsp_wr_vld_C27 = fangyuan4_C [5:5] ;
  logic [0:0] rsp_wr_vld_R28 ;
  logic [0:0] rsp_wr_vld_X28 ;
  logic [0:0] rsp_wr_vld_C28 ;
  assign rsp_wr_vld_R28 = fangyuan4_R [4:4] ;
  assign rsp_wr_vld_X28 = fangyuan4_X [4:4] ;
  assign rsp_wr_vld_C28 = fangyuan4_C [4:4] ;
  logic [0:0] rsp_wr_vld_R29 ;
  logic [0:0] rsp_wr_vld_X29 ;
  logic [0:0] rsp_wr_vld_C29 ;
  assign rsp_wr_vld_R29 = fangyuan4_R [3:3] ;
  assign rsp_wr_vld_X29 = fangyuan4_X [3:3] ;
  assign rsp_wr_vld_C29 = fangyuan4_C [3:3] ;
  logic [0:0] rsp_wr_vld_R30 ;
  logic [0:0] rsp_wr_vld_X30 ;
  logic [0:0] rsp_wr_vld_C30 ;
  assign rsp_wr_vld_R30 = fangyuan4_R [2:2] ;
  assign rsp_wr_vld_X30 = fangyuan4_X [2:2] ;
  assign rsp_wr_vld_C30 = fangyuan4_C [2:2] ;
  logic [0:0] rsp_wr_vld_R31 ;
  logic [0:0] rsp_wr_vld_X31 ;
  logic [0:0] rsp_wr_vld_C31 ;
  assign rsp_wr_vld_R31 = fangyuan4_R [1:1] ;
  assign rsp_wr_vld_X31 = fangyuan4_X [1:1] ;
  assign rsp_wr_vld_C31 = fangyuan4_C [1:1] ;
  logic [0:0] rsp_wr_vld_R32 ;
  logic [0:0] rsp_wr_vld_X32 ;
  logic [0:0] rsp_wr_vld_C32 ;
  assign rsp_wr_vld_R32 = fangyuan4_R [0:0] ;
  assign rsp_wr_vld_X32 = fangyuan4_X [0:0] ;
  assign rsp_wr_vld_C32 = fangyuan4_C [0:0] ;

  assign _018_ = fangyuan4 & 1'b0;
  assign _018__S = 0 ;
  logic [32:0] fangyuan4_C0 ;
  logic [32:0] fangyuan4_R0 ;
  logic [32:0] fangyuan4_X0 ;
  assign _018__T = fangyuan4_T ;
  assign fangyuan4_C0 = _018__C ;
  assign fangyuan4_R0 = _018__R ;
  assign fangyuan4_X0 = _018__X ;
  assign csb_fifo_wr_pvld = op_en_trigger & nvdla_bdma_cfg_op_0_en;
  assign csb_fifo_wr_pvld_S = 0 ;
  logic [0:0] op_en_trigger_C0 ;
  logic [0:0] op_en_trigger_R0 ;
  logic [0:0] op_en_trigger_X0 ;
  logic [0:0] nvdla_bdma_cfg_op_0_en_C0 ;
  logic [0:0] nvdla_bdma_cfg_op_0_en_R0 ;
  logic [0:0] nvdla_bdma_cfg_op_0_en_X0 ;
  assign csb_fifo_wr_pvld_T = op_en_trigger_T | nvdla_bdma_cfg_op_0_en_T ;
  assign op_en_trigger_C0 = csb_fifo_wr_pvld_C ;
  assign op_en_trigger_X0 = csb_fifo_wr_pvld_X ;
  assign nvdla_bdma_cfg_op_0_en_C0 = csb_fifo_wr_pvld_C ;
  assign nvdla_bdma_cfg_op_0_en_X0 = csb_fifo_wr_pvld_X ;
  assign op_en_trigger_R0 = ( csb_fifo_wr_pvld_R | csb_fifo_wr_pvld_C & nvdla_bdma_cfg_op_0_en_T ) & { 1{ nvdla_bdma_cfg_op_0_en != 0 }} ;
  assign nvdla_bdma_cfg_op_0_en_R0 = ( csb_fifo_wr_pvld_R | csb_fifo_wr_pvld_C & op_en_trigger_T ) & { 1{ op_en_trigger != 0 }} ;
  assign grp0_cmd_launch = grp0_cmd_launch_trigger & nvdla_bdma_cfg_launch0_0_grp0_launch;
  assign grp0_cmd_launch_S = 0 ;
  logic [0:0] grp0_cmd_launch_trigger_C0 ;
  logic [0:0] grp0_cmd_launch_trigger_R0 ;
  logic [0:0] grp0_cmd_launch_trigger_X0 ;
  logic [0:0] nvdla_bdma_cfg_launch0_0_grp0_launch_C0 ;
  logic [0:0] nvdla_bdma_cfg_launch0_0_grp0_launch_R0 ;
  logic [0:0] nvdla_bdma_cfg_launch0_0_grp0_launch_X0 ;
  assign grp0_cmd_launch_T = grp0_cmd_launch_trigger_T | nvdla_bdma_cfg_launch0_0_grp0_launch_T ;
  assign grp0_cmd_launch_trigger_C0 = grp0_cmd_launch_C ;
  assign grp0_cmd_launch_trigger_X0 = grp0_cmd_launch_X ;
  assign nvdla_bdma_cfg_launch0_0_grp0_launch_C0 = grp0_cmd_launch_C ;
  assign nvdla_bdma_cfg_launch0_0_grp0_launch_X0 = grp0_cmd_launch_X ;
  assign grp0_cmd_launch_trigger_R0 = ( grp0_cmd_launch_R | grp0_cmd_launch_C & nvdla_bdma_cfg_launch0_0_grp0_launch_T ) & { 1{ nvdla_bdma_cfg_launch0_0_grp0_launch != 0 }} ;
  assign nvdla_bdma_cfg_launch0_0_grp0_launch_R0 = ( grp0_cmd_launch_R | grp0_cmd_launch_C & grp0_cmd_launch_trigger_T ) & { 1{ grp0_cmd_launch_trigger != 0 }} ;
  assign grp1_cmd_launch = grp1_cmd_launch_trigger & nvdla_bdma_cfg_launch1_0_grp1_launch;
  assign grp1_cmd_launch_S = 0 ;
  logic [0:0] grp1_cmd_launch_trigger_C0 ;
  logic [0:0] grp1_cmd_launch_trigger_R0 ;
  logic [0:0] grp1_cmd_launch_trigger_X0 ;
  logic [0:0] nvdla_bdma_cfg_launch1_0_grp1_launch_C0 ;
  logic [0:0] nvdla_bdma_cfg_launch1_0_grp1_launch_R0 ;
  logic [0:0] nvdla_bdma_cfg_launch1_0_grp1_launch_X0 ;
  assign grp1_cmd_launch_T = grp1_cmd_launch_trigger_T | nvdla_bdma_cfg_launch1_0_grp1_launch_T ;
  assign grp1_cmd_launch_trigger_C0 = grp1_cmd_launch_C ;
  assign grp1_cmd_launch_trigger_X0 = grp1_cmd_launch_X ;
  assign nvdla_bdma_cfg_launch1_0_grp1_launch_C0 = grp1_cmd_launch_C ;
  assign nvdla_bdma_cfg_launch1_0_grp1_launch_X0 = grp1_cmd_launch_X ;
  assign grp1_cmd_launch_trigger_R0 = ( grp1_cmd_launch_R | grp1_cmd_launch_C & nvdla_bdma_cfg_launch1_0_grp1_launch_T ) & { 1{ nvdla_bdma_cfg_launch1_0_grp1_launch != 0 }} ;
  assign nvdla_bdma_cfg_launch1_0_grp1_launch_R0 = ( grp1_cmd_launch_R | grp1_cmd_launch_C & grp1_cmd_launch_trigger_T ) & { 1{ grp1_cmd_launch_trigger != 0 }} ;
  assign gather_to_launch = gather_vld & gather_rdy;
  assign gather_to_launch_S = 0 ;
  logic [0:0] gather_vld_C0 ;
  logic [0:0] gather_vld_R0 ;
  logic [0:0] gather_vld_X0 ;
  logic [0:0] gather_rdy_C0 ;
  logic [0:0] gather_rdy_R0 ;
  logic [0:0] gather_rdy_X0 ;
  assign gather_to_launch_T = gather_vld_T | gather_rdy_T ;
  assign gather_vld_C0 = gather_to_launch_C ;
  assign gather_vld_X0 = gather_to_launch_X ;
  assign gather_rdy_C0 = gather_to_launch_C ;
  assign gather_rdy_X0 = gather_to_launch_X ;
  assign gather_vld_R0 = ( gather_to_launch_R | gather_to_launch_C & gather_rdy_T ) & { 1{ gather_rdy != 0 }} ;
  assign gather_rdy_R0 = ( gather_to_launch_R | gather_to_launch_C & gather_vld_T ) & { 1{ gather_vld != 0 }} ;
  assign is_last_cmd_rdy = csb2ld_rdy & is_last_cmd;
  assign is_last_cmd_rdy_S = 0 ;
  logic [0:0] csb2ld_rdy_C0 ;
  logic [0:0] csb2ld_rdy_R0 ;
  logic [0:0] csb2ld_rdy_X0 ;
  logic [0:0] is_last_cmd_C0 ;
  logic [0:0] is_last_cmd_R0 ;
  logic [0:0] is_last_cmd_X0 ;
  assign is_last_cmd_rdy_T = csb2ld_rdy_T | is_last_cmd_T ;
  assign csb2ld_rdy_C0 = is_last_cmd_rdy_C ;
  assign csb2ld_rdy_X0 = is_last_cmd_rdy_X ;
  assign is_last_cmd_C0 = is_last_cmd_rdy_C ;
  assign is_last_cmd_X0 = is_last_cmd_rdy_X ;
  assign csb2ld_rdy_R0 = ( is_last_cmd_rdy_R | is_last_cmd_rdy_C & is_last_cmd_T ) & { 1{ is_last_cmd != 0 }} ;
  assign is_last_cmd_R0 = ( is_last_cmd_rdy_R | is_last_cmd_rdy_C & csb2ld_rdy_T ) & { 1{ csb2ld_rdy != 0 }} ;
  assign _019_ = st2csb_idle & ld2csb_idle;
  assign _019__S = 0 ;
  logic [0:0] st2csb_idle_C0 ;
  logic [0:0] st2csb_idle_R0 ;
  logic [0:0] st2csb_idle_X0 ;
  logic [0:0] ld2csb_idle_C0 ;
  logic [0:0] ld2csb_idle_R0 ;
  logic [0:0] ld2csb_idle_X0 ;
  assign _019__T = st2csb_idle_T | ld2csb_idle_T ;
  assign st2csb_idle_C0 = _019__C ;
  assign st2csb_idle_X0 = _019__X ;
  assign ld2csb_idle_C0 = _019__C ;
  assign ld2csb_idle_X0 = _019__X ;
  assign st2csb_idle_R0 = ( _019__R | _019__C & ld2csb_idle_T ) & { 1{ ld2csb_idle != 0 }} ;
  assign ld2csb_idle_R0 = ( _019__R | _019__C & st2csb_idle_T ) & { 1{ st2csb_idle != 0 }} ;
  assign nvdla_bdma_status_0_idle = _019_ & csb_fifo_wr_idle;
  assign nvdla_bdma_status_0_idle_S = 0 ;
  logic [0:0] _019__C0 ;
  logic [0:0] _019__R0 ;
  logic [0:0] _019__X0 ;
  logic [0:0] csb_fifo_wr_idle_C0 ;
  logic [0:0] csb_fifo_wr_idle_R0 ;
  logic [0:0] csb_fifo_wr_idle_X0 ;
  assign nvdla_bdma_status_0_idle_T = _019__T | csb_fifo_wr_idle_T ;
  assign _019__C0 = nvdla_bdma_status_0_idle_C ;
  assign _019__X0 = nvdla_bdma_status_0_idle_X ;
  assign csb_fifo_wr_idle_C0 = nvdla_bdma_status_0_idle_C ;
  assign csb_fifo_wr_idle_X0 = nvdla_bdma_status_0_idle_X ;
  assign _019__R0 = ( nvdla_bdma_status_0_idle_R | nvdla_bdma_status_0_idle_C & csb_fifo_wr_idle_T ) & { 1{ csb_fifo_wr_idle != 0 }} ;
  assign csb_fifo_wr_idle_R0 = ( nvdla_bdma_status_0_idle_R | nvdla_bdma_status_0_idle_C & _019__T ) & { 1{ _019_ != 0 }} ;
  assign is_last_cmd = launch_count == 1'b1;
  assign is_last_cmd_S = 0 ;
  logic [4:0] launch_count_C0 ;
  logic [4:0] launch_count_R0 ;
  logic [4:0] launch_count_X0 ;
  assign is_last_cmd_T = | launch_count_T ;
  assign launch_count_C0 = { 5{ is_last_cmd_C }} ;
  assign launch_count_R0 = { 5{ is_last_cmd_R }} ;
  assign launch_count_X0 = { 5{ is_last_cmd_X }} ;
  assign _022_ = ! gather_vld;
  logic [0:0] gather_vld_C1 ;
  logic [0:0] gather_vld_R1 ;
  logic [0:0] gather_vld_X1 ;
  assign _022__T = | gather_vld_T ;
  assign gather_vld_C1 = { 1{ _022__C }} ;
  assign gather_vld_X1 = { 1{ _022__X }} ;
  assign gather_vld_R1 = { 1{ _022__R }} ;
  assign _022__S = 0 ;
  assign _023_ = ! launch_vld;
  logic [0:0] launch_vld_C0 ;
  logic [0:0] launch_vld_R0 ;
  logic [0:0] launch_vld_X0 ;
  assign _023__T = | launch_vld_T ;
  assign launch_vld_C0 = { 1{ _023__C }} ;
  assign launch_vld_X0 = { 1{ _023__X }} ;
  assign launch_vld_R0 = { 1{ _023__R }} ;
  assign _023__S = 0 ;
  assign cmd_launch_rdy = gather_rdy || _022_;
  assign cmd_launch_rdy_S = 0 ;
  logic [0:0] gather_rdy_C1 ;
  logic [0:0] gather_rdy_R1 ;
  logic [0:0] gather_rdy_X1 ;
  logic [0:0] _022__C0 ;
  logic [0:0] _022__R0 ;
  logic [0:0] _022__X0 ;
  assign cmd_launch_rdy_T = gather_rdy_T | _022__T ;
  assign gather_rdy_C1 = cmd_launch_rdy_C ;
  assign gather_rdy_X1 = cmd_launch_rdy_X ;
  assign _022__C0 = cmd_launch_rdy_C ;
  assign _022__X0 = cmd_launch_rdy_X ;
  assign gather_rdy_R1 = ( cmd_launch_rdy_R | cmd_launch_rdy_C & _022__T ) & { 1{ _022_ == 0 }} ;
  assign _022__R0 = ( cmd_launch_rdy_R | cmd_launch_rdy_C & gather_rdy_T ) & { 1{ gather_rdy == 0 }} ;
  assign gather_rdy = _023_ || is_last_cmd_rdy;
  assign gather_rdy_S = 0 ;
  logic [0:0] _023__C0 ;
  logic [0:0] _023__R0 ;
  logic [0:0] _023__X0 ;
  logic [0:0] is_last_cmd_rdy_C0 ;
  logic [0:0] is_last_cmd_rdy_R0 ;
  logic [0:0] is_last_cmd_rdy_X0 ;
  assign gather_rdy_T = _023__T | is_last_cmd_rdy_T ;
  assign _023__C0 = gather_rdy_C ;
  assign _023__X0 = gather_rdy_X ;
  assign is_last_cmd_rdy_C0 = gather_rdy_C ;
  assign is_last_cmd_rdy_X0 = gather_rdy_X ;
  assign _023__R0 = ( gather_rdy_R | gather_rdy_C & is_last_cmd_rdy_T ) & { 1{ is_last_cmd_rdy == 0 }} ;
  assign is_last_cmd_rdy_R0 = ( gather_rdy_R | gather_rdy_C & _023__T ) & { 1{ _023_ == 0 }} ;
  assign launch_vld = | launch_count;
  logic [4:0] launch_count_C1 ;
  logic [4:0] launch_count_R1 ;
  logic [4:0] launch_count_X1 ;
  assign launch_vld_T = | launch_count_T ;
  assign launch_count_C1 = { 5{ launch_vld_C }} ;
  assign launch_count_X1 = { 5{ launch_vld_X }} ;
  assign launch_count_R1 = { 5{ launch_vld_R }} & launch_count ;
  assign launch_vld_S = 0 ;
  assign _024_ = ~ req_pd[54];
  assign { req_pd_R0 [0], req_pd_R0 [1], req_pd_R0 [2], req_pd_R0 [3], req_pd_R0 [4], req_pd_R0 [5], req_pd_R0 [6], req_pd_R0 [7], req_pd_R0 [8], req_pd_R0 [9], req_pd_R0 [10], req_pd_R0 [11], req_pd_R0 [12], req_pd_R0 [13], req_pd_R0 [14], req_pd_R0 [15], req_pd_R0 [16], req_pd_R0 [17], req_pd_R0 [18], req_pd_R0 [19], req_pd_R0 [20], req_pd_R0 [21], req_pd_R0 [22], req_pd_R0 [23], req_pd_R0 [24], req_pd_R0 [25], req_pd_R0 [26], req_pd_R0 [27], req_pd_R0 [28], req_pd_R0 [29], req_pd_R0 [30], req_pd_R0 [31], req_pd_R0 [32], req_pd_R0 [33], req_pd_R0 [34], req_pd_R0 [35], req_pd_R0 [36], req_pd_R0 [37], req_pd_R0 [38], req_pd_R0 [39], req_pd_R0 [40], req_pd_R0 [41], req_pd_R0 [42], req_pd_R0 [43], req_pd_R0 [44], req_pd_R0 [45], req_pd_R0 [46], req_pd_R0 [47], req_pd_R0 [48], req_pd_R0 [49], req_pd_R0 [50], req_pd_R0 [51], req_pd_R0 [52], req_pd_R0 [53], req_pd_R0 [62:56] } = 0;
  assign { req_pd_X0 [0], req_pd_X0 [1], req_pd_X0 [2], req_pd_X0 [3], req_pd_X0 [4], req_pd_X0 [5], req_pd_X0 [6], req_pd_X0 [7], req_pd_X0 [8], req_pd_X0 [9], req_pd_X0 [10], req_pd_X0 [11], req_pd_X0 [12], req_pd_X0 [13], req_pd_X0 [14], req_pd_X0 [15], req_pd_X0 [16], req_pd_X0 [17], req_pd_X0 [18], req_pd_X0 [19], req_pd_X0 [20], req_pd_X0 [21], req_pd_X0 [22], req_pd_X0 [23], req_pd_X0 [24], req_pd_X0 [25], req_pd_X0 [26], req_pd_X0 [27], req_pd_X0 [28], req_pd_X0 [29], req_pd_X0 [30], req_pd_X0 [31], req_pd_X0 [32], req_pd_X0 [33], req_pd_X0 [34], req_pd_X0 [35], req_pd_X0 [36], req_pd_X0 [37], req_pd_X0 [38], req_pd_X0 [39], req_pd_X0 [40], req_pd_X0 [41], req_pd_X0 [42], req_pd_X0 [43], req_pd_X0 [44], req_pd_X0 [45], req_pd_X0 [46], req_pd_X0 [47], req_pd_X0 [48], req_pd_X0 [49], req_pd_X0 [50], req_pd_X0 [51], req_pd_X0 [52], req_pd_X0 [53], req_pd_X0 [62:56] } = 0;
  assign { req_pd_C0 [0], req_pd_C0 [1], req_pd_C0 [2], req_pd_C0 [3], req_pd_C0 [4], req_pd_C0 [5], req_pd_C0 [6], req_pd_C0 [7], req_pd_C0 [8], req_pd_C0 [9], req_pd_C0 [10], req_pd_C0 [11], req_pd_C0 [12], req_pd_C0 [13], req_pd_C0 [14], req_pd_C0 [15], req_pd_C0 [16], req_pd_C0 [17], req_pd_C0 [18], req_pd_C0 [19], req_pd_C0 [20], req_pd_C0 [21], req_pd_C0 [22], req_pd_C0 [23], req_pd_C0 [24], req_pd_C0 [25], req_pd_C0 [26], req_pd_C0 [27], req_pd_C0 [28], req_pd_C0 [29], req_pd_C0 [30], req_pd_C0 [31], req_pd_C0 [32], req_pd_C0 [33], req_pd_C0 [34], req_pd_C0 [35], req_pd_C0 [36], req_pd_C0 [37], req_pd_C0 [38], req_pd_C0 [39], req_pd_C0 [40], req_pd_C0 [41], req_pd_C0 [42], req_pd_C0 [43], req_pd_C0 [44], req_pd_C0 [45], req_pd_C0 [46], req_pd_C0 [47], req_pd_C0 [48], req_pd_C0 [49], req_pd_C0 [50], req_pd_C0 [51], req_pd_C0 [52], req_pd_C0 [53], req_pd_C0 [62:56] } = 0;
  logic [62:0] req_pd_C1 ;
  logic [62:0] req_pd_R1 ;
  logic [62:0] req_pd_X1 ;
  assign _024__T = req_pd_T [54] ;
  assign req_pd_C1 [54] = _024__C ;
  assign req_pd_R1 [54] = _024__R ;
  assign req_pd_X1 [54] = _024__X ;
  assign _024__S = 0 ;
  assign rsp_vld = rsp_rd_vld | rsp_wr_vld;
  assign rsp_vld_S = 0 ;
  logic [0:0] rsp_rd_vld_C65 ;
  logic [0:0] rsp_rd_vld_R65 ;
  logic [0:0] rsp_rd_vld_X65 ;
  logic [0:0] rsp_wr_vld_C33 ;
  logic [0:0] rsp_wr_vld_R33 ;
  logic [0:0] rsp_wr_vld_X33 ;
  assign rsp_vld_T = rsp_rd_vld_T | rsp_wr_vld_T ;
  assign rsp_rd_vld_C65 = rsp_vld_C ;
  assign rsp_rd_vld_X65 = rsp_vld_X ;
  assign rsp_wr_vld_C33 = rsp_vld_C ;
  assign rsp_wr_vld_X33 = rsp_vld_X ;
  assign rsp_rd_vld_R65 = ( rsp_vld_R | rsp_vld_C & rsp_wr_vld_T ) & { 1{ rsp_wr_vld != 1'b1 }} ;
  assign rsp_wr_vld_R33 = ( rsp_vld_R | rsp_vld_C & rsp_rd_vld_T ) & { 1{ rsp_rd_vld != 1'b1 }} ;
  assign rsp_pd = _017_ | _018_;
  assign rsp_pd_S = 0 ;
  logic [32:0] _017__C0 ;
  logic [32:0] _017__R0 ;
  logic [32:0] _017__X0 ;
  logic [32:0] _018__C0 ;
  logic [32:0] _018__R0 ;
  logic [32:0] _018__X0 ;
  assign rsp_pd_T = _017__T | _018__T ;
  assign _017__C0 = rsp_pd_C ;
  assign _017__X0 = rsp_pd_X ;
  assign _018__C0 = rsp_pd_C ;
  assign _018__X0 = rsp_pd_X ;
  assign _017__R0 = ( rsp_pd_R | rsp_pd_C & _018__T ) & { 33{ _018_ != 33'b111111111111111111111111111111111 }} ;
  assign _018__R0 = ( rsp_pd_R | rsp_pd_C & _017__T ) & { 33{ _017_ != 33'b111111111111111111111111111111111 }} ;
  assign cmd_launch_vld = grp0_cmd_launch | grp1_cmd_launch;
  assign cmd_launch_vld_S = 0 ;
  logic [0:0] grp0_cmd_launch_C0 ;
  logic [0:0] grp0_cmd_launch_R0 ;
  logic [0:0] grp0_cmd_launch_X0 ;
  logic [0:0] grp1_cmd_launch_C0 ;
  logic [0:0] grp1_cmd_launch_R0 ;
  logic [0:0] grp1_cmd_launch_X0 ;
  assign cmd_launch_vld_T = grp0_cmd_launch_T | grp1_cmd_launch_T ;
  assign grp0_cmd_launch_C0 = cmd_launch_vld_C ;
  assign grp0_cmd_launch_X0 = cmd_launch_vld_X ;
  assign grp1_cmd_launch_C0 = cmd_launch_vld_C ;
  assign grp1_cmd_launch_X0 = cmd_launch_vld_X ;
  assign grp0_cmd_launch_R0 = ( cmd_launch_vld_R | cmd_launch_vld_C & grp1_cmd_launch_T ) & { 1{ grp1_cmd_launch != 1'b1 }} ;
  assign grp1_cmd_launch_R0 = ( cmd_launch_vld_R | cmd_launch_vld_C & grp0_cmd_launch_T ) & { 1{ grp0_cmd_launch != 1'b1 }} ;
  assign _025_ = cmd_launch_vld | gather_vld;
  assign _025__S = 0 ;
  logic [0:0] cmd_launch_vld_C0 ;
  logic [0:0] cmd_launch_vld_R0 ;
  logic [0:0] cmd_launch_vld_X0 ;
  logic [0:0] gather_vld_C2 ;
  logic [0:0] gather_vld_R2 ;
  logic [0:0] gather_vld_X2 ;
  assign _025__T = cmd_launch_vld_T | gather_vld_T ;
  assign cmd_launch_vld_C0 = _025__C ;
  assign cmd_launch_vld_X0 = _025__X ;
  assign gather_vld_C2 = _025__C ;
  assign gather_vld_X2 = _025__X ;
  assign cmd_launch_vld_R0 = ( _025__R | _025__C & gather_vld_T ) & { 1{ gather_vld != 1'b1 }} ;
  assign gather_vld_R2 = ( _025__R | _025__C & cmd_launch_vld_T ) & { 1{ cmd_launch_vld != 1'b1 }} ;
  assign csb_processing = _025_ | launch_vld;
  assign csb_processing_S = 0 ;
  logic [0:0] _025__C0 ;
  logic [0:0] _025__R0 ;
  logic [0:0] _025__X0 ;
  logic [0:0] launch_vld_C1 ;
  logic [0:0] launch_vld_R1 ;
  logic [0:0] launch_vld_X1 ;
  assign csb_processing_T = _025__T | launch_vld_T ;
  assign _025__C0 = csb_processing_C ;
  assign _025__X0 = csb_processing_X ;
  assign launch_vld_C1 = csb_processing_C ;
  assign launch_vld_X1 = csb_processing_X ;
  assign _025__R0 = ( csb_processing_R | csb_processing_C & launch_vld_T ) & { 1{ launch_vld != 1'b1 }} ;
  assign launch_vld_R1 = ( csb_processing_R | csb_processing_C & _025__T ) & { 1{ _025_ != 1'b1 }} ;
  assign _009_ = csb_processing | csb_processing_d;
  assign _009__S = 0 ;
  logic [0:0] csb_processing_C0 ;
  logic [0:0] csb_processing_R0 ;
  logic [0:0] csb_processing_X0 ;
  logic [0:0] csb_processing_d_C0 ;
  logic [0:0] csb_processing_d_R0 ;
  logic [0:0] csb_processing_d_X0 ;
  assign _009__T = csb_processing_T | csb_processing_d_T ;
  assign csb_processing_C0 = _009__C ;
  assign csb_processing_X0 = _009__X ;
  assign csb_processing_d_C0 = _009__C ;
  assign csb_processing_d_X0 = _009__X ;
  assign csb_processing_R0 = ( _009__R | _009__C & csb_processing_d_T ) & { 1{ csb_processing_d != 1'b1 }} ;
  assign csb_processing_d_R0 = ( _009__R | _009__C & csb_processing_T ) & { 1{ csb_processing != 1'b1 }} ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      slcg_en <= 1'b0;
    else
      slcg_en <= _009_;
  logic [0:0] _009__X0 ;
  logic [0:0] _009__R0 ;
  logic [0:0] _009__C0 ;
  assign _009__X0 = { 1{ slcg_en_S != _009__S }} ;
  assign _009__R0 = 0 ;
  assign _009__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      slcg_en_T 		<= !nvdla_core_rstn ? 0 : ( _009__T & _009__X0 );
  always @( posedge nvdla_core_clk )
      slcg_en_t_flag 	<= !nvdla_core_rstn ? 0 : slcg_en_t_flag ? 1 : | _009__T & ( | _009__X0 );
  always @( posedge nvdla_core_clk )
      slcg_en_r_flag 	<= !nvdla_core_rstn ? 0 : slcg_en_r_flag ? 1 : slcg_en_t_flag ? 0 : ( | slcg_en_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      csb_processing_d <= 1'b0;
    else
      csb_processing_d <= csb_processing;
  logic [0:0] csb_processing_X1 ;
  logic [0:0] csb_processing_R1 ;
  logic [0:0] csb_processing_C1 ;
  assign csb_processing_X1 = { 1{ csb_processing_d_S != csb_processing_S }} ;
  assign csb_processing_R1 = 0 ;
  assign csb_processing_C1 = 0 ;
  always @( posedge nvdla_core_clk )
      csb_processing_d_T 		<= !nvdla_core_rstn ? 0 : ( csb_processing_T & csb_processing_X1 );
  always @( posedge nvdla_core_clk )
      csb_processing_d_t_flag 	<= !nvdla_core_rstn ? 0 : csb_processing_d_t_flag ? 1 : | csb_processing_T & ( | csb_processing_X1 );
  always @( posedge nvdla_core_clk )
      csb_processing_d_r_flag 	<= !nvdla_core_rstn ? 0 : csb_processing_d_r_flag ? 1 : csb_processing_d_t_flag ? 0 : ( | csb_processing_d_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      bdma2glb_done_intr_pd[1] <= 1'b0;
    else
      bdma2glb_done_intr_pd[1] <= st2csb_grp1_done;
  logic [0:0] st2csb_grp1_done_X0 ;
  logic [0:0] st2csb_grp1_done_R0 ;
  logic [0:0] st2csb_grp1_done_C0 ;
  assign st2csb_grp1_done_X0 = { 1{ bdma2glb_done_intr_pd_S != st2csb_grp1_done_S }} ;
  assign st2csb_grp1_done_R0 = 0 ;
  assign st2csb_grp1_done_C0 = 0 ;
  always @( posedge nvdla_core_clk )
      bdma2glb_done_intr_pd_T 		<= !nvdla_core_rstn ? 0 : ( st2csb_grp1_done_T & st2csb_grp1_done_X0 );
  always @( posedge nvdla_core_clk )
      bdma2glb_done_intr_pd_t_flag 	<= !nvdla_core_rstn ? 0 : bdma2glb_done_intr_pd_t_flag ? 1 : | st2csb_grp1_done_T & ( | st2csb_grp1_done_X0 );
  always @( posedge nvdla_core_clk )
      bdma2glb_done_intr_pd_r_flag 	<= !nvdla_core_rstn ? 0 : bdma2glb_done_intr_pd_r_flag ? 1 : bdma2glb_done_intr_pd_t_flag ? 0 : ( | bdma2glb_done_intr_pd_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      bdma2glb_done_intr_pd[0] <= 1'b0;
    else
      bdma2glb_done_intr_pd[0] <= st2csb_grp0_done;
  logic [0:0] st2csb_grp0_done_X0 ;
  logic [0:0] st2csb_grp0_done_R0 ;
  logic [0:0] st2csb_grp0_done_C0 ;
  assign st2csb_grp0_done_X0 = { 1{ bdma2glb_done_intr_pd_S != st2csb_grp0_done_S }} ;
  assign st2csb_grp0_done_R0 = 0 ;
  assign st2csb_grp0_done_C0 = 0 ;
  always @( posedge nvdla_core_clk )
      bdma2glb_done_intr_pd_T 		<= !nvdla_core_rstn ? 0 : ( st2csb_grp0_done_T & st2csb_grp0_done_X0 );
  always @( posedge nvdla_core_clk )
      bdma2glb_done_intr_pd_t_flag 	<= !nvdla_core_rstn ? 0 : bdma2glb_done_intr_pd_t_flag ? 1 : | st2csb_grp0_done_T & ( | st2csb_grp0_done_X0 );
  always @( posedge nvdla_core_clk )
      bdma2glb_done_intr_pd_r_flag 	<= !nvdla_core_rstn ? 0 : bdma2glb_done_intr_pd_r_flag ? 1 : bdma2glb_done_intr_pd_t_flag ? 0 : ( | bdma2glb_done_intr_pd_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      status_grp1_write_stall_count <= 32'd0;
    else
      status_grp1_write_stall_count <= _015_;
  logic [31:0] _015__X0 ;
  logic [31:0] _015__R0 ;
  logic [31:0] _015__C0 ;
  assign _015__X0 = { 32{ status_grp1_write_stall_count_S != _015__S }} ;
  assign _015__R0 = 0 ;
  assign _015__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      status_grp1_write_stall_count_T 		<= !nvdla_core_rstn ? 0 : ( _015__T & _015__X0 );
  always @( posedge nvdla_core_clk )
      status_grp1_write_stall_count_t_flag 	<= !nvdla_core_rstn ? 0 : status_grp1_write_stall_count_t_flag ? 1 : | _015__T & ( | _015__X0 );
  always @( posedge nvdla_core_clk )
      status_grp1_write_stall_count_r_flag 	<= !nvdla_core_rstn ? 0 : status_grp1_write_stall_count_r_flag ? 1 : status_grp1_write_stall_count_t_flag ? 0 : ( | status_grp1_write_stall_count_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      status_grp0_write_stall_count <= 32'd0;
    else
      status_grp0_write_stall_count <= _012_;
  logic [31:0] _012__X0 ;
  logic [31:0] _012__R0 ;
  logic [31:0] _012__C0 ;
  assign _012__X0 = { 32{ status_grp0_write_stall_count_S != _012__S }} ;
  assign _012__R0 = 0 ;
  assign _012__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      status_grp0_write_stall_count_T 		<= !nvdla_core_rstn ? 0 : ( _012__T & _012__X0 );
  always @( posedge nvdla_core_clk )
      status_grp0_write_stall_count_t_flag 	<= !nvdla_core_rstn ? 0 : status_grp0_write_stall_count_t_flag ? 1 : | _012__T & ( | _012__X0 );
  always @( posedge nvdla_core_clk )
      status_grp0_write_stall_count_r_flag 	<= !nvdla_core_rstn ? 0 : status_grp0_write_stall_count_r_flag ? 1 : status_grp0_write_stall_count_t_flag ? 0 : ( | status_grp0_write_stall_count_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      status_grp1_read_stall_count <= 32'd0;
    else
      status_grp1_read_stall_count <= _014_;
  logic [31:0] _014__X0 ;
  logic [31:0] _014__R0 ;
  logic [31:0] _014__C0 ;
  assign _014__X0 = { 32{ status_grp1_read_stall_count_S != _014__S }} ;
  assign _014__R0 = 0 ;
  assign _014__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      status_grp1_read_stall_count_T 		<= !nvdla_core_rstn ? 0 : ( _014__T & _014__X0 );
  always @( posedge nvdla_core_clk )
      status_grp1_read_stall_count_t_flag 	<= !nvdla_core_rstn ? 0 : status_grp1_read_stall_count_t_flag ? 1 : | _014__T & ( | _014__X0 );
  always @( posedge nvdla_core_clk )
      status_grp1_read_stall_count_r_flag 	<= !nvdla_core_rstn ? 0 : status_grp1_read_stall_count_r_flag ? 1 : status_grp1_read_stall_count_t_flag ? 0 : ( | status_grp1_read_stall_count_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      status_grp0_read_stall_count <= 32'd0;
    else
      status_grp0_read_stall_count <= _011_;
  logic [31:0] _011__X0 ;
  logic [31:0] _011__R0 ;
  logic [31:0] _011__C0 ;
  assign _011__X0 = { 32{ status_grp0_read_stall_count_S != _011__S }} ;
  assign _011__R0 = 0 ;
  assign _011__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      status_grp0_read_stall_count_T 		<= !nvdla_core_rstn ? 0 : ( _011__T & _011__X0 );
  always @( posedge nvdla_core_clk )
      status_grp0_read_stall_count_t_flag 	<= !nvdla_core_rstn ? 0 : status_grp0_read_stall_count_t_flag ? 1 : | _011__T & ( | _011__X0 );
  always @( posedge nvdla_core_clk )
      status_grp0_read_stall_count_r_flag 	<= !nvdla_core_rstn ? 0 : status_grp0_read_stall_count_r_flag ? 1 : status_grp0_read_stall_count_t_flag ? 0 : ( | status_grp0_read_stall_count_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      grp1_read_stall_cnt_cnt_cur <= 32'd0;
    else
      grp1_read_stall_cnt_cnt_cur <= _005_;
  logic [31:0] _005__X0 ;
  logic [31:0] _005__R0 ;
  logic [31:0] _005__C0 ;
  assign _005__X0 = { 32{ grp1_read_stall_cnt_cnt_cur_S != _005__S }} ;
  assign _005__R0 = 0 ;
  assign _005__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      grp1_read_stall_cnt_cnt_cur_T 		<= !nvdla_core_rstn ? 0 : ( _005__T & _005__X0 );
  always @( posedge nvdla_core_clk )
      grp1_read_stall_cnt_cnt_cur_t_flag 	<= !nvdla_core_rstn ? 0 : grp1_read_stall_cnt_cnt_cur_t_flag ? 1 : | _005__T & ( | _005__X0 );
  always @( posedge nvdla_core_clk )
      grp1_read_stall_cnt_cnt_cur_r_flag 	<= !nvdla_core_rstn ? 0 : grp1_read_stall_cnt_cnt_cur_r_flag ? 1 : grp1_read_stall_cnt_cnt_cur_t_flag ? 0 : ( | grp1_read_stall_cnt_cnt_cur_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      grp0_read_stall_cnt_cnt_cur <= 32'd0;
    else
      grp0_read_stall_cnt_cnt_cur <= _004_;
  logic [31:0] _004__X0 ;
  logic [31:0] _004__R0 ;
  logic [31:0] _004__C0 ;
  assign _004__X0 = { 32{ grp0_read_stall_cnt_cnt_cur_S != _004__S }} ;
  assign _004__R0 = 0 ;
  assign _004__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      grp0_read_stall_cnt_cnt_cur_T 		<= !nvdla_core_rstn ? 0 : ( _004__T & _004__X0 );
  always @( posedge nvdla_core_clk )
      grp0_read_stall_cnt_cnt_cur_t_flag 	<= !nvdla_core_rstn ? 0 : grp0_read_stall_cnt_cnt_cur_t_flag ? 1 : | _004__T & ( | _004__X0 );
  always @( posedge nvdla_core_clk )
      grp0_read_stall_cnt_cnt_cur_r_flag 	<= !nvdla_core_rstn ? 0 : grp0_read_stall_cnt_cnt_cur_r_flag ? 1 : grp0_read_stall_cnt_cnt_cur_t_flag ? 0 : ( | grp0_read_stall_cnt_cnt_cur_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      status_grp1_busy <= 1'b0;
    else
      status_grp1_busy <= _013_;
  logic [0:0] _013__X0 ;
  logic [0:0] _013__R0 ;
  logic [0:0] _013__C0 ;
  assign _013__X0 = { 1{ status_grp1_busy_S != _013__S }} ;
  assign _013__R0 = 0 ;
  assign _013__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      status_grp1_busy_T 		<= !nvdla_core_rstn ? 0 : ( _013__T & _013__X0 );
  always @( posedge nvdla_core_clk )
      status_grp1_busy_t_flag 	<= !nvdla_core_rstn ? 0 : status_grp1_busy_t_flag ? 1 : | _013__T & ( | _013__X0 );
  always @( posedge nvdla_core_clk )
      status_grp1_busy_r_flag 	<= !nvdla_core_rstn ? 0 : status_grp1_busy_r_flag ? 1 : status_grp1_busy_t_flag ? 0 : ( | status_grp1_busy_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      status_grp0_busy <= 1'b0;
    else
      status_grp0_busy <= _010_;
  logic [0:0] _010__X0 ;
  logic [0:0] _010__R0 ;
  logic [0:0] _010__C0 ;
  assign _010__X0 = { 1{ status_grp0_busy_S != _010__S }} ;
  assign _010__R0 = 0 ;
  assign _010__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      status_grp0_busy_T 		<= !nvdla_core_rstn ? 0 : ( _010__T & _010__X0 );
  always @( posedge nvdla_core_clk )
      status_grp0_busy_t_flag 	<= !nvdla_core_rstn ? 0 : status_grp0_busy_t_flag ? 1 : | _010__T & ( | _010__X0 );
  always @( posedge nvdla_core_clk )
      status_grp0_busy_r_flag 	<= !nvdla_core_rstn ? 0 : status_grp0_busy_r_flag ? 1 : status_grp0_busy_t_flag ? 0 : ( | status_grp0_busy_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      launch_count <= 5'b00000;
    else
      launch_count <= _006_;
  logic [4:0] _006__X0 ;
  logic [4:0] _006__R0 ;
  logic [4:0] _006__C0 ;
  assign _006__X0 = { 5{ launch_count_S != _006__S }} ;
  assign _006__R0 = 0 ;
  assign _006__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      launch_count_T 		<= !nvdla_core_rstn ? 0 : ( _006__T & _006__X0 );
  always @( posedge nvdla_core_clk )
      launch_count_t_flag 	<= !nvdla_core_rstn ? 0 : launch_count_t_flag ? 1 : | _006__T & ( | _006__X0 );
  always @( posedge nvdla_core_clk )
      launch_count_r_flag 	<= !nvdla_core_rstn ? 0 : launch_count_r_flag ? 1 : launch_count_t_flag ? 0 : ( | launch_count_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      launch_ptr <= 1'b0;
    else
      launch_ptr <= _007_;
  logic [0:0] _007__X0 ;
  logic [0:0] _007__R0 ;
  logic [0:0] _007__C0 ;
  assign _007__X0 = { 1{ launch_ptr_S != _007__S }} ;
  assign _007__R0 = 0 ;
  assign _007__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      launch_ptr_T 		<= !nvdla_core_rstn ? 0 : ( _007__T & _007__X0 );
  always @( posedge nvdla_core_clk )
      launch_ptr_t_flag 	<= !nvdla_core_rstn ? 0 : launch_ptr_t_flag ? 1 : | _007__T & ( | _007__X0 );
  always @( posedge nvdla_core_clk )
      launch_ptr_r_flag 	<= !nvdla_core_rstn ? 0 : launch_ptr_r_flag ? 1 : launch_ptr_t_flag ? 0 : ( | launch_ptr_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      gather_ptr <= 1'b0;
    else
      gather_ptr <= _002_;
  logic [0:0] _002__X0 ;
  logic [0:0] _002__R0 ;
  logic [0:0] _002__C0 ;
  assign _002__X0 = { 1{ gather_ptr_S != _002__S }} ;
  assign _002__R0 = 0 ;
  assign _002__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      gather_ptr_T 		<= !nvdla_core_rstn ? 0 : ( _002__T & _002__X0 );
  always @( posedge nvdla_core_clk )
      gather_ptr_t_flag 	<= !nvdla_core_rstn ? 0 : gather_ptr_t_flag ? 1 : | _002__T & ( | _002__X0 );
  always @( posedge nvdla_core_clk )
      gather_ptr_r_flag 	<= !nvdla_core_rstn ? 0 : gather_ptr_r_flag ? 1 : gather_ptr_t_flag ? 0 : ( | gather_ptr_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      gather_vld <= 1'b0;
    else
      gather_vld <= _003_;
  logic [0:0] _003__X0 ;
  logic [0:0] _003__R0 ;
  logic [0:0] _003__C0 ;
  assign _003__X0 = { 1{ gather_vld_S != _003__S }} ;
  assign _003__R0 = 0 ;
  assign _003__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      gather_vld_T 		<= !nvdla_core_rstn ? 0 : ( _003__T & _003__X0 );
  always @( posedge nvdla_core_clk )
      gather_vld_t_flag 	<= !nvdla_core_rstn ? 0 : gather_vld_t_flag ? 1 : | _003__T & ( | _003__X0 );
  always @( posedge nvdla_core_clk )
      gather_vld_r_flag 	<= !nvdla_core_rstn ? 0 : gather_vld_r_flag ? 1 : gather_vld_t_flag ? 0 : ( | gather_vld_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      gather_count <= 5'b00000;
    else
      gather_count <= _001_;
  logic [4:0] _001__X0 ;
  logic [4:0] _001__R0 ;
  logic [4:0] _001__C0 ;
  assign _001__X0 = { 5{ gather_count_S != _001__S }} ;
  assign _001__R0 = 0 ;
  assign _001__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      gather_count_T 		<= !nvdla_core_rstn ? 0 : ( _001__T & _001__X0 );
  always @( posedge nvdla_core_clk )
      gather_count_t_flag 	<= !nvdla_core_rstn ? 0 : gather_count_t_flag ? 1 : | _001__T & ( | _001__X0 );
  always @( posedge nvdla_core_clk )
      gather_count_r_flag 	<= !nvdla_core_rstn ? 0 : gather_count_r_flag ? 1 : gather_count_t_flag ? 0 : ( | gather_count_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      grp1_cmd_launch_trigger <= 1'b0;
    else
      grp1_cmd_launch_trigger <= nvdla_bdma_cfg_launch1_0_grp1_launch_trigger;
  logic [0:0] nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_X0 ;
  logic [0:0] nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_R0 ;
  logic [0:0] nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_C0 ;
  assign nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_X0 = { 1{ grp1_cmd_launch_trigger_S != nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_S }} ;
  assign nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_R0 = 0 ;
  assign nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_C0 = 0 ;
  always @( posedge nvdla_core_clk )
      grp1_cmd_launch_trigger_T 		<= !nvdla_core_rstn ? 0 : ( nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_T & nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_X0 );
  always @( posedge nvdla_core_clk )
      grp1_cmd_launch_trigger_t_flag 	<= !nvdla_core_rstn ? 0 : grp1_cmd_launch_trigger_t_flag ? 1 : | nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_T & ( | nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_X0 );
  always @( posedge nvdla_core_clk )
      grp1_cmd_launch_trigger_r_flag 	<= !nvdla_core_rstn ? 0 : grp1_cmd_launch_trigger_r_flag ? 1 : grp1_cmd_launch_trigger_t_flag ? 0 : ( | grp1_cmd_launch_trigger_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      grp0_cmd_launch_trigger <= 1'b0;
    else
      grp0_cmd_launch_trigger <= nvdla_bdma_cfg_launch0_0_grp0_launch_trigger;
  logic [0:0] nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_X0 ;
  logic [0:0] nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_R0 ;
  logic [0:0] nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_C0 ;
  assign nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_X0 = { 1{ grp0_cmd_launch_trigger_S != nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_S }} ;
  assign nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_R0 = 0 ;
  assign nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_C0 = 0 ;
  always @( posedge nvdla_core_clk )
      grp0_cmd_launch_trigger_T 		<= !nvdla_core_rstn ? 0 : ( nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_T & nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_X0 );
  always @( posedge nvdla_core_clk )
      grp0_cmd_launch_trigger_t_flag 	<= !nvdla_core_rstn ? 0 : grp0_cmd_launch_trigger_t_flag ? 1 : | nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_T & ( | nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_X0 );
  always @( posedge nvdla_core_clk )
      grp0_cmd_launch_trigger_r_flag 	<= !nvdla_core_rstn ? 0 : grp0_cmd_launch_trigger_r_flag ? 1 : grp0_cmd_launch_trigger_t_flag ? 0 : ( | grp0_cmd_launch_trigger_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      op_en_trigger <= 1'b0;
    else
      op_en_trigger <= nvdla_bdma_cfg_op_0_en_trigger;
  logic [0:0] nvdla_bdma_cfg_op_0_en_trigger_X0 ;
  logic [0:0] nvdla_bdma_cfg_op_0_en_trigger_R0 ;
  logic [0:0] nvdla_bdma_cfg_op_0_en_trigger_C0 ;
  assign nvdla_bdma_cfg_op_0_en_trigger_X0 = { 1{ op_en_trigger_S != nvdla_bdma_cfg_op_0_en_trigger_S }} ;
  assign nvdla_bdma_cfg_op_0_en_trigger_R0 = 0 ;
  assign nvdla_bdma_cfg_op_0_en_trigger_C0 = 0 ;
  always @( posedge nvdla_core_clk )
      op_en_trigger_T 		<= !nvdla_core_rstn ? 0 : ( nvdla_bdma_cfg_op_0_en_trigger_T & nvdla_bdma_cfg_op_0_en_trigger_X0 );
  always @( posedge nvdla_core_clk )
      op_en_trigger_t_flag 	<= !nvdla_core_rstn ? 0 : op_en_trigger_t_flag ? 1 : | nvdla_bdma_cfg_op_0_en_trigger_T & ( | nvdla_bdma_cfg_op_0_en_trigger_X0 );
  always @( posedge nvdla_core_clk )
      op_en_trigger_r_flag 	<= !nvdla_core_rstn ? 0 : op_en_trigger_r_flag ? 1 : op_en_trigger_t_flag ? 0 : ( | op_en_trigger_R ) ;
  always @(posedge nvdla_core_clk)
      bdma2csb_resp_pd <= _000_;
  logic [33:0] _000__X0 ;
  logic [33:0] _000__R0 ;
  logic [33:0] _000__C0 ;
  assign _000__X0 = { 34{ bdma2csb_resp_pd_S != _000__S }} ;
  assign _000__R0 = 0 ;
  assign _000__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      bdma2csb_resp_pd_T 		<= !nvdla_core_rstn ? 0 : ( _000__T & _000__X0 );
  always @( posedge nvdla_core_clk )
      bdma2csb_resp_pd_t_flag 	<= !nvdla_core_rstn ? 0 : bdma2csb_resp_pd_t_flag ? 1 : | _000__T & ( | _000__X0 );
  always @( posedge nvdla_core_clk )
      bdma2csb_resp_pd_r_flag 	<= !nvdla_core_rstn ? 0 : bdma2csb_resp_pd_r_flag ? 1 : bdma2csb_resp_pd_t_flag ? 0 : ( | bdma2csb_resp_pd_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      bdma2csb_resp_valid <= 1'b0;
    else
      bdma2csb_resp_valid <= rsp_vld;
  logic [0:0] rsp_vld_X0 ;
  logic [0:0] rsp_vld_R0 ;
  logic [0:0] rsp_vld_C0 ;
  assign rsp_vld_X0 = { 1{ bdma2csb_resp_valid_S != rsp_vld_S }} ;
  assign rsp_vld_R0 = 0 ;
  assign rsp_vld_C0 = 0 ;
  always @( posedge nvdla_core_clk )
      bdma2csb_resp_valid_T 		<= !nvdla_core_rstn ? 0 : ( rsp_vld_T & rsp_vld_X0 );
  always @( posedge nvdla_core_clk )
      bdma2csb_resp_valid_t_flag 	<= !nvdla_core_rstn ? 0 : bdma2csb_resp_valid_t_flag ? 1 : | rsp_vld_T & ( | rsp_vld_X0 );
  always @( posedge nvdla_core_clk )
      bdma2csb_resp_valid_r_flag 	<= !nvdla_core_rstn ? 0 : bdma2csb_resp_valid_r_flag ? 1 : bdma2csb_resp_valid_t_flag ? 0 : ( | bdma2csb_resp_valid_R ) ;
  always @(posedge nvdla_core_clk)
      req_pd <= _008_;
  logic [62:0] _008__X0 ;
  logic [62:0] _008__R0 ;
  logic [62:0] _008__C0 ;
  assign _008__X0 = { 63{ req_pd_S != _008__S }} ;
  assign _008__R0 = 0 ;
  assign _008__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      req_pd_T 		<= !nvdla_core_rstn ? 0 : ( _008__T & _008__X0 );
  always @( posedge nvdla_core_clk )
      req_pd_t_flag 	<= !nvdla_core_rstn ? 0 : req_pd_t_flag ? 1 : | _008__T & ( | _008__X0 );
  always @( posedge nvdla_core_clk )
      req_pd_r_flag 	<= !nvdla_core_rstn ? 0 : req_pd_r_flag ? 1 : req_pd_t_flag ? 0 : ( | req_pd_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      req_vld <= 1'b0;
    else
      req_vld <= csb2bdma_req_pvld;
  logic [0:0] csb2bdma_req_pvld_X0 ;
  logic [0:0] csb2bdma_req_pvld_R0 ;
  logic [0:0] csb2bdma_req_pvld_C0 ;
  assign csb2bdma_req_pvld_X0 = { 1{ req_vld_S != csb2bdma_req_pvld_S }} ;
  assign csb2bdma_req_pvld_R0 = 0 ;
  assign csb2bdma_req_pvld_C0 = 0 ;
  always @( posedge nvdla_core_clk )
      req_vld_T 		<= !nvdla_core_rstn ? 0 : ( csb2bdma_req_pvld_T & csb2bdma_req_pvld_X0 );
  always @( posedge nvdla_core_clk )
      req_vld_t_flag 	<= !nvdla_core_rstn ? 0 : req_vld_t_flag ? 1 : | csb2bdma_req_pvld_T & ( | csb2bdma_req_pvld_X0 );
  always @( posedge nvdla_core_clk )
      req_vld_r_flag 	<= !nvdla_core_rstn ? 0 : req_vld_r_flag ? 1 : req_vld_t_flag ? 0 : ( | req_vld_R ) ;
  assign _026_ = st2csb_grp1_done ? dma_write_stall_count : status_grp1_write_stall_count;
  logic [0:0] st2csb_grp1_done_C1 ;
  logic [0:0] st2csb_grp1_done_R1 ;
  logic [0:0] st2csb_grp1_done_X1 ;
  assign st2csb_grp1_done_C1 = | _026__C ;
  assign st2csb_grp1_done_X1 = | _026__X ;
  assign _026__T = st2csb_grp1_done ? ( { 32{ st2csb_grp1_done_T  }} | dma_write_stall_count_T ) : ( { 32{ st2csb_grp1_done_T  }} | status_grp1_write_stall_count_T );
  assign _026__S = st2csb_grp1_done ? dma_write_stall_count_S : status_grp1_write_stall_count_S ;
  assign st2csb_grp1_done_R1 = ( | (_026__R | ( _026__C & ( { 32{ st2csb_grp1_done }} & dma_write_stall_count_T | { 32{ !st2csb_grp1_done }} & status_grp1_write_stall_count_T )))) && dma_write_stall_count != status_grp1_write_stall_count ;
  logic [31:0] dma_write_stall_count_C0 ;
  logic [31:0] dma_write_stall_count_R0 ;
  logic [31:0] dma_write_stall_count_X0 ;
  assign dma_write_stall_count_C0 = { 32{ st2csb_grp1_done }} ;
  assign dma_write_stall_count_R0 = { 32{ st2csb_grp1_done }} & ( _026__R | ( { 32{ st2csb_grp1_done_T  }} & _026__C ));
  assign dma_write_stall_count_X0 = { 32{ st2csb_grp1_done }} & _026__X ;
  logic [31:0] status_grp1_write_stall_count_C0 ;
  logic [31:0] status_grp1_write_stall_count_R0 ;
  logic [31:0] status_grp1_write_stall_count_X0 ;
  assign status_grp1_write_stall_count_C0 = { 32{ !st2csb_grp1_done }} ;
  assign status_grp1_write_stall_count_R0 = { 32{ !st2csb_grp1_done }} & ( _026__R | ( { 32{ st2csb_grp1_done_T  }} & _026__C ));
  assign status_grp1_write_stall_count_X0 = { 32{ !st2csb_grp1_done }} & _026__X ;
  assign _015_ = grp1_cmd_launch ? 32'd0 : _026_;
  logic [0:0] grp1_cmd_launch_C1 ;
  logic [0:0] grp1_cmd_launch_R1 ;
  logic [0:0] grp1_cmd_launch_X1 ;
  assign grp1_cmd_launch_C1 = | _015__C ;
  assign grp1_cmd_launch_X1 = | _015__X ;
  logic [31:0] _026__C0 ;
  logic [31:0] _026__R0 ;
  logic [31:0] _026__X0 ;
  assign _026__C0 = { 32{ !grp1_cmd_launch }};
  assign _026__R0 = { 32{ !grp1_cmd_launch }} & ( _015__R | ( { 32{ grp1_cmd_launch_T  }} & _015__C ));
  assign _026__X0 = { 32{ !grp1_cmd_launch }} & _015__X ;
  assign _015__T = grp1_cmd_launch ? { 32{ | grp1_cmd_launch_T  }} : ( { 32{ | grp1_cmd_launch_T  }} | _026__T );
  assign _015__S = grp1_cmd_launch ? grp1_cmd_launch_S : _026__S ;
  assign grp1_cmd_launch_R1 = ( | (_015__R | ( { 32{ !grp1_cmd_launch }} & _026__T & _015__C ))) && 32'd0 != _026_ ;
  assign _027_ = st2csb_grp0_done ? dma_write_stall_count : status_grp0_write_stall_count;
  logic [0:0] st2csb_grp0_done_C1 ;
  logic [0:0] st2csb_grp0_done_R1 ;
  logic [0:0] st2csb_grp0_done_X1 ;
  assign st2csb_grp0_done_C1 = | _027__C ;
  assign st2csb_grp0_done_X1 = | _027__X ;
  assign _027__T = st2csb_grp0_done ? ( { 32{ st2csb_grp0_done_T  }} | dma_write_stall_count_T ) : ( { 32{ st2csb_grp0_done_T  }} | status_grp0_write_stall_count_T );
  assign _027__S = st2csb_grp0_done ? dma_write_stall_count_S : status_grp0_write_stall_count_S ;
  assign st2csb_grp0_done_R1 = ( | (_027__R | ( _027__C & ( { 32{ st2csb_grp0_done }} & dma_write_stall_count_T | { 32{ !st2csb_grp0_done }} & status_grp0_write_stall_count_T )))) && dma_write_stall_count != status_grp0_write_stall_count ;
  logic [31:0] dma_write_stall_count_C1 ;
  logic [31:0] dma_write_stall_count_R1 ;
  logic [31:0] dma_write_stall_count_X1 ;
  assign dma_write_stall_count_C1 = { 32{ st2csb_grp0_done }} ;
  assign dma_write_stall_count_R1 = { 32{ st2csb_grp0_done }} & ( _027__R | ( { 32{ st2csb_grp0_done_T  }} & _027__C ));
  assign dma_write_stall_count_X1 = { 32{ st2csb_grp0_done }} & _027__X ;
  logic [31:0] status_grp0_write_stall_count_C0 ;
  logic [31:0] status_grp0_write_stall_count_R0 ;
  logic [31:0] status_grp0_write_stall_count_X0 ;
  assign status_grp0_write_stall_count_C0 = { 32{ !st2csb_grp0_done }} ;
  assign status_grp0_write_stall_count_R0 = { 32{ !st2csb_grp0_done }} & ( _027__R | ( { 32{ st2csb_grp0_done_T  }} & _027__C ));
  assign status_grp0_write_stall_count_X0 = { 32{ !st2csb_grp0_done }} & _027__X ;
  assign _012_ = grp0_cmd_launch ? 32'd0 : _027_;
  logic [0:0] grp0_cmd_launch_C1 ;
  logic [0:0] grp0_cmd_launch_R1 ;
  logic [0:0] grp0_cmd_launch_X1 ;
  assign grp0_cmd_launch_C1 = | _012__C ;
  assign grp0_cmd_launch_X1 = | _012__X ;
  logic [31:0] _027__C0 ;
  logic [31:0] _027__R0 ;
  logic [31:0] _027__X0 ;
  assign _027__C0 = { 32{ !grp0_cmd_launch }};
  assign _027__R0 = { 32{ !grp0_cmd_launch }} & ( _012__R | ( { 32{ grp0_cmd_launch_T  }} & _012__C ));
  assign _027__X0 = { 32{ !grp0_cmd_launch }} & _012__X ;
  assign _012__T = grp0_cmd_launch ? { 32{ | grp0_cmd_launch_T  }} : ( { 32{ | grp0_cmd_launch_T  }} | _027__T );
  assign _012__S = grp0_cmd_launch ? grp0_cmd_launch_S : _027__S ;
  assign grp0_cmd_launch_R1 = ( | (_012__R | ( { 32{ !grp0_cmd_launch }} & _027__T & _012__C ))) && 32'd0 != _027_ ;
  assign _028_ = st2csb_grp1_done ? grp1_read_stall_cnt_cnt_cur : status_grp1_read_stall_count;
  logic [0:0] st2csb_grp1_done_C2 ;
  logic [0:0] st2csb_grp1_done_R2 ;
  logic [0:0] st2csb_grp1_done_X2 ;
  assign st2csb_grp1_done_C2 = | _028__C ;
  assign st2csb_grp1_done_X2 = | _028__X ;
  assign _028__T = st2csb_grp1_done ? ( { 32{ st2csb_grp1_done_T  }} | grp1_read_stall_cnt_cnt_cur_T ) : ( { 32{ st2csb_grp1_done_T  }} | status_grp1_read_stall_count_T );
  assign _028__S = st2csb_grp1_done ? grp1_read_stall_cnt_cnt_cur_S : status_grp1_read_stall_count_S ;
  assign st2csb_grp1_done_R2 = ( | (_028__R | ( _028__C & ( { 32{ st2csb_grp1_done }} & grp1_read_stall_cnt_cnt_cur_T | { 32{ !st2csb_grp1_done }} & status_grp1_read_stall_count_T )))) && grp1_read_stall_cnt_cnt_cur != status_grp1_read_stall_count ;
  logic [31:0] grp1_read_stall_cnt_cnt_cur_C1 ;
  logic [31:0] grp1_read_stall_cnt_cnt_cur_R1 ;
  logic [31:0] grp1_read_stall_cnt_cnt_cur_X1 ;
  assign grp1_read_stall_cnt_cnt_cur_C1 = { 32{ st2csb_grp1_done }} ;
  assign grp1_read_stall_cnt_cnt_cur_R1 = { 32{ st2csb_grp1_done }} & ( _028__R | ( { 32{ st2csb_grp1_done_T  }} & _028__C ));
  assign grp1_read_stall_cnt_cnt_cur_X1 = { 32{ st2csb_grp1_done }} & _028__X ;
  logic [31:0] status_grp1_read_stall_count_C0 ;
  logic [31:0] status_grp1_read_stall_count_R0 ;
  logic [31:0] status_grp1_read_stall_count_X0 ;
  assign status_grp1_read_stall_count_C0 = { 32{ !st2csb_grp1_done }} ;
  assign status_grp1_read_stall_count_R0 = { 32{ !st2csb_grp1_done }} & ( _028__R | ( { 32{ st2csb_grp1_done_T  }} & _028__C ));
  assign status_grp1_read_stall_count_X0 = { 32{ !st2csb_grp1_done }} & _028__X ;
  assign _014_ = grp1_cmd_launch ? 32'd0 : _028_;
  logic [0:0] grp1_cmd_launch_C2 ;
  logic [0:0] grp1_cmd_launch_R2 ;
  logic [0:0] grp1_cmd_launch_X2 ;
  assign grp1_cmd_launch_C2 = | _014__C ;
  assign grp1_cmd_launch_X2 = | _014__X ;
  logic [31:0] _028__C0 ;
  logic [31:0] _028__R0 ;
  logic [31:0] _028__X0 ;
  assign _028__C0 = { 32{ !grp1_cmd_launch }};
  assign _028__R0 = { 32{ !grp1_cmd_launch }} & ( _014__R | ( { 32{ grp1_cmd_launch_T  }} & _014__C ));
  assign _028__X0 = { 32{ !grp1_cmd_launch }} & _014__X ;
  assign _014__T = grp1_cmd_launch ? { 32{ | grp1_cmd_launch_T  }} : ( { 32{ | grp1_cmd_launch_T  }} | _028__T );
  assign _014__S = grp1_cmd_launch ? grp1_cmd_launch_S : _028__S ;
  assign grp1_cmd_launch_R2 = ( | (_014__R | ( { 32{ !grp1_cmd_launch }} & _028__T & _014__C ))) && 32'd0 != _028_ ;
  assign _029_ = st2csb_grp0_done ? grp0_read_stall_cnt_cnt_cur : status_grp0_read_stall_count;
  logic [0:0] st2csb_grp0_done_C2 ;
  logic [0:0] st2csb_grp0_done_R2 ;
  logic [0:0] st2csb_grp0_done_X2 ;
  assign st2csb_grp0_done_C2 = | _029__C ;
  assign st2csb_grp0_done_X2 = | _029__X ;
  assign _029__T = st2csb_grp0_done ? ( { 32{ st2csb_grp0_done_T  }} | grp0_read_stall_cnt_cnt_cur_T ) : ( { 32{ st2csb_grp0_done_T  }} | status_grp0_read_stall_count_T );
  assign _029__S = st2csb_grp0_done ? grp0_read_stall_cnt_cnt_cur_S : status_grp0_read_stall_count_S ;
  assign st2csb_grp0_done_R2 = ( | (_029__R | ( _029__C & ( { 32{ st2csb_grp0_done }} & grp0_read_stall_cnt_cnt_cur_T | { 32{ !st2csb_grp0_done }} & status_grp0_read_stall_count_T )))) && grp0_read_stall_cnt_cnt_cur != status_grp0_read_stall_count ;
  logic [31:0] grp0_read_stall_cnt_cnt_cur_C1 ;
  logic [31:0] grp0_read_stall_cnt_cnt_cur_R1 ;
  logic [31:0] grp0_read_stall_cnt_cnt_cur_X1 ;
  assign grp0_read_stall_cnt_cnt_cur_C1 = { 32{ st2csb_grp0_done }} ;
  assign grp0_read_stall_cnt_cnt_cur_R1 = { 32{ st2csb_grp0_done }} & ( _029__R | ( { 32{ st2csb_grp0_done_T  }} & _029__C ));
  assign grp0_read_stall_cnt_cnt_cur_X1 = { 32{ st2csb_grp0_done }} & _029__X ;
  logic [31:0] status_grp0_read_stall_count_C0 ;
  logic [31:0] status_grp0_read_stall_count_R0 ;
  logic [31:0] status_grp0_read_stall_count_X0 ;
  assign status_grp0_read_stall_count_C0 = { 32{ !st2csb_grp0_done }} ;
  assign status_grp0_read_stall_count_R0 = { 32{ !st2csb_grp0_done }} & ( _029__R | ( { 32{ st2csb_grp0_done_T  }} & _029__C ));
  assign status_grp0_read_stall_count_X0 = { 32{ !st2csb_grp0_done }} & _029__X ;
  assign _011_ = grp0_cmd_launch ? 32'd0 : _029_;
  logic [0:0] grp0_cmd_launch_C2 ;
  logic [0:0] grp0_cmd_launch_R2 ;
  logic [0:0] grp0_cmd_launch_X2 ;
  assign grp0_cmd_launch_C2 = | _011__C ;
  assign grp0_cmd_launch_X2 = | _011__X ;
  logic [31:0] _029__C0 ;
  logic [31:0] _029__R0 ;
  logic [31:0] _029__X0 ;
  assign _029__C0 = { 32{ !grp0_cmd_launch }};
  assign _029__R0 = { 32{ !grp0_cmd_launch }} & ( _011__R | ( { 32{ grp0_cmd_launch_T  }} & _011__C ));
  assign _029__X0 = { 32{ !grp0_cmd_launch }} & _011__X ;
  assign _011__T = grp0_cmd_launch ? { 32{ | grp0_cmd_launch_T  }} : ( { 32{ | grp0_cmd_launch_T  }} | _029__T );
  assign _011__S = grp0_cmd_launch ? grp0_cmd_launch_S : _029__S ;
  assign grp0_cmd_launch_R2 = ( | (_011__R | ( { 32{ !grp0_cmd_launch }} & _029__T & _011__C ))) && 32'd0 != _029_ ;
  assign _005_ = nvdla_bdma_cfg_status_0_stall_count_en ? grp1_read_stall_cnt_cnt_nxt : grp1_read_stall_cnt_cnt_cur;
  logic [0:0] nvdla_bdma_cfg_status_0_stall_count_en_C0 ;
  logic [0:0] nvdla_bdma_cfg_status_0_stall_count_en_R0 ;
  logic [0:0] nvdla_bdma_cfg_status_0_stall_count_en_X0 ;
  assign nvdla_bdma_cfg_status_0_stall_count_en_C0 = | _005__C ;
  assign nvdla_bdma_cfg_status_0_stall_count_en_X0 = | _005__X ;
  assign _005__T = nvdla_bdma_cfg_status_0_stall_count_en ? ( { 32{ nvdla_bdma_cfg_status_0_stall_count_en_T  }} | grp1_read_stall_cnt_cnt_nxt_T ) : ( { 32{ nvdla_bdma_cfg_status_0_stall_count_en_T  }} | grp1_read_stall_cnt_cnt_cur_T );
  assign _005__S = nvdla_bdma_cfg_status_0_stall_count_en ? grp1_read_stall_cnt_cnt_nxt_S : grp1_read_stall_cnt_cnt_cur_S ;
  assign nvdla_bdma_cfg_status_0_stall_count_en_R0 = ( | (_005__R | ( _005__C & ( { 32{ nvdla_bdma_cfg_status_0_stall_count_en }} & grp1_read_stall_cnt_cnt_nxt_T | { 32{ !nvdla_bdma_cfg_status_0_stall_count_en }} & grp1_read_stall_cnt_cnt_cur_T )))) && grp1_read_stall_cnt_cnt_nxt != grp1_read_stall_cnt_cnt_cur ;
  logic [31:0] grp1_read_stall_cnt_cnt_nxt_C0 ;
  logic [31:0] grp1_read_stall_cnt_cnt_nxt_R0 ;
  logic [31:0] grp1_read_stall_cnt_cnt_nxt_X0 ;
  assign grp1_read_stall_cnt_cnt_nxt_C0 = { 32{ nvdla_bdma_cfg_status_0_stall_count_en }} ;
  assign grp1_read_stall_cnt_cnt_nxt_R0 = { 32{ nvdla_bdma_cfg_status_0_stall_count_en }} & ( _005__R | ( { 32{ nvdla_bdma_cfg_status_0_stall_count_en_T  }} & _005__C ));
  assign grp1_read_stall_cnt_cnt_nxt_X0 = { 32{ nvdla_bdma_cfg_status_0_stall_count_en }} & _005__X ;
  logic [31:0] grp1_read_stall_cnt_cnt_cur_C2 ;
  logic [31:0] grp1_read_stall_cnt_cnt_cur_R2 ;
  logic [31:0] grp1_read_stall_cnt_cnt_cur_X2 ;
  assign grp1_read_stall_cnt_cnt_cur_C2 = { 32{ !nvdla_bdma_cfg_status_0_stall_count_en }} ;
  assign grp1_read_stall_cnt_cnt_cur_R2 = { 32{ !nvdla_bdma_cfg_status_0_stall_count_en }} & ( _005__R | ( { 32{ nvdla_bdma_cfg_status_0_stall_count_en_T  }} & _005__C ));
  assign grp1_read_stall_cnt_cnt_cur_X2 = { 32{ !nvdla_bdma_cfg_status_0_stall_count_en }} & _005__X ;
  assign _004_ = nvdla_bdma_cfg_status_0_stall_count_en ? grp0_read_stall_cnt_cnt_nxt : grp0_read_stall_cnt_cnt_cur;
  logic [0:0] nvdla_bdma_cfg_status_0_stall_count_en_C1 ;
  logic [0:0] nvdla_bdma_cfg_status_0_stall_count_en_R1 ;
  logic [0:0] nvdla_bdma_cfg_status_0_stall_count_en_X1 ;
  assign nvdla_bdma_cfg_status_0_stall_count_en_C1 = | _004__C ;
  assign nvdla_bdma_cfg_status_0_stall_count_en_X1 = | _004__X ;
  assign _004__T = nvdla_bdma_cfg_status_0_stall_count_en ? ( { 32{ nvdla_bdma_cfg_status_0_stall_count_en_T  }} | grp0_read_stall_cnt_cnt_nxt_T ) : ( { 32{ nvdla_bdma_cfg_status_0_stall_count_en_T  }} | grp0_read_stall_cnt_cnt_cur_T );
  assign _004__S = nvdla_bdma_cfg_status_0_stall_count_en ? grp0_read_stall_cnt_cnt_nxt_S : grp0_read_stall_cnt_cnt_cur_S ;
  assign nvdla_bdma_cfg_status_0_stall_count_en_R1 = ( | (_004__R | ( _004__C & ( { 32{ nvdla_bdma_cfg_status_0_stall_count_en }} & grp0_read_stall_cnt_cnt_nxt_T | { 32{ !nvdla_bdma_cfg_status_0_stall_count_en }} & grp0_read_stall_cnt_cnt_cur_T )))) && grp0_read_stall_cnt_cnt_nxt != grp0_read_stall_cnt_cnt_cur ;
  logic [31:0] grp0_read_stall_cnt_cnt_nxt_C0 ;
  logic [31:0] grp0_read_stall_cnt_cnt_nxt_R0 ;
  logic [31:0] grp0_read_stall_cnt_cnt_nxt_X0 ;
  assign grp0_read_stall_cnt_cnt_nxt_C0 = { 32{ nvdla_bdma_cfg_status_0_stall_count_en }} ;
  assign grp0_read_stall_cnt_cnt_nxt_R0 = { 32{ nvdla_bdma_cfg_status_0_stall_count_en }} & ( _004__R | ( { 32{ nvdla_bdma_cfg_status_0_stall_count_en_T  }} & _004__C ));
  assign grp0_read_stall_cnt_cnt_nxt_X0 = { 32{ nvdla_bdma_cfg_status_0_stall_count_en }} & _004__X ;
  logic [31:0] grp0_read_stall_cnt_cnt_cur_C2 ;
  logic [31:0] grp0_read_stall_cnt_cnt_cur_R2 ;
  logic [31:0] grp0_read_stall_cnt_cnt_cur_X2 ;
  assign grp0_read_stall_cnt_cnt_cur_C2 = { 32{ !nvdla_bdma_cfg_status_0_stall_count_en }} ;
  assign grp0_read_stall_cnt_cnt_cur_R2 = { 32{ !nvdla_bdma_cfg_status_0_stall_count_en }} & ( _004__R | ( { 32{ nvdla_bdma_cfg_status_0_stall_count_en_T  }} & _004__C ));
  assign grp0_read_stall_cnt_cnt_cur_X2 = { 32{ !nvdla_bdma_cfg_status_0_stall_count_en }} & _004__X ;
  assign _030_ = st2csb_grp1_done ? 1'b0 : status_grp1_busy;
  logic [0:0] st2csb_grp1_done_C3 ;
  logic [0:0] st2csb_grp1_done_R3 ;
  logic [0:0] st2csb_grp1_done_X3 ;
  assign st2csb_grp1_done_C3 = | _030__C ;
  assign st2csb_grp1_done_X3 = | _030__X ;
  logic [0:0] status_grp1_busy_C0 ;
  logic [0:0] status_grp1_busy_R0 ;
  logic [0:0] status_grp1_busy_X0 ;
  assign status_grp1_busy_C0 = { 1{ !st2csb_grp1_done }};
  assign status_grp1_busy_R0 = { 1{ !st2csb_grp1_done }} & ( _030__R | ( { 1{ st2csb_grp1_done_T  }} & _030__C ));
  assign status_grp1_busy_X0 = { 1{ !st2csb_grp1_done }} & _030__X ;
  assign _030__T = st2csb_grp1_done ? { 1{ | st2csb_grp1_done_T  }} : ( { 1{ | st2csb_grp1_done_T  }} | status_grp1_busy_T );
  assign _030__S = st2csb_grp1_done ? st2csb_grp1_done_S : status_grp1_busy_S ;
  assign st2csb_grp1_done_R3 = ( | (_030__R | ( { 1{ !st2csb_grp1_done }} & status_grp1_busy_T & _030__C ))) && 1'b0 != status_grp1_busy ;
  assign _013_ = grp1_cmd_launch ? 1'b1 : _030_;
  logic [0:0] grp1_cmd_launch_C3 ;
  logic [0:0] grp1_cmd_launch_R3 ;
  logic [0:0] grp1_cmd_launch_X3 ;
  assign grp1_cmd_launch_C3 = | _013__C ;
  assign grp1_cmd_launch_X3 = | _013__X ;
  logic [0:0] _030__C0 ;
  logic [0:0] _030__R0 ;
  logic [0:0] _030__X0 ;
  assign _030__C0 = { 1{ !grp1_cmd_launch }};
  assign _030__R0 = { 1{ !grp1_cmd_launch }} & ( _013__R | ( { 1{ grp1_cmd_launch_T  }} & _013__C ));
  assign _030__X0 = { 1{ !grp1_cmd_launch }} & _013__X ;
  assign _013__T = grp1_cmd_launch ? { 1{ | grp1_cmd_launch_T  }} : ( { 1{ | grp1_cmd_launch_T  }} | _030__T );
  assign _013__S = grp1_cmd_launch ? grp1_cmd_launch_S : _030__S ;
  assign grp1_cmd_launch_R3 = ( | (_013__R | ( { 1{ !grp1_cmd_launch }} & _030__T & _013__C ))) && 1'b1 != _030_ ;
  assign _031_ = st2csb_grp0_done ? 1'b0 : status_grp0_busy;
  logic [0:0] st2csb_grp0_done_C3 ;
  logic [0:0] st2csb_grp0_done_R3 ;
  logic [0:0] st2csb_grp0_done_X3 ;
  assign st2csb_grp0_done_C3 = | _031__C ;
  assign st2csb_grp0_done_X3 = | _031__X ;
  logic [0:0] status_grp0_busy_C0 ;
  logic [0:0] status_grp0_busy_R0 ;
  logic [0:0] status_grp0_busy_X0 ;
  assign status_grp0_busy_C0 = { 1{ !st2csb_grp0_done }};
  assign status_grp0_busy_R0 = { 1{ !st2csb_grp0_done }} & ( _031__R | ( { 1{ st2csb_grp0_done_T  }} & _031__C ));
  assign status_grp0_busy_X0 = { 1{ !st2csb_grp0_done }} & _031__X ;
  assign _031__T = st2csb_grp0_done ? { 1{ | st2csb_grp0_done_T  }} : ( { 1{ | st2csb_grp0_done_T  }} | status_grp0_busy_T );
  assign _031__S = st2csb_grp0_done ? st2csb_grp0_done_S : status_grp0_busy_S ;
  assign st2csb_grp0_done_R3 = ( | (_031__R | ( { 1{ !st2csb_grp0_done }} & status_grp0_busy_T & _031__C ))) && 1'b0 != status_grp0_busy ;
  assign _010_ = grp0_cmd_launch ? 1'b1 : _031_;
  logic [0:0] grp0_cmd_launch_C3 ;
  logic [0:0] grp0_cmd_launch_R3 ;
  logic [0:0] grp0_cmd_launch_X3 ;
  assign grp0_cmd_launch_C3 = | _010__C ;
  assign grp0_cmd_launch_X3 = | _010__X ;
  logic [0:0] _031__C0 ;
  logic [0:0] _031__R0 ;
  logic [0:0] _031__X0 ;
  assign _031__C0 = { 1{ !grp0_cmd_launch }};
  assign _031__R0 = { 1{ !grp0_cmd_launch }} & ( _010__R | ( { 1{ grp0_cmd_launch_T  }} & _010__C ));
  assign _031__X0 = { 1{ !grp0_cmd_launch }} & _010__X ;
  assign _010__T = grp0_cmd_launch ? { 1{ | grp0_cmd_launch_T  }} : ( { 1{ | grp0_cmd_launch_T  }} | _031__T );
  assign _010__S = grp0_cmd_launch ? grp0_cmd_launch_S : _031__S ;
  assign grp0_cmd_launch_R3 = ( | (_010__R | ( { 1{ !grp0_cmd_launch }} & _031__T & _010__C ))) && 1'b1 != _031_ ;
  assign _032_ = gather_vld ? gather_ptr : launch_ptr;
  logic [0:0] gather_vld_C3 ;
  logic [0:0] gather_vld_R3 ;
  logic [0:0] gather_vld_X3 ;
  assign gather_vld_C3 = | _032__C ;
  assign gather_vld_X3 = | _032__X ;
  assign _032__T = gather_vld ? ( { 1{ gather_vld_T  }} | gather_ptr_T ) : ( { 1{ gather_vld_T  }} | launch_ptr_T );
  assign _032__S = gather_vld ? gather_ptr_S : launch_ptr_S ;
  assign gather_vld_R3 = ( | (_032__R | ( _032__C & ( { 1{ gather_vld }} & gather_ptr_T | { 1{ !gather_vld }} & launch_ptr_T )))) && gather_ptr != launch_ptr ;
  logic [0:0] gather_ptr_C0 ;
  logic [0:0] gather_ptr_R0 ;
  logic [0:0] gather_ptr_X0 ;
  assign gather_ptr_C0 = { 1{ gather_vld }} ;
  assign gather_ptr_R0 = { 1{ gather_vld }} & ( _032__R | ( { 1{ gather_vld_T  }} & _032__C ));
  assign gather_ptr_X0 = { 1{ gather_vld }} & _032__X ;
  logic [0:0] launch_ptr_C0 ;
  logic [0:0] launch_ptr_R0 ;
  logic [0:0] launch_ptr_X0 ;
  assign launch_ptr_C0 = { 1{ !gather_vld }} ;
  assign launch_ptr_R0 = { 1{ !gather_vld }} & ( _032__R | ( { 1{ gather_vld_T  }} & _032__C ));
  assign launch_ptr_X0 = { 1{ !gather_vld }} & _032__X ;
  assign _033_ = is_last_cmd ? _032_ : launch_ptr;
  logic [0:0] is_last_cmd_C1 ;
  logic [0:0] is_last_cmd_R1 ;
  logic [0:0] is_last_cmd_X1 ;
  assign is_last_cmd_C1 = | _033__C ;
  assign is_last_cmd_X1 = | _033__X ;
  assign _033__T = is_last_cmd ? ( { 1{ is_last_cmd_T  }} | _032__T ) : ( { 1{ is_last_cmd_T  }} | launch_ptr_T );
  assign _033__S = is_last_cmd ? _032__S : launch_ptr_S ;
  assign is_last_cmd_R1 = ( | (_033__R | ( _033__C & ( { 1{ is_last_cmd }} & _032__T | { 1{ !is_last_cmd }} & launch_ptr_T )))) && _032_ != launch_ptr ;
  logic [0:0] _032__C0 ;
  logic [0:0] _032__R0 ;
  logic [0:0] _032__X0 ;
  assign _032__C0 = { 1{ is_last_cmd }} ;
  assign _032__R0 = { 1{ is_last_cmd }} & ( _033__R | ( { 1{ is_last_cmd_T  }} & _033__C ));
  assign _032__X0 = { 1{ is_last_cmd }} & _033__X ;
  logic [0:0] launch_ptr_C1 ;
  logic [0:0] launch_ptr_R1 ;
  logic [0:0] launch_ptr_X1 ;
  assign launch_ptr_C1 = { 1{ !is_last_cmd }} ;
  assign launch_ptr_R1 = { 1{ !is_last_cmd }} & ( _033__R | ( { 1{ is_last_cmd_T  }} & _033__C ));
  assign launch_ptr_X1 = { 1{ !is_last_cmd }} & _033__X ;
  assign _034_ = csb2ld_rdy ? _033_ : launch_ptr;
  logic [0:0] csb2ld_rdy_C1 ;
  logic [0:0] csb2ld_rdy_R1 ;
  logic [0:0] csb2ld_rdy_X1 ;
  assign csb2ld_rdy_C1 = | _034__C ;
  assign csb2ld_rdy_X1 = | _034__X ;
  assign _034__T = csb2ld_rdy ? ( { 1{ csb2ld_rdy_T  }} | _033__T ) : ( { 1{ csb2ld_rdy_T  }} | launch_ptr_T );
  assign _034__S = csb2ld_rdy ? _033__S : launch_ptr_S ;
  assign csb2ld_rdy_R1 = ( | (_034__R | ( _034__C & ( { 1{ csb2ld_rdy }} & _033__T | { 1{ !csb2ld_rdy }} & launch_ptr_T )))) && _033_ != launch_ptr ;
  logic [0:0] _033__C0 ;
  logic [0:0] _033__R0 ;
  logic [0:0] _033__X0 ;
  assign _033__C0 = { 1{ csb2ld_rdy }} ;
  assign _033__R0 = { 1{ csb2ld_rdy }} & ( _034__R | ( { 1{ csb2ld_rdy_T  }} & _034__C ));
  assign _033__X0 = { 1{ csb2ld_rdy }} & _034__X ;
  logic [0:0] launch_ptr_C2 ;
  logic [0:0] launch_ptr_R2 ;
  logic [0:0] launch_ptr_X2 ;
  assign launch_ptr_C2 = { 1{ !csb2ld_rdy }} ;
  assign launch_ptr_R2 = { 1{ !csb2ld_rdy }} & ( _034__R | ( { 1{ csb2ld_rdy_T  }} & _034__C ));
  assign launch_ptr_X2 = { 1{ !csb2ld_rdy }} & _034__X ;
  assign _007_ = launch_vld ? _034_ : _032_;
  logic [0:0] launch_vld_C2 ;
  logic [0:0] launch_vld_R2 ;
  logic [0:0] launch_vld_X2 ;
  assign launch_vld_C2 = | _007__C ;
  assign launch_vld_X2 = | _007__X ;
  assign _007__T = launch_vld ? ( { 1{ launch_vld_T  }} | _034__T ) : ( { 1{ launch_vld_T  }} | _032__T );
  assign _007__S = launch_vld ? _034__S : _032__S ;
  assign launch_vld_R2 = ( | (_007__R | ( _007__C & ( { 1{ launch_vld }} & _034__T | { 1{ !launch_vld }} & _032__T )))) && _034_ != _032_ ;
  logic [0:0] _034__C0 ;
  logic [0:0] _034__R0 ;
  logic [0:0] _034__X0 ;
  assign _034__C0 = { 1{ launch_vld }} ;
  assign _034__R0 = { 1{ launch_vld }} & ( _007__R | ( { 1{ launch_vld_T  }} & _007__C ));
  assign _034__X0 = { 1{ launch_vld }} & _007__X ;
  logic [0:0] _032__C1 ;
  logic [0:0] _032__R1 ;
  logic [0:0] _032__X1 ;
  assign _032__C1 = { 1{ !launch_vld }} ;
  assign _032__R1 = { 1{ !launch_vld }} & ( _007__R | ( { 1{ launch_vld_T  }} & _007__C ));
  assign _032__X1 = { 1{ !launch_vld }} & _007__X ;
  assign _035_ = gather_vld ? gather_count : launch_count;
  logic [0:0] gather_vld_C4 ;
  logic [0:0] gather_vld_R4 ;
  logic [0:0] gather_vld_X4 ;
  assign gather_vld_C4 = | _035__C ;
  assign gather_vld_X4 = | _035__X ;
  assign _035__T = gather_vld ? ( { 5{ gather_vld_T  }} | gather_count_T ) : ( { 5{ gather_vld_T  }} | launch_count_T );
  assign _035__S = gather_vld ? gather_count_S : launch_count_S ;
  assign gather_vld_R4 = ( | (_035__R | ( _035__C & ( { 5{ gather_vld }} & gather_count_T | { 5{ !gather_vld }} & launch_count_T )))) && gather_count != launch_count ;
  logic [4:0] gather_count_C1 ;
  logic [4:0] gather_count_R1 ;
  logic [4:0] gather_count_X1 ;
  assign gather_count_C1 = { 5{ gather_vld }} ;
  assign gather_count_R1 = { 5{ gather_vld }} & ( _035__R | ( { 5{ gather_vld_T  }} & _035__C ));
  assign gather_count_X1 = { 5{ gather_vld }} & _035__X ;
  logic [4:0] launch_count_C2 ;
  logic [4:0] launch_count_R2 ;
  logic [4:0] launch_count_X2 ;
  assign launch_count_C2 = { 5{ !gather_vld }} ;
  assign launch_count_R2 = { 5{ !gather_vld }} & ( _035__R | ( { 5{ gather_vld_T  }} & _035__C ));
  assign launch_count_X2 = { 5{ !gather_vld }} & _035__X ;
  assign _036_ = gather_vld ? gather_count : _020_[4:0];
  logic [0:0] gather_vld_C5 ;
  logic [0:0] gather_vld_R5 ;
  logic [0:0] gather_vld_X5 ;
  assign gather_vld_C5 = | _036__C ;
  assign gather_vld_X5 = | _036__X ;
  assign _036__T = gather_vld ? ( { 5{ gather_vld_T  }} | gather_count_T ) : ( { 5{ gather_vld_T  }} | _020__T [4:0] );
  assign _036__S = gather_vld ? gather_count_S : _020__S ;
  assign gather_vld_R5 = ( | (_036__R | ( _036__C & ( { 5{ gather_vld }} & gather_count_T | { 5{ !gather_vld }} & _020__T [4:0] )))) && gather_count != _020_[4:0] ;
  logic [4:0] gather_count_C2 ;
  logic [4:0] gather_count_R2 ;
  logic [4:0] gather_count_X2 ;
  assign gather_count_C2 = { 5{ gather_vld }} ;
  assign gather_count_R2 = { 5{ gather_vld }} & ( _036__R | ( { 5{ gather_vld_T  }} & _036__C ));
  assign gather_count_X2 = { 5{ gather_vld }} & _036__X ;
  logic [31:0] _020__C0 ;
  logic [31:0] _020__R0 ;
  logic [31:0] _020__X0 ;
  assign _020__C0 [4:0] = { 5{ !gather_vld }} ;
  assign _020__R0 [4:0] = { 5{ !gather_vld }} & ( _036__R | ( { 5{ gather_vld_T  }} & _036__C ));
  assign _020__X0 [4:0] = { 5{ !gather_vld }} & _036__X ;
  assign _037_ = is_last_cmd ? _036_ : _020_[4:0];
  logic [0:0] is_last_cmd_C2 ;
  logic [0:0] is_last_cmd_R2 ;
  logic [0:0] is_last_cmd_X2 ;
  assign is_last_cmd_C2 = | _037__C ;
  assign is_last_cmd_X2 = | _037__X ;
  assign _037__T = is_last_cmd ? ( { 5{ is_last_cmd_T  }} | _036__T ) : ( { 5{ is_last_cmd_T  }} | _020__T [4:0] );
  assign _037__S = is_last_cmd ? _036__S : _020__S ;
  assign is_last_cmd_R2 = ( | (_037__R | ( _037__C & ( { 5{ is_last_cmd }} & _036__T | { 5{ !is_last_cmd }} & _020__T [4:0] )))) && _036_ != _020_[4:0] ;
  assign { _020__R0 [31:5] } = 0;
  assign { _020__X0 [31:5] } = 0;
  assign { _020__C0 [31:5] } = 0;
  logic [4:0] _036__C0 ;
  logic [4:0] _036__R0 ;
  logic [4:0] _036__X0 ;
  assign _036__C0 = { 5{ is_last_cmd }} ;
  assign _036__R0 = { 5{ is_last_cmd }} & ( _037__R | ( { 5{ is_last_cmd_T  }} & _037__C ));
  assign _036__X0 = { 5{ is_last_cmd }} & _037__X ;
  logic [31:0] _020__C1 ;
  logic [31:0] _020__R1 ;
  logic [31:0] _020__X1 ;
  assign _020__C1 [4:0] = { 5{ !is_last_cmd }} ;
  assign _020__R1 [4:0] = { 5{ !is_last_cmd }} & ( _037__R | ( { 5{ is_last_cmd_T  }} & _037__C ));
  assign _020__X1 [4:0] = { 5{ !is_last_cmd }} & _037__X ;
  assign _038_ = csb2ld_rdy ? _037_ : launch_count;
  logic [0:0] csb2ld_rdy_C2 ;
  logic [0:0] csb2ld_rdy_R2 ;
  logic [0:0] csb2ld_rdy_X2 ;
  assign csb2ld_rdy_C2 = | _038__C ;
  assign csb2ld_rdy_X2 = | _038__X ;
  assign _038__T = csb2ld_rdy ? ( { 5{ csb2ld_rdy_T  }} | _037__T ) : ( { 5{ csb2ld_rdy_T  }} | launch_count_T );
  assign _038__S = csb2ld_rdy ? _037__S : launch_count_S ;
  assign csb2ld_rdy_R2 = ( | (_038__R | ( _038__C & ( { 5{ csb2ld_rdy }} & _037__T | { 5{ !csb2ld_rdy }} & launch_count_T )))) && _037_ != launch_count ;
  logic [4:0] _037__C0 ;
  logic [4:0] _037__R0 ;
  logic [4:0] _037__X0 ;
  assign _037__C0 = { 5{ csb2ld_rdy }} ;
  assign _037__R0 = { 5{ csb2ld_rdy }} & ( _038__R | ( { 5{ csb2ld_rdy_T  }} & _038__C ));
  assign _037__X0 = { 5{ csb2ld_rdy }} & _038__X ;
  logic [4:0] launch_count_C3 ;
  logic [4:0] launch_count_R3 ;
  logic [4:0] launch_count_X3 ;
  assign launch_count_C3 = { 5{ !csb2ld_rdy }} ;
  assign launch_count_R3 = { 5{ !csb2ld_rdy }} & ( _038__R | ( { 5{ csb2ld_rdy_T  }} & _038__C ));
  assign launch_count_X3 = { 5{ !csb2ld_rdy }} & _038__X ;
  assign _006_ = launch_vld ? _038_ : _035_;
  logic [0:0] launch_vld_C3 ;
  logic [0:0] launch_vld_R3 ;
  logic [0:0] launch_vld_X3 ;
  assign launch_vld_C3 = | _006__C ;
  assign launch_vld_X3 = | _006__X ;
  assign _006__T = launch_vld ? ( { 5{ launch_vld_T  }} | _038__T ) : ( { 5{ launch_vld_T  }} | _035__T );
  assign _006__S = launch_vld ? _038__S : _035__S ;
  assign launch_vld_R3 = ( | (_006__R | ( _006__C & ( { 5{ launch_vld }} & _038__T | { 5{ !launch_vld }} & _035__T )))) && _038_ != _035_ ;
  logic [4:0] _038__C0 ;
  logic [4:0] _038__R0 ;
  logic [4:0] _038__X0 ;
  assign _038__C0 = { 5{ launch_vld }} ;
  assign _038__R0 = { 5{ launch_vld }} & ( _006__R | ( { 5{ launch_vld_T  }} & _006__C ));
  assign _038__X0 = { 5{ launch_vld }} & _006__X ;
  logic [4:0] _035__C0 ;
  logic [4:0] _035__R0 ;
  logic [4:0] _035__X0 ;
  assign _035__C0 = { 5{ !launch_vld }} ;
  assign _035__R0 = { 5{ !launch_vld }} & ( _006__R | ( { 5{ launch_vld_T  }} & _006__C ));
  assign _035__X0 = { 5{ !launch_vld }} & _006__X ;
  assign _039_ = grp1_cmd_launch ? 1'b1 : gather_ptr;
  logic [0:0] grp1_cmd_launch_C4 ;
  logic [0:0] grp1_cmd_launch_R4 ;
  logic [0:0] grp1_cmd_launch_X4 ;
  assign grp1_cmd_launch_C4 = | _039__C ;
  assign grp1_cmd_launch_X4 = | _039__X ;
  logic [0:0] gather_ptr_C1 ;
  logic [0:0] gather_ptr_R1 ;
  logic [0:0] gather_ptr_X1 ;
  assign gather_ptr_C1 = { 1{ !grp1_cmd_launch }};
  assign gather_ptr_R1 = { 1{ !grp1_cmd_launch }} & ( _039__R | ( { 1{ grp1_cmd_launch_T  }} & _039__C ));
  assign gather_ptr_X1 = { 1{ !grp1_cmd_launch }} & _039__X ;
  assign _039__T = grp1_cmd_launch ? { 1{ | grp1_cmd_launch_T  }} : ( { 1{ | grp1_cmd_launch_T  }} | gather_ptr_T );
  assign _039__S = grp1_cmd_launch ? grp1_cmd_launch_S : gather_ptr_S ;
  assign grp1_cmd_launch_R4 = ( | (_039__R | ( { 1{ !grp1_cmd_launch }} & gather_ptr_T & _039__C ))) && 1'b1 != gather_ptr ;
  assign _002_ = grp0_cmd_launch ? 1'b0 : _039_;
  logic [0:0] grp0_cmd_launch_C4 ;
  logic [0:0] grp0_cmd_launch_R4 ;
  logic [0:0] grp0_cmd_launch_X4 ;
  assign grp0_cmd_launch_C4 = | _002__C ;
  assign grp0_cmd_launch_X4 = | _002__X ;
  logic [0:0] _039__C0 ;
  logic [0:0] _039__R0 ;
  logic [0:0] _039__X0 ;
  assign _039__C0 = { 1{ !grp0_cmd_launch }};
  assign _039__R0 = { 1{ !grp0_cmd_launch }} & ( _002__R | ( { 1{ grp0_cmd_launch_T  }} & _002__C ));
  assign _039__X0 = { 1{ !grp0_cmd_launch }} & _002__X ;
  assign _002__T = grp0_cmd_launch ? { 1{ | grp0_cmd_launch_T  }} : ( { 1{ | grp0_cmd_launch_T  }} | _039__T );
  assign _002__S = grp0_cmd_launch ? grp0_cmd_launch_S : _039__S ;
  assign grp0_cmd_launch_R4 = ( | (_002__R | ( { 1{ !grp0_cmd_launch }} & _039__T & _002__C ))) && 1'b0 != _039_ ;
  assign _003_ = cmd_launch_rdy ? cmd_launch_vld : gather_vld;
  logic [0:0] cmd_launch_rdy_C0 ;
  logic [0:0] cmd_launch_rdy_R0 ;
  logic [0:0] cmd_launch_rdy_X0 ;
  assign cmd_launch_rdy_C0 = | _003__C ;
  assign cmd_launch_rdy_X0 = | _003__X ;
  assign _003__T = cmd_launch_rdy ? ( { 1{ cmd_launch_rdy_T  }} | cmd_launch_vld_T ) : ( { 1{ cmd_launch_rdy_T  }} | gather_vld_T );
  assign _003__S = cmd_launch_rdy ? cmd_launch_vld_S : gather_vld_S ;
  assign cmd_launch_rdy_R0 = ( | (_003__R | ( _003__C & ( { 1{ cmd_launch_rdy }} & cmd_launch_vld_T | { 1{ !cmd_launch_rdy }} & gather_vld_T )))) && cmd_launch_vld != gather_vld ;
  logic [0:0] cmd_launch_vld_C1 ;
  logic [0:0] cmd_launch_vld_R1 ;
  logic [0:0] cmd_launch_vld_X1 ;
  assign cmd_launch_vld_C1 = { 1{ cmd_launch_rdy }} ;
  assign cmd_launch_vld_R1 = { 1{ cmd_launch_rdy }} & ( _003__R | ( { 1{ cmd_launch_rdy_T  }} & _003__C ));
  assign cmd_launch_vld_X1 = { 1{ cmd_launch_rdy }} & _003__X ;
  logic [0:0] gather_vld_C6 ;
  logic [0:0] gather_vld_R6 ;
  logic [0:0] gather_vld_X6 ;
  assign gather_vld_C6 = { 1{ !cmd_launch_rdy }} ;
  assign gather_vld_R6 = { 1{ !cmd_launch_rdy }} & ( _003__R | ( { 1{ cmd_launch_rdy_T  }} & _003__C ));
  assign gather_vld_X6 = { 1{ !cmd_launch_rdy }} & _003__X ;
  assign _040_ = csb_fifo_wr_pvld ? _016_ : gather_count;
  logic [0:0] csb_fifo_wr_pvld_C0 ;
  logic [0:0] csb_fifo_wr_pvld_R0 ;
  logic [0:0] csb_fifo_wr_pvld_X0 ;
  assign csb_fifo_wr_pvld_C0 = | _040__C ;
  assign csb_fifo_wr_pvld_X0 = | _040__X ;
  assign _040__T = csb_fifo_wr_pvld ? ( { 5{ csb_fifo_wr_pvld_T  }} | _016__T ) : ( { 5{ csb_fifo_wr_pvld_T  }} | gather_count_T );
  assign _040__S = csb_fifo_wr_pvld ? _016__S : gather_count_S ;
  assign csb_fifo_wr_pvld_R0 = ( | (_040__R | ( _040__C & ( { 5{ csb_fifo_wr_pvld }} & _016__T | { 5{ !csb_fifo_wr_pvld }} & gather_count_T )))) && _016_ != gather_count ;
  logic [4:0] _016__C0 ;
  logic [4:0] _016__R0 ;
  logic [4:0] _016__X0 ;
  assign _016__C0 = { 5{ csb_fifo_wr_pvld }} ;
  assign _016__R0 = { 5{ csb_fifo_wr_pvld }} & ( _040__R | ( { 5{ csb_fifo_wr_pvld_T  }} & _040__C ));
  assign _016__X0 = { 5{ csb_fifo_wr_pvld }} & _040__X ;
  logic [4:0] gather_count_C3 ;
  logic [4:0] gather_count_R3 ;
  logic [4:0] gather_count_X3 ;
  assign gather_count_C3 = { 5{ !csb_fifo_wr_pvld }} ;
  assign gather_count_R3 = { 5{ !csb_fifo_wr_pvld }} & ( _040__R | ( { 5{ csb_fifo_wr_pvld_T  }} & _040__C ));
  assign gather_count_X3 = { 5{ !csb_fifo_wr_pvld }} & _040__X ;
  logic [4:0] fangyuan5;
  logic [4:0] fangyuan5_T ;
  logic [4:0] fangyuan5_R ;
  logic [4:0] fangyuan5_C ;
  logic [4:0] fangyuan5_X ;
  assign fangyuan5 = { 4'b0000, csb_fifo_wr_pvld };
  assign fangyuan5_T = {  4'h0 , csb_fifo_wr_pvld_T  };
  logic [13:0] fangyuan5_S ;
  assign fangyuan5_S = 0 ;
  logic [0:0] csb_fifo_wr_pvld_R1 ;
  logic [0:0] csb_fifo_wr_pvld_X1 ;
  logic [0:0] csb_fifo_wr_pvld_C1 ;
  assign csb_fifo_wr_pvld_R1 = fangyuan5_R [0:0] ;
  assign csb_fifo_wr_pvld_X1 = fangyuan5_X [0:0] ;
  assign csb_fifo_wr_pvld_C1 = fangyuan5_C [0:0] ;

  assign _001_ = gather_to_launch ? fangyuan5 : _040_;
  logic [0:0] gather_to_launch_C0 ;
  logic [0:0] gather_to_launch_R0 ;
  logic [0:0] gather_to_launch_X0 ;
  assign gather_to_launch_C0 = | _001__C ;
  assign gather_to_launch_X0 = | _001__X ;
  assign _001__T = gather_to_launch ? ( { 5{ gather_to_launch_T  }} | fangyuan5_T ) : ( { 5{ gather_to_launch_T  }} | _040__T );
  assign _001__S = gather_to_launch ? fangyuan5_S : _040__S ;
  assign gather_to_launch_R0 = ( | (_001__R | ( _001__C & ( { 5{ gather_to_launch }} & fangyuan5_T | { 5{ !gather_to_launch }} & _040__T )))) && fangyuan5 != _040_ ;
  logic [4:0] fangyuan5_C0 ;
  logic [4:0] fangyuan5_R0 ;
  logic [4:0] fangyuan5_X0 ;
  assign fangyuan5_C0 = { 5{ gather_to_launch }} ;
  assign fangyuan5_R0 = { 5{ gather_to_launch }} & ( _001__R | ( { 5{ gather_to_launch_T  }} & _001__C ));
  assign fangyuan5_X0 = { 5{ gather_to_launch }} & _001__X ;
  logic [4:0] _040__C0 ;
  logic [4:0] _040__R0 ;
  logic [4:0] _040__X0 ;
  assign _040__C0 = { 5{ !gather_to_launch }} ;
  assign _040__R0 = { 5{ !gather_to_launch }} & ( _001__R | ( { 5{ gather_to_launch_T  }} & _001__C ));
  assign _040__X0 = { 5{ !gather_to_launch }} & _001__X ;
  logic [33:0] fangyuan6;
  logic [33:0] fangyuan6_T ;
  logic [33:0] fangyuan6_R ;
  logic [33:0] fangyuan6_C ;
  logic [33:0] fangyuan6_X ;
  assign fangyuan6 = { rsp_wr_vld, rsp_pd };
  assign fangyuan6_T = {  rsp_wr_vld_T , rsp_pd_T  };
  logic [13:0] fangyuan6_S ;
  assign fangyuan6_S = 0 ;
  logic [0:0] rsp_wr_vld_R34 ;
  logic [0:0] rsp_wr_vld_X34 ;
  logic [0:0] rsp_wr_vld_C34 ;
  assign rsp_wr_vld_R34 = fangyuan6_R [33:33] ;
  assign rsp_wr_vld_X34 = fangyuan6_X [33:33] ;
  assign rsp_wr_vld_C34 = fangyuan6_C [33:33] ;
  logic [32:0] rsp_pd_R0 ;
  logic [32:0] rsp_pd_X0 ;
  logic [32:0] rsp_pd_C0 ;
  assign rsp_pd_R0 = fangyuan6_R [32:0] ;
  assign rsp_pd_X0 = fangyuan6_X [32:0] ;
  assign rsp_pd_C0 = fangyuan6_C [32:0] ;

  assign _000_ = rsp_vld ? fangyuan6 : bdma2csb_resp_pd;
  logic [0:0] rsp_vld_C1 ;
  logic [0:0] rsp_vld_R1 ;
  logic [0:0] rsp_vld_X1 ;
  assign rsp_vld_C1 = | _000__C ;
  assign rsp_vld_X1 = | _000__X ;
  assign _000__T = rsp_vld ? ( { 34{ rsp_vld_T  }} | fangyuan6_T ) : ( { 34{ rsp_vld_T  }} | bdma2csb_resp_pd_T );
  assign _000__S = rsp_vld ? fangyuan6_S : bdma2csb_resp_pd_S ;
  assign rsp_vld_R1 = ( | (_000__R | ( _000__C & ( { 34{ rsp_vld }} & fangyuan6_T | { 34{ !rsp_vld }} & bdma2csb_resp_pd_T )))) && fangyuan6 != bdma2csb_resp_pd ;
  logic [33:0] fangyuan6_C0 ;
  logic [33:0] fangyuan6_R0 ;
  logic [33:0] fangyuan6_X0 ;
  assign fangyuan6_C0 = { 34{ rsp_vld }} ;
  assign fangyuan6_R0 = { 34{ rsp_vld }} & ( _000__R | ( { 34{ rsp_vld_T  }} & _000__C ));
  assign fangyuan6_X0 = { 34{ rsp_vld }} & _000__X ;
  logic [33:0] bdma2csb_resp_pd_C1 ;
  logic [33:0] bdma2csb_resp_pd_R1 ;
  logic [33:0] bdma2csb_resp_pd_X1 ;
  assign bdma2csb_resp_pd_C1 = { 34{ !rsp_vld }} ;
  assign bdma2csb_resp_pd_R1 = { 34{ !rsp_vld }} & ( _000__R | ( { 34{ rsp_vld_T  }} & _000__C ));
  assign bdma2csb_resp_pd_X1 = { 34{ !rsp_vld }} & _000__X ;
  assign _008_ = csb2bdma_req_pvld ? csb2bdma_req_pd : req_pd;
  logic [0:0] csb2bdma_req_pvld_C1 ;
  logic [0:0] csb2bdma_req_pvld_R1 ;
  logic [0:0] csb2bdma_req_pvld_X1 ;
  assign csb2bdma_req_pvld_C1 = | _008__C ;
  assign csb2bdma_req_pvld_X1 = | _008__X ;
  assign _008__T = csb2bdma_req_pvld ? ( { 63{ csb2bdma_req_pvld_T  }} | csb2bdma_req_pd_T ) : ( { 63{ csb2bdma_req_pvld_T  }} | req_pd_T );
  assign _008__S = csb2bdma_req_pvld ? csb2bdma_req_pd_S : req_pd_S ;
  assign csb2bdma_req_pvld_R1 = ( | (_008__R | ( _008__C & ( { 63{ csb2bdma_req_pvld }} & csb2bdma_req_pd_T | { 63{ !csb2bdma_req_pvld }} & req_pd_T )))) && csb2bdma_req_pd != req_pd ;
  assign { req_pd_R1 [0], req_pd_R1 [1], req_pd_R1 [2], req_pd_R1 [3], req_pd_R1 [4], req_pd_R1 [5], req_pd_R1 [6], req_pd_R1 [7], req_pd_R1 [8], req_pd_R1 [9], req_pd_R1 [10], req_pd_R1 [11], req_pd_R1 [12], req_pd_R1 [13], req_pd_R1 [14], req_pd_R1 [15], req_pd_R1 [16], req_pd_R1 [17], req_pd_R1 [18], req_pd_R1 [19], req_pd_R1 [20], req_pd_R1 [21], req_pd_R1 [22], req_pd_R1 [23], req_pd_R1 [24], req_pd_R1 [25], req_pd_R1 [26], req_pd_R1 [27], req_pd_R1 [28], req_pd_R1 [29], req_pd_R1 [30], req_pd_R1 [31], req_pd_R1 [32], req_pd_R1 [33], req_pd_R1 [34], req_pd_R1 [35], req_pd_R1 [36], req_pd_R1 [37], req_pd_R1 [38], req_pd_R1 [39], req_pd_R1 [40], req_pd_R1 [41], req_pd_R1 [42], req_pd_R1 [43], req_pd_R1 [44], req_pd_R1 [45], req_pd_R1 [46], req_pd_R1 [47], req_pd_R1 [48], req_pd_R1 [49], req_pd_R1 [50], req_pd_R1 [51], req_pd_R1 [52], req_pd_R1 [53], req_pd_R1 [62:55] } = 0;
  assign { req_pd_X1 [0], req_pd_X1 [1], req_pd_X1 [2], req_pd_X1 [3], req_pd_X1 [4], req_pd_X1 [5], req_pd_X1 [6], req_pd_X1 [7], req_pd_X1 [8], req_pd_X1 [9], req_pd_X1 [10], req_pd_X1 [11], req_pd_X1 [12], req_pd_X1 [13], req_pd_X1 [14], req_pd_X1 [15], req_pd_X1 [16], req_pd_X1 [17], req_pd_X1 [18], req_pd_X1 [19], req_pd_X1 [20], req_pd_X1 [21], req_pd_X1 [22], req_pd_X1 [23], req_pd_X1 [24], req_pd_X1 [25], req_pd_X1 [26], req_pd_X1 [27], req_pd_X1 [28], req_pd_X1 [29], req_pd_X1 [30], req_pd_X1 [31], req_pd_X1 [32], req_pd_X1 [33], req_pd_X1 [34], req_pd_X1 [35], req_pd_X1 [36], req_pd_X1 [37], req_pd_X1 [38], req_pd_X1 [39], req_pd_X1 [40], req_pd_X1 [41], req_pd_X1 [42], req_pd_X1 [43], req_pd_X1 [44], req_pd_X1 [45], req_pd_X1 [46], req_pd_X1 [47], req_pd_X1 [48], req_pd_X1 [49], req_pd_X1 [50], req_pd_X1 [51], req_pd_X1 [52], req_pd_X1 [53], req_pd_X1 [62:55] } = 0;
  assign { req_pd_C1 [0], req_pd_C1 [1], req_pd_C1 [2], req_pd_C1 [3], req_pd_C1 [4], req_pd_C1 [5], req_pd_C1 [6], req_pd_C1 [7], req_pd_C1 [8], req_pd_C1 [9], req_pd_C1 [10], req_pd_C1 [11], req_pd_C1 [12], req_pd_C1 [13], req_pd_C1 [14], req_pd_C1 [15], req_pd_C1 [16], req_pd_C1 [17], req_pd_C1 [18], req_pd_C1 [19], req_pd_C1 [20], req_pd_C1 [21], req_pd_C1 [22], req_pd_C1 [23], req_pd_C1 [24], req_pd_C1 [25], req_pd_C1 [26], req_pd_C1 [27], req_pd_C1 [28], req_pd_C1 [29], req_pd_C1 [30], req_pd_C1 [31], req_pd_C1 [32], req_pd_C1 [33], req_pd_C1 [34], req_pd_C1 [35], req_pd_C1 [36], req_pd_C1 [37], req_pd_C1 [38], req_pd_C1 [39], req_pd_C1 [40], req_pd_C1 [41], req_pd_C1 [42], req_pd_C1 [43], req_pd_C1 [44], req_pd_C1 [45], req_pd_C1 [46], req_pd_C1 [47], req_pd_C1 [48], req_pd_C1 [49], req_pd_C1 [50], req_pd_C1 [51], req_pd_C1 [52], req_pd_C1 [53], req_pd_C1 [62:55] } = 0;
  logic [62:0] csb2bdma_req_pd_C0 ;
  logic [62:0] csb2bdma_req_pd_R0 ;
  logic [62:0] csb2bdma_req_pd_X0 ;
  assign csb2bdma_req_pd_C0 = { 63{ csb2bdma_req_pvld }} ;
  assign csb2bdma_req_pd_R0 = { 63{ csb2bdma_req_pvld }} & ( _008__R | ( { 63{ csb2bdma_req_pvld_T  }} & _008__C ));
  assign csb2bdma_req_pd_X0 = { 63{ csb2bdma_req_pvld }} & _008__X ;
  logic [62:0] req_pd_C2 ;
  logic [62:0] req_pd_R2 ;
  logic [62:0] req_pd_X2 ;
  assign req_pd_C2 = { 63{ !csb2bdma_req_pvld }} ;
  assign req_pd_R2 = { 63{ !csb2bdma_req_pvld }} & ( _008__R | ( { 63{ csb2bdma_req_pvld_T  }} & _008__C ));
  assign req_pd_X2 = { 63{ !csb2bdma_req_pvld }} & _008__X ;
  logic [5:0] fangyuan7;
  logic [5:0] fangyuan7_T ;
  logic [5:0] fangyuan7_R ;
  logic [5:0] fangyuan7_C ;
  logic [5:0] fangyuan7_X ;
  assign fangyuan7 = { nvdla_bdma_status_0_free_slot[7], nvdla_bdma_status_0_free_slot[4:0] };
  assign fangyuan7_T = {  nvdla_bdma_status_0_free_slot_T [7] , nvdla_bdma_status_0_free_slot_T [4:0]  };
  logic [13:0] fangyuan7_S ;
  assign fangyuan7_S = 0 ;
  logic [7:0] nvdla_bdma_status_0_free_slot_R0 ;
  logic [7:0] nvdla_bdma_status_0_free_slot_X0 ;
  logic [7:0] nvdla_bdma_status_0_free_slot_C0 ;
  assign nvdla_bdma_status_0_free_slot_R0 [7:7] = fangyuan7_R [5:5] ;
  assign nvdla_bdma_status_0_free_slot_X0 [7:7] = fangyuan7_X [5:5] ;
  assign nvdla_bdma_status_0_free_slot_C0 [7:7] = fangyuan7_C [5:5] ;
  assign nvdla_bdma_status_0_free_slot_R0 [4:0] = fangyuan7_R [4:0] ;
  assign nvdla_bdma_status_0_free_slot_X0 [4:0] = fangyuan7_X [4:0] ;
  assign nvdla_bdma_status_0_free_slot_C0 [4:0] = fangyuan7_C [4:0] ;

  assign fangyuan7 = 5'b10100 - csb_fifo_wr_count;
  assign fangyuan7_S = 0 ;
  logic [4:0] csb_fifo_wr_count_C0 ;
  logic [4:0] csb_fifo_wr_count_R0 ;
  logic [4:0] csb_fifo_wr_count_X0 ;
  assign fangyuan7_T = csb_fifo_wr_count_T ;
  assign csb_fifo_wr_count_C0 = fangyuan7_C ;
  assign csb_fifo_wr_count_R0 = fangyuan7_R ;
  assign csb_fifo_wr_count_X0 = fangyuan7_X ;
  assign _020_[4:0] = launch_count - 1'b1;
  assign _020__S = 0 ;
  logic [4:0] launch_count_C4 ;
  logic [4:0] launch_count_R4 ;
  logic [4:0] launch_count_X4 ;
  assign _020__T [4:0] = launch_count_T ;
  assign launch_count_C4 = _020__C [4:0] ;
  assign launch_count_R4 = _020__R [4:0] ;
  assign launch_count_X4 = _020__X [4:0] ;
  assign grp0_read_stall_cnt_cnt_new = ld2csb_grp0_dma_stall_inc ? grp0_read_stall_cnt_cnt_inc : grp0_read_stall_cnt_cnt_cur;
  logic [0:0] ld2csb_grp0_dma_stall_inc_C0 ;
  logic [0:0] ld2csb_grp0_dma_stall_inc_R0 ;
  logic [0:0] ld2csb_grp0_dma_stall_inc_X0 ;
  assign ld2csb_grp0_dma_stall_inc_C0 = | grp0_read_stall_cnt_cnt_new_C ;
  assign ld2csb_grp0_dma_stall_inc_X0 = | grp0_read_stall_cnt_cnt_new_X ;
  assign grp0_read_stall_cnt_cnt_new_T = ld2csb_grp0_dma_stall_inc ? ( { 32{ ld2csb_grp0_dma_stall_inc_T  }} | grp0_read_stall_cnt_cnt_inc_T ) : ( { 32{ ld2csb_grp0_dma_stall_inc_T  }} | grp0_read_stall_cnt_cnt_cur_T );
  assign grp0_read_stall_cnt_cnt_new_S = ld2csb_grp0_dma_stall_inc ? grp0_read_stall_cnt_cnt_inc_S : grp0_read_stall_cnt_cnt_cur_S ;
  assign ld2csb_grp0_dma_stall_inc_R0 = ( | (grp0_read_stall_cnt_cnt_new_R | ( grp0_read_stall_cnt_cnt_new_C & ( { 32{ ld2csb_grp0_dma_stall_inc }} & grp0_read_stall_cnt_cnt_inc_T | { 32{ !ld2csb_grp0_dma_stall_inc }} & grp0_read_stall_cnt_cnt_cur_T )))) && grp0_read_stall_cnt_cnt_inc != grp0_read_stall_cnt_cnt_cur ;
  logic [31:0] grp0_read_stall_cnt_cnt_inc_C0 ;
  logic [31:0] grp0_read_stall_cnt_cnt_inc_R0 ;
  logic [31:0] grp0_read_stall_cnt_cnt_inc_X0 ;
  assign grp0_read_stall_cnt_cnt_inc_C0 = { 32{ ld2csb_grp0_dma_stall_inc }} ;
  assign grp0_read_stall_cnt_cnt_inc_R0 = { 32{ ld2csb_grp0_dma_stall_inc }} & ( grp0_read_stall_cnt_cnt_new_R | ( { 32{ ld2csb_grp0_dma_stall_inc_T  }} & grp0_read_stall_cnt_cnt_new_C ));
  assign grp0_read_stall_cnt_cnt_inc_X0 = { 32{ ld2csb_grp0_dma_stall_inc }} & grp0_read_stall_cnt_cnt_new_X ;
  logic [31:0] grp0_read_stall_cnt_cnt_cur_C3 ;
  logic [31:0] grp0_read_stall_cnt_cnt_cur_R3 ;
  logic [31:0] grp0_read_stall_cnt_cnt_cur_X3 ;
  assign grp0_read_stall_cnt_cnt_cur_C3 = { 32{ !ld2csb_grp0_dma_stall_inc }} ;
  assign grp0_read_stall_cnt_cnt_cur_R3 = { 32{ !ld2csb_grp0_dma_stall_inc }} & ( grp0_read_stall_cnt_cnt_new_R | ( { 32{ ld2csb_grp0_dma_stall_inc_T  }} & grp0_read_stall_cnt_cnt_new_C ));
  assign grp0_read_stall_cnt_cnt_cur_X3 = { 32{ !ld2csb_grp0_dma_stall_inc }} & grp0_read_stall_cnt_cnt_new_X ;
  assign grp0_read_stall_cnt_cnt_nxt = st2csb_grp0_done ? 32'd0 : grp0_read_stall_cnt_cnt_new;
  logic [0:0] st2csb_grp0_done_C4 ;
  logic [0:0] st2csb_grp0_done_R4 ;
  logic [0:0] st2csb_grp0_done_X4 ;
  assign st2csb_grp0_done_C4 = | grp0_read_stall_cnt_cnt_nxt_C ;
  assign st2csb_grp0_done_X4 = | grp0_read_stall_cnt_cnt_nxt_X ;
  logic [31:0] grp0_read_stall_cnt_cnt_new_C0 ;
  logic [31:0] grp0_read_stall_cnt_cnt_new_R0 ;
  logic [31:0] grp0_read_stall_cnt_cnt_new_X0 ;
  assign grp0_read_stall_cnt_cnt_new_C0 = { 32{ !st2csb_grp0_done }};
  assign grp0_read_stall_cnt_cnt_new_R0 = { 32{ !st2csb_grp0_done }} & ( grp0_read_stall_cnt_cnt_nxt_R | ( { 32{ st2csb_grp0_done_T  }} & grp0_read_stall_cnt_cnt_nxt_C ));
  assign grp0_read_stall_cnt_cnt_new_X0 = { 32{ !st2csb_grp0_done }} & grp0_read_stall_cnt_cnt_nxt_X ;
  assign grp0_read_stall_cnt_cnt_nxt_T = st2csb_grp0_done ? { 32{ | st2csb_grp0_done_T  }} : ( { 32{ | st2csb_grp0_done_T  }} | grp0_read_stall_cnt_cnt_new_T );
  assign grp0_read_stall_cnt_cnt_nxt_S = st2csb_grp0_done ? st2csb_grp0_done_S : grp0_read_stall_cnt_cnt_new_S ;
  assign st2csb_grp0_done_R4 = ( | (grp0_read_stall_cnt_cnt_nxt_R | ( { 32{ !st2csb_grp0_done }} & grp0_read_stall_cnt_cnt_new_T & grp0_read_stall_cnt_cnt_nxt_C ))) && 32'd0 != grp0_read_stall_cnt_cnt_new ;
  assign grp1_read_stall_cnt_cnt_new = ld2csb_grp1_dma_stall_inc ? grp1_read_stall_cnt_cnt_inc : grp1_read_stall_cnt_cnt_cur;
  logic [0:0] ld2csb_grp1_dma_stall_inc_C0 ;
  logic [0:0] ld2csb_grp1_dma_stall_inc_R0 ;
  logic [0:0] ld2csb_grp1_dma_stall_inc_X0 ;
  assign ld2csb_grp1_dma_stall_inc_C0 = | grp1_read_stall_cnt_cnt_new_C ;
  assign ld2csb_grp1_dma_stall_inc_X0 = | grp1_read_stall_cnt_cnt_new_X ;
  assign grp1_read_stall_cnt_cnt_new_T = ld2csb_grp1_dma_stall_inc ? ( { 32{ ld2csb_grp1_dma_stall_inc_T  }} | grp1_read_stall_cnt_cnt_inc_T ) : ( { 32{ ld2csb_grp1_dma_stall_inc_T  }} | grp1_read_stall_cnt_cnt_cur_T );
  assign grp1_read_stall_cnt_cnt_new_S = ld2csb_grp1_dma_stall_inc ? grp1_read_stall_cnt_cnt_inc_S : grp1_read_stall_cnt_cnt_cur_S ;
  assign ld2csb_grp1_dma_stall_inc_R0 = ( | (grp1_read_stall_cnt_cnt_new_R | ( grp1_read_stall_cnt_cnt_new_C & ( { 32{ ld2csb_grp1_dma_stall_inc }} & grp1_read_stall_cnt_cnt_inc_T | { 32{ !ld2csb_grp1_dma_stall_inc }} & grp1_read_stall_cnt_cnt_cur_T )))) && grp1_read_stall_cnt_cnt_inc != grp1_read_stall_cnt_cnt_cur ;
  logic [31:0] grp1_read_stall_cnt_cnt_inc_C0 ;
  logic [31:0] grp1_read_stall_cnt_cnt_inc_R0 ;
  logic [31:0] grp1_read_stall_cnt_cnt_inc_X0 ;
  assign grp1_read_stall_cnt_cnt_inc_C0 = { 32{ ld2csb_grp1_dma_stall_inc }} ;
  assign grp1_read_stall_cnt_cnt_inc_R0 = { 32{ ld2csb_grp1_dma_stall_inc }} & ( grp1_read_stall_cnt_cnt_new_R | ( { 32{ ld2csb_grp1_dma_stall_inc_T  }} & grp1_read_stall_cnt_cnt_new_C ));
  assign grp1_read_stall_cnt_cnt_inc_X0 = { 32{ ld2csb_grp1_dma_stall_inc }} & grp1_read_stall_cnt_cnt_new_X ;
  logic [31:0] grp1_read_stall_cnt_cnt_cur_C3 ;
  logic [31:0] grp1_read_stall_cnt_cnt_cur_R3 ;
  logic [31:0] grp1_read_stall_cnt_cnt_cur_X3 ;
  assign grp1_read_stall_cnt_cnt_cur_C3 = { 32{ !ld2csb_grp1_dma_stall_inc }} ;
  assign grp1_read_stall_cnt_cnt_cur_R3 = { 32{ !ld2csb_grp1_dma_stall_inc }} & ( grp1_read_stall_cnt_cnt_new_R | ( { 32{ ld2csb_grp1_dma_stall_inc_T  }} & grp1_read_stall_cnt_cnt_new_C ));
  assign grp1_read_stall_cnt_cnt_cur_X3 = { 32{ !ld2csb_grp1_dma_stall_inc }} & grp1_read_stall_cnt_cnt_new_X ;
  assign grp1_read_stall_cnt_cnt_nxt = st2csb_grp1_done ? 32'd0 : grp1_read_stall_cnt_cnt_new;
  logic [0:0] st2csb_grp1_done_C4 ;
  logic [0:0] st2csb_grp1_done_R4 ;
  logic [0:0] st2csb_grp1_done_X4 ;
  assign st2csb_grp1_done_C4 = | grp1_read_stall_cnt_cnt_nxt_C ;
  assign st2csb_grp1_done_X4 = | grp1_read_stall_cnt_cnt_nxt_X ;
  logic [31:0] grp1_read_stall_cnt_cnt_new_C0 ;
  logic [31:0] grp1_read_stall_cnt_cnt_new_R0 ;
  logic [31:0] grp1_read_stall_cnt_cnt_new_X0 ;
  assign grp1_read_stall_cnt_cnt_new_C0 = { 32{ !st2csb_grp1_done }};
  assign grp1_read_stall_cnt_cnt_new_R0 = { 32{ !st2csb_grp1_done }} & ( grp1_read_stall_cnt_cnt_nxt_R | ( { 32{ st2csb_grp1_done_T  }} & grp1_read_stall_cnt_cnt_nxt_C ));
  assign grp1_read_stall_cnt_cnt_new_X0 = { 32{ !st2csb_grp1_done }} & grp1_read_stall_cnt_cnt_nxt_X ;
  assign grp1_read_stall_cnt_cnt_nxt_T = st2csb_grp1_done ? { 32{ | st2csb_grp1_done_T  }} : ( { 32{ | st2csb_grp1_done_T  }} | grp1_read_stall_cnt_cnt_new_T );
  assign grp1_read_stall_cnt_cnt_nxt_S = st2csb_grp1_done ? st2csb_grp1_done_S : grp1_read_stall_cnt_cnt_new_S ;
  assign st2csb_grp1_done_R4 = ( | (grp1_read_stall_cnt_cnt_nxt_R | ( { 32{ !st2csb_grp1_done }} & grp1_read_stall_cnt_cnt_new_T & grp1_read_stall_cnt_cnt_nxt_C ))) && 32'd0 != grp1_read_stall_cnt_cnt_new ;
  logic [0:0] csb2ld_rdy_R3 ;
  logic [0:0] csb2ld_rdy_X3 ;
  logic [0:0] csb2ld_rdy_C3 ;
  logic [26:0] nvdla_bdma_cfg_src_addr_low_0_v32_R0 ;
  logic [26:0] nvdla_bdma_cfg_src_addr_low_0_v32_X0 ;
  logic [26:0] nvdla_bdma_cfg_src_addr_low_0_v32_C0 ;
  logic [31:0] nvdla_bdma_cfg_src_addr_high_0_v8_R0 ;
  logic [31:0] nvdla_bdma_cfg_src_addr_high_0_v8_X0 ;
  logic [31:0] nvdla_bdma_cfg_src_addr_high_0_v8_C0 ;
  logic [26:0] nvdla_bdma_cfg_dst_addr_low_0_v32_R0 ;
  logic [26:0] nvdla_bdma_cfg_dst_addr_low_0_v32_X0 ;
  logic [26:0] nvdla_bdma_cfg_dst_addr_low_0_v32_C0 ;
  logic [31:0] nvdla_bdma_cfg_dst_addr_high_0_v8_R0 ;
  logic [31:0] nvdla_bdma_cfg_dst_addr_high_0_v8_X0 ;
  logic [31:0] nvdla_bdma_cfg_dst_addr_high_0_v8_C0 ;
  logic [12:0] nvdla_bdma_cfg_line_0_size_R0 ;
  logic [12:0] nvdla_bdma_cfg_line_0_size_X0 ;
  logic [12:0] nvdla_bdma_cfg_line_0_size_C0 ;
  logic [0:0] nvdla_bdma_cfg_cmd_0_src_ram_type_R0 ;
  logic [0:0] nvdla_bdma_cfg_cmd_0_src_ram_type_X0 ;
  logic [0:0] nvdla_bdma_cfg_cmd_0_src_ram_type_C0 ;
  logic [0:0] nvdla_bdma_cfg_cmd_0_dst_ram_type_R0 ;
  logic [0:0] nvdla_bdma_cfg_cmd_0_dst_ram_type_X0 ;
  logic [0:0] nvdla_bdma_cfg_cmd_0_dst_ram_type_C0 ;
  logic [23:0] nvdla_bdma_cfg_line_repeat_0_number_R0 ;
  logic [23:0] nvdla_bdma_cfg_line_repeat_0_number_X0 ;
  logic [23:0] nvdla_bdma_cfg_line_repeat_0_number_C0 ;
  logic [26:0] nvdla_bdma_cfg_src_line_0_stride_R0 ;
  logic [26:0] nvdla_bdma_cfg_src_line_0_stride_X0 ;
  logic [26:0] nvdla_bdma_cfg_src_line_0_stride_C0 ;
  logic [26:0] nvdla_bdma_cfg_dst_line_0_stride_R0 ;
  logic [26:0] nvdla_bdma_cfg_dst_line_0_stride_X0 ;
  logic [26:0] nvdla_bdma_cfg_dst_line_0_stride_C0 ;
  logic [23:0] nvdla_bdma_cfg_surf_repeat_0_number_R0 ;
  logic [23:0] nvdla_bdma_cfg_surf_repeat_0_number_X0 ;
  logic [23:0] nvdla_bdma_cfg_surf_repeat_0_number_C0 ;
  logic [26:0] nvdla_bdma_cfg_src_surf_0_stride_R0 ;
  logic [26:0] nvdla_bdma_cfg_src_surf_0_stride_X0 ;
  logic [26:0] nvdla_bdma_cfg_src_surf_0_stride_C0 ;
  logic [26:0] nvdla_bdma_cfg_dst_surf_0_stride_R0 ;
  logic [26:0] nvdla_bdma_cfg_dst_surf_0_stride_X0 ;
  logic [26:0] nvdla_bdma_cfg_dst_surf_0_stride_C0 ;
  logic [0:0] csb_fifo_wr_pvld_R2 ;
  logic [0:0] csb_fifo_wr_pvld_X2 ;
  logic [0:0] csb_fifo_wr_pvld_C2 ;
  logic [0:0] nvdla_core_rstn_R0 ;
  logic [0:0] nvdla_core_rstn_X0 ;
  logic [0:0] nvdla_core_rstn_C0 ;
  logic [31:0] pwrbus_ram_pd_R0 ;
  logic [31:0] pwrbus_ram_pd_X0 ;
  logic [31:0] pwrbus_ram_pd_C0 ;
// module: NV_NVDLA_BDMA_LOAD_csb_fifo
  NV_NVDLA_BDMA_LOAD_csb_fifo csb_fifo (
    .csb_fifo_rd_prdy_T (  csb2ld_rdy_T  ),
    .csb_fifo_rd_prdy_R (  csb2ld_rdy_R3  ),
    .csb_fifo_rd_prdy_X (  csb2ld_rdy_X3  ),
    .csb_fifo_rd_prdy_C (  csb2ld_rdy_C3  ),
    .csb_fifo_rd_prdy_S (  csb2ld_rdy_S  ),
    .csb_fifo_wr_pd_T ( {  nvdla_bdma_cfg_src_addr_low_0_v32_T , nvdla_bdma_cfg_src_addr_high_0_v8_T , nvdla_bdma_cfg_dst_addr_low_0_v32_T , nvdla_bdma_cfg_dst_addr_high_0_v8_T , nvdla_bdma_cfg_line_0_size_T , nvdla_bdma_cfg_cmd_0_src_ram_type_T , nvdla_bdma_cfg_cmd_0_dst_ram_type_T , nvdla_bdma_cfg_line_repeat_0_number_T , nvdla_bdma_cfg_src_line_0_stride_T , nvdla_bdma_cfg_dst_line_0_stride_T , nvdla_bdma_cfg_surf_repeat_0_number_T , nvdla_bdma_cfg_src_surf_0_stride_T , nvdla_bdma_cfg_dst_surf_0_stride_T  } ),
    .csb_fifo_wr_pd_R ( {  nvdla_bdma_cfg_src_addr_low_0_v32_R0 , nvdla_bdma_cfg_src_addr_high_0_v8_R0 , nvdla_bdma_cfg_dst_addr_low_0_v32_R0 , nvdla_bdma_cfg_dst_addr_high_0_v8_R0 , nvdla_bdma_cfg_line_0_size_R0 , nvdla_bdma_cfg_cmd_0_src_ram_type_R0 , nvdla_bdma_cfg_cmd_0_dst_ram_type_R0 , nvdla_bdma_cfg_line_repeat_0_number_R0 , nvdla_bdma_cfg_src_line_0_stride_R0 , nvdla_bdma_cfg_dst_line_0_stride_R0 , nvdla_bdma_cfg_surf_repeat_0_number_R0 , nvdla_bdma_cfg_src_surf_0_stride_R0 , nvdla_bdma_cfg_dst_surf_0_stride_R0  } ),
    .csb_fifo_wr_pd_X ( {  nvdla_bdma_cfg_src_addr_low_0_v32_X0 , nvdla_bdma_cfg_src_addr_high_0_v8_X0 , nvdla_bdma_cfg_dst_addr_low_0_v32_X0 , nvdla_bdma_cfg_dst_addr_high_0_v8_X0 , nvdla_bdma_cfg_line_0_size_X0 , nvdla_bdma_cfg_cmd_0_src_ram_type_X0 , nvdla_bdma_cfg_cmd_0_dst_ram_type_X0 , nvdla_bdma_cfg_line_repeat_0_number_X0 , nvdla_bdma_cfg_src_line_0_stride_X0 , nvdla_bdma_cfg_dst_line_0_stride_X0 , nvdla_bdma_cfg_surf_repeat_0_number_X0 , nvdla_bdma_cfg_src_surf_0_stride_X0 , nvdla_bdma_cfg_dst_surf_0_stride_X0  } ),
    .csb_fifo_wr_pd_C ( {  nvdla_bdma_cfg_src_addr_low_0_v32_C0 , nvdla_bdma_cfg_src_addr_high_0_v8_C0 , nvdla_bdma_cfg_dst_addr_low_0_v32_C0 , nvdla_bdma_cfg_dst_addr_high_0_v8_C0 , nvdla_bdma_cfg_line_0_size_C0 , nvdla_bdma_cfg_cmd_0_src_ram_type_C0 , nvdla_bdma_cfg_cmd_0_dst_ram_type_C0 , nvdla_bdma_cfg_line_repeat_0_number_C0 , nvdla_bdma_cfg_src_line_0_stride_C0 , nvdla_bdma_cfg_dst_line_0_stride_C0 , nvdla_bdma_cfg_surf_repeat_0_number_C0 , nvdla_bdma_cfg_src_surf_0_stride_C0 , nvdla_bdma_cfg_dst_surf_0_stride_C0  } ),
    .csb_fifo_wr_pd_S ( {  nvdla_bdma_cfg_src_addr_low_0_v32_S , nvdla_bdma_cfg_src_addr_high_0_v8_S , nvdla_bdma_cfg_dst_addr_low_0_v32_S , nvdla_bdma_cfg_dst_addr_high_0_v8_S , nvdla_bdma_cfg_line_0_size_S , nvdla_bdma_cfg_cmd_0_src_ram_type_S , nvdla_bdma_cfg_cmd_0_dst_ram_type_S , nvdla_bdma_cfg_line_repeat_0_number_S , nvdla_bdma_cfg_src_line_0_stride_S , nvdla_bdma_cfg_dst_line_0_stride_S , nvdla_bdma_cfg_surf_repeat_0_number_S , nvdla_bdma_cfg_src_surf_0_stride_S , nvdla_bdma_cfg_dst_surf_0_stride_S  } ),
    .csb_fifo_wr_pvld_T (  csb_fifo_wr_pvld_T  ),
    .csb_fifo_wr_pvld_R (  csb_fifo_wr_pvld_R2  ),
    .csb_fifo_wr_pvld_X (  csb_fifo_wr_pvld_X2  ),
    .csb_fifo_wr_pvld_C (  csb_fifo_wr_pvld_C2  ),
    .csb_fifo_wr_pvld_S (  csb_fifo_wr_pvld_S  ),
    .nvdla_core_rstn_T (  nvdla_core_rstn_T  ),
    .nvdla_core_rstn_R (  nvdla_core_rstn_R0  ),
    .nvdla_core_rstn_X (  nvdla_core_rstn_X0  ),
    .nvdla_core_rstn_C (  nvdla_core_rstn_C0  ),
    .nvdla_core_rstn_S (  nvdla_core_rstn_S  ),
    .pwrbus_ram_pd_T (  pwrbus_ram_pd_T  ),
    .pwrbus_ram_pd_R (  pwrbus_ram_pd_R0  ),
    .pwrbus_ram_pd_X (  pwrbus_ram_pd_X0  ),
    .pwrbus_ram_pd_C (  pwrbus_ram_pd_C0  ),
    .pwrbus_ram_pd_S (  pwrbus_ram_pd_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .csb_fifo_rd_pd_T (  csb_fifo_rd_pd_T  ),
    .csb_fifo_rd_pd_R0 (  csb_fifo_rd_pd_R  ),
    .csb_fifo_rd_pd_X0 (  csb_fifo_rd_pd_X  ),
    .csb_fifo_rd_pd_C0 (  csb_fifo_rd_pd_C  ),
    .csb_fifo_rd_pd_S ( csb_fifo_rd_pd_S ),
    .csb_fifo_rd_pvld_T (  csb_fifo_rd_pvld_T  ),
    .csb_fifo_rd_pvld_R0 (  csb_fifo_rd_pvld_R  ),
    .csb_fifo_rd_pvld_X0 (  csb_fifo_rd_pvld_X  ),
    .csb_fifo_rd_pvld_C0 (  csb_fifo_rd_pvld_C  ),
    .csb_fifo_rd_pvld_S ( csb_fifo_rd_pvld_S ),
    .csb_fifo_wr_count_T (  csb_fifo_wr_count_T  ),
    .csb_fifo_wr_count_R0 (  csb_fifo_wr_count_R  ),
    .csb_fifo_wr_count_X0 (  csb_fifo_wr_count_X  ),
    .csb_fifo_wr_count_C0 (  csb_fifo_wr_count_C  ),
    .csb_fifo_wr_count_S ( csb_fifo_wr_count_S ),
    .csb_fifo_wr_idle_T (  csb_fifo_wr_idle_T  ),
    .csb_fifo_wr_idle_R0 (  csb_fifo_wr_idle_R  ),
    .csb_fifo_wr_idle_X0 (  csb_fifo_wr_idle_X  ),
    .csb_fifo_wr_idle_C0 (  csb_fifo_wr_idle_C  ),
    .csb_fifo_wr_idle_S ( csb_fifo_wr_idle_S ),
    .csb_fifo_wr_prdy_T (  csb_fifo_wr_prdy_T  ),
    .csb_fifo_wr_prdy_R0 (  csb_fifo_wr_prdy_R  ),
    .csb_fifo_wr_prdy_X0 (  csb_fifo_wr_prdy_X  ),
    .csb_fifo_wr_prdy_C0 (  csb_fifo_wr_prdy_C  ),
    .csb_fifo_wr_prdy_S ( csb_fifo_wr_prdy_S ),
    .pwrbus_ram_pd ( pwrbus_ram_pd ),
    .nvdla_core_rstn ( nvdla_core_rstn ),
    .nvdla_core_clk ( nvdla_core_clk ),
    .csb_fifo_wr_pvld ( csb_fifo_wr_pvld ),
    .csb_fifo_wr_prdy ( csb_fifo_wr_prdy ),
    .csb_fifo_wr_pd ( { nvdla_bdma_cfg_src_addr_low_0_v32, nvdla_bdma_cfg_src_addr_high_0_v8, nvdla_bdma_cfg_dst_addr_low_0_v32, nvdla_bdma_cfg_dst_addr_high_0_v8, nvdla_bdma_cfg_line_0_size, nvdla_bdma_cfg_cmd_0_src_ram_type, nvdla_bdma_cfg_cmd_0_dst_ram_type, nvdla_bdma_cfg_line_repeat_0_number, nvdla_bdma_cfg_src_line_0_stride, nvdla_bdma_cfg_dst_line_0_stride, nvdla_bdma_cfg_surf_repeat_0_number, nvdla_bdma_cfg_src_surf_0_stride, nvdla_bdma_cfg_dst_surf_0_stride } ),
    .csb_fifo_rd_prdy ( csb2ld_rdy ),
    .csb_fifo_rd_pd ( csb_fifo_rd_pd ),
    .csb_fifo_rd_pvld ( csb_fifo_rd_pvld ),
    .csb_fifo_wr_count ( csb_fifo_wr_count ),
    .csb_fifo_wr_idle ( csb_fifo_wr_idle )
  );
  assign { nvdla_bdma_status_0_free_slot_R0 [5], nvdla_bdma_status_0_free_slot_R0 [6] } = 0;
  assign { nvdla_bdma_status_0_free_slot_X0 [5], nvdla_bdma_status_0_free_slot_X0 [6] } = 0;
  assign { nvdla_bdma_status_0_free_slot_C0 [5], nvdla_bdma_status_0_free_slot_C0 [6] } = 0;
  assign { nvdla_bdma_status_0_free_slot_R1 [0], nvdla_bdma_status_0_free_slot_R1 [1], nvdla_bdma_status_0_free_slot_R1 [2], nvdla_bdma_status_0_free_slot_R1 [3], nvdla_bdma_status_0_free_slot_R1 [4], nvdla_bdma_status_0_free_slot_R1 [5], nvdla_bdma_status_0_free_slot_R1 [6] } = 0;
  assign { nvdla_bdma_status_0_free_slot_X1 [0], nvdla_bdma_status_0_free_slot_X1 [1], nvdla_bdma_status_0_free_slot_X1 [2], nvdla_bdma_status_0_free_slot_X1 [3], nvdla_bdma_status_0_free_slot_X1 [4], nvdla_bdma_status_0_free_slot_X1 [5], nvdla_bdma_status_0_free_slot_X1 [6] } = 0;
  assign { nvdla_bdma_status_0_free_slot_C1 [0], nvdla_bdma_status_0_free_slot_C1 [1], nvdla_bdma_status_0_free_slot_C1 [2], nvdla_bdma_status_0_free_slot_C1 [3], nvdla_bdma_status_0_free_slot_C1 [4], nvdla_bdma_status_0_free_slot_C1 [5], nvdla_bdma_status_0_free_slot_C1 [6] } = 0;
  assign { nvdla_bdma_status_0_free_slot_R2 [0], nvdla_bdma_status_0_free_slot_R2 [1], nvdla_bdma_status_0_free_slot_R2 [2], nvdla_bdma_status_0_free_slot_R2 [3], nvdla_bdma_status_0_free_slot_R2 [4], nvdla_bdma_status_0_free_slot_R2 [5], nvdla_bdma_status_0_free_slot_R2 [6] } = 0;
  assign { nvdla_bdma_status_0_free_slot_X2 [0], nvdla_bdma_status_0_free_slot_X2 [1], nvdla_bdma_status_0_free_slot_X2 [2], nvdla_bdma_status_0_free_slot_X2 [3], nvdla_bdma_status_0_free_slot_X2 [4], nvdla_bdma_status_0_free_slot_X2 [5], nvdla_bdma_status_0_free_slot_X2 [6] } = 0;
  assign { nvdla_bdma_status_0_free_slot_C2 [0], nvdla_bdma_status_0_free_slot_C2 [1], nvdla_bdma_status_0_free_slot_C2 [2], nvdla_bdma_status_0_free_slot_C2 [3], nvdla_bdma_status_0_free_slot_C2 [4], nvdla_bdma_status_0_free_slot_C2 [5], nvdla_bdma_status_0_free_slot_C2 [6] } = 0;
  logic [7:0] nvdla_bdma_status_0_free_slot_R1 ;
  logic [7:0] nvdla_bdma_status_0_free_slot_X1 ;
  logic [7:0] nvdla_bdma_status_0_free_slot_C1 ;
  logic [7:0] nvdla_bdma_status_0_free_slot_R2 ;
  logic [7:0] nvdla_bdma_status_0_free_slot_X2 ;
  logic [7:0] nvdla_bdma_status_0_free_slot_C2 ;
  logic [7:0] nvdla_bdma_status_0_free_slot_R3 ;
  logic [7:0] nvdla_bdma_status_0_free_slot_X3 ;
  logic [7:0] nvdla_bdma_status_0_free_slot_C3 ;
  logic [0:0] status_grp0_busy_R1 ;
  logic [0:0] status_grp0_busy_X1 ;
  logic [0:0] status_grp0_busy_C1 ;
  logic [0:0] status_grp1_busy_R1 ;
  logic [0:0] status_grp1_busy_X1 ;
  logic [0:0] status_grp1_busy_C1 ;
  logic [0:0] nvdla_bdma_status_0_idle_R0 ;
  logic [0:0] nvdla_bdma_status_0_idle_X0 ;
  logic [0:0] nvdla_bdma_status_0_idle_C0 ;
  logic [31:0] status_grp0_read_stall_count_R1 ;
  logic [31:0] status_grp0_read_stall_count_X1 ;
  logic [31:0] status_grp0_read_stall_count_C1 ;
  logic [31:0] status_grp0_write_stall_count_R1 ;
  logic [31:0] status_grp0_write_stall_count_X1 ;
  logic [31:0] status_grp0_write_stall_count_C1 ;
  logic [31:0] status_grp1_read_stall_count_R1 ;
  logic [31:0] status_grp1_read_stall_count_X1 ;
  logic [31:0] status_grp1_read_stall_count_C1 ;
  logic [31:0] status_grp1_write_stall_count_R1 ;
  logic [31:0] status_grp1_write_stall_count_X1 ;
  logic [31:0] status_grp1_write_stall_count_C1 ;
  logic [0:0] nvdla_core_rstn_R1 ;
  logic [0:0] nvdla_core_rstn_X1 ;
  logic [0:0] nvdla_core_rstn_C1 ;
  logic [62:0] req_pd_R3 ;
  logic [62:0] req_pd_X3 ;
  logic [62:0] req_pd_C3 ;
  logic [0:0] reg_wr_en_R1 ;
  logic [0:0] reg_wr_en_X1 ;
  logic [0:0] reg_wr_en_C1 ;
// module: NV_NVDLA_BDMA_reg
  NV_NVDLA_BDMA_reg u_NV_NVDLA_BDMA_reg (
    .nvdla_bdma_status_0_free_slot_T ( {  nvdla_bdma_status_0_free_slot_T [7] , nvdla_bdma_status_0_free_slot_T [7] , nvdla_bdma_status_0_free_slot_T [7] , nvdla_bdma_status_0_free_slot_T [4:0]  } ),
    .nvdla_bdma_status_0_free_slot_R ( {  nvdla_bdma_status_0_free_slot_R1 [7] , nvdla_bdma_status_0_free_slot_R2 [7] , nvdla_bdma_status_0_free_slot_R3 [7] , nvdla_bdma_status_0_free_slot_R3 [4:0]  } ),
    .nvdla_bdma_status_0_free_slot_X ( {  nvdla_bdma_status_0_free_slot_X1 [7] , nvdla_bdma_status_0_free_slot_X2 [7] , nvdla_bdma_status_0_free_slot_X3 [7] , nvdla_bdma_status_0_free_slot_X3 [4:0]  } ),
    .nvdla_bdma_status_0_free_slot_C ( {  nvdla_bdma_status_0_free_slot_C1 [7] , nvdla_bdma_status_0_free_slot_C2 [7] , nvdla_bdma_status_0_free_slot_C3 [7] , nvdla_bdma_status_0_free_slot_C3 [4:0]  } ),
    .nvdla_bdma_status_0_free_slot_S ( {  nvdla_bdma_status_0_free_slot_S [7] , nvdla_bdma_status_0_free_slot_S [7] , nvdla_bdma_status_0_free_slot_S [7] , nvdla_bdma_status_0_free_slot_S [4:0]  } ),
    .nvdla_bdma_status_0_grp0_busy_T (  status_grp0_busy_T  ),
    .nvdla_bdma_status_0_grp0_busy_R (  status_grp0_busy_R1  ),
    .nvdla_bdma_status_0_grp0_busy_X (  status_grp0_busy_X1  ),
    .nvdla_bdma_status_0_grp0_busy_C (  status_grp0_busy_C1  ),
    .nvdla_bdma_status_0_grp0_busy_S (  status_grp0_busy_S  ),
    .nvdla_bdma_status_0_grp1_busy_T (  status_grp1_busy_T  ),
    .nvdla_bdma_status_0_grp1_busy_R (  status_grp1_busy_R1  ),
    .nvdla_bdma_status_0_grp1_busy_X (  status_grp1_busy_X1  ),
    .nvdla_bdma_status_0_grp1_busy_C (  status_grp1_busy_C1  ),
    .nvdla_bdma_status_0_grp1_busy_S (  status_grp1_busy_S  ),
    .nvdla_bdma_status_0_idle_T (  nvdla_bdma_status_0_idle_T  ),
    .nvdla_bdma_status_0_idle_R (  nvdla_bdma_status_0_idle_R0  ),
    .nvdla_bdma_status_0_idle_X (  nvdla_bdma_status_0_idle_X0  ),
    .nvdla_bdma_status_0_idle_C (  nvdla_bdma_status_0_idle_C0  ),
    .nvdla_bdma_status_0_idle_S (  nvdla_bdma_status_0_idle_S  ),
    .nvdla_bdma_status_grp0_read_stall_0_count_T (  status_grp0_read_stall_count_T  ),
    .nvdla_bdma_status_grp0_read_stall_0_count_R (  status_grp0_read_stall_count_R1  ),
    .nvdla_bdma_status_grp0_read_stall_0_count_X (  status_grp0_read_stall_count_X1  ),
    .nvdla_bdma_status_grp0_read_stall_0_count_C (  status_grp0_read_stall_count_C1  ),
    .nvdla_bdma_status_grp0_read_stall_0_count_S (  status_grp0_read_stall_count_S  ),
    .nvdla_bdma_status_grp0_write_stall_0_count_T (  status_grp0_write_stall_count_T  ),
    .nvdla_bdma_status_grp0_write_stall_0_count_R (  status_grp0_write_stall_count_R1  ),
    .nvdla_bdma_status_grp0_write_stall_0_count_X (  status_grp0_write_stall_count_X1  ),
    .nvdla_bdma_status_grp0_write_stall_0_count_C (  status_grp0_write_stall_count_C1  ),
    .nvdla_bdma_status_grp0_write_stall_0_count_S (  status_grp0_write_stall_count_S  ),
    .nvdla_bdma_status_grp1_read_stall_0_count_T (  status_grp1_read_stall_count_T  ),
    .nvdla_bdma_status_grp1_read_stall_0_count_R (  status_grp1_read_stall_count_R1  ),
    .nvdla_bdma_status_grp1_read_stall_0_count_X (  status_grp1_read_stall_count_X1  ),
    .nvdla_bdma_status_grp1_read_stall_0_count_C (  status_grp1_read_stall_count_C1  ),
    .nvdla_bdma_status_grp1_read_stall_0_count_S (  status_grp1_read_stall_count_S  ),
    .nvdla_bdma_status_grp1_write_stall_0_count_T (  status_grp1_write_stall_count_T  ),
    .nvdla_bdma_status_grp1_write_stall_0_count_R (  status_grp1_write_stall_count_R1  ),
    .nvdla_bdma_status_grp1_write_stall_0_count_X (  status_grp1_write_stall_count_X1  ),
    .nvdla_bdma_status_grp1_write_stall_0_count_C (  status_grp1_write_stall_count_C1  ),
    .nvdla_bdma_status_grp1_write_stall_0_count_S (  status_grp1_write_stall_count_S  ),
    .nvdla_core_rstn_T (  nvdla_core_rstn_T  ),
    .nvdla_core_rstn_R (  nvdla_core_rstn_R1  ),
    .nvdla_core_rstn_X (  nvdla_core_rstn_X1  ),
    .nvdla_core_rstn_C (  nvdla_core_rstn_C1  ),
    .nvdla_core_rstn_S (  nvdla_core_rstn_S  ),
    .reg_offset_T ( {  req_pd_T [9:0] , 2'h0  } ),
    .reg_offset_R ( {  req_pd_R3 [9:0] , nouse_zy0  } ),
    .reg_offset_X ( {  req_pd_X3 [9:0] , nouse_zy1  } ),
    .reg_offset_C ( {  req_pd_C3 [9:0] , nouse_zy2  } ),
    .reg_offset_S ( {  req_pd_S [9:0] , 2'h0  } ),
    .reg_wr_data_T (  req_pd_T [53:22]  ),
    .reg_wr_data_R (  req_pd_R3 [53:22]  ),
    .reg_wr_data_X (  req_pd_X3 [53:22]  ),
    .reg_wr_data_C (  req_pd_C3 [53:22]  ),
    .reg_wr_data_S (  req_pd_S [53:22]  ),
    .reg_wr_en_T (  reg_wr_en_T  ),
    .reg_wr_en_R (  reg_wr_en_R1  ),
    .reg_wr_en_X (  reg_wr_en_X1  ),
    .reg_wr_en_C (  reg_wr_en_C1  ),
    .reg_wr_en_S (  reg_wr_en_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .nvdla_bdma_cfg_cmd_0_dst_ram_type_T (  nvdla_bdma_cfg_cmd_0_dst_ram_type_T  ),
    .nvdla_bdma_cfg_cmd_0_dst_ram_type_R0 (  nvdla_bdma_cfg_cmd_0_dst_ram_type_R  ),
    .nvdla_bdma_cfg_cmd_0_dst_ram_type_X0 (  nvdla_bdma_cfg_cmd_0_dst_ram_type_X  ),
    .nvdla_bdma_cfg_cmd_0_dst_ram_type_C0 (  nvdla_bdma_cfg_cmd_0_dst_ram_type_C  ),
    .nvdla_bdma_cfg_cmd_0_dst_ram_type_S ( nvdla_bdma_cfg_cmd_0_dst_ram_type_S ),
    .nvdla_bdma_cfg_cmd_0_src_ram_type_T (  nvdla_bdma_cfg_cmd_0_src_ram_type_T  ),
    .nvdla_bdma_cfg_cmd_0_src_ram_type_R0 (  nvdla_bdma_cfg_cmd_0_src_ram_type_R  ),
    .nvdla_bdma_cfg_cmd_0_src_ram_type_X0 (  nvdla_bdma_cfg_cmd_0_src_ram_type_X  ),
    .nvdla_bdma_cfg_cmd_0_src_ram_type_C0 (  nvdla_bdma_cfg_cmd_0_src_ram_type_C  ),
    .nvdla_bdma_cfg_cmd_0_src_ram_type_S ( nvdla_bdma_cfg_cmd_0_src_ram_type_S ),
    .nvdla_bdma_cfg_dst_addr_high_0_v8_T (  nvdla_bdma_cfg_dst_addr_high_0_v8_T  ),
    .nvdla_bdma_cfg_dst_addr_high_0_v8_R0 (  nvdla_bdma_cfg_dst_addr_high_0_v8_R  ),
    .nvdla_bdma_cfg_dst_addr_high_0_v8_X0 (  nvdla_bdma_cfg_dst_addr_high_0_v8_X  ),
    .nvdla_bdma_cfg_dst_addr_high_0_v8_C0 (  nvdla_bdma_cfg_dst_addr_high_0_v8_C  ),
    .nvdla_bdma_cfg_dst_addr_high_0_v8_S ( nvdla_bdma_cfg_dst_addr_high_0_v8_S ),
    .nvdla_bdma_cfg_dst_addr_low_0_v32_T (  nvdla_bdma_cfg_dst_addr_low_0_v32_T  ),
    .nvdla_bdma_cfg_dst_addr_low_0_v32_R0 (  nvdla_bdma_cfg_dst_addr_low_0_v32_R  ),
    .nvdla_bdma_cfg_dst_addr_low_0_v32_X0 (  nvdla_bdma_cfg_dst_addr_low_0_v32_X  ),
    .nvdla_bdma_cfg_dst_addr_low_0_v32_C0 (  nvdla_bdma_cfg_dst_addr_low_0_v32_C  ),
    .nvdla_bdma_cfg_dst_addr_low_0_v32_S ( nvdla_bdma_cfg_dst_addr_low_0_v32_S ),
    .nvdla_bdma_cfg_dst_line_0_stride_T (  nvdla_bdma_cfg_dst_line_0_stride_T  ),
    .nvdla_bdma_cfg_dst_line_0_stride_R0 (  nvdla_bdma_cfg_dst_line_0_stride_R  ),
    .nvdla_bdma_cfg_dst_line_0_stride_X0 (  nvdla_bdma_cfg_dst_line_0_stride_X  ),
    .nvdla_bdma_cfg_dst_line_0_stride_C0 (  nvdla_bdma_cfg_dst_line_0_stride_C  ),
    .nvdla_bdma_cfg_dst_line_0_stride_S ( nvdla_bdma_cfg_dst_line_0_stride_S ),
    .nvdla_bdma_cfg_dst_surf_0_stride_T (  nvdla_bdma_cfg_dst_surf_0_stride_T  ),
    .nvdla_bdma_cfg_dst_surf_0_stride_R0 (  nvdla_bdma_cfg_dst_surf_0_stride_R  ),
    .nvdla_bdma_cfg_dst_surf_0_stride_X0 (  nvdla_bdma_cfg_dst_surf_0_stride_X  ),
    .nvdla_bdma_cfg_dst_surf_0_stride_C0 (  nvdla_bdma_cfg_dst_surf_0_stride_C  ),
    .nvdla_bdma_cfg_dst_surf_0_stride_S ( nvdla_bdma_cfg_dst_surf_0_stride_S ),
    .nvdla_bdma_cfg_launch0_0_grp0_launch_T (  nvdla_bdma_cfg_launch0_0_grp0_launch_T  ),
    .nvdla_bdma_cfg_launch0_0_grp0_launch_R0 (  nvdla_bdma_cfg_launch0_0_grp0_launch_R  ),
    .nvdla_bdma_cfg_launch0_0_grp0_launch_X0 (  nvdla_bdma_cfg_launch0_0_grp0_launch_X  ),
    .nvdla_bdma_cfg_launch0_0_grp0_launch_C0 (  nvdla_bdma_cfg_launch0_0_grp0_launch_C  ),
    .nvdla_bdma_cfg_launch0_0_grp0_launch_S ( nvdla_bdma_cfg_launch0_0_grp0_launch_S ),
    .nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_T (  nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_T  ),
    .nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_R0 (  nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_R  ),
    .nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_X0 (  nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_X  ),
    .nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_C0 (  nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_C  ),
    .nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_S ( nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_S ),
    .nvdla_bdma_cfg_launch1_0_grp1_launch_T (  nvdla_bdma_cfg_launch1_0_grp1_launch_T  ),
    .nvdla_bdma_cfg_launch1_0_grp1_launch_R0 (  nvdla_bdma_cfg_launch1_0_grp1_launch_R  ),
    .nvdla_bdma_cfg_launch1_0_grp1_launch_X0 (  nvdla_bdma_cfg_launch1_0_grp1_launch_X  ),
    .nvdla_bdma_cfg_launch1_0_grp1_launch_C0 (  nvdla_bdma_cfg_launch1_0_grp1_launch_C  ),
    .nvdla_bdma_cfg_launch1_0_grp1_launch_S ( nvdla_bdma_cfg_launch1_0_grp1_launch_S ),
    .nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_T (  nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_T  ),
    .nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_R0 (  nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_R  ),
    .nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_X0 (  nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_X  ),
    .nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_C0 (  nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_C  ),
    .nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_S ( nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_S ),
    .nvdla_bdma_cfg_line_0_size_T (  nvdla_bdma_cfg_line_0_size_T  ),
    .nvdla_bdma_cfg_line_0_size_R0 (  nvdla_bdma_cfg_line_0_size_R  ),
    .nvdla_bdma_cfg_line_0_size_X0 (  nvdla_bdma_cfg_line_0_size_X  ),
    .nvdla_bdma_cfg_line_0_size_C0 (  nvdla_bdma_cfg_line_0_size_C  ),
    .nvdla_bdma_cfg_line_0_size_S ( nvdla_bdma_cfg_line_0_size_S ),
    .nvdla_bdma_cfg_line_repeat_0_number_T (  nvdla_bdma_cfg_line_repeat_0_number_T  ),
    .nvdla_bdma_cfg_line_repeat_0_number_R0 (  nvdla_bdma_cfg_line_repeat_0_number_R  ),
    .nvdla_bdma_cfg_line_repeat_0_number_X0 (  nvdla_bdma_cfg_line_repeat_0_number_X  ),
    .nvdla_bdma_cfg_line_repeat_0_number_C0 (  nvdla_bdma_cfg_line_repeat_0_number_C  ),
    .nvdla_bdma_cfg_line_repeat_0_number_S ( nvdla_bdma_cfg_line_repeat_0_number_S ),
    .nvdla_bdma_cfg_op_0_en_T (  nvdla_bdma_cfg_op_0_en_T  ),
    .nvdla_bdma_cfg_op_0_en_R0 (  nvdla_bdma_cfg_op_0_en_R  ),
    .nvdla_bdma_cfg_op_0_en_X0 (  nvdla_bdma_cfg_op_0_en_X  ),
    .nvdla_bdma_cfg_op_0_en_C0 (  nvdla_bdma_cfg_op_0_en_C  ),
    .nvdla_bdma_cfg_op_0_en_S ( nvdla_bdma_cfg_op_0_en_S ),
    .nvdla_bdma_cfg_op_0_en_trigger_T (  nvdla_bdma_cfg_op_0_en_trigger_T  ),
    .nvdla_bdma_cfg_op_0_en_trigger_R0 (  nvdla_bdma_cfg_op_0_en_trigger_R  ),
    .nvdla_bdma_cfg_op_0_en_trigger_X0 (  nvdla_bdma_cfg_op_0_en_trigger_X  ),
    .nvdla_bdma_cfg_op_0_en_trigger_C0 (  nvdla_bdma_cfg_op_0_en_trigger_C  ),
    .nvdla_bdma_cfg_op_0_en_trigger_S ( nvdla_bdma_cfg_op_0_en_trigger_S ),
    .nvdla_bdma_cfg_src_addr_high_0_v8_T (  nvdla_bdma_cfg_src_addr_high_0_v8_T  ),
    .nvdla_bdma_cfg_src_addr_high_0_v8_R0 (  nvdla_bdma_cfg_src_addr_high_0_v8_R  ),
    .nvdla_bdma_cfg_src_addr_high_0_v8_X0 (  nvdla_bdma_cfg_src_addr_high_0_v8_X  ),
    .nvdla_bdma_cfg_src_addr_high_0_v8_C0 (  nvdla_bdma_cfg_src_addr_high_0_v8_C  ),
    .nvdla_bdma_cfg_src_addr_high_0_v8_S ( nvdla_bdma_cfg_src_addr_high_0_v8_S ),
    .nvdla_bdma_cfg_src_addr_low_0_v32_T (  nvdla_bdma_cfg_src_addr_low_0_v32_T  ),
    .nvdla_bdma_cfg_src_addr_low_0_v32_R0 (  nvdla_bdma_cfg_src_addr_low_0_v32_R  ),
    .nvdla_bdma_cfg_src_addr_low_0_v32_X0 (  nvdla_bdma_cfg_src_addr_low_0_v32_X  ),
    .nvdla_bdma_cfg_src_addr_low_0_v32_C0 (  nvdla_bdma_cfg_src_addr_low_0_v32_C  ),
    .nvdla_bdma_cfg_src_addr_low_0_v32_S ( nvdla_bdma_cfg_src_addr_low_0_v32_S ),
    .nvdla_bdma_cfg_src_line_0_stride_T (  nvdla_bdma_cfg_src_line_0_stride_T  ),
    .nvdla_bdma_cfg_src_line_0_stride_R0 (  nvdla_bdma_cfg_src_line_0_stride_R  ),
    .nvdla_bdma_cfg_src_line_0_stride_X0 (  nvdla_bdma_cfg_src_line_0_stride_X  ),
    .nvdla_bdma_cfg_src_line_0_stride_C0 (  nvdla_bdma_cfg_src_line_0_stride_C  ),
    .nvdla_bdma_cfg_src_line_0_stride_S ( nvdla_bdma_cfg_src_line_0_stride_S ),
    .nvdla_bdma_cfg_src_surf_0_stride_T (  nvdla_bdma_cfg_src_surf_0_stride_T  ),
    .nvdla_bdma_cfg_src_surf_0_stride_R0 (  nvdla_bdma_cfg_src_surf_0_stride_R  ),
    .nvdla_bdma_cfg_src_surf_0_stride_X0 (  nvdla_bdma_cfg_src_surf_0_stride_X  ),
    .nvdla_bdma_cfg_src_surf_0_stride_C0 (  nvdla_bdma_cfg_src_surf_0_stride_C  ),
    .nvdla_bdma_cfg_src_surf_0_stride_S ( nvdla_bdma_cfg_src_surf_0_stride_S ),
    .nvdla_bdma_cfg_status_0_stall_count_en_T (  nvdla_bdma_cfg_status_0_stall_count_en_T  ),
    .nvdla_bdma_cfg_status_0_stall_count_en_R0 (  nvdla_bdma_cfg_status_0_stall_count_en_R  ),
    .nvdla_bdma_cfg_status_0_stall_count_en_X0 (  nvdla_bdma_cfg_status_0_stall_count_en_X  ),
    .nvdla_bdma_cfg_status_0_stall_count_en_C0 (  nvdla_bdma_cfg_status_0_stall_count_en_C  ),
    .nvdla_bdma_cfg_status_0_stall_count_en_S ( nvdla_bdma_cfg_status_0_stall_count_en_S ),
    .nvdla_bdma_cfg_surf_repeat_0_number_T (  nvdla_bdma_cfg_surf_repeat_0_number_T  ),
    .nvdla_bdma_cfg_surf_repeat_0_number_R0 (  nvdla_bdma_cfg_surf_repeat_0_number_R  ),
    .nvdla_bdma_cfg_surf_repeat_0_number_X0 (  nvdla_bdma_cfg_surf_repeat_0_number_X  ),
    .nvdla_bdma_cfg_surf_repeat_0_number_C0 (  nvdla_bdma_cfg_surf_repeat_0_number_C  ),
    .nvdla_bdma_cfg_surf_repeat_0_number_S ( nvdla_bdma_cfg_surf_repeat_0_number_S ),
    .reg_rd_data_T (  reg_rd_data_T  ),
    .reg_rd_data_R0 (  reg_rd_data_R  ),
    .reg_rd_data_X0 (  reg_rd_data_X  ),
    .reg_rd_data_C0 (  reg_rd_data_C  ),
    .reg_rd_data_S ( reg_rd_data_S ),
    .reg_wr_en ( reg_wr_en ),
    .nvdla_core_rstn ( nvdla_core_rstn ),
    .nvdla_core_clk ( nvdla_core_clk ),
    .nvdla_bdma_status_grp1_write_stall_0_count ( status_grp1_write_stall_count ),
    .nvdla_bdma_status_grp1_read_stall_0_count ( status_grp1_read_stall_count ),
    .nvdla_bdma_status_grp0_write_stall_0_count ( status_grp0_write_stall_count ),
    .reg_wr_data ( req_pd[53:22] ),
    .nvdla_bdma_status_grp0_read_stall_0_count ( status_grp0_read_stall_count ),
    .reg_rd_data ( reg_rd_data ),
    .nvdla_bdma_cfg_launch1_0_grp1_launch_trigger ( nvdla_bdma_cfg_launch1_0_grp1_launch_trigger ),
    .nvdla_bdma_cfg_status_0_stall_count_en ( nvdla_bdma_cfg_status_0_stall_count_en ),
    .nvdla_bdma_cfg_cmd_0_dst_ram_type ( nvdla_bdma_cfg_cmd_0_dst_ram_type ),
    .nvdla_bdma_cfg_launch0_0_grp0_launch ( nvdla_bdma_cfg_launch0_0_grp0_launch ),
    .nvdla_bdma_cfg_dst_addr_high_0_v8 ( nvdla_bdma_cfg_dst_addr_high_0_v8 ),
    .reg_offset ( { req_pd[9:0], 2'b00 } ),
    .nvdla_bdma_cfg_line_repeat_0_number ( nvdla_bdma_cfg_line_repeat_0_number ),
    .nvdla_bdma_cfg_surf_repeat_0_number ( nvdla_bdma_cfg_surf_repeat_0_number ),
    .nvdla_bdma_cfg_cmd_0_src_ram_type ( nvdla_bdma_cfg_cmd_0_src_ram_type ),
    .nvdla_bdma_cfg_src_surf_0_stride ( nvdla_bdma_cfg_src_surf_0_stride ),
    .nvdla_bdma_cfg_dst_surf_0_stride ( nvdla_bdma_cfg_dst_surf_0_stride ),
    .nvdla_bdma_status_0_idle ( nvdla_bdma_status_0_idle ),
    .nvdla_bdma_cfg_launch0_0_grp0_launch_trigger ( nvdla_bdma_cfg_launch0_0_grp0_launch_trigger ),
    .nvdla_bdma_status_0_grp1_busy ( status_grp1_busy ),
    .nvdla_bdma_cfg_dst_addr_low_0_v32 ( nvdla_bdma_cfg_dst_addr_low_0_v32 ),
    .nvdla_bdma_cfg_dst_line_0_stride ( nvdla_bdma_cfg_dst_line_0_stride ),
    .nvdla_bdma_cfg_op_0_en ( nvdla_bdma_cfg_op_0_en ),
    .nvdla_bdma_cfg_src_addr_low_0_v32 ( nvdla_bdma_cfg_src_addr_low_0_v32 ),
    .nvdla_bdma_cfg_op_0_en_trigger ( nvdla_bdma_cfg_op_0_en_trigger ),
    .nvdla_bdma_cfg_src_addr_high_0_v8 ( nvdla_bdma_cfg_src_addr_high_0_v8 ),
    .nvdla_bdma_cfg_launch1_0_grp1_launch ( nvdla_bdma_cfg_launch1_0_grp1_launch ),
    .nvdla_bdma_cfg_src_line_0_stride ( nvdla_bdma_cfg_src_line_0_stride ),
    .nvdla_bdma_cfg_line_0_size ( nvdla_bdma_cfg_line_0_size ),
    .nvdla_bdma_status_0_free_slot ( { nvdla_bdma_status_0_free_slot[7], nvdla_bdma_status_0_free_slot[7], nvdla_bdma_status_0_free_slot[7], nvdla_bdma_status_0_free_slot[4:0] } ),
    .nvdla_bdma_status_0_grp0_busy ( status_grp0_busy )
  );
  logic [2-1:0] nouse_zy0 ;
  logic [2-1:0] nouse_zy1 ;
  logic [2-1:0] nouse_zy2 ;
  assign { _021_[32], _021_[16:0] } = { 1'b0, rsp_rd_pd };
  assign {  _021__T [32] , _021__T [16:0]  } = {  1'h0 , rsp_rd_pd_T  };
  assign {  _021__S , _021__S  } = 0;
  logic [18-1:0] yuzeng0_R ;
  logic [18-1:0] yuzeng0_X ;
  logic [18-1:0] yuzeng0_C ;
  assign yuzeng0_R = {  _021__R [32] , _021__R [16:0]  };
  assign yuzeng0_X = {  _021__X [32] , _021__X [16:0]  };
  assign yuzeng0_C = {  _021__C [32] , _021__C [16:0]  };
  logic [16:0] rsp_rd_pd_R2 ;
  logic [16:0] rsp_rd_pd_X2 ;
  logic [16:0] rsp_rd_pd_C2 ;
  assign rsp_rd_pd_R2 = yuzeng0_R [16:0] ;
  assign rsp_rd_pd_X2 = yuzeng0_X [16:0] ;
  assign rsp_rd_pd_C2 = yuzeng0_C [16:0] ;
  assign _021_[32] = { 1'b0 };
  assign _021__T [32] = {  1'h0  };
  logic [13:0] _021__S ;
  assign _021__S = 0 ;
  assign _021_[16:0] = { rsp_rd_pd };
  assign _021__T [16:0] = {  rsp_rd_pd_T  };
  logic [13:0] _021__S ;
  assign _021__S = 0 ;
  logic [16:0] rsp_rd_pd_R3 ;
  logic [16:0] rsp_rd_pd_X3 ;
  logic [16:0] rsp_rd_pd_C3 ;
  assign rsp_rd_pd_R3 = _021__R [16:0] ;
  assign rsp_rd_pd_X3 = _021__X [16:0] ;
  assign rsp_rd_pd_C3 = _021__C [16:0] ;
  assign csb2bdma_req_prdy = 1'b1;
  assign csb2bdma_req_prdy_T = 0 ;
  assign csb2bdma_req_prdy_S = 14'b1 ;
  assign csb2gate_slcg_en = slcg_en;
  logic [0:0] slcg_en_C0 ;
  logic [0:0] slcg_en_R0 ;
  logic [0:0] slcg_en_X0 ;
  assign csb2gate_slcg_en_T = slcg_en_T ;
  assign slcg_en_C0 = csb2gate_slcg_en_C ;
  assign slcg_en_R0 = csb2gate_slcg_en_R ;
  assign slcg_en_X0 = csb2gate_slcg_en_X ;
  assign csb2gate_slcg_en_S = slcg_en_S ;
  assign csb2ld_vld = launch_vld;
  logic [0:0] launch_vld_C4 ;
  logic [0:0] launch_vld_R4 ;
  logic [0:0] launch_vld_X4 ;
  assign csb2ld_vld_T = launch_vld_T ;
  assign launch_vld_C4 = csb2ld_vld_C ;
  assign launch_vld_R4 = csb2ld_vld_R ;
  assign launch_vld_X4 = csb2ld_vld_X ;
  assign csb2ld_vld_S = launch_vld_S ;
  assign csb_fifo_rd_prdy = csb2ld_rdy;
  logic [0:0] csb2ld_rdy_C4 ;
  logic [0:0] csb2ld_rdy_R4 ;
  logic [0:0] csb2ld_rdy_X4 ;
  assign csb_fifo_rd_prdy_T = csb2ld_rdy_T ;
  assign csb2ld_rdy_C4 = csb_fifo_rd_prdy_C ;
  assign csb2ld_rdy_R4 = csb_fifo_rd_prdy_R ;
  assign csb2ld_rdy_X4 = csb_fifo_rd_prdy_X ;
  assign csb_fifo_rd_prdy_S = csb2ld_rdy_S ;
  assign csb_fifo_wr_pd = { nvdla_bdma_cfg_src_addr_low_0_v32, nvdla_bdma_cfg_src_addr_high_0_v8, nvdla_bdma_cfg_dst_addr_low_0_v32, nvdla_bdma_cfg_dst_addr_high_0_v8, nvdla_bdma_cfg_line_0_size, nvdla_bdma_cfg_cmd_0_src_ram_type, nvdla_bdma_cfg_cmd_0_dst_ram_type, nvdla_bdma_cfg_line_repeat_0_number, nvdla_bdma_cfg_src_line_0_stride, nvdla_bdma_cfg_dst_line_0_stride, nvdla_bdma_cfg_surf_repeat_0_number, nvdla_bdma_cfg_src_surf_0_stride, nvdla_bdma_cfg_dst_surf_0_stride };
  assign csb_fifo_wr_pd_T = {  nvdla_bdma_cfg_src_addr_low_0_v32_T , nvdla_bdma_cfg_src_addr_high_0_v8_T , nvdla_bdma_cfg_dst_addr_low_0_v32_T , nvdla_bdma_cfg_dst_addr_high_0_v8_T , nvdla_bdma_cfg_line_0_size_T , nvdla_bdma_cfg_cmd_0_src_ram_type_T , nvdla_bdma_cfg_cmd_0_dst_ram_type_T , nvdla_bdma_cfg_line_repeat_0_number_T , nvdla_bdma_cfg_src_line_0_stride_T , nvdla_bdma_cfg_dst_line_0_stride_T , nvdla_bdma_cfg_surf_repeat_0_number_T , nvdla_bdma_cfg_src_surf_0_stride_T , nvdla_bdma_cfg_dst_surf_0_stride_T  };
  logic [13:0] csb_fifo_wr_pd_S ;
  assign csb_fifo_wr_pd_S = 0 ;
  logic [26:0] nvdla_bdma_cfg_src_addr_low_0_v32_R1 ;
  logic [26:0] nvdla_bdma_cfg_src_addr_low_0_v32_X1 ;
  logic [26:0] nvdla_bdma_cfg_src_addr_low_0_v32_C1 ;
  assign nvdla_bdma_cfg_src_addr_low_0_v32_R1 = csb_fifo_wr_pd_R [288:262] ;
  assign nvdla_bdma_cfg_src_addr_low_0_v32_X1 = csb_fifo_wr_pd_X [288:262] ;
  assign nvdla_bdma_cfg_src_addr_low_0_v32_C1 = csb_fifo_wr_pd_C [288:262] ;
  logic [31:0] nvdla_bdma_cfg_src_addr_high_0_v8_R1 ;
  logic [31:0] nvdla_bdma_cfg_src_addr_high_0_v8_X1 ;
  logic [31:0] nvdla_bdma_cfg_src_addr_high_0_v8_C1 ;
  assign nvdla_bdma_cfg_src_addr_high_0_v8_R1 = csb_fifo_wr_pd_R [261:230] ;
  assign nvdla_bdma_cfg_src_addr_high_0_v8_X1 = csb_fifo_wr_pd_X [261:230] ;
  assign nvdla_bdma_cfg_src_addr_high_0_v8_C1 = csb_fifo_wr_pd_C [261:230] ;
  logic [26:0] nvdla_bdma_cfg_dst_addr_low_0_v32_R1 ;
  logic [26:0] nvdla_bdma_cfg_dst_addr_low_0_v32_X1 ;
  logic [26:0] nvdla_bdma_cfg_dst_addr_low_0_v32_C1 ;
  assign nvdla_bdma_cfg_dst_addr_low_0_v32_R1 = csb_fifo_wr_pd_R [229:203] ;
  assign nvdla_bdma_cfg_dst_addr_low_0_v32_X1 = csb_fifo_wr_pd_X [229:203] ;
  assign nvdla_bdma_cfg_dst_addr_low_0_v32_C1 = csb_fifo_wr_pd_C [229:203] ;
  logic [31:0] nvdla_bdma_cfg_dst_addr_high_0_v8_R1 ;
  logic [31:0] nvdla_bdma_cfg_dst_addr_high_0_v8_X1 ;
  logic [31:0] nvdla_bdma_cfg_dst_addr_high_0_v8_C1 ;
  assign nvdla_bdma_cfg_dst_addr_high_0_v8_R1 = csb_fifo_wr_pd_R [202:171] ;
  assign nvdla_bdma_cfg_dst_addr_high_0_v8_X1 = csb_fifo_wr_pd_X [202:171] ;
  assign nvdla_bdma_cfg_dst_addr_high_0_v8_C1 = csb_fifo_wr_pd_C [202:171] ;
  logic [12:0] nvdla_bdma_cfg_line_0_size_R1 ;
  logic [12:0] nvdla_bdma_cfg_line_0_size_X1 ;
  logic [12:0] nvdla_bdma_cfg_line_0_size_C1 ;
  assign nvdla_bdma_cfg_line_0_size_R1 = csb_fifo_wr_pd_R [170:158] ;
  assign nvdla_bdma_cfg_line_0_size_X1 = csb_fifo_wr_pd_X [170:158] ;
  assign nvdla_bdma_cfg_line_0_size_C1 = csb_fifo_wr_pd_C [170:158] ;
  logic [0:0] nvdla_bdma_cfg_cmd_0_src_ram_type_R1 ;
  logic [0:0] nvdla_bdma_cfg_cmd_0_src_ram_type_X1 ;
  logic [0:0] nvdla_bdma_cfg_cmd_0_src_ram_type_C1 ;
  assign nvdla_bdma_cfg_cmd_0_src_ram_type_R1 = csb_fifo_wr_pd_R [157:157] ;
  assign nvdla_bdma_cfg_cmd_0_src_ram_type_X1 = csb_fifo_wr_pd_X [157:157] ;
  assign nvdla_bdma_cfg_cmd_0_src_ram_type_C1 = csb_fifo_wr_pd_C [157:157] ;
  logic [0:0] nvdla_bdma_cfg_cmd_0_dst_ram_type_R1 ;
  logic [0:0] nvdla_bdma_cfg_cmd_0_dst_ram_type_X1 ;
  logic [0:0] nvdla_bdma_cfg_cmd_0_dst_ram_type_C1 ;
  assign nvdla_bdma_cfg_cmd_0_dst_ram_type_R1 = csb_fifo_wr_pd_R [156:156] ;
  assign nvdla_bdma_cfg_cmd_0_dst_ram_type_X1 = csb_fifo_wr_pd_X [156:156] ;
  assign nvdla_bdma_cfg_cmd_0_dst_ram_type_C1 = csb_fifo_wr_pd_C [156:156] ;
  logic [23:0] nvdla_bdma_cfg_line_repeat_0_number_R1 ;
  logic [23:0] nvdla_bdma_cfg_line_repeat_0_number_X1 ;
  logic [23:0] nvdla_bdma_cfg_line_repeat_0_number_C1 ;
  assign nvdla_bdma_cfg_line_repeat_0_number_R1 = csb_fifo_wr_pd_R [155:132] ;
  assign nvdla_bdma_cfg_line_repeat_0_number_X1 = csb_fifo_wr_pd_X [155:132] ;
  assign nvdla_bdma_cfg_line_repeat_0_number_C1 = csb_fifo_wr_pd_C [155:132] ;
  logic [26:0] nvdla_bdma_cfg_src_line_0_stride_R1 ;
  logic [26:0] nvdla_bdma_cfg_src_line_0_stride_X1 ;
  logic [26:0] nvdla_bdma_cfg_src_line_0_stride_C1 ;
  assign nvdla_bdma_cfg_src_line_0_stride_R1 = csb_fifo_wr_pd_R [131:105] ;
  assign nvdla_bdma_cfg_src_line_0_stride_X1 = csb_fifo_wr_pd_X [131:105] ;
  assign nvdla_bdma_cfg_src_line_0_stride_C1 = csb_fifo_wr_pd_C [131:105] ;
  logic [26:0] nvdla_bdma_cfg_dst_line_0_stride_R1 ;
  logic [26:0] nvdla_bdma_cfg_dst_line_0_stride_X1 ;
  logic [26:0] nvdla_bdma_cfg_dst_line_0_stride_C1 ;
  assign nvdla_bdma_cfg_dst_line_0_stride_R1 = csb_fifo_wr_pd_R [104:78] ;
  assign nvdla_bdma_cfg_dst_line_0_stride_X1 = csb_fifo_wr_pd_X [104:78] ;
  assign nvdla_bdma_cfg_dst_line_0_stride_C1 = csb_fifo_wr_pd_C [104:78] ;
  logic [23:0] nvdla_bdma_cfg_surf_repeat_0_number_R1 ;
  logic [23:0] nvdla_bdma_cfg_surf_repeat_0_number_X1 ;
  logic [23:0] nvdla_bdma_cfg_surf_repeat_0_number_C1 ;
  assign nvdla_bdma_cfg_surf_repeat_0_number_R1 = csb_fifo_wr_pd_R [77:54] ;
  assign nvdla_bdma_cfg_surf_repeat_0_number_X1 = csb_fifo_wr_pd_X [77:54] ;
  assign nvdla_bdma_cfg_surf_repeat_0_number_C1 = csb_fifo_wr_pd_C [77:54] ;
  logic [26:0] nvdla_bdma_cfg_src_surf_0_stride_R1 ;
  logic [26:0] nvdla_bdma_cfg_src_surf_0_stride_X1 ;
  logic [26:0] nvdla_bdma_cfg_src_surf_0_stride_C1 ;
  assign nvdla_bdma_cfg_src_surf_0_stride_R1 = csb_fifo_wr_pd_R [53:27] ;
  assign nvdla_bdma_cfg_src_surf_0_stride_X1 = csb_fifo_wr_pd_X [53:27] ;
  assign nvdla_bdma_cfg_src_surf_0_stride_C1 = csb_fifo_wr_pd_C [53:27] ;
  logic [26:0] nvdla_bdma_cfg_dst_surf_0_stride_R1 ;
  logic [26:0] nvdla_bdma_cfg_dst_surf_0_stride_X1 ;
  logic [26:0] nvdla_bdma_cfg_dst_surf_0_stride_C1 ;
  assign nvdla_bdma_cfg_dst_surf_0_stride_R1 = csb_fifo_wr_pd_R [26:0] ;
  assign nvdla_bdma_cfg_dst_surf_0_stride_X1 = csb_fifo_wr_pd_X [26:0] ;
  assign nvdla_bdma_cfg_dst_surf_0_stride_C1 = csb_fifo_wr_pd_C [26:0] ;
  assign csb_idle = csb_fifo_wr_idle;
  logic [0:0] csb_fifo_wr_idle_C1 ;
  logic [0:0] csb_fifo_wr_idle_R1 ;
  logic [0:0] csb_fifo_wr_idle_X1 ;
  assign csb_idle_T = csb_fifo_wr_idle_T ;
  assign csb_fifo_wr_idle_C1 = csb_idle_C ;
  assign csb_fifo_wr_idle_R1 = csb_idle_R ;
  assign csb_fifo_wr_idle_X1 = csb_idle_X ;
  assign csb_idle_S = csb_fifo_wr_idle_S ;
  assign dma_read_stall_count_cen = nvdla_bdma_cfg_status_0_stall_count_en;
  logic [0:0] nvdla_bdma_cfg_status_0_stall_count_en_C2 ;
  logic [0:0] nvdla_bdma_cfg_status_0_stall_count_en_R2 ;
  logic [0:0] nvdla_bdma_cfg_status_0_stall_count_en_X2 ;
  assign dma_read_stall_count_cen_T = nvdla_bdma_cfg_status_0_stall_count_en_T ;
  assign nvdla_bdma_cfg_status_0_stall_count_en_C2 = dma_read_stall_count_cen_C ;
  assign nvdla_bdma_cfg_status_0_stall_count_en_R2 = dma_read_stall_count_cen_R ;
  assign nvdla_bdma_cfg_status_0_stall_count_en_X2 = dma_read_stall_count_cen_X ;
  assign dma_read_stall_count_cen_S = nvdla_bdma_cfg_status_0_stall_count_en_S ;
  assign dma_write_stall_count_cen = nvdla_bdma_cfg_status_0_stall_count_en;
  logic [0:0] nvdla_bdma_cfg_status_0_stall_count_en_C3 ;
  logic [0:0] nvdla_bdma_cfg_status_0_stall_count_en_R3 ;
  logic [0:0] nvdla_bdma_cfg_status_0_stall_count_en_X3 ;
  assign dma_write_stall_count_cen_T = nvdla_bdma_cfg_status_0_stall_count_en_T ;
  assign nvdla_bdma_cfg_status_0_stall_count_en_C3 = dma_write_stall_count_cen_C ;
  assign nvdla_bdma_cfg_status_0_stall_count_en_R3 = dma_write_stall_count_cen_R ;
  assign nvdla_bdma_cfg_status_0_stall_count_en_X3 = dma_write_stall_count_cen_X ;
  assign dma_write_stall_count_cen_S = nvdla_bdma_cfg_status_0_stall_count_en_S ;
  assign grp0_read_stall_cnt_adv = ld2csb_grp0_dma_stall_inc;
  logic [0:0] ld2csb_grp0_dma_stall_inc_C1 ;
  logic [0:0] ld2csb_grp0_dma_stall_inc_R1 ;
  logic [0:0] ld2csb_grp0_dma_stall_inc_X1 ;
  assign grp0_read_stall_cnt_adv_T = ld2csb_grp0_dma_stall_inc_T ;
  assign ld2csb_grp0_dma_stall_inc_C1 = grp0_read_stall_cnt_adv_C ;
  assign ld2csb_grp0_dma_stall_inc_R1 = grp0_read_stall_cnt_adv_R ;
  assign ld2csb_grp0_dma_stall_inc_X1 = grp0_read_stall_cnt_adv_X ;
  assign grp0_read_stall_cnt_adv_S = ld2csb_grp0_dma_stall_inc_S ;
  assign grp0_read_stall_cnt_cnt_ext = { 2'b00, grp0_read_stall_cnt_cnt_cur };
  assign grp0_read_stall_cnt_cnt_ext_T = {  2'h0 , grp0_read_stall_cnt_cnt_cur_T  };
  logic [13:0] grp0_read_stall_cnt_cnt_ext_S ;
  assign grp0_read_stall_cnt_cnt_ext_S = 0 ;
  logic [31:0] grp0_read_stall_cnt_cnt_cur_R4 ;
  logic [31:0] grp0_read_stall_cnt_cnt_cur_X4 ;
  logic [31:0] grp0_read_stall_cnt_cnt_cur_C4 ;
  assign grp0_read_stall_cnt_cnt_cur_R4 = grp0_read_stall_cnt_cnt_ext_R [31:0] ;
  assign grp0_read_stall_cnt_cnt_cur_X4 = grp0_read_stall_cnt_cnt_ext_X [31:0] ;
  assign grp0_read_stall_cnt_cnt_cur_C4 = grp0_read_stall_cnt_cnt_ext_C [31:0] ;
  assign grp0_read_stall_cnt_cnt_mod = grp0_read_stall_cnt_cnt_inc;
  logic [31:0] grp0_read_stall_cnt_cnt_inc_C1 ;
  logic [31:0] grp0_read_stall_cnt_cnt_inc_R1 ;
  logic [31:0] grp0_read_stall_cnt_cnt_inc_X1 ;
  assign grp0_read_stall_cnt_cnt_mod_T = grp0_read_stall_cnt_cnt_inc_T ;
  assign grp0_read_stall_cnt_cnt_inc_C1 = grp0_read_stall_cnt_cnt_mod_C ;
  assign grp0_read_stall_cnt_cnt_inc_R1 = grp0_read_stall_cnt_cnt_mod_R ;
  assign grp0_read_stall_cnt_cnt_inc_X1 = grp0_read_stall_cnt_cnt_mod_X ;
  assign grp0_read_stall_cnt_cnt_mod_S = grp0_read_stall_cnt_cnt_inc_S ;
  assign grp0_read_stall_count = grp0_read_stall_cnt_cnt_cur;
  logic [31:0] grp0_read_stall_cnt_cnt_cur_C5 ;
  logic [31:0] grp0_read_stall_cnt_cnt_cur_R5 ;
  logic [31:0] grp0_read_stall_cnt_cnt_cur_X5 ;
  assign grp0_read_stall_count_T = grp0_read_stall_cnt_cnt_cur_T ;
  assign grp0_read_stall_cnt_cnt_cur_C5 = grp0_read_stall_count_C ;
  assign grp0_read_stall_cnt_cnt_cur_R5 = grp0_read_stall_count_R ;
  assign grp0_read_stall_cnt_cnt_cur_X5 = grp0_read_stall_count_X ;
  assign grp0_read_stall_count_S = grp0_read_stall_cnt_cnt_cur_S ;
  assign grp0_read_stall_count_dec = 1'b0;
  assign grp0_read_stall_count_dec_T = 0 ;
  assign grp0_read_stall_count_dec_S = 14'b1 ;
  assign grp1_read_stall_cnt_adv = ld2csb_grp1_dma_stall_inc;
  logic [0:0] ld2csb_grp1_dma_stall_inc_C1 ;
  logic [0:0] ld2csb_grp1_dma_stall_inc_R1 ;
  logic [0:0] ld2csb_grp1_dma_stall_inc_X1 ;
  assign grp1_read_stall_cnt_adv_T = ld2csb_grp1_dma_stall_inc_T ;
  assign ld2csb_grp1_dma_stall_inc_C1 = grp1_read_stall_cnt_adv_C ;
  assign ld2csb_grp1_dma_stall_inc_R1 = grp1_read_stall_cnt_adv_R ;
  assign ld2csb_grp1_dma_stall_inc_X1 = grp1_read_stall_cnt_adv_X ;
  assign grp1_read_stall_cnt_adv_S = ld2csb_grp1_dma_stall_inc_S ;
  assign grp1_read_stall_cnt_cnt_ext = { 2'b00, grp1_read_stall_cnt_cnt_cur };
  assign grp1_read_stall_cnt_cnt_ext_T = {  2'h0 , grp1_read_stall_cnt_cnt_cur_T  };
  logic [13:0] grp1_read_stall_cnt_cnt_ext_S ;
  assign grp1_read_stall_cnt_cnt_ext_S = 0 ;
  logic [31:0] grp1_read_stall_cnt_cnt_cur_R4 ;
  logic [31:0] grp1_read_stall_cnt_cnt_cur_X4 ;
  logic [31:0] grp1_read_stall_cnt_cnt_cur_C4 ;
  assign grp1_read_stall_cnt_cnt_cur_R4 = grp1_read_stall_cnt_cnt_ext_R [31:0] ;
  assign grp1_read_stall_cnt_cnt_cur_X4 = grp1_read_stall_cnt_cnt_ext_X [31:0] ;
  assign grp1_read_stall_cnt_cnt_cur_C4 = grp1_read_stall_cnt_cnt_ext_C [31:0] ;
  assign grp1_read_stall_cnt_cnt_mod = grp1_read_stall_cnt_cnt_inc;
  logic [31:0] grp1_read_stall_cnt_cnt_inc_C1 ;
  logic [31:0] grp1_read_stall_cnt_cnt_inc_R1 ;
  logic [31:0] grp1_read_stall_cnt_cnt_inc_X1 ;
  assign grp1_read_stall_cnt_cnt_mod_T = grp1_read_stall_cnt_cnt_inc_T ;
  assign grp1_read_stall_cnt_cnt_inc_C1 = grp1_read_stall_cnt_cnt_mod_C ;
  assign grp1_read_stall_cnt_cnt_inc_R1 = grp1_read_stall_cnt_cnt_mod_R ;
  assign grp1_read_stall_cnt_cnt_inc_X1 = grp1_read_stall_cnt_cnt_mod_X ;
  assign grp1_read_stall_cnt_cnt_mod_S = grp1_read_stall_cnt_cnt_inc_S ;
  assign grp1_read_stall_count = grp1_read_stall_cnt_cnt_cur;
  logic [31:0] grp1_read_stall_cnt_cnt_cur_C5 ;
  logic [31:0] grp1_read_stall_cnt_cnt_cur_R5 ;
  logic [31:0] grp1_read_stall_cnt_cnt_cur_X5 ;
  assign grp1_read_stall_count_T = grp1_read_stall_cnt_cnt_cur_T ;
  assign grp1_read_stall_cnt_cnt_cur_C5 = grp1_read_stall_count_C ;
  assign grp1_read_stall_cnt_cnt_cur_R5 = grp1_read_stall_count_R ;
  assign grp1_read_stall_cnt_cnt_cur_X5 = grp1_read_stall_count_X ;
  assign grp1_read_stall_count_S = grp1_read_stall_cnt_cnt_cur_S ;
  assign grp1_read_stall_count_dec = 1'b0;
  assign grp1_read_stall_count_dec_T = 0 ;
  assign grp1_read_stall_count_dec_S = 14'b1 ;
  assign launch_rdy = csb2ld_rdy;
  logic [0:0] csb2ld_rdy_C5 ;
  logic [0:0] csb2ld_rdy_R5 ;
  logic [0:0] csb2ld_rdy_X5 ;
  assign launch_rdy_T = csb2ld_rdy_T ;
  assign csb2ld_rdy_C5 = launch_rdy_C ;
  assign csb2ld_rdy_R5 = launch_rdy_R ;
  assign csb2ld_rdy_X5 = launch_rdy_X ;
  assign launch_rdy_S = csb2ld_rdy_S ;
  assign load_idle = ld2csb_idle;
  logic [0:0] ld2csb_idle_C1 ;
  logic [0:0] ld2csb_idle_R1 ;
  logic [0:0] ld2csb_idle_X1 ;
  assign load_idle_T = ld2csb_idle_T ;
  assign ld2csb_idle_C1 = load_idle_C ;
  assign ld2csb_idle_R1 = load_idle_R ;
  assign ld2csb_idle_X1 = load_idle_X ;
  assign load_idle_S = ld2csb_idle_S ;
  assign mon_csb_fifo_rd_pvld = csb_fifo_rd_pvld;
  logic [0:0] csb_fifo_rd_pvld_C0 ;
  logic [0:0] csb_fifo_rd_pvld_R0 ;
  logic [0:0] csb_fifo_rd_pvld_X0 ;
  assign mon_csb_fifo_rd_pvld_T = csb_fifo_rd_pvld_T ;
  assign csb_fifo_rd_pvld_C0 = mon_csb_fifo_rd_pvld_C ;
  assign csb_fifo_rd_pvld_R0 = mon_csb_fifo_rd_pvld_R ;
  assign csb_fifo_rd_pvld_X0 = mon_csb_fifo_rd_pvld_X ;
  assign mon_csb_fifo_rd_pvld_S = csb_fifo_rd_pvld_S ;
  assign mon_csb_fifo_wr_prdy = csb_fifo_wr_prdy;
  logic [0:0] csb_fifo_wr_prdy_C0 ;
  logic [0:0] csb_fifo_wr_prdy_R0 ;
  logic [0:0] csb_fifo_wr_prdy_X0 ;
  assign mon_csb_fifo_wr_prdy_T = csb_fifo_wr_prdy_T ;
  assign csb_fifo_wr_prdy_C0 = mon_csb_fifo_wr_prdy_C ;
  assign csb_fifo_wr_prdy_R0 = mon_csb_fifo_wr_prdy_R ;
  assign csb_fifo_wr_prdy_X0 = mon_csb_fifo_wr_prdy_X ;
  assign mon_csb_fifo_wr_prdy_S = csb_fifo_wr_prdy_S ;
  assign nvdla_bdma_status_0_free_slot[6:5] = { nvdla_bdma_status_0_free_slot[7], nvdla_bdma_status_0_free_slot[7] };
  assign nvdla_bdma_status_0_free_slot_T [6:5] = {  nvdla_bdma_status_0_free_slot_T [7] , nvdla_bdma_status_0_free_slot_T [7]  };
  logic [13:0] nvdla_bdma_status_0_free_slot_S ;
  assign nvdla_bdma_status_0_free_slot_S = 0 ;
  assign { nvdla_bdma_status_0_free_slot_R3 [5], nvdla_bdma_status_0_free_slot_R3 [6] } = 0;
  assign { nvdla_bdma_status_0_free_slot_X3 [5], nvdla_bdma_status_0_free_slot_X3 [6] } = 0;
  assign { nvdla_bdma_status_0_free_slot_C3 [5], nvdla_bdma_status_0_free_slot_C3 [6] } = 0;
  logic [7:0] nvdla_bdma_status_0_free_slot_R4 ;
  logic [7:0] nvdla_bdma_status_0_free_slot_X4 ;
  logic [7:0] nvdla_bdma_status_0_free_slot_C4 ;
  assign nvdla_bdma_status_0_free_slot_R4 [7:7] = nvdla_bdma_status_0_free_slot_R [6:6] ;
  assign nvdla_bdma_status_0_free_slot_X4 [7:7] = nvdla_bdma_status_0_free_slot_X [6:6] ;
  assign nvdla_bdma_status_0_free_slot_C4 [7:7] = nvdla_bdma_status_0_free_slot_C [6:6] ;
  assign { nvdla_bdma_status_0_free_slot_R4 [0], nvdla_bdma_status_0_free_slot_R4 [1], nvdla_bdma_status_0_free_slot_R4 [2], nvdla_bdma_status_0_free_slot_R4 [3], nvdla_bdma_status_0_free_slot_R4 [4], nvdla_bdma_status_0_free_slot_R4 [5], nvdla_bdma_status_0_free_slot_R4 [6] } = 0;
  assign { nvdla_bdma_status_0_free_slot_X4 [0], nvdla_bdma_status_0_free_slot_X4 [1], nvdla_bdma_status_0_free_slot_X4 [2], nvdla_bdma_status_0_free_slot_X4 [3], nvdla_bdma_status_0_free_slot_X4 [4], nvdla_bdma_status_0_free_slot_X4 [5], nvdla_bdma_status_0_free_slot_X4 [6] } = 0;
  assign { nvdla_bdma_status_0_free_slot_C4 [0], nvdla_bdma_status_0_free_slot_C4 [1], nvdla_bdma_status_0_free_slot_C4 [2], nvdla_bdma_status_0_free_slot_C4 [3], nvdla_bdma_status_0_free_slot_C4 [4], nvdla_bdma_status_0_free_slot_C4 [5], nvdla_bdma_status_0_free_slot_C4 [6] } = 0;
  logic [7:0] nvdla_bdma_status_0_free_slot_R5 ;
  logic [7:0] nvdla_bdma_status_0_free_slot_X5 ;
  logic [7:0] nvdla_bdma_status_0_free_slot_C5 ;
  assign nvdla_bdma_status_0_free_slot_R5 [7:7] = nvdla_bdma_status_0_free_slot_R [5:5] ;
  assign nvdla_bdma_status_0_free_slot_X5 [7:7] = nvdla_bdma_status_0_free_slot_X [5:5] ;
  assign nvdla_bdma_status_0_free_slot_C5 [7:7] = nvdla_bdma_status_0_free_slot_C [5:5] ;
  assign nvdla_bdma_status_0_grp0_busy = status_grp0_busy;
  logic [0:0] status_grp0_busy_C2 ;
  logic [0:0] status_grp0_busy_R2 ;
  logic [0:0] status_grp0_busy_X2 ;
  assign nvdla_bdma_status_0_grp0_busy_T = status_grp0_busy_T ;
  assign status_grp0_busy_C2 = nvdla_bdma_status_0_grp0_busy_C ;
  assign status_grp0_busy_R2 = nvdla_bdma_status_0_grp0_busy_R ;
  assign status_grp0_busy_X2 = nvdla_bdma_status_0_grp0_busy_X ;
  assign nvdla_bdma_status_0_grp0_busy_S = status_grp0_busy_S ;
  assign nvdla_bdma_status_0_grp1_busy = status_grp1_busy;
  logic [0:0] status_grp1_busy_C2 ;
  logic [0:0] status_grp1_busy_R2 ;
  logic [0:0] status_grp1_busy_X2 ;
  assign nvdla_bdma_status_0_grp1_busy_T = status_grp1_busy_T ;
  assign status_grp1_busy_C2 = nvdla_bdma_status_0_grp1_busy_C ;
  assign status_grp1_busy_R2 = nvdla_bdma_status_0_grp1_busy_R ;
  assign status_grp1_busy_X2 = nvdla_bdma_status_0_grp1_busy_X ;
  assign nvdla_bdma_status_0_grp1_busy_S = status_grp1_busy_S ;
  assign nvdla_bdma_status_grp0_read_stall_0_count = status_grp0_read_stall_count;
  logic [31:0] status_grp0_read_stall_count_C2 ;
  logic [31:0] status_grp0_read_stall_count_R2 ;
  logic [31:0] status_grp0_read_stall_count_X2 ;
  assign nvdla_bdma_status_grp0_read_stall_0_count_T = status_grp0_read_stall_count_T ;
  assign status_grp0_read_stall_count_C2 = nvdla_bdma_status_grp0_read_stall_0_count_C ;
  assign status_grp0_read_stall_count_R2 = nvdla_bdma_status_grp0_read_stall_0_count_R ;
  assign status_grp0_read_stall_count_X2 = nvdla_bdma_status_grp0_read_stall_0_count_X ;
  assign nvdla_bdma_status_grp0_read_stall_0_count_S = status_grp0_read_stall_count_S ;
  assign nvdla_bdma_status_grp0_write_stall_0_count = status_grp0_write_stall_count;
  logic [31:0] status_grp0_write_stall_count_C2 ;
  logic [31:0] status_grp0_write_stall_count_R2 ;
  logic [31:0] status_grp0_write_stall_count_X2 ;
  assign nvdla_bdma_status_grp0_write_stall_0_count_T = status_grp0_write_stall_count_T ;
  assign status_grp0_write_stall_count_C2 = nvdla_bdma_status_grp0_write_stall_0_count_C ;
  assign status_grp0_write_stall_count_R2 = nvdla_bdma_status_grp0_write_stall_0_count_R ;
  assign status_grp0_write_stall_count_X2 = nvdla_bdma_status_grp0_write_stall_0_count_X ;
  assign nvdla_bdma_status_grp0_write_stall_0_count_S = status_grp0_write_stall_count_S ;
  assign nvdla_bdma_status_grp1_read_stall_0_count = status_grp1_read_stall_count;
  logic [31:0] status_grp1_read_stall_count_C2 ;
  logic [31:0] status_grp1_read_stall_count_R2 ;
  logic [31:0] status_grp1_read_stall_count_X2 ;
  assign nvdla_bdma_status_grp1_read_stall_0_count_T = status_grp1_read_stall_count_T ;
  assign status_grp1_read_stall_count_C2 = nvdla_bdma_status_grp1_read_stall_0_count_C ;
  assign status_grp1_read_stall_count_R2 = nvdla_bdma_status_grp1_read_stall_0_count_R ;
  assign status_grp1_read_stall_count_X2 = nvdla_bdma_status_grp1_read_stall_0_count_X ;
  assign nvdla_bdma_status_grp1_read_stall_0_count_S = status_grp1_read_stall_count_S ;
  assign nvdla_bdma_status_grp1_write_stall_0_count = status_grp1_write_stall_count;
  logic [31:0] status_grp1_write_stall_count_C2 ;
  logic [31:0] status_grp1_write_stall_count_R2 ;
  logic [31:0] status_grp1_write_stall_count_X2 ;
  assign nvdla_bdma_status_grp1_write_stall_0_count_T = status_grp1_write_stall_count_T ;
  assign status_grp1_write_stall_count_C2 = nvdla_bdma_status_grp1_write_stall_0_count_C ;
  assign status_grp1_write_stall_count_R2 = nvdla_bdma_status_grp1_write_stall_0_count_R ;
  assign status_grp1_write_stall_count_X2 = nvdla_bdma_status_grp1_write_stall_0_count_X ;
  assign nvdla_bdma_status_grp1_write_stall_0_count_S = status_grp1_write_stall_count_S ;
  assign reg2dp_cmd_dst_ram_type = csb_fifo_rd_pd[156];
  logic [288:0] csb_fifo_rd_pd_C0 ;
  logic [288:0] csb_fifo_rd_pd_R0 ;
  logic [288:0] csb_fifo_rd_pd_X0 ;
  assign reg2dp_cmd_dst_ram_type_T = csb_fifo_rd_pd_T [156] ;
  assign csb_fifo_rd_pd_C0 [156] = reg2dp_cmd_dst_ram_type_C ;
  assign csb_fifo_rd_pd_R0 [156] = reg2dp_cmd_dst_ram_type_R ;
  assign csb_fifo_rd_pd_X0 [156] = reg2dp_cmd_dst_ram_type_X ;
  assign reg2dp_cmd_dst_ram_type_S = csb_fifo_rd_pd_S ;
  assign reg2dp_cmd_interrupt = is_last_cmd_rdy;
  logic [0:0] is_last_cmd_rdy_C1 ;
  logic [0:0] is_last_cmd_rdy_R1 ;
  logic [0:0] is_last_cmd_rdy_X1 ;
  assign reg2dp_cmd_interrupt_T = is_last_cmd_rdy_T ;
  assign is_last_cmd_rdy_C1 = reg2dp_cmd_interrupt_C ;
  assign is_last_cmd_rdy_R1 = reg2dp_cmd_interrupt_R ;
  assign is_last_cmd_rdy_X1 = reg2dp_cmd_interrupt_X ;
  assign reg2dp_cmd_interrupt_S = is_last_cmd_rdy_S ;
  assign reg2dp_cmd_interrupt_ptr = launch_ptr;
  logic [0:0] launch_ptr_C3 ;
  logic [0:0] launch_ptr_R3 ;
  logic [0:0] launch_ptr_X3 ;
  assign reg2dp_cmd_interrupt_ptr_T = launch_ptr_T ;
  assign launch_ptr_C3 = reg2dp_cmd_interrupt_ptr_C ;
  assign launch_ptr_R3 = reg2dp_cmd_interrupt_ptr_R ;
  assign launch_ptr_X3 = reg2dp_cmd_interrupt_ptr_X ;
  assign reg2dp_cmd_interrupt_ptr_S = launch_ptr_S ;
  assign reg2dp_cmd_src_ram_type = csb_fifo_rd_pd[157];
  assign reg2dp_cmd_src_ram_type_T = csb_fifo_rd_pd_T [157] ;
  assign csb_fifo_rd_pd_C0 [157] = reg2dp_cmd_src_ram_type_C ;
  assign csb_fifo_rd_pd_R0 [157] = reg2dp_cmd_src_ram_type_R ;
  assign csb_fifo_rd_pd_X0 [157] = reg2dp_cmd_src_ram_type_X ;
  assign reg2dp_cmd_src_ram_type_S = csb_fifo_rd_pd_S ;
  assign reg2dp_dst_addr_high_v8 = csb_fifo_rd_pd[202:171];
  assign reg2dp_dst_addr_high_v8_T = csb_fifo_rd_pd_T [202:171] ;
  assign csb_fifo_rd_pd_C0 [202:171] = reg2dp_dst_addr_high_v8_C ;
  assign csb_fifo_rd_pd_R0 [202:171] = reg2dp_dst_addr_high_v8_R ;
  assign csb_fifo_rd_pd_X0 [202:171] = reg2dp_dst_addr_high_v8_X ;
  assign reg2dp_dst_addr_high_v8_S = csb_fifo_rd_pd_S ;
  assign reg2dp_dst_addr_low_v32 = csb_fifo_rd_pd[229:203];
  assign reg2dp_dst_addr_low_v32_T = csb_fifo_rd_pd_T [229:203] ;
  assign csb_fifo_rd_pd_C0 [229:203] = reg2dp_dst_addr_low_v32_C ;
  assign csb_fifo_rd_pd_R0 [229:203] = reg2dp_dst_addr_low_v32_R ;
  assign csb_fifo_rd_pd_X0 [229:203] = reg2dp_dst_addr_low_v32_X ;
  assign reg2dp_dst_addr_low_v32_S = csb_fifo_rd_pd_S ;
  assign reg2dp_dst_line_stride = csb_fifo_rd_pd[104:78];
  assign reg2dp_dst_line_stride_T = csb_fifo_rd_pd_T [104:78] ;
  assign csb_fifo_rd_pd_C0 [104:78] = reg2dp_dst_line_stride_C ;
  assign csb_fifo_rd_pd_R0 [104:78] = reg2dp_dst_line_stride_R ;
  assign csb_fifo_rd_pd_X0 [104:78] = reg2dp_dst_line_stride_X ;
  assign reg2dp_dst_line_stride_S = csb_fifo_rd_pd_S ;
  assign reg2dp_dst_surf_stride = csb_fifo_rd_pd[26:0];
  assign reg2dp_dst_surf_stride_T = csb_fifo_rd_pd_T [26:0] ;
  assign csb_fifo_rd_pd_C0 [26:0] = reg2dp_dst_surf_stride_C ;
  assign csb_fifo_rd_pd_R0 [26:0] = reg2dp_dst_surf_stride_R ;
  assign csb_fifo_rd_pd_X0 [26:0] = reg2dp_dst_surf_stride_X ;
  assign reg2dp_dst_surf_stride_S = csb_fifo_rd_pd_S ;
  assign reg2dp_line_repeat_number = csb_fifo_rd_pd[155:132];
  assign reg2dp_line_repeat_number_T = csb_fifo_rd_pd_T [155:132] ;
  assign csb_fifo_rd_pd_C0 [155:132] = reg2dp_line_repeat_number_C ;
  assign csb_fifo_rd_pd_R0 [155:132] = reg2dp_line_repeat_number_R ;
  assign csb_fifo_rd_pd_X0 [155:132] = reg2dp_line_repeat_number_X ;
  assign reg2dp_line_repeat_number_S = csb_fifo_rd_pd_S ;
  assign reg2dp_line_size = csb_fifo_rd_pd[170:158];
  assign reg2dp_line_size_T = csb_fifo_rd_pd_T [170:158] ;
  assign csb_fifo_rd_pd_C0 [170:158] = reg2dp_line_size_C ;
  assign csb_fifo_rd_pd_R0 [170:158] = reg2dp_line_size_R ;
  assign csb_fifo_rd_pd_X0 [170:158] = reg2dp_line_size_X ;
  assign reg2dp_line_size_S = csb_fifo_rd_pd_S ;
  assign reg2dp_src_addr_high_v8 = csb_fifo_rd_pd[261:230];
  assign reg2dp_src_addr_high_v8_T = csb_fifo_rd_pd_T [261:230] ;
  assign csb_fifo_rd_pd_C0 [261:230] = reg2dp_src_addr_high_v8_C ;
  assign csb_fifo_rd_pd_R0 [261:230] = reg2dp_src_addr_high_v8_R ;
  assign csb_fifo_rd_pd_X0 [261:230] = reg2dp_src_addr_high_v8_X ;
  assign reg2dp_src_addr_high_v8_S = csb_fifo_rd_pd_S ;
  assign reg2dp_src_addr_low_v32 = csb_fifo_rd_pd[288:262];
  assign reg2dp_src_addr_low_v32_T = csb_fifo_rd_pd_T [288:262] ;
  assign csb_fifo_rd_pd_C0 [288:262] = reg2dp_src_addr_low_v32_C ;
  assign csb_fifo_rd_pd_R0 [288:262] = reg2dp_src_addr_low_v32_R ;
  assign csb_fifo_rd_pd_X0 [288:262] = reg2dp_src_addr_low_v32_X ;
  assign reg2dp_src_addr_low_v32_S = csb_fifo_rd_pd_S ;
  assign reg2dp_src_line_stride = csb_fifo_rd_pd[131:105];
  assign reg2dp_src_line_stride_T = csb_fifo_rd_pd_T [131:105] ;
  assign csb_fifo_rd_pd_C0 [131:105] = reg2dp_src_line_stride_C ;
  assign csb_fifo_rd_pd_R0 [131:105] = reg2dp_src_line_stride_R ;
  assign csb_fifo_rd_pd_X0 [131:105] = reg2dp_src_line_stride_X ;
  assign reg2dp_src_line_stride_S = csb_fifo_rd_pd_S ;
  assign reg2dp_src_surf_stride = csb_fifo_rd_pd[53:27];
  assign reg2dp_src_surf_stride_T = csb_fifo_rd_pd_T [53:27] ;
  assign csb_fifo_rd_pd_C0 [53:27] = reg2dp_src_surf_stride_C ;
  assign csb_fifo_rd_pd_R0 [53:27] = reg2dp_src_surf_stride_R ;
  assign csb_fifo_rd_pd_X0 [53:27] = reg2dp_src_surf_stride_X ;
  assign reg2dp_src_surf_stride_S = csb_fifo_rd_pd_S ;
  assign reg2dp_surf_repeat_number = csb_fifo_rd_pd[77:54];
  assign reg2dp_surf_repeat_number_T = csb_fifo_rd_pd_T [77:54] ;
  assign csb_fifo_rd_pd_C0 [77:54] = reg2dp_surf_repeat_number_C ;
  assign csb_fifo_rd_pd_R0 [77:54] = reg2dp_surf_repeat_number_R ;
  assign csb_fifo_rd_pd_X0 [77:54] = reg2dp_surf_repeat_number_X ;
  assign reg2dp_surf_repeat_number_S = csb_fifo_rd_pd_S ;
  assign reg_offset = { req_pd[9:0], 2'b00 };
  assign reg_offset_T = {  req_pd_T [9:0] , 2'h0  };
  logic [13:0] reg_offset_S ;
  assign reg_offset_S = 0 ;
  assign { req_pd_R3 [10], req_pd_R3 [11], req_pd_R3 [12], req_pd_R3 [13], req_pd_R3 [14], req_pd_R3 [15], req_pd_R3 [16], req_pd_R3 [17], req_pd_R3 [18], req_pd_R3 [19], req_pd_R3 [20], req_pd_R3 [21], req_pd_R3 [62:54] } = 0;
  assign { req_pd_X3 [10], req_pd_X3 [11], req_pd_X3 [12], req_pd_X3 [13], req_pd_X3 [14], req_pd_X3 [15], req_pd_X3 [16], req_pd_X3 [17], req_pd_X3 [18], req_pd_X3 [19], req_pd_X3 [20], req_pd_X3 [21], req_pd_X3 [62:54] } = 0;
  assign { req_pd_C3 [10], req_pd_C3 [11], req_pd_C3 [12], req_pd_C3 [13], req_pd_C3 [14], req_pd_C3 [15], req_pd_C3 [16], req_pd_C3 [17], req_pd_C3 [18], req_pd_C3 [19], req_pd_C3 [20], req_pd_C3 [21], req_pd_C3 [62:54] } = 0;
  logic [62:0] req_pd_R4 ;
  logic [62:0] req_pd_X4 ;
  logic [62:0] req_pd_C4 ;
  assign req_pd_R4 [9:0] = reg_offset_R [11:2] ;
  assign req_pd_X4 [9:0] = reg_offset_X [11:2] ;
  assign req_pd_C4 [9:0] = reg_offset_C [11:2] ;
  assign reg_wr_data = req_pd[53:22];
  assign reg_wr_data_T = req_pd_T [53:22] ;
  assign req_pd_C4 [53:22] = reg_wr_data_C ;
  assign req_pd_R4 [53:22] = reg_wr_data_R ;
  assign req_pd_X4 [53:22] = reg_wr_data_X ;
  assign reg_wr_data_S = req_pd_S ;
  assign req_addr = req_pd[21:0];
  assign { req_pd_R4 [10], req_pd_R4 [11], req_pd_R4 [12], req_pd_R4 [13], req_pd_R4 [14], req_pd_R4 [15], req_pd_R4 [16], req_pd_R4 [17], req_pd_R4 [18], req_pd_R4 [19], req_pd_R4 [20], req_pd_R4 [21], req_pd_R4 [62:54] } = 0;
  assign { req_pd_X4 [10], req_pd_X4 [11], req_pd_X4 [12], req_pd_X4 [13], req_pd_X4 [14], req_pd_X4 [15], req_pd_X4 [16], req_pd_X4 [17], req_pd_X4 [18], req_pd_X4 [19], req_pd_X4 [20], req_pd_X4 [21], req_pd_X4 [62:54] } = 0;
  assign { req_pd_C4 [10], req_pd_C4 [11], req_pd_C4 [12], req_pd_C4 [13], req_pd_C4 [14], req_pd_C4 [15], req_pd_C4 [16], req_pd_C4 [17], req_pd_C4 [18], req_pd_C4 [19], req_pd_C4 [20], req_pd_C4 [21], req_pd_C4 [62:54] } = 0;
  logic [62:0] req_pd_C5 ;
  logic [62:0] req_pd_R5 ;
  logic [62:0] req_pd_X5 ;
  assign req_addr_T = req_pd_T [21:0] ;
  assign req_pd_C5 [21:0] = req_addr_C ;
  assign req_pd_R5 [21:0] = req_addr_R ;
  assign req_pd_X5 [21:0] = req_addr_X ;
  assign req_addr_S = req_pd_S ;
  assign req_level_NC = req_pd[62:61];
  assign req_level_NC_T = req_pd_T [62:61] ;
  assign req_pd_C5 [62:61] = req_level_NC_C ;
  assign req_pd_R5 [62:61] = req_level_NC_R ;
  assign req_pd_X5 [62:61] = req_level_NC_X ;
  assign req_level_NC_S = req_pd_S ;
  assign req_nposted = req_pd[55];
  assign req_nposted_T = req_pd_T [55] ;
  assign req_pd_C5 [55] = req_nposted_C ;
  assign req_pd_R5 [55] = req_nposted_R ;
  assign req_pd_X5 [55] = req_nposted_X ;
  assign req_nposted_S = req_pd_S ;
  assign req_srcpriv_NC = req_pd[56];
  assign req_srcpriv_NC_T = req_pd_T [56] ;
  assign req_pd_C5 [56] = req_srcpriv_NC_C ;
  assign req_pd_R5 [56] = req_srcpriv_NC_R ;
  assign req_pd_X5 [56] = req_srcpriv_NC_X ;
  assign req_srcpriv_NC_S = req_pd_S ;
  assign req_wdat = req_pd[53:22];
  assign req_wdat_T = req_pd_T [53:22] ;
  assign req_pd_C5 [53:22] = req_wdat_C ;
  assign req_pd_R5 [53:22] = req_wdat_R ;
  assign req_pd_X5 [53:22] = req_wdat_X ;
  assign req_wdat_S = req_pd_S ;
  assign req_wrbe_NC = req_pd[60:57];
  assign req_wrbe_NC_T = req_pd_T [60:57] ;
  assign req_pd_C5 [60:57] = req_wrbe_NC_C ;
  assign req_pd_R5 [60:57] = req_wrbe_NC_R ;
  assign req_pd_X5 [60:57] = req_wrbe_NC_X ;
  assign req_wrbe_NC_S = req_pd_S ;
  assign req_write = req_pd[54];
  assign req_write_T = req_pd_T [54] ;
  assign req_pd_C5 [54] = req_write_C ;
  assign req_pd_R5 [54] = req_write_R ;
  assign req_pd_X5 [54] = req_write_X ;
  assign req_write_S = req_pd_S ;
  assign rsp_rd_error = 1'b0;
  assign rsp_rd_error_T = 0 ;
  assign rsp_rd_error_S = 14'b1 ;
  assign rsp_rd_rdat = rsp_rd_pd;
  logic [16:0] rsp_rd_pd_C4 ;
  logic [16:0] rsp_rd_pd_R4 ;
  logic [16:0] rsp_rd_pd_X4 ;
  assign rsp_rd_rdat_T = rsp_rd_pd_T ;
  assign rsp_rd_pd_C4 = rsp_rd_rdat_C ;
  assign rsp_rd_pd_R4 = rsp_rd_rdat_R ;
  assign rsp_rd_pd_X4 = rsp_rd_rdat_X ;
  assign rsp_rd_rdat_S = rsp_rd_pd_S ;
  assign rsp_wr_error = 1'b0;
  assign rsp_wr_error_T = 0 ;
  assign rsp_wr_error_S = 14'b1 ;
  assign rsp_wr_pd = 33'b000000000000000000000000000000000;
  assign rsp_wr_pd_T = 0 ;
  assign rsp_wr_pd_S = 14'b1 ;
  assign rsp_wr_rdat = 32'd0;
  assign rsp_wr_rdat_T = 0 ;
  assign rsp_wr_rdat_S = 14'b1 ;
  assign status_grp0_clr = st2csb_grp0_done;
  logic [0:0] st2csb_grp0_done_C5 ;
  logic [0:0] st2csb_grp0_done_R5 ;
  logic [0:0] st2csb_grp0_done_X5 ;
  assign status_grp0_clr_T = st2csb_grp0_done_T ;
  assign st2csb_grp0_done_C5 = status_grp0_clr_C ;
  assign st2csb_grp0_done_R5 = status_grp0_clr_R ;
  assign st2csb_grp0_done_X5 = status_grp0_clr_X ;
  assign status_grp0_clr_S = st2csb_grp0_done_S ;
  assign status_grp0_set = grp0_cmd_launch;
  logic [0:0] grp0_cmd_launch_C5 ;
  logic [0:0] grp0_cmd_launch_R5 ;
  logic [0:0] grp0_cmd_launch_X5 ;
  assign status_grp0_set_T = grp0_cmd_launch_T ;
  assign grp0_cmd_launch_C5 = status_grp0_set_C ;
  assign grp0_cmd_launch_R5 = status_grp0_set_R ;
  assign grp0_cmd_launch_X5 = status_grp0_set_X ;
  assign status_grp0_set_S = grp0_cmd_launch_S ;
  assign status_grp1_clr = st2csb_grp1_done;
  logic [0:0] st2csb_grp1_done_C5 ;
  logic [0:0] st2csb_grp1_done_R5 ;
  logic [0:0] st2csb_grp1_done_X5 ;
  assign status_grp1_clr_T = st2csb_grp1_done_T ;
  assign st2csb_grp1_done_C5 = status_grp1_clr_C ;
  assign st2csb_grp1_done_R5 = status_grp1_clr_R ;
  assign st2csb_grp1_done_X5 = status_grp1_clr_X ;
  assign status_grp1_clr_S = st2csb_grp1_done_S ;
  assign status_grp1_set = grp1_cmd_launch;
  logic [0:0] grp1_cmd_launch_C5 ;
  logic [0:0] grp1_cmd_launch_R5 ;
  logic [0:0] grp1_cmd_launch_X5 ;
  assign status_grp1_set_T = grp1_cmd_launch_T ;
  assign grp1_cmd_launch_C5 = status_grp1_set_C ;
  assign grp1_cmd_launch_R5 = status_grp1_set_R ;
  assign grp1_cmd_launch_X5 = status_grp1_set_X ;
  assign status_grp1_set_S = grp1_cmd_launch_S ;
  assign store_idle = st2csb_idle;
  logic [0:0] st2csb_idle_C1 ;
  logic [0:0] st2csb_idle_R1 ;
  logic [0:0] st2csb_idle_X1 ;
  assign store_idle_T = st2csb_idle_T ;
  assign st2csb_idle_C1 = store_idle_C ;
  assign st2csb_idle_R1 = store_idle_R ;
  assign st2csb_idle_X1 = store_idle_X ;
  assign store_idle_S = st2csb_idle_S ;
  assign csb_fifo_rd_pd_C = ( csb_fifo_rd_pd_C0 );
  assign csb_fifo_wr_prdy_C = ( csb_fifo_wr_prdy_C0 );
  assign csb_fifo_rd_pvld_C = ( csb_fifo_rd_pvld_C0 );
  assign slcg_en_C = ( slcg_en_C0 );
  assign nvdla_bdma_status_0_idle_C = ( nvdla_bdma_status_0_idle_C0 );
  assign pwrbus_ram_pd_C = ( pwrbus_ram_pd_C0 );
  assign nvdla_core_rstn_C = ( nvdla_core_rstn_C0 ) | ( nvdla_core_rstn_C1 );
  assign nvdla_bdma_cfg_dst_surf_0_stride_C = ( nvdla_bdma_cfg_dst_surf_0_stride_C0 ) | ( nvdla_bdma_cfg_dst_surf_0_stride_C1 );
  assign nvdla_bdma_cfg_src_surf_0_stride_C = ( nvdla_bdma_cfg_src_surf_0_stride_C0 ) | ( nvdla_bdma_cfg_src_surf_0_stride_C1 );
  assign nvdla_bdma_cfg_surf_repeat_0_number_C = ( nvdla_bdma_cfg_surf_repeat_0_number_C0 ) | ( nvdla_bdma_cfg_surf_repeat_0_number_C1 );
  assign nvdla_bdma_cfg_dst_line_0_stride_C = ( nvdla_bdma_cfg_dst_line_0_stride_C0 ) | ( nvdla_bdma_cfg_dst_line_0_stride_C1 );
  assign nvdla_bdma_cfg_src_line_0_stride_C = ( nvdla_bdma_cfg_src_line_0_stride_C0 ) | ( nvdla_bdma_cfg_src_line_0_stride_C1 );
  assign nvdla_bdma_cfg_line_repeat_0_number_C = ( nvdla_bdma_cfg_line_repeat_0_number_C0 ) | ( nvdla_bdma_cfg_line_repeat_0_number_C1 );
  assign nvdla_bdma_cfg_cmd_0_dst_ram_type_C = ( nvdla_bdma_cfg_cmd_0_dst_ram_type_C0 ) | ( nvdla_bdma_cfg_cmd_0_dst_ram_type_C1 );
  assign nvdla_bdma_cfg_cmd_0_src_ram_type_C = ( nvdla_bdma_cfg_cmd_0_src_ram_type_C0 ) | ( nvdla_bdma_cfg_cmd_0_src_ram_type_C1 );
  assign nvdla_bdma_cfg_line_0_size_C = ( nvdla_bdma_cfg_line_0_size_C0 ) | ( nvdla_bdma_cfg_line_0_size_C1 );
  assign nvdla_bdma_cfg_dst_addr_high_0_v8_C = ( nvdla_bdma_cfg_dst_addr_high_0_v8_C0 ) | ( nvdla_bdma_cfg_dst_addr_high_0_v8_C1 );
  assign nvdla_bdma_cfg_dst_addr_low_0_v32_C = ( nvdla_bdma_cfg_dst_addr_low_0_v32_C0 ) | ( nvdla_bdma_cfg_dst_addr_low_0_v32_C1 );
  assign nvdla_bdma_cfg_src_addr_high_0_v8_C = ( nvdla_bdma_cfg_src_addr_high_0_v8_C0 ) | ( nvdla_bdma_cfg_src_addr_high_0_v8_C1 );
  assign nvdla_bdma_cfg_src_addr_low_0_v32_C = ( nvdla_bdma_cfg_src_addr_low_0_v32_C0 ) | ( nvdla_bdma_cfg_src_addr_low_0_v32_C1 );
  assign grp1_read_stall_cnt_cnt_new_C = ( grp1_read_stall_cnt_cnt_new_C0 );
  assign grp1_read_stall_cnt_cnt_inc_C = ( grp1_read_stall_cnt_cnt_inc_C0 ) | ( grp1_read_stall_cnt_cnt_inc_C1 );
  assign ld2csb_grp1_dma_stall_inc_C = ( ld2csb_grp1_dma_stall_inc_C0 ) | ( ld2csb_grp1_dma_stall_inc_C1 );
  assign grp0_read_stall_cnt_cnt_new_C = ( grp0_read_stall_cnt_cnt_new_C0 );
  assign grp0_read_stall_cnt_cnt_inc_C = ( grp0_read_stall_cnt_cnt_inc_C0 ) | ( grp0_read_stall_cnt_cnt_inc_C1 );
  assign ld2csb_grp0_dma_stall_inc_C = ( ld2csb_grp0_dma_stall_inc_C0 ) | ( ld2csb_grp0_dma_stall_inc_C1 );
  assign csb_fifo_wr_count_C = ( csb_fifo_wr_count_C0 );
  assign nvdla_bdma_status_0_free_slot_C = ( nvdla_bdma_status_0_free_slot_C0 ) | ( nvdla_bdma_status_0_free_slot_C1 ) | ( nvdla_bdma_status_0_free_slot_C2 ) | ( nvdla_bdma_status_0_free_slot_C3 ) | ( nvdla_bdma_status_0_free_slot_C4 ) | ( nvdla_bdma_status_0_free_slot_C5 );
  assign csb2bdma_req_pd_C = ( csb2bdma_req_pd_C0 );
  assign fangyuan6_C = ( fangyuan6_C0 );
  assign rsp_pd_C = ( rsp_pd_C0 );
  assign _040__C = ( _040__C0 );
  assign fangyuan5_C = ( fangyuan5_C0 );
  assign gather_to_launch_C = ( gather_to_launch_C0 );
  assign _016__C = ( _016__C0 );
  assign csb_fifo_wr_pvld_C = ( csb_fifo_wr_pvld_C0 ) | ( csb_fifo_wr_pvld_C1 ) | ( csb_fifo_wr_pvld_C2 );
  assign cmd_launch_rdy_C = ( cmd_launch_rdy_C0 );
  assign _039__C = ( _039__C0 );
  assign _035__C = ( _035__C0 );
  assign _038__C = ( _038__C0 );
  assign _037__C = ( _037__C0 );
  assign _036__C = ( _036__C0 );
  assign _020__C = ( _020__C0 ) | ( _020__C1 );
  assign _034__C = ( _034__C0 );
  assign _033__C = ( _033__C0 );
  assign _032__C = ( _032__C0 ) | ( _032__C1 );
  assign launch_ptr_C = ( launch_ptr_C0 ) | ( launch_ptr_C1 ) | ( launch_ptr_C2 ) | ( launch_ptr_C3 );
  assign gather_ptr_C = ( gather_ptr_C0 ) | ( gather_ptr_C1 );
  assign _031__C = ( _031__C0 );
  assign status_grp0_busy_C = ( status_grp0_busy_C0 ) | ( status_grp0_busy_C1 ) | ( status_grp0_busy_C2 );
  assign _030__C = ( _030__C0 );
  assign status_grp1_busy_C = ( status_grp1_busy_C0 ) | ( status_grp1_busy_C1 ) | ( status_grp1_busy_C2 );
  assign grp0_read_stall_cnt_cnt_nxt_C = ( grp0_read_stall_cnt_cnt_nxt_C0 );
  assign grp1_read_stall_cnt_cnt_nxt_C = ( grp1_read_stall_cnt_cnt_nxt_C0 );
  assign nvdla_bdma_cfg_status_0_stall_count_en_C = ( nvdla_bdma_cfg_status_0_stall_count_en_C0 ) | ( nvdla_bdma_cfg_status_0_stall_count_en_C1 ) | ( nvdla_bdma_cfg_status_0_stall_count_en_C2 ) | ( nvdla_bdma_cfg_status_0_stall_count_en_C3 );
  assign _029__C = ( _029__C0 );
  assign status_grp0_read_stall_count_C = ( status_grp0_read_stall_count_C0 ) | ( status_grp0_read_stall_count_C1 ) | ( status_grp0_read_stall_count_C2 );
  assign _028__C = ( _028__C0 );
  assign status_grp1_read_stall_count_C = ( status_grp1_read_stall_count_C0 ) | ( status_grp1_read_stall_count_C1 ) | ( status_grp1_read_stall_count_C2 );
  assign _027__C = ( _027__C0 );
  assign status_grp0_write_stall_count_C = ( status_grp0_write_stall_count_C0 ) | ( status_grp0_write_stall_count_C1 ) | ( status_grp0_write_stall_count_C2 );
  assign _026__C = ( _026__C0 );
  assign status_grp1_write_stall_count_C = ( status_grp1_write_stall_count_C0 ) | ( status_grp1_write_stall_count_C1 ) | ( status_grp1_write_stall_count_C2 );
  assign dma_write_stall_count_C = ( dma_write_stall_count_C0 ) | ( dma_write_stall_count_C1 );
  assign csb2bdma_req_pvld_C = ( csb2bdma_req_pvld_C0 ) | ( csb2bdma_req_pvld_C1 );
  assign _008__C = ( _008__C0 );
  assign rsp_vld_C = ( rsp_vld_C0 ) | ( rsp_vld_C1 );
  assign _000__C = ( _000__C0 );
  assign nvdla_bdma_cfg_op_0_en_trigger_C = ( nvdla_bdma_cfg_op_0_en_trigger_C0 );
  assign nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_C = ( nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_C0 );
  assign nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_C = ( nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_C0 );
  assign _001__C = ( _001__C0 );
  assign _003__C = ( _003__C0 );
  assign _002__C = ( _002__C0 );
  assign _007__C = ( _007__C0 );
  assign _006__C = ( _006__C0 );
  assign _010__C = ( _010__C0 );
  assign _013__C = ( _013__C0 );
  assign _004__C = ( _004__C0 );
  assign _005__C = ( _005__C0 );
  assign _011__C = ( _011__C0 );
  assign _014__C = ( _014__C0 );
  assign _012__C = ( _012__C0 );
  assign _015__C = ( _015__C0 );
  assign st2csb_grp0_done_C = ( st2csb_grp0_done_C0 ) | ( st2csb_grp0_done_C1 ) | ( st2csb_grp0_done_C2 ) | ( st2csb_grp0_done_C3 ) | ( st2csb_grp0_done_C4 ) | ( st2csb_grp0_done_C5 );
  assign st2csb_grp1_done_C = ( st2csb_grp1_done_C0 ) | ( st2csb_grp1_done_C1 ) | ( st2csb_grp1_done_C2 ) | ( st2csb_grp1_done_C3 ) | ( st2csb_grp1_done_C4 ) | ( st2csb_grp1_done_C5 );
  assign _009__C = ( _009__C0 );
  assign csb_processing_d_C = ( csb_processing_d_C0 );
  assign csb_processing_C = ( csb_processing_C0 ) | ( csb_processing_C1 );
  assign _025__C = ( _025__C0 );
  assign cmd_launch_vld_C = ( cmd_launch_vld_C0 ) | ( cmd_launch_vld_C1 );
  assign grp1_cmd_launch_C = ( grp1_cmd_launch_C0 ) | ( grp1_cmd_launch_C1 ) | ( grp1_cmd_launch_C2 ) | ( grp1_cmd_launch_C3 ) | ( grp1_cmd_launch_C4 ) | ( grp1_cmd_launch_C5 );
  assign grp0_cmd_launch_C = ( grp0_cmd_launch_C0 ) | ( grp0_cmd_launch_C1 ) | ( grp0_cmd_launch_C2 ) | ( grp0_cmd_launch_C3 ) | ( grp0_cmd_launch_C4 ) | ( grp0_cmd_launch_C5 );
  assign _018__C = ( _018__C0 );
  assign _017__C = ( _017__C0 );
  assign is_last_cmd_rdy_C = ( is_last_cmd_rdy_C0 ) | ( is_last_cmd_rdy_C1 );
  assign _023__C = ( _023__C0 );
  assign _022__C = ( _022__C0 );
  assign launch_vld_C = ( launch_vld_C0 ) | ( launch_vld_C1 ) | ( launch_vld_C2 ) | ( launch_vld_C3 ) | ( launch_vld_C4 );
  assign launch_count_C = ( launch_count_C0 ) | ( launch_count_C1 ) | ( launch_count_C2 ) | ( launch_count_C3 ) | ( launch_count_C4 );
  assign csb_fifo_wr_idle_C = ( csb_fifo_wr_idle_C0 ) | ( csb_fifo_wr_idle_C1 );
  assign _019__C = ( _019__C0 );
  assign ld2csb_idle_C = ( ld2csb_idle_C0 ) | ( ld2csb_idle_C1 );
  assign st2csb_idle_C = ( st2csb_idle_C0 ) | ( st2csb_idle_C1 );
  assign is_last_cmd_C = ( is_last_cmd_C0 ) | ( is_last_cmd_C1 ) | ( is_last_cmd_C2 );
  assign csb2ld_rdy_C = ( csb2ld_rdy_C0 ) | ( csb2ld_rdy_C1 ) | ( csb2ld_rdy_C2 ) | ( csb2ld_rdy_C3 ) | ( csb2ld_rdy_C4 ) | ( csb2ld_rdy_C5 );
  assign gather_rdy_C = ( gather_rdy_C0 ) | ( gather_rdy_C1 );
  assign gather_vld_C = ( gather_vld_C0 ) | ( gather_vld_C1 ) | ( gather_vld_C2 ) | ( gather_vld_C3 ) | ( gather_vld_C4 ) | ( gather_vld_C5 ) | ( gather_vld_C6 );
  assign nvdla_bdma_cfg_launch1_0_grp1_launch_C = ( nvdla_bdma_cfg_launch1_0_grp1_launch_C0 );
  assign grp1_cmd_launch_trigger_C = ( grp1_cmd_launch_trigger_C0 );
  assign nvdla_bdma_cfg_launch0_0_grp0_launch_C = ( nvdla_bdma_cfg_launch0_0_grp0_launch_C0 );
  assign grp0_cmd_launch_trigger_C = ( grp0_cmd_launch_trigger_C0 );
  assign nvdla_bdma_cfg_op_0_en_C = ( nvdla_bdma_cfg_op_0_en_C0 );
  assign op_en_trigger_C = ( op_en_trigger_C0 );
  assign fangyuan4_C = ( fangyuan4_C0 );
  assign rsp_wr_vld_C = ( rsp_wr_vld_C0 ) | ( rsp_wr_vld_C1 ) | ( rsp_wr_vld_C2 ) | ( rsp_wr_vld_C3 ) | ( rsp_wr_vld_C4 ) | ( rsp_wr_vld_C5 ) | ( rsp_wr_vld_C6 ) | ( rsp_wr_vld_C7 ) | ( rsp_wr_vld_C8 ) | ( rsp_wr_vld_C9 ) | ( rsp_wr_vld_C10 ) | ( rsp_wr_vld_C11 ) | ( rsp_wr_vld_C12 ) | ( rsp_wr_vld_C13 ) | ( rsp_wr_vld_C14 ) | ( rsp_wr_vld_C15 ) | ( rsp_wr_vld_C16 ) | ( rsp_wr_vld_C17 ) | ( rsp_wr_vld_C18 ) | ( rsp_wr_vld_C19 ) | ( rsp_wr_vld_C20 ) | ( rsp_wr_vld_C21 ) | ( rsp_wr_vld_C22 ) | ( rsp_wr_vld_C23 ) | ( rsp_wr_vld_C24 ) | ( rsp_wr_vld_C25 ) | ( rsp_wr_vld_C26 ) | ( rsp_wr_vld_C27 ) | ( rsp_wr_vld_C28 ) | ( rsp_wr_vld_C29 ) | ( rsp_wr_vld_C30 ) | ( rsp_wr_vld_C31 ) | ( rsp_wr_vld_C32 ) | ( rsp_wr_vld_C33 ) | ( rsp_wr_vld_C34 );
  assign fangyuan3_C = ( fangyuan3_C0 );
  assign fangyuan2_C = ( fangyuan2_C0 );
  assign reg_wr_en_C = ( reg_wr_en_C0 ) | ( reg_wr_en_C1 );
  assign req_pd_C = ( req_pd_C0 ) | ( req_pd_C1 ) | ( req_pd_C2 ) | ( req_pd_C3 ) | ( req_pd_C4 ) | ( req_pd_C5 );
  assign reg_rd_data_C = ( reg_rd_data_C0 );
  assign fangyuan1_C = ( fangyuan1_C0 );
  assign rsp_rd_vld_C = ( rsp_rd_vld_C0 ) | ( rsp_rd_vld_C1 ) | ( rsp_rd_vld_C2 ) | ( rsp_rd_vld_C3 ) | ( rsp_rd_vld_C4 ) | ( rsp_rd_vld_C5 ) | ( rsp_rd_vld_C6 ) | ( rsp_rd_vld_C7 ) | ( rsp_rd_vld_C8 ) | ( rsp_rd_vld_C9 ) | ( rsp_rd_vld_C10 ) | ( rsp_rd_vld_C11 ) | ( rsp_rd_vld_C12 ) | ( rsp_rd_vld_C13 ) | ( rsp_rd_vld_C14 ) | ( rsp_rd_vld_C15 ) | ( rsp_rd_vld_C16 ) | ( rsp_rd_vld_C17 ) | ( rsp_rd_vld_C18 ) | ( rsp_rd_vld_C19 ) | ( rsp_rd_vld_C20 ) | ( rsp_rd_vld_C21 ) | ( rsp_rd_vld_C22 ) | ( rsp_rd_vld_C23 ) | ( rsp_rd_vld_C24 ) | ( rsp_rd_vld_C25 ) | ( rsp_rd_vld_C26 ) | ( rsp_rd_vld_C27 ) | ( rsp_rd_vld_C28 ) | ( rsp_rd_vld_C29 ) | ( rsp_rd_vld_C30 ) | ( rsp_rd_vld_C31 ) | ( rsp_rd_vld_C32 ) | ( rsp_rd_vld_C33 ) | ( rsp_rd_vld_C34 ) | ( rsp_rd_vld_C35 ) | ( rsp_rd_vld_C36 ) | ( rsp_rd_vld_C37 ) | ( rsp_rd_vld_C38 ) | ( rsp_rd_vld_C39 ) | ( rsp_rd_vld_C40 ) | ( rsp_rd_vld_C41 ) | ( rsp_rd_vld_C42 ) | ( rsp_rd_vld_C43 ) | ( rsp_rd_vld_C44 ) | ( rsp_rd_vld_C45 ) | ( rsp_rd_vld_C46 ) | ( rsp_rd_vld_C47 ) | ( rsp_rd_vld_C48 ) | ( rsp_rd_vld_C49 ) | ( rsp_rd_vld_C50 ) | ( rsp_rd_vld_C51 ) | ( rsp_rd_vld_C52 ) | ( rsp_rd_vld_C53 ) | ( rsp_rd_vld_C54 ) | ( rsp_rd_vld_C55 ) | ( rsp_rd_vld_C56 ) | ( rsp_rd_vld_C57 ) | ( rsp_rd_vld_C58 ) | ( rsp_rd_vld_C59 ) | ( rsp_rd_vld_C60 ) | ( rsp_rd_vld_C61 ) | ( rsp_rd_vld_C62 ) | ( rsp_rd_vld_C63 ) | ( rsp_rd_vld_C64 ) | ( rsp_rd_vld_C65 );
  assign rsp_rd_pd_C = ( rsp_rd_pd_C0 ) | ( rsp_rd_pd_C1 ) | ( rsp_rd_pd_C2 ) | ( rsp_rd_pd_C3 ) | ( rsp_rd_pd_C4 );
  assign _021__C = ( _021__C0 ) | ( _021__C1 );
  assign _024__C = ( _024__C0 );
  assign req_vld_C = ( req_vld_C0 ) | ( req_vld_C1 );
  assign grp1_read_stall_cnt_cnt_cur_C = ( grp1_read_stall_cnt_cnt_cur_C0 ) | ( grp1_read_stall_cnt_cnt_cur_C1 ) | ( grp1_read_stall_cnt_cnt_cur_C2 ) | ( grp1_read_stall_cnt_cnt_cur_C3 ) | ( grp1_read_stall_cnt_cnt_cur_C4 ) | ( grp1_read_stall_cnt_cnt_cur_C5 );
  assign grp0_read_stall_cnt_cnt_cur_C = ( grp0_read_stall_cnt_cnt_cur_C0 ) | ( grp0_read_stall_cnt_cnt_cur_C1 ) | ( grp0_read_stall_cnt_cnt_cur_C2 ) | ( grp0_read_stall_cnt_cnt_cur_C3 ) | ( grp0_read_stall_cnt_cnt_cur_C4 ) | ( grp0_read_stall_cnt_cnt_cur_C5 );
  assign gather_count_C = ( gather_count_C0 ) | ( gather_count_C1 ) | ( gather_count_C2 ) | ( gather_count_C3 );
  assign reg2dp_surf_repeat_number_C = ( reg2dp_surf_repeat_number_C0 );
  assign reg2dp_src_surf_stride_C = ( reg2dp_src_surf_stride_C0 );
  assign reg2dp_src_line_stride_C = ( reg2dp_src_line_stride_C0 );
  assign reg2dp_src_addr_low_v32_C = ( reg2dp_src_addr_low_v32_C0 );
  assign reg2dp_src_addr_high_v8_C = ( reg2dp_src_addr_high_v8_C0 );
  assign reg2dp_line_size_C = ( reg2dp_line_size_C0 );
  assign reg2dp_line_repeat_number_C = ( reg2dp_line_repeat_number_C0 );
  assign reg2dp_dst_surf_stride_C = ( reg2dp_dst_surf_stride_C0 );
  assign reg2dp_dst_line_stride_C = ( reg2dp_dst_line_stride_C0 );
  assign reg2dp_dst_addr_low_v32_C = ( reg2dp_dst_addr_low_v32_C0 );
  assign reg2dp_dst_addr_high_v8_C = ( reg2dp_dst_addr_high_v8_C0 );
  assign reg2dp_cmd_src_ram_type_C = ( reg2dp_cmd_src_ram_type_C0 );
  assign reg2dp_cmd_interrupt_ptr_C = ( reg2dp_cmd_interrupt_ptr_C0 );
  assign reg2dp_cmd_interrupt_C = ( reg2dp_cmd_interrupt_C0 );
  assign reg2dp_cmd_dst_ram_type_C = ( reg2dp_cmd_dst_ram_type_C0 );
  assign dma_write_stall_count_cen_C = ( dma_write_stall_count_cen_C0 );
  assign csb2ld_vld_C = ( csb2ld_vld_C0 );
  assign csb2gate_slcg_en_C = ( csb2gate_slcg_en_C0 );
  assign csb2bdma_req_prdy_C = ( csb2bdma_req_prdy_C0 );
  assign bdma2glb_done_intr_pd_C = ( bdma2glb_done_intr_pd_C0 );
  assign bdma2csb_resp_valid_C = ( bdma2csb_resp_valid_C0 );
  assign bdma2csb_resp_pd_C = ( bdma2csb_resp_pd_C0 ) | ( bdma2csb_resp_pd_C1 );
  assign csb_fifo_rd_pd_X = ( csb_fifo_rd_pd_X0 );
  assign csb_fifo_wr_prdy_X = ( csb_fifo_wr_prdy_X0 );
  assign csb_fifo_rd_pvld_X = ( csb_fifo_rd_pvld_X0 );
  assign slcg_en_X = ( slcg_en_X0 );
  assign nvdla_bdma_status_0_idle_X = ( nvdla_bdma_status_0_idle_X0 );
  assign pwrbus_ram_pd_X = ( pwrbus_ram_pd_X0 );
  assign nvdla_core_rstn_X = ( nvdla_core_rstn_X0 ) | ( nvdla_core_rstn_X1 );
  assign nvdla_bdma_cfg_dst_surf_0_stride_X = ( nvdla_bdma_cfg_dst_surf_0_stride_X0 ) | ( nvdla_bdma_cfg_dst_surf_0_stride_X1 );
  assign nvdla_bdma_cfg_src_surf_0_stride_X = ( nvdla_bdma_cfg_src_surf_0_stride_X0 ) | ( nvdla_bdma_cfg_src_surf_0_stride_X1 );
  assign nvdla_bdma_cfg_surf_repeat_0_number_X = ( nvdla_bdma_cfg_surf_repeat_0_number_X0 ) | ( nvdla_bdma_cfg_surf_repeat_0_number_X1 );
  assign nvdla_bdma_cfg_dst_line_0_stride_X = ( nvdla_bdma_cfg_dst_line_0_stride_X0 ) | ( nvdla_bdma_cfg_dst_line_0_stride_X1 );
  assign nvdla_bdma_cfg_src_line_0_stride_X = ( nvdla_bdma_cfg_src_line_0_stride_X0 ) | ( nvdla_bdma_cfg_src_line_0_stride_X1 );
  assign nvdla_bdma_cfg_line_repeat_0_number_X = ( nvdla_bdma_cfg_line_repeat_0_number_X0 ) | ( nvdla_bdma_cfg_line_repeat_0_number_X1 );
  assign nvdla_bdma_cfg_cmd_0_dst_ram_type_X = ( nvdla_bdma_cfg_cmd_0_dst_ram_type_X0 ) | ( nvdla_bdma_cfg_cmd_0_dst_ram_type_X1 );
  assign nvdla_bdma_cfg_cmd_0_src_ram_type_X = ( nvdla_bdma_cfg_cmd_0_src_ram_type_X0 ) | ( nvdla_bdma_cfg_cmd_0_src_ram_type_X1 );
  assign nvdla_bdma_cfg_line_0_size_X = ( nvdla_bdma_cfg_line_0_size_X0 ) | ( nvdla_bdma_cfg_line_0_size_X1 );
  assign nvdla_bdma_cfg_dst_addr_high_0_v8_X = ( nvdla_bdma_cfg_dst_addr_high_0_v8_X0 ) | ( nvdla_bdma_cfg_dst_addr_high_0_v8_X1 );
  assign nvdla_bdma_cfg_dst_addr_low_0_v32_X = ( nvdla_bdma_cfg_dst_addr_low_0_v32_X0 ) | ( nvdla_bdma_cfg_dst_addr_low_0_v32_X1 );
  assign nvdla_bdma_cfg_src_addr_high_0_v8_X = ( nvdla_bdma_cfg_src_addr_high_0_v8_X0 ) | ( nvdla_bdma_cfg_src_addr_high_0_v8_X1 );
  assign nvdla_bdma_cfg_src_addr_low_0_v32_X = ( nvdla_bdma_cfg_src_addr_low_0_v32_X0 ) | ( nvdla_bdma_cfg_src_addr_low_0_v32_X1 );
  assign grp1_read_stall_cnt_cnt_new_X = ( grp1_read_stall_cnt_cnt_new_X0 );
  assign grp1_read_stall_cnt_cnt_inc_X = ( grp1_read_stall_cnt_cnt_inc_X0 ) | ( grp1_read_stall_cnt_cnt_inc_X1 );
  assign ld2csb_grp1_dma_stall_inc_X = ( ld2csb_grp1_dma_stall_inc_X0 ) | ( ld2csb_grp1_dma_stall_inc_X1 );
  assign grp0_read_stall_cnt_cnt_new_X = ( grp0_read_stall_cnt_cnt_new_X0 );
  assign grp0_read_stall_cnt_cnt_inc_X = ( grp0_read_stall_cnt_cnt_inc_X0 ) | ( grp0_read_stall_cnt_cnt_inc_X1 );
  assign ld2csb_grp0_dma_stall_inc_X = ( ld2csb_grp0_dma_stall_inc_X0 ) | ( ld2csb_grp0_dma_stall_inc_X1 );
  assign csb_fifo_wr_count_X = ( csb_fifo_wr_count_X0 );
  assign nvdla_bdma_status_0_free_slot_X = ( nvdla_bdma_status_0_free_slot_X0 ) | ( nvdla_bdma_status_0_free_slot_X1 ) | ( nvdla_bdma_status_0_free_slot_X2 ) | ( nvdla_bdma_status_0_free_slot_X3 ) | ( nvdla_bdma_status_0_free_slot_X4 ) | ( nvdla_bdma_status_0_free_slot_X5 );
  assign csb2bdma_req_pd_X = ( csb2bdma_req_pd_X0 );
  assign fangyuan6_X = ( fangyuan6_X0 );
  assign rsp_pd_X = ( rsp_pd_X0 );
  assign _040__X = ( _040__X0 );
  assign fangyuan5_X = ( fangyuan5_X0 );
  assign gather_to_launch_X = ( gather_to_launch_X0 );
  assign _016__X = ( _016__X0 );
  assign csb_fifo_wr_pvld_X = ( csb_fifo_wr_pvld_X0 ) | ( csb_fifo_wr_pvld_X1 ) | ( csb_fifo_wr_pvld_X2 );
  assign cmd_launch_rdy_X = ( cmd_launch_rdy_X0 );
  assign _039__X = ( _039__X0 );
  assign _035__X = ( _035__X0 );
  assign _038__X = ( _038__X0 );
  assign _037__X = ( _037__X0 );
  assign _036__X = ( _036__X0 );
  assign _020__X = ( _020__X0 ) | ( _020__X1 );
  assign _034__X = ( _034__X0 );
  assign _033__X = ( _033__X0 );
  assign _032__X = ( _032__X0 ) | ( _032__X1 );
  assign launch_ptr_X = ( launch_ptr_X0 ) | ( launch_ptr_X1 ) | ( launch_ptr_X2 ) | ( launch_ptr_X3 );
  assign gather_ptr_X = ( gather_ptr_X0 ) | ( gather_ptr_X1 );
  assign _031__X = ( _031__X0 );
  assign status_grp0_busy_X = ( status_grp0_busy_X0 ) | ( status_grp0_busy_X1 ) | ( status_grp0_busy_X2 );
  assign _030__X = ( _030__X0 );
  assign status_grp1_busy_X = ( status_grp1_busy_X0 ) | ( status_grp1_busy_X1 ) | ( status_grp1_busy_X2 );
  assign grp0_read_stall_cnt_cnt_nxt_X = ( grp0_read_stall_cnt_cnt_nxt_X0 );
  assign grp1_read_stall_cnt_cnt_nxt_X = ( grp1_read_stall_cnt_cnt_nxt_X0 );
  assign nvdla_bdma_cfg_status_0_stall_count_en_X = ( nvdla_bdma_cfg_status_0_stall_count_en_X0 ) | ( nvdla_bdma_cfg_status_0_stall_count_en_X1 ) | ( nvdla_bdma_cfg_status_0_stall_count_en_X2 ) | ( nvdla_bdma_cfg_status_0_stall_count_en_X3 );
  assign _029__X = ( _029__X0 );
  assign status_grp0_read_stall_count_X = ( status_grp0_read_stall_count_X0 ) | ( status_grp0_read_stall_count_X1 ) | ( status_grp0_read_stall_count_X2 );
  assign _028__X = ( _028__X0 );
  assign status_grp1_read_stall_count_X = ( status_grp1_read_stall_count_X0 ) | ( status_grp1_read_stall_count_X1 ) | ( status_grp1_read_stall_count_X2 );
  assign _027__X = ( _027__X0 );
  assign status_grp0_write_stall_count_X = ( status_grp0_write_stall_count_X0 ) | ( status_grp0_write_stall_count_X1 ) | ( status_grp0_write_stall_count_X2 );
  assign _026__X = ( _026__X0 );
  assign status_grp1_write_stall_count_X = ( status_grp1_write_stall_count_X0 ) | ( status_grp1_write_stall_count_X1 ) | ( status_grp1_write_stall_count_X2 );
  assign dma_write_stall_count_X = ( dma_write_stall_count_X0 ) | ( dma_write_stall_count_X1 );
  assign csb2bdma_req_pvld_X = ( csb2bdma_req_pvld_X0 ) | ( csb2bdma_req_pvld_X1 );
  assign _008__X = ( _008__X0 );
  assign rsp_vld_X = ( rsp_vld_X0 ) | ( rsp_vld_X1 );
  assign _000__X = ( _000__X0 );
  assign nvdla_bdma_cfg_op_0_en_trigger_X = ( nvdla_bdma_cfg_op_0_en_trigger_X0 );
  assign nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_X = ( nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_X0 );
  assign nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_X = ( nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_X0 );
  assign _001__X = ( _001__X0 );
  assign _003__X = ( _003__X0 );
  assign _002__X = ( _002__X0 );
  assign _007__X = ( _007__X0 );
  assign _006__X = ( _006__X0 );
  assign _010__X = ( _010__X0 );
  assign _013__X = ( _013__X0 );
  assign _004__X = ( _004__X0 );
  assign _005__X = ( _005__X0 );
  assign _011__X = ( _011__X0 );
  assign _014__X = ( _014__X0 );
  assign _012__X = ( _012__X0 );
  assign _015__X = ( _015__X0 );
  assign st2csb_grp0_done_X = ( st2csb_grp0_done_X0 ) | ( st2csb_grp0_done_X1 ) | ( st2csb_grp0_done_X2 ) | ( st2csb_grp0_done_X3 ) | ( st2csb_grp0_done_X4 ) | ( st2csb_grp0_done_X5 );
  assign st2csb_grp1_done_X = ( st2csb_grp1_done_X0 ) | ( st2csb_grp1_done_X1 ) | ( st2csb_grp1_done_X2 ) | ( st2csb_grp1_done_X3 ) | ( st2csb_grp1_done_X4 ) | ( st2csb_grp1_done_X5 );
  assign _009__X = ( _009__X0 );
  assign csb_processing_d_X = ( csb_processing_d_X0 );
  assign csb_processing_X = ( csb_processing_X0 ) | ( csb_processing_X1 );
  assign _025__X = ( _025__X0 );
  assign cmd_launch_vld_X = ( cmd_launch_vld_X0 ) | ( cmd_launch_vld_X1 );
  assign grp1_cmd_launch_X = ( grp1_cmd_launch_X0 ) | ( grp1_cmd_launch_X1 ) | ( grp1_cmd_launch_X2 ) | ( grp1_cmd_launch_X3 ) | ( grp1_cmd_launch_X4 ) | ( grp1_cmd_launch_X5 );
  assign grp0_cmd_launch_X = ( grp0_cmd_launch_X0 ) | ( grp0_cmd_launch_X1 ) | ( grp0_cmd_launch_X2 ) | ( grp0_cmd_launch_X3 ) | ( grp0_cmd_launch_X4 ) | ( grp0_cmd_launch_X5 );
  assign _018__X = ( _018__X0 );
  assign _017__X = ( _017__X0 );
  assign is_last_cmd_rdy_X = ( is_last_cmd_rdy_X0 ) | ( is_last_cmd_rdy_X1 );
  assign _023__X = ( _023__X0 );
  assign _022__X = ( _022__X0 );
  assign launch_vld_X = ( launch_vld_X0 ) | ( launch_vld_X1 ) | ( launch_vld_X2 ) | ( launch_vld_X3 ) | ( launch_vld_X4 );
  assign launch_count_X = ( launch_count_X0 ) | ( launch_count_X1 ) | ( launch_count_X2 ) | ( launch_count_X3 ) | ( launch_count_X4 );
  assign csb_fifo_wr_idle_X = ( csb_fifo_wr_idle_X0 ) | ( csb_fifo_wr_idle_X1 );
  assign _019__X = ( _019__X0 );
  assign ld2csb_idle_X = ( ld2csb_idle_X0 ) | ( ld2csb_idle_X1 );
  assign st2csb_idle_X = ( st2csb_idle_X0 ) | ( st2csb_idle_X1 );
  assign is_last_cmd_X = ( is_last_cmd_X0 ) | ( is_last_cmd_X1 ) | ( is_last_cmd_X2 );
  assign csb2ld_rdy_X = ( csb2ld_rdy_X0 ) | ( csb2ld_rdy_X1 ) | ( csb2ld_rdy_X2 ) | ( csb2ld_rdy_X3 ) | ( csb2ld_rdy_X4 ) | ( csb2ld_rdy_X5 );
  assign gather_rdy_X = ( gather_rdy_X0 ) | ( gather_rdy_X1 );
  assign gather_vld_X = ( gather_vld_X0 ) | ( gather_vld_X1 ) | ( gather_vld_X2 ) | ( gather_vld_X3 ) | ( gather_vld_X4 ) | ( gather_vld_X5 ) | ( gather_vld_X6 );
  assign nvdla_bdma_cfg_launch1_0_grp1_launch_X = ( nvdla_bdma_cfg_launch1_0_grp1_launch_X0 );
  assign grp1_cmd_launch_trigger_X = ( grp1_cmd_launch_trigger_X0 );
  assign nvdla_bdma_cfg_launch0_0_grp0_launch_X = ( nvdla_bdma_cfg_launch0_0_grp0_launch_X0 );
  assign grp0_cmd_launch_trigger_X = ( grp0_cmd_launch_trigger_X0 );
  assign nvdla_bdma_cfg_op_0_en_X = ( nvdla_bdma_cfg_op_0_en_X0 );
  assign op_en_trigger_X = ( op_en_trigger_X0 );
  assign fangyuan4_X = ( fangyuan4_X0 );
  assign rsp_wr_vld_X = ( rsp_wr_vld_X0 ) | ( rsp_wr_vld_X1 ) | ( rsp_wr_vld_X2 ) | ( rsp_wr_vld_X3 ) | ( rsp_wr_vld_X4 ) | ( rsp_wr_vld_X5 ) | ( rsp_wr_vld_X6 ) | ( rsp_wr_vld_X7 ) | ( rsp_wr_vld_X8 ) | ( rsp_wr_vld_X9 ) | ( rsp_wr_vld_X10 ) | ( rsp_wr_vld_X11 ) | ( rsp_wr_vld_X12 ) | ( rsp_wr_vld_X13 ) | ( rsp_wr_vld_X14 ) | ( rsp_wr_vld_X15 ) | ( rsp_wr_vld_X16 ) | ( rsp_wr_vld_X17 ) | ( rsp_wr_vld_X18 ) | ( rsp_wr_vld_X19 ) | ( rsp_wr_vld_X20 ) | ( rsp_wr_vld_X21 ) | ( rsp_wr_vld_X22 ) | ( rsp_wr_vld_X23 ) | ( rsp_wr_vld_X24 ) | ( rsp_wr_vld_X25 ) | ( rsp_wr_vld_X26 ) | ( rsp_wr_vld_X27 ) | ( rsp_wr_vld_X28 ) | ( rsp_wr_vld_X29 ) | ( rsp_wr_vld_X30 ) | ( rsp_wr_vld_X31 ) | ( rsp_wr_vld_X32 ) | ( rsp_wr_vld_X33 ) | ( rsp_wr_vld_X34 );
  assign fangyuan3_X = ( fangyuan3_X0 );
  assign fangyuan2_X = ( fangyuan2_X0 );
  assign reg_wr_en_X = ( reg_wr_en_X0 ) | ( reg_wr_en_X1 );
  assign req_pd_X = ( req_pd_X0 ) | ( req_pd_X1 ) | ( req_pd_X2 ) | ( req_pd_X3 ) | ( req_pd_X4 ) | ( req_pd_X5 );
  assign reg_rd_data_X = ( reg_rd_data_X0 );
  assign fangyuan1_X = ( fangyuan1_X0 );
  assign rsp_rd_vld_X = ( rsp_rd_vld_X0 ) | ( rsp_rd_vld_X1 ) | ( rsp_rd_vld_X2 ) | ( rsp_rd_vld_X3 ) | ( rsp_rd_vld_X4 ) | ( rsp_rd_vld_X5 ) | ( rsp_rd_vld_X6 ) | ( rsp_rd_vld_X7 ) | ( rsp_rd_vld_X8 ) | ( rsp_rd_vld_X9 ) | ( rsp_rd_vld_X10 ) | ( rsp_rd_vld_X11 ) | ( rsp_rd_vld_X12 ) | ( rsp_rd_vld_X13 ) | ( rsp_rd_vld_X14 ) | ( rsp_rd_vld_X15 ) | ( rsp_rd_vld_X16 ) | ( rsp_rd_vld_X17 ) | ( rsp_rd_vld_X18 ) | ( rsp_rd_vld_X19 ) | ( rsp_rd_vld_X20 ) | ( rsp_rd_vld_X21 ) | ( rsp_rd_vld_X22 ) | ( rsp_rd_vld_X23 ) | ( rsp_rd_vld_X24 ) | ( rsp_rd_vld_X25 ) | ( rsp_rd_vld_X26 ) | ( rsp_rd_vld_X27 ) | ( rsp_rd_vld_X28 ) | ( rsp_rd_vld_X29 ) | ( rsp_rd_vld_X30 ) | ( rsp_rd_vld_X31 ) | ( rsp_rd_vld_X32 ) | ( rsp_rd_vld_X33 ) | ( rsp_rd_vld_X34 ) | ( rsp_rd_vld_X35 ) | ( rsp_rd_vld_X36 ) | ( rsp_rd_vld_X37 ) | ( rsp_rd_vld_X38 ) | ( rsp_rd_vld_X39 ) | ( rsp_rd_vld_X40 ) | ( rsp_rd_vld_X41 ) | ( rsp_rd_vld_X42 ) | ( rsp_rd_vld_X43 ) | ( rsp_rd_vld_X44 ) | ( rsp_rd_vld_X45 ) | ( rsp_rd_vld_X46 ) | ( rsp_rd_vld_X47 ) | ( rsp_rd_vld_X48 ) | ( rsp_rd_vld_X49 ) | ( rsp_rd_vld_X50 ) | ( rsp_rd_vld_X51 ) | ( rsp_rd_vld_X52 ) | ( rsp_rd_vld_X53 ) | ( rsp_rd_vld_X54 ) | ( rsp_rd_vld_X55 ) | ( rsp_rd_vld_X56 ) | ( rsp_rd_vld_X57 ) | ( rsp_rd_vld_X58 ) | ( rsp_rd_vld_X59 ) | ( rsp_rd_vld_X60 ) | ( rsp_rd_vld_X61 ) | ( rsp_rd_vld_X62 ) | ( rsp_rd_vld_X63 ) | ( rsp_rd_vld_X64 ) | ( rsp_rd_vld_X65 );
  assign rsp_rd_pd_X = ( rsp_rd_pd_X0 ) | ( rsp_rd_pd_X1 ) | ( rsp_rd_pd_X2 ) | ( rsp_rd_pd_X3 ) | ( rsp_rd_pd_X4 );
  assign _021__X = ( _021__X0 ) | ( _021__X1 );
  assign _024__X = ( _024__X0 );
  assign req_vld_X = ( req_vld_X0 ) | ( req_vld_X1 );
  assign grp1_read_stall_cnt_cnt_cur_X = ( grp1_read_stall_cnt_cnt_cur_X0 ) | ( grp1_read_stall_cnt_cnt_cur_X1 ) | ( grp1_read_stall_cnt_cnt_cur_X2 ) | ( grp1_read_stall_cnt_cnt_cur_X3 ) | ( grp1_read_stall_cnt_cnt_cur_X4 ) | ( grp1_read_stall_cnt_cnt_cur_X5 );
  assign grp0_read_stall_cnt_cnt_cur_X = ( grp0_read_stall_cnt_cnt_cur_X0 ) | ( grp0_read_stall_cnt_cnt_cur_X1 ) | ( grp0_read_stall_cnt_cnt_cur_X2 ) | ( grp0_read_stall_cnt_cnt_cur_X3 ) | ( grp0_read_stall_cnt_cnt_cur_X4 ) | ( grp0_read_stall_cnt_cnt_cur_X5 );
  assign gather_count_X = ( gather_count_X0 ) | ( gather_count_X1 ) | ( gather_count_X2 ) | ( gather_count_X3 );
  assign reg2dp_surf_repeat_number_X = ( reg2dp_surf_repeat_number_X0 );
  assign reg2dp_src_surf_stride_X = ( reg2dp_src_surf_stride_X0 );
  assign reg2dp_src_line_stride_X = ( reg2dp_src_line_stride_X0 );
  assign reg2dp_src_addr_low_v32_X = ( reg2dp_src_addr_low_v32_X0 );
  assign reg2dp_src_addr_high_v8_X = ( reg2dp_src_addr_high_v8_X0 );
  assign reg2dp_line_size_X = ( reg2dp_line_size_X0 );
  assign reg2dp_line_repeat_number_X = ( reg2dp_line_repeat_number_X0 );
  assign reg2dp_dst_surf_stride_X = ( reg2dp_dst_surf_stride_X0 );
  assign reg2dp_dst_line_stride_X = ( reg2dp_dst_line_stride_X0 );
  assign reg2dp_dst_addr_low_v32_X = ( reg2dp_dst_addr_low_v32_X0 );
  assign reg2dp_dst_addr_high_v8_X = ( reg2dp_dst_addr_high_v8_X0 );
  assign reg2dp_cmd_src_ram_type_X = ( reg2dp_cmd_src_ram_type_X0 );
  assign reg2dp_cmd_interrupt_ptr_X = ( reg2dp_cmd_interrupt_ptr_X0 );
  assign reg2dp_cmd_interrupt_X = ( reg2dp_cmd_interrupt_X0 );
  assign reg2dp_cmd_dst_ram_type_X = ( reg2dp_cmd_dst_ram_type_X0 );
  assign dma_write_stall_count_cen_X = ( dma_write_stall_count_cen_X0 );
  assign csb2ld_vld_X = ( csb2ld_vld_X0 );
  assign csb2gate_slcg_en_X = ( csb2gate_slcg_en_X0 );
  assign csb2bdma_req_prdy_X = ( csb2bdma_req_prdy_X0 );
  assign bdma2glb_done_intr_pd_X = ( bdma2glb_done_intr_pd_X0 );
  assign bdma2csb_resp_valid_X = ( bdma2csb_resp_valid_X0 );
  assign bdma2csb_resp_pd_X = ( bdma2csb_resp_pd_X0 ) | ( bdma2csb_resp_pd_X1 );
  assign csb_fifo_rd_pd_R = ( csb_fifo_rd_pd_X0 & csb_fifo_rd_pd_R0 );
  assign csb_fifo_wr_prdy_R = ( csb_fifo_wr_prdy_X0 & csb_fifo_wr_prdy_R0 );
  assign csb_fifo_rd_pvld_R = ( csb_fifo_rd_pvld_X0 & csb_fifo_rd_pvld_R0 );
  assign slcg_en_R = ( slcg_en_X0 & slcg_en_R0 );
  assign nvdla_bdma_status_0_idle_R = ( nvdla_bdma_status_0_idle_X0 & nvdla_bdma_status_0_idle_R0 );
  assign pwrbus_ram_pd_R = ( pwrbus_ram_pd_X0 & pwrbus_ram_pd_R0 );
  assign nvdla_core_rstn_R = ( nvdla_core_rstn_X0 & nvdla_core_rstn_R0 ) | ( nvdla_core_rstn_X1 & nvdla_core_rstn_R1 );
  assign nvdla_bdma_cfg_dst_surf_0_stride_R = ( nvdla_bdma_cfg_dst_surf_0_stride_X0 & nvdla_bdma_cfg_dst_surf_0_stride_R0 ) | ( nvdla_bdma_cfg_dst_surf_0_stride_X1 & nvdla_bdma_cfg_dst_surf_0_stride_R1 );
  assign nvdla_bdma_cfg_src_surf_0_stride_R = ( nvdla_bdma_cfg_src_surf_0_stride_X0 & nvdla_bdma_cfg_src_surf_0_stride_R0 ) | ( nvdla_bdma_cfg_src_surf_0_stride_X1 & nvdla_bdma_cfg_src_surf_0_stride_R1 );
  assign nvdla_bdma_cfg_surf_repeat_0_number_R = ( nvdla_bdma_cfg_surf_repeat_0_number_X0 & nvdla_bdma_cfg_surf_repeat_0_number_R0 ) | ( nvdla_bdma_cfg_surf_repeat_0_number_X1 & nvdla_bdma_cfg_surf_repeat_0_number_R1 );
  assign nvdla_bdma_cfg_dst_line_0_stride_R = ( nvdla_bdma_cfg_dst_line_0_stride_X0 & nvdla_bdma_cfg_dst_line_0_stride_R0 ) | ( nvdla_bdma_cfg_dst_line_0_stride_X1 & nvdla_bdma_cfg_dst_line_0_stride_R1 );
  assign nvdla_bdma_cfg_src_line_0_stride_R = ( nvdla_bdma_cfg_src_line_0_stride_X0 & nvdla_bdma_cfg_src_line_0_stride_R0 ) | ( nvdla_bdma_cfg_src_line_0_stride_X1 & nvdla_bdma_cfg_src_line_0_stride_R1 );
  assign nvdla_bdma_cfg_line_repeat_0_number_R = ( nvdla_bdma_cfg_line_repeat_0_number_X0 & nvdla_bdma_cfg_line_repeat_0_number_R0 ) | ( nvdla_bdma_cfg_line_repeat_0_number_X1 & nvdla_bdma_cfg_line_repeat_0_number_R1 );
  assign nvdla_bdma_cfg_cmd_0_dst_ram_type_R = ( nvdla_bdma_cfg_cmd_0_dst_ram_type_X0 & nvdla_bdma_cfg_cmd_0_dst_ram_type_R0 ) | ( nvdla_bdma_cfg_cmd_0_dst_ram_type_X1 & nvdla_bdma_cfg_cmd_0_dst_ram_type_R1 );
  assign nvdla_bdma_cfg_cmd_0_src_ram_type_R = ( nvdla_bdma_cfg_cmd_0_src_ram_type_X0 & nvdla_bdma_cfg_cmd_0_src_ram_type_R0 ) | ( nvdla_bdma_cfg_cmd_0_src_ram_type_X1 & nvdla_bdma_cfg_cmd_0_src_ram_type_R1 );
  assign nvdla_bdma_cfg_line_0_size_R = ( nvdla_bdma_cfg_line_0_size_X0 & nvdla_bdma_cfg_line_0_size_R0 ) | ( nvdla_bdma_cfg_line_0_size_X1 & nvdla_bdma_cfg_line_0_size_R1 );
  assign nvdla_bdma_cfg_dst_addr_high_0_v8_R = ( nvdla_bdma_cfg_dst_addr_high_0_v8_X0 & nvdla_bdma_cfg_dst_addr_high_0_v8_R0 ) | ( nvdla_bdma_cfg_dst_addr_high_0_v8_X1 & nvdla_bdma_cfg_dst_addr_high_0_v8_R1 );
  assign nvdla_bdma_cfg_dst_addr_low_0_v32_R = ( nvdla_bdma_cfg_dst_addr_low_0_v32_X0 & nvdla_bdma_cfg_dst_addr_low_0_v32_R0 ) | ( nvdla_bdma_cfg_dst_addr_low_0_v32_X1 & nvdla_bdma_cfg_dst_addr_low_0_v32_R1 );
  assign nvdla_bdma_cfg_src_addr_high_0_v8_R = ( nvdla_bdma_cfg_src_addr_high_0_v8_X0 & nvdla_bdma_cfg_src_addr_high_0_v8_R0 ) | ( nvdla_bdma_cfg_src_addr_high_0_v8_X1 & nvdla_bdma_cfg_src_addr_high_0_v8_R1 );
  assign nvdla_bdma_cfg_src_addr_low_0_v32_R = ( nvdla_bdma_cfg_src_addr_low_0_v32_X0 & nvdla_bdma_cfg_src_addr_low_0_v32_R0 ) | ( nvdla_bdma_cfg_src_addr_low_0_v32_X1 & nvdla_bdma_cfg_src_addr_low_0_v32_R1 );
  assign grp1_read_stall_cnt_cnt_new_R = ( grp1_read_stall_cnt_cnt_new_X0 & grp1_read_stall_cnt_cnt_new_R0 );
  assign grp1_read_stall_cnt_cnt_inc_R = ( grp1_read_stall_cnt_cnt_inc_X0 & grp1_read_stall_cnt_cnt_inc_R0 ) | ( grp1_read_stall_cnt_cnt_inc_X1 & grp1_read_stall_cnt_cnt_inc_R1 );
  assign ld2csb_grp1_dma_stall_inc_R = ( ld2csb_grp1_dma_stall_inc_X0 & ld2csb_grp1_dma_stall_inc_R0 ) | ( ld2csb_grp1_dma_stall_inc_X1 & ld2csb_grp1_dma_stall_inc_R1 );
  assign grp0_read_stall_cnt_cnt_new_R = ( grp0_read_stall_cnt_cnt_new_X0 & grp0_read_stall_cnt_cnt_new_R0 );
  assign grp0_read_stall_cnt_cnt_inc_R = ( grp0_read_stall_cnt_cnt_inc_X0 & grp0_read_stall_cnt_cnt_inc_R0 ) | ( grp0_read_stall_cnt_cnt_inc_X1 & grp0_read_stall_cnt_cnt_inc_R1 );
  assign ld2csb_grp0_dma_stall_inc_R = ( ld2csb_grp0_dma_stall_inc_X0 & ld2csb_grp0_dma_stall_inc_R0 ) | ( ld2csb_grp0_dma_stall_inc_X1 & ld2csb_grp0_dma_stall_inc_R1 );
  assign csb_fifo_wr_count_R = ( csb_fifo_wr_count_X0 & csb_fifo_wr_count_R0 );
  assign nvdla_bdma_status_0_free_slot_R = ( nvdla_bdma_status_0_free_slot_X0 & nvdla_bdma_status_0_free_slot_R0 ) | ( nvdla_bdma_status_0_free_slot_X1 & nvdla_bdma_status_0_free_slot_R1 ) | ( nvdla_bdma_status_0_free_slot_X2 & nvdla_bdma_status_0_free_slot_R2 ) | ( nvdla_bdma_status_0_free_slot_X3 & nvdla_bdma_status_0_free_slot_R3 ) | ( nvdla_bdma_status_0_free_slot_X4 & nvdla_bdma_status_0_free_slot_R4 ) | ( nvdla_bdma_status_0_free_slot_X5 & nvdla_bdma_status_0_free_slot_R5 );
  assign csb2bdma_req_pd_R = ( csb2bdma_req_pd_X0 & csb2bdma_req_pd_R0 );
  assign fangyuan6_R = ( fangyuan6_X0 & fangyuan6_R0 );
  assign rsp_pd_R = ( rsp_pd_X0 & rsp_pd_R0 );
  assign _040__R = ( _040__X0 & _040__R0 );
  assign fangyuan5_R = ( fangyuan5_X0 & fangyuan5_R0 );
  assign gather_to_launch_R = ( gather_to_launch_X0 & gather_to_launch_R0 );
  assign _016__R = ( _016__X0 & _016__R0 );
  assign csb_fifo_wr_pvld_R = ( csb_fifo_wr_pvld_X0 & csb_fifo_wr_pvld_R0 ) | ( csb_fifo_wr_pvld_X1 & csb_fifo_wr_pvld_R1 ) | ( csb_fifo_wr_pvld_X2 & csb_fifo_wr_pvld_R2 );
  assign cmd_launch_rdy_R = ( cmd_launch_rdy_X0 & cmd_launch_rdy_R0 );
  assign _039__R = ( _039__X0 & _039__R0 );
  assign _035__R = ( _035__X0 & _035__R0 );
  assign _038__R = ( _038__X0 & _038__R0 );
  assign _037__R = ( _037__X0 & _037__R0 );
  assign _036__R = ( _036__X0 & _036__R0 );
  assign _020__R = ( _020__X0 & _020__R0 ) | ( _020__X1 & _020__R1 );
  assign _034__R = ( _034__X0 & _034__R0 );
  assign _033__R = ( _033__X0 & _033__R0 );
  assign _032__R = ( _032__X0 & _032__R0 ) | ( _032__X1 & _032__R1 );
  assign launch_ptr_R = ( launch_ptr_X0 & launch_ptr_R0 ) | ( launch_ptr_X1 & launch_ptr_R1 ) | ( launch_ptr_X2 & launch_ptr_R2 ) | ( launch_ptr_X3 & launch_ptr_R3 );
  assign gather_ptr_R = ( gather_ptr_X0 & gather_ptr_R0 ) | ( gather_ptr_X1 & gather_ptr_R1 );
  assign _031__R = ( _031__X0 & _031__R0 );
  assign status_grp0_busy_R = ( status_grp0_busy_X0 & status_grp0_busy_R0 ) | ( status_grp0_busy_X1 & status_grp0_busy_R1 ) | ( status_grp0_busy_X2 & status_grp0_busy_R2 );
  assign _030__R = ( _030__X0 & _030__R0 );
  assign status_grp1_busy_R = ( status_grp1_busy_X0 & status_grp1_busy_R0 ) | ( status_grp1_busy_X1 & status_grp1_busy_R1 ) | ( status_grp1_busy_X2 & status_grp1_busy_R2 );
  assign grp0_read_stall_cnt_cnt_nxt_R = ( grp0_read_stall_cnt_cnt_nxt_X0 & grp0_read_stall_cnt_cnt_nxt_R0 );
  assign grp1_read_stall_cnt_cnt_nxt_R = ( grp1_read_stall_cnt_cnt_nxt_X0 & grp1_read_stall_cnt_cnt_nxt_R0 );
  assign nvdla_bdma_cfg_status_0_stall_count_en_R = ( nvdla_bdma_cfg_status_0_stall_count_en_X0 & nvdla_bdma_cfg_status_0_stall_count_en_R0 ) | ( nvdla_bdma_cfg_status_0_stall_count_en_X1 & nvdla_bdma_cfg_status_0_stall_count_en_R1 ) | ( nvdla_bdma_cfg_status_0_stall_count_en_X2 & nvdla_bdma_cfg_status_0_stall_count_en_R2 ) | ( nvdla_bdma_cfg_status_0_stall_count_en_X3 & nvdla_bdma_cfg_status_0_stall_count_en_R3 );
  assign _029__R = ( _029__X0 & _029__R0 );
  assign status_grp0_read_stall_count_R = ( status_grp0_read_stall_count_X0 & status_grp0_read_stall_count_R0 ) | ( status_grp0_read_stall_count_X1 & status_grp0_read_stall_count_R1 ) | ( status_grp0_read_stall_count_X2 & status_grp0_read_stall_count_R2 );
  assign _028__R = ( _028__X0 & _028__R0 );
  assign status_grp1_read_stall_count_R = ( status_grp1_read_stall_count_X0 & status_grp1_read_stall_count_R0 ) | ( status_grp1_read_stall_count_X1 & status_grp1_read_stall_count_R1 ) | ( status_grp1_read_stall_count_X2 & status_grp1_read_stall_count_R2 );
  assign _027__R = ( _027__X0 & _027__R0 );
  assign status_grp0_write_stall_count_R = ( status_grp0_write_stall_count_X0 & status_grp0_write_stall_count_R0 ) | ( status_grp0_write_stall_count_X1 & status_grp0_write_stall_count_R1 ) | ( status_grp0_write_stall_count_X2 & status_grp0_write_stall_count_R2 );
  assign _026__R = ( _026__X0 & _026__R0 );
  assign status_grp1_write_stall_count_R = ( status_grp1_write_stall_count_X0 & status_grp1_write_stall_count_R0 ) | ( status_grp1_write_stall_count_X1 & status_grp1_write_stall_count_R1 ) | ( status_grp1_write_stall_count_X2 & status_grp1_write_stall_count_R2 );
  assign dma_write_stall_count_R = ( dma_write_stall_count_X0 & dma_write_stall_count_R0 ) | ( dma_write_stall_count_X1 & dma_write_stall_count_R1 );
  assign csb2bdma_req_pvld_R = ( csb2bdma_req_pvld_X0 & csb2bdma_req_pvld_R0 ) | ( csb2bdma_req_pvld_X1 & csb2bdma_req_pvld_R1 );
  assign _008__R = ( _008__X0 & _008__R0 );
  assign rsp_vld_R = ( rsp_vld_X0 & rsp_vld_R0 ) | ( rsp_vld_X1 & rsp_vld_R1 );
  assign _000__R = ( _000__X0 & _000__R0 );
  assign nvdla_bdma_cfg_op_0_en_trigger_R = ( nvdla_bdma_cfg_op_0_en_trigger_X0 & nvdla_bdma_cfg_op_0_en_trigger_R0 );
  assign nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_R = ( nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_X0 & nvdla_bdma_cfg_launch0_0_grp0_launch_trigger_R0 );
  assign nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_R = ( nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_X0 & nvdla_bdma_cfg_launch1_0_grp1_launch_trigger_R0 );
  assign _001__R = ( _001__X0 & _001__R0 );
  assign _003__R = ( _003__X0 & _003__R0 );
  assign _002__R = ( _002__X0 & _002__R0 );
  assign _007__R = ( _007__X0 & _007__R0 );
  assign _006__R = ( _006__X0 & _006__R0 );
  assign _010__R = ( _010__X0 & _010__R0 );
  assign _013__R = ( _013__X0 & _013__R0 );
  assign _004__R = ( _004__X0 & _004__R0 );
  assign _005__R = ( _005__X0 & _005__R0 );
  assign _011__R = ( _011__X0 & _011__R0 );
  assign _014__R = ( _014__X0 & _014__R0 );
  assign _012__R = ( _012__X0 & _012__R0 );
  assign _015__R = ( _015__X0 & _015__R0 );
  assign st2csb_grp0_done_R = ( st2csb_grp0_done_X0 & st2csb_grp0_done_R0 ) | ( st2csb_grp0_done_X1 & st2csb_grp0_done_R1 ) | ( st2csb_grp0_done_X2 & st2csb_grp0_done_R2 ) | ( st2csb_grp0_done_X3 & st2csb_grp0_done_R3 ) | ( st2csb_grp0_done_X4 & st2csb_grp0_done_R4 ) | ( st2csb_grp0_done_X5 & st2csb_grp0_done_R5 );
  assign st2csb_grp1_done_R = ( st2csb_grp1_done_X0 & st2csb_grp1_done_R0 ) | ( st2csb_grp1_done_X1 & st2csb_grp1_done_R1 ) | ( st2csb_grp1_done_X2 & st2csb_grp1_done_R2 ) | ( st2csb_grp1_done_X3 & st2csb_grp1_done_R3 ) | ( st2csb_grp1_done_X4 & st2csb_grp1_done_R4 ) | ( st2csb_grp1_done_X5 & st2csb_grp1_done_R5 );
  assign _009__R = ( _009__X0 & _009__R0 );
  assign csb_processing_d_R = ( csb_processing_d_X0 & csb_processing_d_R0 );
  assign csb_processing_R = ( csb_processing_X0 & csb_processing_R0 ) | ( csb_processing_X1 & csb_processing_R1 );
  assign _025__R = ( _025__X0 & _025__R0 );
  assign cmd_launch_vld_R = ( cmd_launch_vld_X0 & cmd_launch_vld_R0 ) | ( cmd_launch_vld_X1 & cmd_launch_vld_R1 );
  assign grp1_cmd_launch_R = ( grp1_cmd_launch_X0 & grp1_cmd_launch_R0 ) | ( grp1_cmd_launch_X1 & grp1_cmd_launch_R1 ) | ( grp1_cmd_launch_X2 & grp1_cmd_launch_R2 ) | ( grp1_cmd_launch_X3 & grp1_cmd_launch_R3 ) | ( grp1_cmd_launch_X4 & grp1_cmd_launch_R4 ) | ( grp1_cmd_launch_X5 & grp1_cmd_launch_R5 );
  assign grp0_cmd_launch_R = ( grp0_cmd_launch_X0 & grp0_cmd_launch_R0 ) | ( grp0_cmd_launch_X1 & grp0_cmd_launch_R1 ) | ( grp0_cmd_launch_X2 & grp0_cmd_launch_R2 ) | ( grp0_cmd_launch_X3 & grp0_cmd_launch_R3 ) | ( grp0_cmd_launch_X4 & grp0_cmd_launch_R4 ) | ( grp0_cmd_launch_X5 & grp0_cmd_launch_R5 );
  assign _018__R = ( _018__X0 & _018__R0 );
  assign _017__R = ( _017__X0 & _017__R0 );
  assign is_last_cmd_rdy_R = ( is_last_cmd_rdy_X0 & is_last_cmd_rdy_R0 ) | ( is_last_cmd_rdy_X1 & is_last_cmd_rdy_R1 );
  assign _023__R = ( _023__X0 & _023__R0 );
  assign _022__R = ( _022__X0 & _022__R0 );
  assign launch_vld_R = ( launch_vld_X0 & launch_vld_R0 ) | ( launch_vld_X1 & launch_vld_R1 ) | ( launch_vld_X2 & launch_vld_R2 ) | ( launch_vld_X3 & launch_vld_R3 ) | ( launch_vld_X4 & launch_vld_R4 );
  assign launch_count_R = ( launch_count_X0 & launch_count_R0 ) | ( launch_count_X1 & launch_count_R1 ) | ( launch_count_X2 & launch_count_R2 ) | ( launch_count_X3 & launch_count_R3 ) | ( launch_count_X4 & launch_count_R4 );
  assign csb_fifo_wr_idle_R = ( csb_fifo_wr_idle_X0 & csb_fifo_wr_idle_R0 ) | ( csb_fifo_wr_idle_X1 & csb_fifo_wr_idle_R1 );
  assign _019__R = ( _019__X0 & _019__R0 );
  assign ld2csb_idle_R = ( ld2csb_idle_X0 & ld2csb_idle_R0 ) | ( ld2csb_idle_X1 & ld2csb_idle_R1 );
  assign st2csb_idle_R = ( st2csb_idle_X0 & st2csb_idle_R0 ) | ( st2csb_idle_X1 & st2csb_idle_R1 );
  assign is_last_cmd_R = ( is_last_cmd_X0 & is_last_cmd_R0 ) | ( is_last_cmd_X1 & is_last_cmd_R1 ) | ( is_last_cmd_X2 & is_last_cmd_R2 );
  assign csb2ld_rdy_R = ( csb2ld_rdy_X0 & csb2ld_rdy_R0 ) | ( csb2ld_rdy_X1 & csb2ld_rdy_R1 ) | ( csb2ld_rdy_X2 & csb2ld_rdy_R2 ) | ( csb2ld_rdy_X3 & csb2ld_rdy_R3 ) | ( csb2ld_rdy_X4 & csb2ld_rdy_R4 ) | ( csb2ld_rdy_X5 & csb2ld_rdy_R5 );
  assign gather_rdy_R = ( gather_rdy_X0 & gather_rdy_R0 ) | ( gather_rdy_X1 & gather_rdy_R1 );
  assign gather_vld_R = ( gather_vld_X0 & gather_vld_R0 ) | ( gather_vld_X1 & gather_vld_R1 ) | ( gather_vld_X2 & gather_vld_R2 ) | ( gather_vld_X3 & gather_vld_R3 ) | ( gather_vld_X4 & gather_vld_R4 ) | ( gather_vld_X5 & gather_vld_R5 ) | ( gather_vld_X6 & gather_vld_R6 );
  assign nvdla_bdma_cfg_launch1_0_grp1_launch_R = ( nvdla_bdma_cfg_launch1_0_grp1_launch_X0 & nvdla_bdma_cfg_launch1_0_grp1_launch_R0 );
  assign grp1_cmd_launch_trigger_R = ( grp1_cmd_launch_trigger_X0 & grp1_cmd_launch_trigger_R0 );
  assign nvdla_bdma_cfg_launch0_0_grp0_launch_R = ( nvdla_bdma_cfg_launch0_0_grp0_launch_X0 & nvdla_bdma_cfg_launch0_0_grp0_launch_R0 );
  assign grp0_cmd_launch_trigger_R = ( grp0_cmd_launch_trigger_X0 & grp0_cmd_launch_trigger_R0 );
  assign nvdla_bdma_cfg_op_0_en_R = ( nvdla_bdma_cfg_op_0_en_X0 & nvdla_bdma_cfg_op_0_en_R0 );
  assign op_en_trigger_R = ( op_en_trigger_X0 & op_en_trigger_R0 );
  assign fangyuan4_R = ( fangyuan4_X0 & fangyuan4_R0 );
  assign rsp_wr_vld_R = ( rsp_wr_vld_X0 & rsp_wr_vld_R0 ) | ( rsp_wr_vld_X1 & rsp_wr_vld_R1 ) | ( rsp_wr_vld_X2 & rsp_wr_vld_R2 ) | ( rsp_wr_vld_X3 & rsp_wr_vld_R3 ) | ( rsp_wr_vld_X4 & rsp_wr_vld_R4 ) | ( rsp_wr_vld_X5 & rsp_wr_vld_R5 ) | ( rsp_wr_vld_X6 & rsp_wr_vld_R6 ) | ( rsp_wr_vld_X7 & rsp_wr_vld_R7 ) | ( rsp_wr_vld_X8 & rsp_wr_vld_R8 ) | ( rsp_wr_vld_X9 & rsp_wr_vld_R9 ) | ( rsp_wr_vld_X10 & rsp_wr_vld_R10 ) | ( rsp_wr_vld_X11 & rsp_wr_vld_R11 ) | ( rsp_wr_vld_X12 & rsp_wr_vld_R12 ) | ( rsp_wr_vld_X13 & rsp_wr_vld_R13 ) | ( rsp_wr_vld_X14 & rsp_wr_vld_R14 ) | ( rsp_wr_vld_X15 & rsp_wr_vld_R15 ) | ( rsp_wr_vld_X16 & rsp_wr_vld_R16 ) | ( rsp_wr_vld_X17 & rsp_wr_vld_R17 ) | ( rsp_wr_vld_X18 & rsp_wr_vld_R18 ) | ( rsp_wr_vld_X19 & rsp_wr_vld_R19 ) | ( rsp_wr_vld_X20 & rsp_wr_vld_R20 ) | ( rsp_wr_vld_X21 & rsp_wr_vld_R21 ) | ( rsp_wr_vld_X22 & rsp_wr_vld_R22 ) | ( rsp_wr_vld_X23 & rsp_wr_vld_R23 ) | ( rsp_wr_vld_X24 & rsp_wr_vld_R24 ) | ( rsp_wr_vld_X25 & rsp_wr_vld_R25 ) | ( rsp_wr_vld_X26 & rsp_wr_vld_R26 ) | ( rsp_wr_vld_X27 & rsp_wr_vld_R27 ) | ( rsp_wr_vld_X28 & rsp_wr_vld_R28 ) | ( rsp_wr_vld_X29 & rsp_wr_vld_R29 ) | ( rsp_wr_vld_X30 & rsp_wr_vld_R30 ) | ( rsp_wr_vld_X31 & rsp_wr_vld_R31 ) | ( rsp_wr_vld_X32 & rsp_wr_vld_R32 ) | ( rsp_wr_vld_X33 & rsp_wr_vld_R33 ) | ( rsp_wr_vld_X34 & rsp_wr_vld_R34 );
  assign fangyuan3_R = ( fangyuan3_X0 & fangyuan3_R0 );
  assign fangyuan2_R = ( fangyuan2_X0 & fangyuan2_R0 );
  assign reg_wr_en_R = ( reg_wr_en_X0 & reg_wr_en_R0 ) | ( reg_wr_en_X1 & reg_wr_en_R1 );
  assign req_pd_R = ( req_pd_X0 & req_pd_R0 ) | ( req_pd_X1 & req_pd_R1 ) | ( req_pd_X2 & req_pd_R2 ) | ( req_pd_X3 & req_pd_R3 ) | ( req_pd_X4 & req_pd_R4 ) | ( req_pd_X5 & req_pd_R5 );
  assign reg_rd_data_R = ( reg_rd_data_X0 & reg_rd_data_R0 );
  assign fangyuan1_R = ( fangyuan1_X0 & fangyuan1_R0 );
  assign rsp_rd_vld_R = ( rsp_rd_vld_X0 & rsp_rd_vld_R0 ) | ( rsp_rd_vld_X1 & rsp_rd_vld_R1 ) | ( rsp_rd_vld_X2 & rsp_rd_vld_R2 ) | ( rsp_rd_vld_X3 & rsp_rd_vld_R3 ) | ( rsp_rd_vld_X4 & rsp_rd_vld_R4 ) | ( rsp_rd_vld_X5 & rsp_rd_vld_R5 ) | ( rsp_rd_vld_X6 & rsp_rd_vld_R6 ) | ( rsp_rd_vld_X7 & rsp_rd_vld_R7 ) | ( rsp_rd_vld_X8 & rsp_rd_vld_R8 ) | ( rsp_rd_vld_X9 & rsp_rd_vld_R9 ) | ( rsp_rd_vld_X10 & rsp_rd_vld_R10 ) | ( rsp_rd_vld_X11 & rsp_rd_vld_R11 ) | ( rsp_rd_vld_X12 & rsp_rd_vld_R12 ) | ( rsp_rd_vld_X13 & rsp_rd_vld_R13 ) | ( rsp_rd_vld_X14 & rsp_rd_vld_R14 ) | ( rsp_rd_vld_X15 & rsp_rd_vld_R15 ) | ( rsp_rd_vld_X16 & rsp_rd_vld_R16 ) | ( rsp_rd_vld_X17 & rsp_rd_vld_R17 ) | ( rsp_rd_vld_X18 & rsp_rd_vld_R18 ) | ( rsp_rd_vld_X19 & rsp_rd_vld_R19 ) | ( rsp_rd_vld_X20 & rsp_rd_vld_R20 ) | ( rsp_rd_vld_X21 & rsp_rd_vld_R21 ) | ( rsp_rd_vld_X22 & rsp_rd_vld_R22 ) | ( rsp_rd_vld_X23 & rsp_rd_vld_R23 ) | ( rsp_rd_vld_X24 & rsp_rd_vld_R24 ) | ( rsp_rd_vld_X25 & rsp_rd_vld_R25 ) | ( rsp_rd_vld_X26 & rsp_rd_vld_R26 ) | ( rsp_rd_vld_X27 & rsp_rd_vld_R27 ) | ( rsp_rd_vld_X28 & rsp_rd_vld_R28 ) | ( rsp_rd_vld_X29 & rsp_rd_vld_R29 ) | ( rsp_rd_vld_X30 & rsp_rd_vld_R30 ) | ( rsp_rd_vld_X31 & rsp_rd_vld_R31 ) | ( rsp_rd_vld_X32 & rsp_rd_vld_R32 ) | ( rsp_rd_vld_X33 & rsp_rd_vld_R33 ) | ( rsp_rd_vld_X34 & rsp_rd_vld_R34 ) | ( rsp_rd_vld_X35 & rsp_rd_vld_R35 ) | ( rsp_rd_vld_X36 & rsp_rd_vld_R36 ) | ( rsp_rd_vld_X37 & rsp_rd_vld_R37 ) | ( rsp_rd_vld_X38 & rsp_rd_vld_R38 ) | ( rsp_rd_vld_X39 & rsp_rd_vld_R39 ) | ( rsp_rd_vld_X40 & rsp_rd_vld_R40 ) | ( rsp_rd_vld_X41 & rsp_rd_vld_R41 ) | ( rsp_rd_vld_X42 & rsp_rd_vld_R42 ) | ( rsp_rd_vld_X43 & rsp_rd_vld_R43 ) | ( rsp_rd_vld_X44 & rsp_rd_vld_R44 ) | ( rsp_rd_vld_X45 & rsp_rd_vld_R45 ) | ( rsp_rd_vld_X46 & rsp_rd_vld_R46 ) | ( rsp_rd_vld_X47 & rsp_rd_vld_R47 ) | ( rsp_rd_vld_X48 & rsp_rd_vld_R48 ) | ( rsp_rd_vld_X49 & rsp_rd_vld_R49 ) | ( rsp_rd_vld_X50 & rsp_rd_vld_R50 ) | ( rsp_rd_vld_X51 & rsp_rd_vld_R51 ) | ( rsp_rd_vld_X52 & rsp_rd_vld_R52 ) | ( rsp_rd_vld_X53 & rsp_rd_vld_R53 ) | ( rsp_rd_vld_X54 & rsp_rd_vld_R54 ) | ( rsp_rd_vld_X55 & rsp_rd_vld_R55 ) | ( rsp_rd_vld_X56 & rsp_rd_vld_R56 ) | ( rsp_rd_vld_X57 & rsp_rd_vld_R57 ) | ( rsp_rd_vld_X58 & rsp_rd_vld_R58 ) | ( rsp_rd_vld_X59 & rsp_rd_vld_R59 ) | ( rsp_rd_vld_X60 & rsp_rd_vld_R60 ) | ( rsp_rd_vld_X61 & rsp_rd_vld_R61 ) | ( rsp_rd_vld_X62 & rsp_rd_vld_R62 ) | ( rsp_rd_vld_X63 & rsp_rd_vld_R63 ) | ( rsp_rd_vld_X64 & rsp_rd_vld_R64 ) | ( rsp_rd_vld_X65 & rsp_rd_vld_R65 );
  assign rsp_rd_pd_R = ( rsp_rd_pd_X0 & rsp_rd_pd_R0 ) | ( rsp_rd_pd_X1 & rsp_rd_pd_R1 ) | ( rsp_rd_pd_X2 & rsp_rd_pd_R2 ) | ( rsp_rd_pd_X3 & rsp_rd_pd_R3 ) | ( rsp_rd_pd_X4 & rsp_rd_pd_R4 );
  assign _021__R = ( _021__X0 & _021__R0 ) | ( _021__X1 & _021__R1 );
  assign _024__R = ( _024__X0 & _024__R0 );
  assign req_vld_R = ( req_vld_X0 & req_vld_R0 ) | ( req_vld_X1 & req_vld_R1 );
  assign grp1_read_stall_cnt_cnt_cur_R = ( grp1_read_stall_cnt_cnt_cur_X0 & grp1_read_stall_cnt_cnt_cur_R0 ) | ( grp1_read_stall_cnt_cnt_cur_X1 & grp1_read_stall_cnt_cnt_cur_R1 ) | ( grp1_read_stall_cnt_cnt_cur_X2 & grp1_read_stall_cnt_cnt_cur_R2 ) | ( grp1_read_stall_cnt_cnt_cur_X3 & grp1_read_stall_cnt_cnt_cur_R3 ) | ( grp1_read_stall_cnt_cnt_cur_X4 & grp1_read_stall_cnt_cnt_cur_R4 ) | ( grp1_read_stall_cnt_cnt_cur_X5 & grp1_read_stall_cnt_cnt_cur_R5 );
  assign grp0_read_stall_cnt_cnt_cur_R = ( grp0_read_stall_cnt_cnt_cur_X0 & grp0_read_stall_cnt_cnt_cur_R0 ) | ( grp0_read_stall_cnt_cnt_cur_X1 & grp0_read_stall_cnt_cnt_cur_R1 ) | ( grp0_read_stall_cnt_cnt_cur_X2 & grp0_read_stall_cnt_cnt_cur_R2 ) | ( grp0_read_stall_cnt_cnt_cur_X3 & grp0_read_stall_cnt_cnt_cur_R3 ) | ( grp0_read_stall_cnt_cnt_cur_X4 & grp0_read_stall_cnt_cnt_cur_R4 ) | ( grp0_read_stall_cnt_cnt_cur_X5 & grp0_read_stall_cnt_cnt_cur_R5 );
  assign gather_count_R = ( gather_count_X0 & gather_count_R0 ) | ( gather_count_X1 & gather_count_R1 ) | ( gather_count_X2 & gather_count_R2 ) | ( gather_count_X3 & gather_count_R3 );
  assign reg2dp_surf_repeat_number_R = ( reg2dp_surf_repeat_number_X0 & reg2dp_surf_repeat_number_R0 );
  assign reg2dp_src_surf_stride_R = ( reg2dp_src_surf_stride_X0 & reg2dp_src_surf_stride_R0 );
  assign reg2dp_src_line_stride_R = ( reg2dp_src_line_stride_X0 & reg2dp_src_line_stride_R0 );
  assign reg2dp_src_addr_low_v32_R = ( reg2dp_src_addr_low_v32_X0 & reg2dp_src_addr_low_v32_R0 );
  assign reg2dp_src_addr_high_v8_R = ( reg2dp_src_addr_high_v8_X0 & reg2dp_src_addr_high_v8_R0 );
  assign reg2dp_line_size_R = ( reg2dp_line_size_X0 & reg2dp_line_size_R0 );
  assign reg2dp_line_repeat_number_R = ( reg2dp_line_repeat_number_X0 & reg2dp_line_repeat_number_R0 );
  assign reg2dp_dst_surf_stride_R = ( reg2dp_dst_surf_stride_X0 & reg2dp_dst_surf_stride_R0 );
  assign reg2dp_dst_line_stride_R = ( reg2dp_dst_line_stride_X0 & reg2dp_dst_line_stride_R0 );
  assign reg2dp_dst_addr_low_v32_R = ( reg2dp_dst_addr_low_v32_X0 & reg2dp_dst_addr_low_v32_R0 );
  assign reg2dp_dst_addr_high_v8_R = ( reg2dp_dst_addr_high_v8_X0 & reg2dp_dst_addr_high_v8_R0 );
  assign reg2dp_cmd_src_ram_type_R = ( reg2dp_cmd_src_ram_type_X0 & reg2dp_cmd_src_ram_type_R0 );
  assign reg2dp_cmd_interrupt_ptr_R = ( reg2dp_cmd_interrupt_ptr_X0 & reg2dp_cmd_interrupt_ptr_R0 );
  assign reg2dp_cmd_interrupt_R = ( reg2dp_cmd_interrupt_X0 & reg2dp_cmd_interrupt_R0 );
  assign reg2dp_cmd_dst_ram_type_R = ( reg2dp_cmd_dst_ram_type_X0 & reg2dp_cmd_dst_ram_type_R0 );
  assign dma_write_stall_count_cen_R = ( dma_write_stall_count_cen_X0 & dma_write_stall_count_cen_R0 );
  assign csb2ld_vld_R = ( csb2ld_vld_X0 & csb2ld_vld_R0 );
  assign csb2gate_slcg_en_R = ( csb2gate_slcg_en_X0 & csb2gate_slcg_en_R0 );
  assign csb2bdma_req_prdy_R = ( csb2bdma_req_prdy_X0 & csb2bdma_req_prdy_R0 );
  assign bdma2glb_done_intr_pd_R = ( bdma2glb_done_intr_pd_X0 & bdma2glb_done_intr_pd_R0 );
  assign bdma2csb_resp_valid_R = ( bdma2csb_resp_valid_X0 & bdma2csb_resp_valid_R0 );
  assign bdma2csb_resp_pd_R = ( bdma2csb_resp_pd_X0 & bdma2csb_resp_pd_R0 ) | ( bdma2csb_resp_pd_X1 & bdma2csb_resp_pd_R1 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { csb_fifo_rd_prdy_R , csb_fifo_rd_prdy_C , csb_fifo_rd_prdy_X , csb_fifo_wr_pd_R , csb_fifo_wr_pd_C , csb_fifo_wr_pd_X , csb_idle_R , csb_idle_C , csb_idle_X , dma_read_stall_count_cen_R , dma_read_stall_count_cen_C , dma_read_stall_count_cen_X , fangyuan0_R , fangyuan0_C , fangyuan0_X , fangyuan7_R , fangyuan7_C , fangyuan7_X , grp0_read_stall_cnt_adv_R , grp0_read_stall_cnt_adv_C , grp0_read_stall_cnt_adv_X , grp0_read_stall_cnt_cnt_ext_R , grp0_read_stall_cnt_cnt_ext_C , grp0_read_stall_cnt_cnt_ext_X , grp0_read_stall_cnt_cnt_mod_R , grp0_read_stall_cnt_cnt_mod_C , grp0_read_stall_cnt_cnt_mod_X , grp0_read_stall_count_R , grp0_read_stall_count_C , grp0_read_stall_count_X , grp0_read_stall_count_dec_R , grp0_read_stall_count_dec_C , grp0_read_stall_count_dec_X , grp1_read_stall_cnt_adv_R , grp1_read_stall_cnt_adv_C , grp1_read_stall_cnt_adv_X , grp1_read_stall_cnt_cnt_ext_R , grp1_read_stall_cnt_cnt_ext_C , grp1_read_stall_cnt_cnt_ext_X , grp1_read_stall_cnt_cnt_mod_R , grp1_read_stall_cnt_cnt_mod_C , grp1_read_stall_cnt_cnt_mod_X , grp1_read_stall_count_R , grp1_read_stall_count_C , grp1_read_stall_count_X , grp1_read_stall_count_dec_R , grp1_read_stall_count_dec_C , grp1_read_stall_count_dec_X , launch_rdy_R , launch_rdy_C , launch_rdy_X , load_idle_R , load_idle_C , load_idle_X , mon_csb_fifo_rd_pvld_R , mon_csb_fifo_rd_pvld_C , mon_csb_fifo_rd_pvld_X , mon_csb_fifo_wr_prdy_R , mon_csb_fifo_wr_prdy_C , mon_csb_fifo_wr_prdy_X , nvdla_bdma_status_0_grp0_busy_R , nvdla_bdma_status_0_grp0_busy_C , nvdla_bdma_status_0_grp0_busy_X , nvdla_bdma_status_0_grp1_busy_R , nvdla_bdma_status_0_grp1_busy_C , nvdla_bdma_status_0_grp1_busy_X , nvdla_bdma_status_grp0_read_stall_0_count_R , nvdla_bdma_status_grp0_read_stall_0_count_C , nvdla_bdma_status_grp0_read_stall_0_count_X , nvdla_bdma_status_grp0_write_stall_0_count_R , nvdla_bdma_status_grp0_write_stall_0_count_C , nvdla_bdma_status_grp0_write_stall_0_count_X , nvdla_bdma_status_grp1_read_stall_0_count_R , nvdla_bdma_status_grp1_read_stall_0_count_C , nvdla_bdma_status_grp1_read_stall_0_count_X , nvdla_bdma_status_grp1_write_stall_0_count_R , nvdla_bdma_status_grp1_write_stall_0_count_C , nvdla_bdma_status_grp1_write_stall_0_count_X , reg_offset_R , reg_offset_C , reg_offset_X , reg_wr_data_R , reg_wr_data_C , reg_wr_data_X , req_addr_R , req_addr_C , req_addr_X , req_level_NC_R , req_level_NC_C , req_level_NC_X , req_nposted_R , req_nposted_C , req_nposted_X , req_srcpriv_NC_R , req_srcpriv_NC_C , req_srcpriv_NC_X , req_wdat_R , req_wdat_C , req_wdat_X , req_wrbe_NC_R , req_wrbe_NC_C , req_wrbe_NC_X , req_write_R , req_write_C , req_write_X , rsp_rd_error_R , rsp_rd_error_C , rsp_rd_error_X , rsp_rd_rdat_R , rsp_rd_rdat_C , rsp_rd_rdat_X , rsp_wr_error_R , rsp_wr_error_C , rsp_wr_error_X , rsp_wr_pd_R , rsp_wr_pd_C , rsp_wr_pd_X , rsp_wr_rdat_R , rsp_wr_rdat_C , rsp_wr_rdat_X , status_grp0_clr_R , status_grp0_clr_C , status_grp0_clr_X , status_grp0_set_R , status_grp0_set_C , status_grp0_set_X , status_grp1_clr_R , status_grp1_clr_C , status_grp1_clr_X , status_grp1_set_R , status_grp1_set_C , status_grp1_set_X , store_idle_R , store_idle_C , store_idle_X  } = 0;
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) slcg_en_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) slcg_en_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) slcg_en_PREV_VAL1 <= slcg_en ;
    if( INSTR_IN_ZY ) slcg_en_PREV_VAL2 <= slcg_en_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) csb_processing_d_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) csb_processing_d_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) csb_processing_d_PREV_VAL1 <= csb_processing_d ;
    if( INSTR_IN_ZY ) csb_processing_d_PREV_VAL2 <= csb_processing_d_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) bdma2glb_done_intr_pd_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) bdma2glb_done_intr_pd_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) bdma2glb_done_intr_pd_PREV_VAL1 <= bdma2glb_done_intr_pd ;
    if( INSTR_IN_ZY ) bdma2glb_done_intr_pd_PREV_VAL2 <= bdma2glb_done_intr_pd_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) bdma2glb_done_intr_pd_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) bdma2glb_done_intr_pd_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) bdma2glb_done_intr_pd_PREV_VAL1 <= bdma2glb_done_intr_pd ;
    if( INSTR_IN_ZY ) bdma2glb_done_intr_pd_PREV_VAL2 <= bdma2glb_done_intr_pd_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) status_grp1_write_stall_count_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) status_grp1_write_stall_count_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) status_grp1_write_stall_count_PREV_VAL1 <= status_grp1_write_stall_count ;
    if( INSTR_IN_ZY ) status_grp1_write_stall_count_PREV_VAL2 <= status_grp1_write_stall_count_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) status_grp0_write_stall_count_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) status_grp0_write_stall_count_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) status_grp0_write_stall_count_PREV_VAL1 <= status_grp0_write_stall_count ;
    if( INSTR_IN_ZY ) status_grp0_write_stall_count_PREV_VAL2 <= status_grp0_write_stall_count_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) status_grp1_read_stall_count_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) status_grp1_read_stall_count_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) status_grp1_read_stall_count_PREV_VAL1 <= status_grp1_read_stall_count ;
    if( INSTR_IN_ZY ) status_grp1_read_stall_count_PREV_VAL2 <= status_grp1_read_stall_count_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) status_grp0_read_stall_count_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) status_grp0_read_stall_count_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) status_grp0_read_stall_count_PREV_VAL1 <= status_grp0_read_stall_count ;
    if( INSTR_IN_ZY ) status_grp0_read_stall_count_PREV_VAL2 <= status_grp0_read_stall_count_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) grp1_read_stall_cnt_cnt_cur_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) grp1_read_stall_cnt_cnt_cur_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) grp1_read_stall_cnt_cnt_cur_PREV_VAL1 <= grp1_read_stall_cnt_cnt_cur ;
    if( INSTR_IN_ZY ) grp1_read_stall_cnt_cnt_cur_PREV_VAL2 <= grp1_read_stall_cnt_cnt_cur_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) grp0_read_stall_cnt_cnt_cur_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) grp0_read_stall_cnt_cnt_cur_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) grp0_read_stall_cnt_cnt_cur_PREV_VAL1 <= grp0_read_stall_cnt_cnt_cur ;
    if( INSTR_IN_ZY ) grp0_read_stall_cnt_cnt_cur_PREV_VAL2 <= grp0_read_stall_cnt_cnt_cur_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) status_grp1_busy_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) status_grp1_busy_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) status_grp1_busy_PREV_VAL1 <= status_grp1_busy ;
    if( INSTR_IN_ZY ) status_grp1_busy_PREV_VAL2 <= status_grp1_busy_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) status_grp0_busy_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) status_grp0_busy_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) status_grp0_busy_PREV_VAL1 <= status_grp0_busy ;
    if( INSTR_IN_ZY ) status_grp0_busy_PREV_VAL2 <= status_grp0_busy_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) launch_count_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) launch_count_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) launch_count_PREV_VAL1 <= launch_count ;
    if( INSTR_IN_ZY ) launch_count_PREV_VAL2 <= launch_count_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) launch_ptr_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) launch_ptr_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) launch_ptr_PREV_VAL1 <= launch_ptr ;
    if( INSTR_IN_ZY ) launch_ptr_PREV_VAL2 <= launch_ptr_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) gather_ptr_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) gather_ptr_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) gather_ptr_PREV_VAL1 <= gather_ptr ;
    if( INSTR_IN_ZY ) gather_ptr_PREV_VAL2 <= gather_ptr_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) gather_vld_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) gather_vld_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) gather_vld_PREV_VAL1 <= gather_vld ;
    if( INSTR_IN_ZY ) gather_vld_PREV_VAL2 <= gather_vld_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) gather_count_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) gather_count_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) gather_count_PREV_VAL1 <= gather_count ;
    if( INSTR_IN_ZY ) gather_count_PREV_VAL2 <= gather_count_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) grp1_cmd_launch_trigger_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) grp1_cmd_launch_trigger_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) grp1_cmd_launch_trigger_PREV_VAL1 <= grp1_cmd_launch_trigger ;
    if( INSTR_IN_ZY ) grp1_cmd_launch_trigger_PREV_VAL2 <= grp1_cmd_launch_trigger_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) grp0_cmd_launch_trigger_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) grp0_cmd_launch_trigger_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) grp0_cmd_launch_trigger_PREV_VAL1 <= grp0_cmd_launch_trigger ;
    if( INSTR_IN_ZY ) grp0_cmd_launch_trigger_PREV_VAL2 <= grp0_cmd_launch_trigger_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) op_en_trigger_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) op_en_trigger_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) op_en_trigger_PREV_VAL1 <= op_en_trigger ;
    if( INSTR_IN_ZY ) op_en_trigger_PREV_VAL2 <= op_en_trigger_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) bdma2csb_resp_pd_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) bdma2csb_resp_pd_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) bdma2csb_resp_pd_PREV_VAL1 <= bdma2csb_resp_pd ;
    if( INSTR_IN_ZY ) bdma2csb_resp_pd_PREV_VAL2 <= bdma2csb_resp_pd_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) bdma2csb_resp_valid_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) bdma2csb_resp_valid_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) bdma2csb_resp_valid_PREV_VAL1 <= bdma2csb_resp_valid ;
    if( INSTR_IN_ZY ) bdma2csb_resp_valid_PREV_VAL2 <= bdma2csb_resp_valid_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) req_pd_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) req_pd_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) req_pd_PREV_VAL1 <= req_pd ;
    if( INSTR_IN_ZY ) req_pd_PREV_VAL2 <= req_pd_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) req_vld_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) req_vld_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) req_vld_PREV_VAL1 <= req_vld ;
    if( INSTR_IN_ZY ) req_vld_PREV_VAL2 <= req_vld_PREV_VAL1 ;
  end
 // ground taints for unused wire slices
  assign { nvdla_bdma_status_0_free_slot_R5 [0], nvdla_bdma_status_0_free_slot_R5 [1], nvdla_bdma_status_0_free_slot_R5 [2], nvdla_bdma_status_0_free_slot_R5 [3], nvdla_bdma_status_0_free_slot_R5 [4], nvdla_bdma_status_0_free_slot_R5 [5], nvdla_bdma_status_0_free_slot_R5 [6] } = 0;
  assign { nvdla_bdma_status_0_free_slot_X5 [0], nvdla_bdma_status_0_free_slot_X5 [1], nvdla_bdma_status_0_free_slot_X5 [2], nvdla_bdma_status_0_free_slot_X5 [3], nvdla_bdma_status_0_free_slot_X5 [4], nvdla_bdma_status_0_free_slot_X5 [5], nvdla_bdma_status_0_free_slot_X5 [6] } = 0;
  assign { nvdla_bdma_status_0_free_slot_C5 [0], nvdla_bdma_status_0_free_slot_C5 [1], nvdla_bdma_status_0_free_slot_C5 [2], nvdla_bdma_status_0_free_slot_C5 [3], nvdla_bdma_status_0_free_slot_C5 [4], nvdla_bdma_status_0_free_slot_C5 [5], nvdla_bdma_status_0_free_slot_C5 [6] } = 0;
  assign { _020__R1 [31:5] } = 0;
  assign { _020__X1 [31:5] } = 0;
  assign { _020__C1 [31:5] } = 0;
  assign { _021__R1 [0], _021__R1 [1], _021__R1 [2], _021__R1 [3], _021__R1 [4], _021__R1 [5], _021__R1 [6], _021__R1 [7], _021__R1 [8], _021__R1 [9], _021__R1 [10], _021__R1 [11], _021__R1 [12], _021__R1 [13], _021__R1 [14], _021__R1 [15], _021__R1 [16], _021__R1 [32:32] } = 0;
  assign { _021__X1 [0], _021__X1 [1], _021__X1 [2], _021__X1 [3], _021__X1 [4], _021__X1 [5], _021__X1 [6], _021__X1 [7], _021__X1 [8], _021__X1 [9], _021__X1 [10], _021__X1 [11], _021__X1 [12], _021__X1 [13], _021__X1 [14], _021__X1 [15], _021__X1 [16], _021__X1 [32:32] } = 0;
  assign { _021__C1 [0], _021__C1 [1], _021__C1 [2], _021__C1 [3], _021__C1 [4], _021__C1 [5], _021__C1 [6], _021__C1 [7], _021__C1 [8], _021__C1 [9], _021__C1 [10], _021__C1 [11], _021__C1 [12], _021__C1 [13], _021__C1 [14], _021__C1 [15], _021__C1 [16], _021__C1 [32:32] } = 0;
  assert property( bdma2csb_resp_pd_r_flag == 0 || bdma2csb_resp_pd_PREV_VAL1 == bdma2csb_resp_pd_PREV_VAL2 );
  assert property( bdma2csb_resp_valid_r_flag == 0 || bdma2csb_resp_valid_PREV_VAL1 == bdma2csb_resp_valid_PREV_VAL2 );
  assert property( bdma2glb_done_intr_pd_r_flag == 0 || bdma2glb_done_intr_pd_PREV_VAL1 == bdma2glb_done_intr_pd_PREV_VAL2 );
  assert property( csb_processing_d_r_flag == 0 || csb_processing_d_PREV_VAL1 == csb_processing_d_PREV_VAL2 );
  assert property( gather_count_r_flag == 0 || gather_count_PREV_VAL1 == gather_count_PREV_VAL2 );
  assert property( gather_ptr_r_flag == 0 || gather_ptr_PREV_VAL1 == gather_ptr_PREV_VAL2 );
  assert property( gather_vld_r_flag == 0 || gather_vld_PREV_VAL1 == gather_vld_PREV_VAL2 );
  assert property( grp0_cmd_launch_trigger_r_flag == 0 || grp0_cmd_launch_trigger_PREV_VAL1 == grp0_cmd_launch_trigger_PREV_VAL2 );
  assert property( grp0_read_stall_cnt_cnt_cur_r_flag == 0 || grp0_read_stall_cnt_cnt_cur_PREV_VAL1 == grp0_read_stall_cnt_cnt_cur_PREV_VAL2 );
  assert property( grp1_cmd_launch_trigger_r_flag == 0 || grp1_cmd_launch_trigger_PREV_VAL1 == grp1_cmd_launch_trigger_PREV_VAL2 );
  assert property( grp1_read_stall_cnt_cnt_cur_r_flag == 0 || grp1_read_stall_cnt_cnt_cur_PREV_VAL1 == grp1_read_stall_cnt_cnt_cur_PREV_VAL2 );
  assert property( launch_count_r_flag == 0 || launch_count_PREV_VAL1 == launch_count_PREV_VAL2 );
  assert property( launch_ptr_r_flag == 0 || launch_ptr_PREV_VAL1 == launch_ptr_PREV_VAL2 );
  assert property( op_en_trigger_r_flag == 0 || op_en_trigger_PREV_VAL1 == op_en_trigger_PREV_VAL2 );
  assert property( req_pd_r_flag == 0 || req_pd_PREV_VAL1 == req_pd_PREV_VAL2 );
  assert property( req_vld_r_flag == 0 || req_vld_PREV_VAL1 == req_vld_PREV_VAL2 );
  assert property( slcg_en_r_flag == 0 || slcg_en_PREV_VAL1 == slcg_en_PREV_VAL2 );
  assert property( status_grp0_busy_r_flag == 0 || status_grp0_busy_PREV_VAL1 == status_grp0_busy_PREV_VAL2 );
  assert property( status_grp0_read_stall_count_r_flag == 0 || status_grp0_read_stall_count_PREV_VAL1 == status_grp0_read_stall_count_PREV_VAL2 );
  assert property( status_grp0_write_stall_count_r_flag == 0 || status_grp0_write_stall_count_PREV_VAL1 == status_grp0_write_stall_count_PREV_VAL2 );
  assert property( status_grp1_busy_r_flag == 0 || status_grp1_busy_PREV_VAL1 == status_grp1_busy_PREV_VAL2 );
  assert property( status_grp1_read_stall_count_r_flag == 0 || status_grp1_read_stall_count_PREV_VAL1 == status_grp1_read_stall_count_PREV_VAL2 );
  assert property( status_grp1_write_stall_count_r_flag == 0 || status_grp1_write_stall_count_PREV_VAL1 == status_grp1_write_stall_count_PREV_VAL2 );
  assign rst_zy = !nvdla_core_rstn ;
endmodule
