  logic _00_;
  logic _00__T ;
  logic _00__R ;
  logic _00__C ;
  logic _00__X ;
  logic [13:0] _00__S ;
  logic _01_;
  logic _01__T ;
  logic _01__R ;
  logic _01__C ;
  logic _01__X ;
  logic [13:0] _01__S ;
  logic _02_;
  logic _02__T ;
  logic _02__R ;
  logic _02__C ;
  logic _02__X ;
  logic [13:0] _02__S ;
  logic _03_;
  logic _03__T ;
  logic _03__R ;
  logic _03__C ;
  logic _03__X ;
  logic [13:0] _03__S ;
  output chn_b_rsci_bawt;
  logic chn_b_rsci_bawt ;
  output chn_b_rsci_bawt_T ;
  logic chn_b_rsci_bawt_T ;
  logic chn_b_rsci_bawt_R ;
  logic chn_b_rsci_bawt_C ;
  logic chn_b_rsci_bawt_X ;
  logic [13:0] chn_b_rsci_bawt_S ;
  input chn_b_rsci_bawt_R0 ;
  input chn_b_rsci_bawt_C0 ;
  input chn_b_rsci_bawt_X0 ;
  output [13:0] chn_b_rsci_bawt_S ;
  logic chn_b_rsci_bcwt;
  logic  chn_b_rsci_bcwt_T ;
  logic  chn_b_rsci_bcwt_PREV_VAL1 ;
  logic  chn_b_rsci_bcwt_PREV_VAL2 ;
  logic  chn_b_rsci_bcwt_R ;
  logic  chn_b_rsci_bcwt_X ;
  logic  chn_b_rsci_bcwt_C ;
  logic [13:0] chn_b_rsci_bcwt_S ;
  logic chn_b_rsci_bcwt_t_flag ;
  logic chn_b_rsci_bcwt_r_flag ;
  assign chn_b_rsci_bcwt_S = 596 ;
  input chn_b_rsci_bdwt;
  input chn_b_rsci_bdwt_T ;
  input [13:0] chn_b_rsci_bdwt_S ;
  output chn_b_rsci_bdwt_R ;
  output chn_b_rsci_bdwt_X ;
  output chn_b_rsci_bdwt_C ;
  input chn_b_rsci_biwt;
  input chn_b_rsci_biwt_T ;
  input [13:0] chn_b_rsci_biwt_S ;
  output chn_b_rsci_biwt_R ;
  output chn_b_rsci_biwt_X ;
  output chn_b_rsci_biwt_C ;
  input [31:0] chn_b_rsci_d;
  input [31:0] chn_b_rsci_d_T ;
  input [13:0] chn_b_rsci_d_S ;
  output [31:0] chn_b_rsci_d_R ;
  output [31:0] chn_b_rsci_d_X ;
  output [31:0] chn_b_rsci_d_C ;
  logic [31:0] chn_b_rsci_d_bfwt;
  logic [31:0]  chn_b_rsci_d_bfwt_T ;
  logic [31:0]  chn_b_rsci_d_bfwt_PREV_VAL1 ;
  logic [31:0]  chn_b_rsci_d_bfwt_PREV_VAL2 ;
  logic [31:0]  chn_b_rsci_d_bfwt_R ;
  logic [31:0]  chn_b_rsci_d_bfwt_X ;
  logic [31:0]  chn_b_rsci_d_bfwt_C ;
  logic [13:0] chn_b_rsci_d_bfwt_S ;
  logic chn_b_rsci_d_bfwt_t_flag ;
  logic chn_b_rsci_d_bfwt_r_flag ;
  assign chn_b_rsci_d_bfwt_S = 597 ;
  output [31:0] chn_b_rsci_d_mxwt;
  logic [31:0] chn_b_rsci_d_mxwt ;
  output [31:0] chn_b_rsci_d_mxwt_T ;
  logic [31:0] chn_b_rsci_d_mxwt_T ;
  logic [31:0] chn_b_rsci_d_mxwt_R ;
  logic [31:0] chn_b_rsci_d_mxwt_C ;
  logic [31:0] chn_b_rsci_d_mxwt_X ;
  logic [13:0] chn_b_rsci_d_mxwt_S ;
  input [31:0] chn_b_rsci_d_mxwt_R0 ;
  input [31:0] chn_b_rsci_d_mxwt_C0 ;
  input [31:0] chn_b_rsci_d_mxwt_X0 ;
  output [13:0] chn_b_rsci_d_mxwt_S ;
  input chn_b_rsci_oswt;
  input chn_b_rsci_oswt_T ;
  input [13:0] chn_b_rsci_oswt_S ;
  output chn_b_rsci_oswt_R ;
  output chn_b_rsci_oswt_X ;
  output chn_b_rsci_oswt_C ;
  output chn_b_rsci_wen_comp;
  logic chn_b_rsci_wen_comp ;
  output chn_b_rsci_wen_comp_T ;
  logic chn_b_rsci_wen_comp_T ;
  logic chn_b_rsci_wen_comp_R ;
  logic chn_b_rsci_wen_comp_C ;
  logic chn_b_rsci_wen_comp_X ;
  logic [13:0] chn_b_rsci_wen_comp_S ;
  input chn_b_rsci_wen_comp_R0 ;
  input chn_b_rsci_wen_comp_C0 ;
  input chn_b_rsci_wen_comp_X0 ;
  output [13:0] chn_b_rsci_wen_comp_S ;
  input nvdla_core_clk;
  input nvdla_core_clk_T ;
  input [13:0] nvdla_core_clk_S ;
  output nvdla_core_clk_R ;
  output nvdla_core_clk_X ;
  output nvdla_core_clk_C ;
  input nvdla_core_rstn;
  input nvdla_core_rstn_T ;
  input [13:0] nvdla_core_rstn_S ;
  output nvdla_core_rstn_R ;
  output nvdla_core_rstn_X ;
  output nvdla_core_rstn_C ;
  assign _01_ = ~ chn_b_rsci_oswt;
  logic [0:0] chn_b_rsci_oswt_C0 ;
  logic [0:0] chn_b_rsci_oswt_R0 ;
  logic [0:0] chn_b_rsci_oswt_X0 ;
  assign _01__T = chn_b_rsci_oswt_T ;
  assign chn_b_rsci_oswt_C0 = _01__C ;
  assign chn_b_rsci_oswt_R0 = _01__R ;
  assign chn_b_rsci_oswt_X0 = _01__X ;
  assign _01__S = 0 ;
  assign _02_ = ~ chn_b_rsci_bawt;
  logic [0:0] chn_b_rsci_bawt_C1 ;
  logic [0:0] chn_b_rsci_bawt_R1 ;
  logic [0:0] chn_b_rsci_bawt_X1 ;
  assign _02__T = chn_b_rsci_bawt_T ;
  assign chn_b_rsci_bawt_C1 = _02__C ;
  assign chn_b_rsci_bawt_R1 = _02__R ;
  assign chn_b_rsci_bawt_X1 = _02__X ;
  assign _02__S = 0 ;
  assign _00_ = ~ _03_;
  logic [0:0] _03__C0 ;
  logic [0:0] _03__R0 ;
  logic [0:0] _03__X0 ;
  assign _00__T = _03__T ;
  assign _03__C0 = _00__C ;
  assign _03__R0 = _00__R ;
  assign _03__X0 = _00__X ;
  assign _00__S = 0 ;
  assign chn_b_rsci_bawt = chn_b_rsci_biwt | chn_b_rsci_bcwt;
  assign chn_b_rsci_bawt_S = 0 ;
  logic [0:0] chn_b_rsci_biwt_C0 ;
  logic [0:0] chn_b_rsci_biwt_R0 ;
  logic [0:0] chn_b_rsci_biwt_X0 ;
  logic [0:0] chn_b_rsci_bcwt_C0 ;
  logic [0:0] chn_b_rsci_bcwt_R0 ;
  logic [0:0] chn_b_rsci_bcwt_X0 ;
  assign chn_b_rsci_bawt_T = chn_b_rsci_biwt_T | chn_b_rsci_bcwt_T ;
  assign chn_b_rsci_biwt_C0 = chn_b_rsci_bawt_C ;
  assign chn_b_rsci_biwt_X0 = chn_b_rsci_bawt_X ;
  assign chn_b_rsci_bcwt_C0 = chn_b_rsci_bawt_C ;
  assign chn_b_rsci_bcwt_X0 = chn_b_rsci_bawt_X ;
  assign chn_b_rsci_biwt_R0 = ( chn_b_rsci_bawt_R | chn_b_rsci_bawt_C & chn_b_rsci_bcwt_T ) & { 1{ chn_b_rsci_bcwt != 1'b1 }} ;
  assign chn_b_rsci_bcwt_R0 = ( chn_b_rsci_bawt_R | chn_b_rsci_bawt_C & chn_b_rsci_biwt_T ) & { 1{ chn_b_rsci_biwt != 1'b1 }} ;
  assign chn_b_rsci_wen_comp = _01_ | chn_b_rsci_bawt;
  assign chn_b_rsci_wen_comp_S = 0 ;
  logic [0:0] _01__C0 ;
  logic [0:0] _01__R0 ;
  logic [0:0] _01__X0 ;
  logic [0:0] chn_b_rsci_bawt_C2 ;
  logic [0:0] chn_b_rsci_bawt_R2 ;
  logic [0:0] chn_b_rsci_bawt_X2 ;
  assign chn_b_rsci_wen_comp_T = _01__T | chn_b_rsci_bawt_T ;
  assign _01__C0 = chn_b_rsci_wen_comp_C ;
  assign _01__X0 = chn_b_rsci_wen_comp_X ;
  assign chn_b_rsci_bawt_C2 = chn_b_rsci_wen_comp_C ;
  assign chn_b_rsci_bawt_X2 = chn_b_rsci_wen_comp_X ;
  assign _01__R0 = ( chn_b_rsci_wen_comp_R | chn_b_rsci_wen_comp_C & chn_b_rsci_bawt_T ) & { 1{ chn_b_rsci_bawt != 1'b1 }} ;
  assign chn_b_rsci_bawt_R2 = ( chn_b_rsci_wen_comp_R | chn_b_rsci_wen_comp_C & _01__T ) & { 1{ _01_ != 1'b1 }} ;
  assign _03_ = _02_ | chn_b_rsci_bdwt;
  assign _03__S = 0 ;
  logic [0:0] _02__C0 ;
  logic [0:0] _02__R0 ;
  logic [0:0] _02__X0 ;
  logic [0:0] chn_b_rsci_bdwt_C0 ;
  logic [0:0] chn_b_rsci_bdwt_R0 ;
  logic [0:0] chn_b_rsci_bdwt_X0 ;
  assign _03__T = _02__T | chn_b_rsci_bdwt_T ;
  assign _02__C0 = _03__C ;
  assign _02__X0 = _03__X ;
  assign chn_b_rsci_bdwt_C0 = _03__C ;
  assign chn_b_rsci_bdwt_X0 = _03__X ;
  assign _02__R0 = ( _03__R | _03__C & chn_b_rsci_bdwt_T ) & { 1{ chn_b_rsci_bdwt != 1'b1 }} ;
  assign chn_b_rsci_bdwt_R0 = ( _03__R | _03__C & _02__T ) & { 1{ _02_ != 1'b1 }} ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      chn_b_rsci_bcwt <= 1'b0;
    else
      chn_b_rsci_bcwt <= _00_;
  logic [0:0] _00__X0 ;
  logic [0:0] _00__R0 ;
  logic [0:0] _00__C0 ;
  assign _00__X0 = { 1{ chn_b_rsci_bcwt_S != _00__S }} ;
  assign _00__R0 = 0 ;
  assign _00__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      chn_b_rsci_bcwt_T 		<= !nvdla_core_rstn ? 0 : ( _00__T & _00__X0 );
  always @( posedge nvdla_core_clk )
      chn_b_rsci_bcwt_t_flag 	<= !nvdla_core_rstn ? 0 : chn_b_rsci_bcwt_t_flag ? 1 : | _00__T & ( | _00__X0 );
  always @( posedge nvdla_core_clk )
      chn_b_rsci_bcwt_r_flag 	<= !nvdla_core_rstn ? 0 : chn_b_rsci_bcwt_r_flag ? 1 : chn_b_rsci_bcwt_t_flag ? 0 : ( | chn_b_rsci_bcwt_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      chn_b_rsci_d_bfwt <= 32'd0;
    else
      chn_b_rsci_d_bfwt <= chn_b_rsci_d_mxwt;
  logic [31:0] chn_b_rsci_d_mxwt_X1 ;
  logic [31:0] chn_b_rsci_d_mxwt_R1 ;
  logic [31:0] chn_b_rsci_d_mxwt_C1 ;
  assign chn_b_rsci_d_mxwt_X1 = { 32{ chn_b_rsci_d_bfwt_S != chn_b_rsci_d_mxwt_S }} ;
  assign chn_b_rsci_d_mxwt_R1 = 0 ;
  assign chn_b_rsci_d_mxwt_C1 = 0 ;
  always @( posedge nvdla_core_clk )
      chn_b_rsci_d_bfwt_T 		<= !nvdla_core_rstn ? 0 : ( chn_b_rsci_d_mxwt_T & chn_b_rsci_d_mxwt_X1 );
  always @( posedge nvdla_core_clk )
      chn_b_rsci_d_bfwt_t_flag 	<= !nvdla_core_rstn ? 0 : chn_b_rsci_d_bfwt_t_flag ? 1 : | chn_b_rsci_d_mxwt_T & ( | chn_b_rsci_d_mxwt_X1 );
  always @( posedge nvdla_core_clk )
      chn_b_rsci_d_bfwt_r_flag 	<= !nvdla_core_rstn ? 0 : chn_b_rsci_d_bfwt_r_flag ? 1 : chn_b_rsci_d_bfwt_t_flag ? 0 : ( | chn_b_rsci_d_bfwt_R ) ;
  assign chn_b_rsci_d_mxwt = chn_b_rsci_bcwt ? chn_b_rsci_d_bfwt : chn_b_rsci_d;
  logic [0:0] chn_b_rsci_bcwt_C1 ;
  logic [0:0] chn_b_rsci_bcwt_R1 ;
  logic [0:0] chn_b_rsci_bcwt_X1 ;
  assign chn_b_rsci_bcwt_C1 = | chn_b_rsci_d_mxwt_C ;
  assign chn_b_rsci_bcwt_X1 = | chn_b_rsci_d_mxwt_X ;
  assign chn_b_rsci_d_mxwt_T = chn_b_rsci_bcwt ? ( { 32{ chn_b_rsci_bcwt_T  }} | chn_b_rsci_d_bfwt_T ) : ( { 32{ chn_b_rsci_bcwt_T  }} | chn_b_rsci_d_T );
  assign chn_b_rsci_d_mxwt_S = chn_b_rsci_bcwt ? chn_b_rsci_d_bfwt_S : chn_b_rsci_d_S ;
  assign chn_b_rsci_bcwt_R1 = ( | (chn_b_rsci_d_mxwt_R | ( chn_b_rsci_d_mxwt_C & ( { 32{ chn_b_rsci_bcwt }} & chn_b_rsci_d_bfwt_T | { 32{ !chn_b_rsci_bcwt }} & chn_b_rsci_d_T )))) && chn_b_rsci_d_bfwt != chn_b_rsci_d ;
  logic [31:0] chn_b_rsci_d_bfwt_C0 ;
  logic [31:0] chn_b_rsci_d_bfwt_R0 ;
  logic [31:0] chn_b_rsci_d_bfwt_X0 ;
  assign chn_b_rsci_d_bfwt_C0 = { 32{ chn_b_rsci_bcwt }} ;
  assign chn_b_rsci_d_bfwt_R0 = { 32{ chn_b_rsci_bcwt }} & ( chn_b_rsci_d_mxwt_R | ( { 32{ chn_b_rsci_bcwt_T  }} & chn_b_rsci_d_mxwt_C ));
  assign chn_b_rsci_d_bfwt_X0 = { 32{ chn_b_rsci_bcwt }} & chn_b_rsci_d_mxwt_X ;
  logic [31:0] chn_b_rsci_d_C0 ;
  logic [31:0] chn_b_rsci_d_R0 ;
  logic [31:0] chn_b_rsci_d_X0 ;
  assign chn_b_rsci_d_C0 = { 32{ !chn_b_rsci_bcwt }} ;
  assign chn_b_rsci_d_R0 = { 32{ !chn_b_rsci_bcwt }} & ( chn_b_rsci_d_mxwt_R | ( { 32{ chn_b_rsci_bcwt_T  }} & chn_b_rsci_d_mxwt_C ));
  assign chn_b_rsci_d_X0 = { 32{ !chn_b_rsci_bcwt }} & chn_b_rsci_d_mxwt_X ;
  assign chn_b_rsci_d_C = ( chn_b_rsci_d_C0 );
  assign chn_b_rsci_d_bfwt_C = ( chn_b_rsci_d_bfwt_C0 );
  assign _00__C = ( _00__C0 );
  assign chn_b_rsci_bdwt_C = ( chn_b_rsci_bdwt_C0 );
  assign _02__C = ( _02__C0 );
  assign _01__C = ( _01__C0 );
  assign chn_b_rsci_bcwt_C = ( chn_b_rsci_bcwt_C0 ) | ( chn_b_rsci_bcwt_C1 );
  assign chn_b_rsci_biwt_C = ( chn_b_rsci_biwt_C0 );
  assign _03__C = ( _03__C0 );
  assign chn_b_rsci_oswt_C = ( chn_b_rsci_oswt_C0 );
  assign chn_b_rsci_wen_comp_C = ( chn_b_rsci_wen_comp_C0 );
  assign chn_b_rsci_d_mxwt_C = ( chn_b_rsci_d_mxwt_C0 ) | ( chn_b_rsci_d_mxwt_C1 );
  assign chn_b_rsci_bawt_C = ( chn_b_rsci_bawt_C0 ) | ( chn_b_rsci_bawt_C1 ) | ( chn_b_rsci_bawt_C2 );
  assign chn_b_rsci_d_X = ( chn_b_rsci_d_X0 );
  assign chn_b_rsci_d_bfwt_X = ( chn_b_rsci_d_bfwt_X0 );
  assign _00__X = ( _00__X0 );
  assign chn_b_rsci_bdwt_X = ( chn_b_rsci_bdwt_X0 );
  assign _02__X = ( _02__X0 );
  assign _01__X = ( _01__X0 );
  assign chn_b_rsci_bcwt_X = ( chn_b_rsci_bcwt_X0 ) | ( chn_b_rsci_bcwt_X1 );
  assign chn_b_rsci_biwt_X = ( chn_b_rsci_biwt_X0 );
  assign _03__X = ( _03__X0 );
  assign chn_b_rsci_oswt_X = ( chn_b_rsci_oswt_X0 );
  assign chn_b_rsci_wen_comp_X = ( chn_b_rsci_wen_comp_X0 );
  assign chn_b_rsci_d_mxwt_X = ( chn_b_rsci_d_mxwt_X0 ) | ( chn_b_rsci_d_mxwt_X1 );
  assign chn_b_rsci_bawt_X = ( chn_b_rsci_bawt_X0 ) | ( chn_b_rsci_bawt_X1 ) | ( chn_b_rsci_bawt_X2 );
  assign chn_b_rsci_d_R = ( chn_b_rsci_d_X0 & chn_b_rsci_d_R0 );
  assign chn_b_rsci_d_bfwt_R = ( chn_b_rsci_d_bfwt_X0 & chn_b_rsci_d_bfwt_R0 );
  assign _00__R = ( _00__X0 & _00__R0 );
  assign chn_b_rsci_bdwt_R = ( chn_b_rsci_bdwt_X0 & chn_b_rsci_bdwt_R0 );
  assign _02__R = ( _02__X0 & _02__R0 );
  assign _01__R = ( _01__X0 & _01__R0 );
  assign chn_b_rsci_bcwt_R = ( chn_b_rsci_bcwt_X0 & chn_b_rsci_bcwt_R0 ) | ( chn_b_rsci_bcwt_X1 & chn_b_rsci_bcwt_R1 );
  assign chn_b_rsci_biwt_R = ( chn_b_rsci_biwt_X0 & chn_b_rsci_biwt_R0 );
  assign _03__R = ( _03__X0 & _03__R0 );
  assign chn_b_rsci_oswt_R = ( chn_b_rsci_oswt_X0 & chn_b_rsci_oswt_R0 );
  assign chn_b_rsci_wen_comp_R = ( chn_b_rsci_wen_comp_X0 & chn_b_rsci_wen_comp_R0 );
  assign chn_b_rsci_d_mxwt_R = ( chn_b_rsci_d_mxwt_X0 & chn_b_rsci_d_mxwt_R0 ) | ( chn_b_rsci_d_mxwt_X1 & chn_b_rsci_d_mxwt_R1 );
  assign chn_b_rsci_bawt_R = ( chn_b_rsci_bawt_X0 & chn_b_rsci_bawt_R0 ) | ( chn_b_rsci_bawt_X1 & chn_b_rsci_bawt_R1 ) | ( chn_b_rsci_bawt_X2 & chn_b_rsci_bawt_R2 );
 // ground taints for floating regs
 // ground taints for unused wires
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) chn_b_rsci_bcwt_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) chn_b_rsci_bcwt_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) chn_b_rsci_bcwt_PREV_VAL1 <= chn_b_rsci_bcwt ;
    if( INSTR_IN_ZY ) chn_b_rsci_bcwt_PREV_VAL2 <= chn_b_rsci_bcwt_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) chn_b_rsci_d_bfwt_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) chn_b_rsci_d_bfwt_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) chn_b_rsci_d_bfwt_PREV_VAL1 <= chn_b_rsci_d_bfwt ;
    if( INSTR_IN_ZY ) chn_b_rsci_d_bfwt_PREV_VAL2 <= chn_b_rsci_d_bfwt_PREV_VAL1 ;
  end
 // ground taints for unused wire slices
  assert property( chn_b_rsci_bcwt_r_flag == 0 || chn_b_rsci_bcwt_PREV_VAL1 == chn_b_rsci_bcwt_PREV_VAL2 );
  assert property( chn_b_rsci_d_bfwt_r_flag == 0 || chn_b_rsci_d_bfwt_PREV_VAL1 == chn_b_rsci_d_bfwt_PREV_VAL2 );
  assign rst_zy = !nvdla_core_rstn ;
endmodule
