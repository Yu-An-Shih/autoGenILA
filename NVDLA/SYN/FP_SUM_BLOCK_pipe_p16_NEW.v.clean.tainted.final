module FP_SUM_BLOCK_pipe_p16 ( nvdla_core_clk , nvdla_core_rstn , stage3_pipe_in_pd_d3 , stage3_pipe_in_rdy_d4 , stage3_pipe_in_vld_d3 , INSTR_IN_ZY , nvdla_core_clk_T , nvdla_core_clk_S , nvdla_core_rstn_T , nvdla_core_rstn_S , stage3_pipe_in_pd_d3_T , stage3_pipe_in_pd_d3_S , stage3_pipe_in_pd_d4_R0 , stage3_pipe_in_pd_d4_C0 , stage3_pipe_in_pd_d4_X0 , stage3_pipe_in_rdy_d3_R0 , stage3_pipe_in_rdy_d3_C0 , stage3_pipe_in_rdy_d3_X0 , stage3_pipe_in_rdy_d4_T , stage3_pipe_in_rdy_d4_S , stage3_pipe_in_vld_d3_T , stage3_pipe_in_vld_d3_S , stage3_pipe_in_vld_d4_R0 , stage3_pipe_in_vld_d4_C0 , stage3_pipe_in_vld_d4_X0 , stage3_pipe_in_pd_d4 , stage3_pipe_in_rdy_d3 , stage3_pipe_in_vld_d4 , nvdla_core_clk_R , nvdla_core_clk_X , nvdla_core_clk_C , nvdla_core_rstn_R , nvdla_core_rstn_X , nvdla_core_rstn_C , stage3_pipe_in_pd_d3_R , stage3_pipe_in_pd_d3_X , stage3_pipe_in_pd_d3_C , stage3_pipe_in_pd_d4_T , stage3_pipe_in_pd_d4_S , stage3_pipe_in_rdy_d3_T , stage3_pipe_in_rdy_d3_S , stage3_pipe_in_rdy_d4_R , stage3_pipe_in_rdy_d4_X , stage3_pipe_in_rdy_d4_C , stage3_pipe_in_vld_d3_R , stage3_pipe_in_vld_d3_X , stage3_pipe_in_vld_d3_C , stage3_pipe_in_vld_d4_T , stage3_pipe_in_vld_d4_S );
  logic rst_zy;
  integer i;
  input INSTR_IN_ZY;
  logic [31:0] _00_;
  logic [31:0] _00__T ;
  logic [31:0] _00__R ;
  logic [31:0] _00__C ;
  logic [31:0] _00__X ;
  logic [13:0] _00__S ;
  logic _01_;
  logic _01__T ;
  logic _01__R ;
  logic _01__C ;
  logic _01__X ;
  logic [13:0] _01__S ;
  logic _02_;
  logic _02__T ;
  logic _02__R ;
  logic _02__C ;
  logic _02__X ;
  logic [13:0] _02__S ;
  logic _03_;
  logic _03__T ;
  logic _03__R ;
  logic _03__C ;
  logic _03__X ;
  logic [13:0] _03__S ;
  input nvdla_core_clk;
  input nvdla_core_clk_T ;
  input [13:0] nvdla_core_clk_S ;
  output nvdla_core_clk_R ;
  output nvdla_core_clk_X ;
  output nvdla_core_clk_C ;
  input nvdla_core_rstn;
  input nvdla_core_rstn_T ;
  input [13:0] nvdla_core_rstn_S ;
  output nvdla_core_rstn_R ;
  output nvdla_core_rstn_X ;
  output nvdla_core_rstn_C ;
  logic p16_assert_clk;
  logic p16_assert_clk_T ;
  logic p16_assert_clk_R ;
  logic p16_assert_clk_C ;
  logic p16_assert_clk_X ;
  logic [13:0] p16_assert_clk_S ;
  logic [31:0] p16_pipe_data;
  logic [31:0]  p16_pipe_data_T ;
  logic [31:0]  p16_pipe_data_PREV_VAL1 ;
  logic [31:0]  p16_pipe_data_PREV_VAL2 ;
  logic [31:0]  p16_pipe_data_R ;
  logic [31:0]  p16_pipe_data_X ;
  logic [31:0]  p16_pipe_data_C ;
  logic [13:0] p16_pipe_data_S ;
  logic p16_pipe_data_t_flag ;
  logic p16_pipe_data_r_flag ;
  assign p16_pipe_data_S = 221 ;
  logic p16_pipe_ready;
  logic p16_pipe_ready_T ;
  logic p16_pipe_ready_R ;
  logic p16_pipe_ready_C ;
  logic p16_pipe_ready_X ;
  logic [13:0] p16_pipe_ready_S ;
  logic p16_pipe_ready_bc;
  logic p16_pipe_ready_bc_T ;
  logic p16_pipe_ready_bc_R ;
  logic p16_pipe_ready_bc_C ;
  logic p16_pipe_ready_bc_X ;
  logic [13:0] p16_pipe_ready_bc_S ;
  logic p16_pipe_valid;
  logic  p16_pipe_valid_T ;
  logic  p16_pipe_valid_PREV_VAL1 ;
  logic  p16_pipe_valid_PREV_VAL2 ;
  logic  p16_pipe_valid_R ;
  logic  p16_pipe_valid_X ;
  logic  p16_pipe_valid_C ;
  logic [13:0] p16_pipe_valid_S ;
  logic p16_pipe_valid_t_flag ;
  logic p16_pipe_valid_r_flag ;
  assign p16_pipe_valid_S = 222 ;
  input [31:0] stage3_pipe_in_pd_d3;
  input [31:0] stage3_pipe_in_pd_d3_T ;
  input [13:0] stage3_pipe_in_pd_d3_S ;
  output [31:0] stage3_pipe_in_pd_d3_R ;
  output [31:0] stage3_pipe_in_pd_d3_X ;
  output [31:0] stage3_pipe_in_pd_d3_C ;
  output [31:0] stage3_pipe_in_pd_d4;
  logic [31:0] stage3_pipe_in_pd_d4 ;
  output [31:0] stage3_pipe_in_pd_d4_T ;
  logic [31:0] stage3_pipe_in_pd_d4_T ;
  logic [31:0] stage3_pipe_in_pd_d4_R ;
  logic [31:0] stage3_pipe_in_pd_d4_C ;
  logic [31:0] stage3_pipe_in_pd_d4_X ;
  logic [13:0] stage3_pipe_in_pd_d4_S ;
  input [31:0] stage3_pipe_in_pd_d4_R0 ;
  input [31:0] stage3_pipe_in_pd_d4_C0 ;
  input [31:0] stage3_pipe_in_pd_d4_X0 ;
  output [13:0] stage3_pipe_in_pd_d4_S ;
  output stage3_pipe_in_rdy_d3;
  logic stage3_pipe_in_rdy_d3 ;
  output stage3_pipe_in_rdy_d3_T ;
  logic stage3_pipe_in_rdy_d3_T ;
  logic stage3_pipe_in_rdy_d3_R ;
  logic stage3_pipe_in_rdy_d3_C ;
  logic stage3_pipe_in_rdy_d3_X ;
  logic [13:0] stage3_pipe_in_rdy_d3_S ;
  input stage3_pipe_in_rdy_d3_R0 ;
  input stage3_pipe_in_rdy_d3_C0 ;
  input stage3_pipe_in_rdy_d3_X0 ;
  output [13:0] stage3_pipe_in_rdy_d3_S ;
  input stage3_pipe_in_rdy_d4;
  input stage3_pipe_in_rdy_d4_T ;
  input [13:0] stage3_pipe_in_rdy_d4_S ;
  output stage3_pipe_in_rdy_d4_R ;
  output stage3_pipe_in_rdy_d4_X ;
  output stage3_pipe_in_rdy_d4_C ;
  input stage3_pipe_in_vld_d3;
  input stage3_pipe_in_vld_d3_T ;
  input [13:0] stage3_pipe_in_vld_d3_S ;
  output stage3_pipe_in_vld_d3_R ;
  output stage3_pipe_in_vld_d3_X ;
  output stage3_pipe_in_vld_d3_C ;
  output stage3_pipe_in_vld_d4;
  logic stage3_pipe_in_vld_d4 ;
  output stage3_pipe_in_vld_d4_T ;
  logic stage3_pipe_in_vld_d4_T ;
  logic stage3_pipe_in_vld_d4_R ;
  logic stage3_pipe_in_vld_d4_C ;
  logic stage3_pipe_in_vld_d4_X ;
  logic [13:0] stage3_pipe_in_vld_d4_S ;
  input stage3_pipe_in_vld_d4_R0 ;
  input stage3_pipe_in_vld_d4_C0 ;
  input stage3_pipe_in_vld_d4_X0 ;
  output [13:0] stage3_pipe_in_vld_d4_S ;
  assign _02_ = p16_pipe_ready_bc && stage3_pipe_in_vld_d3;
  assign _02__S = 0 ;
  logic [0:0] p16_pipe_ready_bc_C0 ;
  logic [0:0] p16_pipe_ready_bc_R0 ;
  logic [0:0] p16_pipe_ready_bc_X0 ;
  logic [0:0] stage3_pipe_in_vld_d3_C0 ;
  logic [0:0] stage3_pipe_in_vld_d3_R0 ;
  logic [0:0] stage3_pipe_in_vld_d3_X0 ;
  assign _02__T = p16_pipe_ready_bc_T | stage3_pipe_in_vld_d3_T ;
  assign p16_pipe_ready_bc_C0 = _02__C ;
  assign p16_pipe_ready_bc_X0 = _02__X ;
  assign stage3_pipe_in_vld_d3_C0 = _02__C ;
  assign stage3_pipe_in_vld_d3_X0 = _02__X ;
  assign p16_pipe_ready_bc_R0 = ( _02__R | _02__C & stage3_pipe_in_vld_d3_T ) & { 1{ stage3_pipe_in_vld_d3 != 0 }} ;
  assign stage3_pipe_in_vld_d3_R0 = ( _02__R | _02__C & p16_pipe_ready_bc_T ) & { 1{ p16_pipe_ready_bc != 0 }} ;
  assign _03_ = ! p16_pipe_valid;
  logic [0:0] p16_pipe_valid_C0 ;
  logic [0:0] p16_pipe_valid_R0 ;
  logic [0:0] p16_pipe_valid_X0 ;
  assign _03__T = | p16_pipe_valid_T ;
  assign p16_pipe_valid_C0 = { 1{ _03__C }} ;
  assign p16_pipe_valid_X0 = { 1{ _03__X }} ;
  assign p16_pipe_valid_R0 = { 1{ _03__R }} ;
  assign _03__S = 0 ;
  assign p16_pipe_ready_bc = stage3_pipe_in_rdy_d4 || _03_;
  assign p16_pipe_ready_bc_S = 0 ;
  logic [0:0] stage3_pipe_in_rdy_d4_C0 ;
  logic [0:0] stage3_pipe_in_rdy_d4_R0 ;
  logic [0:0] stage3_pipe_in_rdy_d4_X0 ;
  logic [0:0] _03__C0 ;
  logic [0:0] _03__R0 ;
  logic [0:0] _03__X0 ;
  assign p16_pipe_ready_bc_T = stage3_pipe_in_rdy_d4_T | _03__T ;
  assign stage3_pipe_in_rdy_d4_C0 = p16_pipe_ready_bc_C ;
  assign stage3_pipe_in_rdy_d4_X0 = p16_pipe_ready_bc_X ;
  assign _03__C0 = p16_pipe_ready_bc_C ;
  assign _03__X0 = p16_pipe_ready_bc_X ;
  assign stage3_pipe_in_rdy_d4_R0 = ( p16_pipe_ready_bc_R | p16_pipe_ready_bc_C & _03__T ) & { 1{ _03_ == 0 }} ;
  assign _03__R0 = ( p16_pipe_ready_bc_R | p16_pipe_ready_bc_C & stage3_pipe_in_rdy_d4_T ) & { 1{ stage3_pipe_in_rdy_d4 == 0 }} ;
  always @(posedge nvdla_core_clk)
      p16_pipe_data <= _00_;
  logic [31:0] _00__X0 ;
  logic [31:0] _00__R0 ;
  logic [31:0] _00__C0 ;
  assign _00__X0 = { 32{ p16_pipe_data_S != _00__S }} ;
  assign _00__R0 = 0 ;
  assign _00__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      p16_pipe_data_T 		<= !nvdla_core_rstn ? 0 : ( _00__T & _00__X0 );
  always @( posedge nvdla_core_clk )
      p16_pipe_data_t_flag 	<= !nvdla_core_rstn ? 0 : p16_pipe_data_t_flag ? 1 : | _00__T & ( | _00__X0 );
  always @( posedge nvdla_core_clk )
      p16_pipe_data_r_flag 	<= !nvdla_core_rstn ? 0 : p16_pipe_data_r_flag ? 1 : p16_pipe_data_t_flag ? 0 : ( | p16_pipe_data_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      p16_pipe_valid <= 1'b0;
    else
      p16_pipe_valid <= _01_;
  logic [0:0] _01__X0 ;
  logic [0:0] _01__R0 ;
  logic [0:0] _01__C0 ;
  assign _01__X0 = { 1{ p16_pipe_valid_S != _01__S }} ;
  assign _01__R0 = 0 ;
  assign _01__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      p16_pipe_valid_T 		<= !nvdla_core_rstn ? 0 : ( _01__T & _01__X0 );
  always @( posedge nvdla_core_clk )
      p16_pipe_valid_t_flag 	<= !nvdla_core_rstn ? 0 : p16_pipe_valid_t_flag ? 1 : | _01__T & ( | _01__X0 );
  always @( posedge nvdla_core_clk )
      p16_pipe_valid_r_flag 	<= !nvdla_core_rstn ? 0 : p16_pipe_valid_r_flag ? 1 : p16_pipe_valid_t_flag ? 0 : ( | p16_pipe_valid_R ) ;
  assign _01_ = p16_pipe_ready_bc ? stage3_pipe_in_vld_d3 : 1'b1;
  logic [0:0] p16_pipe_ready_bc_C1 ;
  logic [0:0] p16_pipe_ready_bc_R1 ;
  logic [0:0] p16_pipe_ready_bc_X1 ;
  assign p16_pipe_ready_bc_C1 = | _01__C ;
  assign p16_pipe_ready_bc_X1 = | _01__X ;
  logic [0:0] stage3_pipe_in_vld_d3_C1 ;
  logic [0:0] stage3_pipe_in_vld_d3_R1 ;
  logic [0:0] stage3_pipe_in_vld_d3_X1 ;
  assign stage3_pipe_in_vld_d3_C1 = { 1{ p16_pipe_ready_bc }} ;
  assign stage3_pipe_in_vld_d3_R1 = { 1{ p16_pipe_ready_bc }} & ( _01__R | ( { 1{ p16_pipe_ready_bc_T  }} & _01__C ));
  assign stage3_pipe_in_vld_d3_X1 = { 1{ p16_pipe_ready_bc }} & _01__X ;
  assign _01__T = p16_pipe_ready_bc ? ( { 1{ | p16_pipe_ready_bc_T  }} | stage3_pipe_in_vld_d3_T ) : { 1{ | p16_pipe_ready_bc_T  }};
  assign _01__S = p16_pipe_ready_bc ? stage3_pipe_in_vld_d3_S : p16_pipe_ready_bc_S ;
  assign p16_pipe_ready_bc_R1 = ( | (_01__R | ( { 1{ p16_pipe_ready_bc }} & stage3_pipe_in_vld_d3_T & _01__C ))) && stage3_pipe_in_vld_d3 != 1'b1 ;
  assign _00_ = _02_ ? stage3_pipe_in_pd_d3 : p16_pipe_data;
  logic [0:0] _02__C0 ;
  logic [0:0] _02__R0 ;
  logic [0:0] _02__X0 ;
  assign _02__C0 = | _00__C ;
  assign _02__X0 = | _00__X ;
  assign _00__T = _02_ ? ( { 32{ _02__T  }} | stage3_pipe_in_pd_d3_T ) : ( { 32{ _02__T  }} | p16_pipe_data_T );
  assign _00__S = _02_ ? stage3_pipe_in_pd_d3_S : p16_pipe_data_S ;
  assign _02__R0 = ( | (_00__R | ( _00__C & ( { 32{ _02_ }} & stage3_pipe_in_pd_d3_T | { 32{ !_02_ }} & p16_pipe_data_T )))) && stage3_pipe_in_pd_d3 != p16_pipe_data ;
  logic [31:0] stage3_pipe_in_pd_d3_C0 ;
  logic [31:0] stage3_pipe_in_pd_d3_R0 ;
  logic [31:0] stage3_pipe_in_pd_d3_X0 ;
  assign stage3_pipe_in_pd_d3_C0 = { 32{ _02_ }} ;
  assign stage3_pipe_in_pd_d3_R0 = { 32{ _02_ }} & ( _00__R | ( { 32{ _02__T  }} & _00__C ));
  assign stage3_pipe_in_pd_d3_X0 = { 32{ _02_ }} & _00__X ;
  logic [31:0] p16_pipe_data_C0 ;
  logic [31:0] p16_pipe_data_R0 ;
  logic [31:0] p16_pipe_data_X0 ;
  assign p16_pipe_data_C0 = { 32{ !_02_ }} ;
  assign p16_pipe_data_R0 = { 32{ !_02_ }} & ( _00__R | ( { 32{ _02__T  }} & _00__C ));
  assign p16_pipe_data_X0 = { 32{ !_02_ }} & _00__X ;
  assign p16_assert_clk = nvdla_core_clk;
  logic [0:0] nvdla_core_clk_C0 ;
  logic [0:0] nvdla_core_clk_R0 ;
  logic [0:0] nvdla_core_clk_X0 ;
  assign p16_assert_clk_T = nvdla_core_clk_T ;
  assign nvdla_core_clk_C0 = p16_assert_clk_C ;
  assign nvdla_core_clk_R0 = p16_assert_clk_R ;
  assign nvdla_core_clk_X0 = p16_assert_clk_X ;
  assign p16_assert_clk_S = nvdla_core_clk_S ;
  assign p16_pipe_ready = stage3_pipe_in_rdy_d4;
  logic [0:0] stage3_pipe_in_rdy_d4_C1 ;
  logic [0:0] stage3_pipe_in_rdy_d4_R1 ;
  logic [0:0] stage3_pipe_in_rdy_d4_X1 ;
  assign p16_pipe_ready_T = stage3_pipe_in_rdy_d4_T ;
  assign stage3_pipe_in_rdy_d4_C1 = p16_pipe_ready_C ;
  assign stage3_pipe_in_rdy_d4_R1 = p16_pipe_ready_R ;
  assign stage3_pipe_in_rdy_d4_X1 = p16_pipe_ready_X ;
  assign p16_pipe_ready_S = stage3_pipe_in_rdy_d4_S ;
  assign stage3_pipe_in_pd_d4 = p16_pipe_data;
  logic [31:0] p16_pipe_data_C1 ;
  logic [31:0] p16_pipe_data_R1 ;
  logic [31:0] p16_pipe_data_X1 ;
  assign stage3_pipe_in_pd_d4_T = p16_pipe_data_T ;
  assign p16_pipe_data_C1 = stage3_pipe_in_pd_d4_C ;
  assign p16_pipe_data_R1 = stage3_pipe_in_pd_d4_R ;
  assign p16_pipe_data_X1 = stage3_pipe_in_pd_d4_X ;
  assign stage3_pipe_in_pd_d4_S = p16_pipe_data_S ;
  assign stage3_pipe_in_rdy_d3 = p16_pipe_ready_bc;
  logic [0:0] p16_pipe_ready_bc_C2 ;
  logic [0:0] p16_pipe_ready_bc_R2 ;
  logic [0:0] p16_pipe_ready_bc_X2 ;
  assign stage3_pipe_in_rdy_d3_T = p16_pipe_ready_bc_T ;
  assign p16_pipe_ready_bc_C2 = stage3_pipe_in_rdy_d3_C ;
  assign p16_pipe_ready_bc_R2 = stage3_pipe_in_rdy_d3_R ;
  assign p16_pipe_ready_bc_X2 = stage3_pipe_in_rdy_d3_X ;
  assign stage3_pipe_in_rdy_d3_S = p16_pipe_ready_bc_S ;
  assign stage3_pipe_in_vld_d4 = p16_pipe_valid;
  logic [0:0] p16_pipe_valid_C1 ;
  logic [0:0] p16_pipe_valid_R1 ;
  logic [0:0] p16_pipe_valid_X1 ;
  assign stage3_pipe_in_vld_d4_T = p16_pipe_valid_T ;
  assign p16_pipe_valid_C1 = stage3_pipe_in_vld_d4_C ;
  assign p16_pipe_valid_R1 = stage3_pipe_in_vld_d4_R ;
  assign p16_pipe_valid_X1 = stage3_pipe_in_vld_d4_X ;
  assign stage3_pipe_in_vld_d4_S = p16_pipe_valid_S ;
  assign nvdla_core_clk_C = ( nvdla_core_clk_C0 );
  assign p16_pipe_data_C = ( p16_pipe_data_C0 ) | ( p16_pipe_data_C1 );
  assign stage3_pipe_in_pd_d3_C = ( stage3_pipe_in_pd_d3_C0 );
  assign _02__C = ( _02__C0 );
  assign _01__C = ( _01__C0 );
  assign _00__C = ( _00__C0 );
  assign _03__C = ( _03__C0 );
  assign stage3_pipe_in_rdy_d4_C = ( stage3_pipe_in_rdy_d4_C0 ) | ( stage3_pipe_in_rdy_d4_C1 );
  assign p16_pipe_valid_C = ( p16_pipe_valid_C0 ) | ( p16_pipe_valid_C1 );
  assign stage3_pipe_in_vld_d3_C = ( stage3_pipe_in_vld_d3_C0 ) | ( stage3_pipe_in_vld_d3_C1 );
  assign p16_pipe_ready_bc_C = ( p16_pipe_ready_bc_C0 ) | ( p16_pipe_ready_bc_C1 ) | ( p16_pipe_ready_bc_C2 );
  assign stage3_pipe_in_vld_d4_C = ( stage3_pipe_in_vld_d4_C0 );
  assign stage3_pipe_in_rdy_d3_C = ( stage3_pipe_in_rdy_d3_C0 );
  assign stage3_pipe_in_pd_d4_C = ( stage3_pipe_in_pd_d4_C0 );
  assign nvdla_core_clk_X = ( nvdla_core_clk_X0 );
  assign p16_pipe_data_X = ( p16_pipe_data_X0 ) | ( p16_pipe_data_X1 );
  assign stage3_pipe_in_pd_d3_X = ( stage3_pipe_in_pd_d3_X0 );
  assign _02__X = ( _02__X0 );
  assign _01__X = ( _01__X0 );
  assign _00__X = ( _00__X0 );
  assign _03__X = ( _03__X0 );
  assign stage3_pipe_in_rdy_d4_X = ( stage3_pipe_in_rdy_d4_X0 ) | ( stage3_pipe_in_rdy_d4_X1 );
  assign p16_pipe_valid_X = ( p16_pipe_valid_X0 ) | ( p16_pipe_valid_X1 );
  assign stage3_pipe_in_vld_d3_X = ( stage3_pipe_in_vld_d3_X0 ) | ( stage3_pipe_in_vld_d3_X1 );
  assign p16_pipe_ready_bc_X = ( p16_pipe_ready_bc_X0 ) | ( p16_pipe_ready_bc_X1 ) | ( p16_pipe_ready_bc_X2 );
  assign stage3_pipe_in_vld_d4_X = ( stage3_pipe_in_vld_d4_X0 );
  assign stage3_pipe_in_rdy_d3_X = ( stage3_pipe_in_rdy_d3_X0 );
  assign stage3_pipe_in_pd_d4_X = ( stage3_pipe_in_pd_d4_X0 );
  assign nvdla_core_clk_R = ( nvdla_core_clk_X0 & nvdla_core_clk_R0 );
  assign p16_pipe_data_R = ( p16_pipe_data_X0 & p16_pipe_data_R0 ) | ( p16_pipe_data_X1 & p16_pipe_data_R1 );
  assign stage3_pipe_in_pd_d3_R = ( stage3_pipe_in_pd_d3_X0 & stage3_pipe_in_pd_d3_R0 );
  assign _02__R = ( _02__X0 & _02__R0 );
  assign _01__R = ( _01__X0 & _01__R0 );
  assign _00__R = ( _00__X0 & _00__R0 );
  assign _03__R = ( _03__X0 & _03__R0 );
  assign stage3_pipe_in_rdy_d4_R = ( stage3_pipe_in_rdy_d4_X0 & stage3_pipe_in_rdy_d4_R0 ) | ( stage3_pipe_in_rdy_d4_X1 & stage3_pipe_in_rdy_d4_R1 );
  assign p16_pipe_valid_R = ( p16_pipe_valid_X0 & p16_pipe_valid_R0 ) | ( p16_pipe_valid_X1 & p16_pipe_valid_R1 );
  assign stage3_pipe_in_vld_d3_R = ( stage3_pipe_in_vld_d3_X0 & stage3_pipe_in_vld_d3_R0 ) | ( stage3_pipe_in_vld_d3_X1 & stage3_pipe_in_vld_d3_R1 );
  assign p16_pipe_ready_bc_R = ( p16_pipe_ready_bc_X0 & p16_pipe_ready_bc_R0 ) | ( p16_pipe_ready_bc_X1 & p16_pipe_ready_bc_R1 ) | ( p16_pipe_ready_bc_X2 & p16_pipe_ready_bc_R2 );
  assign stage3_pipe_in_vld_d4_R = ( stage3_pipe_in_vld_d4_X0 & stage3_pipe_in_vld_d4_R0 );
  assign stage3_pipe_in_rdy_d3_R = ( stage3_pipe_in_rdy_d3_X0 & stage3_pipe_in_rdy_d3_R0 );
  assign stage3_pipe_in_pd_d4_R = ( stage3_pipe_in_pd_d4_X0 & stage3_pipe_in_pd_d4_R0 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { p16_assert_clk_R , p16_assert_clk_C , p16_assert_clk_X , p16_pipe_ready_R , p16_pipe_ready_C , p16_pipe_ready_X  } = 0;
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) p16_pipe_data_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) p16_pipe_data_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) p16_pipe_data_PREV_VAL1 <= p16_pipe_data ;
    if( INSTR_IN_ZY ) p16_pipe_data_PREV_VAL2 <= p16_pipe_data_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) p16_pipe_valid_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) p16_pipe_valid_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) p16_pipe_valid_PREV_VAL1 <= p16_pipe_valid ;
    if( INSTR_IN_ZY ) p16_pipe_valid_PREV_VAL2 <= p16_pipe_valid_PREV_VAL1 ;
  end
 // ground taints for unused wire slices
  assert property( p16_pipe_data_r_flag == 0 || p16_pipe_data_PREV_VAL1 == p16_pipe_data_PREV_VAL2 );
  assert property( p16_pipe_valid_r_flag == 0 || p16_pipe_valid_PREV_VAL1 == p16_pipe_valid_PREV_VAL2 );
  assign rst_zy = !nvdla_core_rstn ;
endmodule
