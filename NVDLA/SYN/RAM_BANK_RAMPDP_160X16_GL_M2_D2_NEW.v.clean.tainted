  logic _00_;
  logic _00__T ;
  logic _00__R ;
  logic _00__C ;
  logic _00__X ;
  logic [13:0] _00__S ;
  logic [15:0] _01_;
  logic [15:0] _01__T ;
  logic [15:0] _01__R ;
  logic [15:0] _01__C ;
  logic [15:0] _01__X ;
  logic [13:0] _01__S ;
  logic _02_;
  logic _02__T ;
  logic _02__R ;
  logic _02__C ;
  logic _02__X ;
  logic [13:0] _02__S ;
  logic [15:0] _03_;
  logic [15:0] _03__T ;
  logic [15:0] _03__R ;
  logic [15:0] _03__C ;
  logic [15:0] _03__X ;
  logic [13:0] _03__S ;
  logic _04_;
  logic _04__T ;
  logic _04__R ;
  logic _04__C ;
  logic _04__X ;
  logic [13:0] _04__S ;
  logic _05_;
  logic _05__T ;
  logic _05__R ;
  logic _05__C ;
  logic _05__X ;
  logic [13:0] _05__S ;
  logic _06_;
  logic _06__T ;
  logic _06__R ;
  logic _06__C ;
  logic _06__X ;
  logic [13:0] _06__S ;
  logic _07_;
  logic _07__T ;
  logic _07__R ;
  logic _07__C ;
  logic _07__X ;
  logic [13:0] _07__S ;
  logic _08_;
  logic _08__T ;
  logic _08__R ;
  logic _08__C ;
  logic _08__X ;
  logic [13:0] _08__S ;
  logic _09_;
  logic _09__T ;
  logic _09__R ;
  logic _09__C ;
  logic _09__X ;
  logic [13:0] _09__S ;
  logic _10_;
  logic _10__T ;
  logic _10__R ;
  logic _10__C ;
  logic _10__X ;
  logic [13:0] _10__S ;
  logic _11_;
  logic _11__T ;
  logic _11__R ;
  logic _11__C ;
  logic _11__X ;
  logic [13:0] _11__S ;
  logic _12_;
  logic _12__T ;
  logic _12__R ;
  logic _12__C ;
  logic _12__X ;
  logic [13:0] _12__S ;
  logic _13_;
  logic _13__T ;
  logic _13__R ;
  logic _13__C ;
  logic _13__X ;
  logic [13:0] _13__S ;
  logic _14_;
  logic _14__T ;
  logic _14__R ;
  logic _14__C ;
  logic _14__X ;
  logic [13:0] _14__S ;
  logic _15_;
  logic _15__T ;
  logic _15__R ;
  logic _15__C ;
  logic _15__X ;
  logic [13:0] _15__S ;
  logic [7:0] _16_;
  logic [7:0] _16__T ;
  logic [7:0] _16__R ;
  logic [7:0] _16__C ;
  logic [7:0] _16__X ;
  logic [13:0] _16__S ;
  logic [7:0] _17_;
  logic [7:0] _17__T ;
  logic [7:0] _17__R ;
  logic [7:0] _17__C ;
  logic [7:0] _17__X ;
  logic [13:0] _17__S ;
  logic [15:0] _18_;
  logic [15:0] _18__T ;
  logic [15:0] _18__R ;
  logic [15:0] _18__C ;
  logic [15:0] _18__X ;
  logic [13:0] _18__S ;
  logic [15:0] _19_;
  logic [15:0] _19__T ;
  logic [15:0] _19__R ;
  logic [15:0] _19__C ;
  logic [15:0] _19__X ;
  logic [13:0] _19__S ;
  logic _20_;
  logic _20__T ;
  logic _20__R ;
  logic _20__C ;
  logic _20__X ;
  logic [13:0] _20__S ;
  logic _21_;
  logic _21__T ;
  logic _21__R ;
  logic _21__C ;
  logic _21__X ;
  logic [13:0] _21__S ;
  logic _22_;
  logic _22__T ;
  logic _22__R ;
  logic _22__C ;
  logic _22__X ;
  logic [13:0] _22__S ;
  logic _23_;
  logic _23__T ;
  logic _23__R ;
  logic _23__C ;
  logic _23__X ;
  logic [13:0] _23__S ;
  logic _24_;
  logic _24__T ;
  logic _24__R ;
  logic _24__C ;
  logic _24__X ;
  logic [13:0] _24__S ;
  logic _25_;
  logic _25__T ;
  logic _25__R ;
  logic _25__C ;
  logic _25__X ;
  logic [13:0] _25__S ;
  logic _26_;
  logic _26__T ;
  logic _26__R ;
  logic _26__C ;
  logic _26__X ;
  logic [13:0] _26__S ;
  logic _27_;
  logic _27__T ;
  logic _27__R ;
  logic _27__C ;
  logic _27__X ;
  logic [13:0] _27__S ;
  logic [15:0] _28_;
  logic [15:0] _28__T ;
  logic [15:0] _28__R ;
  logic [15:0] _28__C ;
  logic [15:0] _28__X ;
  logic [13:0] _28__S ;
  logic [15:0] _29_;
  logic [15:0] _29__T ;
  logic [15:0] _29__R ;
  logic [15:0] _29__C ;
  logic [15:0] _29__X ;
  logic [13:0] _29__S ;
  logic _30_;
  logic _30__T ;
  logic _30__R ;
  logic _30__C ;
  logic _30__X ;
  logic [13:0] _30__S ;
  logic [7:0] _31_;
  logic [7:0] _31__T ;
  logic [7:0] _31__R ;
  logic [7:0] _31__C ;
  logic [7:0] _31__X ;
  logic [13:0] _31__S ;
  logic [7:0] ADR;
  logic [7:0] ADR_T ;
  logic [7:0] ADR_R ;
  logic [7:0] ADR_C ;
  logic [7:0] ADR_X ;
  logic [13:0] ADR_S ;
  logic [15:0] BADBIT;
  logic [15:0] BADBIT_T ;
  logic [15:0] BADBIT_R ;
  logic [15:0] BADBIT_C ;
  logic [15:0] BADBIT_X ;
  logic [13:0] BADBIT_S ;
  logic CAPT_DIS;
  logic CAPT_DIS_T ;
  logic CAPT_DIS_R ;
  logic CAPT_DIS_C ;
  logic CAPT_DIS_X ;
  logic [13:0] CAPT_DIS_S ;
  logic CLAMPB;
  logic CLAMPB_T ;
  logic CLAMPB_R ;
  logic CLAMPB_C ;
  logic CLAMPB_X ;
  logic [13:0] CLAMPB_S ;
  input CLK;
  input CLK_T ;
  input [13:0] CLK_S ;
  output CLK_R ;
  output CLK_X ;
  output CLK_C ;
  input IDDQ;
  input IDDQ_T ;
  input [13:0] IDDQ_S ;
  output IDDQ_R ;
  output IDDQ_X ;
  output IDDQ_C ;
  logic [511:0] PDEC0;
  logic [511:0] PDEC0_T ;
  logic [511:0] PDEC0_R ;
  logic [511:0] PDEC0_C ;
  logic [511:0] PDEC0_X ;
  logic [13:0] PDEC0_S ;
  logic [511:0] PDEC1;
  logic [511:0] PDEC1_T ;
  logic [511:0] PDEC1_R ;
  logic [511:0] PDEC1_C ;
  logic [511:0] PDEC1_X ;
  logic [13:0] PDEC1_S ;
  logic [511:0] PDEC2;
  logic [511:0] PDEC2_T ;
  logic [511:0] PDEC2_R ;
  logic [511:0] PDEC2_C ;
  logic [511:0] PDEC2_X ;
  logic [13:0] PDEC2_S ;
  input [7:0] RA;
  input [7:0] RA_T ;
  input [13:0] RA_S ;
  output [7:0] RA_R ;
  output [7:0] RA_X ;
  output [7:0] RA_C ;
  logic [7:0] RADR;
  logic [7:0]  RADR_T ;
  logic [7:0]  RADR_PREV_VAL1 ;
  logic [7:0]  RADR_PREV_VAL2 ;
  logic [7:0]  RADR_R ;
  logic [7:0]  RADR_X ;
  logic [7:0]  RADR_C ;
  logic [13:0] RADR_S ;
  logic RADR_t_flag ;
  logic RADR_r_flag ;
  logic RADRCLK;
  logic RADRCLK_T ;
  logic RADRCLK_R ;
  logic RADRCLK_C ;
  logic RADRCLK_X ;
  logic [13:0] RADRCLK_S ;
  logic [7:0] RADRSWI;
  logic [7:0] RADRSWI_T ;
  logic [7:0] RADRSWI_R ;
  logic [7:0] RADRSWI_C ;
  logic [7:0] RADRSWI_X ;
  logic [13:0] RADRSWI_S ;
  output [15:0] RD;
  logic [15:0] RD ;
  output [15:0] RD_T ;
  logic [15:0] RD_T ;
  logic [15:0] RD_R ;
  logic [15:0] RD_C ;
  logic [15:0] RD_X ;
  logic [13:0] RD_S ;
  input [15:0] RD_R0 ;
  input [15:0] RD_C0 ;
  input [15:0] RD_X0 ;
  output [13:0] RD_S ;
  logic RDBYP;
  logic RDBYP_T ;
  logic RDBYP_R ;
  logic RDBYP_C ;
  logic RDBYP_X ;
  logic [13:0] RDBYP_S ;
  logic [15:0] RDBYPASS;
  logic [15:0] RDBYPASS_T ;
  logic [15:0] RDBYPASS_R ;
  logic [15:0] RDBYPASS_C ;
  logic [15:0] RDBYPASS_X ;
  logic [13:0] RDBYPASS_S ;
  input RE;
  input RE_T ;
  input [13:0] RE_S ;
  output RE_R ;
  output RE_X ;
  output RE_C ;
  logic RECLK;
  logic RECLK_T ;
  logic RECLK_R ;
  logic RECLK_C ;
  logic RECLK_X ;
  logic [13:0] RECLK_S ;
  input RET_EN;
  input RET_EN_T ;
  input [13:0] RET_EN_S ;
  output RET_EN_R ;
  output RET_EN_X ;
  output RET_EN_C ;
  logic RE_LATB;
  logic  RE_LATB_T ;
  logic  RE_LATB_PREV_VAL1 ;
  logic  RE_LATB_PREV_VAL2 ;
  logic  RE_LATB_R ;
  logic  RE_LATB_X ;
  logic  RE_LATB_C ;
  logic [13:0] RE_LATB_S ;
  logic RE_LATB_t_flag ;
  logic RE_LATB_r_flag ;
  logic RWSEL;
  logic RWSEL_T ;
  logic RWSEL_R ;
  logic RWSEL_C ;
  logic RWSEL_X ;
  logic [13:0] RWSEL_S ;
  logic RdClk0;
  logic RdClk0_T ;
  logic RdClk0_R ;
  logic RdClk0_C ;
  logic RdClk0_X ;
  logic [13:0] RdClk0_S ;
  logic RdClk1;
  logic RdClk1_T ;
  logic RdClk1_R ;
  logic RdClk1_C ;
  logic RdClk1_X ;
  logic [13:0] RdClk1_S ;
  logic [15:0] SHFT;
  logic [15:0] SHFT_T ;
  logic [15:0] SHFT_R ;
  logic [15:0] SHFT_C ;
  logic [15:0] SHFT_X ;
  logic [13:0] SHFT_S ;
  input [7:0] SLEEP_EN;
  input [7:0] SLEEP_EN_T ;
  input [13:0] SLEEP_EN_S ;
  output [7:0] SLEEP_EN_R ;
  output [7:0] SLEEP_EN_X ;
  output [7:0] SLEEP_EN_C ;
  input [7:0] SVOP;
  input [7:0] SVOP_T ;
  input [13:0] SVOP_S ;
  output [7:0] SVOP_R ;
  output [7:0] SVOP_X ;
  output [7:0] SVOP_C ;
  input [7:0] WA;
  input [7:0] WA_T ;
  input [13:0] WA_S ;
  output [7:0] WA_R ;
  output [7:0] WA_X ;
  output [7:0] WA_C ;
  logic WADRCLK;
  logic WADRCLK_T ;
  logic WADRCLK_R ;
  logic WADRCLK_C ;
  logic WADRCLK_X ;
  logic [13:0] WADRCLK_S ;
  logic [7:0] WAFF;
  logic [7:0]  WAFF_T ;
  logic [7:0]  WAFF_PREV_VAL1 ;
  logic [7:0]  WAFF_PREV_VAL2 ;
  logic [7:0]  WAFF_R ;
  logic [7:0]  WAFF_X ;
  logic [7:0]  WAFF_C ;
  logic [13:0] WAFF_S ;
  logic WAFF_t_flag ;
  logic WAFF_r_flag ;
  assign WAFF_S = 81 ;
  input [15:0] WD;
  input [15:0] WD_T ;
  input [13:0] WD_S ;
  output [15:0] WD_R ;
  output [15:0] WD_X ;
  output [15:0] WD_C ;
  logic [15:0] WDBQ;
  logic [15:0] WDBQ_T ;
  logic [15:0] WDBQ_R ;
  logic [15:0] WDBQ_C ;
  logic [15:0] WDBQ_X ;
  logic [13:0] WDBQ_S ;
  logic [15:0] WDBQ_pr;
  logic [15:0] WDBQ_pr_T ;
  logic [15:0] WDBQ_pr_R ;
  logic [15:0] WDBQ_pr_C ;
  logic [15:0] WDBQ_pr_X ;
  logic [13:0] WDBQ_pr_S ;
  logic [15:0] WDQ;
  logic [15:0] WDQ_T ;
  logic [15:0] WDQ_R ;
  logic [15:0] WDQ_C ;
  logic [15:0] WDQ_X ;
  logic [13:0] WDQ_S ;
  logic [15:0] WDQ_pr;
  logic [15:0]  WDQ_pr_T ;
  logic [15:0]  WDQ_pr_PREV_VAL1 ;
  logic [15:0]  WDQ_pr_PREV_VAL2 ;
  logic [15:0]  WDQ_pr_R ;
  logic [15:0]  WDQ_pr_X ;
  logic [15:0]  WDQ_pr_C ;
  logic [13:0] WDQ_pr_S ;
  logic WDQ_pr_t_flag ;
  logic WDQ_pr_r_flag ;
  assign WDQ_pr_S = 82 ;
  input WE;
  input WE_T ;
  input [13:0] WE_S ;
  output WE_R ;
  output WE_X ;
  output WE_C ;
  logic WECLK;
  logic WECLK_T ;
  logic WECLK_R ;
  logic WECLK_C ;
  logic WECLK_X ;
  logic [13:0] WECLK_S ;
  logic WE_FF;
  logic  WE_FF_T ;
  logic  WE_FF_PREV_VAL1 ;
  logic  WE_FF_PREV_VAL2 ;
  logic  WE_FF_R ;
  logic  WE_FF_X ;
  logic  WE_FF_C ;
  logic [13:0] WE_FF_S ;
  logic WE_FF_t_flag ;
  logic WE_FF_r_flag ;
  logic WE_LATB;
  logic  WE_LATB_T ;
  logic  WE_LATB_PREV_VAL1 ;
  logic  WE_LATB_PREV_VAL2 ;
  logic  WE_LATB_R ;
  logic  WE_LATB_X ;
  logic  WE_LATB_C ;
  logic [13:0] WE_LATB_S ;
  logic WE_LATB_t_flag ;
  logic WE_LATB_r_flag ;
  logic [15:0] WMNQ;
  logic [15:0] WMNQ_T ;
  logic [15:0] WMNQ_R ;
  logic [15:0] WMNQ_C ;
  logic [15:0] WMNQ_X ;
  logic [13:0] WMNQ_S ;
  logic [15:0] WMNexp;
  logic [15:0] WMNexp_T ;
  logic [15:0] WMNexp_R ;
  logic [15:0] WMNexp_C ;
  logic [15:0] WMNexp_X ;
  logic [13:0] WMNexp_S ;
  logic WRDCLK;
  logic WRDCLK_T ;
  logic WRDCLK_R ;
  logic WRDCLK_C ;
  logic WRDCLK_X ;
  logic [13:0] WRDCLK_S ;
  logic WrClk0;
  logic WrClk0_T ;
  logic WrClk0_R ;
  logic WrClk0_C ;
  logic WrClk0_X ;
  logic [13:0] WrClk0_S ;
  logic WrClk1;
  logic WrClk1_T ;
  logic WrClk1_R ;
  logic WrClk1_C ;
  logic WrClk1_X ;
  logic [13:0] WrClk1_S ;
  input clobber_array;
  input clobber_array_T ;
  input [13:0] clobber_array_S ;
  output clobber_array_R ;
  output clobber_array_X ;
  output clobber_array_C ;
  input clobber_flops;
  input clobber_flops_T ;
  input [13:0] clobber_flops_S ;
  output clobber_flops_R ;
  output clobber_flops_X ;
  output clobber_flops_C ;
  logic [15:0] dout;
  logic [15:0]  dout_T ;
  logic [15:0]  dout_PREV_VAL1 ;
  logic [15:0]  dout_PREV_VAL2 ;
  logic [15:0]  dout_R ;
  logic [15:0]  dout_X ;
  logic [15:0]  dout_C ;
  logic [13:0] dout_S ;
  logic dout_t_flag ;
  logic dout_r_flag ;
  logic [15:0] dout0;
  logic [15:0] dout0_T ;
  logic [15:0] dout0_R ;
  logic [15:0] dout0_C ;
  logic [15:0] dout0_X ;
  logic [13:0] dout0_S ;
  logic [15:0] dout1;
  logic [15:0] dout1_T ;
  logic [15:0] dout1_R ;
  logic [15:0] dout1_C ;
  logic [15:0] dout1_X ;
  logic [13:0] dout1_S ;
  logic empadd;
  logic empadd_T ;
  logic empadd_R ;
  logic empadd_C ;
  logic empadd_X ;
  logic [13:0] empadd_S ;
  logic [15:0] force_x;
  logic [15:0] force_x_T ;
  logic [15:0] force_x_R ;
  logic [15:0] force_x_C ;
  logic [15:0] force_x_X ;
  logic [13:0] force_x_S ;
  logic [7:0] fusePDEC0;
  logic [7:0] fusePDEC0_T ;
  logic [7:0] fusePDEC0_R ;
  logic [7:0] fusePDEC0_C ;
  logic [7:0] fusePDEC0_X ;
  logic [13:0] fusePDEC0_S ;
  logic [7:0] fusePDEC1;
  logic [7:0] fusePDEC1_T ;
  logic [7:0] fusePDEC1_R ;
  logic [7:0] fusePDEC1_C ;
  logic [7:0] fusePDEC1_X ;
  logic [13:0] fusePDEC1_S ;
  logic [7:0] fusePDEC2;
  logic [7:0] fusePDEC2_T ;
  logic [7:0] fusePDEC2_R ;
  logic [7:0] fusePDEC2_C ;
  logic [7:0] fusePDEC2_X ;
  logic [13:0] fusePDEC2_S ;
  logic fuseien;
  logic fuseien_T ;
  logic fuseien_R ;
  logic fuseien_C ;
  logic fuseien_X ;
  logic [13:0] fuseien_S ;
  logic latffclk;
  logic latffclk_T ;
  logic latffclk_R ;
  logic latffclk_C ;
  logic latffclk_X ;
  logic [13:0] latffclk_S ;
  logic legal;
  logic legal_T ;
  logic legal_R ;
  logic legal_C ;
  logic legal_X ;
  logic [13:0] legal_S ;
  logic re_se;
  logic re_se_T ;
  logic re_se_R ;
  logic re_se_C ;
  logic re_se_X ;
  logic [13:0] re_se_S ;
  logic [15:0] rmuxd0;
  logic [15:0] rmuxd0_T ;
  logic [15:0] rmuxd0_R ;
  logic [15:0] rmuxd0_C ;
  logic [15:0] rmuxd0_X ;
  logic [13:0] rmuxd0_S ;
  logic [15:0] rmuxd1;
  logic [15:0] rmuxd1_T ;
  logic [15:0] rmuxd1_R ;
  logic [15:0] rmuxd1_C ;
  logic [15:0] rmuxd1_X ;
  logic [13:0] rmuxd1_S ;
  logic [15:0] sel_normal;
  logic [15:0] sel_normal_T ;
  logic [15:0] sel_normal_R ;
  logic [15:0] sel_normal_C ;
  logic [15:0] sel_normal_X ;
  logic [13:0] sel_normal_S ;
  logic [15:0] sel_redun;
  logic [15:0] sel_redun_T ;
  logic [15:0] sel_redun_R ;
  logic [15:0] sel_redun_C ;
  logic [15:0] sel_redun_X ;
  logic [13:0] sel_redun_S ;
  logic tiedvalid;
  logic tiedvalid_T ;
  logic tiedvalid_R ;
  logic tiedvalid_C ;
  logic tiedvalid_X ;
  logic [13:0] tiedvalid_S ;
  logic we_se;
  logic we_se_T ;
  logic we_se_R ;
  logic we_se_C ;
  logic we_se_X ;
  logic [13:0] we_se_S ;
  assign RdClk0 = RECLK & _26_;
  assign RdClk0_S = 0 ;
  logic [0:0] RECLK_C0 ;
  logic [0:0] RECLK_R0 ;
  logic [0:0] RECLK_X0 ;
  logic [0:0] _26__C0 ;
  logic [0:0] _26__R0 ;
  logic [0:0] _26__X0 ;
  assign RdClk0_T = RECLK_T | _26__T ;
  assign RECLK_C0 = RdClk0_C ;
  assign RECLK_X0 = RdClk0_X ;
  assign _26__C0 = RdClk0_C ;
  assign _26__X0 = RdClk0_X ;
  assign RECLK_R0 = ( RdClk0_R | RdClk0_C & _26__T ) & { 1{ _26_ != 0 }} ;
  assign _26__R0 = ( RdClk0_R | RdClk0_C & RECLK_T ) & { 1{ RECLK != 0 }} ;
  assign RdClk1 = RECLK & RADR[0];
  assign RdClk1_S = 0 ;
  logic [0:0] RECLK_C1 ;
  logic [0:0] RECLK_R1 ;
  logic [0:0] RECLK_X1 ;
  logic [7:0] RADR_C0 ;
  logic [7:0] RADR_R0 ;
  logic [7:0] RADR_X0 ;
  assign RdClk1_T = RECLK_T | RADR_T [0] ;
  assign RECLK_C1 = RdClk1_C ;
  assign RECLK_X1 = RdClk1_X ;
  assign RADR_C0 [0] = RdClk1_C ;
  assign RADR_X0 [0] = RdClk1_X ;
  assign RECLK_R1 = ( RdClk1_R | RdClk1_C & RADR_T [0] ) & { 1{ RADR[0] != 0 }} ;
  assign RADR_R0 [0] = ( RdClk1_R | RdClk1_C & RECLK_T ) & { 1{ RECLK != 0 }} ;
  assign _04_ = WECLK & _27_;
  assign _04__S = 0 ;
  logic [0:0] WECLK_C0 ;
  logic [0:0] WECLK_R0 ;
  logic [0:0] WECLK_X0 ;
  logic [0:0] _27__C0 ;
  logic [0:0] _27__R0 ;
  logic [0:0] _27__X0 ;
  assign _04__T = WECLK_T | _27__T ;
  assign WECLK_C0 = _04__C ;
  assign WECLK_X0 = _04__X ;
  assign _27__C0 = _04__C ;
  assign _27__X0 = _04__X ;
  assign WECLK_R0 = ( _04__R | _04__C & _27__T ) & { 1{ _27_ != 0 }} ;
  assign _27__R0 = ( _04__R | _04__C & WECLK_T ) & { 1{ WECLK != 0 }} ;
  assign WrClk0 = _04_ & legal;
  assign WrClk0_S = 0 ;
  logic [0:0] _04__C0 ;
  logic [0:0] _04__R0 ;
  logic [0:0] _04__X0 ;
  logic [0:0] legal_C0 ;
  logic [0:0] legal_R0 ;
  logic [0:0] legal_X0 ;
  assign WrClk0_T = _04__T | legal_T ;
  assign _04__C0 = WrClk0_C ;
  assign _04__X0 = WrClk0_X ;
  assign legal_C0 = WrClk0_C ;
  assign legal_X0 = WrClk0_X ;
  assign _04__R0 = ( WrClk0_R | WrClk0_C & legal_T ) & { 1{ legal != 0 }} ;
  assign legal_R0 = ( WrClk0_R | WrClk0_C & _04__T ) & { 1{ _04_ != 0 }} ;
  assign _05_ = WECLK & WAFF[0];
  assign _05__S = 0 ;
  logic [0:0] WECLK_C1 ;
  logic [0:0] WECLK_R1 ;
  logic [0:0] WECLK_X1 ;
  logic [7:0] WAFF_C0 ;
  logic [7:0] WAFF_R0 ;
  logic [7:0] WAFF_X0 ;
  assign _05__T = WECLK_T | WAFF_T [0] ;
  assign WECLK_C1 = _05__C ;
  assign WECLK_X1 = _05__X ;
  assign WAFF_C0 [0] = _05__C ;
  assign WAFF_X0 [0] = _05__X ;
  assign WECLK_R1 = ( _05__R | _05__C & WAFF_T [0] ) & { 1{ WAFF[0] != 0 }} ;
  assign WAFF_R0 [0] = ( _05__R | _05__C & WECLK_T ) & { 1{ WECLK != 0 }} ;
  assign WrClk1 = _05_ & legal;
  assign WrClk1_S = 0 ;
  logic [0:0] _05__C0 ;
  logic [0:0] _05__R0 ;
  logic [0:0] _05__X0 ;
  logic [0:0] legal_C1 ;
  logic [0:0] legal_R1 ;
  logic [0:0] legal_X1 ;
  assign WrClk1_T = _05__T | legal_T ;
  assign _05__C0 = WrClk1_C ;
  assign _05__X0 = WrClk1_X ;
  assign legal_C1 = WrClk1_C ;
  assign legal_X1 = WrClk1_X ;
  assign _05__R0 = ( WrClk1_R | WrClk1_C & legal_T ) & { 1{ legal != 0 }} ;
  assign legal_R1 = ( WrClk1_R | WrClk1_C & _05__T ) & { 1{ _05_ != 0 }} ;
  logic [15:0] fangyuan0;
  logic [15:0] fangyuan0_T ;
  logic [15:0] fangyuan0_R ;
  logic [15:0] fangyuan0_C ;
  logic [15:0] fangyuan0_X ;
  assign fangyuan0 = { RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0 };
  assign fangyuan0_T = {  RdClk0_T , RdClk0_T , RdClk0_T , RdClk0_T , RdClk0_T , RdClk0_T , RdClk0_T , RdClk0_T , RdClk0_T , RdClk0_T , RdClk0_T , RdClk0_T , RdClk0_T , RdClk0_T , RdClk0_T , RdClk0_T  };
  logic [13:0] fangyuan0_S ;
  assign fangyuan0_S = 0 ;
  logic [0:0] RdClk0_R0 ;
  logic [0:0] RdClk0_X0 ;
  logic [0:0] RdClk0_C0 ;
  assign RdClk0_R0 = fangyuan0_R [15:15] ;
  assign RdClk0_X0 = fangyuan0_X [15:15] ;
  assign RdClk0_C0 = fangyuan0_C [15:15] ;
  logic [0:0] RdClk0_R1 ;
  logic [0:0] RdClk0_X1 ;
  logic [0:0] RdClk0_C1 ;
  assign RdClk0_R1 = fangyuan0_R [14:14] ;
  assign RdClk0_X1 = fangyuan0_X [14:14] ;
  assign RdClk0_C1 = fangyuan0_C [14:14] ;
  logic [0:0] RdClk0_R2 ;
  logic [0:0] RdClk0_X2 ;
  logic [0:0] RdClk0_C2 ;
  assign RdClk0_R2 = fangyuan0_R [13:13] ;
  assign RdClk0_X2 = fangyuan0_X [13:13] ;
  assign RdClk0_C2 = fangyuan0_C [13:13] ;
  logic [0:0] RdClk0_R3 ;
  logic [0:0] RdClk0_X3 ;
  logic [0:0] RdClk0_C3 ;
  assign RdClk0_R3 = fangyuan0_R [12:12] ;
  assign RdClk0_X3 = fangyuan0_X [12:12] ;
  assign RdClk0_C3 = fangyuan0_C [12:12] ;
  logic [0:0] RdClk0_R4 ;
  logic [0:0] RdClk0_X4 ;
  logic [0:0] RdClk0_C4 ;
  assign RdClk0_R4 = fangyuan0_R [11:11] ;
  assign RdClk0_X4 = fangyuan0_X [11:11] ;
  assign RdClk0_C4 = fangyuan0_C [11:11] ;
  logic [0:0] RdClk0_R5 ;
  logic [0:0] RdClk0_X5 ;
  logic [0:0] RdClk0_C5 ;
  assign RdClk0_R5 = fangyuan0_R [10:10] ;
  assign RdClk0_X5 = fangyuan0_X [10:10] ;
  assign RdClk0_C5 = fangyuan0_C [10:10] ;
  logic [0:0] RdClk0_R6 ;
  logic [0:0] RdClk0_X6 ;
  logic [0:0] RdClk0_C6 ;
  assign RdClk0_R6 = fangyuan0_R [9:9] ;
  assign RdClk0_X6 = fangyuan0_X [9:9] ;
  assign RdClk0_C6 = fangyuan0_C [9:9] ;
  logic [0:0] RdClk0_R7 ;
  logic [0:0] RdClk0_X7 ;
  logic [0:0] RdClk0_C7 ;
  assign RdClk0_R7 = fangyuan0_R [8:8] ;
  assign RdClk0_X7 = fangyuan0_X [8:8] ;
  assign RdClk0_C7 = fangyuan0_C [8:8] ;
  logic [0:0] RdClk0_R8 ;
  logic [0:0] RdClk0_X8 ;
  logic [0:0] RdClk0_C8 ;
  assign RdClk0_R8 = fangyuan0_R [7:7] ;
  assign RdClk0_X8 = fangyuan0_X [7:7] ;
  assign RdClk0_C8 = fangyuan0_C [7:7] ;
  logic [0:0] RdClk0_R9 ;
  logic [0:0] RdClk0_X9 ;
  logic [0:0] RdClk0_C9 ;
  assign RdClk0_R9 = fangyuan0_R [6:6] ;
  assign RdClk0_X9 = fangyuan0_X [6:6] ;
  assign RdClk0_C9 = fangyuan0_C [6:6] ;
  logic [0:0] RdClk0_R10 ;
  logic [0:0] RdClk0_X10 ;
  logic [0:0] RdClk0_C10 ;
  assign RdClk0_R10 = fangyuan0_R [5:5] ;
  assign RdClk0_X10 = fangyuan0_X [5:5] ;
  assign RdClk0_C10 = fangyuan0_C [5:5] ;
  logic [0:0] RdClk0_R11 ;
  logic [0:0] RdClk0_X11 ;
  logic [0:0] RdClk0_C11 ;
  assign RdClk0_R11 = fangyuan0_R [4:4] ;
  assign RdClk0_X11 = fangyuan0_X [4:4] ;
  assign RdClk0_C11 = fangyuan0_C [4:4] ;
  logic [0:0] RdClk0_R12 ;
  logic [0:0] RdClk0_X12 ;
  logic [0:0] RdClk0_C12 ;
  assign RdClk0_R12 = fangyuan0_R [3:3] ;
  assign RdClk0_X12 = fangyuan0_X [3:3] ;
  assign RdClk0_C12 = fangyuan0_C [3:3] ;
  logic [0:0] RdClk0_R13 ;
  logic [0:0] RdClk0_X13 ;
  logic [0:0] RdClk0_C13 ;
  assign RdClk0_R13 = fangyuan0_R [2:2] ;
  assign RdClk0_X13 = fangyuan0_X [2:2] ;
  assign RdClk0_C13 = fangyuan0_C [2:2] ;
  logic [0:0] RdClk0_R14 ;
  logic [0:0] RdClk0_X14 ;
  logic [0:0] RdClk0_C14 ;
  assign RdClk0_R14 = fangyuan0_R [1:1] ;
  assign RdClk0_X14 = fangyuan0_X [1:1] ;
  assign RdClk0_C14 = fangyuan0_C [1:1] ;
  logic [0:0] RdClk0_R15 ;
  logic [0:0] RdClk0_X15 ;
  logic [0:0] RdClk0_C15 ;
  assign RdClk0_R15 = fangyuan0_R [0:0] ;
  assign RdClk0_X15 = fangyuan0_X [0:0] ;
  assign RdClk0_C15 = fangyuan0_C [0:0] ;

  assign rmuxd0 = fangyuan0 & _28_;
  assign rmuxd0_S = 0 ;
  logic [15:0] fangyuan0_C0 ;
  logic [15:0] fangyuan0_R0 ;
  logic [15:0] fangyuan0_X0 ;
  logic [15:0] _28__C0 ;
  logic [15:0] _28__R0 ;
  logic [15:0] _28__X0 ;
  assign rmuxd0_T = fangyuan0_T | _28__T ;
  assign fangyuan0_C0 = rmuxd0_C ;
  assign fangyuan0_X0 = rmuxd0_X ;
  assign _28__C0 = rmuxd0_C ;
  assign _28__X0 = rmuxd0_X ;
  assign fangyuan0_R0 = ( rmuxd0_R | rmuxd0_C & _28__T ) & { 16{ _28_ != 0 }} ;
  assign _28__R0 = ( rmuxd0_R | rmuxd0_C & fangyuan0_T ) & { 16{ fangyuan0 != 0 }} ;
  logic [15:0] fangyuan1;
  logic [15:0] fangyuan1_T ;
  logic [15:0] fangyuan1_R ;
  logic [15:0] fangyuan1_C ;
  logic [15:0] fangyuan1_X ;
  assign fangyuan1 = { RdClk1, RdClk1, RdClk1, RdClk1, RdClk1, RdClk1, RdClk1, RdClk1, RdClk1, RdClk1, RdClk1, RdClk1, RdClk1, RdClk1, RdClk1, RdClk1 };
  assign fangyuan1_T = {  RdClk1_T , RdClk1_T , RdClk1_T , RdClk1_T , RdClk1_T , RdClk1_T , RdClk1_T , RdClk1_T , RdClk1_T , RdClk1_T , RdClk1_T , RdClk1_T , RdClk1_T , RdClk1_T , RdClk1_T , RdClk1_T  };
  logic [13:0] fangyuan1_S ;
  assign fangyuan1_S = 0 ;
  logic [0:0] RdClk1_R0 ;
  logic [0:0] RdClk1_X0 ;
  logic [0:0] RdClk1_C0 ;
  assign RdClk1_R0 = fangyuan1_R [15:15] ;
  assign RdClk1_X0 = fangyuan1_X [15:15] ;
  assign RdClk1_C0 = fangyuan1_C [15:15] ;
  logic [0:0] RdClk1_R1 ;
  logic [0:0] RdClk1_X1 ;
  logic [0:0] RdClk1_C1 ;
  assign RdClk1_R1 = fangyuan1_R [14:14] ;
  assign RdClk1_X1 = fangyuan1_X [14:14] ;
  assign RdClk1_C1 = fangyuan1_C [14:14] ;
  logic [0:0] RdClk1_R2 ;
  logic [0:0] RdClk1_X2 ;
  logic [0:0] RdClk1_C2 ;
  assign RdClk1_R2 = fangyuan1_R [13:13] ;
  assign RdClk1_X2 = fangyuan1_X [13:13] ;
  assign RdClk1_C2 = fangyuan1_C [13:13] ;
  logic [0:0] RdClk1_R3 ;
  logic [0:0] RdClk1_X3 ;
  logic [0:0] RdClk1_C3 ;
  assign RdClk1_R3 = fangyuan1_R [12:12] ;
  assign RdClk1_X3 = fangyuan1_X [12:12] ;
  assign RdClk1_C3 = fangyuan1_C [12:12] ;
  logic [0:0] RdClk1_R4 ;
  logic [0:0] RdClk1_X4 ;
  logic [0:0] RdClk1_C4 ;
  assign RdClk1_R4 = fangyuan1_R [11:11] ;
  assign RdClk1_X4 = fangyuan1_X [11:11] ;
  assign RdClk1_C4 = fangyuan1_C [11:11] ;
  logic [0:0] RdClk1_R5 ;
  logic [0:0] RdClk1_X5 ;
  logic [0:0] RdClk1_C5 ;
  assign RdClk1_R5 = fangyuan1_R [10:10] ;
  assign RdClk1_X5 = fangyuan1_X [10:10] ;
  assign RdClk1_C5 = fangyuan1_C [10:10] ;
  logic [0:0] RdClk1_R6 ;
  logic [0:0] RdClk1_X6 ;
  logic [0:0] RdClk1_C6 ;
  assign RdClk1_R6 = fangyuan1_R [9:9] ;
  assign RdClk1_X6 = fangyuan1_X [9:9] ;
  assign RdClk1_C6 = fangyuan1_C [9:9] ;
  logic [0:0] RdClk1_R7 ;
  logic [0:0] RdClk1_X7 ;
  logic [0:0] RdClk1_C7 ;
  assign RdClk1_R7 = fangyuan1_R [8:8] ;
  assign RdClk1_X7 = fangyuan1_X [8:8] ;
  assign RdClk1_C7 = fangyuan1_C [8:8] ;
  logic [0:0] RdClk1_R8 ;
  logic [0:0] RdClk1_X8 ;
  logic [0:0] RdClk1_C8 ;
  assign RdClk1_R8 = fangyuan1_R [7:7] ;
  assign RdClk1_X8 = fangyuan1_X [7:7] ;
  assign RdClk1_C8 = fangyuan1_C [7:7] ;
  logic [0:0] RdClk1_R9 ;
  logic [0:0] RdClk1_X9 ;
  logic [0:0] RdClk1_C9 ;
  assign RdClk1_R9 = fangyuan1_R [6:6] ;
  assign RdClk1_X9 = fangyuan1_X [6:6] ;
  assign RdClk1_C9 = fangyuan1_C [6:6] ;
  logic [0:0] RdClk1_R10 ;
  logic [0:0] RdClk1_X10 ;
  logic [0:0] RdClk1_C10 ;
  assign RdClk1_R10 = fangyuan1_R [5:5] ;
  assign RdClk1_X10 = fangyuan1_X [5:5] ;
  assign RdClk1_C10 = fangyuan1_C [5:5] ;
  logic [0:0] RdClk1_R11 ;
  logic [0:0] RdClk1_X11 ;
  logic [0:0] RdClk1_C11 ;
  assign RdClk1_R11 = fangyuan1_R [4:4] ;
  assign RdClk1_X11 = fangyuan1_X [4:4] ;
  assign RdClk1_C11 = fangyuan1_C [4:4] ;
  logic [0:0] RdClk1_R12 ;
  logic [0:0] RdClk1_X12 ;
  logic [0:0] RdClk1_C12 ;
  assign RdClk1_R12 = fangyuan1_R [3:3] ;
  assign RdClk1_X12 = fangyuan1_X [3:3] ;
  assign RdClk1_C12 = fangyuan1_C [3:3] ;
  logic [0:0] RdClk1_R13 ;
  logic [0:0] RdClk1_X13 ;
  logic [0:0] RdClk1_C13 ;
  assign RdClk1_R13 = fangyuan1_R [2:2] ;
  assign RdClk1_X13 = fangyuan1_X [2:2] ;
  assign RdClk1_C13 = fangyuan1_C [2:2] ;
  logic [0:0] RdClk1_R14 ;
  logic [0:0] RdClk1_X14 ;
  logic [0:0] RdClk1_C14 ;
  assign RdClk1_R14 = fangyuan1_R [1:1] ;
  assign RdClk1_X14 = fangyuan1_X [1:1] ;
  assign RdClk1_C14 = fangyuan1_C [1:1] ;
  logic [0:0] RdClk1_R15 ;
  logic [0:0] RdClk1_X15 ;
  logic [0:0] RdClk1_C15 ;
  assign RdClk1_R15 = fangyuan1_R [0:0] ;
  assign RdClk1_X15 = fangyuan1_X [0:0] ;
  assign RdClk1_C15 = fangyuan1_C [0:0] ;

  assign rmuxd1 = fangyuan1 & _29_;
  assign rmuxd1_S = 0 ;
  logic [15:0] fangyuan1_C0 ;
  logic [15:0] fangyuan1_R0 ;
  logic [15:0] fangyuan1_X0 ;
  logic [15:0] _29__C0 ;
  logic [15:0] _29__R0 ;
  logic [15:0] _29__X0 ;
  assign rmuxd1_T = fangyuan1_T | _29__T ;
  assign fangyuan1_C0 = rmuxd1_C ;
  assign fangyuan1_X0 = rmuxd1_X ;
  assign _29__C0 = rmuxd1_C ;
  assign _29__X0 = rmuxd1_X ;
  assign fangyuan1_R0 = ( rmuxd1_R | rmuxd1_C & _29__T ) & { 16{ _29_ != 0 }} ;
  assign _29__R0 = ( rmuxd1_R | rmuxd1_C & fangyuan1_T ) & { 16{ fangyuan1 != 0 }} ;
  assign _06_ = _22_ & _23_;
  assign _06__S = 0 ;
  logic [0:0] _22__C0 ;
  logic [0:0] _22__R0 ;
  logic [0:0] _22__X0 ;
  logic [0:0] _23__C0 ;
  logic [0:0] _23__R0 ;
  logic [0:0] _23__X0 ;
  assign _06__T = _22__T | _23__T ;
  assign _22__C0 = _06__C ;
  assign _22__X0 = _06__X ;
  assign _23__C0 = _06__C ;
  assign _23__X0 = _06__X ;
  assign _22__R0 = ( _06__R | _06__C & _23__T ) & { 1{ _23_ != 0 }} ;
  assign _23__R0 = ( _06__R | _06__C & _22__T ) & { 1{ _22_ != 0 }} ;
  assign _07_ = CLK & _23_;
  assign _07__S = 0 ;
  logic [0:0] CLK_C0 ;
  logic [0:0] CLK_R0 ;
  logic [0:0] CLK_X0 ;
  logic [0:0] _23__C1 ;
  logic [0:0] _23__R1 ;
  logic [0:0] _23__X1 ;
  assign _07__T = CLK_T | _23__T ;
  assign CLK_C0 = _07__C ;
  assign CLK_X0 = _07__X ;
  assign _23__C1 = _07__C ;
  assign _23__X1 = _07__X ;
  assign CLK_R0 = ( _07__R | _07__C & _23__T ) & { 1{ _23_ != 0 }} ;
  assign _23__R1 = ( _07__R | _07__C & CLK_T ) & { 1{ CLK != 0 }} ;
  assign _08_ = we_se & CLK;
  assign _08__S = 0 ;
  logic [0:0] we_se_C0 ;
  logic [0:0] we_se_R0 ;
  logic [0:0] we_se_X0 ;
  logic [0:0] CLK_C1 ;
  logic [0:0] CLK_R1 ;
  logic [0:0] CLK_X1 ;
  assign _08__T = we_se_T | CLK_T ;
  assign we_se_C0 = _08__C ;
  assign we_se_X0 = _08__X ;
  assign CLK_C1 = _08__C ;
  assign CLK_X1 = _08__X ;
  assign we_se_R0 = ( _08__R | _08__C & CLK_T ) & { 1{ CLK != 0 }} ;
  assign CLK_R1 = ( _08__R | _08__C & we_se_T ) & { 1{ we_se != 0 }} ;
  assign WADRCLK = _08_ & _23_;
  assign WADRCLK_S = 0 ;
  logic [0:0] _08__C0 ;
  logic [0:0] _08__R0 ;
  logic [0:0] _08__X0 ;
  logic [0:0] _23__C2 ;
  logic [0:0] _23__R2 ;
  logic [0:0] _23__X2 ;
  assign WADRCLK_T = _08__T | _23__T ;
  assign _08__C0 = WADRCLK_C ;
  assign _08__X0 = WADRCLK_X ;
  assign _23__C2 = WADRCLK_C ;
  assign _23__X2 = WADRCLK_X ;
  assign _08__R0 = ( WADRCLK_R | WADRCLK_C & _23__T ) & { 1{ _23_ != 0 }} ;
  assign _23__R2 = ( WADRCLK_R | WADRCLK_C & _08__T ) & { 1{ _08_ != 0 }} ;
  assign RADRCLK = re_se & CLK;
  assign RADRCLK_S = 0 ;
  logic [0:0] re_se_C0 ;
  logic [0:0] re_se_R0 ;
  logic [0:0] re_se_X0 ;
  logic [0:0] CLK_C2 ;
  logic [0:0] CLK_R2 ;
  logic [0:0] CLK_X2 ;
  assign RADRCLK_T = re_se_T | CLK_T ;
  assign re_se_C0 = RADRCLK_C ;
  assign re_se_X0 = RADRCLK_X ;
  assign CLK_C2 = RADRCLK_C ;
  assign CLK_X2 = RADRCLK_X ;
  assign re_se_R0 = ( RADRCLK_R | RADRCLK_C & CLK_T ) & { 1{ CLK != 0 }} ;
  assign CLK_R2 = ( RADRCLK_R | RADRCLK_C & re_se_T ) & { 1{ re_se != 0 }} ;
  assign _09_ = re_se & CLAMPB;
  assign _09__S = 0 ;
  logic [0:0] re_se_C1 ;
  logic [0:0] re_se_R1 ;
  logic [0:0] re_se_X1 ;
  logic [0:0] CLAMPB_C0 ;
  logic [0:0] CLAMPB_R0 ;
  logic [0:0] CLAMPB_X0 ;
  assign _09__T = re_se_T | CLAMPB_T ;
  assign re_se_C1 = _09__C ;
  assign re_se_X1 = _09__X ;
  assign CLAMPB_C0 = _09__C ;
  assign CLAMPB_X0 = _09__X ;
  assign re_se_R1 = ( _09__R | _09__C & CLAMPB_T ) & { 1{ CLAMPB != 0 }} ;
  assign CLAMPB_R0 = ( _09__R | _09__C & re_se_T ) & { 1{ re_se != 0 }} ;
  assign _10_ = _09_ & _23_;
  assign _10__S = 0 ;
  logic [0:0] _09__C0 ;
  logic [0:0] _09__R0 ;
  logic [0:0] _09__X0 ;
  logic [0:0] _23__C3 ;
  logic [0:0] _23__R3 ;
  logic [0:0] _23__X3 ;
  assign _10__T = _09__T | _23__T ;
  assign _09__C0 = _10__C ;
  assign _09__X0 = _10__X ;
  assign _23__C3 = _10__C ;
  assign _23__X3 = _10__X ;
  assign _09__R0 = ( _10__R | _10__C & _23__T ) & { 1{ _23_ != 0 }} ;
  assign _23__R3 = ( _10__R | _10__C & _09__T ) & { 1{ _09_ != 0 }} ;
  assign _11_ = _10_ & _24_;
  assign _11__S = 0 ;
  logic [0:0] _10__C0 ;
  logic [0:0] _10__R0 ;
  logic [0:0] _10__X0 ;
  logic [0:0] _24__C0 ;
  logic [0:0] _24__R0 ;
  logic [0:0] _24__X0 ;
  assign _11__T = _10__T | _24__T ;
  assign _10__C0 = _11__C ;
  assign _10__X0 = _11__X ;
  assign _24__C0 = _11__C ;
  assign _24__X0 = _11__X ;
  assign _10__R0 = ( _11__R | _11__C & _24__T ) & { 1{ _24_ != 0 }} ;
  assign _24__R0 = ( _11__R | _11__C & _10__T ) & { 1{ _10_ != 0 }} ;
  assign RECLK = _11_ & CLK;
  assign RECLK_S = 0 ;
  logic [0:0] _11__C0 ;
  logic [0:0] _11__R0 ;
  logic [0:0] _11__X0 ;
  logic [0:0] CLK_C3 ;
  logic [0:0] CLK_R3 ;
  logic [0:0] CLK_X3 ;
  assign RECLK_T = _11__T | CLK_T ;
  assign _11__C0 = RECLK_C ;
  assign _11__X0 = RECLK_X ;
  assign CLK_C3 = RECLK_C ;
  assign CLK_X3 = RECLK_X ;
  assign _11__R0 = ( RECLK_R | RECLK_C & CLK_T ) & { 1{ CLK != 0 }} ;
  assign CLK_R3 = ( RECLK_R | RECLK_C & _11__T ) & { 1{ _11_ != 0 }} ;
  assign _12_ = WE_FF & CLAMPB;
  assign _12__S = 0 ;
  logic [0:0] WE_FF_C0 ;
  logic [0:0] WE_FF_R0 ;
  logic [0:0] WE_FF_X0 ;
  logic [0:0] CLAMPB_C1 ;
  logic [0:0] CLAMPB_R1 ;
  logic [0:0] CLAMPB_X1 ;
  assign _12__T = WE_FF_T | CLAMPB_T ;
  assign WE_FF_C0 = _12__C ;
  assign WE_FF_X0 = _12__X ;
  assign CLAMPB_C1 = _12__C ;
  assign CLAMPB_X1 = _12__X ;
  assign WE_FF_R0 = ( _12__R | _12__C & CLAMPB_T ) & { 1{ CLAMPB != 0 }} ;
  assign CLAMPB_R1 = ( _12__R | _12__C & WE_FF_T ) & { 1{ WE_FF != 0 }} ;
  assign _13_ = _12_ & _23_;
  assign _13__S = 0 ;
  logic [0:0] _12__C0 ;
  logic [0:0] _12__R0 ;
  logic [0:0] _12__X0 ;
  logic [0:0] _23__C4 ;
  logic [0:0] _23__R4 ;
  logic [0:0] _23__X4 ;
  assign _13__T = _12__T | _23__T ;
  assign _12__C0 = _13__C ;
  assign _12__X0 = _13__X ;
  assign _23__C4 = _13__C ;
  assign _23__X4 = _13__X ;
  assign _12__R0 = ( _13__R | _13__C & _23__T ) & { 1{ _23_ != 0 }} ;
  assign _23__R4 = ( _13__R | _13__C & _12__T ) & { 1{ _12_ != 0 }} ;
  assign _14_ = _13_ & _24_;
  assign _14__S = 0 ;
  logic [0:0] _13__C0 ;
  logic [0:0] _13__R0 ;
  logic [0:0] _13__X0 ;
  logic [0:0] _24__C1 ;
  logic [0:0] _24__R1 ;
  logic [0:0] _24__X1 ;
  assign _14__T = _13__T | _24__T ;
  assign _13__C0 = _14__C ;
  assign _13__X0 = _14__X ;
  assign _24__C1 = _14__C ;
  assign _24__X1 = _14__X ;
  assign _13__R0 = ( _14__R | _14__C & _24__T ) & { 1{ _24_ != 0 }} ;
  assign _24__R1 = ( _14__R | _14__C & _13__T ) & { 1{ _13_ != 0 }} ;
  assign WECLK = _14_ & _30_;
  assign WECLK_S = 0 ;
  logic [0:0] _14__C0 ;
  logic [0:0] _14__R0 ;
  logic [0:0] _14__X0 ;
  logic [0:0] _30__C0 ;
  logic [0:0] _30__R0 ;
  logic [0:0] _30__X0 ;
  assign WECLK_T = _14__T | _30__T ;
  assign _14__C0 = WECLK_C ;
  assign _14__X0 = WECLK_X ;
  assign _30__C0 = WECLK_C ;
  assign _30__X0 = WECLK_X ;
  assign _14__R0 = ( WECLK_R | WECLK_C & _30__T ) & { 1{ _30_ != 0 }} ;
  assign _30__R0 = ( WECLK_R | WECLK_C & _14__T ) & { 1{ _14_ != 0 }} ;
  assign RWSEL = _12_ & _30_;
  assign RWSEL_S = 0 ;
  logic [0:0] _12__C1 ;
  logic [0:0] _12__R1 ;
  logic [0:0] _12__X1 ;
  logic [0:0] _30__C1 ;
  logic [0:0] _30__R1 ;
  logic [0:0] _30__X1 ;
  assign RWSEL_T = _12__T | _30__T ;
  assign _12__C1 = RWSEL_C ;
  assign _12__X1 = RWSEL_X ;
  assign _30__C1 = RWSEL_C ;
  assign _30__X1 = RWSEL_X ;
  assign _12__R1 = ( RWSEL_R | RWSEL_C & _30__T ) & { 1{ _30_ != 0 }} ;
  assign _30__R1 = ( RWSEL_R | RWSEL_C & _12__T ) & { 1{ _12_ != 0 }} ;
  assign _15_ = _25_ & _23_;
  assign _15__S = 0 ;
  logic [0:0] _25__C0 ;
  logic [0:0] _25__R0 ;
  logic [0:0] _25__X0 ;
  logic [0:0] _23__C5 ;
  logic [0:0] _23__R5 ;
  logic [0:0] _23__X5 ;
  assign _15__T = _25__T | _23__T ;
  assign _25__C0 = _15__C ;
  assign _25__X0 = _15__X ;
  assign _23__C5 = _15__C ;
  assign _23__X5 = _15__X ;
  assign _25__R0 = ( _15__R | _15__C & _23__T ) & { 1{ _23_ != 0 }} ;
  assign _23__R5 = ( _15__R | _15__C & _25__T ) & { 1{ _25_ != 0 }} ;
  logic [7:0] fangyuan2;
  logic [7:0] fangyuan2_T ;
  logic [7:0] fangyuan2_R ;
  logic [7:0] fangyuan2_C ;
  logic [7:0] fangyuan2_X ;
  assign fangyuan2 = { RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL };
  assign fangyuan2_T = {  RWSEL_T , RWSEL_T , RWSEL_T , RWSEL_T , RWSEL_T , RWSEL_T , RWSEL_T , RWSEL_T  };
  logic [13:0] fangyuan2_S ;
  assign fangyuan2_S = 0 ;
  logic [0:0] RWSEL_R0 ;
  logic [0:0] RWSEL_X0 ;
  logic [0:0] RWSEL_C0 ;
  assign RWSEL_R0 = fangyuan2_R [7:7] ;
  assign RWSEL_X0 = fangyuan2_X [7:7] ;
  assign RWSEL_C0 = fangyuan2_C [7:7] ;
  logic [0:0] RWSEL_R1 ;
  logic [0:0] RWSEL_X1 ;
  logic [0:0] RWSEL_C1 ;
  assign RWSEL_R1 = fangyuan2_R [6:6] ;
  assign RWSEL_X1 = fangyuan2_X [6:6] ;
  assign RWSEL_C1 = fangyuan2_C [6:6] ;
  logic [0:0] RWSEL_R2 ;
  logic [0:0] RWSEL_X2 ;
  logic [0:0] RWSEL_C2 ;
  assign RWSEL_R2 = fangyuan2_R [5:5] ;
  assign RWSEL_X2 = fangyuan2_X [5:5] ;
  assign RWSEL_C2 = fangyuan2_C [5:5] ;
  logic [0:0] RWSEL_R3 ;
  logic [0:0] RWSEL_X3 ;
  logic [0:0] RWSEL_C3 ;
  assign RWSEL_R3 = fangyuan2_R [4:4] ;
  assign RWSEL_X3 = fangyuan2_X [4:4] ;
  assign RWSEL_C3 = fangyuan2_C [4:4] ;
  logic [0:0] RWSEL_R4 ;
  logic [0:0] RWSEL_X4 ;
  logic [0:0] RWSEL_C4 ;
  assign RWSEL_R4 = fangyuan2_R [3:3] ;
  assign RWSEL_X4 = fangyuan2_X [3:3] ;
  assign RWSEL_C4 = fangyuan2_C [3:3] ;
  logic [0:0] RWSEL_R5 ;
  logic [0:0] RWSEL_X5 ;
  logic [0:0] RWSEL_C5 ;
  assign RWSEL_R5 = fangyuan2_R [2:2] ;
  assign RWSEL_X5 = fangyuan2_X [2:2] ;
  assign RWSEL_C5 = fangyuan2_C [2:2] ;
  logic [0:0] RWSEL_R6 ;
  logic [0:0] RWSEL_X6 ;
  logic [0:0] RWSEL_C6 ;
  assign RWSEL_R6 = fangyuan2_R [1:1] ;
  assign RWSEL_X6 = fangyuan2_X [1:1] ;
  assign RWSEL_C6 = fangyuan2_C [1:1] ;
  logic [0:0] RWSEL_R7 ;
  logic [0:0] RWSEL_X7 ;
  logic [0:0] RWSEL_C7 ;
  assign RWSEL_R7 = fangyuan2_R [0:0] ;
  assign RWSEL_X7 = fangyuan2_X [0:0] ;
  assign RWSEL_C7 = fangyuan2_C [0:0] ;

  assign _16_ = fangyuan2 & WAFF;
  assign _16__S = 0 ;
  assign { WAFF_R0 [7:1] } = 0;
  assign { WAFF_X0 [7:1] } = 0;
  assign { WAFF_C0 [7:1] } = 0;
  logic [7:0] fangyuan2_C0 ;
  logic [7:0] fangyuan2_R0 ;
  logic [7:0] fangyuan2_X0 ;
  logic [7:0] WAFF_C1 ;
  logic [7:0] WAFF_R1 ;
  logic [7:0] WAFF_X1 ;
  assign _16__T = fangyuan2_T | WAFF_T ;
  assign fangyuan2_C0 = _16__C ;
  assign fangyuan2_X0 = _16__X ;
  assign WAFF_C1 = _16__C ;
  assign WAFF_X1 = _16__X ;
  assign fangyuan2_R0 = ( _16__R | _16__C & WAFF_T ) & { 8{ WAFF != 0 }} ;
  assign WAFF_R1 = ( _16__R | _16__C & fangyuan2_T ) & { 8{ fangyuan2 != 0 }} ;
  assign _17_ = _31_ & RADR;
  assign _17__S = 0 ;
  assign { RADR_R0 [7:1] } = 0;
  assign { RADR_X0 [7:1] } = 0;
  assign { RADR_C0 [7:1] } = 0;
  logic [7:0] _31__C0 ;
  logic [7:0] _31__R0 ;
  logic [7:0] _31__X0 ;
  logic [7:0] RADR_C1 ;
  logic [7:0] RADR_R1 ;
  logic [7:0] RADR_X1 ;
  assign _17__T = _31__T | RADR_T ;
  assign _31__C0 = _17__C ;
  assign _31__X0 = _17__X ;
  assign RADR_C1 = _17__C ;
  assign RADR_X1 = _17__X ;
  assign _31__R0 = ( _17__R | _17__C & RADR_T ) & { 8{ RADR != 0 }} ;
  assign RADR_R1 = ( _17__R | _17__C & _31__T ) & { 8{ _31_ != 0 }} ;
  assign _01_ = WD & 16'b1111111111111111;
  assign _01__S = 0 ;
  logic [15:0] WD_C0 ;
  logic [15:0] WD_R0 ;
  logic [15:0] WD_X0 ;
  assign _01__T = WD_T ;
  assign WD_C0 = _01__C ;
  assign WD_R0 = _01__R ;
  assign WD_X0 = _01__X ;
  assign _18_ = 16'b1111111111111111 & dout;
  assign _18__S = 0 ;
  logic [15:0] dout_C0 ;
  logic [15:0] dout_R0 ;
  logic [15:0] dout_X0 ;
  assign _18__T = dout_T ;
  assign dout_C0 = _18__C ;
  assign dout_R0 = _18__R ;
  assign dout_X0 = _18__X ;
  assign _19_ = 1'b0 & WDQ_pr;
  assign _19__S = 0 ;
  logic [15:0] WDQ_pr_C0 ;
  logic [15:0] WDQ_pr_R0 ;
  logic [15:0] WDQ_pr_X0 ;
  assign _19__T = WDQ_pr_T ;
  assign WDQ_pr_C0 = _19__C ;
  assign WDQ_pr_R0 = _19__R ;
  assign WDQ_pr_X0 = _19__X ;
  assign _20_ = ADR[7] & ADR[6];
  assign _20__S = 0 ;
  logic [7:0] ADR_C0 ;
  logic [7:0] ADR_R0 ;
  logic [7:0] ADR_X0 ;
  assign _20__T = ADR_T [7] | ADR_T [6] ;
  assign ADR_C0 [7] = _20__C ;
  assign ADR_X0 [7] = _20__X ;
  assign ADR_C0 [6] = _20__C ;
  assign ADR_X0 [6] = _20__X ;
  assign ADR_R0 [7] = ( _20__R | _20__C & ADR_T [6] ) & { 1{ ADR[6] != 0 }} ;
  assign ADR_R0 [6] = ( _20__R | _20__C & ADR_T [7] ) & { 1{ ADR[7] != 0 }} ;
  assign _21_ = ADR[7] & ADR[5];
  assign _21__S = 0 ;
  assign { ADR_R0 [0], ADR_R0 [1], ADR_R0 [2], ADR_R0 [3], ADR_R0 [4], ADR_R0 [5] } = 0;
  assign { ADR_X0 [0], ADR_X0 [1], ADR_X0 [2], ADR_X0 [3], ADR_X0 [4], ADR_X0 [5] } = 0;
  assign { ADR_C0 [0], ADR_C0 [1], ADR_C0 [2], ADR_C0 [3], ADR_C0 [4], ADR_C0 [5] } = 0;
  logic [7:0] ADR_C1 ;
  logic [7:0] ADR_R1 ;
  logic [7:0] ADR_X1 ;
  assign _21__T = ADR_T [7] | ADR_T [5] ;
  assign ADR_C1 [7] = _21__C ;
  assign ADR_X1 [7] = _21__X ;
  assign ADR_C1 [5] = _21__C ;
  assign ADR_X1 [5] = _21__X ;
  assign ADR_R1 [7] = ( _21__R | _21__C & ADR_T [5] ) & { 1{ ADR[5] != 0 }} ;
  assign ADR_R1 [5] = ( _21__R | _21__C & ADR_T [7] ) & { 1{ ADR[7] != 0 }} ;
  always @*
  logic [15:0] _03__R0 ;
  logic [15:0] _03__X0 ;
  logic [15:0] _03__C0 ;
  always @* begin
    dout_T = 0 ;
    _03__R0 = 0 ;
    _03__X0 = 0 ;
    _03__C0 = 0 ;
    if (RECLK) begin
      dout = _03_;
      dout_T = _03__T ;
      _03__R0 = dout_R ;
      _03__X0 = dout_X ;
    end
  end
  always @*
  logic [7:0] RA_R0 ;
  logic [7:0] RA_X0 ;
  logic [7:0] RA_C0 ;
  always @* begin
    RADR_T = 0 ;
    RA_R0 = 0 ;
    RA_X0 = 0 ;
    RA_C0 = 0 ;
    if (_15_) begin
      RADR = RA;
      RADR_T = RA_T ;
      RA_R0 = RADR_R ;
      RA_X0 = RADR_X ;
    end
  end
  always @*
  logic [0:0] we_se_R1 ;
  logic [0:0] we_se_X1 ;
  logic [0:0] we_se_C1 ;
  always @* begin
    WE_FF_T = 0 ;
    we_se_R1 = 0 ;
    we_se_X1 = 0 ;
    we_se_C1 = 0 ;
    if (_07_) begin
      WE_FF = we_se;
      WE_FF_T = we_se_T ;
      we_se_R1 = WE_FF_R ;
      we_se_X1 = WE_FF_X ;
    end
  end
  always @*
  logic [0:0] _00__R0 ;
  logic [0:0] _00__X0 ;
  logic [0:0] _00__C0 ;
  always @* begin
    RE_LATB_T = 0 ;
    _00__R0 = 0 ;
    _00__X0 = 0 ;
    _00__C0 = 0 ;
    if (_06_) begin
      RE_LATB = _00_;
      RE_LATB_T = _00__T ;
      _00__R0 = RE_LATB_R ;
      _00__X0 = RE_LATB_X ;
    end
  end
  always @*
  logic [0:0] _02__R0 ;
  logic [0:0] _02__X0 ;
  logic [0:0] _02__C0 ;
  always @* begin
    WE_LATB_T = 0 ;
    _02__R0 = 0 ;
    _02__X0 = 0 ;
    _02__C0 = 0 ;
    if (_06_) begin
      WE_LATB = _02_;
      WE_LATB_T = _02__T ;
      _02__R0 = WE_LATB_R ;
      _02__X0 = WE_LATB_X ;
    end
  end
  assign _22_ = ! CLK;
  logic [0:0] CLK_C4 ;
  logic [0:0] CLK_R4 ;
  logic [0:0] CLK_X4 ;
  assign _22__T = | CLK_T ;
  assign CLK_C4 = { 1{ _22__C }} ;
  assign CLK_X4 = { 1{ _22__X }} ;
  assign CLK_R4 = { 1{ _22__R }} ;
  assign _22__S = 0 ;
  assign _23_ = ! clobber_flops;
  logic [0:0] clobber_flops_C0 ;
  logic [0:0] clobber_flops_R0 ;
  logic [0:0] clobber_flops_X0 ;
  assign _23__T = | clobber_flops_T ;
  assign clobber_flops_C0 = { 1{ _23__C }} ;
  assign clobber_flops_X0 = { 1{ _23__X }} ;
  assign clobber_flops_R0 = { 1{ _23__R }} ;
  assign _23__S = 0 ;
  assign _24_ = ! RET_EN;
  logic [0:0] RET_EN_C0 ;
  logic [0:0] RET_EN_R0 ;
  logic [0:0] RET_EN_X0 ;
  assign _24__T = | RET_EN_T ;
  assign RET_EN_C0 = { 1{ _24__C }} ;
  assign RET_EN_X0 = { 1{ _24__X }} ;
  assign RET_EN_R0 = { 1{ _24__R }} ;
  assign _24__S = 0 ;
  assign _25_ = ! RADRCLK;
  logic [0:0] RADRCLK_C0 ;
  logic [0:0] RADRCLK_R0 ;
  logic [0:0] RADRCLK_X0 ;
  assign _25__T = | RADRCLK_T ;
  assign RADRCLK_C0 = { 1{ _25__C }} ;
  assign RADRCLK_X0 = { 1{ _25__X }} ;
  assign RADRCLK_R0 = { 1{ _25__R }} ;
  assign _25__S = 0 ;
  assign _26_ = ~ RADR[0];
  logic [7:0] RADR_C2 ;
  logic [7:0] RADR_R2 ;
  logic [7:0] RADR_X2 ;
  assign _26__T = RADR_T [0] ;
  assign RADR_C2 [0] = _26__C ;
  assign RADR_R2 [0] = _26__R ;
  assign RADR_X2 [0] = _26__X ;
  assign _26__S = 0 ;
  assign _27_ = ~ WAFF[0];
  logic [7:0] WAFF_C2 ;
  logic [7:0] WAFF_R2 ;
  logic [7:0] WAFF_X2 ;
  assign _27__T = WAFF_T [0] ;
  assign WAFF_C2 [0] = _27__C ;
  assign WAFF_R2 [0] = _27__R ;
  assign WAFF_X2 [0] = _27__X ;
  assign _27__S = 0 ;
  assign _28_ = ~ dout0;
  logic [15:0] dout0_C0 ;
  logic [15:0] dout0_R0 ;
  logic [15:0] dout0_X0 ;
  assign _28__T = dout0_T ;
  assign dout0_C0 = _28__C ;
  assign dout0_R0 = _28__R ;
  assign dout0_X0 = _28__X ;
  assign _28__S = 0 ;
  assign _29_ = ~ dout1;
  logic [15:0] dout1_C0 ;
  logic [15:0] dout1_R0 ;
  logic [15:0] dout1_X0 ;
  assign _29__T = dout1_T ;
  assign dout1_C0 = _29__C ;
  assign dout1_R0 = _29__R ;
  assign dout1_X0 = _29__X ;
  assign _29__S = 0 ;
  assign CLAMPB = ~ IDDQ;
  logic [0:0] IDDQ_C0 ;
  logic [0:0] IDDQ_R0 ;
  logic [0:0] IDDQ_X0 ;
  assign CLAMPB_T = IDDQ_T ;
  assign IDDQ_C0 = CLAMPB_C ;
  assign IDDQ_R0 = CLAMPB_R ;
  assign IDDQ_X0 = CLAMPB_X ;
  assign CLAMPB_S = 0 ;
  assign _00_ = ~ RE;
  logic [0:0] RE_C0 ;
  logic [0:0] RE_R0 ;
  logic [0:0] RE_X0 ;
  assign _00__T = RE_T ;
  assign RE_C0 = _00__C ;
  assign RE_R0 = _00__R ;
  assign RE_X0 = _00__X ;
  assign _00__S = 0 ;
  assign _02_ = ~ WE;
  logic [0:0] WE_C0 ;
  logic [0:0] WE_R0 ;
  logic [0:0] WE_X0 ;
  assign _02__T = WE_T ;
  assign WE_C0 = _02__C ;
  assign WE_R0 = _02__R ;
  assign WE_X0 = _02__X ;
  assign _02__S = 0 ;
  assign we_se = ~ WE_LATB;
  logic [0:0] WE_LATB_C0 ;
  logic [0:0] WE_LATB_R0 ;
  logic [0:0] WE_LATB_X0 ;
  assign we_se_T = WE_LATB_T ;
  assign WE_LATB_C0 = we_se_C ;
  assign WE_LATB_R0 = we_se_R ;
  assign WE_LATB_X0 = we_se_X ;
  assign we_se_S = 0 ;
  assign re_se = ~ RE_LATB;
  logic [0:0] RE_LATB_C0 ;
  logic [0:0] RE_LATB_R0 ;
  logic [0:0] RE_LATB_X0 ;
  assign re_se_T = RE_LATB_T ;
  assign RE_LATB_C0 = re_se_C ;
  assign RE_LATB_R0 = re_se_R ;
  assign RE_LATB_X0 = re_se_X ;
  assign re_se_S = 0 ;
  assign _30_ = ~ CLK;
  logic [0:0] CLK_C5 ;
  logic [0:0] CLK_R5 ;
  logic [0:0] CLK_X5 ;
  assign _30__T = CLK_T ;
  assign CLK_C5 = _30__C ;
  assign CLK_R5 = _30__R ;
  assign CLK_X5 = _30__X ;
  assign _30__S = 0 ;
  logic [7:0] fangyuan3;
  logic [7:0] fangyuan3_T ;
  logic [7:0] fangyuan3_R ;
  logic [7:0] fangyuan3_C ;
  logic [7:0] fangyuan3_X ;
  assign fangyuan3 = { RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL };
  assign fangyuan3_T = {  RWSEL_T , RWSEL_T , RWSEL_T , RWSEL_T , RWSEL_T , RWSEL_T , RWSEL_T , RWSEL_T  };
  logic [13:0] fangyuan3_S ;
  assign fangyuan3_S = 0 ;
  logic [0:0] RWSEL_R8 ;
  logic [0:0] RWSEL_X8 ;
  logic [0:0] RWSEL_C8 ;
  assign RWSEL_R8 = fangyuan3_R [7:7] ;
  assign RWSEL_X8 = fangyuan3_X [7:7] ;
  assign RWSEL_C8 = fangyuan3_C [7:7] ;
  logic [0:0] RWSEL_R9 ;
  logic [0:0] RWSEL_X9 ;
  logic [0:0] RWSEL_C9 ;
  assign RWSEL_R9 = fangyuan3_R [6:6] ;
  assign RWSEL_X9 = fangyuan3_X [6:6] ;
  assign RWSEL_C9 = fangyuan3_C [6:6] ;
  logic [0:0] RWSEL_R10 ;
  logic [0:0] RWSEL_X10 ;
  logic [0:0] RWSEL_C10 ;
  assign RWSEL_R10 = fangyuan3_R [5:5] ;
  assign RWSEL_X10 = fangyuan3_X [5:5] ;
  assign RWSEL_C10 = fangyuan3_C [5:5] ;
  logic [0:0] RWSEL_R11 ;
  logic [0:0] RWSEL_X11 ;
  logic [0:0] RWSEL_C11 ;
  assign RWSEL_R11 = fangyuan3_R [4:4] ;
  assign RWSEL_X11 = fangyuan3_X [4:4] ;
  assign RWSEL_C11 = fangyuan3_C [4:4] ;
  logic [0:0] RWSEL_R12 ;
  logic [0:0] RWSEL_X12 ;
  logic [0:0] RWSEL_C12 ;
  assign RWSEL_R12 = fangyuan3_R [3:3] ;
  assign RWSEL_X12 = fangyuan3_X [3:3] ;
  assign RWSEL_C12 = fangyuan3_C [3:3] ;
  logic [0:0] RWSEL_R13 ;
  logic [0:0] RWSEL_X13 ;
  logic [0:0] RWSEL_C13 ;
  assign RWSEL_R13 = fangyuan3_R [2:2] ;
  assign RWSEL_X13 = fangyuan3_X [2:2] ;
  assign RWSEL_C13 = fangyuan3_C [2:2] ;
  logic [0:0] RWSEL_R14 ;
  logic [0:0] RWSEL_X14 ;
  logic [0:0] RWSEL_C14 ;
  assign RWSEL_R14 = fangyuan3_R [1:1] ;
  assign RWSEL_X14 = fangyuan3_X [1:1] ;
  assign RWSEL_C14 = fangyuan3_C [1:1] ;
  logic [0:0] RWSEL_R15 ;
  logic [0:0] RWSEL_X15 ;
  logic [0:0] RWSEL_C15 ;
  assign RWSEL_R15 = fangyuan3_R [0:0] ;
  assign RWSEL_X15 = fangyuan3_X [0:0] ;
  assign RWSEL_C15 = fangyuan3_C [0:0] ;

  assign _31_ = ~ fangyuan3;
  logic [7:0] fangyuan3_C0 ;
  logic [7:0] fangyuan3_R0 ;
  logic [7:0] fangyuan3_X0 ;
  assign _31__T = fangyuan3_T ;
  assign fangyuan3_C0 = _31__C ;
  assign fangyuan3_R0 = _31__R ;
  assign fangyuan3_X0 = _31__X ;
  assign _31__S = 0 ;
  assign WDBQ = ~ WDQ_pr;
  logic [15:0] WDQ_pr_C1 ;
  logic [15:0] WDQ_pr_R1 ;
  logic [15:0] WDQ_pr_X1 ;
  assign WDBQ_T = WDQ_pr_T ;
  assign WDQ_pr_C1 = WDBQ_C ;
  assign WDQ_pr_R1 = WDBQ_R ;
  assign WDQ_pr_X1 = WDBQ_X ;
  assign WDBQ_S = 0 ;
  assign legal = ~ empadd;
  logic [0:0] empadd_C0 ;
  logic [0:0] empadd_R0 ;
  logic [0:0] empadd_X0 ;
  assign legal_T = empadd_T ;
  assign empadd_C0 = legal_C ;
  assign empadd_R0 = legal_R ;
  assign empadd_X0 = legal_X ;
  assign legal_S = 0 ;
  assign _03_ = rmuxd0 | rmuxd1;
  assign _03__S = 0 ;
  logic [15:0] rmuxd0_C0 ;
  logic [15:0] rmuxd0_R0 ;
  logic [15:0] rmuxd0_X0 ;
  logic [15:0] rmuxd1_C0 ;
  logic [15:0] rmuxd1_R0 ;
  logic [15:0] rmuxd1_X0 ;
  assign _03__T = rmuxd0_T | rmuxd1_T ;
  assign rmuxd0_C0 = _03__C ;
  assign rmuxd0_X0 = _03__X ;
  assign rmuxd1_C0 = _03__C ;
  assign rmuxd1_X0 = _03__X ;
  assign rmuxd0_R0 = ( _03__R | _03__C & rmuxd1_T ) & { 16{ rmuxd1 != 16'b1111111111111111 }} ;
  assign rmuxd1_R0 = ( _03__R | _03__C & rmuxd0_T ) & { 16{ rmuxd0 != 16'b1111111111111111 }} ;
  assign ADR = _16_ | _17_;
  assign ADR_S = 0 ;
  logic [7:0] _16__C0 ;
  logic [7:0] _16__R0 ;
  logic [7:0] _16__X0 ;
  logic [7:0] _17__C0 ;
  logic [7:0] _17__R0 ;
  logic [7:0] _17__X0 ;
  assign ADR_T = _16__T | _17__T ;
  assign _16__C0 = ADR_C ;
  assign _16__X0 = ADR_X ;
  assign _17__C0 = ADR_C ;
  assign _17__X0 = ADR_X ;
  assign _16__R0 = ( ADR_R | ADR_C & _17__T ) & { 8{ _17_ != 8'b11111111 }} ;
  assign _17__R0 = ( ADR_R | ADR_C & _16__T ) & { 8{ _16_ != 8'b11111111 }} ;
  assign WMNQ = WDQ_pr | WDBQ;
  assign WMNQ_S = 0 ;
  logic [15:0] WDQ_pr_C2 ;
  logic [15:0] WDQ_pr_R2 ;
  logic [15:0] WDQ_pr_X2 ;
  logic [15:0] WDBQ_C0 ;
  logic [15:0] WDBQ_R0 ;
  logic [15:0] WDBQ_X0 ;
  assign WMNQ_T = WDQ_pr_T | WDBQ_T ;
  assign WDQ_pr_C2 = WMNQ_C ;
  assign WDQ_pr_X2 = WMNQ_X ;
  assign WDBQ_C0 = WMNQ_C ;
  assign WDBQ_X0 = WMNQ_X ;
  assign WDQ_pr_R2 = ( WMNQ_R | WMNQ_C & WDBQ_T ) & { 16{ WDBQ != 16'b1111111111111111 }} ;
  assign WDBQ_R0 = ( WMNQ_R | WMNQ_C & WDQ_pr_T ) & { 16{ WDQ_pr != 16'b1111111111111111 }} ;
  assign RD = _18_ | _19_;
  assign RD_S = 0 ;
  logic [15:0] _18__C0 ;
  logic [15:0] _18__R0 ;
  logic [15:0] _18__X0 ;
  logic [15:0] _19__C0 ;
  logic [15:0] _19__R0 ;
  logic [15:0] _19__X0 ;
  assign RD_T = _18__T | _19__T ;
  assign _18__C0 = RD_C ;
  assign _18__X0 = RD_X ;
  assign _19__C0 = RD_C ;
  assign _19__X0 = RD_X ;
  assign _18__R0 = ( RD_R | RD_C & _19__T ) & { 16{ _19_ != 16'b1111111111111111 }} ;
  assign _19__R0 = ( RD_R | RD_C & _18__T ) & { 16{ _18_ != 16'b1111111111111111 }} ;
  assign empadd = _20_ | _21_;
  assign empadd_S = 0 ;
  logic [0:0] _20__C0 ;
  logic [0:0] _20__R0 ;
  logic [0:0] _20__X0 ;
  logic [0:0] _21__C0 ;
  logic [0:0] _21__R0 ;
  logic [0:0] _21__X0 ;
  assign empadd_T = _20__T | _21__T ;
  assign _20__C0 = empadd_C ;
  assign _20__X0 = empadd_X ;
  assign _21__C0 = empadd_C ;
  assign _21__X0 = empadd_X ;
  assign _20__R0 = ( empadd_R | empadd_C & _21__T ) & { 1{ _21_ != 1'b1 }} ;
  assign _21__R0 = ( empadd_R | empadd_C & _20__T ) & { 1{ _20_ != 1'b1 }} ;
  always @(posedge WADRCLK)
      WDQ_pr <= _01_;
  logic [15:0] _01__X0 ;
  logic [15:0] _01__R0 ;
  logic [15:0] _01__C0 ;
  assign _01__X0 = { 16{ WDQ_pr_S != _01__S }} ;
  assign _01__R0 = 0 ;
  assign _01__C0 = 0 ;
  always @( posedge WADRCLK )
      WDQ_pr_T 		<= rst_zy ? 0 : ( _01__T & _01__X0 );
  always @( posedge WADRCLK )
      WDQ_pr_t_flag 	<= rst_zy ? 0 : WDQ_pr_t_flag ? 1 : | _01__T & ( | _01__X0 );
  always @( posedge WADRCLK )
      WDQ_pr_r_flag 	<= rst_zy ? 0 : WDQ_pr_r_flag ? 1 : WDQ_pr_t_flag ? 0 : ( | WDQ_pr_R ) ;
  always @(posedge WADRCLK)
      WAFF <= WA;
  logic [7:0] WA_X0 ;
  logic [7:0] WA_R0 ;
  logic [7:0] WA_C0 ;
  assign WA_X0 = { 8{ WAFF_S != WA_S }} ;
  assign WA_R0 = 0 ;
  assign WA_C0 = 0 ;
  always @( posedge WADRCLK )
      WAFF_T 		<= rst_zy ? 0 : ( WA_T & WA_X0 );
  always @( posedge WADRCLK )
      WAFF_t_flag 	<= rst_zy ? 0 : WAFF_t_flag ? 1 : | WA_T & ( | WA_X0 );
  always @( posedge WADRCLK )
      WAFF_r_flag 	<= rst_zy ? 0 : WAFF_r_flag ? 1 : WAFF_t_flag ? 0 : ( | WAFF_R ) ;
  logic [0:0] WrClk0_R0 ;
  logic [0:0] WrClk0_X0 ;
  logic [0:0] WrClk0_C0 ;
  logic [15:0] WDQ_pr_R3 ;
  logic [15:0] WDQ_pr_X3 ;
  logic [15:0] WDQ_pr_C3 ;
  logic [15:0] WMNQ_R0 ;
  logic [15:0] WMNQ_X0 ;
  logic [15:0] WMNQ_C0 ;
// module: \$paramod\RAMPDP_160X16_GL_M2_D2_ram\words=80\bits=16\addrs=7
  \$paramod\RAMPDP_160X16_GL_M2_D2_ram\words=80\bits=16\addrs=7 iow0 (
    .radr_T (  RADR_T [7:1]  ),
    .radr_R (  RADR_R2 [7:1]  ),
    .radr_X (  RADR_X2 [7:1]  ),
    .radr_C (  RADR_C2 [7:1]  ),
    .radr_S (  RADR_S [7:1]  ),
    .wadr_T (  WAFF_T [7:1]  ),
    .wadr_R (  WAFF_R2 [7:1]  ),
    .wadr_X (  WAFF_X2 [7:1]  ),
    .wadr_C (  WAFF_C2 [7:1]  ),
    .wadr_S (  WAFF_S [7:1]  ),
    .wrclk_T (  WrClk0_T  ),
    .wrclk_R (  WrClk0_R0  ),
    .wrclk_X (  WrClk0_X0  ),
    .wrclk_C (  WrClk0_C0  ),
    .wrclk_S (  WrClk0_S  ),
    .wrdata_T (  WDQ_pr_T  ),
    .wrdata_R (  WDQ_pr_R3  ),
    .wrdata_X (  WDQ_pr_X3  ),
    .wrdata_C (  WDQ_pr_C3  ),
    .wrdata_S (  WDQ_pr_S  ),
    .wrmaskn_T (  WMNQ_T  ),
    .wrmaskn_R (  WMNQ_R0  ),
    .wrmaskn_X (  WMNQ_X0  ),
    .wrmaskn_C (  WMNQ_C0  ),
    .wrmaskn_S (  WMNQ_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .rout_B_T (  dout0_T  ),
    .rout_B_R0 (  dout0_R  ),
    .rout_B_X0 (  dout0_X  ),
    .rout_B_C0 (  dout0_C  ),
    .rout_B_S ( dout0_S ),
    .wrmaskn ( WMNQ ),
    .rout_B ( dout0 ),
    .wadr ( WAFF[7:1] ),
    .radr ( RADR[7:1] ),
    .wrclk ( WrClk0 ),
    .wrdata ( WDQ_pr )
  );
  logic [7:0] RADR_R3 ;
  logic [7:0] RADR_X3 ;
  logic [7:0] RADR_C3 ;
  logic [7:0] WAFF_R3 ;
  logic [7:0] WAFF_X3 ;
  logic [7:0] WAFF_C3 ;
  logic [0:0] WrClk1_R0 ;
  logic [0:0] WrClk1_X0 ;
  logic [0:0] WrClk1_C0 ;
  logic [15:0] WDQ_pr_R4 ;
  logic [15:0] WDQ_pr_X4 ;
  logic [15:0] WDQ_pr_C4 ;
  logic [15:0] WMNQ_R1 ;
  logic [15:0] WMNQ_X1 ;
  logic [15:0] WMNQ_C1 ;
// module: \$paramod\RAMPDP_160X16_GL_M2_D2_ram\words=80\bits=16\addrs=7
  \$paramod\RAMPDP_160X16_GL_M2_D2_ram\words=80\bits=16\addrs=7 iow1 (
    .radr_T (  RADR_T [7:1]  ),
    .radr_R (  RADR_R3 [7:1]  ),
    .radr_X (  RADR_X3 [7:1]  ),
    .radr_C (  RADR_C3 [7:1]  ),
    .radr_S (  RADR_S [7:1]  ),
    .wadr_T (  WAFF_T [7:1]  ),
    .wadr_R (  WAFF_R3 [7:1]  ),
    .wadr_X (  WAFF_X3 [7:1]  ),
    .wadr_C (  WAFF_C3 [7:1]  ),
    .wadr_S (  WAFF_S [7:1]  ),
    .wrclk_T (  WrClk1_T  ),
    .wrclk_R (  WrClk1_R0  ),
    .wrclk_X (  WrClk1_X0  ),
    .wrclk_C (  WrClk1_C0  ),
    .wrclk_S (  WrClk1_S  ),
    .wrdata_T (  WDQ_pr_T  ),
    .wrdata_R (  WDQ_pr_R4  ),
    .wrdata_X (  WDQ_pr_X4  ),
    .wrdata_C (  WDQ_pr_C4  ),
    .wrdata_S (  WDQ_pr_S  ),
    .wrmaskn_T (  WMNQ_T  ),
    .wrmaskn_R (  WMNQ_R1  ),
    .wrmaskn_X (  WMNQ_X1  ),
    .wrmaskn_C (  WMNQ_C1  ),
    .wrmaskn_S (  WMNQ_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .rout_B_T (  dout1_T  ),
    .rout_B_R0 (  dout1_R  ),
    .rout_B_X0 (  dout1_X  ),
    .rout_B_C0 (  dout1_C  ),
    .rout_B_S ( dout1_S ),
    .wrmaskn ( WMNQ ),
    .rout_B ( dout1 ),
    .wadr ( WAFF[7:1] ),
    .radr ( RADR[7:1] ),
    .wrclk ( WrClk1 ),
    .wrdata ( WDQ_pr )
  );
  assign BADBIT = 16'b0000000000000000;
  assign BADBIT_T = 0 ;
  assign BADBIT_S = 14'b1 ;
  assign CAPT_DIS = 1'b0;
  assign CAPT_DIS_T = 0 ;
  assign CAPT_DIS_S = 14'b1 ;
  assign PDEC0 = 512'b
  assign PDEC0_T = 0 ;
  assign PDEC0_S = 14'b1 ;
  assign PDEC1 = 512'b
  assign PDEC1_T = 0 ;
  assign PDEC1_S = 14'b1 ;
  assign PDEC2 = 512'b
  assign PDEC2_T = 0 ;
  assign PDEC2_S = 14'b1 ;
  assign RADRSWI = RADR;
  assign { RADR_R3 [0] } = 0;
  assign { RADR_X3 [0] } = 0;
  assign { RADR_C3 [0] } = 0;
  logic [7:0] RADR_C4 ;
  logic [7:0] RADR_R4 ;
  logic [7:0] RADR_X4 ;
  assign RADRSWI_T = RADR_T ;
  assign RADR_C4 = RADRSWI_C ;
  assign RADR_R4 = RADRSWI_R ;
  assign RADR_X4 = RADRSWI_X ;
  assign RADRSWI_S = RADR_S ;
  assign RDBYP = 1'b0;
  assign RDBYP_T = 0 ;
  assign RDBYP_S = 14'b1 ;
  assign RDBYPASS = 16'b0000000000000000;
  assign RDBYPASS_T = 0 ;
  assign RDBYPASS_S = 14'b1 ;
  assign SHFT = 16'b1111111111111111;
  assign SHFT_T = 0 ;
  assign SHFT_S = 14'b1 ;
  assign WDBQ_pr = WDBQ;
  logic [15:0] WDBQ_C1 ;
  logic [15:0] WDBQ_R1 ;
  logic [15:0] WDBQ_X1 ;
  assign WDBQ_pr_T = WDBQ_T ;
  assign WDBQ_C1 = WDBQ_pr_C ;
  assign WDBQ_R1 = WDBQ_pr_R ;
  assign WDBQ_X1 = WDBQ_pr_X ;
  assign WDBQ_pr_S = WDBQ_S ;
  assign WDQ = WDQ_pr;
  logic [15:0] WDQ_pr_C5 ;
  logic [15:0] WDQ_pr_R5 ;
  logic [15:0] WDQ_pr_X5 ;
  assign WDQ_T = WDQ_pr_T ;
  assign WDQ_pr_C5 = WDQ_C ;
  assign WDQ_pr_R5 = WDQ_R ;
  assign WDQ_pr_X5 = WDQ_X ;
  assign WDQ_S = WDQ_pr_S ;
  assign WMNexp = 16'b1111111111111111;
  assign WMNexp_T = 0 ;
  assign WMNexp_S = 14'b1 ;
  assign WRDCLK = WADRCLK;
  logic [0:0] WADRCLK_C0 ;
  logic [0:0] WADRCLK_R0 ;
  logic [0:0] WADRCLK_X0 ;
  assign WRDCLK_T = WADRCLK_T ;
  assign WADRCLK_C0 = WRDCLK_C ;
  assign WADRCLK_R0 = WRDCLK_R ;
  assign WADRCLK_X0 = WRDCLK_X ;
  assign WRDCLK_S = WADRCLK_S ;
  assign force_x = 16'b0000000000000000;
  assign force_x_T = 0 ;
  assign force_x_S = 14'b1 ;
  assign fusePDEC0 = 8'b00000000;
  assign fusePDEC0_T = 0 ;
  assign fusePDEC0_S = 14'b1 ;
  assign fusePDEC1 = 8'b00000000;
  assign fusePDEC1_T = 0 ;
  assign fusePDEC1_S = 14'b1 ;
  assign fusePDEC2 = 8'b00000000;
  assign fusePDEC2_T = 0 ;
  assign fusePDEC2_S = 14'b1 ;
  assign fuseien = 1'b0;
  assign fuseien_T = 0 ;
  assign fuseien_S = 14'b1 ;
  assign latffclk = CLK;
  logic [0:0] CLK_C6 ;
  logic [0:0] CLK_R6 ;
  logic [0:0] CLK_X6 ;
  assign latffclk_T = CLK_T ;
  assign CLK_C6 = latffclk_C ;
  assign CLK_R6 = latffclk_R ;
  assign CLK_X6 = latffclk_X ;
  assign latffclk_S = CLK_S ;
  assign sel_normal = 16'b1111111111111111;
  assign sel_normal_T = 0 ;
  assign sel_normal_S = 14'b1 ;
  assign sel_redun = 16'b0000000000000000;
  assign sel_redun_T = 0 ;
  assign sel_redun_S = 14'b1 ;
  assign tiedvalid = 1'b1;
  assign tiedvalid_T = 0 ;
  assign tiedvalid_S = 14'b1 ;
  assign WADRCLK_C = ( WADRCLK_C0 );
  assign WrClk1_C = ( WrClk1_C0 );
  assign WMNQ_C = ( WMNQ_C0 ) | ( WMNQ_C1 );
  assign WrClk0_C = ( WrClk0_C0 );
  assign WA_C = ( WA_C0 );
  assign _01__C = ( _01__C0 );
  assign _21__C = ( _21__C0 );
  assign _20__C = ( _20__C0 );
  assign _19__C = ( _19__C0 );
  assign _18__C = ( _18__C0 );
  assign WDBQ_C = ( WDBQ_C0 ) | ( WDBQ_C1 );
  assign _17__C = ( _17__C0 );
  assign _16__C = ( _16__C0 );
  assign rmuxd1_C = ( rmuxd1_C0 );
  assign rmuxd0_C = ( rmuxd0_C0 );
  assign empadd_C = ( empadd_C0 );
  assign fangyuan3_C = ( fangyuan3_C0 );
  assign RE_LATB_C = ( RE_LATB_C0 );
  assign WE_LATB_C = ( WE_LATB_C0 );
  assign WE_C = ( WE_C0 );
  assign RE_C = ( RE_C0 );
  assign IDDQ_C = ( IDDQ_C0 );
  assign dout1_C = ( dout1_C0 );
  assign dout0_C = ( dout0_C0 );
  assign RADRCLK_C = ( RADRCLK_C0 );
  assign RET_EN_C = ( RET_EN_C0 );
  assign clobber_flops_C = ( clobber_flops_C0 );
  assign _02__C = ( _02__C0 );
  assign _00__C = ( _00__C0 );
  assign _06__C = ( _06__C0 ) | ( _06__C1 );
  assign _07__C = ( _07__C0 );
  assign RA_C = ( RA_C0 );
  assign _15__C = ( _15__C0 );
  assign _03__C = ( _03__C0 );
  assign ADR_C = ( ADR_C0 ) | ( ADR_C1 );
  assign WDQ_pr_C = ( WDQ_pr_C0 ) | ( WDQ_pr_C1 ) | ( WDQ_pr_C2 ) | ( WDQ_pr_C3 ) | ( WDQ_pr_C4 ) | ( WDQ_pr_C5 );
  assign dout_C = ( dout_C0 );
  assign WD_C = ( WD_C0 );
  assign _31__C = ( _31__C0 );
  assign fangyuan2_C = ( fangyuan2_C0 );
  assign RWSEL_C = ( RWSEL_C0 ) | ( RWSEL_C1 ) | ( RWSEL_C2 ) | ( RWSEL_C3 ) | ( RWSEL_C4 ) | ( RWSEL_C5 ) | ( RWSEL_C6 ) | ( RWSEL_C7 ) | ( RWSEL_C8 ) | ( RWSEL_C9 ) | ( RWSEL_C10 ) | ( RWSEL_C11 ) | ( RWSEL_C12 ) | ( RWSEL_C13 ) | ( RWSEL_C14 ) | ( RWSEL_C15 );
  assign _25__C = ( _25__C0 );
  assign _30__C = ( _30__C0 ) | ( _30__C1 );
  assign _14__C = ( _14__C0 );
  assign _13__C = ( _13__C0 );
  assign _12__C = ( _12__C0 ) | ( _12__C1 );
  assign WE_FF_C = ( WE_FF_C0 );
  assign _11__C = ( _11__C0 );
  assign _24__C = ( _24__C0 ) | ( _24__C1 );
  assign _10__C = ( _10__C0 );
  assign _09__C = ( _09__C0 );
  assign CLAMPB_C = ( CLAMPB_C0 ) | ( CLAMPB_C1 );
  assign re_se_C = ( re_se_C0 ) | ( re_se_C1 );
  assign _08__C = ( _08__C0 );
  assign we_se_C = ( we_se_C0 ) | ( we_se_C1 );
  assign CLK_C = ( CLK_C0 ) | ( CLK_C1 ) | ( CLK_C2 ) | ( CLK_C3 ) | ( CLK_C4 ) | ( CLK_C5 ) | ( CLK_C6 );
  assign _23__C = ( _23__C0 ) | ( _23__C1 ) | ( _23__C2 ) | ( _23__C3 ) | ( _23__C4 ) | ( _23__C5 );
  assign _22__C = ( _22__C0 );
  assign _29__C = ( _29__C0 );
  assign fangyuan1_C = ( fangyuan1_C0 );
  assign RdClk1_C = ( RdClk1_C0 ) | ( RdClk1_C1 ) | ( RdClk1_C2 ) | ( RdClk1_C3 ) | ( RdClk1_C4 ) | ( RdClk1_C5 ) | ( RdClk1_C6 ) | ( RdClk1_C7 ) | ( RdClk1_C8 ) | ( RdClk1_C9 ) | ( RdClk1_C10 ) | ( RdClk1_C11 ) | ( RdClk1_C12 ) | ( RdClk1_C13 ) | ( RdClk1_C14 ) | ( RdClk1_C15 );
  assign _28__C = ( _28__C0 );
  assign fangyuan0_C = ( fangyuan0_C0 );
  assign RdClk0_C = ( RdClk0_C0 ) | ( RdClk0_C1 ) | ( RdClk0_C2 ) | ( RdClk0_C3 ) | ( RdClk0_C4 ) | ( RdClk0_C5 ) | ( RdClk0_C6 ) | ( RdClk0_C7 ) | ( RdClk0_C8 ) | ( RdClk0_C9 ) | ( RdClk0_C10 ) | ( RdClk0_C11 ) | ( RdClk0_C12 ) | ( RdClk0_C13 ) | ( RdClk0_C14 ) | ( RdClk0_C15 );
  assign _05__C = ( _05__C0 );
  assign WAFF_C = ( WAFF_C0 ) | ( WAFF_C1 ) | ( WAFF_C2 ) | ( WAFF_C3 );
  assign legal_C = ( legal_C0 ) | ( legal_C1 );
  assign _04__C = ( _04__C0 );
  assign _27__C = ( _27__C0 );
  assign WECLK_C = ( WECLK_C0 ) | ( WECLK_C1 );
  assign RADR_C = ( RADR_C0 ) | ( RADR_C1 ) | ( RADR_C2 ) | ( RADR_C3 ) | ( RADR_C4 );
  assign _26__C = ( _26__C0 );
  assign RECLK_C = ( RECLK_C0 ) | ( RECLK_C1 ) | ( RECLK_C2 );
  assign RD_C = ( RD_C0 );
  assign WADRCLK_X = ( WADRCLK_X0 );
  assign WrClk1_X = ( WrClk1_X0 );
  assign WMNQ_X = ( WMNQ_X0 ) | ( WMNQ_X1 );
  assign WrClk0_X = ( WrClk0_X0 );
  assign WA_X = ( WA_X0 );
  assign _01__X = ( _01__X0 );
  assign _21__X = ( _21__X0 );
  assign _20__X = ( _20__X0 );
  assign _19__X = ( _19__X0 );
  assign _18__X = ( _18__X0 );
  assign WDBQ_X = ( WDBQ_X0 ) | ( WDBQ_X1 );
  assign _17__X = ( _17__X0 );
  assign _16__X = ( _16__X0 );
  assign rmuxd1_X = ( rmuxd1_X0 );
  assign rmuxd0_X = ( rmuxd0_X0 );
  assign empadd_X = ( empadd_X0 );
  assign fangyuan3_X = ( fangyuan3_X0 );
  assign RE_LATB_X = ( RE_LATB_X0 );
  assign WE_LATB_X = ( WE_LATB_X0 );
  assign WE_X = ( WE_X0 );
  assign RE_X = ( RE_X0 );
  assign IDDQ_X = ( IDDQ_X0 );
  assign dout1_X = ( dout1_X0 );
  assign dout0_X = ( dout0_X0 );
  assign RADRCLK_X = ( RADRCLK_X0 );
  assign RET_EN_X = ( RET_EN_X0 );
  assign clobber_flops_X = ( clobber_flops_X0 );
  assign _02__X = ( _02__X0 );
  assign _00__X = ( _00__X0 );
  assign _06__X = ( _06__X0 ) | ( _06__X1 );
  assign _07__X = ( _07__X0 );
  assign RA_X = ( RA_X0 );
  assign _15__X = ( _15__X0 );
  assign _03__X = ( _03__X0 );
  assign ADR_X = ( ADR_X0 ) | ( ADR_X1 );
  assign WDQ_pr_X = ( WDQ_pr_X0 ) | ( WDQ_pr_X1 ) | ( WDQ_pr_X2 ) | ( WDQ_pr_X3 ) | ( WDQ_pr_X4 ) | ( WDQ_pr_X5 );
  assign dout_X = ( dout_X0 );
  assign WD_X = ( WD_X0 );
  assign _31__X = ( _31__X0 );
  assign fangyuan2_X = ( fangyuan2_X0 );
  assign RWSEL_X = ( RWSEL_X0 ) | ( RWSEL_X1 ) | ( RWSEL_X2 ) | ( RWSEL_X3 ) | ( RWSEL_X4 ) | ( RWSEL_X5 ) | ( RWSEL_X6 ) | ( RWSEL_X7 ) | ( RWSEL_X8 ) | ( RWSEL_X9 ) | ( RWSEL_X10 ) | ( RWSEL_X11 ) | ( RWSEL_X12 ) | ( RWSEL_X13 ) | ( RWSEL_X14 ) | ( RWSEL_X15 );
  assign _25__X = ( _25__X0 );
  assign _30__X = ( _30__X0 ) | ( _30__X1 );
  assign _14__X = ( _14__X0 );
  assign _13__X = ( _13__X0 );
  assign _12__X = ( _12__X0 ) | ( _12__X1 );
  assign WE_FF_X = ( WE_FF_X0 );
  assign _11__X = ( _11__X0 );
  assign _24__X = ( _24__X0 ) | ( _24__X1 );
  assign _10__X = ( _10__X0 );
  assign _09__X = ( _09__X0 );
  assign CLAMPB_X = ( CLAMPB_X0 ) | ( CLAMPB_X1 );
  assign re_se_X = ( re_se_X0 ) | ( re_se_X1 );
  assign _08__X = ( _08__X0 );
  assign we_se_X = ( we_se_X0 ) | ( we_se_X1 );
  assign CLK_X = ( CLK_X0 ) | ( CLK_X1 ) | ( CLK_X2 ) | ( CLK_X3 ) | ( CLK_X4 ) | ( CLK_X5 ) | ( CLK_X6 );
  assign _23__X = ( _23__X0 ) | ( _23__X1 ) | ( _23__X2 ) | ( _23__X3 ) | ( _23__X4 ) | ( _23__X5 );
  assign _22__X = ( _22__X0 );
  assign _29__X = ( _29__X0 );
  assign fangyuan1_X = ( fangyuan1_X0 );
  assign RdClk1_X = ( RdClk1_X0 ) | ( RdClk1_X1 ) | ( RdClk1_X2 ) | ( RdClk1_X3 ) | ( RdClk1_X4 ) | ( RdClk1_X5 ) | ( RdClk1_X6 ) | ( RdClk1_X7 ) | ( RdClk1_X8 ) | ( RdClk1_X9 ) | ( RdClk1_X10 ) | ( RdClk1_X11 ) | ( RdClk1_X12 ) | ( RdClk1_X13 ) | ( RdClk1_X14 ) | ( RdClk1_X15 );
  assign _28__X = ( _28__X0 );
  assign fangyuan0_X = ( fangyuan0_X0 );
  assign RdClk0_X = ( RdClk0_X0 ) | ( RdClk0_X1 ) | ( RdClk0_X2 ) | ( RdClk0_X3 ) | ( RdClk0_X4 ) | ( RdClk0_X5 ) | ( RdClk0_X6 ) | ( RdClk0_X7 ) | ( RdClk0_X8 ) | ( RdClk0_X9 ) | ( RdClk0_X10 ) | ( RdClk0_X11 ) | ( RdClk0_X12 ) | ( RdClk0_X13 ) | ( RdClk0_X14 ) | ( RdClk0_X15 );
  assign _05__X = ( _05__X0 );
  assign WAFF_X = ( WAFF_X0 ) | ( WAFF_X1 ) | ( WAFF_X2 ) | ( WAFF_X3 );
  assign legal_X = ( legal_X0 ) | ( legal_X1 );
  assign _04__X = ( _04__X0 );
  assign _27__X = ( _27__X0 );
  assign WECLK_X = ( WECLK_X0 ) | ( WECLK_X1 );
  assign RADR_X = ( RADR_X0 ) | ( RADR_X1 ) | ( RADR_X2 ) | ( RADR_X3 ) | ( RADR_X4 );
  assign _26__X = ( _26__X0 );
  assign RECLK_X = ( RECLK_X0 ) | ( RECLK_X1 ) | ( RECLK_X2 );
  assign RD_X = ( RD_X0 );
  assign WADRCLK_R = ( WADRCLK_X0 & WADRCLK_R0 );
  assign WrClk1_R = ( WrClk1_X0 & WrClk1_R0 );
  assign WMNQ_R = ( WMNQ_X0 & WMNQ_R0 ) | ( WMNQ_X1 & WMNQ_R1 );
  assign WrClk0_R = ( WrClk0_X0 & WrClk0_R0 );
  assign WA_R = ( WA_X0 & WA_R0 );
  assign _01__R = ( _01__X0 & _01__R0 );
  assign _21__R = ( _21__X0 & _21__R0 );
  assign _20__R = ( _20__X0 & _20__R0 );
  assign _19__R = ( _19__X0 & _19__R0 );
  assign _18__R = ( _18__X0 & _18__R0 );
  assign WDBQ_R = ( WDBQ_X0 & WDBQ_R0 ) | ( WDBQ_X1 & WDBQ_R1 );
  assign _17__R = ( _17__X0 & _17__R0 );
  assign _16__R = ( _16__X0 & _16__R0 );
  assign rmuxd1_R = ( rmuxd1_X0 & rmuxd1_R0 );
  assign rmuxd0_R = ( rmuxd0_X0 & rmuxd0_R0 );
  assign empadd_R = ( empadd_X0 & empadd_R0 );
  assign fangyuan3_R = ( fangyuan3_X0 & fangyuan3_R0 );
  assign RE_LATB_R = ( RE_LATB_X0 & RE_LATB_R0 );
  assign WE_LATB_R = ( WE_LATB_X0 & WE_LATB_R0 );
  assign WE_R = ( WE_X0 & WE_R0 );
  assign RE_R = ( RE_X0 & RE_R0 );
  assign IDDQ_R = ( IDDQ_X0 & IDDQ_R0 );
  assign dout1_R = ( dout1_X0 & dout1_R0 );
  assign dout0_R = ( dout0_X0 & dout0_R0 );
  assign RADRCLK_R = ( RADRCLK_X0 & RADRCLK_R0 );
  assign RET_EN_R = ( RET_EN_X0 & RET_EN_R0 );
  assign clobber_flops_R = ( clobber_flops_X0 & clobber_flops_R0 );
  assign _02__R = ( _02__X0 & _02__R0 );
  assign _00__R = ( _00__X0 & _00__R0 );
  assign _06__R = ( _06__X0 & _06__R0 ) | ( _06__X1 & _06__R1 );
  assign _07__R = ( _07__X0 & _07__R0 );
  assign RA_R = ( RA_X0 & RA_R0 );
  assign _15__R = ( _15__X0 & _15__R0 );
  assign _03__R = ( _03__X0 & _03__R0 );
  assign ADR_R = ( ADR_X0 & ADR_R0 ) | ( ADR_X1 & ADR_R1 );
  assign WDQ_pr_R = ( WDQ_pr_X0 & WDQ_pr_R0 ) | ( WDQ_pr_X1 & WDQ_pr_R1 ) | ( WDQ_pr_X2 & WDQ_pr_R2 ) | ( WDQ_pr_X3 & WDQ_pr_R3 ) | ( WDQ_pr_X4 & WDQ_pr_R4 ) | ( WDQ_pr_X5 & WDQ_pr_R5 );
  assign dout_R = ( dout_X0 & dout_R0 );
  assign WD_R = ( WD_X0 & WD_R0 );
  assign _31__R = ( _31__X0 & _31__R0 );
  assign fangyuan2_R = ( fangyuan2_X0 & fangyuan2_R0 );
  assign RWSEL_R = ( RWSEL_X0 & RWSEL_R0 ) | ( RWSEL_X1 & RWSEL_R1 ) | ( RWSEL_X2 & RWSEL_R2 ) | ( RWSEL_X3 & RWSEL_R3 ) | ( RWSEL_X4 & RWSEL_R4 ) | ( RWSEL_X5 & RWSEL_R5 ) | ( RWSEL_X6 & RWSEL_R6 ) | ( RWSEL_X7 & RWSEL_R7 ) | ( RWSEL_X8 & RWSEL_R8 ) | ( RWSEL_X9 & RWSEL_R9 ) | ( RWSEL_X10 & RWSEL_R10 ) | ( RWSEL_X11 & RWSEL_R11 ) | ( RWSEL_X12 & RWSEL_R12 ) | ( RWSEL_X13 & RWSEL_R13 ) | ( RWSEL_X14 & RWSEL_R14 ) | ( RWSEL_X15 & RWSEL_R15 );
  assign _25__R = ( _25__X0 & _25__R0 );
  assign _30__R = ( _30__X0 & _30__R0 ) | ( _30__X1 & _30__R1 );
  assign _14__R = ( _14__X0 & _14__R0 );
  assign _13__R = ( _13__X0 & _13__R0 );
  assign _12__R = ( _12__X0 & _12__R0 ) | ( _12__X1 & _12__R1 );
  assign WE_FF_R = ( WE_FF_X0 & WE_FF_R0 );
  assign _11__R = ( _11__X0 & _11__R0 );
  assign _24__R = ( _24__X0 & _24__R0 ) | ( _24__X1 & _24__R1 );
  assign _10__R = ( _10__X0 & _10__R0 );
  assign _09__R = ( _09__X0 & _09__R0 );
  assign CLAMPB_R = ( CLAMPB_X0 & CLAMPB_R0 ) | ( CLAMPB_X1 & CLAMPB_R1 );
  assign re_se_R = ( re_se_X0 & re_se_R0 ) | ( re_se_X1 & re_se_R1 );
  assign _08__R = ( _08__X0 & _08__R0 );
  assign we_se_R = ( we_se_X0 & we_se_R0 ) | ( we_se_X1 & we_se_R1 );
  assign CLK_R = ( CLK_X0 & CLK_R0 ) | ( CLK_X1 & CLK_R1 ) | ( CLK_X2 & CLK_R2 ) | ( CLK_X3 & CLK_R3 ) | ( CLK_X4 & CLK_R4 ) | ( CLK_X5 & CLK_R5 ) | ( CLK_X6 & CLK_R6 );
  assign _23__R = ( _23__X0 & _23__R0 ) | ( _23__X1 & _23__R1 ) | ( _23__X2 & _23__R2 ) | ( _23__X3 & _23__R3 ) | ( _23__X4 & _23__R4 ) | ( _23__X5 & _23__R5 );
  assign _22__R = ( _22__X0 & _22__R0 );
  assign _29__R = ( _29__X0 & _29__R0 );
  assign fangyuan1_R = ( fangyuan1_X0 & fangyuan1_R0 );
  assign RdClk1_R = ( RdClk1_X0 & RdClk1_R0 ) | ( RdClk1_X1 & RdClk1_R1 ) | ( RdClk1_X2 & RdClk1_R2 ) | ( RdClk1_X3 & RdClk1_R3 ) | ( RdClk1_X4 & RdClk1_R4 ) | ( RdClk1_X5 & RdClk1_R5 ) | ( RdClk1_X6 & RdClk1_R6 ) | ( RdClk1_X7 & RdClk1_R7 ) | ( RdClk1_X8 & RdClk1_R8 ) | ( RdClk1_X9 & RdClk1_R9 ) | ( RdClk1_X10 & RdClk1_R10 ) | ( RdClk1_X11 & RdClk1_R11 ) | ( RdClk1_X12 & RdClk1_R12 ) | ( RdClk1_X13 & RdClk1_R13 ) | ( RdClk1_X14 & RdClk1_R14 ) | ( RdClk1_X15 & RdClk1_R15 );
  assign _28__R = ( _28__X0 & _28__R0 );
  assign fangyuan0_R = ( fangyuan0_X0 & fangyuan0_R0 );
  assign RdClk0_R = ( RdClk0_X0 & RdClk0_R0 ) | ( RdClk0_X1 & RdClk0_R1 ) | ( RdClk0_X2 & RdClk0_R2 ) | ( RdClk0_X3 & RdClk0_R3 ) | ( RdClk0_X4 & RdClk0_R4 ) | ( RdClk0_X5 & RdClk0_R5 ) | ( RdClk0_X6 & RdClk0_R6 ) | ( RdClk0_X7 & RdClk0_R7 ) | ( RdClk0_X8 & RdClk0_R8 ) | ( RdClk0_X9 & RdClk0_R9 ) | ( RdClk0_X10 & RdClk0_R10 ) | ( RdClk0_X11 & RdClk0_R11 ) | ( RdClk0_X12 & RdClk0_R12 ) | ( RdClk0_X13 & RdClk0_R13 ) | ( RdClk0_X14 & RdClk0_R14 ) | ( RdClk0_X15 & RdClk0_R15 );
  assign _05__R = ( _05__X0 & _05__R0 );
  assign WAFF_R = ( WAFF_X0 & WAFF_R0 ) | ( WAFF_X1 & WAFF_R1 ) | ( WAFF_X2 & WAFF_R2 ) | ( WAFF_X3 & WAFF_R3 );
  assign legal_R = ( legal_X0 & legal_R0 ) | ( legal_X1 & legal_R1 );
  assign _04__R = ( _04__X0 & _04__R0 );
  assign _27__R = ( _27__X0 & _27__R0 );
  assign WECLK_R = ( WECLK_X0 & WECLK_R0 ) | ( WECLK_X1 & WECLK_R1 );
  assign RADR_R = ( RADR_X0 & RADR_R0 ) | ( RADR_X1 & RADR_R1 ) | ( RADR_X2 & RADR_R2 ) | ( RADR_X3 & RADR_R3 ) | ( RADR_X4 & RADR_R4 );
  assign _26__R = ( _26__X0 & _26__R0 );
  assign RECLK_R = ( RECLK_X0 & RECLK_R0 ) | ( RECLK_X1 & RECLK_R1 ) | ( RECLK_X2 & RECLK_R2 );
  assign RD_R = ( RD_X0 & RD_R0 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { BADBIT_R , BADBIT_C , BADBIT_X , CAPT_DIS_R , CAPT_DIS_C , CAPT_DIS_X , PDEC0_R , PDEC0_C , PDEC0_X , PDEC1_R , PDEC1_C , PDEC1_X , PDEC2_R , PDEC2_C , PDEC2_X , RADRSWI_R , RADRSWI_C , RADRSWI_X , RDBYP_R , RDBYP_C , RDBYP_X , RDBYPASS_R , RDBYPASS_C , RDBYPASS_X , SHFT_R , SHFT_C , SHFT_X , WDBQ_pr_R , WDBQ_pr_C , WDBQ_pr_X , WDQ_R , WDQ_C , WDQ_X , WMNexp_R , WMNexp_C , WMNexp_X , WRDCLK_R , WRDCLK_C , WRDCLK_X , force_x_R , force_x_C , force_x_X , fusePDEC0_R , fusePDEC0_C , fusePDEC0_X , fusePDEC1_R , fusePDEC1_C , fusePDEC1_X , fusePDEC2_R , fusePDEC2_C , fusePDEC2_X , fuseien_R , fuseien_C , fuseien_X , latffclk_R , latffclk_C , latffclk_X , sel_normal_R , sel_normal_C , sel_normal_X , sel_redun_R , sel_redun_C , sel_redun_X , tiedvalid_R , tiedvalid_C , tiedvalid_X  } = 0;
  always @( posedge WADRCLK ) begin
    if( rst_zy ) WDQ_pr_PREV_VAL1 <= 0 ;
    if( rst_zy ) WDQ_pr_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) WDQ_pr_PREV_VAL1 <= WDQ_pr ;
    if( INSTR_IN_ZY ) WDQ_pr_PREV_VAL2 <= WDQ_pr_PREV_VAL1 ;
  end
  always @( posedge WADRCLK ) begin
    if( rst_zy ) WAFF_PREV_VAL1 <= 0 ;
    if( rst_zy ) WAFF_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) WAFF_PREV_VAL1 <= WAFF ;
    if( INSTR_IN_ZY ) WAFF_PREV_VAL2 <= WAFF_PREV_VAL1 ;
  end
 // ground taints for unused wire slices
  assign { ADR_R1 [0], ADR_R1 [1], ADR_R1 [2], ADR_R1 [3], ADR_R1 [4], ADR_R1 [6] } = 0;
  assign { ADR_X1 [0], ADR_X1 [1], ADR_X1 [2], ADR_X1 [3], ADR_X1 [4], ADR_X1 [6] } = 0;
  assign { ADR_C1 [0], ADR_C1 [1], ADR_C1 [2], ADR_C1 [3], ADR_C1 [4], ADR_C1 [6] } = 0;
  assign { WAFF_R3 [0] } = 0;
  assign { WAFF_X3 [0] } = 0;
  assign { WAFF_C3 [0] } = 0;
  assert property( RADR_r_flag == 0 || RADR_PREV_VAL1 == RADR_PREV_VAL2 );
  assert property( RE_LATB_r_flag == 0 || RE_LATB_PREV_VAL1 == RE_LATB_PREV_VAL2 );
  assert property( WAFF_r_flag == 0 || WAFF_PREV_VAL1 == WAFF_PREV_VAL2 );
  assert property( WDQ_pr_r_flag == 0 || WDQ_pr_PREV_VAL1 == WDQ_pr_PREV_VAL2 );
  assert property( WE_FF_r_flag == 0 || WE_FF_PREV_VAL1 == WE_FF_PREV_VAL2 );
  assert property( WE_LATB_r_flag == 0 || WE_LATB_PREV_VAL1 == WE_LATB_PREV_VAL2 );
  assert property( dout_r_flag == 0 || dout_PREV_VAL1 == dout_PREV_VAL2 );
endmodule
