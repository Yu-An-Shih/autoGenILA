module NV_NVDLA_BDMA_STORE_lat_fifo ( lat_fifo_rd_prdy , lat_fifo_wr_pd , lat_fifo_wr_pvld , nvdla_core_clk , nvdla_core_rstn , pwrbus_ram_pd , INSTR_IN_ZY , lat_fifo_rd_pd_R0 , lat_fifo_rd_pd_C0 , lat_fifo_rd_pd_X0 , lat_fifo_rd_prdy_T , lat_fifo_rd_prdy_S , lat_fifo_rd_pvld_R0 , lat_fifo_rd_pvld_C0 , lat_fifo_rd_pvld_X0 , lat_fifo_wr_pd_T , lat_fifo_wr_pd_S , lat_fifo_wr_prdy_R0 , lat_fifo_wr_prdy_C0 , lat_fifo_wr_prdy_X0 , lat_fifo_wr_pvld_T , lat_fifo_wr_pvld_S , nvdla_core_clk_T , nvdla_core_clk_S , nvdla_core_rstn_T , nvdla_core_rstn_S , pwrbus_ram_pd_T , pwrbus_ram_pd_S , lat_fifo_rd_pd , lat_fifo_rd_pvld , lat_fifo_wr_prdy , lat_fifo_rd_pd_T , lat_fifo_rd_pd_S , lat_fifo_rd_prdy_R , lat_fifo_rd_prdy_X , lat_fifo_rd_prdy_C , lat_fifo_rd_pvld_T , lat_fifo_rd_pvld_S , lat_fifo_wr_pd_R , lat_fifo_wr_pd_X , lat_fifo_wr_pd_C , lat_fifo_wr_prdy_T , lat_fifo_wr_prdy_S , lat_fifo_wr_pvld_R , lat_fifo_wr_pvld_X , lat_fifo_wr_pvld_C , nvdla_core_clk_R , nvdla_core_clk_X , nvdla_core_clk_C , nvdla_core_rstn_R , nvdla_core_rstn_X , nvdla_core_rstn_C , pwrbus_ram_pd_R , pwrbus_ram_pd_X , pwrbus_ram_pd_C );
  logic rst_zy;
  integer i;
  input INSTR_IN_ZY;
  logic [7:0] _00_;
  logic [7:0] _00__T ;
  logic [7:0] _00__R ;
  logic [7:0] _00__C ;
  logic [7:0] _00__X ;
  logic [13:0] _00__S ;
  logic _01_;
  logic _01__T ;
  logic _01__R ;
  logic _01__C ;
  logic _01__X ;
  logic [13:0] _01__S ;
  logic [7:0] _02_;
  logic [7:0] _02__T ;
  logic [7:0] _02__R ;
  logic [7:0] _02__C ;
  logic [7:0] _02__X ;
  logic [13:0] _02__S ;
  logic [7:0] _03_;
  logic [7:0] _03__T ;
  logic [7:0] _03__R ;
  logic [7:0] _03__C ;
  logic [7:0] _03__X ;
  logic [13:0] _03__S ;
  logic [7:0] _04_;
  logic [7:0] _04__T ;
  logic [7:0] _04__R ;
  logic [7:0] _04__C ;
  logic [7:0] _04__X ;
  logic [13:0] _04__S ;
  logic [7:0] _05_;
  logic [7:0] _05__T ;
  logic [7:0] _05__R ;
  logic [7:0] _05__C ;
  logic [7:0] _05__X ;
  logic [13:0] _05__S ;
  logic [7:0] _06_;
  logic [7:0] _06__T ;
  logic [7:0] _06__R ;
  logic [7:0] _06__C ;
  logic [7:0] _06__X ;
  logic [13:0] _06__S ;
  logic [7:0] _07_;
  logic [7:0] _07__T ;
  logic [7:0] _07__R ;
  logic [7:0] _07__C ;
  logic [7:0] _07__X ;
  logic [13:0] _07__S ;
  logic _08_;
  logic _08__T ;
  logic _08__R ;
  logic _08__C ;
  logic _08__X ;
  logic [13:0] _08__S ;
  logic _09_;
  logic _09__T ;
  logic _09__R ;
  logic _09__C ;
  logic _09__X ;
  logic [13:0] _09__S ;
  logic _10_;
  logic _10__T ;
  logic _10__R ;
  logic _10__C ;
  logic _10__X ;
  logic [13:0] _10__S ;
  logic _11_;
  logic _11__T ;
  logic _11__R ;
  logic _11__C ;
  logic _11__X ;
  logic [13:0] _11__S ;
  logic _12_;
  logic _12__T ;
  logic _12__R ;
  logic _12__C ;
  logic _12__X ;
  logic [13:0] _12__S ;
  logic _13_;
  logic _13__T ;
  logic _13__R ;
  logic _13__C ;
  logic _13__X ;
  logic [13:0] _13__S ;
  logic _14_;
  logic _14__T ;
  logic _14__R ;
  logic _14__C ;
  logic _14__X ;
  logic [13:0] _14__S ;
  logic _15_;
  logic _15__T ;
  logic _15__R ;
  logic _15__C ;
  logic _15__X ;
  logic [13:0] _15__S ;
  logic _16_;
  logic _16__T ;
  logic _16__R ;
  logic _16__C ;
  logic _16__X ;
  logic [13:0] _16__S ;
  logic _17_;
  logic _17__T ;
  logic _17__R ;
  logic _17__C ;
  logic _17__X ;
  logic [13:0] _17__S ;
  logic _18_;
  logic _18__T ;
  logic _18__R ;
  logic _18__C ;
  logic _18__X ;
  logic [13:0] _18__S ;
  logic _19_;
  logic _19__T ;
  logic _19__R ;
  logic _19__C ;
  logic _19__X ;
  logic [13:0] _19__S ;
  logic _20_;
  logic _20__T ;
  logic _20__R ;
  logic _20__C ;
  logic _20__X ;
  logic [13:0] _20__S ;
  logic _21_;
  logic _21__T ;
  logic _21__R ;
  logic _21__C ;
  logic _21__X ;
  logic [13:0] _21__S ;
  logic _22_;
  logic _22__T ;
  logic _22__R ;
  logic _22__C ;
  logic _22__X ;
  logic [13:0] _22__S ;
  logic _23_;
  logic _23__T ;
  logic _23__R ;
  logic _23__C ;
  logic _23__X ;
  logic [13:0] _23__S ;
  logic _24_;
  logic _24__T ;
  logic _24__R ;
  logic _24__C ;
  logic _24__X ;
  logic [13:0] _24__S ;
  logic [7:0] _25_;
  logic [7:0] _25__T ;
  logic [7:0] _25__R ;
  logic [7:0] _25__C ;
  logic [7:0] _25__X ;
  logic [13:0] _25__S ;
  logic [7:0] _26_;
  logic [7:0] _26__T ;
  logic [7:0] _26__R ;
  logic [7:0] _26__C ;
  logic [7:0] _26__X ;
  logic [13:0] _26__S ;
  logic [7:0] lat_fifo_rd_adr;
  logic [7:0]  lat_fifo_rd_adr_T ;
  logic [7:0]  lat_fifo_rd_adr_PREV_VAL1 ;
  logic [7:0]  lat_fifo_rd_adr_PREV_VAL2 ;
  logic [7:0]  lat_fifo_rd_adr_R ;
  logic [7:0]  lat_fifo_rd_adr_X ;
  logic [7:0]  lat_fifo_rd_adr_C ;
  logic [13:0] lat_fifo_rd_adr_S ;
  logic lat_fifo_rd_adr_t_flag ;
  logic lat_fifo_rd_adr_r_flag ;
  assign lat_fifo_rd_adr_S = 766 ;
  logic [7:0] lat_fifo_rd_adr_p;
  logic [7:0] lat_fifo_rd_adr_p_T ;
  logic [7:0] lat_fifo_rd_adr_p_R ;
  logic [7:0] lat_fifo_rd_adr_p_C ;
  logic [7:0] lat_fifo_rd_adr_p_X ;
  logic [13:0] lat_fifo_rd_adr_p_S ;
  logic [7:0] lat_fifo_rd_count_p;
  logic [7:0]  lat_fifo_rd_count_p_T ;
  logic [7:0]  lat_fifo_rd_count_p_PREV_VAL1 ;
  logic [7:0]  lat_fifo_rd_count_p_PREV_VAL2 ;
  logic [7:0]  lat_fifo_rd_count_p_R ;
  logic [7:0]  lat_fifo_rd_count_p_X ;
  logic [7:0]  lat_fifo_rd_count_p_C ;
  logic [13:0] lat_fifo_rd_count_p_S ;
  logic lat_fifo_rd_count_p_t_flag ;
  logic lat_fifo_rd_count_p_r_flag ;
  assign lat_fifo_rd_count_p_S = 767 ;
  output [513:0] lat_fifo_rd_pd;
  logic [513:0] lat_fifo_rd_pd ;
  output [513:0] lat_fifo_rd_pd_T ;
  logic [513:0] lat_fifo_rd_pd_T ;
  logic [513:0] lat_fifo_rd_pd_R ;
  logic [513:0] lat_fifo_rd_pd_C ;
  logic [513:0] lat_fifo_rd_pd_X ;
  logic [13:0] lat_fifo_rd_pd_S ;
  input [513:0] lat_fifo_rd_pd_R0 ;
  input [513:0] lat_fifo_rd_pd_C0 ;
  input [513:0] lat_fifo_rd_pd_X0 ;
  output [13:0] lat_fifo_rd_pd_S ;
  logic [513:0] lat_fifo_rd_pd_p;
  logic [513:0] lat_fifo_rd_pd_p_T ;
  logic [513:0] lat_fifo_rd_pd_p_R ;
  logic [513:0] lat_fifo_rd_pd_p_C ;
  logic [513:0] lat_fifo_rd_pd_p_X ;
  logic [13:0] lat_fifo_rd_pd_p_S ;
  input lat_fifo_rd_prdy;
  input lat_fifo_rd_prdy_T ;
  input [13:0] lat_fifo_rd_prdy_S ;
  output lat_fifo_rd_prdy_R ;
  output lat_fifo_rd_prdy_X ;
  output lat_fifo_rd_prdy_C ;
  output lat_fifo_rd_pvld;
  logic lat_fifo_rd_pvld ;
  output lat_fifo_rd_pvld_T ;
  logic lat_fifo_rd_pvld_T ;
  logic lat_fifo_rd_pvld_R ;
  logic lat_fifo_rd_pvld_C ;
  logic lat_fifo_rd_pvld_X ;
  logic [13:0] lat_fifo_rd_pvld_S ;
  input lat_fifo_rd_pvld_R0 ;
  input lat_fifo_rd_pvld_C0 ;
  input lat_fifo_rd_pvld_X0 ;
  output [13:0] lat_fifo_rd_pvld_S ;
  logic lat_fifo_rd_pvld_int;
  logic  lat_fifo_rd_pvld_int_T ;
  logic  lat_fifo_rd_pvld_int_PREV_VAL1 ;
  logic  lat_fifo_rd_pvld_int_PREV_VAL2 ;
  logic  lat_fifo_rd_pvld_int_R ;
  logic  lat_fifo_rd_pvld_int_X ;
  logic  lat_fifo_rd_pvld_int_C ;
  logic [13:0] lat_fifo_rd_pvld_int_S ;
  logic lat_fifo_rd_pvld_int_t_flag ;
  logic lat_fifo_rd_pvld_int_r_flag ;
  assign lat_fifo_rd_pvld_int_S = 768 ;
  logic lat_fifo_rd_pvld_p;
  logic  lat_fifo_rd_pvld_p_T ;
  logic  lat_fifo_rd_pvld_p_PREV_VAL1 ;
  logic  lat_fifo_rd_pvld_p_PREV_VAL2 ;
  logic  lat_fifo_rd_pvld_p_R ;
  logic  lat_fifo_rd_pvld_p_X ;
  logic  lat_fifo_rd_pvld_p_C ;
  logic [13:0] lat_fifo_rd_pvld_p_S ;
  logic lat_fifo_rd_pvld_p_t_flag ;
  logic lat_fifo_rd_pvld_p_r_flag ;
  assign lat_fifo_rd_pvld_p_S = 769 ;
  logic [7:0] lat_fifo_wr_adr;
  logic [7:0]  lat_fifo_wr_adr_T ;
  logic [7:0]  lat_fifo_wr_adr_PREV_VAL1 ;
  logic [7:0]  lat_fifo_wr_adr_PREV_VAL2 ;
  logic [7:0]  lat_fifo_wr_adr_R ;
  logic [7:0]  lat_fifo_wr_adr_X ;
  logic [7:0]  lat_fifo_wr_adr_C ;
  logic [13:0] lat_fifo_wr_adr_S ;
  logic lat_fifo_wr_adr_t_flag ;
  logic lat_fifo_wr_adr_r_flag ;
  assign lat_fifo_wr_adr_S = 770 ;
  logic lat_fifo_wr_busy_int;
  logic  lat_fifo_wr_busy_int_T ;
  logic  lat_fifo_wr_busy_int_PREV_VAL1 ;
  logic  lat_fifo_wr_busy_int_PREV_VAL2 ;
  logic  lat_fifo_wr_busy_int_R ;
  logic  lat_fifo_wr_busy_int_X ;
  logic  lat_fifo_wr_busy_int_C ;
  logic [13:0] lat_fifo_wr_busy_int_S ;
  logic lat_fifo_wr_busy_int_t_flag ;
  logic lat_fifo_wr_busy_int_r_flag ;
  assign lat_fifo_wr_busy_int_S = 771 ;
  logic lat_fifo_wr_busy_next;
  logic lat_fifo_wr_busy_next_T ;
  logic lat_fifo_wr_busy_next_R ;
  logic lat_fifo_wr_busy_next_C ;
  logic lat_fifo_wr_busy_next_X ;
  logic [13:0] lat_fifo_wr_busy_next_S ;
  logic [7:0] lat_fifo_wr_count;
  logic [7:0]  lat_fifo_wr_count_T ;
  logic [7:0]  lat_fifo_wr_count_PREV_VAL1 ;
  logic [7:0]  lat_fifo_wr_count_PREV_VAL2 ;
  logic [7:0]  lat_fifo_wr_count_R ;
  logic [7:0]  lat_fifo_wr_count_X ;
  logic [7:0]  lat_fifo_wr_count_C ;
  logic [13:0] lat_fifo_wr_count_S ;
  logic lat_fifo_wr_count_t_flag ;
  logic lat_fifo_wr_count_r_flag ;
  assign lat_fifo_wr_count_S = 772 ;
  input [513:0] lat_fifo_wr_pd;
  input [513:0] lat_fifo_wr_pd_T ;
  input [13:0] lat_fifo_wr_pd_S ;
  output [513:0] lat_fifo_wr_pd_R ;
  output [513:0] lat_fifo_wr_pd_X ;
  output [513:0] lat_fifo_wr_pd_C ;
  output lat_fifo_wr_prdy;
  logic lat_fifo_wr_prdy ;
  output lat_fifo_wr_prdy_T ;
  logic lat_fifo_wr_prdy_T ;
  logic lat_fifo_wr_prdy_R ;
  logic lat_fifo_wr_prdy_C ;
  logic lat_fifo_wr_prdy_X ;
  logic [13:0] lat_fifo_wr_prdy_S ;
  input lat_fifo_wr_prdy_R0 ;
  input lat_fifo_wr_prdy_C0 ;
  input lat_fifo_wr_prdy_X0 ;
  output [13:0] lat_fifo_wr_prdy_S ;
  input lat_fifo_wr_pvld;
  input lat_fifo_wr_pvld_T ;
  input [13:0] lat_fifo_wr_pvld_S ;
  output lat_fifo_wr_pvld_R ;
  output lat_fifo_wr_pvld_X ;
  output lat_fifo_wr_pvld_C ;
  input nvdla_core_clk;
  input nvdla_core_clk_T ;
  input [13:0] nvdla_core_clk_S ;
  output nvdla_core_clk_R ;
  output nvdla_core_clk_X ;
  output nvdla_core_clk_C ;
  logic nvdla_core_clk_mgated;
  logic nvdla_core_clk_mgated_T ;
  logic nvdla_core_clk_mgated_R ;
  logic nvdla_core_clk_mgated_C ;
  logic nvdla_core_clk_mgated_X ;
  logic [13:0] nvdla_core_clk_mgated_S ;
  logic nvdla_core_clk_mgated_enable;
  logic nvdla_core_clk_mgated_enable_T ;
  logic nvdla_core_clk_mgated_enable_R ;
  logic nvdla_core_clk_mgated_enable_C ;
  logic nvdla_core_clk_mgated_enable_X ;
  logic [13:0] nvdla_core_clk_mgated_enable_S ;
  input nvdla_core_rstn;
  input nvdla_core_rstn_T ;
  input [13:0] nvdla_core_rstn_S ;
  output nvdla_core_rstn_R ;
  output nvdla_core_rstn_X ;
  output nvdla_core_rstn_C ;
  logic ore;
  logic ore_T ;
  logic ore_R ;
  logic ore_C ;
  logic ore_X ;
  logic [13:0] ore_S ;
  input [31:0] pwrbus_ram_pd;
  input [31:0] pwrbus_ram_pd_T ;
  input [13:0] pwrbus_ram_pd_S ;
  output [31:0] pwrbus_ram_pd_R ;
  output [31:0] pwrbus_ram_pd_X ;
  output [31:0] pwrbus_ram_pd_C ;
  logic [7:0] rd_adr_next;
  logic [7:0] rd_adr_next_T ;
  logic [7:0] rd_adr_next_R ;
  logic [7:0] rd_adr_next_C ;
  logic [7:0] rd_adr_next_X ;
  logic [13:0] rd_adr_next_S ;
  logic [7:0] rd_count_p_next;
  logic [7:0] rd_count_p_next_T ;
  logic [7:0] rd_count_p_next_R ;
  logic [7:0] rd_count_p_next_C ;
  logic [7:0] rd_count_p_next_X ;
  logic [13:0] rd_count_p_next_S ;
  logic [7:0] rd_count_p_next_no_rd_popping;
  logic [7:0] rd_count_p_next_no_rd_popping_T ;
  logic [7:0] rd_count_p_next_no_rd_popping_R ;
  logic [7:0] rd_count_p_next_no_rd_popping_C ;
  logic [7:0] rd_count_p_next_no_rd_popping_X ;
  logic [13:0] rd_count_p_next_no_rd_popping_S ;
  logic rd_count_p_next_no_rd_popping_not_0;
  logic rd_count_p_next_no_rd_popping_not_0_T ;
  logic rd_count_p_next_no_rd_popping_not_0_R ;
  logic rd_count_p_next_no_rd_popping_not_0_C ;
  logic rd_count_p_next_no_rd_popping_not_0_X ;
  logic [13:0] rd_count_p_next_no_rd_popping_not_0_S ;
  logic rd_count_p_next_not_0;
  logic rd_count_p_next_not_0_T ;
  logic rd_count_p_next_not_0_R ;
  logic rd_count_p_next_not_0_C ;
  logic rd_count_p_next_not_0_X ;
  logic [13:0] rd_count_p_next_not_0_S ;
  logic [7:0] rd_count_p_next_rd_popping;
  logic [7:0] rd_count_p_next_rd_popping_T ;
  logic [7:0] rd_count_p_next_rd_popping_R ;
  logic [7:0] rd_count_p_next_rd_popping_C ;
  logic [7:0] rd_count_p_next_rd_popping_X ;
  logic [13:0] rd_count_p_next_rd_popping_S ;
  logic rd_count_p_next_rd_popping_not_0;
  logic rd_count_p_next_rd_popping_not_0_T ;
  logic rd_count_p_next_rd_popping_not_0_R ;
  logic rd_count_p_next_rd_popping_not_0_C ;
  logic rd_count_p_next_rd_popping_not_0_X ;
  logic [13:0] rd_count_p_next_rd_popping_not_0_S ;
  logic rd_enable;
  logic rd_enable_T ;
  logic rd_enable_R ;
  logic rd_enable_C ;
  logic rd_enable_X ;
  logic [13:0] rd_enable_S ;
  logic rd_popping;
  logic rd_popping_T ;
  logic rd_popping_R ;
  logic rd_popping_C ;
  logic rd_popping_X ;
  logic [13:0] rd_popping_S ;
  logic rd_pushing;
  logic  rd_pushing_T ;
  logic  rd_pushing_PREV_VAL1 ;
  logic  rd_pushing_PREV_VAL2 ;
  logic  rd_pushing_R ;
  logic  rd_pushing_X ;
  logic  rd_pushing_C ;
  logic [13:0] rd_pushing_S ;
  logic rd_pushing_t_flag ;
  logic rd_pushing_r_flag ;
  assign rd_pushing_S = 773 ;
  logic rd_req_next;
  logic rd_req_next_T ;
  logic rd_req_next_R ;
  logic rd_req_next_C ;
  logic rd_req_next_X ;
  logic [13:0] rd_req_next_S ;
  logic [7:0] wr_adr_next;
  logic [7:0] wr_adr_next_T ;
  logic [7:0] wr_adr_next_R ;
  logic [7:0] wr_adr_next_C ;
  logic [7:0] wr_adr_next_X ;
  logic [13:0] wr_adr_next_S ;
  logic [7:0] wr_count_next;
  logic [7:0] wr_count_next_T ;
  logic [7:0] wr_count_next_R ;
  logic [7:0] wr_count_next_C ;
  logic [7:0] wr_count_next_X ;
  logic [13:0] wr_count_next_S ;
  logic wr_count_next_is_245;
  logic wr_count_next_is_245_T ;
  logic wr_count_next_is_245_R ;
  logic wr_count_next_is_245_C ;
  logic wr_count_next_is_245_X ;
  logic [13:0] wr_count_next_is_245_S ;
  logic [7:0] wr_count_next_no_wr_popping;
  logic [7:0] wr_count_next_no_wr_popping_T ;
  logic [7:0] wr_count_next_no_wr_popping_R ;
  logic [7:0] wr_count_next_no_wr_popping_C ;
  logic [7:0] wr_count_next_no_wr_popping_X ;
  logic [13:0] wr_count_next_no_wr_popping_S ;
  logic wr_count_next_no_wr_popping_is_245;
  logic wr_count_next_no_wr_popping_is_245_T ;
  logic wr_count_next_no_wr_popping_is_245_R ;
  logic wr_count_next_no_wr_popping_is_245_C ;
  logic wr_count_next_no_wr_popping_is_245_X ;
  logic [13:0] wr_count_next_no_wr_popping_is_245_S ;
  logic [7:0] wr_count_next_wr_popping;
  logic [7:0] wr_count_next_wr_popping_T ;
  logic [7:0] wr_count_next_wr_popping_R ;
  logic [7:0] wr_count_next_wr_popping_C ;
  logic [7:0] wr_count_next_wr_popping_X ;
  logic [13:0] wr_count_next_wr_popping_S ;
  logic [7:0] wr_limit_muxed;
  logic [7:0] wr_limit_muxed_T ;
  logic [7:0] wr_limit_muxed_R ;
  logic [7:0] wr_limit_muxed_C ;
  logic [7:0] wr_limit_muxed_X ;
  logic [13:0] wr_limit_muxed_S ;
  logic [7:0] wr_limit_reg;
  logic [7:0] wr_limit_reg_T ;
  logic [7:0] wr_limit_reg_R ;
  logic [7:0] wr_limit_reg_C ;
  logic [7:0] wr_limit_reg_X ;
  logic [13:0] wr_limit_reg_S ;
  logic wr_popping;
  logic  wr_popping_T ;
  logic  wr_popping_PREV_VAL1 ;
  logic  wr_popping_PREV_VAL2 ;
  logic  wr_popping_R ;
  logic  wr_popping_X ;
  logic  wr_popping_C ;
  logic [13:0] wr_popping_S ;
  logic wr_popping_t_flag ;
  logic wr_popping_r_flag ;
  assign wr_popping_S = 774 ;
  logic wr_pushing;
  logic wr_pushing_T ;
  logic wr_pushing_R ;
  logic wr_pushing_C ;
  logic wr_pushing_X ;
  logic [13:0] wr_pushing_S ;
  logic wr_reserving;
  logic wr_reserving_T ;
  logic wr_reserving_R ;
  logic wr_reserving_C ;
  logic wr_reserving_X ;
  logic [13:0] wr_reserving_S ;
  assign _04_ = lat_fifo_wr_count + 1'b1;
  assign _04__S = 0 ;
  logic [7:0] lat_fifo_wr_count_C0 ;
  logic [7:0] lat_fifo_wr_count_R0 ;
  logic [7:0] lat_fifo_wr_count_X0 ;
  assign _04__T = lat_fifo_wr_count_T ;
  assign lat_fifo_wr_count_C0 = _04__C ;
  assign lat_fifo_wr_count_R0 = _04__R ;
  assign lat_fifo_wr_count_X0 = _04__X ;
  assign _05_ = lat_fifo_wr_adr + 1'b1;
  assign _05__S = 0 ;
  logic [7:0] lat_fifo_wr_adr_C0 ;
  logic [7:0] lat_fifo_wr_adr_R0 ;
  logic [7:0] lat_fifo_wr_adr_X0 ;
  assign _05__T = lat_fifo_wr_adr_T ;
  assign lat_fifo_wr_adr_C0 = _05__C ;
  assign lat_fifo_wr_adr_R0 = _05__R ;
  assign lat_fifo_wr_adr_X0 = _05__X ;
  assign _06_ = lat_fifo_rd_adr + 1'b1;
  assign _06__S = 0 ;
  logic [7:0] lat_fifo_rd_adr_C0 ;
  logic [7:0] lat_fifo_rd_adr_R0 ;
  logic [7:0] lat_fifo_rd_adr_X0 ;
  assign _06__T = lat_fifo_rd_adr_T ;
  assign lat_fifo_rd_adr_C0 = _06__C ;
  assign lat_fifo_rd_adr_R0 = _06__R ;
  assign lat_fifo_rd_adr_X0 = _06__X ;
  assign _07_ = lat_fifo_rd_count_p + 1'b1;
  assign _07__S = 0 ;
  logic [7:0] lat_fifo_rd_count_p_C0 ;
  logic [7:0] lat_fifo_rd_count_p_R0 ;
  logic [7:0] lat_fifo_rd_count_p_X0 ;
  assign _07__T = lat_fifo_rd_count_p_T ;
  assign lat_fifo_rd_count_p_C0 = _07__C ;
  assign lat_fifo_rd_count_p_R0 = _07__R ;
  assign lat_fifo_rd_count_p_X0 = _07__X ;
  assign wr_count_next_no_wr_popping_is_245 = wr_count_next_no_wr_popping == 8'b11110101;
  assign wr_count_next_no_wr_popping_is_245_S = 0 ;
  logic [7:0] wr_count_next_no_wr_popping_C0 ;
  logic [7:0] wr_count_next_no_wr_popping_R0 ;
  logic [7:0] wr_count_next_no_wr_popping_X0 ;
  assign wr_count_next_no_wr_popping_is_245_T = | wr_count_next_no_wr_popping_T ;
  assign wr_count_next_no_wr_popping_C0 = { 8{ wr_count_next_no_wr_popping_is_245_C }} ;
  assign wr_count_next_no_wr_popping_R0 = { 8{ wr_count_next_no_wr_popping_is_245_R }} ;
  assign wr_count_next_no_wr_popping_X0 = { 8{ wr_count_next_no_wr_popping_is_245_X }} ;
  assign _08_ = lat_fifo_wr_adr == 8'b11110100;
  assign _08__S = 0 ;
  logic [7:0] lat_fifo_wr_adr_C1 ;
  logic [7:0] lat_fifo_wr_adr_R1 ;
  logic [7:0] lat_fifo_wr_adr_X1 ;
  assign _08__T = | lat_fifo_wr_adr_T ;
  assign lat_fifo_wr_adr_C1 = { 8{ _08__C }} ;
  assign lat_fifo_wr_adr_R1 = { 8{ _08__R }} ;
  assign lat_fifo_wr_adr_X1 = { 8{ _08__X }} ;
  assign _09_ = lat_fifo_rd_adr == 8'b11110100;
  assign _09__S = 0 ;
  logic [7:0] lat_fifo_rd_adr_C1 ;
  logic [7:0] lat_fifo_rd_adr_R1 ;
  logic [7:0] lat_fifo_rd_adr_X1 ;
  assign _09__T = | lat_fifo_rd_adr_T ;
  assign lat_fifo_rd_adr_C1 = { 8{ _09__C }} ;
  assign lat_fifo_rd_adr_R1 = { 8{ _09__R }} ;
  assign lat_fifo_rd_adr_X1 = { 8{ _09__X }} ;
  assign wr_pushing = lat_fifo_wr_pvld && lat_fifo_wr_prdy;
  assign wr_pushing_S = 0 ;
  logic [0:0] lat_fifo_wr_pvld_C0 ;
  logic [0:0] lat_fifo_wr_pvld_R0 ;
  logic [0:0] lat_fifo_wr_pvld_X0 ;
  logic [0:0] lat_fifo_wr_prdy_C1 ;
  logic [0:0] lat_fifo_wr_prdy_R1 ;
  logic [0:0] lat_fifo_wr_prdy_X1 ;
  assign wr_pushing_T = lat_fifo_wr_pvld_T | lat_fifo_wr_prdy_T ;
  assign lat_fifo_wr_pvld_C0 = wr_pushing_C ;
  assign lat_fifo_wr_pvld_X0 = wr_pushing_X ;
  assign lat_fifo_wr_prdy_C1 = wr_pushing_C ;
  assign lat_fifo_wr_prdy_X1 = wr_pushing_X ;
  assign lat_fifo_wr_pvld_R0 = ( wr_pushing_R | wr_pushing_C & lat_fifo_wr_prdy_T ) & { 1{ lat_fifo_wr_prdy != 0 }} ;
  assign lat_fifo_wr_prdy_R1 = ( wr_pushing_R | wr_pushing_C & lat_fifo_wr_pvld_T ) & { 1{ lat_fifo_wr_pvld != 0 }} ;
  assign _10_ = lat_fifo_rd_pvld_int && _12_;
  assign _10__S = 0 ;
  logic [0:0] lat_fifo_rd_pvld_int_C0 ;
  logic [0:0] lat_fifo_rd_pvld_int_R0 ;
  logic [0:0] lat_fifo_rd_pvld_int_X0 ;
  logic [0:0] _12__C0 ;
  logic [0:0] _12__R0 ;
  logic [0:0] _12__X0 ;
  assign _10__T = lat_fifo_rd_pvld_int_T | _12__T ;
  assign lat_fifo_rd_pvld_int_C0 = _10__C ;
  assign lat_fifo_rd_pvld_int_X0 = _10__X ;
  assign _12__C0 = _10__C ;
  assign _12__X0 = _10__X ;
  assign lat_fifo_rd_pvld_int_R0 = ( _10__R | _10__C & _12__T ) & { 1{ _12_ != 0 }} ;
  assign _12__R0 = ( _10__R | _10__C & lat_fifo_rd_pvld_int_T ) & { 1{ lat_fifo_rd_pvld_int != 0 }} ;
  assign ore = lat_fifo_rd_pvld_p && _13_;
  assign ore_S = 0 ;
  logic [0:0] lat_fifo_rd_pvld_p_C0 ;
  logic [0:0] lat_fifo_rd_pvld_p_R0 ;
  logic [0:0] lat_fifo_rd_pvld_p_X0 ;
  logic [0:0] _13__C0 ;
  logic [0:0] _13__R0 ;
  logic [0:0] _13__X0 ;
  assign ore_T = lat_fifo_rd_pvld_p_T | _13__T ;
  assign lat_fifo_rd_pvld_p_C0 = ore_C ;
  assign lat_fifo_rd_pvld_p_X0 = ore_X ;
  assign _13__C0 = ore_C ;
  assign _13__X0 = ore_X ;
  assign lat_fifo_rd_pvld_p_R0 = ( ore_R | ore_C & _13__T ) & { 1{ _13_ != 0 }} ;
  assign _13__R0 = ( ore_R | ore_C & lat_fifo_rd_pvld_p_T ) & { 1{ lat_fifo_rd_pvld_p != 0 }} ;
  assign rd_enable = rd_count_p_next_not_0 && _14_;
  assign rd_enable_S = 0 ;
  logic [0:0] rd_count_p_next_not_0_C0 ;
  logic [0:0] rd_count_p_next_not_0_R0 ;
  logic [0:0] rd_count_p_next_not_0_X0 ;
  logic [0:0] _14__C0 ;
  logic [0:0] _14__R0 ;
  logic [0:0] _14__X0 ;
  assign rd_enable_T = rd_count_p_next_not_0_T | _14__T ;
  assign rd_count_p_next_not_0_C0 = rd_enable_C ;
  assign rd_count_p_next_not_0_X0 = rd_enable_X ;
  assign _14__C0 = rd_enable_C ;
  assign _14__X0 = rd_enable_X ;
  assign rd_count_p_next_not_0_R0 = ( rd_enable_R | rd_enable_C & _14__T ) & { 1{ _14_ != 0 }} ;
  assign _14__R0 = ( rd_enable_R | rd_enable_C & rd_count_p_next_not_0_T ) & { 1{ rd_count_p_next_not_0 != 0 }} ;
  assign _11_ = lat_fifo_rd_pvld_int && lat_fifo_rd_prdy;
  assign _11__S = 0 ;
  logic [0:0] lat_fifo_rd_pvld_int_C1 ;
  logic [0:0] lat_fifo_rd_pvld_int_R1 ;
  logic [0:0] lat_fifo_rd_pvld_int_X1 ;
  logic [0:0] lat_fifo_rd_prdy_C0 ;
  logic [0:0] lat_fifo_rd_prdy_R0 ;
  logic [0:0] lat_fifo_rd_prdy_X0 ;
  assign _11__T = lat_fifo_rd_pvld_int_T | lat_fifo_rd_prdy_T ;
  assign lat_fifo_rd_pvld_int_C1 = _11__C ;
  assign lat_fifo_rd_pvld_int_X1 = _11__X ;
  assign lat_fifo_rd_prdy_C0 = _11__C ;
  assign lat_fifo_rd_prdy_X0 = _11__X ;
  assign lat_fifo_rd_pvld_int_R1 = ( _11__R | _11__C & lat_fifo_rd_prdy_T ) & { 1{ lat_fifo_rd_prdy != 0 }} ;
  assign lat_fifo_rd_prdy_R0 = ( _11__R | _11__C & lat_fifo_rd_pvld_int_T ) & { 1{ lat_fifo_rd_pvld_int != 0 }} ;
  assign lat_fifo_wr_prdy = ! lat_fifo_wr_busy_int;
  logic [0:0] lat_fifo_wr_busy_int_C0 ;
  logic [0:0] lat_fifo_wr_busy_int_R0 ;
  logic [0:0] lat_fifo_wr_busy_int_X0 ;
  assign lat_fifo_wr_prdy_T = | lat_fifo_wr_busy_int_T ;
  assign lat_fifo_wr_busy_int_C0 = { 1{ lat_fifo_wr_prdy_C }} ;
  assign lat_fifo_wr_busy_int_X0 = { 1{ lat_fifo_wr_prdy_X }} ;
  assign lat_fifo_wr_busy_int_R0 = { 1{ lat_fifo_wr_prdy_R }} ;
  assign lat_fifo_wr_prdy_S = 0 ;
  assign _12_ = ! lat_fifo_rd_prdy;
  logic [0:0] lat_fifo_rd_prdy_C1 ;
  logic [0:0] lat_fifo_rd_prdy_R1 ;
  logic [0:0] lat_fifo_rd_prdy_X1 ;
  assign _12__T = | lat_fifo_rd_prdy_T ;
  assign lat_fifo_rd_prdy_C1 = { 1{ _12__C }} ;
  assign lat_fifo_rd_prdy_X1 = { 1{ _12__X }} ;
  assign lat_fifo_rd_prdy_R1 = { 1{ _12__R }} ;
  assign _12__S = 0 ;
  assign _13_ = ! _10_;
  logic [0:0] _10__C0 ;
  logic [0:0] _10__R0 ;
  logic [0:0] _10__X0 ;
  assign _13__T = | _10__T ;
  assign _10__C0 = { 1{ _13__C }} ;
  assign _10__X0 = { 1{ _13__X }} ;
  assign _10__R0 = { 1{ _13__R }} ;
  assign _13__S = 0 ;
  assign _14_ = _23_ || ore;
  assign _14__S = 0 ;
  logic [0:0] _23__C0 ;
  logic [0:0] _23__R0 ;
  logic [0:0] _23__X0 ;
  logic [0:0] ore_C0 ;
  logic [0:0] ore_R0 ;
  logic [0:0] ore_X0 ;
  assign _14__T = _23__T | ore_T ;
  assign _23__C0 = _14__C ;
  assign _23__X0 = _14__X ;
  assign ore_C0 = _14__C ;
  assign ore_X0 = _14__X ;
  assign _23__R0 = ( _14__R | _14__C & ore_T ) & { 1{ ore == 0 }} ;
  assign ore_R0 = ( _14__R | _14__C & _23__T ) & { 1{ _23_ == 0 }} ;
  assign _15_ = rd_pushing || ore;
  assign _15__S = 0 ;
  logic [0:0] rd_pushing_C0 ;
  logic [0:0] rd_pushing_R0 ;
  logic [0:0] rd_pushing_X0 ;
  logic [0:0] ore_C1 ;
  logic [0:0] ore_R1 ;
  logic [0:0] ore_X1 ;
  assign _15__T = rd_pushing_T | ore_T ;
  assign rd_pushing_C0 = _15__C ;
  assign rd_pushing_X0 = _15__X ;
  assign ore_C1 = _15__C ;
  assign ore_X1 = _15__X ;
  assign rd_pushing_R0 = ( _15__R | _15__C & ore_T ) & { 1{ ore == 0 }} ;
  assign ore_R1 = ( _15__R | _15__C & rd_pushing_T ) & { 1{ rd_pushing == 0 }} ;
  assign rd_req_next = lat_fifo_rd_pvld_p || _10_;
  assign rd_req_next_S = 0 ;
  logic [0:0] lat_fifo_rd_pvld_p_C1 ;
  logic [0:0] lat_fifo_rd_pvld_p_R1 ;
  logic [0:0] lat_fifo_rd_pvld_p_X1 ;
  logic [0:0] _10__C1 ;
  logic [0:0] _10__R1 ;
  logic [0:0] _10__X1 ;
  assign rd_req_next_T = lat_fifo_rd_pvld_p_T | _10__T ;
  assign lat_fifo_rd_pvld_p_C1 = rd_req_next_C ;
  assign lat_fifo_rd_pvld_p_X1 = rd_req_next_X ;
  assign _10__C1 = rd_req_next_C ;
  assign _10__X1 = rd_req_next_X ;
  assign lat_fifo_rd_pvld_p_R1 = ( rd_req_next_R | rd_req_next_C & _10__T ) & { 1{ _10_ == 0 }} ;
  assign _10__R1 = ( rd_req_next_R | rd_req_next_C & lat_fifo_rd_pvld_p_T ) & { 1{ lat_fifo_rd_pvld_p == 0 }} ;
  assign _16_ = wr_pushing || ore;
  assign _16__S = 0 ;
  logic [0:0] wr_pushing_C0 ;
  logic [0:0] wr_pushing_R0 ;
  logic [0:0] wr_pushing_X0 ;
  logic [0:0] ore_C2 ;
  logic [0:0] ore_R2 ;
  logic [0:0] ore_X2 ;
  assign _16__T = wr_pushing_T | ore_T ;
  assign wr_pushing_C0 = _16__C ;
  assign wr_pushing_X0 = _16__X ;
  assign ore_C2 = _16__C ;
  assign ore_X2 = _16__X ;
  assign wr_pushing_R0 = ( _16__R | _16__C & ore_T ) & { 1{ ore == 0 }} ;
  assign ore_R2 = ( _16__R | _16__C & wr_pushing_T ) & { 1{ wr_pushing == 0 }} ;
  assign _17_ = _16_ || wr_popping;
  assign _17__S = 0 ;
  logic [0:0] _16__C0 ;
  logic [0:0] _16__R0 ;
  logic [0:0] _16__X0 ;
  logic [0:0] wr_popping_C0 ;
  logic [0:0] wr_popping_R0 ;
  logic [0:0] wr_popping_X0 ;
  assign _17__T = _16__T | wr_popping_T ;
  assign _16__C0 = _17__C ;
  assign _16__X0 = _17__X ;
  assign wr_popping_C0 = _17__C ;
  assign wr_popping_X0 = _17__X ;
  assign _16__R0 = ( _17__R | _17__C & wr_popping_T ) & { 1{ wr_popping == 0 }} ;
  assign wr_popping_R0 = ( _17__R | _17__C & _16__T ) & { 1{ _16_ == 0 }} ;
  assign _18_ = _17_ || wr_pushing;
  assign _18__S = 0 ;
  logic [0:0] _17__C0 ;
  logic [0:0] _17__R0 ;
  logic [0:0] _17__X0 ;
  logic [0:0] wr_pushing_C1 ;
  logic [0:0] wr_pushing_R1 ;
  logic [0:0] wr_pushing_X1 ;
  assign _18__T = _17__T | wr_pushing_T ;
  assign _17__C0 = _18__C ;
  assign _17__X0 = _18__X ;
  assign wr_pushing_C1 = _18__C ;
  assign wr_pushing_X1 = _18__X ;
  assign _17__R0 = ( _18__R | _18__C & wr_pushing_T ) & { 1{ wr_pushing == 0 }} ;
  assign wr_pushing_R1 = ( _18__R | _18__C & _17__T ) & { 1{ _17_ == 0 }} ;
  assign _19_ = _18_ || _22_;
  assign _19__S = 0 ;
  logic [0:0] _18__C0 ;
  logic [0:0] _18__R0 ;
  logic [0:0] _18__X0 ;
  logic [0:0] _22__C0 ;
  logic [0:0] _22__R0 ;
  logic [0:0] _22__X0 ;
  assign _19__T = _18__T | _22__T ;
  assign _18__C0 = _19__C ;
  assign _18__X0 = _19__X ;
  assign _22__C0 = _19__C ;
  assign _22__X0 = _19__X ;
  assign _18__R0 = ( _19__R | _19__C & _22__T ) & { 1{ _22_ == 0 }} ;
  assign _22__R0 = ( _19__R | _19__C & _18__T ) & { 1{ _18_ == 0 }} ;
  assign _20_ = _15_ || _11_;
  assign _20__S = 0 ;
  logic [0:0] _15__C0 ;
  logic [0:0] _15__R0 ;
  logic [0:0] _15__X0 ;
  logic [0:0] _11__C0 ;
  logic [0:0] _11__R0 ;
  logic [0:0] _11__X0 ;
  assign _20__T = _15__T | _11__T ;
  assign _15__C0 = _20__C ;
  assign _15__X0 = _20__X ;
  assign _11__C0 = _20__C ;
  assign _11__X0 = _20__X ;
  assign _15__R0 = ( _20__R | _20__C & _11__T ) & { 1{ _11_ == 0 }} ;
  assign _11__R0 = ( _20__R | _20__C & _15__T ) & { 1{ _15_ == 0 }} ;
  assign _21_ = _20_ || wr_pushing;
  assign _21__S = 0 ;
  logic [0:0] _20__C0 ;
  logic [0:0] _20__R0 ;
  logic [0:0] _20__X0 ;
  logic [0:0] wr_pushing_C2 ;
  logic [0:0] wr_pushing_R2 ;
  logic [0:0] wr_pushing_X2 ;
  assign _21__T = _20__T | wr_pushing_T ;
  assign _20__C0 = _21__C ;
  assign _20__X0 = _21__X ;
  assign wr_pushing_C2 = _21__C ;
  assign wr_pushing_X2 = _21__X ;
  assign _20__R0 = ( _21__R | _21__C & wr_pushing_T ) & { 1{ wr_pushing == 0 }} ;
  assign wr_pushing_R2 = ( _21__R | _21__C & _20__T ) & { 1{ _20_ == 0 }} ;
  assign nvdla_core_clk_mgated_enable = _19_ || _21_;
  assign nvdla_core_clk_mgated_enable_S = 0 ;
  logic [0:0] _19__C0 ;
  logic [0:0] _19__R0 ;
  logic [0:0] _19__X0 ;
  logic [0:0] _21__C0 ;
  logic [0:0] _21__R0 ;
  logic [0:0] _21__X0 ;
  assign nvdla_core_clk_mgated_enable_T = _19__T | _21__T ;
  assign _19__C0 = nvdla_core_clk_mgated_enable_C ;
  assign _19__X0 = nvdla_core_clk_mgated_enable_X ;
  assign _21__C0 = nvdla_core_clk_mgated_enable_C ;
  assign _21__X0 = nvdla_core_clk_mgated_enable_X ;
  assign _19__R0 = ( nvdla_core_clk_mgated_enable_R | nvdla_core_clk_mgated_enable_C & _21__T ) & { 1{ _21_ == 0 }} ;
  assign _21__R0 = ( nvdla_core_clk_mgated_enable_R | nvdla_core_clk_mgated_enable_C & _19__T ) & { 1{ _19_ == 0 }} ;
  assign rd_count_p_next_rd_popping_not_0 = | rd_count_p_next_rd_popping;
  logic [7:0] rd_count_p_next_rd_popping_C0 ;
  logic [7:0] rd_count_p_next_rd_popping_R0 ;
  logic [7:0] rd_count_p_next_rd_popping_X0 ;
  assign rd_count_p_next_rd_popping_not_0_T = | rd_count_p_next_rd_popping_T ;
  assign rd_count_p_next_rd_popping_C0 = { 8{ rd_count_p_next_rd_popping_not_0_C }} ;
  assign rd_count_p_next_rd_popping_X0 = { 8{ rd_count_p_next_rd_popping_not_0_X }} ;
  assign rd_count_p_next_rd_popping_R0 = { 8{ rd_count_p_next_rd_popping_not_0_R }} & rd_count_p_next_rd_popping ;
  assign rd_count_p_next_rd_popping_not_0_S = 0 ;
  assign rd_count_p_next_no_rd_popping_not_0 = | rd_count_p_next_no_rd_popping;
  logic [7:0] rd_count_p_next_no_rd_popping_C0 ;
  logic [7:0] rd_count_p_next_no_rd_popping_R0 ;
  logic [7:0] rd_count_p_next_no_rd_popping_X0 ;
  assign rd_count_p_next_no_rd_popping_not_0_T = | rd_count_p_next_no_rd_popping_T ;
  assign rd_count_p_next_no_rd_popping_C0 = { 8{ rd_count_p_next_no_rd_popping_not_0_C }} ;
  assign rd_count_p_next_no_rd_popping_X0 = { 8{ rd_count_p_next_no_rd_popping_not_0_X }} ;
  assign rd_count_p_next_no_rd_popping_R0 = { 8{ rd_count_p_next_no_rd_popping_not_0_R }} & rd_count_p_next_no_rd_popping ;
  assign rd_count_p_next_no_rd_popping_not_0_S = 0 ;
  assign _22_ = lat_fifo_wr_busy_int != lat_fifo_wr_busy_next;
  assign _22__S = 0 ;
  logic [0:0] lat_fifo_wr_busy_int_C1 ;
  logic [0:0] lat_fifo_wr_busy_int_R1 ;
  logic [0:0] lat_fifo_wr_busy_int_X1 ;
  logic [0:0] lat_fifo_wr_busy_next_C0 ;
  logic [0:0] lat_fifo_wr_busy_next_R0 ;
  logic [0:0] lat_fifo_wr_busy_next_X0 ;
  assign _22__T = (| lat_fifo_wr_busy_int_T ) | (|lat_fifo_wr_busy_next_T ) ;
  assign lat_fifo_wr_busy_int_C1 = { 1{ _22__C }} ;
  assign lat_fifo_wr_busy_int_R1 = { 1{ _22__R }} | ( { 1{ _22__C }} & lat_fifo_wr_busy_next_T );
  assign lat_fifo_wr_busy_int_X1 = { 1{ _22__X }} ;
  assign lat_fifo_wr_busy_next_C0 = { 1{ _22__C }} ;
  assign lat_fifo_wr_busy_next_R0 = { 1{ _22__R }} | ( { 1{ _22__C }} & lat_fifo_wr_busy_int_T );
  assign lat_fifo_wr_busy_next_X0 = { 1{ _22__X }} ;
  assign _23_ = ~ lat_fifo_rd_pvld_p;
  logic [0:0] lat_fifo_rd_pvld_p_C2 ;
  logic [0:0] lat_fifo_rd_pvld_p_R2 ;
  logic [0:0] lat_fifo_rd_pvld_p_X2 ;
  assign _23__T = lat_fifo_rd_pvld_p_T ;
  assign lat_fifo_rd_pvld_p_C2 = _23__C ;
  assign lat_fifo_rd_pvld_p_R2 = _23__R ;
  assign lat_fifo_rd_pvld_p_X2 = _23__X ;
  assign _23__S = 0 ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      lat_fifo_rd_pvld_int <= 1'b0;
    else
      lat_fifo_rd_pvld_int <= rd_req_next;
  logic [0:0] rd_req_next_X0 ;
  logic [0:0] rd_req_next_R0 ;
  logic [0:0] rd_req_next_C0 ;
  assign rd_req_next_X0 = { 1{ lat_fifo_rd_pvld_int_S != rd_req_next_S }} ;
  assign rd_req_next_R0 = 0 ;
  assign rd_req_next_C0 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      lat_fifo_rd_pvld_int_T 		<= !nvdla_core_rstn ? 0 : ( rd_req_next_T & rd_req_next_X0 );
  always @( posedge nvdla_core_clk_mgated )
      lat_fifo_rd_pvld_int_t_flag 	<= !nvdla_core_rstn ? 0 : lat_fifo_rd_pvld_int_t_flag ? 1 : | rd_req_next_T & ( | rd_req_next_X0 );
  always @( posedge nvdla_core_clk_mgated )
      lat_fifo_rd_pvld_int_r_flag 	<= !nvdla_core_rstn ? 0 : lat_fifo_rd_pvld_int_r_flag ? 1 : lat_fifo_rd_pvld_int_t_flag ? 0 : ( | lat_fifo_rd_pvld_int_R ) ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      lat_fifo_rd_pvld_p <= 1'b0;
    else
      lat_fifo_rd_pvld_p <= _01_;
  logic [0:0] _01__X0 ;
  logic [0:0] _01__R0 ;
  logic [0:0] _01__C0 ;
  assign _01__X0 = { 1{ lat_fifo_rd_pvld_p_S != _01__S }} ;
  assign _01__R0 = 0 ;
  assign _01__C0 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      lat_fifo_rd_pvld_p_T 		<= !nvdla_core_rstn ? 0 : ( _01__T & _01__X0 );
  always @( posedge nvdla_core_clk_mgated )
      lat_fifo_rd_pvld_p_t_flag 	<= !nvdla_core_rstn ? 0 : lat_fifo_rd_pvld_p_t_flag ? 1 : | _01__T & ( | _01__X0 );
  always @( posedge nvdla_core_clk_mgated )
      lat_fifo_rd_pvld_p_r_flag 	<= !nvdla_core_rstn ? 0 : lat_fifo_rd_pvld_p_r_flag ? 1 : lat_fifo_rd_pvld_p_t_flag ? 0 : ( | lat_fifo_rd_pvld_p_R ) ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      lat_fifo_rd_count_p <= 8'b00000000;
    else
      lat_fifo_rd_count_p <= _00_;
  logic [7:0] _00__X0 ;
  logic [7:0] _00__R0 ;
  logic [7:0] _00__C0 ;
  assign _00__X0 = { 8{ lat_fifo_rd_count_p_S != _00__S }} ;
  assign _00__R0 = 0 ;
  assign _00__C0 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      lat_fifo_rd_count_p_T 		<= !nvdla_core_rstn ? 0 : ( _00__T & _00__X0 );
  always @( posedge nvdla_core_clk_mgated )
      lat_fifo_rd_count_p_t_flag 	<= !nvdla_core_rstn ? 0 : lat_fifo_rd_count_p_t_flag ? 1 : | _00__T & ( | _00__X0 );
  always @( posedge nvdla_core_clk_mgated )
      lat_fifo_rd_count_p_r_flag 	<= !nvdla_core_rstn ? 0 : lat_fifo_rd_count_p_r_flag ? 1 : lat_fifo_rd_count_p_t_flag ? 0 : ( | lat_fifo_rd_count_p_R ) ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      rd_pushing <= 1'b0;
    else
      rd_pushing <= wr_pushing;
  logic [0:0] wr_pushing_X3 ;
  logic [0:0] wr_pushing_R3 ;
  logic [0:0] wr_pushing_C3 ;
  assign wr_pushing_X3 = { 1{ rd_pushing_S != wr_pushing_S }} ;
  assign wr_pushing_R3 = 0 ;
  assign wr_pushing_C3 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      rd_pushing_T 		<= !nvdla_core_rstn ? 0 : ( wr_pushing_T & wr_pushing_X3 );
  always @( posedge nvdla_core_clk_mgated )
      rd_pushing_t_flag 	<= !nvdla_core_rstn ? 0 : rd_pushing_t_flag ? 1 : | wr_pushing_T & ( | wr_pushing_X3 );
  always @( posedge nvdla_core_clk_mgated )
      rd_pushing_r_flag 	<= !nvdla_core_rstn ? 0 : rd_pushing_r_flag ? 1 : rd_pushing_t_flag ? 0 : ( | rd_pushing_R ) ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      wr_popping <= 1'b0;
    else
      wr_popping <= ore;
  logic [0:0] ore_X3 ;
  logic [0:0] ore_R3 ;
  logic [0:0] ore_C3 ;
  assign ore_X3 = { 1{ wr_popping_S != ore_S }} ;
  assign ore_R3 = 0 ;
  assign ore_C3 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      wr_popping_T 		<= !nvdla_core_rstn ? 0 : ( ore_T & ore_X3 );
  always @( posedge nvdla_core_clk_mgated )
      wr_popping_t_flag 	<= !nvdla_core_rstn ? 0 : wr_popping_t_flag ? 1 : | ore_T & ( | ore_X3 );
  always @( posedge nvdla_core_clk_mgated )
      wr_popping_r_flag 	<= !nvdla_core_rstn ? 0 : wr_popping_r_flag ? 1 : wr_popping_t_flag ? 0 : ( | wr_popping_R ) ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      lat_fifo_rd_adr <= 8'b00000000;
    else
      lat_fifo_rd_adr <= lat_fifo_rd_adr_p;
  logic [7:0] lat_fifo_rd_adr_p_X0 ;
  logic [7:0] lat_fifo_rd_adr_p_R0 ;
  logic [7:0] lat_fifo_rd_adr_p_C0 ;
  assign lat_fifo_rd_adr_p_X0 = { 8{ lat_fifo_rd_adr_S != lat_fifo_rd_adr_p_S }} ;
  assign lat_fifo_rd_adr_p_R0 = 0 ;
  assign lat_fifo_rd_adr_p_C0 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      lat_fifo_rd_adr_T 		<= !nvdla_core_rstn ? 0 : ( lat_fifo_rd_adr_p_T & lat_fifo_rd_adr_p_X0 );
  always @( posedge nvdla_core_clk_mgated )
      lat_fifo_rd_adr_t_flag 	<= !nvdla_core_rstn ? 0 : lat_fifo_rd_adr_t_flag ? 1 : | lat_fifo_rd_adr_p_T & ( | lat_fifo_rd_adr_p_X0 );
  always @( posedge nvdla_core_clk_mgated )
      lat_fifo_rd_adr_r_flag 	<= !nvdla_core_rstn ? 0 : lat_fifo_rd_adr_r_flag ? 1 : lat_fifo_rd_adr_t_flag ? 0 : ( | lat_fifo_rd_adr_R ) ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      lat_fifo_wr_adr <= 8'b00000000;
    else
      lat_fifo_wr_adr <= _02_;
  logic [7:0] _02__X0 ;
  logic [7:0] _02__R0 ;
  logic [7:0] _02__C0 ;
  assign _02__X0 = { 8{ lat_fifo_wr_adr_S != _02__S }} ;
  assign _02__R0 = 0 ;
  assign _02__C0 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      lat_fifo_wr_adr_T 		<= !nvdla_core_rstn ? 0 : ( _02__T & _02__X0 );
  always @( posedge nvdla_core_clk_mgated )
      lat_fifo_wr_adr_t_flag 	<= !nvdla_core_rstn ? 0 : lat_fifo_wr_adr_t_flag ? 1 : | _02__T & ( | _02__X0 );
  always @( posedge nvdla_core_clk_mgated )
      lat_fifo_wr_adr_r_flag 	<= !nvdla_core_rstn ? 0 : lat_fifo_wr_adr_r_flag ? 1 : lat_fifo_wr_adr_t_flag ? 0 : ( | lat_fifo_wr_adr_R ) ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      lat_fifo_wr_busy_int <= 1'b0;
    else
      lat_fifo_wr_busy_int <= lat_fifo_wr_busy_next;
  logic [0:0] lat_fifo_wr_busy_next_X1 ;
  logic [0:0] lat_fifo_wr_busy_next_R1 ;
  logic [0:0] lat_fifo_wr_busy_next_C1 ;
  assign lat_fifo_wr_busy_next_X1 = { 1{ lat_fifo_wr_busy_int_S != lat_fifo_wr_busy_next_S }} ;
  assign lat_fifo_wr_busy_next_R1 = 0 ;
  assign lat_fifo_wr_busy_next_C1 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      lat_fifo_wr_busy_int_T 		<= !nvdla_core_rstn ? 0 : ( lat_fifo_wr_busy_next_T & lat_fifo_wr_busy_next_X1 );
  always @( posedge nvdla_core_clk_mgated )
      lat_fifo_wr_busy_int_t_flag 	<= !nvdla_core_rstn ? 0 : lat_fifo_wr_busy_int_t_flag ? 1 : | lat_fifo_wr_busy_next_T & ( | lat_fifo_wr_busy_next_X1 );
  always @( posedge nvdla_core_clk_mgated )
      lat_fifo_wr_busy_int_r_flag 	<= !nvdla_core_rstn ? 0 : lat_fifo_wr_busy_int_r_flag ? 1 : lat_fifo_wr_busy_int_t_flag ? 0 : ( | lat_fifo_wr_busy_int_R ) ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      lat_fifo_wr_count <= 8'b00000000;
    else
      lat_fifo_wr_count <= _03_;
  logic [7:0] _03__X0 ;
  logic [7:0] _03__R0 ;
  logic [7:0] _03__C0 ;
  assign _03__X0 = { 8{ lat_fifo_wr_count_S != _03__S }} ;
  assign _03__R0 = 0 ;
  assign _03__C0 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      lat_fifo_wr_count_T 		<= !nvdla_core_rstn ? 0 : ( _03__T & _03__X0 );
  always @( posedge nvdla_core_clk_mgated )
      lat_fifo_wr_count_t_flag 	<= !nvdla_core_rstn ? 0 : lat_fifo_wr_count_t_flag ? 1 : | _03__T & ( | _03__X0 );
  always @( posedge nvdla_core_clk_mgated )
      lat_fifo_wr_count_r_flag 	<= !nvdla_core_rstn ? 0 : lat_fifo_wr_count_r_flag ? 1 : lat_fifo_wr_count_t_flag ? 0 : ( | lat_fifo_wr_count_R ) ;
  assign _00_ = _15_ ? rd_count_p_next : lat_fifo_rd_count_p;
  logic [0:0] _15__C1 ;
  logic [0:0] _15__R1 ;
  logic [0:0] _15__X1 ;
  assign _15__C1 = | _00__C ;
  assign _15__X1 = | _00__X ;
  assign _00__T = _15_ ? ( { 8{ _15__T  }} | rd_count_p_next_T ) : ( { 8{ _15__T  }} | lat_fifo_rd_count_p_T );
  assign _00__S = _15_ ? rd_count_p_next_S : lat_fifo_rd_count_p_S ;
  assign _15__R1 = ( | (_00__R | ( _00__C & ( { 8{ _15_ }} & rd_count_p_next_T | { 8{ !_15_ }} & lat_fifo_rd_count_p_T )))) && rd_count_p_next != lat_fifo_rd_count_p ;
  logic [7:0] rd_count_p_next_C0 ;
  logic [7:0] rd_count_p_next_R0 ;
  logic [7:0] rd_count_p_next_X0 ;
  assign rd_count_p_next_C0 = { 8{ _15_ }} ;
  assign rd_count_p_next_R0 = { 8{ _15_ }} & ( _00__R | ( { 8{ _15__T  }} & _00__C ));
  assign rd_count_p_next_X0 = { 8{ _15_ }} & _00__X ;
  logic [7:0] lat_fifo_rd_count_p_C1 ;
  logic [7:0] lat_fifo_rd_count_p_R1 ;
  logic [7:0] lat_fifo_rd_count_p_X1 ;
  assign lat_fifo_rd_count_p_C1 = { 8{ !_15_ }} ;
  assign lat_fifo_rd_count_p_R1 = { 8{ !_15_ }} & ( _00__R | ( { 8{ _15__T  }} & _00__C ));
  assign lat_fifo_rd_count_p_X1 = { 8{ !_15_ }} & _00__X ;
  assign _01_ = _15_ ? rd_count_p_next_not_0 : lat_fifo_rd_pvld_p;
  logic [0:0] _15__C2 ;
  logic [0:0] _15__R2 ;
  logic [0:0] _15__X2 ;
  assign _15__C2 = | _01__C ;
  assign _15__X2 = | _01__X ;
  assign _01__T = _15_ ? ( { 1{ _15__T  }} | rd_count_p_next_not_0_T ) : ( { 1{ _15__T  }} | lat_fifo_rd_pvld_p_T );
  assign _01__S = _15_ ? rd_count_p_next_not_0_S : lat_fifo_rd_pvld_p_S ;
  assign _15__R2 = ( | (_01__R | ( _01__C & ( { 1{ _15_ }} & rd_count_p_next_not_0_T | { 1{ !_15_ }} & lat_fifo_rd_pvld_p_T )))) && rd_count_p_next_not_0 != lat_fifo_rd_pvld_p ;
  logic [0:0] rd_count_p_next_not_0_C1 ;
  logic [0:0] rd_count_p_next_not_0_R1 ;
  logic [0:0] rd_count_p_next_not_0_X1 ;
  assign rd_count_p_next_not_0_C1 = { 1{ _15_ }} ;
  assign rd_count_p_next_not_0_R1 = { 1{ _15_ }} & ( _01__R | ( { 1{ _15__T  }} & _01__C ));
  assign rd_count_p_next_not_0_X1 = { 1{ _15_ }} & _01__X ;
  logic [0:0] lat_fifo_rd_pvld_p_C3 ;
  logic [0:0] lat_fifo_rd_pvld_p_R3 ;
  logic [0:0] lat_fifo_rd_pvld_p_X3 ;
  assign lat_fifo_rd_pvld_p_C3 = { 1{ !_15_ }} ;
  assign lat_fifo_rd_pvld_p_R3 = { 1{ !_15_ }} & ( _01__R | ( { 1{ _15__T  }} & _01__C ));
  assign lat_fifo_rd_pvld_p_X3 = { 1{ !_15_ }} & _01__X ;
  assign lat_fifo_rd_adr_p = ore ? rd_adr_next : lat_fifo_rd_adr;
  logic [0:0] ore_C4 ;
  logic [0:0] ore_R4 ;
  logic [0:0] ore_X4 ;
  assign ore_C4 = | lat_fifo_rd_adr_p_C ;
  assign ore_X4 = | lat_fifo_rd_adr_p_X ;
  assign lat_fifo_rd_adr_p_T = ore ? ( { 8{ ore_T  }} | rd_adr_next_T ) : ( { 8{ ore_T  }} | lat_fifo_rd_adr_T );
  assign lat_fifo_rd_adr_p_S = ore ? rd_adr_next_S : lat_fifo_rd_adr_S ;
  assign ore_R4 = ( | (lat_fifo_rd_adr_p_R | ( lat_fifo_rd_adr_p_C & ( { 8{ ore }} & rd_adr_next_T | { 8{ !ore }} & lat_fifo_rd_adr_T )))) && rd_adr_next != lat_fifo_rd_adr ;
  logic [7:0] rd_adr_next_C0 ;
  logic [7:0] rd_adr_next_R0 ;
  logic [7:0] rd_adr_next_X0 ;
  assign rd_adr_next_C0 = { 8{ ore }} ;
  assign rd_adr_next_R0 = { 8{ ore }} & ( lat_fifo_rd_adr_p_R | ( { 8{ ore_T  }} & lat_fifo_rd_adr_p_C ));
  assign rd_adr_next_X0 = { 8{ ore }} & lat_fifo_rd_adr_p_X ;
  logic [7:0] lat_fifo_rd_adr_C2 ;
  logic [7:0] lat_fifo_rd_adr_R2 ;
  logic [7:0] lat_fifo_rd_adr_X2 ;
  assign lat_fifo_rd_adr_C2 = { 8{ !ore }} ;
  assign lat_fifo_rd_adr_R2 = { 8{ !ore }} & ( lat_fifo_rd_adr_p_R | ( { 8{ ore_T  }} & lat_fifo_rd_adr_p_C ));
  assign lat_fifo_rd_adr_X2 = { 8{ !ore }} & lat_fifo_rd_adr_p_X ;
  assign _02_ = wr_pushing ? wr_adr_next : lat_fifo_wr_adr;
  logic [0:0] wr_pushing_C4 ;
  logic [0:0] wr_pushing_R4 ;
  logic [0:0] wr_pushing_X4 ;
  assign wr_pushing_C4 = | _02__C ;
  assign wr_pushing_X4 = | _02__X ;
  assign _02__T = wr_pushing ? ( { 8{ wr_pushing_T  }} | wr_adr_next_T ) : ( { 8{ wr_pushing_T  }} | lat_fifo_wr_adr_T );
  assign _02__S = wr_pushing ? wr_adr_next_S : lat_fifo_wr_adr_S ;
  assign wr_pushing_R4 = ( | (_02__R | ( _02__C & ( { 8{ wr_pushing }} & wr_adr_next_T | { 8{ !wr_pushing }} & lat_fifo_wr_adr_T )))) && wr_adr_next != lat_fifo_wr_adr ;
  logic [7:0] wr_adr_next_C0 ;
  logic [7:0] wr_adr_next_R0 ;
  logic [7:0] wr_adr_next_X0 ;
  assign wr_adr_next_C0 = { 8{ wr_pushing }} ;
  assign wr_adr_next_R0 = { 8{ wr_pushing }} & ( _02__R | ( { 8{ wr_pushing_T  }} & _02__C ));
  assign wr_adr_next_X0 = { 8{ wr_pushing }} & _02__X ;
  logic [7:0] lat_fifo_wr_adr_C2 ;
  logic [7:0] lat_fifo_wr_adr_R2 ;
  logic [7:0] lat_fifo_wr_adr_X2 ;
  assign lat_fifo_wr_adr_C2 = { 8{ !wr_pushing }} ;
  assign lat_fifo_wr_adr_R2 = { 8{ !wr_pushing }} & ( _02__R | ( { 8{ wr_pushing_T  }} & _02__C ));
  assign lat_fifo_wr_adr_X2 = { 8{ !wr_pushing }} & _02__X ;
  assign _03_ = _24_ ? wr_count_next : lat_fifo_wr_count;
  logic [0:0] _24__C0 ;
  logic [0:0] _24__R0 ;
  logic [0:0] _24__X0 ;
  assign _24__C0 = | _03__C ;
  assign _24__X0 = | _03__X ;
  assign _03__T = _24_ ? ( { 8{ _24__T  }} | wr_count_next_T ) : ( { 8{ _24__T  }} | lat_fifo_wr_count_T );
  assign _03__S = _24_ ? wr_count_next_S : lat_fifo_wr_count_S ;
  assign _24__R0 = ( | (_03__R | ( _03__C & ( { 8{ _24_ }} & wr_count_next_T | { 8{ !_24_ }} & lat_fifo_wr_count_T )))) && wr_count_next != lat_fifo_wr_count ;
  logic [7:0] wr_count_next_C0 ;
  logic [7:0] wr_count_next_R0 ;
  logic [7:0] wr_count_next_X0 ;
  assign wr_count_next_C0 = { 8{ _24_ }} ;
  assign wr_count_next_R0 = { 8{ _24_ }} & ( _03__R | ( { 8{ _24__T  }} & _03__C ));
  assign wr_count_next_X0 = { 8{ _24_ }} & _03__X ;
  logic [7:0] lat_fifo_wr_count_C1 ;
  logic [7:0] lat_fifo_wr_count_R1 ;
  logic [7:0] lat_fifo_wr_count_X1 ;
  assign lat_fifo_wr_count_C1 = { 8{ !_24_ }} ;
  assign lat_fifo_wr_count_R1 = { 8{ !_24_ }} & ( _03__R | ( { 8{ _24__T  }} & _03__C ));
  assign lat_fifo_wr_count_X1 = { 8{ !_24_ }} & _03__X ;
  assign _25_ = lat_fifo_wr_count - 1'b1;
  assign _25__S = 0 ;
  logic [7:0] lat_fifo_wr_count_C2 ;
  logic [7:0] lat_fifo_wr_count_R2 ;
  logic [7:0] lat_fifo_wr_count_X2 ;
  assign _25__T = lat_fifo_wr_count_T ;
  assign lat_fifo_wr_count_C2 = _25__C ;
  assign lat_fifo_wr_count_R2 = _25__R ;
  assign lat_fifo_wr_count_X2 = _25__X ;
  assign _26_ = lat_fifo_rd_count_p - 1'b1;
  assign _26__S = 0 ;
  logic [7:0] lat_fifo_rd_count_p_C2 ;
  logic [7:0] lat_fifo_rd_count_p_R2 ;
  logic [7:0] lat_fifo_rd_count_p_X2 ;
  assign _26__T = lat_fifo_rd_count_p_T ;
  assign lat_fifo_rd_count_p_C2 = _26__C ;
  assign lat_fifo_rd_count_p_R2 = _26__R ;
  assign lat_fifo_rd_count_p_X2 = _26__X ;
  assign wr_count_next_wr_popping = wr_pushing ? lat_fifo_wr_count : _25_;
  logic [0:0] wr_pushing_C5 ;
  logic [0:0] wr_pushing_R5 ;
  logic [0:0] wr_pushing_X5 ;
  assign wr_pushing_C5 = | wr_count_next_wr_popping_C ;
  assign wr_pushing_X5 = | wr_count_next_wr_popping_X ;
  assign wr_count_next_wr_popping_T = wr_pushing ? ( { 8{ wr_pushing_T  }} | lat_fifo_wr_count_T ) : ( { 8{ wr_pushing_T  }} | _25__T );
  assign wr_count_next_wr_popping_S = wr_pushing ? lat_fifo_wr_count_S : _25__S ;
  assign wr_pushing_R5 = ( | (wr_count_next_wr_popping_R | ( wr_count_next_wr_popping_C & ( { 8{ wr_pushing }} & lat_fifo_wr_count_T | { 8{ !wr_pushing }} & _25__T )))) && lat_fifo_wr_count != _25_ ;
  logic [7:0] lat_fifo_wr_count_C3 ;
  logic [7:0] lat_fifo_wr_count_R3 ;
  logic [7:0] lat_fifo_wr_count_X3 ;
  assign lat_fifo_wr_count_C3 = { 8{ wr_pushing }} ;
  assign lat_fifo_wr_count_R3 = { 8{ wr_pushing }} & ( wr_count_next_wr_popping_R | ( { 8{ wr_pushing_T  }} & wr_count_next_wr_popping_C ));
  assign lat_fifo_wr_count_X3 = { 8{ wr_pushing }} & wr_count_next_wr_popping_X ;
  logic [7:0] _25__C0 ;
  logic [7:0] _25__R0 ;
  logic [7:0] _25__X0 ;
  assign _25__C0 = { 8{ !wr_pushing }} ;
  assign _25__R0 = { 8{ !wr_pushing }} & ( wr_count_next_wr_popping_R | ( { 8{ wr_pushing_T  }} & wr_count_next_wr_popping_C ));
  assign _25__X0 = { 8{ !wr_pushing }} & wr_count_next_wr_popping_X ;
  assign wr_count_next_no_wr_popping = wr_pushing ? _04_ : lat_fifo_wr_count;
  logic [0:0] wr_pushing_C6 ;
  logic [0:0] wr_pushing_R6 ;
  logic [0:0] wr_pushing_X6 ;
  assign wr_pushing_C6 = | wr_count_next_no_wr_popping_C ;
  assign wr_pushing_X6 = | wr_count_next_no_wr_popping_X ;
  assign wr_count_next_no_wr_popping_T = wr_pushing ? ( { 8{ wr_pushing_T  }} | _04__T ) : ( { 8{ wr_pushing_T  }} | lat_fifo_wr_count_T );
  assign wr_count_next_no_wr_popping_S = wr_pushing ? _04__S : lat_fifo_wr_count_S ;
  assign wr_pushing_R6 = ( | (wr_count_next_no_wr_popping_R | ( wr_count_next_no_wr_popping_C & ( { 8{ wr_pushing }} & _04__T | { 8{ !wr_pushing }} & lat_fifo_wr_count_T )))) && _04_ != lat_fifo_wr_count ;
  logic [7:0] _04__C0 ;
  logic [7:0] _04__R0 ;
  logic [7:0] _04__X0 ;
  assign _04__C0 = { 8{ wr_pushing }} ;
  assign _04__R0 = { 8{ wr_pushing }} & ( wr_count_next_no_wr_popping_R | ( { 8{ wr_pushing_T  }} & wr_count_next_no_wr_popping_C ));
  assign _04__X0 = { 8{ wr_pushing }} & wr_count_next_no_wr_popping_X ;
  logic [7:0] lat_fifo_wr_count_C4 ;
  logic [7:0] lat_fifo_wr_count_R4 ;
  logic [7:0] lat_fifo_wr_count_X4 ;
  assign lat_fifo_wr_count_C4 = { 8{ !wr_pushing }} ;
  assign lat_fifo_wr_count_R4 = { 8{ !wr_pushing }} & ( wr_count_next_no_wr_popping_R | ( { 8{ wr_pushing_T  }} & wr_count_next_no_wr_popping_C ));
  assign lat_fifo_wr_count_X4 = { 8{ !wr_pushing }} & wr_count_next_no_wr_popping_X ;
  assign wr_count_next = wr_popping ? wr_count_next_wr_popping : wr_count_next_no_wr_popping;
  logic [0:0] wr_popping_C1 ;
  logic [0:0] wr_popping_R1 ;
  logic [0:0] wr_popping_X1 ;
  assign wr_popping_C1 = | wr_count_next_C ;
  assign wr_popping_X1 = | wr_count_next_X ;
  assign wr_count_next_T = wr_popping ? ( { 8{ wr_popping_T  }} | wr_count_next_wr_popping_T ) : ( { 8{ wr_popping_T  }} | wr_count_next_no_wr_popping_T );
  assign wr_count_next_S = wr_popping ? wr_count_next_wr_popping_S : wr_count_next_no_wr_popping_S ;
  assign wr_popping_R1 = ( | (wr_count_next_R | ( wr_count_next_C & ( { 8{ wr_popping }} & wr_count_next_wr_popping_T | { 8{ !wr_popping }} & wr_count_next_no_wr_popping_T )))) && wr_count_next_wr_popping != wr_count_next_no_wr_popping ;
  logic [7:0] wr_count_next_wr_popping_C0 ;
  logic [7:0] wr_count_next_wr_popping_R0 ;
  logic [7:0] wr_count_next_wr_popping_X0 ;
  assign wr_count_next_wr_popping_C0 = { 8{ wr_popping }} ;
  assign wr_count_next_wr_popping_R0 = { 8{ wr_popping }} & ( wr_count_next_R | ( { 8{ wr_popping_T  }} & wr_count_next_C ));
  assign wr_count_next_wr_popping_X0 = { 8{ wr_popping }} & wr_count_next_X ;
  logic [7:0] wr_count_next_no_wr_popping_C1 ;
  logic [7:0] wr_count_next_no_wr_popping_R1 ;
  logic [7:0] wr_count_next_no_wr_popping_X1 ;
  assign wr_count_next_no_wr_popping_C1 = { 8{ !wr_popping }} ;
  assign wr_count_next_no_wr_popping_R1 = { 8{ !wr_popping }} & ( wr_count_next_R | ( { 8{ wr_popping_T  }} & wr_count_next_C ));
  assign wr_count_next_no_wr_popping_X1 = { 8{ !wr_popping }} & wr_count_next_X ;
  assign lat_fifo_wr_busy_next = wr_popping ? 1'b0 : wr_count_next_no_wr_popping_is_245;
  logic [0:0] wr_popping_C2 ;
  logic [0:0] wr_popping_R2 ;
  logic [0:0] wr_popping_X2 ;
  assign wr_popping_C2 = | lat_fifo_wr_busy_next_C ;
  assign wr_popping_X2 = | lat_fifo_wr_busy_next_X ;
  logic [0:0] wr_count_next_no_wr_popping_is_245_C0 ;
  logic [0:0] wr_count_next_no_wr_popping_is_245_R0 ;
  logic [0:0] wr_count_next_no_wr_popping_is_245_X0 ;
  assign wr_count_next_no_wr_popping_is_245_C0 = { 1{ !wr_popping }};
  assign wr_count_next_no_wr_popping_is_245_R0 = { 1{ !wr_popping }} & ( lat_fifo_wr_busy_next_R | ( { 1{ wr_popping_T  }} & lat_fifo_wr_busy_next_C ));
  assign wr_count_next_no_wr_popping_is_245_X0 = { 1{ !wr_popping }} & lat_fifo_wr_busy_next_X ;
  assign lat_fifo_wr_busy_next_T = wr_popping ? { 1{ | wr_popping_T  }} : ( { 1{ | wr_popping_T  }} | wr_count_next_no_wr_popping_is_245_T );
  assign lat_fifo_wr_busy_next_S = wr_popping ? wr_popping_S : wr_count_next_no_wr_popping_is_245_S ;
  assign wr_popping_R2 = ( | (lat_fifo_wr_busy_next_R | ( { 1{ !wr_popping }} & wr_count_next_no_wr_popping_is_245_T & lat_fifo_wr_busy_next_C ))) && 1'b0 != wr_count_next_no_wr_popping_is_245 ;
  assign wr_adr_next = _08_ ? 8'b00000000 : _05_;
  logic [0:0] _08__C0 ;
  logic [0:0] _08__R0 ;
  logic [0:0] _08__X0 ;
  assign _08__C0 = | wr_adr_next_C ;
  assign _08__X0 = | wr_adr_next_X ;
  logic [7:0] _05__C0 ;
  logic [7:0] _05__R0 ;
  logic [7:0] _05__X0 ;
  assign _05__C0 = { 8{ !_08_ }};
  assign _05__R0 = { 8{ !_08_ }} & ( wr_adr_next_R | ( { 8{ _08__T  }} & wr_adr_next_C ));
  assign _05__X0 = { 8{ !_08_ }} & wr_adr_next_X ;
  assign wr_adr_next_T = _08_ ? { 8{ | _08__T  }} : ( { 8{ | _08__T  }} | _05__T );
  assign wr_adr_next_S = _08_ ? _08__S : _05__S ;
  assign _08__R0 = ( | (wr_adr_next_R | ( { 8{ !_08_ }} & _05__T & wr_adr_next_C ))) && 8'b00000000 != _05_ ;
  assign rd_adr_next = _09_ ? 8'b00000000 : _06_;
  logic [0:0] _09__C0 ;
  logic [0:0] _09__R0 ;
  logic [0:0] _09__X0 ;
  assign _09__C0 = | rd_adr_next_C ;
  assign _09__X0 = | rd_adr_next_X ;
  logic [7:0] _06__C0 ;
  logic [7:0] _06__R0 ;
  logic [7:0] _06__X0 ;
  assign _06__C0 = { 8{ !_09_ }};
  assign _06__R0 = { 8{ !_09_ }} & ( rd_adr_next_R | ( { 8{ _09__T  }} & rd_adr_next_C ));
  assign _06__X0 = { 8{ !_09_ }} & rd_adr_next_X ;
  assign rd_adr_next_T = _09_ ? { 8{ | _09__T  }} : ( { 8{ | _09__T  }} | _06__T );
  assign rd_adr_next_S = _09_ ? _09__S : _06__S ;
  assign _09__R0 = ( | (rd_adr_next_R | ( { 8{ !_09_ }} & _06__T & rd_adr_next_C ))) && 8'b00000000 != _06_ ;
  assign rd_count_p_next_rd_popping = rd_pushing ? lat_fifo_rd_count_p : _26_;
  logic [0:0] rd_pushing_C1 ;
  logic [0:0] rd_pushing_R1 ;
  logic [0:0] rd_pushing_X1 ;
  assign rd_pushing_C1 = | rd_count_p_next_rd_popping_C ;
  assign rd_pushing_X1 = | rd_count_p_next_rd_popping_X ;
  assign rd_count_p_next_rd_popping_T = rd_pushing ? ( { 8{ rd_pushing_T  }} | lat_fifo_rd_count_p_T ) : ( { 8{ rd_pushing_T  }} | _26__T );
  assign rd_count_p_next_rd_popping_S = rd_pushing ? lat_fifo_rd_count_p_S : _26__S ;
  assign rd_pushing_R1 = ( | (rd_count_p_next_rd_popping_R | ( rd_count_p_next_rd_popping_C & ( { 8{ rd_pushing }} & lat_fifo_rd_count_p_T | { 8{ !rd_pushing }} & _26__T )))) && lat_fifo_rd_count_p != _26_ ;
  logic [7:0] lat_fifo_rd_count_p_C3 ;
  logic [7:0] lat_fifo_rd_count_p_R3 ;
  logic [7:0] lat_fifo_rd_count_p_X3 ;
  assign lat_fifo_rd_count_p_C3 = { 8{ rd_pushing }} ;
  assign lat_fifo_rd_count_p_R3 = { 8{ rd_pushing }} & ( rd_count_p_next_rd_popping_R | ( { 8{ rd_pushing_T  }} & rd_count_p_next_rd_popping_C ));
  assign lat_fifo_rd_count_p_X3 = { 8{ rd_pushing }} & rd_count_p_next_rd_popping_X ;
  logic [7:0] _26__C0 ;
  logic [7:0] _26__R0 ;
  logic [7:0] _26__X0 ;
  assign _26__C0 = { 8{ !rd_pushing }} ;
  assign _26__R0 = { 8{ !rd_pushing }} & ( rd_count_p_next_rd_popping_R | ( { 8{ rd_pushing_T  }} & rd_count_p_next_rd_popping_C ));
  assign _26__X0 = { 8{ !rd_pushing }} & rd_count_p_next_rd_popping_X ;
  assign rd_count_p_next_no_rd_popping = rd_pushing ? _07_ : lat_fifo_rd_count_p;
  logic [0:0] rd_pushing_C2 ;
  logic [0:0] rd_pushing_R2 ;
  logic [0:0] rd_pushing_X2 ;
  assign rd_pushing_C2 = | rd_count_p_next_no_rd_popping_C ;
  assign rd_pushing_X2 = | rd_count_p_next_no_rd_popping_X ;
  assign rd_count_p_next_no_rd_popping_T = rd_pushing ? ( { 8{ rd_pushing_T  }} | _07__T ) : ( { 8{ rd_pushing_T  }} | lat_fifo_rd_count_p_T );
  assign rd_count_p_next_no_rd_popping_S = rd_pushing ? _07__S : lat_fifo_rd_count_p_S ;
  assign rd_pushing_R2 = ( | (rd_count_p_next_no_rd_popping_R | ( rd_count_p_next_no_rd_popping_C & ( { 8{ rd_pushing }} & _07__T | { 8{ !rd_pushing }} & lat_fifo_rd_count_p_T )))) && _07_ != lat_fifo_rd_count_p ;
  logic [7:0] _07__C0 ;
  logic [7:0] _07__R0 ;
  logic [7:0] _07__X0 ;
  assign _07__C0 = { 8{ rd_pushing }} ;
  assign _07__R0 = { 8{ rd_pushing }} & ( rd_count_p_next_no_rd_popping_R | ( { 8{ rd_pushing_T  }} & rd_count_p_next_no_rd_popping_C ));
  assign _07__X0 = { 8{ rd_pushing }} & rd_count_p_next_no_rd_popping_X ;
  logic [7:0] lat_fifo_rd_count_p_C4 ;
  logic [7:0] lat_fifo_rd_count_p_R4 ;
  logic [7:0] lat_fifo_rd_count_p_X4 ;
  assign lat_fifo_rd_count_p_C4 = { 8{ !rd_pushing }} ;
  assign lat_fifo_rd_count_p_R4 = { 8{ !rd_pushing }} & ( rd_count_p_next_no_rd_popping_R | ( { 8{ rd_pushing_T  }} & rd_count_p_next_no_rd_popping_C ));
  assign lat_fifo_rd_count_p_X4 = { 8{ !rd_pushing }} & rd_count_p_next_no_rd_popping_X ;
  assign rd_count_p_next = ore ? rd_count_p_next_rd_popping : rd_count_p_next_no_rd_popping;
  logic [0:0] ore_C5 ;
  logic [0:0] ore_R5 ;
  logic [0:0] ore_X5 ;
  assign ore_C5 = | rd_count_p_next_C ;
  assign ore_X5 = | rd_count_p_next_X ;
  assign rd_count_p_next_T = ore ? ( { 8{ ore_T  }} | rd_count_p_next_rd_popping_T ) : ( { 8{ ore_T  }} | rd_count_p_next_no_rd_popping_T );
  assign rd_count_p_next_S = ore ? rd_count_p_next_rd_popping_S : rd_count_p_next_no_rd_popping_S ;
  assign ore_R5 = ( | (rd_count_p_next_R | ( rd_count_p_next_C & ( { 8{ ore }} & rd_count_p_next_rd_popping_T | { 8{ !ore }} & rd_count_p_next_no_rd_popping_T )))) && rd_count_p_next_rd_popping != rd_count_p_next_no_rd_popping ;
  logic [7:0] rd_count_p_next_rd_popping_C1 ;
  logic [7:0] rd_count_p_next_rd_popping_R1 ;
  logic [7:0] rd_count_p_next_rd_popping_X1 ;
  assign rd_count_p_next_rd_popping_C1 = { 8{ ore }} ;
  assign rd_count_p_next_rd_popping_R1 = { 8{ ore }} & ( rd_count_p_next_R | ( { 8{ ore_T  }} & rd_count_p_next_C ));
  assign rd_count_p_next_rd_popping_X1 = { 8{ ore }} & rd_count_p_next_X ;
  logic [7:0] rd_count_p_next_no_rd_popping_C1 ;
  logic [7:0] rd_count_p_next_no_rd_popping_R1 ;
  logic [7:0] rd_count_p_next_no_rd_popping_X1 ;
  assign rd_count_p_next_no_rd_popping_C1 = { 8{ !ore }} ;
  assign rd_count_p_next_no_rd_popping_R1 = { 8{ !ore }} & ( rd_count_p_next_R | ( { 8{ ore_T  }} & rd_count_p_next_C ));
  assign rd_count_p_next_no_rd_popping_X1 = { 8{ !ore }} & rd_count_p_next_X ;
  assign rd_count_p_next_not_0 = ore ? rd_count_p_next_rd_popping_not_0 : rd_count_p_next_no_rd_popping_not_0;
  logic [0:0] ore_C6 ;
  logic [0:0] ore_R6 ;
  logic [0:0] ore_X6 ;
  assign ore_C6 = | rd_count_p_next_not_0_C ;
  assign ore_X6 = | rd_count_p_next_not_0_X ;
  assign rd_count_p_next_not_0_T = ore ? ( { 1{ ore_T  }} | rd_count_p_next_rd_popping_not_0_T ) : ( { 1{ ore_T  }} | rd_count_p_next_no_rd_popping_not_0_T );
  assign rd_count_p_next_not_0_S = ore ? rd_count_p_next_rd_popping_not_0_S : rd_count_p_next_no_rd_popping_not_0_S ;
  assign ore_R6 = ( | (rd_count_p_next_not_0_R | ( rd_count_p_next_not_0_C & ( { 1{ ore }} & rd_count_p_next_rd_popping_not_0_T | { 1{ !ore }} & rd_count_p_next_no_rd_popping_not_0_T )))) && rd_count_p_next_rd_popping_not_0 != rd_count_p_next_no_rd_popping_not_0 ;
  logic [0:0] rd_count_p_next_rd_popping_not_0_C0 ;
  logic [0:0] rd_count_p_next_rd_popping_not_0_R0 ;
  logic [0:0] rd_count_p_next_rd_popping_not_0_X0 ;
  assign rd_count_p_next_rd_popping_not_0_C0 = { 1{ ore }} ;
  assign rd_count_p_next_rd_popping_not_0_R0 = { 1{ ore }} & ( rd_count_p_next_not_0_R | ( { 1{ ore_T  }} & rd_count_p_next_not_0_C ));
  assign rd_count_p_next_rd_popping_not_0_X0 = { 1{ ore }} & rd_count_p_next_not_0_X ;
  logic [0:0] rd_count_p_next_no_rd_popping_not_0_C0 ;
  logic [0:0] rd_count_p_next_no_rd_popping_not_0_R0 ;
  logic [0:0] rd_count_p_next_no_rd_popping_not_0_X0 ;
  assign rd_count_p_next_no_rd_popping_not_0_C0 = { 1{ !ore }} ;
  assign rd_count_p_next_no_rd_popping_not_0_R0 = { 1{ !ore }} & ( rd_count_p_next_not_0_R | ( { 1{ ore_T  }} & rd_count_p_next_not_0_C ));
  assign rd_count_p_next_no_rd_popping_not_0_X0 = { 1{ !ore }} & rd_count_p_next_not_0_X ;
  assign _24_ = wr_pushing ^ wr_popping;
  assign _24__S = 0 ;
  logic [0:0] wr_pushing_C7 ;
  logic [0:0] wr_pushing_R7 ;
  logic [0:0] wr_pushing_X7 ;
  logic [0:0] wr_popping_C3 ;
  logic [0:0] wr_popping_R3 ;
  logic [0:0] wr_popping_X3 ;
  assign _24__T = wr_pushing_T | wr_popping_T ;
  assign wr_pushing_C7 = _24__C ;
  assign wr_pushing_X7 = _24__X ;
  assign wr_popping_C3 = _24__C ;
  assign wr_popping_X3 = _24__X ;
  assign wr_pushing_R7 = _24__R | ( _24__C & wr_popping_T );
  assign wr_popping_R3 = _24__R | ( _24__C & wr_pushing_T );
  logic [0:0] nvdla_core_clk_R0 ;
  logic [0:0] nvdla_core_clk_X0 ;
  logic [0:0] nvdla_core_clk_C0 ;
  logic [0:0] nvdla_core_clk_mgated_enable_R0 ;
  logic [0:0] nvdla_core_clk_mgated_enable_X0 ;
  logic [0:0] nvdla_core_clk_mgated_enable_C0 ;
  logic [0:0] nvdla_core_rstn_R0 ;
  logic [0:0] nvdla_core_rstn_X0 ;
  logic [0:0] nvdla_core_rstn_C0 ;
// module: NV_CLK_gate_power
  NV_CLK_gate_power nvdla_core_clk_mgate (
    .clk_T (  nvdla_core_clk_T  ),
    .clk_R (  nvdla_core_clk_R0  ),
    .clk_X (  nvdla_core_clk_X0  ),
    .clk_C (  nvdla_core_clk_C0  ),
    .clk_S (  nvdla_core_clk_S  ),
    .clk_en_T (  nvdla_core_clk_mgated_enable_T  ),
    .clk_en_R (  nvdla_core_clk_mgated_enable_R0  ),
    .clk_en_X (  nvdla_core_clk_mgated_enable_X0  ),
    .clk_en_C (  nvdla_core_clk_mgated_enable_C0  ),
    .clk_en_S (  nvdla_core_clk_mgated_enable_S  ),
    .reset__T (  nvdla_core_rstn_T  ),
    .reset__R (  nvdla_core_rstn_R0  ),
    .reset__X (  nvdla_core_rstn_X0  ),
    .reset__C (  nvdla_core_rstn_C0  ),
    .reset__S (  nvdla_core_rstn_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .clk_gated_T (  nvdla_core_clk_mgated_T  ),
    .clk_gated_R0 (  nvdla_core_clk_mgated_R  ),
    .clk_gated_X0 (  nvdla_core_clk_mgated_X  ),
    .clk_gated_C0 (  nvdla_core_clk_mgated_C  ),
    .clk_gated_S ( nvdla_core_clk_mgated_S ),
    .clk ( nvdla_core_clk ),
    .reset_ ( nvdla_core_rstn ),
    .clk_gated ( nvdla_core_clk_mgated ),
    .clk_en ( nvdla_core_clk_mgated_enable )
  );
  logic [0:0] nvdla_core_clk_R1 ;
  logic [0:0] nvdla_core_clk_X1 ;
  logic [0:0] nvdla_core_clk_C1 ;
  logic [513:0] lat_fifo_wr_pd_R0 ;
  logic [513:0] lat_fifo_wr_pd_X0 ;
  logic [513:0] lat_fifo_wr_pd_C0 ;
  logic [0:0] ore_R7 ;
  logic [0:0] ore_X7 ;
  logic [0:0] ore_C7 ;
  logic [31:0] pwrbus_ram_pd_R0 ;
  logic [31:0] pwrbus_ram_pd_X0 ;
  logic [31:0] pwrbus_ram_pd_C0 ;
  logic [7:0] lat_fifo_rd_adr_p_R1 ;
  logic [7:0] lat_fifo_rd_adr_p_X1 ;
  logic [7:0] lat_fifo_rd_adr_p_C1 ;
  logic [0:0] rd_enable_R0 ;
  logic [0:0] rd_enable_X0 ;
  logic [0:0] rd_enable_C0 ;
  logic [7:0] lat_fifo_wr_adr_R3 ;
  logic [7:0] lat_fifo_wr_adr_X3 ;
  logic [7:0] lat_fifo_wr_adr_C3 ;
  logic [0:0] wr_pushing_R8 ;
  logic [0:0] wr_pushing_X8 ;
  logic [0:0] wr_pushing_C8 ;
// module: \$paramod\nv_ram_rwsp_245x514\FORCE_CONTENTION_ASSERTION_RESET_ACTIVE=1'1
  \$paramod\nv_ram_rwsp_245x514\FORCE_CONTENTION_ASSERTION_RESET_ACTIVE=1'1 ram (
    .clk_T (  nvdla_core_clk_T  ),
    .clk_R (  nvdla_core_clk_R1  ),
    .clk_X (  nvdla_core_clk_X1  ),
    .clk_C (  nvdla_core_clk_C1  ),
    .clk_S (  nvdla_core_clk_S  ),
    .di_T (  lat_fifo_wr_pd_T  ),
    .di_R (  lat_fifo_wr_pd_R0  ),
    .di_X (  lat_fifo_wr_pd_X0  ),
    .di_C (  lat_fifo_wr_pd_C0  ),
    .di_S (  lat_fifo_wr_pd_S  ),
    .ore_T (  ore_T  ),
    .ore_R (  ore_R7  ),
    .ore_X (  ore_X7  ),
    .ore_C (  ore_C7  ),
    .ore_S (  ore_S  ),
    .pwrbus_ram_pd_T (  pwrbus_ram_pd_T  ),
    .pwrbus_ram_pd_R (  pwrbus_ram_pd_R0  ),
    .pwrbus_ram_pd_X (  pwrbus_ram_pd_X0  ),
    .pwrbus_ram_pd_C (  pwrbus_ram_pd_C0  ),
    .pwrbus_ram_pd_S (  pwrbus_ram_pd_S  ),
    .ra_T (  lat_fifo_rd_adr_p_T  ),
    .ra_R (  lat_fifo_rd_adr_p_R1  ),
    .ra_X (  lat_fifo_rd_adr_p_X1  ),
    .ra_C (  lat_fifo_rd_adr_p_C1  ),
    .ra_S (  lat_fifo_rd_adr_p_S  ),
    .re_T (  rd_enable_T  ),
    .re_R (  rd_enable_R0  ),
    .re_X (  rd_enable_X0  ),
    .re_C (  rd_enable_C0  ),
    .re_S (  rd_enable_S  ),
    .wa_T (  lat_fifo_wr_adr_T  ),
    .wa_R (  lat_fifo_wr_adr_R3  ),
    .wa_X (  lat_fifo_wr_adr_X3  ),
    .wa_C (  lat_fifo_wr_adr_C3  ),
    .wa_S (  lat_fifo_wr_adr_S  ),
    .we_T (  wr_pushing_T  ),
    .we_R (  wr_pushing_R8  ),
    .we_X (  wr_pushing_X8  ),
    .we_C (  wr_pushing_C8  ),
    .we_S (  wr_pushing_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .dout_T (  lat_fifo_rd_pd_p_T  ),
    .dout_R0 (  lat_fifo_rd_pd_p_R  ),
    .dout_X0 (  lat_fifo_rd_pd_p_X  ),
    .dout_C0 (  lat_fifo_rd_pd_p_C  ),
    .dout_S ( lat_fifo_rd_pd_p_S ),
    .we ( wr_pushing ),
    .wa ( lat_fifo_wr_adr ),
    .re ( rd_enable ),
    .di ( lat_fifo_wr_pd ),
    .clk ( nvdla_core_clk ),
    .pwrbus_ram_pd ( pwrbus_ram_pd ),
    .ra ( lat_fifo_rd_adr_p ),
    .ore ( ore ),
    .dout ( lat_fifo_rd_pd_p )
  );
  assign lat_fifo_rd_pd = lat_fifo_rd_pd_p;
  logic [513:0] lat_fifo_rd_pd_p_C0 ;
  logic [513:0] lat_fifo_rd_pd_p_R0 ;
  logic [513:0] lat_fifo_rd_pd_p_X0 ;
  assign lat_fifo_rd_pd_T = lat_fifo_rd_pd_p_T ;
  assign lat_fifo_rd_pd_p_C0 = lat_fifo_rd_pd_C ;
  assign lat_fifo_rd_pd_p_R0 = lat_fifo_rd_pd_R ;
  assign lat_fifo_rd_pd_p_X0 = lat_fifo_rd_pd_X ;
  assign lat_fifo_rd_pd_S = lat_fifo_rd_pd_p_S ;
  assign lat_fifo_rd_pvld = lat_fifo_rd_pvld_int;
  logic [0:0] lat_fifo_rd_pvld_int_C2 ;
  logic [0:0] lat_fifo_rd_pvld_int_R2 ;
  logic [0:0] lat_fifo_rd_pvld_int_X2 ;
  assign lat_fifo_rd_pvld_T = lat_fifo_rd_pvld_int_T ;
  assign lat_fifo_rd_pvld_int_C2 = lat_fifo_rd_pvld_C ;
  assign lat_fifo_rd_pvld_int_R2 = lat_fifo_rd_pvld_R ;
  assign lat_fifo_rd_pvld_int_X2 = lat_fifo_rd_pvld_X ;
  assign lat_fifo_rd_pvld_S = lat_fifo_rd_pvld_int_S ;
  assign rd_popping = ore;
  logic [0:0] ore_C8 ;
  logic [0:0] ore_R8 ;
  logic [0:0] ore_X8 ;
  assign rd_popping_T = ore_T ;
  assign ore_C8 = rd_popping_C ;
  assign ore_R8 = rd_popping_R ;
  assign ore_X8 = rd_popping_X ;
  assign rd_popping_S = ore_S ;
  assign wr_count_next_is_245 = lat_fifo_wr_busy_next;
  logic [0:0] lat_fifo_wr_busy_next_C2 ;
  logic [0:0] lat_fifo_wr_busy_next_R2 ;
  logic [0:0] lat_fifo_wr_busy_next_X2 ;
  assign wr_count_next_is_245_T = lat_fifo_wr_busy_next_T ;
  assign lat_fifo_wr_busy_next_C2 = wr_count_next_is_245_C ;
  assign lat_fifo_wr_busy_next_R2 = wr_count_next_is_245_R ;
  assign lat_fifo_wr_busy_next_X2 = wr_count_next_is_245_X ;
  assign wr_count_next_is_245_S = lat_fifo_wr_busy_next_S ;
  assign wr_limit_muxed = 8'b00000000;
  assign wr_limit_muxed_T = 0 ;
  assign wr_limit_muxed_S = 14'b1 ;
  assign wr_limit_reg = 8'b00000000;
  assign wr_limit_reg_T = 0 ;
  assign wr_limit_reg_S = 14'b1 ;
  assign wr_reserving = wr_pushing;
  logic [0:0] wr_pushing_C9 ;
  logic [0:0] wr_pushing_R9 ;
  logic [0:0] wr_pushing_X9 ;
  assign wr_reserving_T = wr_pushing_T ;
  assign wr_pushing_C9 = wr_reserving_C ;
  assign wr_pushing_R9 = wr_reserving_R ;
  assign wr_pushing_X9 = wr_reserving_X ;
  assign wr_reserving_S = wr_pushing_S ;
  assign lat_fifo_rd_pd_p_C = ( lat_fifo_rd_pd_p_C0 );
  assign rd_enable_C = ( rd_enable_C0 );
  assign pwrbus_ram_pd_C = ( pwrbus_ram_pd_C0 );
  assign lat_fifo_wr_pd_C = ( lat_fifo_wr_pd_C0 );
  assign nvdla_core_rstn_C = ( nvdla_core_rstn_C0 );
  assign nvdla_core_clk_mgated_enable_C = ( nvdla_core_clk_mgated_enable_C0 );
  assign nvdla_core_clk_C = ( nvdla_core_clk_C0 ) | ( nvdla_core_clk_C1 );
  assign rd_count_p_next_no_rd_popping_not_0_C = ( rd_count_p_next_no_rd_popping_not_0_C0 );
  assign rd_count_p_next_rd_popping_not_0_C = ( rd_count_p_next_rd_popping_not_0_C0 );
  assign _07__C = ( _07__C0 );
  assign _26__C = ( _26__C0 );
  assign _06__C = ( _06__C0 );
  assign _09__C = ( _09__C0 );
  assign _05__C = ( _05__C0 );
  assign _08__C = ( _08__C0 );
  assign wr_count_next_no_wr_popping_is_245_C = ( wr_count_next_no_wr_popping_is_245_C0 );
  assign wr_count_next_wr_popping_C = ( wr_count_next_wr_popping_C0 );
  assign _04__C = ( _04__C0 );
  assign _25__C = ( _25__C0 );
  assign wr_count_next_C = ( wr_count_next_C0 );
  assign _24__C = ( _24__C0 );
  assign wr_adr_next_C = ( wr_adr_next_C0 );
  assign rd_adr_next_C = ( rd_adr_next_C0 );
  assign rd_count_p_next_C = ( rd_count_p_next_C0 );
  assign _03__C = ( _03__C0 );
  assign _02__C = ( _02__C0 );
  assign lat_fifo_rd_adr_p_C = ( lat_fifo_rd_adr_p_C0 ) | ( lat_fifo_rd_adr_p_C1 );
  assign _00__C = ( _00__C0 );
  assign _01__C = ( _01__C0 );
  assign rd_req_next_C = ( rd_req_next_C0 );
  assign lat_fifo_wr_busy_next_C = ( lat_fifo_wr_busy_next_C0 ) | ( lat_fifo_wr_busy_next_C1 ) | ( lat_fifo_wr_busy_next_C2 );
  assign rd_count_p_next_no_rd_popping_C = ( rd_count_p_next_no_rd_popping_C0 ) | ( rd_count_p_next_no_rd_popping_C1 );
  assign rd_count_p_next_rd_popping_C = ( rd_count_p_next_rd_popping_C0 ) | ( rd_count_p_next_rd_popping_C1 );
  assign _21__C = ( _21__C0 );
  assign _19__C = ( _19__C0 );
  assign _20__C = ( _20__C0 );
  assign _11__C = ( _11__C0 );
  assign _15__C = ( _15__C0 ) | ( _15__C1 ) | ( _15__C2 );
  assign _22__C = ( _22__C0 );
  assign _18__C = ( _18__C0 );
  assign _17__C = ( _17__C0 );
  assign wr_popping_C = ( wr_popping_C0 ) | ( wr_popping_C1 ) | ( wr_popping_C2 ) | ( wr_popping_C3 );
  assign _16__C = ( _16__C0 );
  assign wr_pushing_C = ( wr_pushing_C0 ) | ( wr_pushing_C1 ) | ( wr_pushing_C2 ) | ( wr_pushing_C3 ) | ( wr_pushing_C4 ) | ( wr_pushing_C5 ) | ( wr_pushing_C6 ) | ( wr_pushing_C7 ) | ( wr_pushing_C8 ) | ( wr_pushing_C9 );
  assign rd_pushing_C = ( rd_pushing_C0 ) | ( rd_pushing_C1 ) | ( rd_pushing_C2 );
  assign ore_C = ( ore_C0 ) | ( ore_C1 ) | ( ore_C2 ) | ( ore_C3 ) | ( ore_C4 ) | ( ore_C5 ) | ( ore_C6 ) | ( ore_C7 ) | ( ore_C8 );
  assign _23__C = ( _23__C0 );
  assign _10__C = ( _10__C0 ) | ( _10__C1 );
  assign lat_fifo_wr_busy_int_C = ( lat_fifo_wr_busy_int_C0 ) | ( lat_fifo_wr_busy_int_C1 );
  assign lat_fifo_rd_prdy_C = ( lat_fifo_rd_prdy_C0 ) | ( lat_fifo_rd_prdy_C1 );
  assign _14__C = ( _14__C0 );
  assign rd_count_p_next_not_0_C = ( rd_count_p_next_not_0_C0 ) | ( rd_count_p_next_not_0_C1 );
  assign _13__C = ( _13__C0 );
  assign lat_fifo_rd_pvld_p_C = ( lat_fifo_rd_pvld_p_C0 ) | ( lat_fifo_rd_pvld_p_C1 ) | ( lat_fifo_rd_pvld_p_C2 ) | ( lat_fifo_rd_pvld_p_C3 );
  assign _12__C = ( _12__C0 );
  assign lat_fifo_rd_pvld_int_C = ( lat_fifo_rd_pvld_int_C0 ) | ( lat_fifo_rd_pvld_int_C1 ) | ( lat_fifo_rd_pvld_int_C2 );
  assign lat_fifo_wr_pvld_C = ( lat_fifo_wr_pvld_C0 );
  assign wr_count_next_no_wr_popping_C = ( wr_count_next_no_wr_popping_C0 ) | ( wr_count_next_no_wr_popping_C1 );
  assign lat_fifo_rd_count_p_C = ( lat_fifo_rd_count_p_C0 ) | ( lat_fifo_rd_count_p_C1 ) | ( lat_fifo_rd_count_p_C2 ) | ( lat_fifo_rd_count_p_C3 ) | ( lat_fifo_rd_count_p_C4 );
  assign lat_fifo_rd_adr_C = ( lat_fifo_rd_adr_C0 ) | ( lat_fifo_rd_adr_C1 ) | ( lat_fifo_rd_adr_C2 );
  assign lat_fifo_wr_adr_C = ( lat_fifo_wr_adr_C0 ) | ( lat_fifo_wr_adr_C1 ) | ( lat_fifo_wr_adr_C2 ) | ( lat_fifo_wr_adr_C3 );
  assign lat_fifo_wr_count_C = ( lat_fifo_wr_count_C0 ) | ( lat_fifo_wr_count_C1 ) | ( lat_fifo_wr_count_C2 ) | ( lat_fifo_wr_count_C3 ) | ( lat_fifo_wr_count_C4 );
  assign lat_fifo_wr_prdy_C = ( lat_fifo_wr_prdy_C0 ) | ( lat_fifo_wr_prdy_C1 );
  assign lat_fifo_rd_pvld_C = ( lat_fifo_rd_pvld_C0 );
  assign lat_fifo_rd_pd_C = ( lat_fifo_rd_pd_C0 );
  assign lat_fifo_rd_pd_p_X = ( lat_fifo_rd_pd_p_X0 );
  assign rd_enable_X = ( rd_enable_X0 );
  assign pwrbus_ram_pd_X = ( pwrbus_ram_pd_X0 );
  assign lat_fifo_wr_pd_X = ( lat_fifo_wr_pd_X0 );
  assign nvdla_core_rstn_X = ( nvdla_core_rstn_X0 );
  assign nvdla_core_clk_mgated_enable_X = ( nvdla_core_clk_mgated_enable_X0 );
  assign nvdla_core_clk_X = ( nvdla_core_clk_X0 ) | ( nvdla_core_clk_X1 );
  assign rd_count_p_next_no_rd_popping_not_0_X = ( rd_count_p_next_no_rd_popping_not_0_X0 );
  assign rd_count_p_next_rd_popping_not_0_X = ( rd_count_p_next_rd_popping_not_0_X0 );
  assign _07__X = ( _07__X0 );
  assign _26__X = ( _26__X0 );
  assign _06__X = ( _06__X0 );
  assign _09__X = ( _09__X0 );
  assign _05__X = ( _05__X0 );
  assign _08__X = ( _08__X0 );
  assign wr_count_next_no_wr_popping_is_245_X = ( wr_count_next_no_wr_popping_is_245_X0 );
  assign wr_count_next_wr_popping_X = ( wr_count_next_wr_popping_X0 );
  assign _04__X = ( _04__X0 );
  assign _25__X = ( _25__X0 );
  assign wr_count_next_X = ( wr_count_next_X0 );
  assign _24__X = ( _24__X0 );
  assign wr_adr_next_X = ( wr_adr_next_X0 );
  assign rd_adr_next_X = ( rd_adr_next_X0 );
  assign rd_count_p_next_X = ( rd_count_p_next_X0 );
  assign _03__X = ( _03__X0 );
  assign _02__X = ( _02__X0 );
  assign lat_fifo_rd_adr_p_X = ( lat_fifo_rd_adr_p_X0 ) | ( lat_fifo_rd_adr_p_X1 );
  assign _00__X = ( _00__X0 );
  assign _01__X = ( _01__X0 );
  assign rd_req_next_X = ( rd_req_next_X0 );
  assign lat_fifo_wr_busy_next_X = ( lat_fifo_wr_busy_next_X0 ) | ( lat_fifo_wr_busy_next_X1 ) | ( lat_fifo_wr_busy_next_X2 );
  assign rd_count_p_next_no_rd_popping_X = ( rd_count_p_next_no_rd_popping_X0 ) | ( rd_count_p_next_no_rd_popping_X1 );
  assign rd_count_p_next_rd_popping_X = ( rd_count_p_next_rd_popping_X0 ) | ( rd_count_p_next_rd_popping_X1 );
  assign _21__X = ( _21__X0 );
  assign _19__X = ( _19__X0 );
  assign _20__X = ( _20__X0 );
  assign _11__X = ( _11__X0 );
  assign _15__X = ( _15__X0 ) | ( _15__X1 ) | ( _15__X2 );
  assign _22__X = ( _22__X0 );
  assign _18__X = ( _18__X0 );
  assign _17__X = ( _17__X0 );
  assign wr_popping_X = ( wr_popping_X0 ) | ( wr_popping_X1 ) | ( wr_popping_X2 ) | ( wr_popping_X3 );
  assign _16__X = ( _16__X0 );
  assign wr_pushing_X = ( wr_pushing_X0 ) | ( wr_pushing_X1 ) | ( wr_pushing_X2 ) | ( wr_pushing_X3 ) | ( wr_pushing_X4 ) | ( wr_pushing_X5 ) | ( wr_pushing_X6 ) | ( wr_pushing_X7 ) | ( wr_pushing_X8 ) | ( wr_pushing_X9 );
  assign rd_pushing_X = ( rd_pushing_X0 ) | ( rd_pushing_X1 ) | ( rd_pushing_X2 );
  assign ore_X = ( ore_X0 ) | ( ore_X1 ) | ( ore_X2 ) | ( ore_X3 ) | ( ore_X4 ) | ( ore_X5 ) | ( ore_X6 ) | ( ore_X7 ) | ( ore_X8 );
  assign _23__X = ( _23__X0 );
  assign _10__X = ( _10__X0 ) | ( _10__X1 );
  assign lat_fifo_wr_busy_int_X = ( lat_fifo_wr_busy_int_X0 ) | ( lat_fifo_wr_busy_int_X1 );
  assign lat_fifo_rd_prdy_X = ( lat_fifo_rd_prdy_X0 ) | ( lat_fifo_rd_prdy_X1 );
  assign _14__X = ( _14__X0 );
  assign rd_count_p_next_not_0_X = ( rd_count_p_next_not_0_X0 ) | ( rd_count_p_next_not_0_X1 );
  assign _13__X = ( _13__X0 );
  assign lat_fifo_rd_pvld_p_X = ( lat_fifo_rd_pvld_p_X0 ) | ( lat_fifo_rd_pvld_p_X1 ) | ( lat_fifo_rd_pvld_p_X2 ) | ( lat_fifo_rd_pvld_p_X3 );
  assign _12__X = ( _12__X0 );
  assign lat_fifo_rd_pvld_int_X = ( lat_fifo_rd_pvld_int_X0 ) | ( lat_fifo_rd_pvld_int_X1 ) | ( lat_fifo_rd_pvld_int_X2 );
  assign lat_fifo_wr_pvld_X = ( lat_fifo_wr_pvld_X0 );
  assign wr_count_next_no_wr_popping_X = ( wr_count_next_no_wr_popping_X0 ) | ( wr_count_next_no_wr_popping_X1 );
  assign lat_fifo_rd_count_p_X = ( lat_fifo_rd_count_p_X0 ) | ( lat_fifo_rd_count_p_X1 ) | ( lat_fifo_rd_count_p_X2 ) | ( lat_fifo_rd_count_p_X3 ) | ( lat_fifo_rd_count_p_X4 );
  assign lat_fifo_rd_adr_X = ( lat_fifo_rd_adr_X0 ) | ( lat_fifo_rd_adr_X1 ) | ( lat_fifo_rd_adr_X2 );
  assign lat_fifo_wr_adr_X = ( lat_fifo_wr_adr_X0 ) | ( lat_fifo_wr_adr_X1 ) | ( lat_fifo_wr_adr_X2 ) | ( lat_fifo_wr_adr_X3 );
  assign lat_fifo_wr_count_X = ( lat_fifo_wr_count_X0 ) | ( lat_fifo_wr_count_X1 ) | ( lat_fifo_wr_count_X2 ) | ( lat_fifo_wr_count_X3 ) | ( lat_fifo_wr_count_X4 );
  assign lat_fifo_wr_prdy_X = ( lat_fifo_wr_prdy_X0 ) | ( lat_fifo_wr_prdy_X1 );
  assign lat_fifo_rd_pvld_X = ( lat_fifo_rd_pvld_X0 );
  assign lat_fifo_rd_pd_X = ( lat_fifo_rd_pd_X0 );
  assign lat_fifo_rd_pd_p_R = ( lat_fifo_rd_pd_p_X0 & lat_fifo_rd_pd_p_R0 );
  assign rd_enable_R = ( rd_enable_X0 & rd_enable_R0 );
  assign pwrbus_ram_pd_R = ( pwrbus_ram_pd_X0 & pwrbus_ram_pd_R0 );
  assign lat_fifo_wr_pd_R = ( lat_fifo_wr_pd_X0 & lat_fifo_wr_pd_R0 );
  assign nvdla_core_rstn_R = ( nvdla_core_rstn_X0 & nvdla_core_rstn_R0 );
  assign nvdla_core_clk_mgated_enable_R = ( nvdla_core_clk_mgated_enable_X0 & nvdla_core_clk_mgated_enable_R0 );
  assign nvdla_core_clk_R = ( nvdla_core_clk_X0 & nvdla_core_clk_R0 ) | ( nvdla_core_clk_X1 & nvdla_core_clk_R1 );
  assign rd_count_p_next_no_rd_popping_not_0_R = ( rd_count_p_next_no_rd_popping_not_0_X0 & rd_count_p_next_no_rd_popping_not_0_R0 );
  assign rd_count_p_next_rd_popping_not_0_R = ( rd_count_p_next_rd_popping_not_0_X0 & rd_count_p_next_rd_popping_not_0_R0 );
  assign _07__R = ( _07__X0 & _07__R0 );
  assign _26__R = ( _26__X0 & _26__R0 );
  assign _06__R = ( _06__X0 & _06__R0 );
  assign _09__R = ( _09__X0 & _09__R0 );
  assign _05__R = ( _05__X0 & _05__R0 );
  assign _08__R = ( _08__X0 & _08__R0 );
  assign wr_count_next_no_wr_popping_is_245_R = ( wr_count_next_no_wr_popping_is_245_X0 & wr_count_next_no_wr_popping_is_245_R0 );
  assign wr_count_next_wr_popping_R = ( wr_count_next_wr_popping_X0 & wr_count_next_wr_popping_R0 );
  assign _04__R = ( _04__X0 & _04__R0 );
  assign _25__R = ( _25__X0 & _25__R0 );
  assign wr_count_next_R = ( wr_count_next_X0 & wr_count_next_R0 );
  assign _24__R = ( _24__X0 & _24__R0 );
  assign wr_adr_next_R = ( wr_adr_next_X0 & wr_adr_next_R0 );
  assign rd_adr_next_R = ( rd_adr_next_X0 & rd_adr_next_R0 );
  assign rd_count_p_next_R = ( rd_count_p_next_X0 & rd_count_p_next_R0 );
  assign _03__R = ( _03__X0 & _03__R0 );
  assign _02__R = ( _02__X0 & _02__R0 );
  assign lat_fifo_rd_adr_p_R = ( lat_fifo_rd_adr_p_X0 & lat_fifo_rd_adr_p_R0 ) | ( lat_fifo_rd_adr_p_X1 & lat_fifo_rd_adr_p_R1 );
  assign _00__R = ( _00__X0 & _00__R0 );
  assign _01__R = ( _01__X0 & _01__R0 );
  assign rd_req_next_R = ( rd_req_next_X0 & rd_req_next_R0 );
  assign lat_fifo_wr_busy_next_R = ( lat_fifo_wr_busy_next_X0 & lat_fifo_wr_busy_next_R0 ) | ( lat_fifo_wr_busy_next_X1 & lat_fifo_wr_busy_next_R1 ) | ( lat_fifo_wr_busy_next_X2 & lat_fifo_wr_busy_next_R2 );
  assign rd_count_p_next_no_rd_popping_R = ( rd_count_p_next_no_rd_popping_X0 & rd_count_p_next_no_rd_popping_R0 ) | ( rd_count_p_next_no_rd_popping_X1 & rd_count_p_next_no_rd_popping_R1 );
  assign rd_count_p_next_rd_popping_R = ( rd_count_p_next_rd_popping_X0 & rd_count_p_next_rd_popping_R0 ) | ( rd_count_p_next_rd_popping_X1 & rd_count_p_next_rd_popping_R1 );
  assign _21__R = ( _21__X0 & _21__R0 );
  assign _19__R = ( _19__X0 & _19__R0 );
  assign _20__R = ( _20__X0 & _20__R0 );
  assign _11__R = ( _11__X0 & _11__R0 );
  assign _15__R = ( _15__X0 & _15__R0 ) | ( _15__X1 & _15__R1 ) | ( _15__X2 & _15__R2 );
  assign _22__R = ( _22__X0 & _22__R0 );
  assign _18__R = ( _18__X0 & _18__R0 );
  assign _17__R = ( _17__X0 & _17__R0 );
  assign wr_popping_R = ( wr_popping_X0 & wr_popping_R0 ) | ( wr_popping_X1 & wr_popping_R1 ) | ( wr_popping_X2 & wr_popping_R2 ) | ( wr_popping_X3 & wr_popping_R3 );
  assign _16__R = ( _16__X0 & _16__R0 );
  assign wr_pushing_R = ( wr_pushing_X0 & wr_pushing_R0 ) | ( wr_pushing_X1 & wr_pushing_R1 ) | ( wr_pushing_X2 & wr_pushing_R2 ) | ( wr_pushing_X3 & wr_pushing_R3 ) | ( wr_pushing_X4 & wr_pushing_R4 ) | ( wr_pushing_X5 & wr_pushing_R5 ) | ( wr_pushing_X6 & wr_pushing_R6 ) | ( wr_pushing_X7 & wr_pushing_R7 ) | ( wr_pushing_X8 & wr_pushing_R8 ) | ( wr_pushing_X9 & wr_pushing_R9 );
  assign rd_pushing_R = ( rd_pushing_X0 & rd_pushing_R0 ) | ( rd_pushing_X1 & rd_pushing_R1 ) | ( rd_pushing_X2 & rd_pushing_R2 );
  assign ore_R = ( ore_X0 & ore_R0 ) | ( ore_X1 & ore_R1 ) | ( ore_X2 & ore_R2 ) | ( ore_X3 & ore_R3 ) | ( ore_X4 & ore_R4 ) | ( ore_X5 & ore_R5 ) | ( ore_X6 & ore_R6 ) | ( ore_X7 & ore_R7 ) | ( ore_X8 & ore_R8 );
  assign _23__R = ( _23__X0 & _23__R0 );
  assign _10__R = ( _10__X0 & _10__R0 ) | ( _10__X1 & _10__R1 );
  assign lat_fifo_wr_busy_int_R = ( lat_fifo_wr_busy_int_X0 & lat_fifo_wr_busy_int_R0 ) | ( lat_fifo_wr_busy_int_X1 & lat_fifo_wr_busy_int_R1 );
  assign lat_fifo_rd_prdy_R = ( lat_fifo_rd_prdy_X0 & lat_fifo_rd_prdy_R0 ) | ( lat_fifo_rd_prdy_X1 & lat_fifo_rd_prdy_R1 );
  assign _14__R = ( _14__X0 & _14__R0 );
  assign rd_count_p_next_not_0_R = ( rd_count_p_next_not_0_X0 & rd_count_p_next_not_0_R0 ) | ( rd_count_p_next_not_0_X1 & rd_count_p_next_not_0_R1 );
  assign _13__R = ( _13__X0 & _13__R0 );
  assign lat_fifo_rd_pvld_p_R = ( lat_fifo_rd_pvld_p_X0 & lat_fifo_rd_pvld_p_R0 ) | ( lat_fifo_rd_pvld_p_X1 & lat_fifo_rd_pvld_p_R1 ) | ( lat_fifo_rd_pvld_p_X2 & lat_fifo_rd_pvld_p_R2 ) | ( lat_fifo_rd_pvld_p_X3 & lat_fifo_rd_pvld_p_R3 );
  assign _12__R = ( _12__X0 & _12__R0 );
  assign lat_fifo_rd_pvld_int_R = ( lat_fifo_rd_pvld_int_X0 & lat_fifo_rd_pvld_int_R0 ) | ( lat_fifo_rd_pvld_int_X1 & lat_fifo_rd_pvld_int_R1 ) | ( lat_fifo_rd_pvld_int_X2 & lat_fifo_rd_pvld_int_R2 );
  assign lat_fifo_wr_pvld_R = ( lat_fifo_wr_pvld_X0 & lat_fifo_wr_pvld_R0 );
  assign wr_count_next_no_wr_popping_R = ( wr_count_next_no_wr_popping_X0 & wr_count_next_no_wr_popping_R0 ) | ( wr_count_next_no_wr_popping_X1 & wr_count_next_no_wr_popping_R1 );
  assign lat_fifo_rd_count_p_R = ( lat_fifo_rd_count_p_X0 & lat_fifo_rd_count_p_R0 ) | ( lat_fifo_rd_count_p_X1 & lat_fifo_rd_count_p_R1 ) | ( lat_fifo_rd_count_p_X2 & lat_fifo_rd_count_p_R2 ) | ( lat_fifo_rd_count_p_X3 & lat_fifo_rd_count_p_R3 ) | ( lat_fifo_rd_count_p_X4 & lat_fifo_rd_count_p_R4 );
  assign lat_fifo_rd_adr_R = ( lat_fifo_rd_adr_X0 & lat_fifo_rd_adr_R0 ) | ( lat_fifo_rd_adr_X1 & lat_fifo_rd_adr_R1 ) | ( lat_fifo_rd_adr_X2 & lat_fifo_rd_adr_R2 );
  assign lat_fifo_wr_adr_R = ( lat_fifo_wr_adr_X0 & lat_fifo_wr_adr_R0 ) | ( lat_fifo_wr_adr_X1 & lat_fifo_wr_adr_R1 ) | ( lat_fifo_wr_adr_X2 & lat_fifo_wr_adr_R2 ) | ( lat_fifo_wr_adr_X3 & lat_fifo_wr_adr_R3 );
  assign lat_fifo_wr_count_R = ( lat_fifo_wr_count_X0 & lat_fifo_wr_count_R0 ) | ( lat_fifo_wr_count_X1 & lat_fifo_wr_count_R1 ) | ( lat_fifo_wr_count_X2 & lat_fifo_wr_count_R2 ) | ( lat_fifo_wr_count_X3 & lat_fifo_wr_count_R3 ) | ( lat_fifo_wr_count_X4 & lat_fifo_wr_count_R4 );
  assign lat_fifo_wr_prdy_R = ( lat_fifo_wr_prdy_X0 & lat_fifo_wr_prdy_R0 ) | ( lat_fifo_wr_prdy_X1 & lat_fifo_wr_prdy_R1 );
  assign lat_fifo_rd_pvld_R = ( lat_fifo_rd_pvld_X0 & lat_fifo_rd_pvld_R0 );
  assign lat_fifo_rd_pd_R = ( lat_fifo_rd_pd_X0 & lat_fifo_rd_pd_R0 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { nvdla_core_clk_mgated_R , nvdla_core_clk_mgated_C , nvdla_core_clk_mgated_X , rd_popping_R , rd_popping_C , rd_popping_X , wr_count_next_is_245_R , wr_count_next_is_245_C , wr_count_next_is_245_X , wr_limit_muxed_R , wr_limit_muxed_C , wr_limit_muxed_X , wr_limit_reg_R , wr_limit_reg_C , wr_limit_reg_X , wr_reserving_R , wr_reserving_C , wr_reserving_X  } = 0;
  always @( posedge nvdla_core_clk_mgated ) begin
    if( !nvdla_core_rstn ) lat_fifo_rd_pvld_int_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) lat_fifo_rd_pvld_int_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) lat_fifo_rd_pvld_int_PREV_VAL1 <= lat_fifo_rd_pvld_int ;
    if( INSTR_IN_ZY ) lat_fifo_rd_pvld_int_PREV_VAL2 <= lat_fifo_rd_pvld_int_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk_mgated ) begin
    if( !nvdla_core_rstn ) lat_fifo_rd_pvld_p_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) lat_fifo_rd_pvld_p_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) lat_fifo_rd_pvld_p_PREV_VAL1 <= lat_fifo_rd_pvld_p ;
    if( INSTR_IN_ZY ) lat_fifo_rd_pvld_p_PREV_VAL2 <= lat_fifo_rd_pvld_p_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk_mgated ) begin
    if( !nvdla_core_rstn ) lat_fifo_rd_count_p_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) lat_fifo_rd_count_p_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) lat_fifo_rd_count_p_PREV_VAL1 <= lat_fifo_rd_count_p ;
    if( INSTR_IN_ZY ) lat_fifo_rd_count_p_PREV_VAL2 <= lat_fifo_rd_count_p_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk_mgated ) begin
    if( !nvdla_core_rstn ) rd_pushing_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) rd_pushing_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) rd_pushing_PREV_VAL1 <= rd_pushing ;
    if( INSTR_IN_ZY ) rd_pushing_PREV_VAL2 <= rd_pushing_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk_mgated ) begin
    if( !nvdla_core_rstn ) wr_popping_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) wr_popping_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) wr_popping_PREV_VAL1 <= wr_popping ;
    if( INSTR_IN_ZY ) wr_popping_PREV_VAL2 <= wr_popping_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk_mgated ) begin
    if( !nvdla_core_rstn ) lat_fifo_rd_adr_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) lat_fifo_rd_adr_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) lat_fifo_rd_adr_PREV_VAL1 <= lat_fifo_rd_adr ;
    if( INSTR_IN_ZY ) lat_fifo_rd_adr_PREV_VAL2 <= lat_fifo_rd_adr_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk_mgated ) begin
    if( !nvdla_core_rstn ) lat_fifo_wr_adr_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) lat_fifo_wr_adr_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) lat_fifo_wr_adr_PREV_VAL1 <= lat_fifo_wr_adr ;
    if( INSTR_IN_ZY ) lat_fifo_wr_adr_PREV_VAL2 <= lat_fifo_wr_adr_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk_mgated ) begin
    if( !nvdla_core_rstn ) lat_fifo_wr_busy_int_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) lat_fifo_wr_busy_int_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) lat_fifo_wr_busy_int_PREV_VAL1 <= lat_fifo_wr_busy_int ;
    if( INSTR_IN_ZY ) lat_fifo_wr_busy_int_PREV_VAL2 <= lat_fifo_wr_busy_int_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk_mgated ) begin
    if( !nvdla_core_rstn ) lat_fifo_wr_count_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) lat_fifo_wr_count_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) lat_fifo_wr_count_PREV_VAL1 <= lat_fifo_wr_count ;
    if( INSTR_IN_ZY ) lat_fifo_wr_count_PREV_VAL2 <= lat_fifo_wr_count_PREV_VAL1 ;
  end
 // ground taints for unused wire slices
  assert property( lat_fifo_rd_adr_r_flag == 0 || lat_fifo_rd_adr_PREV_VAL1 == lat_fifo_rd_adr_PREV_VAL2 );
  assert property( lat_fifo_rd_count_p_r_flag == 0 || lat_fifo_rd_count_p_PREV_VAL1 == lat_fifo_rd_count_p_PREV_VAL2 );
  assert property( lat_fifo_rd_pvld_int_r_flag == 0 || lat_fifo_rd_pvld_int_PREV_VAL1 == lat_fifo_rd_pvld_int_PREV_VAL2 );
  assert property( lat_fifo_rd_pvld_p_r_flag == 0 || lat_fifo_rd_pvld_p_PREV_VAL1 == lat_fifo_rd_pvld_p_PREV_VAL2 );
  assert property( lat_fifo_wr_adr_r_flag == 0 || lat_fifo_wr_adr_PREV_VAL1 == lat_fifo_wr_adr_PREV_VAL2 );
  assert property( lat_fifo_wr_busy_int_r_flag == 0 || lat_fifo_wr_busy_int_PREV_VAL1 == lat_fifo_wr_busy_int_PREV_VAL2 );
  assert property( lat_fifo_wr_count_r_flag == 0 || lat_fifo_wr_count_PREV_VAL1 == lat_fifo_wr_count_PREV_VAL2 );
  assert property( rd_pushing_r_flag == 0 || rd_pushing_PREV_VAL1 == rd_pushing_PREV_VAL2 );
  assert property( wr_popping_r_flag == 0 || wr_popping_PREV_VAL1 == wr_popping_PREV_VAL2 );
  assign rst_zy = !nvdla_core_rstn ;
endmodule
