module HLS_fp17_to_fp32_core_chn_a_rsci_chn_a_wait_ctrl ( chn_a_rsci_iswt0 , chn_a_rsci_ld_core_psct , chn_a_rsci_oswt , chn_a_rsci_vd , core_wen , core_wten , nvdla_core_clk , nvdla_core_rstn , INSTR_IN_ZY , chn_a_rsci_bdwt_R0 , chn_a_rsci_bdwt_C0 , chn_a_rsci_bdwt_X0 , chn_a_rsci_biwt_R0 , chn_a_rsci_biwt_C0 , chn_a_rsci_biwt_X0 , chn_a_rsci_iswt0_T , chn_a_rsci_iswt0_S , chn_a_rsci_ld_core_psct_T , chn_a_rsci_ld_core_psct_S , chn_a_rsci_ld_core_sct_R0 , chn_a_rsci_ld_core_sct_C0 , chn_a_rsci_ld_core_sct_X0 , chn_a_rsci_oswt_T , chn_a_rsci_oswt_S , chn_a_rsci_vd_T , chn_a_rsci_vd_S , core_wen_T , core_wen_S , core_wten_T , core_wten_S , nvdla_core_clk_T , nvdla_core_clk_S , nvdla_core_rstn_T , nvdla_core_rstn_S , chn_a_rsci_bdwt , chn_a_rsci_biwt , chn_a_rsci_ld_core_sct , chn_a_rsci_bdwt_T , chn_a_rsci_bdwt_S , chn_a_rsci_biwt_T , chn_a_rsci_biwt_S , chn_a_rsci_iswt0_R , chn_a_rsci_iswt0_X , chn_a_rsci_iswt0_C , chn_a_rsci_ld_core_psct_R , chn_a_rsci_ld_core_psct_X , chn_a_rsci_ld_core_psct_C , chn_a_rsci_ld_core_sct_T , chn_a_rsci_ld_core_sct_S , chn_a_rsci_oswt_R , chn_a_rsci_oswt_X , chn_a_rsci_oswt_C , chn_a_rsci_vd_R , chn_a_rsci_vd_X , chn_a_rsci_vd_C , core_wen_R , core_wen_X , core_wen_C , core_wten_R , core_wten_X , core_wten_C , nvdla_core_clk_R , nvdla_core_clk_X , nvdla_core_clk_C , nvdla_core_rstn_R , nvdla_core_rstn_X , nvdla_core_rstn_C );
  logic rst_zy;
  integer i;
  input INSTR_IN_ZY;
  logic _00_;
  logic _00__T ;
  logic _00__R ;
  logic _00__C ;
  logic _00__X ;
  logic [13:0] _00__S ;
  logic _01_;
  logic _01__T ;
  logic _01__R ;
  logic _01__C ;
  logic _01__X ;
  logic [13:0] _01__S ;
  logic _02_;
  logic _02__T ;
  logic _02__R ;
  logic _02__C ;
  logic _02__X ;
  logic [13:0] _02__S ;
  logic _03_;
  logic _03__T ;
  logic _03__R ;
  logic _03__C ;
  logic _03__X ;
  logic [13:0] _03__S ;
  output chn_a_rsci_bdwt;
  logic chn_a_rsci_bdwt ;
  output chn_a_rsci_bdwt_T ;
  logic chn_a_rsci_bdwt_T ;
  logic chn_a_rsci_bdwt_R ;
  logic chn_a_rsci_bdwt_C ;
  logic chn_a_rsci_bdwt_X ;
  logic [13:0] chn_a_rsci_bdwt_S ;
  input chn_a_rsci_bdwt_R0 ;
  input chn_a_rsci_bdwt_C0 ;
  input chn_a_rsci_bdwt_X0 ;
  output [13:0] chn_a_rsci_bdwt_S ;
  output chn_a_rsci_biwt;
  logic chn_a_rsci_biwt ;
  output chn_a_rsci_biwt_T ;
  logic chn_a_rsci_biwt_T ;
  logic chn_a_rsci_biwt_R ;
  logic chn_a_rsci_biwt_C ;
  logic chn_a_rsci_biwt_X ;
  logic [13:0] chn_a_rsci_biwt_S ;
  input chn_a_rsci_biwt_R0 ;
  input chn_a_rsci_biwt_C0 ;
  input chn_a_rsci_biwt_X0 ;
  output [13:0] chn_a_rsci_biwt_S ;
  logic chn_a_rsci_icwt;
  logic  chn_a_rsci_icwt_T ;
  logic  chn_a_rsci_icwt_PREV_VAL1 ;
  logic  chn_a_rsci_icwt_PREV_VAL2 ;
  logic  chn_a_rsci_icwt_R ;
  logic  chn_a_rsci_icwt_X ;
  logic  chn_a_rsci_icwt_C ;
  logic [13:0] chn_a_rsci_icwt_S ;
  logic chn_a_rsci_icwt_t_flag ;
  logic chn_a_rsci_icwt_r_flag ;
  assign chn_a_rsci_icwt_S = 526 ;
  input chn_a_rsci_iswt0;
  input chn_a_rsci_iswt0_T ;
  input [13:0] chn_a_rsci_iswt0_S ;
  output chn_a_rsci_iswt0_R ;
  output chn_a_rsci_iswt0_X ;
  output chn_a_rsci_iswt0_C ;
  input chn_a_rsci_ld_core_psct;
  input chn_a_rsci_ld_core_psct_T ;
  input [13:0] chn_a_rsci_ld_core_psct_S ;
  output chn_a_rsci_ld_core_psct_R ;
  output chn_a_rsci_ld_core_psct_X ;
  output chn_a_rsci_ld_core_psct_C ;
  output chn_a_rsci_ld_core_sct;
  logic chn_a_rsci_ld_core_sct ;
  output chn_a_rsci_ld_core_sct_T ;
  logic chn_a_rsci_ld_core_sct_T ;
  logic chn_a_rsci_ld_core_sct_R ;
  logic chn_a_rsci_ld_core_sct_C ;
  logic chn_a_rsci_ld_core_sct_X ;
  logic [13:0] chn_a_rsci_ld_core_sct_S ;
  input chn_a_rsci_ld_core_sct_R0 ;
  input chn_a_rsci_ld_core_sct_C0 ;
  input chn_a_rsci_ld_core_sct_X0 ;
  output [13:0] chn_a_rsci_ld_core_sct_S ;
  logic chn_a_rsci_ogwt;
  logic chn_a_rsci_ogwt_T ;
  logic chn_a_rsci_ogwt_R ;
  logic chn_a_rsci_ogwt_C ;
  logic chn_a_rsci_ogwt_X ;
  logic [13:0] chn_a_rsci_ogwt_S ;
  input chn_a_rsci_oswt;
  input chn_a_rsci_oswt_T ;
  input [13:0] chn_a_rsci_oswt_S ;
  output chn_a_rsci_oswt_R ;
  output chn_a_rsci_oswt_X ;
  output chn_a_rsci_oswt_C ;
  logic chn_a_rsci_pdswt0;
  logic chn_a_rsci_pdswt0_T ;
  logic chn_a_rsci_pdswt0_R ;
  logic chn_a_rsci_pdswt0_C ;
  logic chn_a_rsci_pdswt0_X ;
  logic [13:0] chn_a_rsci_pdswt0_S ;
  input chn_a_rsci_vd;
  input chn_a_rsci_vd_T ;
  input [13:0] chn_a_rsci_vd_S ;
  output chn_a_rsci_vd_R ;
  output chn_a_rsci_vd_X ;
  output chn_a_rsci_vd_C ;
  input core_wen;
  input core_wen_T ;
  input [13:0] core_wen_S ;
  output core_wen_R ;
  output core_wen_X ;
  output core_wen_C ;
  input core_wten;
  input core_wten_T ;
  input [13:0] core_wten_S ;
  output core_wten_R ;
  output core_wten_X ;
  output core_wten_C ;
  input nvdla_core_clk;
  input nvdla_core_clk_T ;
  input [13:0] nvdla_core_clk_S ;
  output nvdla_core_clk_R ;
  output nvdla_core_clk_X ;
  output nvdla_core_clk_C ;
  input nvdla_core_rstn;
  input nvdla_core_rstn_T ;
  input [13:0] nvdla_core_rstn_S ;
  output nvdla_core_rstn_R ;
  output nvdla_core_rstn_X ;
  output nvdla_core_rstn_C ;
  assign chn_a_rsci_pdswt0 = _01_ & chn_a_rsci_iswt0;
  assign chn_a_rsci_pdswt0_S = 0 ;
  logic [0:0] _01__C0 ;
  logic [0:0] _01__R0 ;
  logic [0:0] _01__X0 ;
  logic [0:0] chn_a_rsci_iswt0_C0 ;
  logic [0:0] chn_a_rsci_iswt0_R0 ;
  logic [0:0] chn_a_rsci_iswt0_X0 ;
  assign chn_a_rsci_pdswt0_T = _01__T | chn_a_rsci_iswt0_T ;
  assign _01__C0 = chn_a_rsci_pdswt0_C ;
  assign _01__X0 = chn_a_rsci_pdswt0_X ;
  assign chn_a_rsci_iswt0_C0 = chn_a_rsci_pdswt0_C ;
  assign chn_a_rsci_iswt0_X0 = chn_a_rsci_pdswt0_X ;
  assign _01__R0 = ( chn_a_rsci_pdswt0_R | chn_a_rsci_pdswt0_C & chn_a_rsci_iswt0_T ) & { 1{ chn_a_rsci_iswt0 != 0 }} ;
  assign chn_a_rsci_iswt0_R0 = ( chn_a_rsci_pdswt0_R | chn_a_rsci_pdswt0_C & _01__T ) & { 1{ _01_ != 0 }} ;
  assign chn_a_rsci_biwt = chn_a_rsci_ogwt & chn_a_rsci_vd;
  assign chn_a_rsci_biwt_S = 0 ;
  logic [0:0] chn_a_rsci_ogwt_C0 ;
  logic [0:0] chn_a_rsci_ogwt_R0 ;
  logic [0:0] chn_a_rsci_ogwt_X0 ;
  logic [0:0] chn_a_rsci_vd_C0 ;
  logic [0:0] chn_a_rsci_vd_R0 ;
  logic [0:0] chn_a_rsci_vd_X0 ;
  assign chn_a_rsci_biwt_T = chn_a_rsci_ogwt_T | chn_a_rsci_vd_T ;
  assign chn_a_rsci_ogwt_C0 = chn_a_rsci_biwt_C ;
  assign chn_a_rsci_ogwt_X0 = chn_a_rsci_biwt_X ;
  assign chn_a_rsci_vd_C0 = chn_a_rsci_biwt_C ;
  assign chn_a_rsci_vd_X0 = chn_a_rsci_biwt_X ;
  assign chn_a_rsci_ogwt_R0 = ( chn_a_rsci_biwt_R | chn_a_rsci_biwt_C & chn_a_rsci_vd_T ) & { 1{ chn_a_rsci_vd != 0 }} ;
  assign chn_a_rsci_vd_R0 = ( chn_a_rsci_biwt_R | chn_a_rsci_biwt_C & chn_a_rsci_ogwt_T ) & { 1{ chn_a_rsci_ogwt != 0 }} ;
  assign chn_a_rsci_bdwt = chn_a_rsci_oswt & core_wen;
  assign chn_a_rsci_bdwt_S = 0 ;
  logic [0:0] chn_a_rsci_oswt_C0 ;
  logic [0:0] chn_a_rsci_oswt_R0 ;
  logic [0:0] chn_a_rsci_oswt_X0 ;
  logic [0:0] core_wen_C0 ;
  logic [0:0] core_wen_R0 ;
  logic [0:0] core_wen_X0 ;
  assign chn_a_rsci_bdwt_T = chn_a_rsci_oswt_T | core_wen_T ;
  assign chn_a_rsci_oswt_C0 = chn_a_rsci_bdwt_C ;
  assign chn_a_rsci_oswt_X0 = chn_a_rsci_bdwt_X ;
  assign core_wen_C0 = chn_a_rsci_bdwt_C ;
  assign core_wen_X0 = chn_a_rsci_bdwt_X ;
  assign chn_a_rsci_oswt_R0 = ( chn_a_rsci_bdwt_R | chn_a_rsci_bdwt_C & core_wen_T ) & { 1{ core_wen != 0 }} ;
  assign core_wen_R0 = ( chn_a_rsci_bdwt_R | chn_a_rsci_bdwt_C & chn_a_rsci_oswt_T ) & { 1{ chn_a_rsci_oswt != 0 }} ;
  assign chn_a_rsci_ld_core_sct = chn_a_rsci_ld_core_psct & chn_a_rsci_ogwt;
  assign chn_a_rsci_ld_core_sct_S = 0 ;
  logic [0:0] chn_a_rsci_ld_core_psct_C0 ;
  logic [0:0] chn_a_rsci_ld_core_psct_R0 ;
  logic [0:0] chn_a_rsci_ld_core_psct_X0 ;
  logic [0:0] chn_a_rsci_ogwt_C1 ;
  logic [0:0] chn_a_rsci_ogwt_R1 ;
  logic [0:0] chn_a_rsci_ogwt_X1 ;
  assign chn_a_rsci_ld_core_sct_T = chn_a_rsci_ld_core_psct_T | chn_a_rsci_ogwt_T ;
  assign chn_a_rsci_ld_core_psct_C0 = chn_a_rsci_ld_core_sct_C ;
  assign chn_a_rsci_ld_core_psct_X0 = chn_a_rsci_ld_core_sct_X ;
  assign chn_a_rsci_ogwt_C1 = chn_a_rsci_ld_core_sct_C ;
  assign chn_a_rsci_ogwt_X1 = chn_a_rsci_ld_core_sct_X ;
  assign chn_a_rsci_ld_core_psct_R0 = ( chn_a_rsci_ld_core_sct_R | chn_a_rsci_ld_core_sct_C & chn_a_rsci_ogwt_T ) & { 1{ chn_a_rsci_ogwt != 0 }} ;
  assign chn_a_rsci_ogwt_R1 = ( chn_a_rsci_ld_core_sct_R | chn_a_rsci_ld_core_sct_C & chn_a_rsci_ld_core_psct_T ) & { 1{ chn_a_rsci_ld_core_psct != 0 }} ;
  assign _01_ = ~ core_wten;
  logic [0:0] core_wten_C0 ;
  logic [0:0] core_wten_R0 ;
  logic [0:0] core_wten_X0 ;
  assign _01__T = core_wten_T ;
  assign core_wten_C0 = _01__C ;
  assign core_wten_R0 = _01__R ;
  assign core_wten_X0 = _01__X ;
  assign _01__S = 0 ;
  assign _02_ = ~ chn_a_rsci_ogwt;
  logic [0:0] chn_a_rsci_ogwt_C2 ;
  logic [0:0] chn_a_rsci_ogwt_R2 ;
  logic [0:0] chn_a_rsci_ogwt_X2 ;
  assign _02__T = chn_a_rsci_ogwt_T ;
  assign chn_a_rsci_ogwt_C2 = _02__C ;
  assign chn_a_rsci_ogwt_R2 = _02__R ;
  assign chn_a_rsci_ogwt_X2 = _02__X ;
  assign _02__S = 0 ;
  assign _00_ = ~ _03_;
  logic [0:0] _03__C0 ;
  logic [0:0] _03__R0 ;
  logic [0:0] _03__X0 ;
  assign _00__T = _03__T ;
  assign _03__C0 = _00__C ;
  assign _03__R0 = _00__R ;
  assign _03__X0 = _00__X ;
  assign _00__S = 0 ;
  assign chn_a_rsci_ogwt = chn_a_rsci_pdswt0 | chn_a_rsci_icwt;
  assign chn_a_rsci_ogwt_S = 0 ;
  logic [0:0] chn_a_rsci_pdswt0_C0 ;
  logic [0:0] chn_a_rsci_pdswt0_R0 ;
  logic [0:0] chn_a_rsci_pdswt0_X0 ;
  logic [0:0] chn_a_rsci_icwt_C0 ;
  logic [0:0] chn_a_rsci_icwt_R0 ;
  logic [0:0] chn_a_rsci_icwt_X0 ;
  assign chn_a_rsci_ogwt_T = chn_a_rsci_pdswt0_T | chn_a_rsci_icwt_T ;
  assign chn_a_rsci_pdswt0_C0 = chn_a_rsci_ogwt_C ;
  assign chn_a_rsci_pdswt0_X0 = chn_a_rsci_ogwt_X ;
  assign chn_a_rsci_icwt_C0 = chn_a_rsci_ogwt_C ;
  assign chn_a_rsci_icwt_X0 = chn_a_rsci_ogwt_X ;
  assign chn_a_rsci_pdswt0_R0 = ( chn_a_rsci_ogwt_R | chn_a_rsci_ogwt_C & chn_a_rsci_icwt_T ) & { 1{ chn_a_rsci_icwt != 1'b1 }} ;
  assign chn_a_rsci_icwt_R0 = ( chn_a_rsci_ogwt_R | chn_a_rsci_ogwt_C & chn_a_rsci_pdswt0_T ) & { 1{ chn_a_rsci_pdswt0 != 1'b1 }} ;
  assign _03_ = _02_ | chn_a_rsci_biwt;
  assign _03__S = 0 ;
  logic [0:0] _02__C0 ;
  logic [0:0] _02__R0 ;
  logic [0:0] _02__X0 ;
  logic [0:0] chn_a_rsci_biwt_C1 ;
  logic [0:0] chn_a_rsci_biwt_R1 ;
  logic [0:0] chn_a_rsci_biwt_X1 ;
  assign _03__T = _02__T | chn_a_rsci_biwt_T ;
  assign _02__C0 = _03__C ;
  assign _02__X0 = _03__X ;
  assign chn_a_rsci_biwt_C1 = _03__C ;
  assign chn_a_rsci_biwt_X1 = _03__X ;
  assign _02__R0 = ( _03__R | _03__C & chn_a_rsci_biwt_T ) & { 1{ chn_a_rsci_biwt != 1'b1 }} ;
  assign chn_a_rsci_biwt_R1 = ( _03__R | _03__C & _02__T ) & { 1{ _02_ != 1'b1 }} ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      chn_a_rsci_icwt <= 1'b0;
    else
      chn_a_rsci_icwt <= _00_;
  logic [0:0] _00__X0 ;
  logic [0:0] _00__R0 ;
  logic [0:0] _00__C0 ;
  assign _00__X0 = { 1{ chn_a_rsci_icwt_S != _00__S }} ;
  assign _00__R0 = 0 ;
  assign _00__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      chn_a_rsci_icwt_T 		<= !nvdla_core_rstn ? 0 : ( _00__T & _00__X0 );
  always @( posedge nvdla_core_clk )
      chn_a_rsci_icwt_t_flag 	<= !nvdla_core_rstn ? 0 : chn_a_rsci_icwt_t_flag ? 1 : | _00__T & ( | _00__X0 );
  always @( posedge nvdla_core_clk )
      chn_a_rsci_icwt_r_flag 	<= !nvdla_core_rstn ? 0 : chn_a_rsci_icwt_r_flag ? 1 : chn_a_rsci_icwt_t_flag ? 0 : ( | chn_a_rsci_icwt_R ) ;
  assign _00__C = ( _00__C0 );
  assign _02__C = ( _02__C0 );
  assign chn_a_rsci_icwt_C = ( chn_a_rsci_icwt_C0 );
  assign chn_a_rsci_pdswt0_C = ( chn_a_rsci_pdswt0_C0 );
  assign _03__C = ( _03__C0 );
  assign core_wten_C = ( core_wten_C0 );
  assign chn_a_rsci_ld_core_psct_C = ( chn_a_rsci_ld_core_psct_C0 );
  assign core_wen_C = ( core_wen_C0 );
  assign chn_a_rsci_oswt_C = ( chn_a_rsci_oswt_C0 );
  assign chn_a_rsci_vd_C = ( chn_a_rsci_vd_C0 );
  assign chn_a_rsci_ogwt_C = ( chn_a_rsci_ogwt_C0 ) | ( chn_a_rsci_ogwt_C1 ) | ( chn_a_rsci_ogwt_C2 );
  assign chn_a_rsci_iswt0_C = ( chn_a_rsci_iswt0_C0 );
  assign _01__C = ( _01__C0 );
  assign chn_a_rsci_ld_core_sct_C = ( chn_a_rsci_ld_core_sct_C0 );
  assign chn_a_rsci_biwt_C = ( chn_a_rsci_biwt_C0 ) | ( chn_a_rsci_biwt_C1 );
  assign chn_a_rsci_bdwt_C = ( chn_a_rsci_bdwt_C0 );
  assign _00__X = ( _00__X0 );
  assign _02__X = ( _02__X0 );
  assign chn_a_rsci_icwt_X = ( chn_a_rsci_icwt_X0 );
  assign chn_a_rsci_pdswt0_X = ( chn_a_rsci_pdswt0_X0 );
  assign _03__X = ( _03__X0 );
  assign core_wten_X = ( core_wten_X0 );
  assign chn_a_rsci_ld_core_psct_X = ( chn_a_rsci_ld_core_psct_X0 );
  assign core_wen_X = ( core_wen_X0 );
  assign chn_a_rsci_oswt_X = ( chn_a_rsci_oswt_X0 );
  assign chn_a_rsci_vd_X = ( chn_a_rsci_vd_X0 );
  assign chn_a_rsci_ogwt_X = ( chn_a_rsci_ogwt_X0 ) | ( chn_a_rsci_ogwt_X1 ) | ( chn_a_rsci_ogwt_X2 );
  assign chn_a_rsci_iswt0_X = ( chn_a_rsci_iswt0_X0 );
  assign _01__X = ( _01__X0 );
  assign chn_a_rsci_ld_core_sct_X = ( chn_a_rsci_ld_core_sct_X0 );
  assign chn_a_rsci_biwt_X = ( chn_a_rsci_biwt_X0 ) | ( chn_a_rsci_biwt_X1 );
  assign chn_a_rsci_bdwt_X = ( chn_a_rsci_bdwt_X0 );
  assign _00__R = ( _00__X0 & _00__R0 );
  assign _02__R = ( _02__X0 & _02__R0 );
  assign chn_a_rsci_icwt_R = ( chn_a_rsci_icwt_X0 & chn_a_rsci_icwt_R0 );
  assign chn_a_rsci_pdswt0_R = ( chn_a_rsci_pdswt0_X0 & chn_a_rsci_pdswt0_R0 );
  assign _03__R = ( _03__X0 & _03__R0 );
  assign core_wten_R = ( core_wten_X0 & core_wten_R0 );
  assign chn_a_rsci_ld_core_psct_R = ( chn_a_rsci_ld_core_psct_X0 & chn_a_rsci_ld_core_psct_R0 );
  assign core_wen_R = ( core_wen_X0 & core_wen_R0 );
  assign chn_a_rsci_oswt_R = ( chn_a_rsci_oswt_X0 & chn_a_rsci_oswt_R0 );
  assign chn_a_rsci_vd_R = ( chn_a_rsci_vd_X0 & chn_a_rsci_vd_R0 );
  assign chn_a_rsci_ogwt_R = ( chn_a_rsci_ogwt_X0 & chn_a_rsci_ogwt_R0 ) | ( chn_a_rsci_ogwt_X1 & chn_a_rsci_ogwt_R1 ) | ( chn_a_rsci_ogwt_X2 & chn_a_rsci_ogwt_R2 );
  assign chn_a_rsci_iswt0_R = ( chn_a_rsci_iswt0_X0 & chn_a_rsci_iswt0_R0 );
  assign _01__R = ( _01__X0 & _01__R0 );
  assign chn_a_rsci_ld_core_sct_R = ( chn_a_rsci_ld_core_sct_X0 & chn_a_rsci_ld_core_sct_R0 );
  assign chn_a_rsci_biwt_R = ( chn_a_rsci_biwt_X0 & chn_a_rsci_biwt_R0 ) | ( chn_a_rsci_biwt_X1 & chn_a_rsci_biwt_R1 );
  assign chn_a_rsci_bdwt_R = ( chn_a_rsci_bdwt_X0 & chn_a_rsci_bdwt_R0 );
 // ground taints for floating regs
 // ground taints for unused wires
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) chn_a_rsci_icwt_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) chn_a_rsci_icwt_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) chn_a_rsci_icwt_PREV_VAL1 <= chn_a_rsci_icwt ;
    if( INSTR_IN_ZY ) chn_a_rsci_icwt_PREV_VAL2 <= chn_a_rsci_icwt_PREV_VAL1 ;
  end
 // ground taints for unused wire slices
  assert property( chn_a_rsci_icwt_r_flag == 0 || chn_a_rsci_icwt_PREV_VAL1 == chn_a_rsci_icwt_PREV_VAL2 );
  assign rst_zy = !nvdla_core_rstn ;
endmodule
