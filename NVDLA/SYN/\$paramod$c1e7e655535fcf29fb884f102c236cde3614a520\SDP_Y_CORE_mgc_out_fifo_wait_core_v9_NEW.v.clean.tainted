  logic [127:0] _000_;
  logic [127:0] _000__T ;
  logic [127:0] _000__R ;
  logic [13:0] _000__S ;
  logic [127:0] _001_;
  logic [127:0] _001__T ;
  logic [127:0] _001__R ;
  logic [13:0] _001__S ;
  logic [127:0] _002_;
  logic [127:0] _002__T ;
  logic [127:0] _002__R ;
  logic [13:0] _002__S ;
  logic [127:0] _003_;
  logic [127:0] _003__T ;
  logic [127:0] _003__R ;
  logic [13:0] _003__S ;
  logic [127:0] _004_;
  logic [127:0] _004__T ;
  logic [127:0] _004__R ;
  logic [13:0] _004__S ;
  logic _005_;
  logic _005__T ;
  logic _005__R ;
  logic [13:0] _005__S ;
  logic _006_;
  logic _006__T ;
  logic _006__R ;
  logic [13:0] _006__S ;
  logic _007_;
  logic _007__T ;
  logic _007__R ;
  logic [13:0] _007__S ;
  logic _008_;
  logic _008__T ;
  logic _008__R ;
  logic [13:0] _008__S ;
  logic _009_;
  logic _009__T ;
  logic _009__R ;
  logic [13:0] _009__S ;
  logic _010_;
  logic _010__T ;
  logic _010__R ;
  logic [13:0] _010__S ;
  logic _011_;
  logic _011__T ;
  logic _011__R ;
  logic [13:0] _011__S ;
  logic _012_;
  logic _012__T ;
  logic _012__R ;
  logic [13:0] _012__S ;
  logic [32:0] _013_;
  logic [32:0] _013__T ;
  logic [32:0] _013__R ;
  logic [13:0] _013__S ;
  logic _014_;
  logic _014__T ;
  logic _014__R ;
  logic [13:0] _014__S ;
  logic _015_;
  logic _015__T ;
  logic _015__R ;
  logic [13:0] _015__S ;
  logic _016_;
  logic _016__T ;
  logic _016__R ;
  logic [13:0] _016__S ;
  logic _017_;
  logic _017__T ;
  logic _017__R ;
  logic [13:0] _017__S ;
  logic _018_;
  logic _018__T ;
  logic _018__R ;
  logic [13:0] _018__S ;
  logic _019_;
  logic _019__T ;
  logic _019__R ;
  logic [13:0] _019__S ;
  logic _020_;
  logic _020__T ;
  logic _020__R ;
  logic [13:0] _020__S ;
  logic _021_;
  logic _021__T ;
  logic _021__R ;
  logic [13:0] _021__S ;
  logic _022_;
  logic _022__T ;
  logic _022__R ;
  logic [13:0] _022__S ;
  logic _023_;
  logic _023__T ;
  logic _023__R ;
  logic [13:0] _023__S ;
  logic _024_;
  logic _024__T ;
  logic _024__R ;
  logic [13:0] _024__S ;
  logic _025_;
  logic _025__T ;
  logic _025__R ;
  logic [13:0] _025__S ;
  logic _026_;
  logic _026__T ;
  logic _026__R ;
  logic [13:0] _026__S ;
  logic _027_;
  logic _027__T ;
  logic _027__R ;
  logic [13:0] _027__S ;
  logic _028_;
  logic _028__T ;
  logic _028__R ;
  logic [13:0] _028__S ;
  logic _029_;
  logic _029__T ;
  logic _029__R ;
  logic [13:0] _029__S ;
  logic _030_;
  logic _030__T ;
  logic _030__R ;
  logic [13:0] _030__S ;
  logic _031_;
  logic _031__T ;
  logic _031__R ;
  logic [13:0] _031__S ;
  logic _032_;
  logic _032__T ;
  logic _032__R ;
  logic [13:0] _032__S ;
  logic _033_;
  logic _033__T ;
  logic _033__R ;
  logic [13:0] _033__S ;
  logic _034_;
  logic _034__T ;
  logic _034__R ;
  logic [13:0] _034__S ;
  logic _035_;
  logic _035__T ;
  logic _035__R ;
  logic [13:0] _035__S ;
  logic _036_;
  logic _036__T ;
  logic _036__R ;
  logic [13:0] _036__S ;
  logic _037_;
  logic _037__T ;
  logic _037__R ;
  logic [13:0] _037__S ;
  logic _038_;
  logic _038__T ;
  logic _038__R ;
  logic [13:0] _038__S ;
  logic _039_;
  logic _039__T ;
  logic _039__R ;
  logic [13:0] _039__S ;
  logic _040_;
  logic _040__T ;
  logic _040__R ;
  logic [13:0] _040__S ;
  logic _041_;
  logic _041__T ;
  logic _041__R ;
  logic [13:0] _041__S ;
  logic _042_;
  logic _042__T ;
  logic _042__R ;
  logic [13:0] _042__S ;
  logic _043_;
  logic _043__T ;
  logic _043__R ;
  logic [13:0] _043__S ;
  logic _044_;
  logic _044__T ;
  logic _044__R ;
  logic [13:0] _044__S ;
  logic _045_;
  logic _045__T ;
  logic _045__R ;
  logic [13:0] _045__S ;
  logic _046_;
  logic _046__T ;
  logic _046__R ;
  logic [13:0] _046__S ;
  logic _047_;
  logic _047__T ;
  logic _047__R ;
  logic [13:0] _047__S ;
  logic _048_;
  logic _048__T ;
  logic _048__R ;
  logic [13:0] _048__S ;
  logic _049_;
  logic _049__T ;
  logic _049__R ;
  logic [13:0] _049__S ;
  logic _050_;
  logic _050__T ;
  logic _050__R ;
  logic [13:0] _050__S ;
  logic _051_;
  logic _051__T ;
  logic _051__R ;
  logic [13:0] _051__S ;
  logic _052_;
  logic _052__T ;
  logic _052__R ;
  logic [13:0] _052__S ;
  logic _053_;
  logic _053__T ;
  logic _053__R ;
  logic [13:0] _053__S ;
  logic _054_;
  logic _054__T ;
  logic _054__R ;
  logic [13:0] _054__S ;
  logic _055_;
  logic _055__T ;
  logic _055__R ;
  logic [13:0] _055__S ;
  logic _056_;
  logic _056__T ;
  logic _056__R ;
  logic [13:0] _056__S ;
  logic _057_;
  logic _057__T ;
  logic _057__R ;
  logic [13:0] _057__S ;
  logic _058_;
  logic _058__T ;
  logic _058__R ;
  logic [13:0] _058__S ;
  logic _059_;
  logic _059__T ;
  logic _059__R ;
  logic [13:0] _059__S ;
  logic _060_;
  logic _060__T ;
  logic _060__R ;
  logic [13:0] _060__S ;
  logic _061_;
  logic _061__T ;
  logic _061__R ;
  logic [13:0] _061__S ;
  logic _062_;
  logic _062__T ;
  logic _062__R ;
  logic [13:0] _062__S ;
  logic _063_;
  logic _063__T ;
  logic _063__R ;
  logic [13:0] _063__S ;
  logic _064_;
  logic _064__T ;
  logic _064__R ;
  logic [13:0] _064__S ;
  logic _065_;
  logic _065__T ;
  logic _065__R ;
  logic [13:0] _065__S ;
  logic [127:0] _066_;
  logic [127:0] _066__T ;
  logic [127:0] _066__R ;
  logic [13:0] _066__S ;
  logic [127:0] _067_;
  logic [127:0] _067__T ;
  logic [127:0] _067__R ;
  logic [13:0] _067__S ;
  logic [127:0] _068_;
  logic [127:0] _068__T ;
  logic [127:0] _068__R ;
  logic [13:0] _068__S ;
  logic [127:0] _069_;
  logic [127:0] _069__T ;
  logic [127:0] _069__R ;
  logic [13:0] _069__S ;
  logic [127:0] _070_;
  logic [127:0] _070__T ;
  logic [127:0] _070__R ;
  logic [13:0] _070__S ;
  logic _071_;
  logic _071__T ;
  logic _071__R ;
  logic [13:0] _071__S ;
  logic _072_;
  logic _072__T ;
  logic _072__R ;
  logic [13:0] _072__S ;
  logic _073_;
  logic _073__T ;
  logic _073__R ;
  logic [13:0] _073__S ;
  logic _074_;
  logic _074__T ;
  logic _074__R ;
  logic [13:0] _074__S ;
  logic _075_;
  logic _075__T ;
  logic _075__R ;
  logic [13:0] _075__S ;
  logic \FIFO_REG.delta ;
  logic \FIFO_REG.delta_T ;
  logic \FIFO_REG.delta_R ;
  logic [13:0] \FIFO_REG.delta_S ;
  logic active;
  logic active_T ;
  logic active_R ;
  logic [13:0] active_S ;
  input arst;
  input arst_T ;
  output arst_R ;
  input [13:0] arst_S ;
  logic [639:0] buff;
  logic [639:0]  buff_T ;
  logic [639:0]  buff_PREV_VAL1 ;
  logic [639:0]  buff_PREV_VAL2 ;
  logic [639:0]  buff_R ;
  logic [13:0] buff_S ;
  logic buff_t_flag ;
  logic buff_r_flag ;
  assign buff_S = 5 ;
  logic [127:0] buff_nxt;
  logic [127:0] buff_nxt_T ;
  logic [127:0] buff_nxt_R ;
  logic [13:0] buff_nxt_S ;
  logic [639:0] buff_pre;
  logic [639:0] buff_pre_T ;
  logic [639:0] buff_pre_R ;
  logic [13:0] buff_pre_S ;
  input clk;
  input clk_T ;
  output clk_R ;
  input [13:0] clk_S ;
  logic count;
  logic count_T ;
  logic count_R ;
  logic [13:0] count_S ;
  logic [31:0] count_t;
  logic [31:0] count_t_T ;
  logic [31:0] count_t_R ;
  logic [13:0] count_t_S ;
  input [127:0] d;
  input [127:0] d_T ;
  output [127:0] d_R ;
  input [13:0] d_S ;
  input en;
  input en_T ;
  output en_R ;
  input [13:0] en_S ;
  logic [4:0] en_l;
  logic [4:0] en_l_T ;
  logic [4:0] en_l_R ;
  logic [13:0] en_l_S ;
  logic en_l_s;
  logic en_l_s_T ;
  logic en_l_s_R ;
  logic [13:0] en_l_s_S ;
  logic [4:0] en_l_var;
  logic [4:0] en_l_var_T ;
  logic [4:0] en_l_var_R ;
  logic [13:0] en_l_var_S ;
  logic [31:0] i;
  logic [31:0] i_T ;
  logic [31:0] i_R ;
  logic [13:0] i_S ;
  input ld;
  input ld_T ;
  output ld_R ;
  input [13:0] ld_S ;
  output lz;
  logic lz ;
  output lz_T ;
  logic lz_T ;
  logic lz_R ;
  logic [13:0] lz_S ;
  input lz_R0 ;
  output [13:0] lz_S ;
  logic [32:0] n_elem;
  logic [32:0] n_elem_T ;
  logic [32:0] n_elem_R ;
  logic [13:0] n_elem_S ;
  output sd;
  logic sd ;
  output sd_T ;
  logic sd_T ;
  logic sd_R ;
  logic [13:0] sd_S ;
  input sd_R0 ;
  output [13:0] sd_S ;
  logic [32:0] size_t;
  logic [32:0] size_t_T ;
  logic [32:0] size_t_R ;
  logic [13:0] size_t_S ;
  input srst;
  input srst_T ;
  output srst_R ;
  input [13:0] srst_S ;
  logic [4:0] stat;
  logic [4:0]  stat_T ;
  logic [4:0]  stat_PREV_VAL1 ;
  logic [4:0]  stat_PREV_VAL2 ;
  logic [4:0]  stat_R ;
  logic [13:0] stat_S ;
  logic stat_t_flag ;
  logic stat_r_flag ;
  assign stat_S = 6 ;
  logic stat_after;
  logic stat_after_T ;
  logic stat_after_R ;
  logic [13:0] stat_after_S ;
  logic stat_before;
  logic stat_before_T ;
  logic stat_before_R ;
  logic [13:0] stat_before_S ;
  logic stat_nxt;
  logic stat_nxt_T ;
  logic stat_nxt_R ;
  logic [13:0] stat_nxt_S ;
  logic [4:0] stat_pre;
  logic [4:0] stat_pre_T ;
  logic [4:0] stat_pre_R ;
  logic [13:0] stat_pre_S ;
  output vd;
  logic vd ;
  output vd_T ;
  logic vd_T ;
  logic vd_R ;
  logic [13:0] vd_S ;
  input vd_R0 ;
  output [13:0] vd_S ;
  input vz;
  input vz_T ;
  output vz_R ;
  input [13:0] vz_S ;
  output [127:0] z;
  logic [127:0] z ;
  output [127:0] z_T ;
  logic [127:0] z_T ;
  logic [127:0] z_R ;
  logic [13:0] z_S ;
  input [127:0] z_R0 ;
  output [13:0] z_S ;
  assign sd = count + \FIFO_REG.delta ;
  assign sd_S = 0 ;
  logic [0:0] count_R0 ;
  logic [0:0] \FIFO_REG.delta_R0 ;
  assign sd_T = count_T | \FIFO_REG.delta_T ;
  assign count_R0 = sd_R ;
  assign \FIFO_REG.delta_R0 = sd_R ;
  assign _018_ = vz & stat[4];
  assign _018__S = 0 ;
  logic [0:0] vz_R0 ;
  logic [4:0] stat_R0 ;
  assign _018__T = ( vz_T & stat[4] ) | ( stat_T [4] & vz ) ;
  assign vz_R0 = _018__R & { 1{ stat[4] != 0 }} ;
  assign stat_R0 [4] = _018__R & { 1{ vz != 0 }} ;
  assign _020_ = stat[4] & ld;
  assign _020__S = 0 ;
  assign { stat_R0 [0], stat_R0 [1], stat_R0 [2], stat_R0 [3] } = 0;
  logic [4:0] stat_R1 ;
  logic [0:0] ld_R0 ;
  assign _020__T = ( stat_T [4] & ld ) | ( ld_T & stat[4] ) ;
  assign stat_R1 [4] = _020__R & { 1{ ld != 0 }} ;
  assign ld_R0 = _020__R & { 1{ stat[4] != 0 }} ;
  assign _023_ = stat[3] & ld;
  assign _023__S = 0 ;
  logic [0:0] ld_R1 ;
  assign _023__T = ( stat_T [3] & ld ) | ( ld_T & stat[3] ) ;
  assign stat_R1 [3] = _023__R & { 1{ ld != 0 }} ;
  assign ld_R1 = _023__R & { 1{ stat[3] != 0 }} ;
  assign stat_pre[3] = stat[4] & _057_;
  assign stat_pre_S = 0 ;
  assign { stat_R1 [0], stat_R1 [1], stat_R1 [2] } = 0;
  logic [4:0] stat_R2 ;
  logic [0:0] _057__R0 ;
  assign stat_pre_T [3] = ( stat_T [4] & _057_ ) | ( _057__T & stat[4] ) ;
  assign stat_R2 [4] = stat_pre_R [3] & { 1{ _057_ != 0 }} ;
  assign _057__R0 = stat_pre_R [3] & { 1{ stat[4] != 0 }} ;
  assign _025_ = stat[2] & ld;
  assign _025__S = 0 ;
  logic [0:0] ld_R2 ;
  assign _025__T = ( stat_T [2] & ld ) | ( ld_T & stat[2] ) ;
  assign stat_R2 [2] = _025__R & { 1{ ld != 0 }} ;
  assign ld_R2 = _025__R & { 1{ stat[2] != 0 }} ;
  assign stat_pre[2] = stat[3] & _060_;
  assign stat_pre_S = 0 ;
  logic [0:0] _060__R0 ;
  assign stat_pre_T [2] = ( stat_T [3] & _060_ ) | ( _060__T & stat[3] ) ;
  assign stat_R2 [3] = stat_pre_R [2] & { 1{ _060_ != 0 }} ;
  assign _060__R0 = stat_pre_R [2] & { 1{ stat[3] != 0 }} ;
  assign _027_ = stat[1] & ld;
  assign _027__S = 0 ;
  logic [0:0] ld_R3 ;
  assign _027__T = ( stat_T [1] & ld ) | ( ld_T & stat[1] ) ;
  assign stat_R2 [1] = _027__R & { 1{ ld != 0 }} ;
  assign ld_R3 = _027__R & { 1{ stat[1] != 0 }} ;
  assign _021_ = ld & _041_;
  assign _021__S = 0 ;
  logic [0:0] ld_R4 ;
  logic [0:0] _041__R0 ;
  assign _021__T = ( ld_T & _041_ ) | ( _041__T & ld ) ;
  assign ld_R4 = _021__R & { 1{ _041_ != 0 }} ;
  assign _041__R0 = _021__R & { 1{ ld != 0 }} ;
  assign stat_pre[1] = stat[2] & _063_;
  assign stat_pre_S = 0 ;
  assign { stat_R2 [0] } = 0;
  logic [4:0] stat_R3 ;
  logic [0:0] _063__R0 ;
  assign stat_pre_T [1] = ( stat_T [2] & _063_ ) | ( _063__T & stat[2] ) ;
  assign stat_R3 [2] = stat_pre_R [1] & { 1{ _063_ != 0 }} ;
  assign _063__R0 = stat_pre_R [1] & { 1{ stat[2] != 0 }} ;
  assign _028_ = stat[0] & _041_;
  assign _028__S = 0 ;
  logic [0:0] _041__R1 ;
  assign _028__T = ( stat_T [0] & _041_ ) | ( _041__T & stat[0] ) ;
  assign stat_R3 [0] = _028__R & { 1{ _041_ != 0 }} ;
  assign _041__R1 = _028__R & { 1{ stat[0] != 0 }} ;
  assign _029_ = stat[0] & ld;
  assign _029__S = 0 ;
  assign { stat_R3 [1], stat_R3 [4:3] } = 0;
  logic [4:0] stat_R4 ;
  logic [0:0] ld_R5 ;
  assign _029__T = ( stat_T [0] & ld ) | ( ld_T & stat[0] ) ;
  assign stat_R4 [0] = _029__R & { 1{ ld != 0 }} ;
  assign ld_R5 = _029__R & { 1{ stat[0] != 0 }} ;
  assign stat_nxt = stat[1] & _065_;
  assign stat_nxt_S = 0 ;
  logic [0:0] _065__R0 ;
  assign stat_nxt_T = ( stat_T [1] & _065_ ) | ( _065__T & stat[1] ) ;
  assign stat_R4 [1] = stat_nxt_R & { 1{ _065_ != 0 }} ;
  assign _065__R0 = stat_nxt_R & { 1{ stat[1] != 0 }} ;
  assign _030_ = vz & stat[3];
  assign _030__S = 0 ;
  logic [0:0] vz_R1 ;
  assign _030__T = ( vz_T & stat[3] ) | ( stat_T [3] & vz ) ;
  assign vz_R1 = _030__R & { 1{ stat[3] != 0 }} ;
  assign stat_R4 [3] = _030__R & { 1{ vz != 0 }} ;
  assign _031_ = vz & stat[2];
  assign _031__S = 0 ;
  logic [0:0] vz_R2 ;
  assign _031__T = ( vz_T & stat[2] ) | ( stat_T [2] & vz ) ;
  assign vz_R2 = _031__R & { 1{ stat[2] != 0 }} ;
  assign stat_R4 [2] = _031__R & { 1{ vz != 0 }} ;
  assign _032_ = vz & stat[1];
  assign _032__S = 0 ;
  assign { stat_R4 [4:4] } = 0;
  logic [0:0] vz_R3 ;
  logic [4:0] stat_R5 ;
  assign _032__T = ( vz_T & stat[1] ) | ( stat_T [1] & vz ) ;
  assign vz_R3 = _032__R & { 1{ stat[1] != 0 }} ;
  assign stat_R5 [1] = _032__R & { 1{ vz != 0 }} ;
  assign _033_ = vz & stat[0];
  assign _033__S = 0 ;
  logic [0:0] vz_R4 ;
  assign _033__T = ( vz_T & stat[0] ) | ( stat_T [0] & vz ) ;
  assign vz_R4 = _033__R & { 1{ stat[0] != 0 }} ;
  assign stat_R5 [0] = _033__R & { 1{ vz != 0 }} ;
  assign _019_ = _041_ & stat[4];
  assign _019__S = 0 ;
  logic [0:0] _041__R2 ;
  assign _019__T = ( _041__T & stat[4] ) | ( stat_T [4] & _041_ ) ;
  assign _041__R2 = _019__R & { 1{ stat[4] != 0 }} ;
  assign stat_R5 [4] = _019__R & { 1{ _041_ != 0 }} ;
  assign _011_ = ld & _042_;
  assign _011__S = 0 ;
  logic [0:0] ld_R6 ;
  logic [0:0] _042__R0 ;
  assign _011__T = ( ld_T & _042_ ) | ( _042__T & ld ) ;
  assign ld_R6 = _011__R & { 1{ _042_ != 0 }} ;
  assign _042__R0 = _011__R & { 1{ ld != 0 }} ;
  assign _022_ = _041_ & stat[3];
  assign _022__S = 0 ;
  logic [0:0] _041__R3 ;
  assign _022__T = ( _041__T & stat[3] ) | ( stat_T [3] & _041_ ) ;
  assign _041__R3 = _022__R & { 1{ stat[3] != 0 }} ;
  assign stat_R5 [3] = _022__R & { 1{ _041_ != 0 }} ;
  assign _014_ = ld & _043_;
  assign _014__S = 0 ;
  logic [0:0] ld_R7 ;
  logic [0:0] _043__R0 ;
  assign _014__T = ( ld_T & _043_ ) | ( _043__T & ld ) ;
  assign ld_R7 = _014__R & { 1{ _043_ != 0 }} ;
  assign _043__R0 = _014__R & { 1{ ld != 0 }} ;
  assign _024_ = _041_ & stat[2];
  assign _024__S = 0 ;
  logic [0:0] _041__R4 ;
  assign _024__T = ( _041__T & stat[2] ) | ( stat_T [2] & _041_ ) ;
  assign _041__R4 = _024__R & { 1{ stat[2] != 0 }} ;
  assign stat_R5 [2] = _024__R & { 1{ _041_ != 0 }} ;
  assign _016_ = ld & _044_;
  assign _016__S = 0 ;
  logic [0:0] ld_R8 ;
  logic [0:0] _044__R0 ;
  assign _016__T = ( ld_T & _044_ ) | ( _044__T & ld ) ;
  assign ld_R8 = _016__R & { 1{ _044_ != 0 }} ;
  assign _044__R0 = _016__R & { 1{ ld != 0 }} ;
  assign _026_ = _041_ & stat[1];
  assign _026__S = 0 ;
  logic [0:0] _041__R5 ;
  logic [4:0] stat_R6 ;
  assign _026__T = ( _041__T & stat[1] ) | ( stat_T [1] & _041_ ) ;
  assign _041__R5 = _026__R & { 1{ stat[1] != 0 }} ;
  assign stat_R6 [1] = _026__R & { 1{ _041_ != 0 }} ;
  assign _017_ = ld & _045_;
  assign _017__S = 0 ;
  logic [0:0] ld_R9 ;
  logic [0:0] _045__R0 ;
  assign _017__T = ( ld_T & _045_ ) | ( _045__T & ld ) ;
  assign ld_R9 = _017__R & { 1{ _045_ != 0 }} ;
  assign _045__R0 = _017__R & { 1{ ld != 0 }} ;
  assign en_l_var[0] = ld & _046_;
  assign en_l_var_S = 0 ;
  logic [0:0] ld_R10 ;
  logic [0:0] _046__R0 ;
  assign en_l_var_T [0] = ( ld_T & _046_ ) | ( _046__T & ld ) ;
  assign ld_R10 = en_l_var_R [0] & { 1{ _046_ != 0 }} ;
  assign _046__R0 = en_l_var_R [0] & { 1{ ld != 0 }} ;
  assign _012_ = stat[4] & _037_;
  assign _012__S = 0 ;
  logic [0:0] _037__R0 ;
  assign _012__T = ( stat_T [4] & _037_ ) | ( _037__T & stat[4] ) ;
  assign stat_R6 [4] = _012__R & { 1{ _037_ != 0 }} ;
  assign _037__R0 = _012__R & { 1{ stat[4] != 0 }} ;
  assign _034_ = stat[3] & _038_;
  assign _034__S = 0 ;
  logic [0:0] _038__R0 ;
  assign _034__T = ( stat_T [3] & _038_ ) | ( _038__T & stat[3] ) ;
  assign stat_R6 [3] = _034__R & { 1{ _038_ != 0 }} ;
  assign _038__R0 = _034__R & { 1{ stat[3] != 0 }} ;
  assign _035_ = stat[2] & _039_;
  assign _035__S = 0 ;
  logic [0:0] _039__R0 ;
  assign _035__T = ( stat_T [2] & _039_ ) | ( _039__T & stat[2] ) ;
  assign stat_R6 [2] = _035__R & { 1{ _039_ != 0 }} ;
  assign _039__R0 = _035__R & { 1{ stat[2] != 0 }} ;
  assign _036_ = stat[1] & _040_;
  assign _036__S = 0 ;
  assign { stat_R6 [0] } = 0;
  logic [4:0] stat_R7 ;
  logic [0:0] _040__R0 ;
  assign _036__T = ( stat_T [1] & _040_ ) | ( _040__T & stat[1] ) ;
  assign stat_R7 [1] = _036__R & { 1{ _040_ != 0 }} ;
  assign _040__R0 = _036__R & { 1{ stat[1] != 0 }} ;
  assign _037_ = ~ stat[3];
  assign _037__T = stat_T [3] ;
  assign stat_R7 [3] = _037__R ;
  assign _037__S = 0 ;
  assign _038_ = ~ stat[2];
  assign _038__T = stat_T [2] ;
  assign stat_R7 [2] = _038__R ;
  assign _038__S = 0 ;
  assign _039_ = ~ stat[1];
  assign { stat_R7 [0], stat_R7 [4:4] } = 0;
  logic [4:0] stat_R8 ;
  assign _039__T = stat_T [1] ;
  assign stat_R8 [1] = _039__R ;
  assign _039__S = 0 ;
  assign _040_ = ~ stat[0];
  assign _040__T = stat_T [0] ;
  assign stat_R8 [0] = _040__R ;
  assign _040__S = 0 ;
  assign _041_ = ~ vz;
  logic [0:0] vz_R5 ;
  assign _041__T = vz_T ;
  assign vz_R5 = _041__R ;
  assign _041__S = 0 ;
  assign _042_ = ~ _019_;
  logic [0:0] _019__R0 ;
  assign _042__T = _019__T ;
  assign _019__R0 = _042__R ;
  assign _042__S = 0 ;
  assign _043_ = ~ _022_;
  logic [0:0] _022__R0 ;
  assign _043__T = _022__T ;
  assign _022__R0 = _043__R ;
  assign _043__S = 0 ;
  assign _044_ = ~ _024_;
  logic [0:0] _024__R0 ;
  assign _044__T = _024__T ;
  assign _024__R0 = _044__R ;
  assign _044__S = 0 ;
  assign _045_ = ~ _026_;
  logic [0:0] _026__R0 ;
  assign _045__T = _026__T ;
  assign _026__R0 = _045__R ;
  assign _045__S = 0 ;
  assign _046_ = ~ _028_;
  logic [0:0] _028__R0 ;
  assign _046__T = _028__T ;
  assign _028__R0 = _046__R ;
  assign _046__S = 0 ;
  assign _047_ = ~ active;
  logic [0:0] active_R0 ;
  assign _047__T = active_T ;
  assign active_R0 = _047__R ;
  assign _047__S = 0 ;
  assign _048_ = ~ en_l_var[0];
  logic [4:0] en_l_var_R0 ;
  assign _048__T = en_l_var_T [0] ;
  assign en_l_var_R0 [0] = _048__R ;
  assign _048__S = 0 ;
  assign _049_ = ~ en_l_var[1];
  assign _049__T = en_l_var_T [1] ;
  assign en_l_var_R0 [1] = _049__R ;
  assign _049__S = 0 ;
  assign _050_ = ~ en_l_var[2];
  assign _050__T = en_l_var_T [2] ;
  assign en_l_var_R0 [2] = _050__R ;
  assign _050__S = 0 ;
  assign _051_ = ~ en_l_var[3];
  assign _051__T = en_l_var_T [3] ;
  assign en_l_var_R0 [3] = _051__R ;
  assign _051__S = 0 ;
  assign _052_ = ~ en_l_var[4];
  assign _052__T = en_l_var_T [4] ;
  assign en_l_var_R0 [4] = _052__R ;
  assign _052__S = 0 ;
  assign active = ld | vz;
  assign active_S = 0 ;
  logic [0:0] ld_R11 ;
  logic [0:0] vz_R6 ;
  assign active_T = ( ld_T & ~vz ) | ( vz_T & ~ld ) ;
  assign ld_R11 = active_R & { 1{ vz != 1'b1 }} ;
  assign vz_R6 = active_R & { 1{ ld != 1'b1 }} ;
  assign vd = vz | _040_;
  assign vd_S = 0 ;
  logic [0:0] vz_R7 ;
  logic [0:0] _040__R1 ;
  assign vd_T = ( vz_T & ~_040_ ) | ( _040__T & ~vz ) ;
  assign vz_R7 = vd_R & { 1{ _040_ != 1'b1 }} ;
  assign _040__R1 = vd_R & { 1{ vz != 1'b1 }} ;
  assign lz = ld | stat[4];
  assign lz_S = 0 ;
  logic [0:0] ld_R12 ;
  assign lz_T = ( ld_T & ~stat[4] ) | ( stat_T [4] & ~ld ) ;
  assign ld_R12 = lz_R & { 1{ stat[4] != 1'b1 }} ;
  assign stat_R8 [4] = lz_R & { 1{ ld != 1'b1 }} ;
  assign _053_ = stat[3] | _019_;
  assign _053__S = 0 ;
  logic [0:0] _019__R1 ;
  assign _053__T = ( stat_T [3] & ~_019_ ) | ( _019__T & ~stat[3] ) ;
  assign stat_R8 [3] = _053__R & { 1{ _019_ != 1'b1 }} ;
  assign _019__R1 = _053__R & { 1{ stat[3] != 1'b1 }} ;
  assign _054_ = _053_ | _020_;
  assign _054__S = 0 ;
  logic [0:0] _053__R0 ;
  logic [0:0] _020__R0 ;
  assign _054__T = ( _053__T & ~_020_ ) | ( _020__T & ~_053_ ) ;
  assign _053__R0 = _054__R & { 1{ _020_ != 1'b1 }} ;
  assign _020__R0 = _054__R & { 1{ _053_ != 1'b1 }} ;
  assign stat_pre[4] = _054_ | _021_;
  assign stat_pre_S = 0 ;
  logic [0:0] _054__R0 ;
  logic [0:0] _021__R0 ;
  assign stat_pre_T [4] = ( _054__T & ~_021_ ) | ( _021__T & ~_054_ ) ;
  assign _054__R0 = stat_pre_R [4] & { 1{ _021_ != 1'b1 }} ;
  assign _021__R0 = stat_pre_R [4] & { 1{ _054_ != 1'b1 }} ;
  assign _055_ = stat[2] | _022_;
  assign _055__S = 0 ;
  logic [0:0] _022__R1 ;
  assign _055__T = ( stat_T [2] & ~_022_ ) | ( _022__T & ~stat[2] ) ;
  assign stat_R8 [2] = _055__R & { 1{ _022_ != 1'b1 }} ;
  assign _022__R1 = _055__R & { 1{ stat[2] != 1'b1 }} ;
  assign _056_ = _055_ | _023_;
  assign _056__S = 0 ;
  logic [0:0] _055__R0 ;
  logic [0:0] _023__R0 ;
  assign _056__T = ( _055__T & ~_023_ ) | ( _023__T & ~_055_ ) ;
  assign _055__R0 = _056__R & { 1{ _023_ != 1'b1 }} ;
  assign _023__R0 = _056__R & { 1{ _055_ != 1'b1 }} ;
  assign _057_ = _056_ | _021_;
  assign _057__S = 0 ;
  logic [0:0] _056__R0 ;
  logic [0:0] _021__R1 ;
  assign _057__T = ( _056__T & ~_021_ ) | ( _021__T & ~_056_ ) ;
  assign _056__R0 = _057__R & { 1{ _021_ != 1'b1 }} ;
  assign _021__R1 = _057__R & { 1{ _056_ != 1'b1 }} ;
  assign _058_ = stat[1] | _024_;
  assign _058__S = 0 ;
  logic [4:0] stat_R9 ;
  logic [0:0] _024__R1 ;
  assign _058__T = ( stat_T [1] & ~_024_ ) | ( _024__T & ~stat[1] ) ;
  assign stat_R9 [1] = _058__R & { 1{ _024_ != 1'b1 }} ;
  assign _024__R1 = _058__R & { 1{ stat[1] != 1'b1 }} ;
  assign _059_ = _058_ | _025_;
  assign _059__S = 0 ;
  logic [0:0] _058__R0 ;
  logic [0:0] _025__R0 ;
  assign _059__T = ( _058__T & ~_025_ ) | ( _025__T & ~_058_ ) ;
  assign _058__R0 = _059__R & { 1{ _025_ != 1'b1 }} ;
  assign _025__R0 = _059__R & { 1{ _058_ != 1'b1 }} ;
  assign _060_ = _059_ | _021_;
  assign _060__S = 0 ;
  logic [0:0] _059__R0 ;
  logic [0:0] _021__R2 ;
  assign _060__T = ( _059__T & ~_021_ ) | ( _021__T & ~_059_ ) ;
  assign _059__R0 = _060__R & { 1{ _021_ != 1'b1 }} ;
  assign _021__R2 = _060__R & { 1{ _059_ != 1'b1 }} ;
  assign _061_ = stat[0] | _026_;
  assign _061__S = 0 ;
  logic [0:0] _026__R1 ;
  assign _061__T = ( stat_T [0] & ~_026_ ) | ( _026__T & ~stat[0] ) ;
  assign stat_R9 [0] = _061__R & { 1{ _026_ != 1'b1 }} ;
  assign _026__R1 = _061__R & { 1{ stat[0] != 1'b1 }} ;
  assign _062_ = _061_ | _027_;
  assign _062__S = 0 ;
  logic [0:0] _061__R0 ;
  logic [0:0] _027__R0 ;
  assign _062__T = ( _061__T & ~_027_ ) | ( _027__T & ~_061_ ) ;
  assign _061__R0 = _062__R & { 1{ _027_ != 1'b1 }} ;
  assign _027__R0 = _062__R & { 1{ _061_ != 1'b1 }} ;
  assign _063_ = _062_ | _021_;
  assign _063__S = 0 ;
  logic [0:0] _062__R0 ;
  logic [0:0] _021__R3 ;
  assign _063__T = ( _062__T & ~_021_ ) | ( _021__T & ~_062_ ) ;
  assign _062__R0 = _063__R & { 1{ _021_ != 1'b1 }} ;
  assign _021__R3 = _063__R & { 1{ _062_ != 1'b1 }} ;
  assign _064_ = _028_ | _029_;
  assign _064__S = 0 ;
  logic [0:0] _028__R1 ;
  logic [0:0] _029__R0 ;
  assign _064__T = ( _028__T & ~_029_ ) | ( _029__T & ~_028_ ) ;
  assign _028__R1 = _064__R & { 1{ _029_ != 1'b1 }} ;
  assign _029__R0 = _064__R & { 1{ _028_ != 1'b1 }} ;
  assign _065_ = _064_ | _021_;
  assign _065__S = 0 ;
  logic [0:0] _064__R0 ;
  logic [0:0] _021__R4 ;
  assign _065__T = ( _064__T & ~_021_ ) | ( _021__T & ~_064_ ) ;
  assign _064__R0 = _065__R & { 1{ _021_ != 1'b1 }} ;
  assign _021__R4 = _065__R & { 1{ _064_ != 1'b1 }} ;
  assign en_l_s = en | _047_;
  assign en_l_s_S = 0 ;
  logic [0:0] en_R0 ;
  logic [0:0] _047__R0 ;
  assign en_l_s_T = ( en_T & ~_047_ ) | ( _047__T & ~en ) ;
  assign en_R0 = en_l_s_R & { 1{ _047_ != 1'b1 }} ;
  assign _047__R0 = en_l_s_R & { 1{ en != 1'b1 }} ;
  assign en_l[0] = en | _048_;
  assign en_l_S = 0 ;
  logic [0:0] en_R1 ;
  logic [0:0] _048__R0 ;
  assign en_l_T [0] = ( en_T & ~_048_ ) | ( _048__T & ~en ) ;
  assign en_R1 = en_l_R [0] & { 1{ _048_ != 1'b1 }} ;
  assign _048__R0 = en_l_R [0] & { 1{ en != 1'b1 }} ;
  assign en_l[1] = en | _049_;
  assign en_l_S = 0 ;
  logic [0:0] en_R2 ;
  logic [0:0] _049__R0 ;
  assign en_l_T [1] = ( en_T & ~_049_ ) | ( _049__T & ~en ) ;
  assign en_R2 = en_l_R [1] & { 1{ _049_ != 1'b1 }} ;
  assign _049__R0 = en_l_R [1] & { 1{ en != 1'b1 }} ;
  assign en_l[2] = en | _050_;
  assign en_l_S = 0 ;
  logic [0:0] en_R3 ;
  logic [0:0] _050__R0 ;
  assign en_l_T [2] = ( en_T & ~_050_ ) | ( _050__T & ~en ) ;
  assign en_R3 = en_l_R [2] & { 1{ _050_ != 1'b1 }} ;
  assign _050__R0 = en_l_R [2] & { 1{ en != 1'b1 }} ;
  assign en_l[3] = en | _051_;
  assign en_l_S = 0 ;
  logic [0:0] en_R4 ;
  logic [0:0] _051__R0 ;
  assign en_l_T [3] = ( en_T & ~_051_ ) | ( _051__T & ~en ) ;
  assign en_R4 = en_l_R [3] & { 1{ _051_ != 1'b1 }} ;
  assign _051__R0 = en_l_R [3] & { 1{ en != 1'b1 }} ;
  assign en_l[4] = en | _052_;
  assign en_l_S = 0 ;
  logic [0:0] en_R5 ;
  logic [0:0] _052__R0 ;
  assign en_l_T [4] = ( en_T & ~_052_ ) | ( _052__T & ~en ) ;
  assign en_R5 = en_l_R [4] & { 1{ _052_ != 1'b1 }} ;
  assign _052__R0 = en_l_R [4] & { 1{ en != 1'b1 }} ;
  always @(posedge clk or negedge arst)
    if (!arst)
      buff[127:0] <= 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    else
      buff[127:0] <= _000_;
  logic [127:0] _000__R0 ;
  assign _000__R0 = _000__T & { 128{ buff_S != _000__S }} ;
  always @( posedge clk )
      buff_T [127:0] 		<= !arst ? 0 : ( _000__T & ( buff_T [127:0] | { 128{ buff_S != _000__S }} ));
  always @( posedge clk )
      buff_t_flag 	<= !arst ? 0 : buff_t_flag ? 1 : | _000__T & ( buff_S != _000__S );
  always @( posedge clk )
      buff_r_flag 	<= !arst ? 0 : buff_r_flag ? 1 : buff_t_flag ? 0 : ( (| buff_R ) && (buff != 0) ) ;
  always @(posedge clk or negedge arst)
    if (!arst)
      buff[255:128] <= 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    else
      buff[255:128] <= _001_;
  logic [127:0] _001__R0 ;
  assign _001__R0 = _001__T & { 128{ buff_S != _001__S }} ;
  always @( posedge clk )
      buff_T [255:128] 		<= !arst ? 0 : ( _001__T & ( buff_T [255:128] | { 128{ buff_S != _001__S }} ));
  always @( posedge clk )
      buff_t_flag 	<= !arst ? 0 : buff_t_flag ? 1 : | _001__T & ( buff_S != _001__S );
  always @( posedge clk )
      buff_r_flag 	<= !arst ? 0 : buff_r_flag ? 1 : buff_t_flag ? 0 : ( (| buff_R ) && (buff != 0) ) ;
  always @(posedge clk or negedge arst)
    if (!arst)
      buff[383:256] <= 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    else
      buff[383:256] <= _002_;
  logic [127:0] _002__R0 ;
  assign _002__R0 = _002__T & { 128{ buff_S != _002__S }} ;
  always @( posedge clk )
      buff_T [383:256] 		<= !arst ? 0 : ( _002__T & ( buff_T [383:256] | { 128{ buff_S != _002__S }} ));
  always @( posedge clk )
      buff_t_flag 	<= !arst ? 0 : buff_t_flag ? 1 : | _002__T & ( buff_S != _002__S );
  always @( posedge clk )
      buff_r_flag 	<= !arst ? 0 : buff_r_flag ? 1 : buff_t_flag ? 0 : ( (| buff_R ) && (buff != 0) ) ;
  always @(posedge clk or negedge arst)
    if (!arst)
      buff[511:384] <= 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    else
      buff[511:384] <= _003_;
  logic [127:0] _003__R0 ;
  assign _003__R0 = _003__T & { 128{ buff_S != _003__S }} ;
  always @( posedge clk )
      buff_T [511:384] 		<= !arst ? 0 : ( _003__T & ( buff_T [511:384] | { 128{ buff_S != _003__S }} ));
  always @( posedge clk )
      buff_t_flag 	<= !arst ? 0 : buff_t_flag ? 1 : | _003__T & ( buff_S != _003__S );
  always @( posedge clk )
      buff_r_flag 	<= !arst ? 0 : buff_r_flag ? 1 : buff_t_flag ? 0 : ( (| buff_R ) && (buff != 0) ) ;
  always @(posedge clk or negedge arst)
    if (!arst)
      buff[639:512] <= 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    else
      buff[639:512] <= _004_;
  logic [127:0] _004__R0 ;
  assign _004__R0 = _004__T & { 128{ buff_S != _004__S }} ;
  always @( posedge clk )
      buff_T [639:512] 		<= !arst ? 0 : ( _004__T & ( buff_T [639:512] | { 128{ buff_S != _004__S }} ));
  always @( posedge clk )
      buff_t_flag 	<= !arst ? 0 : buff_t_flag ? 1 : | _004__T & ( buff_S != _004__S );
  always @( posedge clk )
      buff_r_flag 	<= !arst ? 0 : buff_r_flag ? 1 : buff_t_flag ? 0 : ( (| buff_R ) && (buff != 0) ) ;
  always @(posedge clk or negedge arst)
    if (!arst)
      stat[0] <= 1'b0;
    else
      stat[0] <= _005_;
  logic [0:0] _005__R0 ;
  assign _005__R0 = _005__T & { 1{ stat_S != _005__S }} ;
  always @( posedge clk )
      stat_T [0] 		<= !arst ? 0 : ( _005__T & ( stat_T [0] | { 1{ stat_S != _005__S }} ));
  always @( posedge clk )
      stat_t_flag 	<= !arst ? 0 : stat_t_flag ? 1 : | _005__T & ( stat_S != _005__S );
  always @( posedge clk )
      stat_r_flag 	<= !arst ? 0 : stat_r_flag ? 1 : stat_t_flag ? 0 : ( (| stat_R ) && (stat != 0) ) ;
  always @(posedge clk or negedge arst)
    if (!arst)
      stat[1] <= 1'b0;
    else
      stat[1] <= _006_;
  logic [0:0] _006__R0 ;
  assign _006__R0 = _006__T & { 1{ stat_S != _006__S }} ;
  always @( posedge clk )
      stat_T [1] 		<= !arst ? 0 : ( _006__T & ( stat_T [1] | { 1{ stat_S != _006__S }} ));
  always @( posedge clk )
      stat_t_flag 	<= !arst ? 0 : stat_t_flag ? 1 : | _006__T & ( stat_S != _006__S );
  always @( posedge clk )
      stat_r_flag 	<= !arst ? 0 : stat_r_flag ? 1 : stat_t_flag ? 0 : ( (| stat_R ) && (stat != 0) ) ;
  always @(posedge clk or negedge arst)
    if (!arst)
      stat[2] <= 1'b0;
    else
      stat[2] <= _007_;
  logic [0:0] _007__R0 ;
  assign _007__R0 = _007__T & { 1{ stat_S != _007__S }} ;
  always @( posedge clk )
      stat_T [2] 		<= !arst ? 0 : ( _007__T & ( stat_T [2] | { 1{ stat_S != _007__S }} ));
  always @( posedge clk )
      stat_t_flag 	<= !arst ? 0 : stat_t_flag ? 1 : | _007__T & ( stat_S != _007__S );
  always @( posedge clk )
      stat_r_flag 	<= !arst ? 0 : stat_r_flag ? 1 : stat_t_flag ? 0 : ( (| stat_R ) && (stat != 0) ) ;
  always @(posedge clk or negedge arst)
    if (!arst)
      stat[3] <= 1'b0;
    else
      stat[3] <= _008_;
  logic [0:0] _008__R0 ;
  assign _008__R0 = _008__T & { 1{ stat_S != _008__S }} ;
  always @( posedge clk )
      stat_T [3] 		<= !arst ? 0 : ( _008__T & ( stat_T [3] | { 1{ stat_S != _008__S }} ));
  always @( posedge clk )
      stat_t_flag 	<= !arst ? 0 : stat_t_flag ? 1 : | _008__T & ( stat_S != _008__S );
  always @( posedge clk )
      stat_r_flag 	<= !arst ? 0 : stat_r_flag ? 1 : stat_t_flag ? 0 : ( (| stat_R ) && (stat != 0) ) ;
  always @(posedge clk or negedge arst)
    if (!arst)
      stat[4] <= 1'b0;
    else
      stat[4] <= _009_;
  logic [0:0] _009__R0 ;
  assign _009__R0 = _009__T & { 1{ stat_S != _009__S }} ;
  always @( posedge clk )
      stat_T [4] 		<= !arst ? 0 : ( _009__T & ( stat_T [4] | { 1{ stat_S != _009__S }} ));
  always @( posedge clk )
      stat_t_flag 	<= !arst ? 0 : stat_t_flag ? 1 : | _009__T & ( stat_S != _009__S );
  always @( posedge clk )
      stat_r_flag 	<= !arst ? 0 : stat_r_flag ? 1 : stat_t_flag ? 0 : ( (| stat_R ) && (stat != 0) ) ;
  assign _066_ = en_l[0] ? buff[127:0] : d;
  logic [4:0] en_l_R0 ;
  assign en_l_R0 [0] = ( | _066__R ) && buff[127:0] != d ;
  assign _066__T = en_l[0] ? ( { 128{ en_l_T  [0] }} | buff_T [127:0] ) : ( { 128{ en_l_T  [0] }} | d_T );
  assign _066__S = en_l[0] ? buff_S : d_S ;
  logic [639:0] buff_R0 ;
  assign buff_R0 [127:0] = { 128{ en_l[0] }} & ( _066__R );
  logic [127:0] d_R0 ;
  assign d_R0 = { 128{ !en_l[0] }} & ( _066__R );
  assign _000_ = srst ? _066_ : 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  logic [0:0] srst_R0 ;
  assign srst_R0 = ( | _000__R ) && _066_ != 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ;
  logic [127:0] _066__R0 ;
  assign _066__R0 = { 128{ srst }} & ( _000__R );
  assign _000__T = srst ? ( { 128{ | srst_T  }} | _066__T ) : { 128{ | srst_T  }};
  assign _000__S = srst ? _066__S : 0 ;
  assign _067_ = en_l[1] ? buff[255:128] : buff_pre[255:128];
  assign en_l_R0 [1] = ( | _067__R ) && buff[255:128] != buff_pre[255:128] ;
  assign _067__T = en_l[1] ? ( { 128{ en_l_T  [1] }} | buff_T [255:128] ) : ( { 128{ en_l_T  [1] }} | buff_pre_T [255:128] );
  assign _067__S = en_l[1] ? buff_S : buff_pre_S ;
  assign buff_R0 [255:128] = { 128{ en_l[1] }} & ( _067__R );
  logic [639:0] buff_pre_R0 ;
  assign buff_pre_R0 [255:128] = { 128{ !en_l[1] }} & ( _067__R );
  assign _001_ = srst ? _067_ : 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  logic [0:0] srst_R1 ;
  assign srst_R1 = ( | _001__R ) && _067_ != 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ;
  logic [127:0] _067__R0 ;
  assign _067__R0 = { 128{ srst }} & ( _001__R );
  assign _001__T = srst ? ( { 128{ | srst_T  }} | _067__T ) : { 128{ | srst_T  }};
  assign _001__S = srst ? _067__S : 0 ;
  assign _068_ = en_l[2] ? buff[383:256] : buff_pre[383:256];
  assign en_l_R0 [2] = ( | _068__R ) && buff[383:256] != buff_pre[383:256] ;
  assign _068__T = en_l[2] ? ( { 128{ en_l_T  [2] }} | buff_T [383:256] ) : ( { 128{ en_l_T  [2] }} | buff_pre_T [383:256] );
  assign _068__S = en_l[2] ? buff_S : buff_pre_S ;
  assign buff_R0 [383:256] = { 128{ en_l[2] }} & ( _068__R );
  assign buff_pre_R0 [383:256] = { 128{ !en_l[2] }} & ( _068__R );
  assign _002_ = srst ? _068_ : 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  logic [0:0] srst_R2 ;
  assign srst_R2 = ( | _002__R ) && _068_ != 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ;
  logic [127:0] _068__R0 ;
  assign _068__R0 = { 128{ srst }} & ( _002__R );
  assign _002__T = srst ? ( { 128{ | srst_T  }} | _068__T ) : { 128{ | srst_T  }};
  assign _002__S = srst ? _068__S : 0 ;
  assign _069_ = en_l[3] ? buff[511:384] : buff_pre[511:384];
  assign en_l_R0 [3] = ( | _069__R ) && buff[511:384] != buff_pre[511:384] ;
  assign _069__T = en_l[3] ? ( { 128{ en_l_T  [3] }} | buff_T [511:384] ) : ( { 128{ en_l_T  [3] }} | buff_pre_T [511:384] );
  assign _069__S = en_l[3] ? buff_S : buff_pre_S ;
  assign buff_R0 [511:384] = { 128{ en_l[3] }} & ( _069__R );
  assign buff_pre_R0 [511:384] = { 128{ !en_l[3] }} & ( _069__R );
  assign _003_ = srst ? _069_ : 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  logic [0:0] srst_R3 ;
  assign srst_R3 = ( | _003__R ) && _069_ != 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ;
  logic [127:0] _069__R0 ;
  assign _069__R0 = { 128{ srst }} & ( _003__R );
  assign _003__T = srst ? ( { 128{ | srst_T  }} | _069__T ) : { 128{ | srst_T  }};
  assign _003__S = srst ? _069__S : 0 ;
  assign _070_ = en_l[4] ? buff[639:512] : buff_pre[639:512];
  assign en_l_R0 [4] = ( | _070__R ) && buff[639:512] != buff_pre[639:512] ;
  assign _070__T = en_l[4] ? ( { 128{ en_l_T  [4] }} | buff_T [639:512] ) : ( { 128{ en_l_T  [4] }} | buff_pre_T [639:512] );
  assign _070__S = en_l[4] ? buff_S : buff_pre_S ;
  assign buff_R0 [639:512] = { 128{ en_l[4] }} & ( _070__R );
  assign buff_pre_R0 [639:512] = { 128{ !en_l[4] }} & ( _070__R );
  assign _004_ = srst ? _070_ : 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  logic [0:0] srst_R4 ;
  assign srst_R4 = ( | _004__R ) && _070_ != 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ;
  logic [127:0] _070__R0 ;
  assign _070__R0 = { 128{ srst }} & ( _004__R );
  assign _004__T = srst ? ( { 128{ | srst_T  }} | _070__T ) : { 128{ | srst_T  }};
  assign _004__S = srst ? _070__S : 0 ;
  assign _071_ = en_l_s ? stat[0] : stat_nxt;
  logic [0:0] en_l_s_R0 ;
  assign en_l_s_R0 = ( | _071__R ) && stat[0] != stat_nxt ;
  assign _071__T = en_l_s ? ( { 1{ en_l_s_T  }} | stat_T [0] ) : ( { 1{ en_l_s_T  }} | stat_nxt_T );
  assign _071__S = en_l_s ? stat_S : stat_nxt_S ;
  assign { stat_R9 [4:2] } = 0;
  logic [4:0] stat_R10 ;
  assign stat_R10 [0] = { 1{ en_l_s }} & ( _071__R );
  logic [0:0] stat_nxt_R0 ;
  assign stat_nxt_R0 = { 1{ !en_l_s }} & ( _071__R );
  assign _005_ = srst ? _071_ : 1'b0;
  logic [0:0] srst_R5 ;
  assign srst_R5 = ( | _005__R ) && _071_ != 1'b0 ;
  logic [0:0] _071__R0 ;
  assign _071__R0 = { 1{ srst }} & ( _005__R );
  assign _005__T = srst ? ( { 1{ | srst_T  }} | _071__T ) : { 1{ | srst_T  }};
  assign _005__S = srst ? _071__S : 0 ;
  assign _072_ = en_l_s ? stat[1] : stat_pre[1];
  logic [0:0] en_l_s_R1 ;
  assign en_l_s_R1 = ( | _072__R ) && stat[1] != stat_pre[1] ;
  assign _072__T = en_l_s ? ( { 1{ en_l_s_T  }} | stat_T [1] ) : ( { 1{ en_l_s_T  }} | stat_pre_T [1] );
  assign _072__S = en_l_s ? stat_S : stat_pre_S ;
  assign stat_R10 [1] = { 1{ en_l_s }} & ( _072__R );
  logic [4:0] stat_pre_R0 ;
  assign stat_pre_R0 [1] = { 1{ !en_l_s }} & ( _072__R );
  assign _006_ = srst ? _072_ : 1'b0;
  logic [0:0] srst_R6 ;
  assign srst_R6 = ( | _006__R ) && _072_ != 1'b0 ;
  logic [0:0] _072__R0 ;
  assign _072__R0 = { 1{ srst }} & ( _006__R );
  assign _006__T = srst ? ( { 1{ | srst_T  }} | _072__T ) : { 1{ | srst_T  }};
  assign _006__S = srst ? _072__S : 0 ;
  assign _073_ = en_l_s ? stat[2] : stat_pre[2];
  logic [0:0] en_l_s_R2 ;
  assign en_l_s_R2 = ( | _073__R ) && stat[2] != stat_pre[2] ;
  assign _073__T = en_l_s ? ( { 1{ en_l_s_T  }} | stat_T [2] ) : ( { 1{ en_l_s_T  }} | stat_pre_T [2] );
  assign _073__S = en_l_s ? stat_S : stat_pre_S ;
  assign stat_R10 [2] = { 1{ en_l_s }} & ( _073__R );
  assign stat_pre_R0 [2] = { 1{ !en_l_s }} & ( _073__R );
  assign _007_ = srst ? _073_ : 1'b0;
  logic [0:0] srst_R7 ;
  assign srst_R7 = ( | _007__R ) && _073_ != 1'b0 ;
  logic [0:0] _073__R0 ;
  assign _073__R0 = { 1{ srst }} & ( _007__R );
  assign _007__T = srst ? ( { 1{ | srst_T  }} | _073__T ) : { 1{ | srst_T  }};
  assign _007__S = srst ? _073__S : 0 ;
  assign _074_ = en_l_s ? stat[3] : stat_pre[3];
  logic [0:0] en_l_s_R3 ;
  assign en_l_s_R3 = ( | _074__R ) && stat[3] != stat_pre[3] ;
  assign _074__T = en_l_s ? ( { 1{ en_l_s_T  }} | stat_T [3] ) : ( { 1{ en_l_s_T  }} | stat_pre_T [3] );
  assign _074__S = en_l_s ? stat_S : stat_pre_S ;
  assign stat_R10 [3] = { 1{ en_l_s }} & ( _074__R );
  assign stat_pre_R0 [3] = { 1{ !en_l_s }} & ( _074__R );
  assign _008_ = srst ? _074_ : 1'b0;
  logic [0:0] srst_R8 ;
  assign srst_R8 = ( | _008__R ) && _074_ != 1'b0 ;
  logic [0:0] _074__R0 ;
  assign _074__R0 = { 1{ srst }} & ( _008__R );
  assign _008__T = srst ? ( { 1{ | srst_T  }} | _074__T ) : { 1{ | srst_T  }};
  assign _008__S = srst ? _074__S : 0 ;
  assign _075_ = en_l_s ? stat[4] : stat_pre[4];
  logic [0:0] en_l_s_R4 ;
  assign en_l_s_R4 = ( | _075__R ) && stat[4] != stat_pre[4] ;
  assign _075__T = en_l_s ? ( { 1{ en_l_s_T  }} | stat_T [4] ) : ( { 1{ en_l_s_T  }} | stat_pre_T [4] );
  assign _075__S = en_l_s ? stat_S : stat_pre_S ;
  assign stat_R10 [4] = { 1{ en_l_s }} & ( _075__R );
  assign stat_pre_R0 [4] = { 1{ !en_l_s }} & ( _075__R );
  assign _009_ = srst ? _075_ : 1'b0;
  logic [0:0] srst_R9 ;
  assign srst_R9 = ( | _009__R ) && _075_ != 1'b0 ;
  logic [0:0] _075__R0 ;
  assign _075__R0 = { 1{ srst }} & ( _009__R );
  assign _009__T = srst ? ( { 1{ | srst_T  }} | _075__T ) : { 1{ | srst_T  }};
  assign _009__S = srst ? _075__S : 0 ;
  assign _010_ = stat[0] ? 1'b1 : n_elem[0];
  logic [4:0] stat_R11 ;
  assign stat_R11 [0] = ( | _010__R ) && 1'b1 != n_elem[0] ;
  logic [32:0] n_elem_R0 ;
  assign n_elem_R0 [0] = { 1{ !stat[0] }} & ( _010__R );
  assign _010__T = stat[0] ? { 1{ | stat_T  [0] }} : ( { 1{ | stat_T  [0] }} | n_elem_T [0] );
  assign _010__S = stat[0] ? stat_S : n_elem_S ;
  assign count = stat[4] ? _010_ : 1'b0;
  assign stat_R11 [4] = ( | count_R ) && _010_ != 1'b0 ;
  logic [0:0] _010__R0 ;
  assign _010__R0 = { 1{ stat[4] }} & ( count_R );
  assign count_T = stat[4] ? ( { 1{ | stat_T  [4] }} | _010__T ) : { 1{ | stat_T  [4] }};
  assign count_S = stat[4] ? _010__S : 0 ;
  assign n_elem[0] = _036_ ? 1'b0 : _015_;
  logic [0:0] _036__R0 ;
  assign _036__R0 = ( | n_elem_R [0] ) && 1'b0 != _015_ ;
  logic [0:0] _015__R0 ;
  assign _015__R0 = { 1{ !_036_ }} & ( n_elem_R [0] );
  assign n_elem_T [0] = _036_ ? { 1{ | _036__T  }} : ( { 1{ | _036__T  }} | _015__T );
  assign n_elem_S = _036_ ? _036__S : _015__S ;
  assign _015_ = _035_ ? 1'b1 : _013_[0];
  logic [0:0] _035__R0 ;
  assign _035__R0 = ( | _015__R ) && 1'b1 != _013_[0] ;
  logic [32:0] _013__R0 ;
  assign _013__R0 [0] = { 1{ !_035_ }} & ( _015__R );
  assign _015__T = _035_ ? { 1{ | _035__T  }} : ( { 1{ | _035__T  }} | _013__T [0] );
  assign _015__S = _035_ ? _035__S : _013__S ;
  assign en_l_var[1] = _033_ ? 1'b1 : _017_;
  logic [0:0] _033__R0 ;
  assign _033__R0 = ( | en_l_var_R [1] ) && 1'b1 != _017_ ;
  logic [0:0] _017__R0 ;
  assign _017__R0 = { 1{ !_033_ }} & ( en_l_var_R [1] );
  assign en_l_var_T [1] = _033_ ? { 1{ | _033__T  }} : ( { 1{ | _033__T  }} | _017__T );
  assign en_l_var_S = _033_ ? _033__S : _017__S ;
  assign buff_pre[255:128] = _033_ ? buff[127:0] : d;
  logic [0:0] _033__R1 ;
  assign _033__R1 = ( | buff_pre_R [255:128] ) && buff[127:0] != d ;
  assign buff_pre_T [255:128] = _033_ ? ( { 128{ _033__T  }} | buff_T [127:0] ) : ( { 128{ _033__T  }} | d_T );
  assign buff_pre_S = _033_ ? buff_S : d_S ;
  logic [639:0] buff_R1 ;
  assign buff_R1 [127:0] = { 128{ _033_ }} & ( buff_pre_R [255:128] );
  logic [127:0] d_R1 ;
  assign d_R1 = { 128{ !_033_ }} & ( buff_pre_R [255:128] );
  assign _013_[0] = _034_ ? 1'b0 : _012_;
  logic [0:0] _034__R0 ;
  assign _034__R0 = ( | _013__R [0] ) && 1'b0 != _012_ ;
  logic [0:0] _012__R0 ;
  assign _012__R0 = { 1{ !_034_ }} & ( _013__R [0] );
  assign _013__T [0] = _034_ ? { 1{ | _034__T  }} : ( { 1{ | _034__T  }} | _012__T );
  assign _013__S = _034_ ? _034__S : _012__S ;
  assign en_l_var[2] = _032_ ? 1'b1 : _016_;
  logic [0:0] _032__R0 ;
  assign _032__R0 = ( | en_l_var_R [2] ) && 1'b1 != _016_ ;
  logic [0:0] _016__R0 ;
  assign _016__R0 = { 1{ !_032_ }} & ( en_l_var_R [2] );
  assign en_l_var_T [2] = _032_ ? { 1{ | _032__T  }} : ( { 1{ | _032__T  }} | _016__T );
  assign en_l_var_S = _032_ ? _032__S : _016__S ;
  assign buff_pre[383:256] = _032_ ? buff[255:128] : d;
  logic [0:0] _032__R1 ;
  assign _032__R1 = ( | buff_pre_R [383:256] ) && buff[255:128] != d ;
  assign buff_pre_T [383:256] = _032_ ? ( { 128{ _032__T  }} | buff_T [255:128] ) : ( { 128{ _032__T  }} | d_T );
  assign buff_pre_S = _032_ ? buff_S : d_S ;
  assign buff_R1 [255:128] = { 128{ _032_ }} & ( buff_pre_R [383:256] );
  logic [127:0] d_R2 ;
  assign d_R2 = { 128{ !_032_ }} & ( buff_pre_R [383:256] );
  assign en_l_var[3] = _031_ ? 1'b1 : _014_;
  logic [0:0] _031__R0 ;
  assign _031__R0 = ( | en_l_var_R [3] ) && 1'b1 != _014_ ;
  logic [0:0] _014__R0 ;
  assign _014__R0 = { 1{ !_031_ }} & ( en_l_var_R [3] );
  assign en_l_var_T [3] = _031_ ? { 1{ | _031__T  }} : ( { 1{ | _031__T  }} | _014__T );
  assign en_l_var_S = _031_ ? _031__S : _014__S ;
  assign buff_pre[511:384] = _031_ ? buff[383:256] : d;
  logic [0:0] _031__R1 ;
  assign _031__R1 = ( | buff_pre_R [511:384] ) && buff[383:256] != d ;
  assign buff_pre_T [511:384] = _031_ ? ( { 128{ _031__T  }} | buff_T [383:256] ) : ( { 128{ _031__T  }} | d_T );
  assign buff_pre_S = _031_ ? buff_S : d_S ;
  assign buff_R1 [383:256] = { 128{ _031_ }} & ( buff_pre_R [511:384] );
  logic [127:0] d_R3 ;
  assign d_R3 = { 128{ !_031_ }} & ( buff_pre_R [511:384] );
  assign en_l_var[4] = _030_ ? 1'b1 : _011_;
  logic [0:0] _030__R0 ;
  assign _030__R0 = ( | en_l_var_R [4] ) && 1'b1 != _011_ ;
  logic [0:0] _011__R0 ;
  assign _011__R0 = { 1{ !_030_ }} & ( en_l_var_R [4] );
  assign en_l_var_T [4] = _030_ ? { 1{ | _030__T  }} : ( { 1{ | _030__T  }} | _011__T );
  assign en_l_var_S = _030_ ? _030__S : _011__S ;
  assign buff_pre[639:512] = _030_ ? buff[511:384] : d;
  logic [0:0] _030__R1 ;
  assign _030__R1 = ( | buff_pre_R [639:512] ) && buff[511:384] != d ;
  assign buff_pre_T [639:512] = _030_ ? ( { 128{ _030__T  }} | buff_T [511:384] ) : ( { 128{ _030__T  }} | d_T );
  assign buff_pre_S = _030_ ? buff_S : d_S ;
  assign buff_R1 [511:384] = { 128{ _030_ }} & ( buff_pre_R [639:512] );
  logic [127:0] d_R4 ;
  assign d_R4 = { 128{ !_030_ }} & ( buff_pre_R [639:512] );
  assign z = stat[4] ? buff[639:512] : d;
  assign { stat_R11 [1], stat_R11 [2], stat_R11 [3] } = 0;
  logic [4:0] stat_R12 ;
  assign stat_R12 [4] = ( | z_R ) && buff[639:512] != d ;
  assign z_T = stat[4] ? ( { 128{ stat_T  [4] }} | buff_T [639:512] ) : ( { 128{ stat_T  [4] }} | d_T );
  assign z_S = stat[4] ? buff_S : d_S ;
  assign buff_R1 [639:512] = { 128{ stat[4] }} & ( z_R );
  logic [127:0] d_R5 ;
  assign d_R5 = { 128{ !stat[4] }} & ( z_R );
  assign \FIFO_REG.delta = _018_ ^ ld;
  assign \FIFO_REG.delta_S = 0 ;
  logic [0:0] _018__R0 ;
  logic [0:0] ld_R13 ;
  assign \FIFO_REG.delta_T = _018__T | ld_T ;
  assign _018__R0 = \FIFO_REG.delta_R ;
  assign ld_R13 = \FIFO_REG.delta_R ;
  assign _013_[32:1] = 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
  assign _013__T [32:1] = 0 ;
  assign _013__S = 14'b1 ;
  assign buff_nxt = d;
  logic [127:0] d_R6 ;
  assign buff_nxt_T = d_T ;
  assign d_R6 = buff_nxt_R ;
  assign buff_nxt_S = d_S ;
  assign buff_pre[127:0] = d;
  logic [127:0] d_R7 ;
  assign buff_pre_T [127:0] = d_T ;
  assign d_R7 = buff_pre_R [127:0] ;
  assign buff_pre_S = d_S ;
  assign count_t = { 31'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, count };
  assign count_t_T = {  31'h0 , count_T  };
  logic [13:0] count_t_S ;
  assign count_t_S = 0 ;
  logic [0:0] count_R1 ;
  assign count_R1 = count_t_R [0:0] ;
  assign i = 32'd4294967295;
  assign i_T = 0 ;
  assign i_S = 14'b1 ;
  assign n_elem[32:1] = 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
  assign n_elem_T [32:1] = 0 ;
  assign n_elem_S = 14'b1 ;
  assign size_t[0] = sd;
  logic [0:0] sd_R1 ;
  assign size_t_T [0] = sd_T ;
  assign sd_R1 = size_t_R [0] ;
  assign size_t_S = sd_S ;
  assign stat_after = stat[1];
  assign stat_after_T = stat_T [1] ;
  assign stat_R12 [1] = stat_after_R ;
  assign stat_after_S = stat_S ;
  assign stat_before = 1'b0;
  assign stat_before_T = 0 ;
  assign stat_before_S = 14'b1 ;
  assign stat_pre[0] = stat_nxt;
  logic [0:0] stat_nxt_R1 ;
  assign stat_pre_T [0] = stat_nxt_T ;
  assign stat_nxt_R1 = stat_pre_R [0] ;
  assign stat_pre_S = stat_nxt_S ;
  assign _011__R = ( _011__R0 );
  assign _014__R = ( _014__R0 );
  assign _031__R = ( _031__R0 ) | ( _031__R1 );
  assign _035__R = ( _035__R0 );
  assign _013__R = ( _013__R0 );
  assign _015__R = ( _015__R0 );
  assign _036__R = ( _036__R0 );
  assign _075__R = ( _075__R0 );
  assign _073__R = ( _073__R0 );
  assign stat_pre_R = ( stat_pre_R0 );
  assign _069__R = ( _069__R0 );
  assign _067__R = ( _067__R0 );
  assign buff_pre_R = ( buff_pre_R0 );
  assign _066__R = ( _066__R0 );
  assign _009__R = ( _009__R0 );
  assign _012__R = ( _012__R0 );
  assign _007__R = ( _007__R0 );
  assign buff_R = ( buff_R0 ) | ( buff_R1 );
  assign _006__R = ( _006__R0 );
  assign _071__R = ( _071__R0 );
  assign _052__R = ( _052__R0 );
  assign en_l_R = ( en_l_R0 );
  assign _002__R = ( _002__R0 );
  assign _051__R = ( _051__R0 );
  assign _050__R = ( _050__R0 );
  assign lz_R = ( lz_R0 );
  assign _017__R = ( _017__R0 );
  assign _023__R = ( _023__R0 );
  assign _074__R = ( _074__R0 );
  assign en_l_s_R = ( en_l_s_R0 ) | ( en_l_s_R1 ) | ( en_l_s_R2 ) | ( en_l_s_R3 ) | ( en_l_s_R4 );
  assign _003__R = ( _003__R0 );
  assign _029__R = ( _029__R0 );
  assign _044__R = ( _044__R0 );
  assign _032__R = ( _032__R0 ) | ( _032__R1 );
  assign vd_R = ( vd_R0 );
  assign z_R = ( z_R0 );
  assign _048__R = ( _048__R0 );
  assign \FIFO_REG.delta_R = ( \FIFO_REG.delta_R0 );
  assign _033__R = ( _033__R0 ) | ( _033__R1 );
  assign vz_R = ( vz_R0 ) | ( vz_R1 ) | ( vz_R2 ) | ( vz_R3 ) | ( vz_R4 ) | ( vz_R5 ) | ( vz_R6 ) | ( vz_R7 );
  assign _019__R = ( _019__R0 ) | ( _019__R1 );
  assign _057__R = ( _057__R0 );
  assign stat_R = ( stat_R0 ) | ( stat_R1 ) | ( stat_R2 ) | ( stat_R3 ) | ( stat_R4 ) | ( stat_R5 ) | ( stat_R6 ) | ( stat_R7 ) | ( stat_R8 ) | ( stat_R9 ) | ( stat_R10 ) | ( stat_R11 ) | ( stat_R12 );
  assign _041__R = ( _041__R0 ) | ( _041__R1 ) | ( _041__R2 ) | ( _041__R3 ) | ( _041__R4 ) | ( _041__R5 );
  assign _008__R = ( _008__R0 );
  assign _063__R = ( _063__R0 );
  assign _065__R = ( _065__R0 );
  assign n_elem_R = ( n_elem_R0 );
  assign _039__R = ( _039__R0 );
  assign _042__R = ( _042__R0 );
  assign stat_nxt_R = ( stat_nxt_R0 ) | ( stat_nxt_R1 );
  assign _005__R = ( _005__R0 );
  assign _021__R = ( _021__R0 ) | ( _021__R1 ) | ( _021__R2 ) | ( _021__R3 ) | ( _021__R4 );
  assign _043__R = ( _043__R0 );
  assign active_R = ( active_R0 );
  assign _024__R = ( _024__R0 ) | ( _024__R1 );
  assign _046__R = ( _046__R0 );
  assign _027__R = ( _027__R0 );
  assign _038__R = ( _038__R0 );
  assign _010__R = ( _010__R0 );
  assign _040__R = ( _040__R0 ) | ( _040__R1 );
  assign _034__R = ( _034__R0 );
  assign _022__R = ( _022__R0 ) | ( _022__R1 );
  assign _045__R = ( _045__R0 );
  assign _026__R = ( _026__R0 ) | ( _026__R1 );
  assign _000__R = ( _000__R0 );
  assign _028__R = ( _028__R0 ) | ( _028__R1 );
  assign srst_R = ( srst_R0 ) | ( srst_R1 ) | ( srst_R2 ) | ( srst_R3 ) | ( srst_R4 ) | ( srst_R5 ) | ( srst_R6 ) | ( srst_R7 ) | ( srst_R8 ) | ( srst_R9 );
  assign en_l_var_R = ( en_l_var_R0 );
  assign _053__R = ( _053__R0 );
  assign _037__R = ( _037__R0 );
  assign _020__R = ( _020__R0 );
  assign _072__R = ( _072__R0 );
  assign _001__R = ( _001__R0 );
  assign _058__R = ( _058__R0 );
  assign _030__R = ( _030__R0 ) | ( _030__R1 );
  assign d_R = ( d_R0 ) | ( d_R1 ) | ( d_R2 ) | ( d_R3 ) | ( d_R4 ) | ( d_R5 ) | ( d_R6 ) | ( d_R7 );
  assign _059__R = ( _059__R0 );
  assign _055__R = ( _055__R0 );
  assign _070__R = ( _070__R0 );
  assign _004__R = ( _004__R0 );
  assign ld_R = ( ld_R0 ) | ( ld_R1 ) | ( ld_R2 ) | ( ld_R3 ) | ( ld_R4 ) | ( ld_R5 ) | ( ld_R6 ) | ( ld_R7 ) | ( ld_R8 ) | ( ld_R9 ) | ( ld_R10 ) | ( ld_R11 ) | ( ld_R12 ) | ( ld_R13 );
  assign _025__R = ( _025__R0 );
  assign _018__R = ( _018__R0 );
  assign _056__R = ( _056__R0 );
  assign _016__R = ( _016__R0 );
  assign _061__R = ( _061__R0 );
  assign sd_R = ( sd_R0 ) | ( sd_R1 );
  assign _054__R = ( _054__R0 );
  assign _062__R = ( _062__R0 );
  assign _068__R = ( _068__R0 );
  assign _064__R = ( _064__R0 );
  assign _060__R = ( _060__R0 );
  assign en_R = ( en_R0 ) | ( en_R1 ) | ( en_R2 ) | ( en_R3 ) | ( en_R4 ) | ( en_R5 );
  assign _049__R = ( _049__R0 );
  assign count_R = ( count_R0 ) | ( count_R1 );
  assign _047__R = ( _047__R0 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { buff_nxt_R , count_t_R , i_R , size_t_R , stat_after_R , stat_before_R , arst_R , clk_R  } = 0;
  always @( posedge clk ) begin
    if( !arst ) buff_PREV_VAL1 <= 0 ;
    if( !arst ) buff_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) buff_PREV_VAL1 <= buff ;
    if( INSTR_IN_ZY ) buff_PREV_VAL2 <= buff_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( !arst ) buff_PREV_VAL1 <= 0 ;
    if( !arst ) buff_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) buff_PREV_VAL1 <= buff ;
    if( INSTR_IN_ZY ) buff_PREV_VAL2 <= buff_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( !arst ) buff_PREV_VAL1 <= 0 ;
    if( !arst ) buff_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) buff_PREV_VAL1 <= buff ;
    if( INSTR_IN_ZY ) buff_PREV_VAL2 <= buff_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( !arst ) buff_PREV_VAL1 <= 0 ;
    if( !arst ) buff_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) buff_PREV_VAL1 <= buff ;
    if( INSTR_IN_ZY ) buff_PREV_VAL2 <= buff_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( !arst ) buff_PREV_VAL1 <= 0 ;
    if( !arst ) buff_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) buff_PREV_VAL1 <= buff ;
    if( INSTR_IN_ZY ) buff_PREV_VAL2 <= buff_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( !arst ) stat_PREV_VAL1 <= 0 ;
    if( !arst ) stat_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) stat_PREV_VAL1 <= stat ;
    if( INSTR_IN_ZY ) stat_PREV_VAL2 <= stat_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( !arst ) stat_PREV_VAL1 <= 0 ;
    if( !arst ) stat_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) stat_PREV_VAL1 <= stat ;
    if( INSTR_IN_ZY ) stat_PREV_VAL2 <= stat_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( !arst ) stat_PREV_VAL1 <= 0 ;
    if( !arst ) stat_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) stat_PREV_VAL1 <= stat ;
    if( INSTR_IN_ZY ) stat_PREV_VAL2 <= stat_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( !arst ) stat_PREV_VAL1 <= 0 ;
    if( !arst ) stat_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) stat_PREV_VAL1 <= stat ;
    if( INSTR_IN_ZY ) stat_PREV_VAL2 <= stat_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( !arst ) stat_PREV_VAL1 <= 0 ;
    if( !arst ) stat_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) stat_PREV_VAL1 <= stat ;
    if( INSTR_IN_ZY ) stat_PREV_VAL2 <= stat_PREV_VAL1 ;
  end
 // ground taints for unused wire slices
  assign { _013__R0 [32:1] } = 0;
  assign { stat_pre_R0 [0] } = 0;
  assign { buff_pre_R0 [0], buff_pre_R0 [1], buff_pre_R0 [2], buff_pre_R0 [3], buff_pre_R0 [4], buff_pre_R0 [5], buff_pre_R0 [6], buff_pre_R0 [7], buff_pre_R0 [8], buff_pre_R0 [9], buff_pre_R0 [10], buff_pre_R0 [11], buff_pre_R0 [12], buff_pre_R0 [13], buff_pre_R0 [14], buff_pre_R0 [15], buff_pre_R0 [16], buff_pre_R0 [17], buff_pre_R0 [18], buff_pre_R0 [19], buff_pre_R0 [20], buff_pre_R0 [21], buff_pre_R0 [22], buff_pre_R0 [23], buff_pre_R0 [24], buff_pre_R0 [25], buff_pre_R0 [26], buff_pre_R0 [27], buff_pre_R0 [28], buff_pre_R0 [29], buff_pre_R0 [30], buff_pre_R0 [31], buff_pre_R0 [32], buff_pre_R0 [33], buff_pre_R0 [34], buff_pre_R0 [35], buff_pre_R0 [36], buff_pre_R0 [37], buff_pre_R0 [38], buff_pre_R0 [39], buff_pre_R0 [40], buff_pre_R0 [41], buff_pre_R0 [42], buff_pre_R0 [43], buff_pre_R0 [44], buff_pre_R0 [45], buff_pre_R0 [46], buff_pre_R0 [47], buff_pre_R0 [48], buff_pre_R0 [49], buff_pre_R0 [50], buff_pre_R0 [51], buff_pre_R0 [52], buff_pre_R0 [53], buff_pre_R0 [54], buff_pre_R0 [55], buff_pre_R0 [56], buff_pre_R0 [57], buff_pre_R0 [58], buff_pre_R0 [59], buff_pre_R0 [60], buff_pre_R0 [61], buff_pre_R0 [62], buff_pre_R0 [63], buff_pre_R0 [64], buff_pre_R0 [65], buff_pre_R0 [66], buff_pre_R0 [67], buff_pre_R0 [68], buff_pre_R0 [69], buff_pre_R0 [70], buff_pre_R0 [71], buff_pre_R0 [72], buff_pre_R0 [73], buff_pre_R0 [74], buff_pre_R0 [75], buff_pre_R0 [76], buff_pre_R0 [77], buff_pre_R0 [78], buff_pre_R0 [79], buff_pre_R0 [80], buff_pre_R0 [81], buff_pre_R0 [82], buff_pre_R0 [83], buff_pre_R0 [84], buff_pre_R0 [85], buff_pre_R0 [86], buff_pre_R0 [87], buff_pre_R0 [88], buff_pre_R0 [89], buff_pre_R0 [90], buff_pre_R0 [91], buff_pre_R0 [92], buff_pre_R0 [93], buff_pre_R0 [94], buff_pre_R0 [95], buff_pre_R0 [96], buff_pre_R0 [97], buff_pre_R0 [98], buff_pre_R0 [99], buff_pre_R0 [100], buff_pre_R0 [101], buff_pre_R0 [102], buff_pre_R0 [103], buff_pre_R0 [104], buff_pre_R0 [105], buff_pre_R0 [106], buff_pre_R0 [107], buff_pre_R0 [108], buff_pre_R0 [109], buff_pre_R0 [110], buff_pre_R0 [111], buff_pre_R0 [112], buff_pre_R0 [113], buff_pre_R0 [114], buff_pre_R0 [115], buff_pre_R0 [116], buff_pre_R0 [117], buff_pre_R0 [118], buff_pre_R0 [119], buff_pre_R0 [120], buff_pre_R0 [121], buff_pre_R0 [122], buff_pre_R0 [123], buff_pre_R0 [124], buff_pre_R0 [125], buff_pre_R0 [126], buff_pre_R0 [127] } = 0;
  assign { stat_R12 [0], stat_R12 [2], stat_R12 [3] } = 0;
  assign { n_elem_R0 [32:1] } = 0;
  assert property( buff_r_flag == 0 );
  assert property( stat_r_flag == 0 );
  assign rst_zy = !arst ;
endmodule
