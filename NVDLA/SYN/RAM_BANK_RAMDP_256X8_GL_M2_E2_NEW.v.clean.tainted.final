module RAM_BANK_RAMDP_256X8_GL_M2_E2 ( CLK_R , CLK_W , IDDQ , RA , RE , RET_EN , SLEEP_EN , SVOP , WA , WD , WE , clobber_array , clobber_flops , clobber_x , INSTR_IN_ZY , rst_zy , CLK_R_T , CLK_R_S , CLK_W_T , CLK_W_S , IDDQ_T , IDDQ_S , RA_T , RA_S , RD_R0 , RD_C0 , RD_X0 , RE_T , RE_S , RET_EN_T , RET_EN_S , SLEEP_EN_T , SLEEP_EN_S , SVOP_T , SVOP_S , WA_T , WA_S , WD_T , WD_S , WE_T , WE_S , clobber_array_T , clobber_array_S , clobber_flops_T , clobber_flops_S , clobber_x_T , clobber_x_S , RD , CLK_R_R , CLK_R_X , CLK_R_C , CLK_W_R , CLK_W_X , CLK_W_C , IDDQ_R , IDDQ_X , IDDQ_C , RA_R , RA_X , RA_C , RD_T , RD_S , RE_R , RE_X , RE_C , RET_EN_R , RET_EN_X , RET_EN_C , SLEEP_EN_R , SLEEP_EN_X , SLEEP_EN_C , SVOP_R , SVOP_X , SVOP_C , WA_R , WA_X , WA_C , WD_R , WD_X , WD_C , WE_R , WE_X , WE_C , clobber_array_R , clobber_array_X , clobber_array_C , clobber_flops_R , clobber_flops_X , clobber_flops_C , clobber_x_R , clobber_x_X , clobber_x_C );
  input rst_zy;
  integer i;
  input INSTR_IN_ZY;
  logic _00_;
  logic _00__T ;
  logic _00__R ;
  logic _00__C ;
  logic _00__X ;
  logic [13:0] _00__S ;
  logic _01_;
  logic _01__T ;
  logic _01__R ;
  logic _01__C ;
  logic _01__X ;
  logic [13:0] _01__S ;
  logic _02_;
  logic _02__T ;
  logic _02__R ;
  logic _02__C ;
  logic _02__X ;
  logic [13:0] _02__S ;
  logic _03_;
  logic _03__T ;
  logic _03__R ;
  logic _03__C ;
  logic _03__X ;
  logic [13:0] _03__S ;
  logic _04_;
  logic _04__T ;
  logic _04__R ;
  logic _04__C ;
  logic _04__X ;
  logic [13:0] _04__S ;
  logic _05_;
  logic _05__T ;
  logic _05__R ;
  logic _05__C ;
  logic _05__X ;
  logic [13:0] _05__S ;
  logic _06_;
  logic _06__T ;
  logic _06__R ;
  logic _06__C ;
  logic _06__X ;
  logic [13:0] _06__S ;
  logic _07_;
  logic _07__T ;
  logic _07__R ;
  logic _07__C ;
  logic _07__X ;
  logic [13:0] _07__S ;
  logic _08_;
  logic _08__T ;
  logic _08__R ;
  logic _08__C ;
  logic _08__X ;
  logic [13:0] _08__S ;
  logic _09_;
  logic _09__T ;
  logic _09__R ;
  logic _09__C ;
  logic _09__X ;
  logic [13:0] _09__S ;
  logic _10_;
  logic _10__T ;
  logic _10__R ;
  logic _10__C ;
  logic _10__X ;
  logic [13:0] _10__S ;
  logic _11_;
  logic _11__T ;
  logic _11__R ;
  logic _11__C ;
  logic _11__X ;
  logic [13:0] _11__S ;
  logic _12_;
  logic _12__T ;
  logic _12__R ;
  logic _12__C ;
  logic _12__X ;
  logic [13:0] _12__S ;
  logic _13_;
  logic _13__T ;
  logic _13__R ;
  logic _13__C ;
  logic _13__X ;
  logic [13:0] _13__S ;
  logic _14_;
  logic _14__T ;
  logic _14__R ;
  logic _14__C ;
  logic _14__X ;
  logic [13:0] _14__S ;
  logic _15_;
  logic _15__T ;
  logic _15__R ;
  logic _15__C ;
  logic _15__X ;
  logic [13:0] _15__S ;
  logic _16_;
  logic _16__T ;
  logic _16__R ;
  logic _16__C ;
  logic _16__X ;
  logic [13:0] _16__S ;
  input CLK_R;
  input CLK_R_T ;
  input [13:0] CLK_R_S ;
  output CLK_R_R ;
  output CLK_R_X ;
  output CLK_R_C ;
  input CLK_W;
  input CLK_W_T ;
  input [13:0] CLK_W_S ;
  output CLK_W_R ;
  output CLK_W_X ;
  output CLK_W_C ;
  input IDDQ;
  input IDDQ_T ;
  input [13:0] IDDQ_S ;
  output IDDQ_R ;
  output IDDQ_X ;
  output IDDQ_C ;
  input [7:0] RA;
  input [7:0] RA_T ;
  input [13:0] RA_S ;
  output [7:0] RA_R ;
  output [7:0] RA_X ;
  output [7:0] RA_C ;
  output [7:0] RD;
  logic [7:0] RD ;
  output [7:0] RD_T ;
  logic [7:0] RD_T ;
  logic [7:0] RD_R ;
  logic [7:0] RD_C ;
  logic [7:0] RD_X ;
  logic [13:0] RD_S ;
  input [7:0] RD_R0 ;
  input [7:0] RD_C0 ;
  input [7:0] RD_X0 ;
  output [13:0] RD_S ;
  input RE;
  input RE_T ;
  input [13:0] RE_S ;
  output RE_R ;
  output RE_X ;
  output RE_C ;
  input RET_EN;
  input RET_EN_T ;
  input [13:0] RET_EN_S ;
  output RET_EN_R ;
  output RET_EN_X ;
  output RET_EN_C ;
  input [7:0] SLEEP_EN;
  input [7:0] SLEEP_EN_T ;
  input [13:0] SLEEP_EN_S ;
  output [7:0] SLEEP_EN_R ;
  output [7:0] SLEEP_EN_X ;
  output [7:0] SLEEP_EN_C ;
  input [1:0] SVOP;
  input [1:0] SVOP_T ;
  input [13:0] SVOP_S ;
  output [1:0] SVOP_R ;
  output [1:0] SVOP_X ;
  output [1:0] SVOP_C ;
  input [7:0] WA;
  input [7:0] WA_T ;
  input [13:0] WA_S ;
  output [7:0] WA_R ;
  output [7:0] WA_X ;
  output [7:0] WA_C ;
  input [7:0] WD;
  input [7:0] WD_T ;
  input [13:0] WD_S ;
  output [7:0] WD_R ;
  output [7:0] WD_X ;
  output [7:0] WD_C ;
  input WE;
  input WE_T ;
  input [13:0] WE_S ;
  output WE_R ;
  output WE_X ;
  output WE_C ;
  logic clamp_o;
  logic clamp_o_T ;
  logic clamp_o_R ;
  logic clamp_o_C ;
  logic clamp_o_X ;
  logic [13:0] clamp_o_S ;
  logic clk_w_iddq;
  logic clk_w_iddq_T ;
  logic clk_w_iddq_R ;
  logic clk_w_iddq_C ;
  logic clk_w_iddq_X ;
  logic [13:0] clk_w_iddq_S ;
  input clobber_array;
  input clobber_array_T ;
  input [13:0] clobber_array_S ;
  output clobber_array_R ;
  output clobber_array_X ;
  output clobber_array_C ;
  input clobber_flops;
  input clobber_flops_T ;
  input [13:0] clobber_flops_S ;
  output clobber_flops_R ;
  output clobber_flops_X ;
  output clobber_flops_C ;
  input clobber_x;
  input clobber_x_T ;
  input [13:0] clobber_x_S ;
  output clobber_x_R ;
  output clobber_x_X ;
  output clobber_x_C ;
  logic [7:0] dout;
  logic [7:0] dout_T ;
  logic [7:0] dout_R ;
  logic [7:0] dout_C ;
  logic [7:0] dout_X ;
  logic [13:0] dout_S ;
  logic [7:0] ra_lat;
  logic [7:0]  ra_lat_T ;
  logic [7:0]  ra_lat_PREV_VAL1 ;
  logic [7:0]  ra_lat_PREV_VAL2 ;
  logic [7:0]  ra_lat_R ;
  logic [7:0]  ra_lat_X ;
  logic [7:0]  ra_lat_C ;
  logic [13:0] ra_lat_S ;
  logic ra_lat_t_flag ;
  logic ra_lat_r_flag ;
  logic radclk;
  logic radclk_T ;
  logic radclk_R ;
  logic radclk_C ;
  logic radclk_X ;
  logic [13:0] radclk_S ;
  logic radclk_d0;
  logic radclk_d0_T ;
  logic radclk_d0_R ;
  logic radclk_d0_C ;
  logic radclk_d0_X ;
  logic [13:0] radclk_d0_S ;
  logic radclk_d1;
  logic radclk_d1_T ;
  logic radclk_d1_R ;
  logic radclk_d1_C ;
  logic radclk_d1_X ;
  logic [13:0] radclk_d1_S ;
  logic re_lat;
  logic  re_lat_T ;
  logic  re_lat_PREV_VAL1 ;
  logic  re_lat_PREV_VAL2 ;
  logic  re_lat_R ;
  logic  re_lat_X ;
  logic  re_lat_C ;
  logic [13:0] re_lat_S ;
  logic re_lat_t_flag ;
  logic re_lat_r_flag ;
  logic reclk;
  logic reclk_T ;
  logic reclk_R ;
  logic reclk_C ;
  logic reclk_X ;
  logic [13:0] reclk_S ;
  logic reclk_d0;
  logic reclk_d0_T ;
  logic reclk_d0_R ;
  logic reclk_d0_C ;
  logic reclk_d0_X ;
  logic [13:0] reclk_d0_S ;
  logic reclk_d1;
  logic reclk_d1_T ;
  logic reclk_d1_R ;
  logic reclk_d1_C ;
  logic reclk_d1_X ;
  logic [13:0] reclk_d1_S ;
  logic [7:0] wa_lat;
  logic [7:0]  wa_lat_T ;
  logic [7:0]  wa_lat_PREV_VAL1 ;
  logic [7:0]  wa_lat_PREV_VAL2 ;
  logic [7:0]  wa_lat_R ;
  logic [7:0]  wa_lat_X ;
  logic [7:0]  wa_lat_C ;
  logic [13:0] wa_lat_S ;
  logic wa_lat_t_flag ;
  logic wa_lat_r_flag ;
  logic wadclk;
  logic wadclk_T ;
  logic wadclk_R ;
  logic wadclk_C ;
  logic wadclk_X ;
  logic [13:0] wadclk_S ;
  logic wadclk_d0;
  logic wadclk_d0_T ;
  logic wadclk_d0_R ;
  logic wadclk_d0_C ;
  logic wadclk_d0_X ;
  logic [13:0] wadclk_d0_S ;
  logic wadclk_d1;
  logic wadclk_d1_T ;
  logic wadclk_d1_R ;
  logic wadclk_d1_C ;
  logic wadclk_d1_X ;
  logic [13:0] wadclk_d1_S ;
  logic wadclk_d2;
  logic wadclk_d2_T ;
  logic wadclk_d2_R ;
  logic wadclk_d2_C ;
  logic wadclk_d2_X ;
  logic [13:0] wadclk_d2_S ;
  logic wadclk_d3;
  logic wadclk_d3_T ;
  logic wadclk_d3_R ;
  logic wadclk_d3_C ;
  logic wadclk_d3_X ;
  logic [13:0] wadclk_d3_S ;
  logic [7:0] wd_lat;
  logic [7:0]  wd_lat_T ;
  logic [7:0]  wd_lat_PREV_VAL1 ;
  logic [7:0]  wd_lat_PREV_VAL2 ;
  logic [7:0]  wd_lat_R ;
  logic [7:0]  wd_lat_X ;
  logic [7:0]  wd_lat_C ;
  logic [13:0] wd_lat_S ;
  logic wd_lat_t_flag ;
  logic wd_lat_r_flag ;
  logic wdclk;
  logic wdclk_T ;
  logic wdclk_R ;
  logic wdclk_C ;
  logic wdclk_X ;
  logic [13:0] wdclk_S ;
  logic wdclk_d0;
  logic wdclk_d0_T ;
  logic wdclk_d0_R ;
  logic wdclk_d0_C ;
  logic wdclk_d0_X ;
  logic [13:0] wdclk_d0_S ;
  logic wdclk_d1;
  logic wdclk_d1_T ;
  logic wdclk_d1_R ;
  logic wdclk_d1_C ;
  logic wdclk_d1_X ;
  logic [13:0] wdclk_d1_S ;
  logic wdclk_d2;
  logic wdclk_d2_T ;
  logic wdclk_d2_R ;
  logic wdclk_d2_C ;
  logic wdclk_d2_X ;
  logic [13:0] wdclk_d2_S ;
  logic wdclk_d3;
  logic wdclk_d3_T ;
  logic wdclk_d3_R ;
  logic wdclk_d3_C ;
  logic wdclk_d3_X ;
  logic [13:0] wdclk_d3_S ;
  logic we_lat;
  logic  we_lat_T ;
  logic  we_lat_PREV_VAL1 ;
  logic  we_lat_PREV_VAL2 ;
  logic  we_lat_R ;
  logic  we_lat_X ;
  logic  we_lat_C ;
  logic [13:0] we_lat_S ;
  logic we_lat_t_flag ;
  logic we_lat_r_flag ;
  logic weclk;
  logic weclk_T ;
  logic weclk_R ;
  logic weclk_C ;
  logic weclk_X ;
  logic [13:0] weclk_S ;
  logic weclk_d0;
  logic weclk_d0_T ;
  logic weclk_d0_R ;
  logic weclk_d0_C ;
  logic weclk_d0_X ;
  logic [13:0] weclk_d0_S ;
  logic weclk_d1;
  logic weclk_d1_T ;
  logic weclk_d1_R ;
  logic weclk_d1_C ;
  logic weclk_d1_X ;
  logic [13:0] weclk_d1_S ;
  logic weclk_d2;
  logic weclk_d2_T ;
  logic weclk_d2_R ;
  logic weclk_d2_C ;
  logic weclk_d2_X ;
  logic [13:0] weclk_d2_S ;
  assign _00_ = CLK_W & _13_;
  assign _00__S = 0 ;
  logic [0:0] CLK_W_C0 ;
  logic [0:0] CLK_W_R0 ;
  logic [0:0] CLK_W_X0 ;
  logic [0:0] _13__C0 ;
  logic [0:0] _13__R0 ;
  logic [0:0] _13__X0 ;
  assign _00__T = CLK_W_T | _13__T ;
  assign CLK_W_C0 = _00__C ;
  assign CLK_W_X0 = _00__X ;
  assign _13__C0 = _00__C ;
  assign _13__X0 = _00__X ;
  assign CLK_W_R0 = ( _00__R | _00__C & _13__T ) & { 1{ _13_ != 0 }} ;
  assign _13__R0 = ( _00__R | _00__C & CLK_W_T ) & { 1{ CLK_W != 0 }} ;
  assign clk_w_iddq = _00_ & _14_;
  assign clk_w_iddq_S = 0 ;
  logic [0:0] _00__C0 ;
  logic [0:0] _00__R0 ;
  logic [0:0] _00__X0 ;
  logic [0:0] _14__C0 ;
  logic [0:0] _14__R0 ;
  logic [0:0] _14__X0 ;
  assign clk_w_iddq_T = _00__T | _14__T ;
  assign _00__C0 = clk_w_iddq_C ;
  assign _00__X0 = clk_w_iddq_X ;
  assign _14__C0 = clk_w_iddq_C ;
  assign _14__X0 = clk_w_iddq_X ;
  assign _00__R0 = ( clk_w_iddq_R | clk_w_iddq_C & _14__T ) & { 1{ _14_ != 0 }} ;
  assign _14__R0 = ( clk_w_iddq_R | clk_w_iddq_C & _00__T ) & { 1{ _00_ != 0 }} ;
  assign _01_ = _08_ & _09_;
  assign _01__S = 0 ;
  logic [0:0] _08__C0 ;
  logic [0:0] _08__R0 ;
  logic [0:0] _08__X0 ;
  logic [0:0] _09__C0 ;
  logic [0:0] _09__R0 ;
  logic [0:0] _09__X0 ;
  assign _01__T = _08__T | _09__T ;
  assign _08__C0 = _01__C ;
  assign _08__X0 = _01__X ;
  assign _09__C0 = _01__C ;
  assign _09__X0 = _01__X ;
  assign _08__R0 = ( _01__R | _01__C & _09__T ) & { 1{ _09_ != 0 }} ;
  assign _09__R0 = ( _01__R | _01__C & _08__T ) & { 1{ _08_ != 0 }} ;
  assign wadclk = clk_w_iddq & we_lat;
  assign wadclk_S = 0 ;
  logic [0:0] clk_w_iddq_C0 ;
  logic [0:0] clk_w_iddq_R0 ;
  logic [0:0] clk_w_iddq_X0 ;
  logic [0:0] we_lat_C0 ;
  logic [0:0] we_lat_R0 ;
  logic [0:0] we_lat_X0 ;
  assign wadclk_T = clk_w_iddq_T | we_lat_T ;
  assign clk_w_iddq_C0 = wadclk_C ;
  assign clk_w_iddq_X0 = wadclk_X ;
  assign we_lat_C0 = wadclk_C ;
  assign we_lat_X0 = wadclk_X ;
  assign clk_w_iddq_R0 = ( wadclk_R | wadclk_C & we_lat_T ) & { 1{ we_lat != 0 }} ;
  assign we_lat_R0 = ( wadclk_R | wadclk_C & clk_w_iddq_T ) & { 1{ clk_w_iddq != 0 }} ;
  assign _02_ = wadclk & _15_;
  assign _02__S = 0 ;
  logic [0:0] wadclk_C0 ;
  logic [0:0] wadclk_R0 ;
  logic [0:0] wadclk_X0 ;
  logic [0:0] _15__C0 ;
  logic [0:0] _15__R0 ;
  logic [0:0] _15__X0 ;
  assign _02__T = wadclk_T | _15__T ;
  assign wadclk_C0 = _02__C ;
  assign wadclk_X0 = _02__X ;
  assign _15__C0 = _02__C ;
  assign _15__X0 = _02__X ;
  assign wadclk_R0 = ( _02__R | _02__C & _15__T ) & { 1{ _15_ != 0 }} ;
  assign _15__R0 = ( _02__R | _02__C & wadclk_T ) & { 1{ wadclk != 0 }} ;
  assign weclk = _02_ & _16_;
  assign weclk_S = 0 ;
  logic [0:0] _02__C0 ;
  logic [0:0] _02__R0 ;
  logic [0:0] _02__X0 ;
  logic [0:0] _16__C0 ;
  logic [0:0] _16__R0 ;
  logic [0:0] _16__X0 ;
  assign weclk_T = _02__T | _16__T ;
  assign _02__C0 = weclk_C ;
  assign _02__X0 = weclk_X ;
  assign _16__C0 = weclk_C ;
  assign _16__X0 = weclk_X ;
  assign _02__R0 = ( weclk_R | weclk_C & _16__T ) & { 1{ _16_ != 0 }} ;
  assign _16__R0 = ( weclk_R | weclk_C & _02__T ) & { 1{ _02_ != 0 }} ;
  assign _03_ = _10_ & _09_;
  assign _03__S = 0 ;
  logic [0:0] _10__C0 ;
  logic [0:0] _10__R0 ;
  logic [0:0] _10__X0 ;
  logic [0:0] _09__C1 ;
  logic [0:0] _09__R1 ;
  logic [0:0] _09__X1 ;
  assign _03__T = _10__T | _09__T ;
  assign _10__C0 = _03__C ;
  assign _10__X0 = _03__X ;
  assign _09__C1 = _03__C ;
  assign _09__X1 = _03__X ;
  assign _10__R0 = ( _03__R | _03__C & _09__T ) & { 1{ _09_ != 0 }} ;
  assign _09__R1 = ( _03__R | _03__C & _10__T ) & { 1{ _10_ != 0 }} ;
  assign _04_ = _11_ & _09_;
  assign _04__S = 0 ;
  logic [0:0] _11__C0 ;
  logic [0:0] _11__R0 ;
  logic [0:0] _11__X0 ;
  logic [0:0] _09__C2 ;
  logic [0:0] _09__R2 ;
  logic [0:0] _09__X2 ;
  assign _04__T = _11__T | _09__T ;
  assign _11__C0 = _04__C ;
  assign _11__X0 = _04__X ;
  assign _09__C2 = _04__C ;
  assign _09__X2 = _04__X ;
  assign _11__R0 = ( _04__R | _04__C & _09__T ) & { 1{ _09_ != 0 }} ;
  assign _09__R2 = ( _04__R | _04__C & _11__T ) & { 1{ _11_ != 0 }} ;
  assign _05_ = CLK_R & _13_;
  assign _05__S = 0 ;
  logic [0:0] CLK_R_C0 ;
  logic [0:0] CLK_R_R0 ;
  logic [0:0] CLK_R_X0 ;
  logic [0:0] _13__C1 ;
  logic [0:0] _13__R1 ;
  logic [0:0] _13__X1 ;
  assign _05__T = CLK_R_T | _13__T ;
  assign CLK_R_C0 = _05__C ;
  assign CLK_R_X0 = _05__X ;
  assign _13__C1 = _05__C ;
  assign _13__X1 = _05__X ;
  assign CLK_R_R0 = ( _05__R | _05__C & _13__T ) & { 1{ _13_ != 0 }} ;
  assign _13__R1 = ( _05__R | _05__C & CLK_R_T ) & { 1{ CLK_R != 0 }} ;
  assign _06_ = _05_ & re_lat;
  assign _06__S = 0 ;
  logic [0:0] _05__C0 ;
  logic [0:0] _05__R0 ;
  logic [0:0] _05__X0 ;
  logic [0:0] re_lat_C0 ;
  logic [0:0] re_lat_R0 ;
  logic [0:0] re_lat_X0 ;
  assign _06__T = _05__T | re_lat_T ;
  assign _05__C0 = _06__C ;
  assign _05__X0 = _06__X ;
  assign re_lat_C0 = _06__C ;
  assign re_lat_X0 = _06__X ;
  assign _05__R0 = ( _06__R | _06__C & re_lat_T ) & { 1{ re_lat != 0 }} ;
  assign re_lat_R0 = ( _06__R | _06__C & _05__T ) & { 1{ _05_ != 0 }} ;
  assign radclk = _06_ & _14_;
  assign radclk_S = 0 ;
  logic [0:0] _06__C0 ;
  logic [0:0] _06__R0 ;
  logic [0:0] _06__X0 ;
  logic [0:0] _14__C1 ;
  logic [0:0] _14__R1 ;
  logic [0:0] _14__X1 ;
  assign radclk_T = _06__T | _14__T ;
  assign _06__C0 = radclk_C ;
  assign _06__X0 = radclk_X ;
  assign _14__C1 = radclk_C ;
  assign _14__X1 = radclk_X ;
  assign _06__R0 = ( radclk_R | radclk_C & _14__T ) & { 1{ _14_ != 0 }} ;
  assign _14__R1 = ( radclk_R | radclk_C & _06__T ) & { 1{ _06_ != 0 }} ;
  assign _07_ = _12_ & _09_;
  assign _07__S = 0 ;
  logic [0:0] _12__C0 ;
  logic [0:0] _12__R0 ;
  logic [0:0] _12__X0 ;
  logic [0:0] _09__C3 ;
  logic [0:0] _09__R3 ;
  logic [0:0] _09__X3 ;
  assign _07__T = _12__T | _09__T ;
  assign _12__C0 = _07__C ;
  assign _12__X0 = _07__X ;
  assign _09__C3 = _07__C ;
  assign _09__X3 = _07__X ;
  assign _12__R0 = ( _07__R | _07__C & _09__T ) & { 1{ _09_ != 0 }} ;
  assign _09__R3 = ( _07__R | _07__C & _12__T ) & { 1{ _12_ != 0 }} ;
  always @*
  logic [7:0] RA_R0 ;
  logic [7:0] RA_X0 ;
  logic [7:0] RA_C0 ;
  always @* begin
    ra_lat_T = 0 ;
    RA_R0 = 0 ;
    RA_X0 = 0 ;
    RA_C0 = 0 ;
    if (_07_) begin
      ra_lat = RA;
      ra_lat_T = RA_T ;
      RA_R0 = ra_lat_R ;
      RA_X0 = ra_lat_X ;
    end
  end
  always @*
  logic [0:0] RE_R0 ;
  logic [0:0] RE_X0 ;
  logic [0:0] RE_C0 ;
  always @* begin
    re_lat_T = 0 ;
    RE_R0 = 0 ;
    RE_X0 = 0 ;
    RE_C0 = 0 ;
    if (_04_) begin
      re_lat = RE;
      re_lat_T = RE_T ;
      RE_R0 = re_lat_R ;
      RE_X0 = re_lat_X ;
    end
  end
  always @*
  logic [7:0] WD_R0 ;
  logic [7:0] WD_X0 ;
  logic [7:0] WD_C0 ;
  always @* begin
    wd_lat_T = 0 ;
    WD_R0 = 0 ;
    WD_X0 = 0 ;
    WD_C0 = 0 ;
    if (_03_) begin
      wd_lat = WD;
      wd_lat_T = WD_T ;
      WD_R0 = wd_lat_R ;
      WD_X0 = wd_lat_X ;
    end
  end
  always @*
  logic [7:0] WA_R0 ;
  logic [7:0] WA_X0 ;
  logic [7:0] WA_C0 ;
  always @* begin
    wa_lat_T = 0 ;
    WA_R0 = 0 ;
    WA_X0 = 0 ;
    WA_C0 = 0 ;
    if (_03_) begin
      wa_lat = WA;
      wa_lat_T = WA_T ;
      WA_R0 = wa_lat_R ;
      WA_X0 = wa_lat_X ;
    end
  end
  always @*
  logic [0:0] WE_R0 ;
  logic [0:0] WE_X0 ;
  logic [0:0] WE_C0 ;
  always @* begin
    we_lat_T = 0 ;
    WE_R0 = 0 ;
    WE_X0 = 0 ;
    WE_C0 = 0 ;
    if (_01_) begin
      we_lat = WE;
      we_lat_T = WE_T ;
      WE_R0 = we_lat_R ;
      WE_X0 = we_lat_X ;
    end
  end
  assign _08_ = ! clk_w_iddq;
  logic [0:0] clk_w_iddq_C1 ;
  logic [0:0] clk_w_iddq_R1 ;
  logic [0:0] clk_w_iddq_X1 ;
  assign _08__T = | clk_w_iddq_T ;
  assign clk_w_iddq_C1 = { 1{ _08__C }} ;
  assign clk_w_iddq_X1 = { 1{ _08__X }} ;
  assign clk_w_iddq_R1 = { 1{ _08__R }} ;
  assign _08__S = 0 ;
  assign _09_ = ! clobber_flops;
  logic [0:0] clobber_flops_C0 ;
  logic [0:0] clobber_flops_R0 ;
  logic [0:0] clobber_flops_X0 ;
  assign _09__T = | clobber_flops_T ;
  assign clobber_flops_C0 = { 1{ _09__C }} ;
  assign clobber_flops_X0 = { 1{ _09__X }} ;
  assign clobber_flops_R0 = { 1{ _09__R }} ;
  assign _09__S = 0 ;
  assign _10_ = ! wadclk;
  logic [0:0] wadclk_C1 ;
  logic [0:0] wadclk_R1 ;
  logic [0:0] wadclk_X1 ;
  assign _10__T = | wadclk_T ;
  assign wadclk_C1 = { 1{ _10__C }} ;
  assign wadclk_X1 = { 1{ _10__X }} ;
  assign wadclk_R1 = { 1{ _10__R }} ;
  assign _10__S = 0 ;
  assign _11_ = ! CLK_R;
  logic [0:0] CLK_R_C1 ;
  logic [0:0] CLK_R_R1 ;
  logic [0:0] CLK_R_X1 ;
  assign _11__T = | CLK_R_T ;
  assign CLK_R_C1 = { 1{ _11__C }} ;
  assign CLK_R_X1 = { 1{ _11__X }} ;
  assign CLK_R_R1 = { 1{ _11__R }} ;
  assign _11__S = 0 ;
  assign _12_ = ! radclk;
  logic [0:0] radclk_C0 ;
  logic [0:0] radclk_R0 ;
  logic [0:0] radclk_X0 ;
  assign _12__T = | radclk_T ;
  assign radclk_C0 = { 1{ _12__C }} ;
  assign radclk_X0 = { 1{ _12__X }} ;
  assign radclk_R0 = { 1{ _12__R }} ;
  assign _12__S = 0 ;
  assign _13_ = ~ IDDQ;
  logic [0:0] IDDQ_C0 ;
  logic [0:0] IDDQ_R0 ;
  logic [0:0] IDDQ_X0 ;
  assign _13__T = IDDQ_T ;
  assign IDDQ_C0 = _13__C ;
  assign IDDQ_R0 = _13__R ;
  assign IDDQ_X0 = _13__X ;
  assign _13__S = 0 ;
  assign _14_ = ~ clamp_o;
  logic [0:0] clamp_o_C0 ;
  logic [0:0] clamp_o_R0 ;
  logic [0:0] clamp_o_X0 ;
  assign _14__T = clamp_o_T ;
  assign clamp_o_C0 = _14__C ;
  assign clamp_o_R0 = _14__R ;
  assign clamp_o_X0 = _14__X ;
  assign _14__S = 0 ;
  assign _15_ = ~ clobber_flops;
  logic [0:0] clobber_flops_C1 ;
  logic [0:0] clobber_flops_R1 ;
  logic [0:0] clobber_flops_X1 ;
  assign _15__T = clobber_flops_T ;
  assign clobber_flops_C1 = _15__C ;
  assign clobber_flops_R1 = _15__R ;
  assign clobber_flops_X1 = _15__X ;
  assign _15__S = 0 ;
  assign _16_ = ~ clobber_array;
  logic [0:0] clobber_array_C0 ;
  logic [0:0] clobber_array_R0 ;
  logic [0:0] clobber_array_X0 ;
  assign _16__T = clobber_array_T ;
  assign clobber_array_C0 = _16__C ;
  assign clobber_array_R0 = _16__R ;
  assign clobber_array_X0 = _16__X ;
  assign _16__S = 0 ;
  assign clamp_o = SLEEP_EN[7] | RET_EN;
  assign clamp_o_S = 0 ;
  logic [7:0] SLEEP_EN_C0 ;
  logic [7:0] SLEEP_EN_R0 ;
  logic [7:0] SLEEP_EN_X0 ;
  logic [0:0] RET_EN_C0 ;
  logic [0:0] RET_EN_R0 ;
  logic [0:0] RET_EN_X0 ;
  assign clamp_o_T = SLEEP_EN_T [7] | RET_EN_T ;
  assign SLEEP_EN_C0 [7] = clamp_o_C ;
  assign SLEEP_EN_X0 [7] = clamp_o_X ;
  assign RET_EN_C0 = clamp_o_C ;
  assign RET_EN_X0 = clamp_o_X ;
  assign SLEEP_EN_R0 [7] = ( clamp_o_R | clamp_o_C & RET_EN_T ) & { 1{ RET_EN != 1'b1 }} ;
  assign RET_EN_R0 = ( clamp_o_R | clamp_o_C & SLEEP_EN_T [7] ) & { 1{ SLEEP_EN[7] != 1'b1 }} ;
  assign RD = clamp_o ? 8'b00000000 : dout;
  logic [0:0] clamp_o_C1 ;
  logic [0:0] clamp_o_R1 ;
  logic [0:0] clamp_o_X1 ;
  assign clamp_o_C1 = | RD_C ;
  assign clamp_o_X1 = | RD_X ;
  logic [7:0] dout_C0 ;
  logic [7:0] dout_R0 ;
  logic [7:0] dout_X0 ;
  assign dout_C0 = { 8{ !clamp_o }};
  assign dout_R0 = { 8{ !clamp_o }} & ( RD_R | ( { 8{ clamp_o_T  }} & RD_C ));
  assign dout_X0 = { 8{ !clamp_o }} & RD_X ;
  assign RD_T = clamp_o ? { 8{ | clamp_o_T  }} : ( { 8{ | clamp_o_T  }} | dout_T );
  assign RD_S = clamp_o ? clamp_o_S : dout_S ;
  assign clamp_o_R1 = ( | (RD_R | ( { 8{ !clamp_o }} & dout_T & RD_C ))) && 8'b00000000 != dout ;
  logic [0:0] clamp_o_R2 ;
  logic [0:0] clamp_o_X2 ;
  logic [0:0] clamp_o_C2 ;
  logic [7:0] ra_lat_R0 ;
  logic [7:0] ra_lat_X0 ;
  logic [7:0] ra_lat_C0 ;
  logic [0:0] radclk_R1 ;
  logic [0:0] radclk_X1 ;
  logic [0:0] radclk_C1 ;
  logic [7:0] wa_lat_R0 ;
  logic [7:0] wa_lat_X0 ;
  logic [7:0] wa_lat_C0 ;
  logic [0:0] weclk_R0 ;
  logic [0:0] weclk_X0 ;
  logic [0:0] weclk_C0 ;
  logic [7:0] wd_lat_R0 ;
  logic [7:0] wd_lat_X0 ;
  logic [7:0] wd_lat_C0 ;
// module: \$paramod\vram_RAMDP_256X8_GL_M2_E2\words=256\bits=8\addrs=8
  \$paramod\vram_RAMDP_256X8_GL_M2_E2\words=256\bits=8\addrs=8 io (
    .clamp_o_T (  clamp_o_T  ),
    .clamp_o_R (  clamp_o_R2  ),
    .clamp_o_X (  clamp_o_X2  ),
    .clamp_o_C (  clamp_o_C2  ),
    .clamp_o_S (  clamp_o_S  ),
    .r0_addr_T (  ra_lat_T  ),
    .r0_addr_R (  ra_lat_R0  ),
    .r0_addr_X (  ra_lat_X0  ),
    .r0_addr_C (  ra_lat_C0  ),
    .r0_addr_S (  ra_lat_S  ),
    .r0_clk_T (  radclk_T  ),
    .r0_clk_R (  radclk_R1  ),
    .r0_clk_X (  radclk_X1  ),
    .r0_clk_C (  radclk_C1  ),
    .r0_clk_S (  radclk_S  ),
    .w0_addr_T (  wa_lat_T  ),
    .w0_addr_R (  wa_lat_R0  ),
    .w0_addr_X (  wa_lat_X0  ),
    .w0_addr_C (  wa_lat_C0  ),
    .w0_addr_S (  wa_lat_S  ),
    .w0_bwe_T (  8'h0  ),
    .w0_bwe_R (  nouse_zy0  ),
    .w0_bwe_X (  nouse_zy1  ),
    .w0_bwe_C (  nouse_zy2  ),
    .w0_bwe_S ( 8'h0 ),
    .w0_clk_T (  weclk_T  ),
    .w0_clk_R (  weclk_R0  ),
    .w0_clk_X (  weclk_X0  ),
    .w0_clk_C (  weclk_C0  ),
    .w0_clk_S (  weclk_S  ),
    .w0_din_T (  wd_lat_T  ),
    .w0_din_R (  wd_lat_R0  ),
    .w0_din_X (  wd_lat_X0  ),
    .w0_din_C (  wd_lat_C0  ),
    .w0_din_S (  wd_lat_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .r0_dout_T (  dout_T  ),
    .r0_dout_R0 (  dout_R  ),
    .r0_dout_X0 (  dout_X  ),
    .r0_dout_C0 (  dout_C  ),
    .r0_dout_S ( dout_S ),
    .w0_din ( wd_lat ),
    .w0_clk ( weclk ),
    .w0_bwe ( 8'b11111111 ),
    .r0_addr ( ra_lat ),
    .clamp_o ( clamp_o ),
    .r0_clk ( radclk ),
    .r0_dout ( dout ),
    .w0_addr ( wa_lat )
  );
  logic [8-1:0] nouse_zy0 ;
  logic [8-1:0] nouse_zy1 ;
  logic [8-1:0] nouse_zy2 ;
  assign radclk_d0 = radclk;
  logic [0:0] radclk_C2 ;
  logic [0:0] radclk_R2 ;
  logic [0:0] radclk_X2 ;
  assign radclk_d0_T = radclk_T ;
  assign radclk_C2 = radclk_d0_C ;
  assign radclk_R2 = radclk_d0_R ;
  assign radclk_X2 = radclk_d0_X ;
  assign radclk_d0_S = radclk_S ;
  assign radclk_d1 = radclk;
  logic [0:0] radclk_C3 ;
  logic [0:0] radclk_R3 ;
  logic [0:0] radclk_X3 ;
  assign radclk_d1_T = radclk_T ;
  assign radclk_C3 = radclk_d1_C ;
  assign radclk_R3 = radclk_d1_R ;
  assign radclk_X3 = radclk_d1_X ;
  assign radclk_d1_S = radclk_S ;
  assign reclk = radclk;
  logic [0:0] radclk_C4 ;
  logic [0:0] radclk_R4 ;
  logic [0:0] radclk_X4 ;
  assign reclk_T = radclk_T ;
  assign radclk_C4 = reclk_C ;
  assign radclk_R4 = reclk_R ;
  assign radclk_X4 = reclk_X ;
  assign reclk_S = radclk_S ;
  assign reclk_d0 = radclk;
  logic [0:0] radclk_C5 ;
  logic [0:0] radclk_R5 ;
  logic [0:0] radclk_X5 ;
  assign reclk_d0_T = radclk_T ;
  assign radclk_C5 = reclk_d0_C ;
  assign radclk_R5 = reclk_d0_R ;
  assign radclk_X5 = reclk_d0_X ;
  assign reclk_d0_S = radclk_S ;
  assign reclk_d1 = radclk;
  logic [0:0] radclk_C6 ;
  logic [0:0] radclk_R6 ;
  logic [0:0] radclk_X6 ;
  assign reclk_d1_T = radclk_T ;
  assign radclk_C6 = reclk_d1_C ;
  assign radclk_R6 = reclk_d1_R ;
  assign radclk_X6 = reclk_d1_X ;
  assign reclk_d1_S = radclk_S ;
  assign wadclk_d0 = wadclk;
  logic [0:0] wadclk_C2 ;
  logic [0:0] wadclk_R2 ;
  logic [0:0] wadclk_X2 ;
  assign wadclk_d0_T = wadclk_T ;
  assign wadclk_C2 = wadclk_d0_C ;
  assign wadclk_R2 = wadclk_d0_R ;
  assign wadclk_X2 = wadclk_d0_X ;
  assign wadclk_d0_S = wadclk_S ;
  assign wadclk_d1 = wadclk;
  logic [0:0] wadclk_C3 ;
  logic [0:0] wadclk_R3 ;
  logic [0:0] wadclk_X3 ;
  assign wadclk_d1_T = wadclk_T ;
  assign wadclk_C3 = wadclk_d1_C ;
  assign wadclk_R3 = wadclk_d1_R ;
  assign wadclk_X3 = wadclk_d1_X ;
  assign wadclk_d1_S = wadclk_S ;
  assign wadclk_d2 = wadclk;
  logic [0:0] wadclk_C4 ;
  logic [0:0] wadclk_R4 ;
  logic [0:0] wadclk_X4 ;
  assign wadclk_d2_T = wadclk_T ;
  assign wadclk_C4 = wadclk_d2_C ;
  assign wadclk_R4 = wadclk_d2_R ;
  assign wadclk_X4 = wadclk_d2_X ;
  assign wadclk_d2_S = wadclk_S ;
  assign wadclk_d3 = wadclk;
  logic [0:0] wadclk_C5 ;
  logic [0:0] wadclk_R5 ;
  logic [0:0] wadclk_X5 ;
  assign wadclk_d3_T = wadclk_T ;
  assign wadclk_C5 = wadclk_d3_C ;
  assign wadclk_R5 = wadclk_d3_R ;
  assign wadclk_X5 = wadclk_d3_X ;
  assign wadclk_d3_S = wadclk_S ;
  assign wdclk = wadclk;
  logic [0:0] wadclk_C6 ;
  logic [0:0] wadclk_R6 ;
  logic [0:0] wadclk_X6 ;
  assign wdclk_T = wadclk_T ;
  assign wadclk_C6 = wdclk_C ;
  assign wadclk_R6 = wdclk_R ;
  assign wadclk_X6 = wdclk_X ;
  assign wdclk_S = wadclk_S ;
  assign wdclk_d0 = wadclk;
  logic [0:0] wadclk_C7 ;
  logic [0:0] wadclk_R7 ;
  logic [0:0] wadclk_X7 ;
  assign wdclk_d0_T = wadclk_T ;
  assign wadclk_C7 = wdclk_d0_C ;
  assign wadclk_R7 = wdclk_d0_R ;
  assign wadclk_X7 = wdclk_d0_X ;
  assign wdclk_d0_S = wadclk_S ;
  assign wdclk_d1 = wadclk;
  logic [0:0] wadclk_C8 ;
  logic [0:0] wadclk_R8 ;
  logic [0:0] wadclk_X8 ;
  assign wdclk_d1_T = wadclk_T ;
  assign wadclk_C8 = wdclk_d1_C ;
  assign wadclk_R8 = wdclk_d1_R ;
  assign wadclk_X8 = wdclk_d1_X ;
  assign wdclk_d1_S = wadclk_S ;
  assign wdclk_d2 = wadclk;
  logic [0:0] wadclk_C9 ;
  logic [0:0] wadclk_R9 ;
  logic [0:0] wadclk_X9 ;
  assign wdclk_d2_T = wadclk_T ;
  assign wadclk_C9 = wdclk_d2_C ;
  assign wadclk_R9 = wdclk_d2_R ;
  assign wadclk_X9 = wdclk_d2_X ;
  assign wdclk_d2_S = wadclk_S ;
  assign wdclk_d3 = wadclk;
  logic [0:0] wadclk_C10 ;
  logic [0:0] wadclk_R10 ;
  logic [0:0] wadclk_X10 ;
  assign wdclk_d3_T = wadclk_T ;
  assign wadclk_C10 = wdclk_d3_C ;
  assign wadclk_R10 = wdclk_d3_R ;
  assign wadclk_X10 = wdclk_d3_X ;
  assign wdclk_d3_S = wadclk_S ;
  assign weclk_d0 = weclk;
  logic [0:0] weclk_C1 ;
  logic [0:0] weclk_R1 ;
  logic [0:0] weclk_X1 ;
  assign weclk_d0_T = weclk_T ;
  assign weclk_C1 = weclk_d0_C ;
  assign weclk_R1 = weclk_d0_R ;
  assign weclk_X1 = weclk_d0_X ;
  assign weclk_d0_S = weclk_S ;
  assign weclk_d1 = weclk;
  logic [0:0] weclk_C2 ;
  logic [0:0] weclk_R2 ;
  logic [0:0] weclk_X2 ;
  assign weclk_d1_T = weclk_T ;
  assign weclk_C2 = weclk_d1_C ;
  assign weclk_R2 = weclk_d1_R ;
  assign weclk_X2 = weclk_d1_X ;
  assign weclk_d1_S = weclk_S ;
  assign weclk_d2 = weclk;
  logic [0:0] weclk_C3 ;
  logic [0:0] weclk_R3 ;
  logic [0:0] weclk_X3 ;
  assign weclk_d2_T = weclk_T ;
  assign weclk_C3 = weclk_d2_C ;
  assign weclk_R3 = weclk_d2_R ;
  assign weclk_X3 = weclk_d2_X ;
  assign weclk_d2_S = weclk_S ;
  assign wd_lat_C = ( wd_lat_C0 );
  assign weclk_C = ( weclk_C0 ) | ( weclk_C1 ) | ( weclk_C2 ) | ( weclk_C3 );
  assign wa_lat_C = ( wa_lat_C0 );
  assign ra_lat_C = ( ra_lat_C0 );
  assign dout_C = ( dout_C0 );
  assign RET_EN_C = ( RET_EN_C0 );
  assign SLEEP_EN_C = ( SLEEP_EN_C0 );
  assign clobber_array_C = ( clobber_array_C0 );
  assign clamp_o_C = ( clamp_o_C0 ) | ( clamp_o_C1 ) | ( clamp_o_C2 );
  assign IDDQ_C = ( IDDQ_C0 );
  assign radclk_C = ( radclk_C0 ) | ( radclk_C1 ) | ( radclk_C2 ) | ( radclk_C3 ) | ( radclk_C4 ) | ( radclk_C5 ) | ( radclk_C6 );
  assign clobber_flops_C = ( clobber_flops_C0 ) | ( clobber_flops_C1 );
  assign WE_C = ( WE_C0 );
  assign _01__C = ( _01__C0 );
  assign WA_C = ( WA_C0 );
  assign WD_C = ( WD_C0 );
  assign _03__C = ( _03__C0 ) | ( _03__C1 );
  assign RE_C = ( RE_C0 );
  assign _04__C = ( _04__C0 );
  assign RA_C = ( RA_C0 );
  assign _07__C = ( _07__C0 );
  assign _12__C = ( _12__C0 );
  assign _06__C = ( _06__C0 );
  assign re_lat_C = ( re_lat_C0 );
  assign _05__C = ( _05__C0 );
  assign CLK_R_C = ( CLK_R_C0 ) | ( CLK_R_C1 );
  assign _11__C = ( _11__C0 );
  assign _10__C = ( _10__C0 );
  assign _16__C = ( _16__C0 );
  assign _02__C = ( _02__C0 );
  assign _15__C = ( _15__C0 );
  assign wadclk_C = ( wadclk_C0 ) | ( wadclk_C1 ) | ( wadclk_C2 ) | ( wadclk_C3 ) | ( wadclk_C4 ) | ( wadclk_C5 ) | ( wadclk_C6 ) | ( wadclk_C7 ) | ( wadclk_C8 ) | ( wadclk_C9 ) | ( wadclk_C10 );
  assign we_lat_C = ( we_lat_C0 );
  assign clk_w_iddq_C = ( clk_w_iddq_C0 ) | ( clk_w_iddq_C1 );
  assign _09__C = ( _09__C0 ) | ( _09__C1 ) | ( _09__C2 ) | ( _09__C3 );
  assign _08__C = ( _08__C0 );
  assign _14__C = ( _14__C0 ) | ( _14__C1 );
  assign _00__C = ( _00__C0 );
  assign _13__C = ( _13__C0 ) | ( _13__C1 );
  assign CLK_W_C = ( CLK_W_C0 );
  assign RD_C = ( RD_C0 );
  assign wd_lat_X = ( wd_lat_X0 );
  assign weclk_X = ( weclk_X0 ) | ( weclk_X1 ) | ( weclk_X2 ) | ( weclk_X3 );
  assign wa_lat_X = ( wa_lat_X0 );
  assign ra_lat_X = ( ra_lat_X0 );
  assign dout_X = ( dout_X0 );
  assign RET_EN_X = ( RET_EN_X0 );
  assign SLEEP_EN_X = ( SLEEP_EN_X0 );
  assign clobber_array_X = ( clobber_array_X0 );
  assign clamp_o_X = ( clamp_o_X0 ) | ( clamp_o_X1 ) | ( clamp_o_X2 );
  assign IDDQ_X = ( IDDQ_X0 );
  assign radclk_X = ( radclk_X0 ) | ( radclk_X1 ) | ( radclk_X2 ) | ( radclk_X3 ) | ( radclk_X4 ) | ( radclk_X5 ) | ( radclk_X6 );
  assign clobber_flops_X = ( clobber_flops_X0 ) | ( clobber_flops_X1 );
  assign WE_X = ( WE_X0 );
  assign _01__X = ( _01__X0 );
  assign WA_X = ( WA_X0 );
  assign WD_X = ( WD_X0 );
  assign _03__X = ( _03__X0 ) | ( _03__X1 );
  assign RE_X = ( RE_X0 );
  assign _04__X = ( _04__X0 );
  assign RA_X = ( RA_X0 );
  assign _07__X = ( _07__X0 );
  assign _12__X = ( _12__X0 );
  assign _06__X = ( _06__X0 );
  assign re_lat_X = ( re_lat_X0 );
  assign _05__X = ( _05__X0 );
  assign CLK_R_X = ( CLK_R_X0 ) | ( CLK_R_X1 );
  assign _11__X = ( _11__X0 );
  assign _10__X = ( _10__X0 );
  assign _16__X = ( _16__X0 );
  assign _02__X = ( _02__X0 );
  assign _15__X = ( _15__X0 );
  assign wadclk_X = ( wadclk_X0 ) | ( wadclk_X1 ) | ( wadclk_X2 ) | ( wadclk_X3 ) | ( wadclk_X4 ) | ( wadclk_X5 ) | ( wadclk_X6 ) | ( wadclk_X7 ) | ( wadclk_X8 ) | ( wadclk_X9 ) | ( wadclk_X10 );
  assign we_lat_X = ( we_lat_X0 );
  assign clk_w_iddq_X = ( clk_w_iddq_X0 ) | ( clk_w_iddq_X1 );
  assign _09__X = ( _09__X0 ) | ( _09__X1 ) | ( _09__X2 ) | ( _09__X3 );
  assign _08__X = ( _08__X0 );
  assign _14__X = ( _14__X0 ) | ( _14__X1 );
  assign _00__X = ( _00__X0 );
  assign _13__X = ( _13__X0 ) | ( _13__X1 );
  assign CLK_W_X = ( CLK_W_X0 );
  assign RD_X = ( RD_X0 );
  assign wd_lat_R = ( wd_lat_X0 & wd_lat_R0 );
  assign weclk_R = ( weclk_X0 & weclk_R0 ) | ( weclk_X1 & weclk_R1 ) | ( weclk_X2 & weclk_R2 ) | ( weclk_X3 & weclk_R3 );
  assign wa_lat_R = ( wa_lat_X0 & wa_lat_R0 );
  assign ra_lat_R = ( ra_lat_X0 & ra_lat_R0 );
  assign dout_R = ( dout_X0 & dout_R0 );
  assign RET_EN_R = ( RET_EN_X0 & RET_EN_R0 );
  assign SLEEP_EN_R = ( SLEEP_EN_X0 & SLEEP_EN_R0 );
  assign clobber_array_R = ( clobber_array_X0 & clobber_array_R0 );
  assign clamp_o_R = ( clamp_o_X0 & clamp_o_R0 ) | ( clamp_o_X1 & clamp_o_R1 ) | ( clamp_o_X2 & clamp_o_R2 );
  assign IDDQ_R = ( IDDQ_X0 & IDDQ_R0 );
  assign radclk_R = ( radclk_X0 & radclk_R0 ) | ( radclk_X1 & radclk_R1 ) | ( radclk_X2 & radclk_R2 ) | ( radclk_X3 & radclk_R3 ) | ( radclk_X4 & radclk_R4 ) | ( radclk_X5 & radclk_R5 ) | ( radclk_X6 & radclk_R6 );
  assign clobber_flops_R = ( clobber_flops_X0 & clobber_flops_R0 ) | ( clobber_flops_X1 & clobber_flops_R1 );
  assign WE_R = ( WE_X0 & WE_R0 );
  assign _01__R = ( _01__X0 & _01__R0 );
  assign WA_R = ( WA_X0 & WA_R0 );
  assign WD_R = ( WD_X0 & WD_R0 );
  assign _03__R = ( _03__X0 & _03__R0 ) | ( _03__X1 & _03__R1 );
  assign RE_R = ( RE_X0 & RE_R0 );
  assign _04__R = ( _04__X0 & _04__R0 );
  assign RA_R = ( RA_X0 & RA_R0 );
  assign _07__R = ( _07__X0 & _07__R0 );
  assign _12__R = ( _12__X0 & _12__R0 );
  assign _06__R = ( _06__X0 & _06__R0 );
  assign re_lat_R = ( re_lat_X0 & re_lat_R0 );
  assign _05__R = ( _05__X0 & _05__R0 );
  assign CLK_R_R = ( CLK_R_X0 & CLK_R_R0 ) | ( CLK_R_X1 & CLK_R_R1 );
  assign _11__R = ( _11__X0 & _11__R0 );
  assign _10__R = ( _10__X0 & _10__R0 );
  assign _16__R = ( _16__X0 & _16__R0 );
  assign _02__R = ( _02__X0 & _02__R0 );
  assign _15__R = ( _15__X0 & _15__R0 );
  assign wadclk_R = ( wadclk_X0 & wadclk_R0 ) | ( wadclk_X1 & wadclk_R1 ) | ( wadclk_X2 & wadclk_R2 ) | ( wadclk_X3 & wadclk_R3 ) | ( wadclk_X4 & wadclk_R4 ) | ( wadclk_X5 & wadclk_R5 ) | ( wadclk_X6 & wadclk_R6 ) | ( wadclk_X7 & wadclk_R7 ) | ( wadclk_X8 & wadclk_R8 ) | ( wadclk_X9 & wadclk_R9 ) | ( wadclk_X10 & wadclk_R10 );
  assign we_lat_R = ( we_lat_X0 & we_lat_R0 );
  assign clk_w_iddq_R = ( clk_w_iddq_X0 & clk_w_iddq_R0 ) | ( clk_w_iddq_X1 & clk_w_iddq_R1 );
  assign _09__R = ( _09__X0 & _09__R0 ) | ( _09__X1 & _09__R1 ) | ( _09__X2 & _09__R2 ) | ( _09__X3 & _09__R3 );
  assign _08__R = ( _08__X0 & _08__R0 );
  assign _14__R = ( _14__X0 & _14__R0 ) | ( _14__X1 & _14__R1 );
  assign _00__R = ( _00__X0 & _00__R0 );
  assign _13__R = ( _13__X0 & _13__R0 ) | ( _13__X1 & _13__R1 );
  assign CLK_W_R = ( CLK_W_X0 & CLK_W_R0 );
  assign RD_R = ( RD_X0 & RD_R0 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { radclk_d0_R , radclk_d0_C , radclk_d0_X , radclk_d1_R , radclk_d1_C , radclk_d1_X , reclk_R , reclk_C , reclk_X , reclk_d0_R , reclk_d0_C , reclk_d0_X , reclk_d1_R , reclk_d1_C , reclk_d1_X , wadclk_d0_R , wadclk_d0_C , wadclk_d0_X , wadclk_d1_R , wadclk_d1_C , wadclk_d1_X , wadclk_d2_R , wadclk_d2_C , wadclk_d2_X , wadclk_d3_R , wadclk_d3_C , wadclk_d3_X , wdclk_R , wdclk_C , wdclk_X , wdclk_d0_R , wdclk_d0_C , wdclk_d0_X , wdclk_d1_R , wdclk_d1_C , wdclk_d1_X , wdclk_d2_R , wdclk_d2_C , wdclk_d2_X , wdclk_d3_R , wdclk_d3_C , wdclk_d3_X , weclk_d0_R , weclk_d0_C , weclk_d0_X , weclk_d1_R , weclk_d1_C , weclk_d1_X , weclk_d2_R , weclk_d2_C , weclk_d2_X  } = 0;
 // ground taints for unused wire slices
  assign { SLEEP_EN_R0 [0], SLEEP_EN_R0 [1], SLEEP_EN_R0 [2], SLEEP_EN_R0 [3], SLEEP_EN_R0 [4], SLEEP_EN_R0 [5], SLEEP_EN_R0 [6] } = 0;
  assign { SLEEP_EN_X0 [0], SLEEP_EN_X0 [1], SLEEP_EN_X0 [2], SLEEP_EN_X0 [3], SLEEP_EN_X0 [4], SLEEP_EN_X0 [5], SLEEP_EN_X0 [6] } = 0;
  assign { SLEEP_EN_C0 [0], SLEEP_EN_C0 [1], SLEEP_EN_C0 [2], SLEEP_EN_C0 [3], SLEEP_EN_C0 [4], SLEEP_EN_C0 [5], SLEEP_EN_C0 [6] } = 0;
  assert property( ra_lat_r_flag == 0 || ra_lat_PREV_VAL1 == ra_lat_PREV_VAL2 );
  assert property( re_lat_r_flag == 0 || re_lat_PREV_VAL1 == re_lat_PREV_VAL2 );
  assert property( wa_lat_r_flag == 0 || wa_lat_PREV_VAL1 == wa_lat_PREV_VAL2 );
  assert property( wd_lat_r_flag == 0 || wd_lat_PREV_VAL1 == wd_lat_PREV_VAL2 );
  assert property( we_lat_r_flag == 0 || we_lat_PREV_VAL1 == we_lat_PREV_VAL2 );
endmodule
