  input [31:0] D;
  input [31:0] D_T ;
  input [13:0] D_S ;
  output [31:0] D_R ;
  output [31:0] D_X ;
  output [31:0] D_C ;
  output [31:0] Q;
  logic [31:0] Q ;
  output [31:0] Q_T ;
  logic [31:0] Q_T ;
  logic [31:0] Q_R ;
  logic [31:0] Q_C ;
  logic [31:0] Q_X ;
  logic [13:0] Q_S ;
  input [31:0] Q_R0 ;
  input [31:0] Q_C0 ;
  input [31:0] Q_X0 ;
  output [13:0] Q_S ;
  logic [31:0] Q_conn;
  logic [31:0] Q_conn_T ;
  logic [31:0] Q_conn_R ;
  logic [31:0] Q_conn_C ;
  logic [31:0] Q_conn_X ;
  logic [13:0] Q_conn_S ;
  input clk;
  input clk_T ;
  input [13:0] clk_S ;
  output clk_R ;
  output clk_X ;
  output clk_C ;
  logic clk_wire;
  logic clk_wire_T ;
  logic clk_wire_R ;
  logic clk_wire_C ;
  logic clk_wire_X ;
  logic [13:0] clk_wire_S ;
  logic [31:0] next_Q;
  logic [31:0] next_Q_T ;
  logic [31:0] next_Q_R ;
  logic [31:0] next_Q_C ;
  logic [31:0] next_Q_X ;
  logic [13:0] next_Q_S ;
  logic qualified_scanen_wire;
  logic qualified_scanen_wire_T ;
  logic qualified_scanen_wire_R ;
  logic qualified_scanen_wire_C ;
  logic qualified_scanen_wire_X ;
  logic [13:0] qualified_scanen_wire_S ;
  logic qualified_scanin_wire;
  logic qualified_scanin_wire_T ;
  logic qualified_scanin_wire_R ;
  logic qualified_scanin_wire_C ;
  logic qualified_scanin_wire_X ;
  logic [13:0] qualified_scanin_wire_S ;
  input reset_;
  input reset__T ;
  input [13:0] reset__S ;
  output reset__R ;
  output reset__X ;
  output reset__C ;
  logic scanen_wire;
  logic scanen_wire_T ;
  logic scanen_wire_R ;
  logic scanen_wire_C ;
  logic scanen_wire_X ;
  logic [13:0] scanen_wire_S ;
  input scanin;
  input scanin_T ;
  input [13:0] scanin_S ;
  output scanin_R ;
  output scanin_X ;
  output scanin_C ;
  logic scanin_wire;
  logic scanin_wire_T ;
  logic scanin_wire_R ;
  logic scanin_wire_C ;
  logic scanin_wire_X ;
  logic [13:0] scanin_wire_S ;
  output scanout;
  logic scanout ;
  output scanout_T ;
  logic scanout_T ;
  logic scanout_R ;
  logic scanout_C ;
  logic scanout_X ;
  logic [13:0] scanout_S ;
  input scanout_R0 ;
  input scanout_C0 ;
  input scanout_X0 ;
  output [13:0] scanout_S ;
  logic scanout_wire;
  logic scanout_wire_T ;
  logic scanout_wire_R ;
  logic scanout_wire_C ;
  logic scanout_wire_X ;
  logic [13:0] scanout_wire_S ;
  input sel;
  input sel_T ;
  input [13:0] sel_S ;
  output sel_R ;
  output sel_X ;
  output sel_C ;
  input shiftDR;
  input shiftDR_T ;
  input [13:0] shiftDR_S ;
  output shiftDR_R ;
  output shiftDR_X ;
  output shiftDR_C ;
  assign qualified_scanin_wire = sel ? scanin : scanin_wire;
  logic [0:0] sel_C0 ;
  logic [0:0] sel_R0 ;
  logic [0:0] sel_X0 ;
  assign sel_C0 = | qualified_scanin_wire_C ;
  assign sel_X0 = | qualified_scanin_wire_X ;
  assign qualified_scanin_wire_T = sel ? ( { 1{ sel_T  }} | scanin_T ) : ( { 1{ sel_T  }} | scanin_wire_T );
  assign qualified_scanin_wire_S = sel ? scanin_S : scanin_wire_S ;
  assign sel_R0 = ( | (qualified_scanin_wire_R | ( qualified_scanin_wire_C & ( { 1{ sel }} & scanin_T | { 1{ !sel }} & scanin_wire_T )))) && scanin != scanin_wire ;
  logic [0:0] scanin_C0 ;
  logic [0:0] scanin_R0 ;
  logic [0:0] scanin_X0 ;
  assign scanin_C0 = { 1{ sel }} ;
  assign scanin_R0 = { 1{ sel }} & ( qualified_scanin_wire_R | ( { 1{ sel_T  }} & qualified_scanin_wire_C ));
  assign scanin_X0 = { 1{ sel }} & qualified_scanin_wire_X ;
  logic [0:0] scanin_wire_C0 ;
  logic [0:0] scanin_wire_R0 ;
  logic [0:0] scanin_wire_X0 ;
  assign scanin_wire_C0 = { 1{ !sel }} ;
  assign scanin_wire_R0 = { 1{ !sel }} & ( qualified_scanin_wire_R | ( { 1{ sel_T  }} & qualified_scanin_wire_C ));
  assign scanin_wire_X0 = { 1{ !sel }} & qualified_scanin_wire_X ;
  assign qualified_scanen_wire = sel ? shiftDR : scanen_wire;
  logic [0:0] sel_C1 ;
  logic [0:0] sel_R1 ;
  logic [0:0] sel_X1 ;
  assign sel_C1 = | qualified_scanen_wire_C ;
  assign sel_X1 = | qualified_scanen_wire_X ;
  assign qualified_scanen_wire_T = sel ? ( { 1{ sel_T  }} | shiftDR_T ) : ( { 1{ sel_T  }} | scanen_wire_T );
  assign qualified_scanen_wire_S = sel ? shiftDR_S : scanen_wire_S ;
  assign sel_R1 = ( | (qualified_scanen_wire_R | ( qualified_scanen_wire_C & ( { 1{ sel }} & shiftDR_T | { 1{ !sel }} & scanen_wire_T )))) && shiftDR != scanen_wire ;
  logic [0:0] shiftDR_C0 ;
  logic [0:0] shiftDR_R0 ;
  logic [0:0] shiftDR_X0 ;
  assign shiftDR_C0 = { 1{ sel }} ;
  assign shiftDR_R0 = { 1{ sel }} & ( qualified_scanen_wire_R | ( { 1{ sel_T  }} & qualified_scanen_wire_C ));
  assign shiftDR_X0 = { 1{ sel }} & qualified_scanen_wire_X ;
  logic [0:0] scanen_wire_C0 ;
  logic [0:0] scanen_wire_R0 ;
  logic [0:0] scanen_wire_X0 ;
  assign scanen_wire_C0 = { 1{ !sel }} ;
  assign scanen_wire_R0 = { 1{ !sel }} & ( qualified_scanen_wire_R | ( { 1{ sel_T  }} & qualified_scanen_wire_C ));
  assign scanen_wire_X0 = { 1{ !sel }} & qualified_scanen_wire_X ;
  logic [0:0] clk_R0 ;
  logic [0:0] clk_X0 ;
  logic [0:0] clk_C0 ;
  logic [31:0] D_R0 ;
  logic [31:0] D_X0 ;
  logic [31:0] D_C0 ;
  logic [0:0] qualified_scanen_wire_R0 ;
  logic [0:0] qualified_scanen_wire_X0 ;
  logic [0:0] qualified_scanen_wire_C0 ;
  logic [31:0] Q_R1 ;
  logic [31:0] Q_X1 ;
  logic [31:0] Q_C1 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[0].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R0  ),
    .CP_X (  clk_X0  ),
    .CP_C (  clk_C0  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [0]  ),
    .D_R (  D_R0 [0]  ),
    .D_X (  D_X0 [0]  ),
    .D_C (  D_C0 [0]  ),
    .D_S (  D_S [0]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R0  ),
    .SE_X (  qualified_scanen_wire_X0  ),
    .SE_C (  qualified_scanen_wire_C0  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [1]  ),
    .SI_R (  Q_R1 [1]  ),
    .SI_X (  Q_X1 [1]  ),
    .SI_C (  Q_C1 [1]  ),
    .SI_S (  Q_S [1]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  scanout_wire_T  ),
    .Q_R0 (  scanout_wire_R  ),
    .Q_X0 (  scanout_wire_X  ),
    .Q_C0 (  scanout_wire_C  ),
    .Q_S ( scanout_wire_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[1] ),
    .Q ( scanout_wire ),
    .CP ( clk ),
    .D ( D[0] )
  );
  logic [0:0] clk_R1 ;
  logic [0:0] clk_X1 ;
  logic [0:0] clk_C1 ;
  logic [0:0] qualified_scanen_wire_R1 ;
  logic [0:0] qualified_scanen_wire_X1 ;
  logic [0:0] qualified_scanen_wire_C1 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[10].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R1  ),
    .CP_X (  clk_X1  ),
    .CP_C (  clk_C1  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [10]  ),
    .D_R (  D_R0 [10]  ),
    .D_X (  D_X0 [10]  ),
    .D_C (  D_C0 [10]  ),
    .D_S (  D_S [10]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R1  ),
    .SE_X (  qualified_scanen_wire_X1  ),
    .SE_C (  qualified_scanen_wire_C1  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [11]  ),
    .SI_R (  Q_R1 [11]  ),
    .SI_X (  Q_X1 [11]  ),
    .SI_C (  Q_C1 [11]  ),
    .SI_S (  Q_S [11]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [10]  ),
    .Q_R0 (  Q_R [10]  ),
    .Q_X0 (  Q_X [10]  ),
    .Q_C0 (  Q_C [10]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[11] ),
    .Q ( Q[10] ),
    .CP ( clk ),
    .D ( D[10] )
  );
  logic [0:0] clk_R2 ;
  logic [0:0] clk_X2 ;
  logic [0:0] clk_C2 ;
  logic [0:0] qualified_scanen_wire_R2 ;
  logic [0:0] qualified_scanen_wire_X2 ;
  logic [0:0] qualified_scanen_wire_C2 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[11].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R2  ),
    .CP_X (  clk_X2  ),
    .CP_C (  clk_C2  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [11]  ),
    .D_R (  D_R0 [11]  ),
    .D_X (  D_X0 [11]  ),
    .D_C (  D_C0 [11]  ),
    .D_S (  D_S [11]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R2  ),
    .SE_X (  qualified_scanen_wire_X2  ),
    .SE_C (  qualified_scanen_wire_C2  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [12]  ),
    .SI_R (  Q_R1 [12]  ),
    .SI_X (  Q_X1 [12]  ),
    .SI_C (  Q_C1 [12]  ),
    .SI_S (  Q_S [12]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [11]  ),
    .Q_R0 (  Q_R [11]  ),
    .Q_X0 (  Q_X [11]  ),
    .Q_C0 (  Q_C [11]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[12] ),
    .Q ( Q[11] ),
    .CP ( clk ),
    .D ( D[11] )
  );
  logic [0:0] clk_R3 ;
  logic [0:0] clk_X3 ;
  logic [0:0] clk_C3 ;
  logic [0:0] qualified_scanen_wire_R3 ;
  logic [0:0] qualified_scanen_wire_X3 ;
  logic [0:0] qualified_scanen_wire_C3 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[12].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R3  ),
    .CP_X (  clk_X3  ),
    .CP_C (  clk_C3  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [12]  ),
    .D_R (  D_R0 [12]  ),
    .D_X (  D_X0 [12]  ),
    .D_C (  D_C0 [12]  ),
    .D_S (  D_S [12]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R3  ),
    .SE_X (  qualified_scanen_wire_X3  ),
    .SE_C (  qualified_scanen_wire_C3  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [13]  ),
    .SI_R (  Q_R1 [13]  ),
    .SI_X (  Q_X1 [13]  ),
    .SI_C (  Q_C1 [13]  ),
    .SI_S (  Q_S [13]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [12]  ),
    .Q_R0 (  Q_R [12]  ),
    .Q_X0 (  Q_X [12]  ),
    .Q_C0 (  Q_C [12]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[13] ),
    .Q ( Q[12] ),
    .CP ( clk ),
    .D ( D[12] )
  );
  logic [0:0] clk_R4 ;
  logic [0:0] clk_X4 ;
  logic [0:0] clk_C4 ;
  logic [0:0] qualified_scanen_wire_R4 ;
  logic [0:0] qualified_scanen_wire_X4 ;
  logic [0:0] qualified_scanen_wire_C4 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[13].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R4  ),
    .CP_X (  clk_X4  ),
    .CP_C (  clk_C4  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [13]  ),
    .D_R (  D_R0 [13]  ),
    .D_X (  D_X0 [13]  ),
    .D_C (  D_C0 [13]  ),
    .D_S (  D_S [13]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R4  ),
    .SE_X (  qualified_scanen_wire_X4  ),
    .SE_C (  qualified_scanen_wire_C4  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [14]  ),
    .SI_R (  Q_R1 [14]  ),
    .SI_X (  Q_X1 [14]  ),
    .SI_C (  Q_C1 [14]  ),
    .SI_S (  Q_S [14]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [13]  ),
    .Q_R0 (  Q_R [13]  ),
    .Q_X0 (  Q_X [13]  ),
    .Q_C0 (  Q_C [13]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[14] ),
    .Q ( Q[13] ),
    .CP ( clk ),
    .D ( D[13] )
  );
  logic [0:0] clk_R5 ;
  logic [0:0] clk_X5 ;
  logic [0:0] clk_C5 ;
  logic [0:0] qualified_scanen_wire_R5 ;
  logic [0:0] qualified_scanen_wire_X5 ;
  logic [0:0] qualified_scanen_wire_C5 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[14].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R5  ),
    .CP_X (  clk_X5  ),
    .CP_C (  clk_C5  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [14]  ),
    .D_R (  D_R0 [14]  ),
    .D_X (  D_X0 [14]  ),
    .D_C (  D_C0 [14]  ),
    .D_S (  D_S [14]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R5  ),
    .SE_X (  qualified_scanen_wire_X5  ),
    .SE_C (  qualified_scanen_wire_C5  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [15]  ),
    .SI_R (  Q_R1 [15]  ),
    .SI_X (  Q_X1 [15]  ),
    .SI_C (  Q_C1 [15]  ),
    .SI_S (  Q_S [15]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [14]  ),
    .Q_R0 (  Q_R [14]  ),
    .Q_X0 (  Q_X [14]  ),
    .Q_C0 (  Q_C [14]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[15] ),
    .Q ( Q[14] ),
    .CP ( clk ),
    .D ( D[14] )
  );
  logic [0:0] clk_R6 ;
  logic [0:0] clk_X6 ;
  logic [0:0] clk_C6 ;
  logic [0:0] qualified_scanen_wire_R6 ;
  logic [0:0] qualified_scanen_wire_X6 ;
  logic [0:0] qualified_scanen_wire_C6 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[15].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R6  ),
    .CP_X (  clk_X6  ),
    .CP_C (  clk_C6  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [15]  ),
    .D_R (  D_R0 [15]  ),
    .D_X (  D_X0 [15]  ),
    .D_C (  D_C0 [15]  ),
    .D_S (  D_S [15]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R6  ),
    .SE_X (  qualified_scanen_wire_X6  ),
    .SE_C (  qualified_scanen_wire_C6  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [16]  ),
    .SI_R (  Q_R1 [16]  ),
    .SI_X (  Q_X1 [16]  ),
    .SI_C (  Q_C1 [16]  ),
    .SI_S (  Q_S [16]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [15]  ),
    .Q_R0 (  Q_R [15]  ),
    .Q_X0 (  Q_X [15]  ),
    .Q_C0 (  Q_C [15]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[16] ),
    .Q ( Q[15] ),
    .CP ( clk ),
    .D ( D[15] )
  );
  logic [0:0] clk_R7 ;
  logic [0:0] clk_X7 ;
  logic [0:0] clk_C7 ;
  logic [0:0] qualified_scanen_wire_R7 ;
  logic [0:0] qualified_scanen_wire_X7 ;
  logic [0:0] qualified_scanen_wire_C7 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[16].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R7  ),
    .CP_X (  clk_X7  ),
    .CP_C (  clk_C7  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [16]  ),
    .D_R (  D_R0 [16]  ),
    .D_X (  D_X0 [16]  ),
    .D_C (  D_C0 [16]  ),
    .D_S (  D_S [16]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R7  ),
    .SE_X (  qualified_scanen_wire_X7  ),
    .SE_C (  qualified_scanen_wire_C7  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [17]  ),
    .SI_R (  Q_R1 [17]  ),
    .SI_X (  Q_X1 [17]  ),
    .SI_C (  Q_C1 [17]  ),
    .SI_S (  Q_S [17]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [16]  ),
    .Q_R0 (  Q_R [16]  ),
    .Q_X0 (  Q_X [16]  ),
    .Q_C0 (  Q_C [16]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[17] ),
    .Q ( Q[16] ),
    .CP ( clk ),
    .D ( D[16] )
  );
  logic [0:0] clk_R8 ;
  logic [0:0] clk_X8 ;
  logic [0:0] clk_C8 ;
  logic [0:0] qualified_scanen_wire_R8 ;
  logic [0:0] qualified_scanen_wire_X8 ;
  logic [0:0] qualified_scanen_wire_C8 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[17].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R8  ),
    .CP_X (  clk_X8  ),
    .CP_C (  clk_C8  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [17]  ),
    .D_R (  D_R0 [17]  ),
    .D_X (  D_X0 [17]  ),
    .D_C (  D_C0 [17]  ),
    .D_S (  D_S [17]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R8  ),
    .SE_X (  qualified_scanen_wire_X8  ),
    .SE_C (  qualified_scanen_wire_C8  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [18]  ),
    .SI_R (  Q_R1 [18]  ),
    .SI_X (  Q_X1 [18]  ),
    .SI_C (  Q_C1 [18]  ),
    .SI_S (  Q_S [18]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [17]  ),
    .Q_R0 (  Q_R [17]  ),
    .Q_X0 (  Q_X [17]  ),
    .Q_C0 (  Q_C [17]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[18] ),
    .Q ( Q[17] ),
    .CP ( clk ),
    .D ( D[17] )
  );
  logic [0:0] clk_R9 ;
  logic [0:0] clk_X9 ;
  logic [0:0] clk_C9 ;
  logic [0:0] qualified_scanen_wire_R9 ;
  logic [0:0] qualified_scanen_wire_X9 ;
  logic [0:0] qualified_scanen_wire_C9 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[18].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R9  ),
    .CP_X (  clk_X9  ),
    .CP_C (  clk_C9  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [18]  ),
    .D_R (  D_R0 [18]  ),
    .D_X (  D_X0 [18]  ),
    .D_C (  D_C0 [18]  ),
    .D_S (  D_S [18]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R9  ),
    .SE_X (  qualified_scanen_wire_X9  ),
    .SE_C (  qualified_scanen_wire_C9  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [19]  ),
    .SI_R (  Q_R1 [19]  ),
    .SI_X (  Q_X1 [19]  ),
    .SI_C (  Q_C1 [19]  ),
    .SI_S (  Q_S [19]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [18]  ),
    .Q_R0 (  Q_R [18]  ),
    .Q_X0 (  Q_X [18]  ),
    .Q_C0 (  Q_C [18]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[19] ),
    .Q ( Q[18] ),
    .CP ( clk ),
    .D ( D[18] )
  );
  logic [0:0] clk_R10 ;
  logic [0:0] clk_X10 ;
  logic [0:0] clk_C10 ;
  logic [0:0] qualified_scanen_wire_R10 ;
  logic [0:0] qualified_scanen_wire_X10 ;
  logic [0:0] qualified_scanen_wire_C10 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[19].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R10  ),
    .CP_X (  clk_X10  ),
    .CP_C (  clk_C10  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [19]  ),
    .D_R (  D_R0 [19]  ),
    .D_X (  D_X0 [19]  ),
    .D_C (  D_C0 [19]  ),
    .D_S (  D_S [19]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R10  ),
    .SE_X (  qualified_scanen_wire_X10  ),
    .SE_C (  qualified_scanen_wire_C10  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [20]  ),
    .SI_R (  Q_R1 [20]  ),
    .SI_X (  Q_X1 [20]  ),
    .SI_C (  Q_C1 [20]  ),
    .SI_S (  Q_S [20]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [19]  ),
    .Q_R0 (  Q_R [19]  ),
    .Q_X0 (  Q_X [19]  ),
    .Q_C0 (  Q_C [19]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[20] ),
    .Q ( Q[19] ),
    .CP ( clk ),
    .D ( D[19] )
  );
  logic [0:0] clk_R11 ;
  logic [0:0] clk_X11 ;
  logic [0:0] clk_C11 ;
  logic [0:0] qualified_scanen_wire_R11 ;
  logic [0:0] qualified_scanen_wire_X11 ;
  logic [0:0] qualified_scanen_wire_C11 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[1].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R11  ),
    .CP_X (  clk_X11  ),
    .CP_C (  clk_C11  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [1]  ),
    .D_R (  D_R0 [1]  ),
    .D_X (  D_X0 [1]  ),
    .D_C (  D_C0 [1]  ),
    .D_S (  D_S [1]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R11  ),
    .SE_X (  qualified_scanen_wire_X11  ),
    .SE_C (  qualified_scanen_wire_C11  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [2]  ),
    .SI_R (  Q_R1 [2]  ),
    .SI_X (  Q_X1 [2]  ),
    .SI_C (  Q_C1 [2]  ),
    .SI_S (  Q_S [2]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [1]  ),
    .Q_R0 (  Q_R [1]  ),
    .Q_X0 (  Q_X [1]  ),
    .Q_C0 (  Q_C [1]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[2] ),
    .Q ( Q[1] ),
    .CP ( clk ),
    .D ( D[1] )
  );
  logic [0:0] clk_R12 ;
  logic [0:0] clk_X12 ;
  logic [0:0] clk_C12 ;
  logic [0:0] qualified_scanen_wire_R12 ;
  logic [0:0] qualified_scanen_wire_X12 ;
  logic [0:0] qualified_scanen_wire_C12 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[20].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R12  ),
    .CP_X (  clk_X12  ),
    .CP_C (  clk_C12  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [20]  ),
    .D_R (  D_R0 [20]  ),
    .D_X (  D_X0 [20]  ),
    .D_C (  D_C0 [20]  ),
    .D_S (  D_S [20]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R12  ),
    .SE_X (  qualified_scanen_wire_X12  ),
    .SE_C (  qualified_scanen_wire_C12  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [21]  ),
    .SI_R (  Q_R1 [21]  ),
    .SI_X (  Q_X1 [21]  ),
    .SI_C (  Q_C1 [21]  ),
    .SI_S (  Q_S [21]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [20]  ),
    .Q_R0 (  Q_R [20]  ),
    .Q_X0 (  Q_X [20]  ),
    .Q_C0 (  Q_C [20]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[21] ),
    .Q ( Q[20] ),
    .CP ( clk ),
    .D ( D[20] )
  );
  logic [0:0] clk_R13 ;
  logic [0:0] clk_X13 ;
  logic [0:0] clk_C13 ;
  logic [0:0] qualified_scanen_wire_R13 ;
  logic [0:0] qualified_scanen_wire_X13 ;
  logic [0:0] qualified_scanen_wire_C13 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[21].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R13  ),
    .CP_X (  clk_X13  ),
    .CP_C (  clk_C13  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [21]  ),
    .D_R (  D_R0 [21]  ),
    .D_X (  D_X0 [21]  ),
    .D_C (  D_C0 [21]  ),
    .D_S (  D_S [21]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R13  ),
    .SE_X (  qualified_scanen_wire_X13  ),
    .SE_C (  qualified_scanen_wire_C13  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [22]  ),
    .SI_R (  Q_R1 [22]  ),
    .SI_X (  Q_X1 [22]  ),
    .SI_C (  Q_C1 [22]  ),
    .SI_S (  Q_S [22]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [21]  ),
    .Q_R0 (  Q_R [21]  ),
    .Q_X0 (  Q_X [21]  ),
    .Q_C0 (  Q_C [21]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[22] ),
    .Q ( Q[21] ),
    .CP ( clk ),
    .D ( D[21] )
  );
  logic [0:0] clk_R14 ;
  logic [0:0] clk_X14 ;
  logic [0:0] clk_C14 ;
  logic [0:0] qualified_scanen_wire_R14 ;
  logic [0:0] qualified_scanen_wire_X14 ;
  logic [0:0] qualified_scanen_wire_C14 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[22].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R14  ),
    .CP_X (  clk_X14  ),
    .CP_C (  clk_C14  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [22]  ),
    .D_R (  D_R0 [22]  ),
    .D_X (  D_X0 [22]  ),
    .D_C (  D_C0 [22]  ),
    .D_S (  D_S [22]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R14  ),
    .SE_X (  qualified_scanen_wire_X14  ),
    .SE_C (  qualified_scanen_wire_C14  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [23]  ),
    .SI_R (  Q_R1 [23]  ),
    .SI_X (  Q_X1 [23]  ),
    .SI_C (  Q_C1 [23]  ),
    .SI_S (  Q_S [23]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [22]  ),
    .Q_R0 (  Q_R [22]  ),
    .Q_X0 (  Q_X [22]  ),
    .Q_C0 (  Q_C [22]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[23] ),
    .Q ( Q[22] ),
    .CP ( clk ),
    .D ( D[22] )
  );
  logic [0:0] clk_R15 ;
  logic [0:0] clk_X15 ;
  logic [0:0] clk_C15 ;
  logic [0:0] qualified_scanen_wire_R15 ;
  logic [0:0] qualified_scanen_wire_X15 ;
  logic [0:0] qualified_scanen_wire_C15 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[23].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R15  ),
    .CP_X (  clk_X15  ),
    .CP_C (  clk_C15  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [23]  ),
    .D_R (  D_R0 [23]  ),
    .D_X (  D_X0 [23]  ),
    .D_C (  D_C0 [23]  ),
    .D_S (  D_S [23]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R15  ),
    .SE_X (  qualified_scanen_wire_X15  ),
    .SE_C (  qualified_scanen_wire_C15  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [24]  ),
    .SI_R (  Q_R1 [24]  ),
    .SI_X (  Q_X1 [24]  ),
    .SI_C (  Q_C1 [24]  ),
    .SI_S (  Q_S [24]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [23]  ),
    .Q_R0 (  Q_R [23]  ),
    .Q_X0 (  Q_X [23]  ),
    .Q_C0 (  Q_C [23]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[24] ),
    .Q ( Q[23] ),
    .CP ( clk ),
    .D ( D[23] )
  );
  logic [0:0] clk_R16 ;
  logic [0:0] clk_X16 ;
  logic [0:0] clk_C16 ;
  logic [0:0] qualified_scanen_wire_R16 ;
  logic [0:0] qualified_scanen_wire_X16 ;
  logic [0:0] qualified_scanen_wire_C16 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[24].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R16  ),
    .CP_X (  clk_X16  ),
    .CP_C (  clk_C16  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [24]  ),
    .D_R (  D_R0 [24]  ),
    .D_X (  D_X0 [24]  ),
    .D_C (  D_C0 [24]  ),
    .D_S (  D_S [24]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R16  ),
    .SE_X (  qualified_scanen_wire_X16  ),
    .SE_C (  qualified_scanen_wire_C16  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [25]  ),
    .SI_R (  Q_R1 [25]  ),
    .SI_X (  Q_X1 [25]  ),
    .SI_C (  Q_C1 [25]  ),
    .SI_S (  Q_S [25]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [24]  ),
    .Q_R0 (  Q_R [24]  ),
    .Q_X0 (  Q_X [24]  ),
    .Q_C0 (  Q_C [24]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[25] ),
    .Q ( Q[24] ),
    .CP ( clk ),
    .D ( D[24] )
  );
  logic [0:0] clk_R17 ;
  logic [0:0] clk_X17 ;
  logic [0:0] clk_C17 ;
  logic [0:0] qualified_scanen_wire_R17 ;
  logic [0:0] qualified_scanen_wire_X17 ;
  logic [0:0] qualified_scanen_wire_C17 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[25].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R17  ),
    .CP_X (  clk_X17  ),
    .CP_C (  clk_C17  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [25]  ),
    .D_R (  D_R0 [25]  ),
    .D_X (  D_X0 [25]  ),
    .D_C (  D_C0 [25]  ),
    .D_S (  D_S [25]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R17  ),
    .SE_X (  qualified_scanen_wire_X17  ),
    .SE_C (  qualified_scanen_wire_C17  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [26]  ),
    .SI_R (  Q_R1 [26]  ),
    .SI_X (  Q_X1 [26]  ),
    .SI_C (  Q_C1 [26]  ),
    .SI_S (  Q_S [26]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [25]  ),
    .Q_R0 (  Q_R [25]  ),
    .Q_X0 (  Q_X [25]  ),
    .Q_C0 (  Q_C [25]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[26] ),
    .Q ( Q[25] ),
    .CP ( clk ),
    .D ( D[25] )
  );
  logic [0:0] clk_R18 ;
  logic [0:0] clk_X18 ;
  logic [0:0] clk_C18 ;
  logic [0:0] qualified_scanen_wire_R18 ;
  logic [0:0] qualified_scanen_wire_X18 ;
  logic [0:0] qualified_scanen_wire_C18 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[26].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R18  ),
    .CP_X (  clk_X18  ),
    .CP_C (  clk_C18  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [26]  ),
    .D_R (  D_R0 [26]  ),
    .D_X (  D_X0 [26]  ),
    .D_C (  D_C0 [26]  ),
    .D_S (  D_S [26]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R18  ),
    .SE_X (  qualified_scanen_wire_X18  ),
    .SE_C (  qualified_scanen_wire_C18  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [27]  ),
    .SI_R (  Q_R1 [27]  ),
    .SI_X (  Q_X1 [27]  ),
    .SI_C (  Q_C1 [27]  ),
    .SI_S (  Q_S [27]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [26]  ),
    .Q_R0 (  Q_R [26]  ),
    .Q_X0 (  Q_X [26]  ),
    .Q_C0 (  Q_C [26]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[27] ),
    .Q ( Q[26] ),
    .CP ( clk ),
    .D ( D[26] )
  );
  logic [0:0] clk_R19 ;
  logic [0:0] clk_X19 ;
  logic [0:0] clk_C19 ;
  logic [0:0] qualified_scanen_wire_R19 ;
  logic [0:0] qualified_scanen_wire_X19 ;
  logic [0:0] qualified_scanen_wire_C19 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[27].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R19  ),
    .CP_X (  clk_X19  ),
    .CP_C (  clk_C19  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [27]  ),
    .D_R (  D_R0 [27]  ),
    .D_X (  D_X0 [27]  ),
    .D_C (  D_C0 [27]  ),
    .D_S (  D_S [27]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R19  ),
    .SE_X (  qualified_scanen_wire_X19  ),
    .SE_C (  qualified_scanen_wire_C19  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [28]  ),
    .SI_R (  Q_R1 [28]  ),
    .SI_X (  Q_X1 [28]  ),
    .SI_C (  Q_C1 [28]  ),
    .SI_S (  Q_S [28]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [27]  ),
    .Q_R0 (  Q_R [27]  ),
    .Q_X0 (  Q_X [27]  ),
    .Q_C0 (  Q_C [27]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[28] ),
    .Q ( Q[27] ),
    .CP ( clk ),
    .D ( D[27] )
  );
  logic [0:0] clk_R20 ;
  logic [0:0] clk_X20 ;
  logic [0:0] clk_C20 ;
  logic [0:0] qualified_scanen_wire_R20 ;
  logic [0:0] qualified_scanen_wire_X20 ;
  logic [0:0] qualified_scanen_wire_C20 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[28].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R20  ),
    .CP_X (  clk_X20  ),
    .CP_C (  clk_C20  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [28]  ),
    .D_R (  D_R0 [28]  ),
    .D_X (  D_X0 [28]  ),
    .D_C (  D_C0 [28]  ),
    .D_S (  D_S [28]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R20  ),
    .SE_X (  qualified_scanen_wire_X20  ),
    .SE_C (  qualified_scanen_wire_C20  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [29]  ),
    .SI_R (  Q_R1 [29]  ),
    .SI_X (  Q_X1 [29]  ),
    .SI_C (  Q_C1 [29]  ),
    .SI_S (  Q_S [29]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [28]  ),
    .Q_R0 (  Q_R [28]  ),
    .Q_X0 (  Q_X [28]  ),
    .Q_C0 (  Q_C [28]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[29] ),
    .Q ( Q[28] ),
    .CP ( clk ),
    .D ( D[28] )
  );
  logic [0:0] clk_R21 ;
  logic [0:0] clk_X21 ;
  logic [0:0] clk_C21 ;
  logic [0:0] qualified_scanen_wire_R21 ;
  logic [0:0] qualified_scanen_wire_X21 ;
  logic [0:0] qualified_scanen_wire_C21 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[29].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R21  ),
    .CP_X (  clk_X21  ),
    .CP_C (  clk_C21  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [29]  ),
    .D_R (  D_R0 [29]  ),
    .D_X (  D_X0 [29]  ),
    .D_C (  D_C0 [29]  ),
    .D_S (  D_S [29]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R21  ),
    .SE_X (  qualified_scanen_wire_X21  ),
    .SE_C (  qualified_scanen_wire_C21  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [30]  ),
    .SI_R (  Q_R1 [30]  ),
    .SI_X (  Q_X1 [30]  ),
    .SI_C (  Q_C1 [30]  ),
    .SI_S (  Q_S [30]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [29]  ),
    .Q_R0 (  Q_R [29]  ),
    .Q_X0 (  Q_X [29]  ),
    .Q_C0 (  Q_C [29]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[30] ),
    .Q ( Q[29] ),
    .CP ( clk ),
    .D ( D[29] )
  );
  logic [0:0] clk_R22 ;
  logic [0:0] clk_X22 ;
  logic [0:0] clk_C22 ;
  logic [0:0] qualified_scanen_wire_R22 ;
  logic [0:0] qualified_scanen_wire_X22 ;
  logic [0:0] qualified_scanen_wire_C22 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[2].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R22  ),
    .CP_X (  clk_X22  ),
    .CP_C (  clk_C22  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [2]  ),
    .D_R (  D_R0 [2]  ),
    .D_X (  D_X0 [2]  ),
    .D_C (  D_C0 [2]  ),
    .D_S (  D_S [2]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R22  ),
    .SE_X (  qualified_scanen_wire_X22  ),
    .SE_C (  qualified_scanen_wire_C22  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [3]  ),
    .SI_R (  Q_R1 [3]  ),
    .SI_X (  Q_X1 [3]  ),
    .SI_C (  Q_C1 [3]  ),
    .SI_S (  Q_S [3]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [2]  ),
    .Q_R0 (  Q_R [2]  ),
    .Q_X0 (  Q_X [2]  ),
    .Q_C0 (  Q_C [2]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[3] ),
    .Q ( Q[2] ),
    .CP ( clk ),
    .D ( D[2] )
  );
  logic [0:0] clk_R23 ;
  logic [0:0] clk_X23 ;
  logic [0:0] clk_C23 ;
  logic [0:0] qualified_scanen_wire_R23 ;
  logic [0:0] qualified_scanen_wire_X23 ;
  logic [0:0] qualified_scanen_wire_C23 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[30].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R23  ),
    .CP_X (  clk_X23  ),
    .CP_C (  clk_C23  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [30]  ),
    .D_R (  D_R0 [30]  ),
    .D_X (  D_X0 [30]  ),
    .D_C (  D_C0 [30]  ),
    .D_S (  D_S [30]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R23  ),
    .SE_X (  qualified_scanen_wire_X23  ),
    .SE_C (  qualified_scanen_wire_C23  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [31]  ),
    .SI_R (  Q_R1 [31]  ),
    .SI_X (  Q_X1 [31]  ),
    .SI_C (  Q_C1 [31]  ),
    .SI_S (  Q_S [31]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [30]  ),
    .Q_R0 (  Q_R [30]  ),
    .Q_X0 (  Q_X [30]  ),
    .Q_C0 (  Q_C [30]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[31] ),
    .Q ( Q[30] ),
    .CP ( clk ),
    .D ( D[30] )
  );
  logic [0:0] clk_R24 ;
  logic [0:0] clk_X24 ;
  logic [0:0] clk_C24 ;
  logic [0:0] qualified_scanen_wire_R24 ;
  logic [0:0] qualified_scanen_wire_X24 ;
  logic [0:0] qualified_scanen_wire_C24 ;
  logic [0:0] qualified_scanin_wire_R0 ;
  logic [0:0] qualified_scanin_wire_X0 ;
  logic [0:0] qualified_scanin_wire_C0 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[31].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R24  ),
    .CP_X (  clk_X24  ),
    .CP_C (  clk_C24  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [31]  ),
    .D_R (  D_R0 [31]  ),
    .D_X (  D_X0 [31]  ),
    .D_C (  D_C0 [31]  ),
    .D_S (  D_S [31]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R24  ),
    .SE_X (  qualified_scanen_wire_X24  ),
    .SE_C (  qualified_scanen_wire_C24  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  qualified_scanin_wire_T  ),
    .SI_R (  qualified_scanin_wire_R0  ),
    .SI_X (  qualified_scanin_wire_X0  ),
    .SI_C (  qualified_scanin_wire_C0  ),
    .SI_S (  qualified_scanin_wire_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [31]  ),
    .Q_R0 (  Q_R [31]  ),
    .Q_X0 (  Q_X [31]  ),
    .Q_C0 (  Q_C [31]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( qualified_scanin_wire ),
    .Q ( Q[31] ),
    .CP ( clk ),
    .D ( D[31] )
  );
  logic [0:0] clk_R25 ;
  logic [0:0] clk_X25 ;
  logic [0:0] clk_C25 ;
  logic [0:0] qualified_scanen_wire_R25 ;
  logic [0:0] qualified_scanen_wire_X25 ;
  logic [0:0] qualified_scanen_wire_C25 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[3].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R25  ),
    .CP_X (  clk_X25  ),
    .CP_C (  clk_C25  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [3]  ),
    .D_R (  D_R0 [3]  ),
    .D_X (  D_X0 [3]  ),
    .D_C (  D_C0 [3]  ),
    .D_S (  D_S [3]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R25  ),
    .SE_X (  qualified_scanen_wire_X25  ),
    .SE_C (  qualified_scanen_wire_C25  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [4]  ),
    .SI_R (  Q_R1 [4]  ),
    .SI_X (  Q_X1 [4]  ),
    .SI_C (  Q_C1 [4]  ),
    .SI_S (  Q_S [4]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [3]  ),
    .Q_R0 (  Q_R [3]  ),
    .Q_X0 (  Q_X [3]  ),
    .Q_C0 (  Q_C [3]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[4] ),
    .Q ( Q[3] ),
    .CP ( clk ),
    .D ( D[3] )
  );
  logic [0:0] clk_R26 ;
  logic [0:0] clk_X26 ;
  logic [0:0] clk_C26 ;
  logic [0:0] qualified_scanen_wire_R26 ;
  logic [0:0] qualified_scanen_wire_X26 ;
  logic [0:0] qualified_scanen_wire_C26 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[4].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R26  ),
    .CP_X (  clk_X26  ),
    .CP_C (  clk_C26  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [4]  ),
    .D_R (  D_R0 [4]  ),
    .D_X (  D_X0 [4]  ),
    .D_C (  D_C0 [4]  ),
    .D_S (  D_S [4]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R26  ),
    .SE_X (  qualified_scanen_wire_X26  ),
    .SE_C (  qualified_scanen_wire_C26  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [5]  ),
    .SI_R (  Q_R1 [5]  ),
    .SI_X (  Q_X1 [5]  ),
    .SI_C (  Q_C1 [5]  ),
    .SI_S (  Q_S [5]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [4]  ),
    .Q_R0 (  Q_R [4]  ),
    .Q_X0 (  Q_X [4]  ),
    .Q_C0 (  Q_C [4]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[5] ),
    .Q ( Q[4] ),
    .CP ( clk ),
    .D ( D[4] )
  );
  logic [0:0] clk_R27 ;
  logic [0:0] clk_X27 ;
  logic [0:0] clk_C27 ;
  logic [0:0] qualified_scanen_wire_R27 ;
  logic [0:0] qualified_scanen_wire_X27 ;
  logic [0:0] qualified_scanen_wire_C27 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[5].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R27  ),
    .CP_X (  clk_X27  ),
    .CP_C (  clk_C27  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [5]  ),
    .D_R (  D_R0 [5]  ),
    .D_X (  D_X0 [5]  ),
    .D_C (  D_C0 [5]  ),
    .D_S (  D_S [5]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R27  ),
    .SE_X (  qualified_scanen_wire_X27  ),
    .SE_C (  qualified_scanen_wire_C27  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [6]  ),
    .SI_R (  Q_R1 [6]  ),
    .SI_X (  Q_X1 [6]  ),
    .SI_C (  Q_C1 [6]  ),
    .SI_S (  Q_S [6]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [5]  ),
    .Q_R0 (  Q_R [5]  ),
    .Q_X0 (  Q_X [5]  ),
    .Q_C0 (  Q_C [5]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[6] ),
    .Q ( Q[5] ),
    .CP ( clk ),
    .D ( D[5] )
  );
  logic [0:0] clk_R28 ;
  logic [0:0] clk_X28 ;
  logic [0:0] clk_C28 ;
  logic [0:0] qualified_scanen_wire_R28 ;
  logic [0:0] qualified_scanen_wire_X28 ;
  logic [0:0] qualified_scanen_wire_C28 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[6].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R28  ),
    .CP_X (  clk_X28  ),
    .CP_C (  clk_C28  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [6]  ),
    .D_R (  D_R0 [6]  ),
    .D_X (  D_X0 [6]  ),
    .D_C (  D_C0 [6]  ),
    .D_S (  D_S [6]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R28  ),
    .SE_X (  qualified_scanen_wire_X28  ),
    .SE_C (  qualified_scanen_wire_C28  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [7]  ),
    .SI_R (  Q_R1 [7]  ),
    .SI_X (  Q_X1 [7]  ),
    .SI_C (  Q_C1 [7]  ),
    .SI_S (  Q_S [7]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [6]  ),
    .Q_R0 (  Q_R [6]  ),
    .Q_X0 (  Q_X [6]  ),
    .Q_C0 (  Q_C [6]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[7] ),
    .Q ( Q[6] ),
    .CP ( clk ),
    .D ( D[6] )
  );
  logic [0:0] clk_R29 ;
  logic [0:0] clk_X29 ;
  logic [0:0] clk_C29 ;
  logic [0:0] qualified_scanen_wire_R29 ;
  logic [0:0] qualified_scanen_wire_X29 ;
  logic [0:0] qualified_scanen_wire_C29 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[7].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R29  ),
    .CP_X (  clk_X29  ),
    .CP_C (  clk_C29  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [7]  ),
    .D_R (  D_R0 [7]  ),
    .D_X (  D_X0 [7]  ),
    .D_C (  D_C0 [7]  ),
    .D_S (  D_S [7]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R29  ),
    .SE_X (  qualified_scanen_wire_X29  ),
    .SE_C (  qualified_scanen_wire_C29  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [8]  ),
    .SI_R (  Q_R1 [8]  ),
    .SI_X (  Q_X1 [8]  ),
    .SI_C (  Q_C1 [8]  ),
    .SI_S (  Q_S [8]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [7]  ),
    .Q_R0 (  Q_R [7]  ),
    .Q_X0 (  Q_X [7]  ),
    .Q_C0 (  Q_C [7]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[8] ),
    .Q ( Q[7] ),
    .CP ( clk ),
    .D ( D[7] )
  );
  logic [0:0] clk_R30 ;
  logic [0:0] clk_X30 ;
  logic [0:0] clk_C30 ;
  logic [0:0] qualified_scanen_wire_R30 ;
  logic [0:0] qualified_scanen_wire_X30 ;
  logic [0:0] qualified_scanen_wire_C30 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[8].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R30  ),
    .CP_X (  clk_X30  ),
    .CP_C (  clk_C30  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [8]  ),
    .D_R (  D_R0 [8]  ),
    .D_X (  D_X0 [8]  ),
    .D_C (  D_C0 [8]  ),
    .D_S (  D_S [8]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R30  ),
    .SE_X (  qualified_scanen_wire_X30  ),
    .SE_C (  qualified_scanen_wire_C30  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [9]  ),
    .SI_R (  Q_R1 [9]  ),
    .SI_X (  Q_X1 [9]  ),
    .SI_C (  Q_C1 [9]  ),
    .SI_S (  Q_S [9]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [8]  ),
    .Q_R0 (  Q_R [8]  ),
    .Q_X0 (  Q_X [8]  ),
    .Q_C0 (  Q_C [8]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[9] ),
    .Q ( Q[8] ),
    .CP ( clk ),
    .D ( D[8] )
  );
  logic [0:0] clk_R31 ;
  logic [0:0] clk_X31 ;
  logic [0:0] clk_C31 ;
  logic [0:0] qualified_scanen_wire_R31 ;
  logic [0:0] qualified_scanen_wire_X31 ;
  logic [0:0] qualified_scanen_wire_C31 ;
// module: SDFQD1
  SDFQD1 \Jreg_ff[9].SSS.nr (
    .CP_T (  clk_T  ),
    .CP_R (  clk_R31  ),
    .CP_X (  clk_X31  ),
    .CP_C (  clk_C31  ),
    .CP_S (  clk_S  ),
    .D_T (  D_T [9]  ),
    .D_R (  D_R0 [9]  ),
    .D_X (  D_X0 [9]  ),
    .D_C (  D_C0 [9]  ),
    .D_S (  D_S [9]  ),
    .SE_T (  qualified_scanen_wire_T  ),
    .SE_R (  qualified_scanen_wire_R31  ),
    .SE_X (  qualified_scanen_wire_X31  ),
    .SE_C (  qualified_scanen_wire_C31  ),
    .SE_S (  qualified_scanen_wire_S  ),
    .SI_T (  Q_T [10]  ),
    .SI_R (  Q_R1 [10]  ),
    .SI_X (  Q_X1 [10]  ),
    .SI_C (  Q_C1 [10]  ),
    .SI_S (  Q_S [10]  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Q_T (  Q_T [9]  ),
    .Q_R0 (  Q_R [9]  ),
    .Q_X0 (  Q_X [9]  ),
    .Q_C0 (  Q_C [9]  ),
    .Q_S ( Q_S ),
    .SE ( qualified_scanen_wire ),
    .SI ( Q[10] ),
    .Q ( Q[9] ),
    .CP ( clk ),
    .D ( D[9] )
  );
// module: NV_BLKBOX_SRC0
  NV_BLKBOX_SRC0 UJ_testInst_ess_scanen_buf (
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Y_T (  scanen_wire_T  ),
    .Y_R0 (  scanen_wire_R  ),
    .Y_X0 (  scanen_wire_X  ),
    .Y_C0 (  scanen_wire_C  ),
    .Y_S ( scanen_wire_S ),
    .Y ( scanen_wire )
  );
// module: NV_BLKBOX_SRC0
  NV_BLKBOX_SRC0 UJ_testInst_ess_scanin_buf (
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Y_T (  scanin_wire_T  ),
    .Y_R0 (  scanin_wire_R  ),
    .Y_X0 (  scanin_wire_X  ),
    .Y_C0 (  scanin_wire_C  ),
    .Y_S ( scanin_wire_S ),
    .Y ( scanin_wire )
  );
  logic [0:0] scanout_wire_R0 ;
  logic [0:0] scanout_wire_X0 ;
  logic [0:0] scanout_wire_C0 ;
// module: NV_BLKBOX_BUFFER
  NV_BLKBOX_BUFFER UJ_testInst_ess_scanout_buf (
    .A_T (  scanout_wire_T  ),
    .A_R (  scanout_wire_R0  ),
    .A_X (  scanout_wire_X0  ),
    .A_C (  scanout_wire_C0  ),
    .A_S (  scanout_wire_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .Y_T (  scanout_T  ),
    .Y_R0 (  scanout_R  ),
    .Y_X0 (  scanout_X  ),
    .Y_C0 (  scanout_C  ),
    .Y_S ( scanout_S ),
    .Y ( scanout ),
    .A ( scanout_wire )
  );
  assign Q[0] = scanout_wire;
  logic [0:0] scanout_wire_C1 ;
  logic [0:0] scanout_wire_R1 ;
  logic [0:0] scanout_wire_X1 ;
  assign Q_T [0] = scanout_wire_T ;
  assign scanout_wire_C1 = Q_C [0] ;
  assign scanout_wire_R1 = Q_R [0] ;
  assign scanout_wire_X1 = Q_X [0] ;
  assign Q_S = scanout_wire_S ;
  assign Q_conn = { qualified_scanin_wire, Q[31:1] };
  assign Q_conn_T = {  qualified_scanin_wire_T , Q_T [31:1]  };
  logic [13:0] Q_conn_S ;
  assign Q_conn_S = 0 ;
  logic [0:0] qualified_scanin_wire_R1 ;
  logic [0:0] qualified_scanin_wire_X1 ;
  logic [0:0] qualified_scanin_wire_C1 ;
  assign qualified_scanin_wire_R1 = Q_conn_R [31:31] ;
  assign qualified_scanin_wire_X1 = Q_conn_X [31:31] ;
  assign qualified_scanin_wire_C1 = Q_conn_C [31:31] ;
  assign { Q_R1 [0] } = 0;
  assign { Q_X1 [0] } = 0;
  assign { Q_C1 [0] } = 0;
  logic [31:0] Q_R2 ;
  logic [31:0] Q_X2 ;
  logic [31:0] Q_C2 ;
  assign Q_R2 [31:1] = Q_conn_R [30:0] ;
  assign Q_X2 [31:1] = Q_conn_X [30:0] ;
  assign Q_C2 [31:1] = Q_conn_C [30:0] ;
  assign clk_wire = clk;
  logic [0:0] clk_C32 ;
  logic [0:0] clk_R32 ;
  logic [0:0] clk_X32 ;
  assign clk_wire_T = clk_T ;
  assign clk_C32 = clk_wire_C ;
  assign clk_R32 = clk_wire_R ;
  assign clk_X32 = clk_wire_X ;
  assign clk_wire_S = clk_S ;
  assign next_Q = D;
  logic [31:0] D_C1 ;
  logic [31:0] D_R1 ;
  logic [31:0] D_X1 ;
  assign next_Q_T = D_T ;
  assign D_C1 = next_Q_C ;
  assign D_R1 = next_Q_R ;
  assign D_X1 = next_Q_X ;
  assign next_Q_S = D_S ;
  assign scanout_wire_C = ( scanout_wire_C0 ) | ( scanout_wire_C1 );
  assign qualified_scanin_wire_C = ( qualified_scanin_wire_C0 ) | ( qualified_scanin_wire_C1 );
  assign qualified_scanen_wire_C = ( qualified_scanen_wire_C0 ) | ( qualified_scanen_wire_C1 ) | ( qualified_scanen_wire_C2 ) | ( qualified_scanen_wire_C3 ) | ( qualified_scanen_wire_C4 ) | ( qualified_scanen_wire_C5 ) | ( qualified_scanen_wire_C6 ) | ( qualified_scanen_wire_C7 ) | ( qualified_scanen_wire_C8 ) | ( qualified_scanen_wire_C9 ) | ( qualified_scanen_wire_C10 ) | ( qualified_scanen_wire_C11 ) | ( qualified_scanen_wire_C12 ) | ( qualified_scanen_wire_C13 ) | ( qualified_scanen_wire_C14 ) | ( qualified_scanen_wire_C15 ) | ( qualified_scanen_wire_C16 ) | ( qualified_scanen_wire_C17 ) | ( qualified_scanen_wire_C18 ) | ( qualified_scanen_wire_C19 ) | ( qualified_scanen_wire_C20 ) | ( qualified_scanen_wire_C21 ) | ( qualified_scanen_wire_C22 ) | ( qualified_scanen_wire_C23 ) | ( qualified_scanen_wire_C24 ) | ( qualified_scanen_wire_C25 ) | ( qualified_scanen_wire_C26 ) | ( qualified_scanen_wire_C27 ) | ( qualified_scanen_wire_C28 ) | ( qualified_scanen_wire_C29 ) | ( qualified_scanen_wire_C30 ) | ( qualified_scanen_wire_C31 );
  assign D_C = ( D_C0 ) | ( D_C1 );
  assign clk_C = ( clk_C0 ) | ( clk_C1 ) | ( clk_C2 ) | ( clk_C3 ) | ( clk_C4 ) | ( clk_C5 ) | ( clk_C6 ) | ( clk_C7 ) | ( clk_C8 ) | ( clk_C9 ) | ( clk_C10 ) | ( clk_C11 ) | ( clk_C12 ) | ( clk_C13 ) | ( clk_C14 ) | ( clk_C15 ) | ( clk_C16 ) | ( clk_C17 ) | ( clk_C18 ) | ( clk_C19 ) | ( clk_C20 ) | ( clk_C21 ) | ( clk_C22 ) | ( clk_C23 ) | ( clk_C24 ) | ( clk_C25 ) | ( clk_C26 ) | ( clk_C27 ) | ( clk_C28 ) | ( clk_C29 ) | ( clk_C30 ) | ( clk_C31 ) | ( clk_C32 );
  assign scanen_wire_C = ( scanen_wire_C0 );
  assign shiftDR_C = ( shiftDR_C0 );
  assign scanin_wire_C = ( scanin_wire_C0 );
  assign scanin_C = ( scanin_C0 );
  assign sel_C = ( sel_C0 ) | ( sel_C1 );
  assign scanout_C = ( scanout_C0 );
  assign Q_C = ( Q_C0 ) | ( Q_C1 ) | ( Q_C2 );
  assign scanout_wire_X = ( scanout_wire_X0 ) | ( scanout_wire_X1 );
  assign qualified_scanin_wire_X = ( qualified_scanin_wire_X0 ) | ( qualified_scanin_wire_X1 );
  assign qualified_scanen_wire_X = ( qualified_scanen_wire_X0 ) | ( qualified_scanen_wire_X1 ) | ( qualified_scanen_wire_X2 ) | ( qualified_scanen_wire_X3 ) | ( qualified_scanen_wire_X4 ) | ( qualified_scanen_wire_X5 ) | ( qualified_scanen_wire_X6 ) | ( qualified_scanen_wire_X7 ) | ( qualified_scanen_wire_X8 ) | ( qualified_scanen_wire_X9 ) | ( qualified_scanen_wire_X10 ) | ( qualified_scanen_wire_X11 ) | ( qualified_scanen_wire_X12 ) | ( qualified_scanen_wire_X13 ) | ( qualified_scanen_wire_X14 ) | ( qualified_scanen_wire_X15 ) | ( qualified_scanen_wire_X16 ) | ( qualified_scanen_wire_X17 ) | ( qualified_scanen_wire_X18 ) | ( qualified_scanen_wire_X19 ) | ( qualified_scanen_wire_X20 ) | ( qualified_scanen_wire_X21 ) | ( qualified_scanen_wire_X22 ) | ( qualified_scanen_wire_X23 ) | ( qualified_scanen_wire_X24 ) | ( qualified_scanen_wire_X25 ) | ( qualified_scanen_wire_X26 ) | ( qualified_scanen_wire_X27 ) | ( qualified_scanen_wire_X28 ) | ( qualified_scanen_wire_X29 ) | ( qualified_scanen_wire_X30 ) | ( qualified_scanen_wire_X31 );
  assign D_X = ( D_X0 ) | ( D_X1 );
  assign clk_X = ( clk_X0 ) | ( clk_X1 ) | ( clk_X2 ) | ( clk_X3 ) | ( clk_X4 ) | ( clk_X5 ) | ( clk_X6 ) | ( clk_X7 ) | ( clk_X8 ) | ( clk_X9 ) | ( clk_X10 ) | ( clk_X11 ) | ( clk_X12 ) | ( clk_X13 ) | ( clk_X14 ) | ( clk_X15 ) | ( clk_X16 ) | ( clk_X17 ) | ( clk_X18 ) | ( clk_X19 ) | ( clk_X20 ) | ( clk_X21 ) | ( clk_X22 ) | ( clk_X23 ) | ( clk_X24 ) | ( clk_X25 ) | ( clk_X26 ) | ( clk_X27 ) | ( clk_X28 ) | ( clk_X29 ) | ( clk_X30 ) | ( clk_X31 ) | ( clk_X32 );
  assign scanen_wire_X = ( scanen_wire_X0 );
  assign shiftDR_X = ( shiftDR_X0 );
  assign scanin_wire_X = ( scanin_wire_X0 );
  assign scanin_X = ( scanin_X0 );
  assign sel_X = ( sel_X0 ) | ( sel_X1 );
  assign scanout_X = ( scanout_X0 );
  assign Q_X = ( Q_X0 ) | ( Q_X1 ) | ( Q_X2 );
  assign scanout_wire_R = ( scanout_wire_X0 & scanout_wire_R0 ) | ( scanout_wire_X1 & scanout_wire_R1 );
  assign qualified_scanin_wire_R = ( qualified_scanin_wire_X0 & qualified_scanin_wire_R0 ) | ( qualified_scanin_wire_X1 & qualified_scanin_wire_R1 );
  assign qualified_scanen_wire_R = ( qualified_scanen_wire_X0 & qualified_scanen_wire_R0 ) | ( qualified_scanen_wire_X1 & qualified_scanen_wire_R1 ) | ( qualified_scanen_wire_X2 & qualified_scanen_wire_R2 ) | ( qualified_scanen_wire_X3 & qualified_scanen_wire_R3 ) | ( qualified_scanen_wire_X4 & qualified_scanen_wire_R4 ) | ( qualified_scanen_wire_X5 & qualified_scanen_wire_R5 ) | ( qualified_scanen_wire_X6 & qualified_scanen_wire_R6 ) | ( qualified_scanen_wire_X7 & qualified_scanen_wire_R7 ) | ( qualified_scanen_wire_X8 & qualified_scanen_wire_R8 ) | ( qualified_scanen_wire_X9 & qualified_scanen_wire_R9 ) | ( qualified_scanen_wire_X10 & qualified_scanen_wire_R10 ) | ( qualified_scanen_wire_X11 & qualified_scanen_wire_R11 ) | ( qualified_scanen_wire_X12 & qualified_scanen_wire_R12 ) | ( qualified_scanen_wire_X13 & qualified_scanen_wire_R13 ) | ( qualified_scanen_wire_X14 & qualified_scanen_wire_R14 ) | ( qualified_scanen_wire_X15 & qualified_scanen_wire_R15 ) | ( qualified_scanen_wire_X16 & qualified_scanen_wire_R16 ) | ( qualified_scanen_wire_X17 & qualified_scanen_wire_R17 ) | ( qualified_scanen_wire_X18 & qualified_scanen_wire_R18 ) | ( qualified_scanen_wire_X19 & qualified_scanen_wire_R19 ) | ( qualified_scanen_wire_X20 & qualified_scanen_wire_R20 ) | ( qualified_scanen_wire_X21 & qualified_scanen_wire_R21 ) | ( qualified_scanen_wire_X22 & qualified_scanen_wire_R22 ) | ( qualified_scanen_wire_X23 & qualified_scanen_wire_R23 ) | ( qualified_scanen_wire_X24 & qualified_scanen_wire_R24 ) | ( qualified_scanen_wire_X25 & qualified_scanen_wire_R25 ) | ( qualified_scanen_wire_X26 & qualified_scanen_wire_R26 ) | ( qualified_scanen_wire_X27 & qualified_scanen_wire_R27 ) | ( qualified_scanen_wire_X28 & qualified_scanen_wire_R28 ) | ( qualified_scanen_wire_X29 & qualified_scanen_wire_R29 ) | ( qualified_scanen_wire_X30 & qualified_scanen_wire_R30 ) | ( qualified_scanen_wire_X31 & qualified_scanen_wire_R31 );
  assign D_R = ( D_X0 & D_R0 ) | ( D_X1 & D_R1 );
  assign clk_R = ( clk_X0 & clk_R0 ) | ( clk_X1 & clk_R1 ) | ( clk_X2 & clk_R2 ) | ( clk_X3 & clk_R3 ) | ( clk_X4 & clk_R4 ) | ( clk_X5 & clk_R5 ) | ( clk_X6 & clk_R6 ) | ( clk_X7 & clk_R7 ) | ( clk_X8 & clk_R8 ) | ( clk_X9 & clk_R9 ) | ( clk_X10 & clk_R10 ) | ( clk_X11 & clk_R11 ) | ( clk_X12 & clk_R12 ) | ( clk_X13 & clk_R13 ) | ( clk_X14 & clk_R14 ) | ( clk_X15 & clk_R15 ) | ( clk_X16 & clk_R16 ) | ( clk_X17 & clk_R17 ) | ( clk_X18 & clk_R18 ) | ( clk_X19 & clk_R19 ) | ( clk_X20 & clk_R20 ) | ( clk_X21 & clk_R21 ) | ( clk_X22 & clk_R22 ) | ( clk_X23 & clk_R23 ) | ( clk_X24 & clk_R24 ) | ( clk_X25 & clk_R25 ) | ( clk_X26 & clk_R26 ) | ( clk_X27 & clk_R27 ) | ( clk_X28 & clk_R28 ) | ( clk_X29 & clk_R29 ) | ( clk_X30 & clk_R30 ) | ( clk_X31 & clk_R31 ) | ( clk_X32 & clk_R32 );
  assign scanen_wire_R = ( scanen_wire_X0 & scanen_wire_R0 );
  assign shiftDR_R = ( shiftDR_X0 & shiftDR_R0 );
  assign scanin_wire_R = ( scanin_wire_X0 & scanin_wire_R0 );
  assign scanin_R = ( scanin_X0 & scanin_R0 );
  assign sel_R = ( sel_X0 & sel_R0 ) | ( sel_X1 & sel_R1 );
  assign scanout_R = ( scanout_X0 & scanout_R0 );
  assign Q_R = ( Q_X0 & Q_R0 ) | ( Q_X1 & Q_R1 ) | ( Q_X2 & Q_R2 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { Q_conn_R , Q_conn_C , Q_conn_X , clk_wire_R , clk_wire_C , clk_wire_X , next_Q_R , next_Q_C , next_Q_X  } = 0;
 // ground taints for unused wire slices
  assign { Q_R2 [0] } = 0;
  assign { Q_X2 [0] } = 0;
  assign { Q_C2 [0] } = 0;
  assign rst_zy = reset_ ;
endmodule
