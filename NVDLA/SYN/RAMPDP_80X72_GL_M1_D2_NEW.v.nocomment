module RAMPDP_80X72_GL_M1_D2(WE, CLK, IDDQ, SVOP_0, SVOP_1, SVOP_2, SVOP_3, SVOP_4, SVOP_5, SVOP_6, SVOP_7, WD_71, WD_70, WD_69, WD_68, WD_67, WD_66, WD_65, WD_64, WD_63, WD_62, WD_61, WD_60, WD_59, WD_58, WD_57, WD_56, WD_55, WD_54, WD_53, WD_52, WD_51, WD_50, WD_49, WD_48, WD_47, WD_46, WD_45, WD_44, WD_43, WD_42, WD_41, WD_40, WD_39, WD_38, WD_37, WD_36, WD_35, WD_34, WD_33, WD_32, WD_31, WD_30, WD_29, WD_28, WD_27, WD_26, WD_25, WD_24, WD_23, WD_22, WD_21, WD_20, WD_19, WD_18, WD_17, WD_16, WD_15, WD_14, WD_13, WD_12, WD_11, WD_10, WD_9, WD_8, WD_7, WD_6, WD_5, WD_4, WD_3, WD_2, WD_1, WD_0, RD_71, RD_70, RD_69, RD_68, RD_67, RD_66, RD_65, RD_64, RD_63, RD_62, RD_61, RD_60, RD_59, RD_58, RD_57, RD_56, RD_55, RD_54, RD_53, RD_52, RD_51, RD_50, RD_49, RD_48, RD_47, RD_46, RD_45, RD_44, RD_43, RD_42, RD_41, RD_40, RD_39, RD_38, RD_37, RD_36, RD_35, RD_34, RD_33, RD_32, RD_31, RD_30, RD_29, RD_28, RD_27, RD_26, RD_25, RD_24, RD_23, RD_22, RD_21, RD_20, RD_19, RD_18, RD_17, RD_16, RD_15, RD_14, RD_13, RD_12, RD_11, RD_10, RD_9, RD_8, RD_7, RD_6, RD_5, RD_4, RD_3, RD_2, RD_1, RD_0, RE, RADR_6, RADR_5, RADR_4, RADR_3, RADR_2, RADR_1, RADR_0, WADR_6, WADR_5, WADR_4, WADR_3, WADR_2, WADR_1, WADR_0, SLEEP_EN_7, SLEEP_EN_6, SLEEP_EN_5, SLEEP_EN_4, SLEEP_EN_3, SLEEP_EN_2, SLEEP_EN_1, SLEEP_EN_0, RET_EN);
  wire [71:0] _0_;
  input CLK;
  wire GND;
  input IDDQ;
  wire [6:0] RA;
  input RADR_0;
  input RADR_1;
  input RADR_2;
  input RADR_3;
  input RADR_4;
  input RADR_5;
  input RADR_6;
  wire [71:0] RD;
  output RD_0;
  output RD_1;
  output RD_10;
  output RD_11;
  output RD_12;
  output RD_13;
  output RD_14;
  output RD_15;
  output RD_16;
  output RD_17;
  output RD_18;
  output RD_19;
  output RD_2;
  output RD_20;
  output RD_21;
  output RD_22;
  output RD_23;
  output RD_24;
  output RD_25;
  output RD_26;
  output RD_27;
  output RD_28;
  output RD_29;
  output RD_3;
  output RD_30;
  output RD_31;
  output RD_32;
  output RD_33;
  output RD_34;
  output RD_35;
  output RD_36;
  output RD_37;
  output RD_38;
  output RD_39;
  output RD_4;
  output RD_40;
  output RD_41;
  output RD_42;
  output RD_43;
  output RD_44;
  output RD_45;
  output RD_46;
  output RD_47;
  output RD_48;
  output RD_49;
  output RD_5;
  output RD_50;
  output RD_51;
  output RD_52;
  output RD_53;
  output RD_54;
  output RD_55;
  output RD_56;
  output RD_57;
  output RD_58;
  output RD_59;
  output RD_6;
  output RD_60;
  output RD_61;
  output RD_62;
  output RD_63;
  output RD_64;
  output RD_65;
  output RD_66;
  output RD_67;
  output RD_68;
  output RD_69;
  output RD_7;
  output RD_70;
  output RD_71;
  output RD_8;
  output RD_9;
  input RE;
  input RET_EN;
  wire [7:0] SLEEP_EN;
  input SLEEP_EN_0;
  input SLEEP_EN_1;
  input SLEEP_EN_2;
  input SLEEP_EN_3;
  input SLEEP_EN_4;
  input SLEEP_EN_5;
  input SLEEP_EN_6;
  input SLEEP_EN_7;
  wire [7:0] SVOP;
  input SVOP_0;
  input SVOP_1;
  input SVOP_2;
  input SVOP_3;
  input SVOP_4;
  input SVOP_5;
  input SVOP_6;
  input SVOP_7;
  wire VDD;
  wire [6:0] WA;
  input WADR_0;
  input WADR_1;
  input WADR_2;
  input WADR_3;
  input WADR_4;
  input WADR_5;
  input WADR_6;
  wire [71:0] WD;
  input WD_0;
  input WD_1;
  input WD_10;
  input WD_11;
  input WD_12;
  input WD_13;
  input WD_14;
  input WD_15;
  input WD_16;
  input WD_17;
  input WD_18;
  input WD_19;
  input WD_2;
  input WD_20;
  input WD_21;
  input WD_22;
  input WD_23;
  input WD_24;
  input WD_25;
  input WD_26;
  input WD_27;
  input WD_28;
  input WD_29;
  input WD_3;
  input WD_30;
  input WD_31;
  input WD_32;
  input WD_33;
  input WD_34;
  input WD_35;
  input WD_36;
  input WD_37;
  input WD_38;
  input WD_39;
  input WD_4;
  input WD_40;
  input WD_41;
  input WD_42;
  input WD_43;
  input WD_44;
  input WD_45;
  input WD_46;
  input WD_47;
  input WD_48;
  input WD_49;
  input WD_5;
  input WD_50;
  input WD_51;
  input WD_52;
  input WD_53;
  input WD_54;
  input WD_55;
  input WD_56;
  input WD_57;
  input WD_58;
  input WD_59;
  input WD_6;
  input WD_60;
  input WD_61;
  input WD_62;
  input WD_63;
  input WD_64;
  input WD_65;
  input WD_66;
  input WD_67;
  input WD_68;
  input WD_69;
  input WD_7;
  input WD_70;
  input WD_71;
  input WD_8;
  input WD_9;
  input WE;
  wire clamp_rd;
  wire clobber_array;
  wire clobber_flops;
  wire clobber_x;
  wire [71:0] fangyuan0;
  assign fangyuan0 = { RD_71, RD_70, RD_69, RD_68, RD_67, RD_66, RD_65, RD_64, RD_63, RD_62, RD_61, RD_60, RD_59, RD_58, RD_57, RD_56, RD_55, RD_54, RD_53, RD_52, RD_51, RD_50, RD_49, RD_48, RD_47, RD_46, RD_45, RD_44, RD_43, RD_42, RD_41, RD_40, RD_39, RD_38, RD_37, RD_36, RD_35, RD_34, RD_33, RD_32, RD_31, RD_30, RD_29, RD_28, RD_27, RD_26, RD_25, RD_24, RD_23, RD_22, RD_21, RD_20, RD_19, RD_18, RD_17, RD_16, RD_15, RD_14, RD_13, RD_12, RD_11, RD_10, RD_9, RD_8, RD_7, RD_6, RD_5, RD_4, RD_3, RD_2, RD_1, RD_0 };

  assign fangyuan0 = RD & _0_;
  wire [71:0] fangyuan1;
  assign fangyuan1 = {};

  assign _0_ = ~ fangyuan1;
  RAM_BANK_RAMPDP_80X72_GL_M1_D2 ITOP (
    .CLK(CLK),
    .IDDQ(IDDQ),
    .RA({ RADR_6, RADR_5, RADR_4, RADR_3, RADR_2, RADR_1, RADR_0 }),
    .RD(RD),
    .RE(RE),
    .RET_EN(RET_EN),
    .SLEEP_EN({ SLEEP_EN_7, SLEEP_EN_6, SLEEP_EN_5, SLEEP_EN_4, SLEEP_EN_3, SLEEP_EN_2, SLEEP_EN_1, SLEEP_EN_0 }),
    .SVOP({ SVOP_7, SVOP_6, SVOP_5, SVOP_4, SVOP_3, SVOP_2, SVOP_1, SVOP_0 }),
    .WA({ WADR_6, WADR_5, WADR_4, WADR_3, WADR_2, WADR_1, WADR_0 }),
    .WD({ WD_71, WD_70, WD_69, WD_68, WD_67, WD_66, WD_65, WD_64, WD_63, WD_62, WD_61, WD_60, WD_59, WD_58, WD_57, WD_56, WD_55, WD_54, WD_53, WD_52, WD_51, WD_50, WD_49, WD_48, WD_47, WD_46, WD_45, WD_44, WD_43, WD_42, WD_41, WD_40, WD_39, WD_38, WD_37, WD_36, WD_35, WD_34, WD_33, WD_32, WD_31, WD_30, WD_29, WD_28, WD_27, WD_26, WD_25, WD_24, WD_23, WD_22, WD_21, WD_20, WD_19, WD_18, WD_17, WD_16, WD_15, WD_14, WD_13, WD_12, WD_11, WD_10, WD_9, WD_8, WD_7, WD_6, WD_5, WD_4, WD_3, WD_2, WD_1, WD_0 }),
    .WE(WE),
    .clobber_array(1'b0),
    .clobber_flops(1'b0)
  );
  assign GND = 1'b0;
  assign RA = { RADR_6, RADR_5, RADR_4, RADR_3, RADR_2, RADR_1, RADR_0 };
  assign SLEEP_EN = { SLEEP_EN_7, SLEEP_EN_6, SLEEP_EN_5, SLEEP_EN_4, SLEEP_EN_3, SLEEP_EN_2, SLEEP_EN_1, SLEEP_EN_0 };
  assign SVOP = { SVOP_7, SVOP_6, SVOP_5, SVOP_4, SVOP_3, SVOP_2, SVOP_1, SVOP_0 };
  assign VDD = 1'b1;
  assign WA = { WADR_6, WADR_5, WADR_4, WADR_3, WADR_2, WADR_1, WADR_0 };
  assign WD = { WD_71, WD_70, WD_69, WD_68, WD_67, WD_66, WD_65, WD_64, WD_63, WD_62, WD_61, WD_60, WD_59, WD_58, WD_57, WD_56, WD_55, WD_54, WD_53, WD_52, WD_51, WD_50, WD_49, WD_48, WD_47, WD_46, WD_45, WD_44, WD_43, WD_42, WD_41, WD_40, WD_39, WD_38, WD_37, WD_36, WD_35, WD_34, WD_33, WD_32, WD_31, WD_30, WD_29, WD_28, WD_27, WD_26, WD_25, WD_24, WD_23, WD_22, WD_21, WD_20, WD_19, WD_18, WD_17, WD_16, WD_15, WD_14, WD_13, WD_12, WD_11, WD_10, WD_9, WD_8, WD_7, WD_6, WD_5, WD_4, WD_3, WD_2, WD_1, WD_0 };
  assign clamp_rd = SLEEP_EN_7;
  assign clobber_array = 1'b0;
  assign clobber_flops = 1'b0;
  assign clobber_x = 1'b0;
endmodule
