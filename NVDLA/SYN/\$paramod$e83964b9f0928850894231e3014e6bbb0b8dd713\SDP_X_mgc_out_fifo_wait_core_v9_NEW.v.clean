module \$paramod$e83964b9f0928850894231e3014e6bbb0b8dd713\SDP_X_mgc_out_fifo_wait_core_v9 (clk, en, arst, srst, ld, vd, d, lz, vz, z, sd);
  wire [527:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire [527:0] _13_;
  wire _14_;
  wire [31:0] \FIFO_REG.delta ;
  wire active;
  input arst;
  reg [527:0] buff;
  wire [527:0] buff_nxt;
  wire [527:0] buff_pre;
  input clk;
  wire count;
  wire [31:0] count_t;
  input [527:0] d;
  input en;
  wire en_l;
  wire en_l_s;
  wire en_l_var;
  wire [31:0] i;
  input ld;
  output lz;
  wire [32:0] n_elem;
  output [1:0] sd;
  wire [32:0] size_t;
  input srst;
  reg stat;
  wire stat_after;
  wire stat_before;
  wire stat_nxt;
  wire stat_pre;
  output vd;
  input vz;
  output [527:0] z;
  wire [1:0] fangyuan0;
  assign fangyuan0 = { \FIFO_REG.delta [31], \FIFO_REG.delta [0] };
  assign sd = stat + fangyuan0;
  assign _02_ = vz & stat;
  assign \FIFO_REG.delta [31] = _06_ & _02_;
  assign _03_ = stat & _08_;
  assign _04_ = stat & ld;
  assign _05_ = ld & _08_;
  assign en_l_var = ld & _09_;
  assign _06_ = ~ ld;
  assign _07_ = ~ stat;
  assign _08_ = ~ vz;
  assign _09_ = ~ _03_;
  assign _10_ = ~ active;
  assign _11_ = ~ en_l_var;
  assign active = ld | vz;
  assign vd = vz | _07_;
  assign lz = ld | stat;
  assign _12_ = _03_ | _04_;
  assign stat_pre = _12_ | _05_;
  assign en_l_s = en | _10_;
  assign en_l = en | _11_;
  always @(posedge clk or negedge arst)
    if (!arst)
      buff <= 528'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    else
      buff <= _00_;
  always @(posedge clk or negedge arst)
    if (!arst)
      stat <= 1'b0;
    else
      stat <= _01_;
  assign _13_ = en_l ? buff : d;
  assign _00_ = srst ? _13_ : 528'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign _14_ = en_l_s ? stat : stat_pre;
  assign _01_ = srst ? _14_ : 1'b0;
  assign z = stat ? buff : d;
  assign \FIFO_REG.delta [0] = _02_ ^ ld;
  assign \FIFO_REG.delta [30:1] = { \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31] };
  assign buff_nxt = d;
  assign buff_pre = d;
  assign count = stat;
  assign count_t = { 31'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0, stat };
  assign i = 32'd4294967295;
  assign n_elem = 33'b000000000000000000000000000000000;
  assign size_t[1:0] = sd;
  assign stat_after = 1'b1;
  assign stat_before = 1'b0;
  assign stat_nxt = stat_pre;
endmodule
