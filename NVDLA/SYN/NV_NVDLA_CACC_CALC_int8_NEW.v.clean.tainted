  logic _00_;
  logic _00__T ;
  logic _00__R ;
  logic _00__C ;
  logic _00__X ;
  logic [13:0] _00__S ;
  logic [34:0] _01_;
  logic [34:0] _01__T ;
  logic [34:0] _01__R ;
  logic [34:0] _01__C ;
  logic [34:0] _01__X ;
  logic [13:0] _01__S ;
  logic [31:0] _02_;
  logic [31:0] _02__T ;
  logic [31:0] _02__R ;
  logic [31:0] _02__C ;
  logic [31:0] _02__X ;
  logic [13:0] _02__S ;
  logic _03_;
  logic _03__T ;
  logic _03__R ;
  logic _03__C ;
  logic _03__X ;
  logic [13:0] _03__S ;
  logic [33:0] _04_;
  logic [33:0] _04__T ;
  logic [33:0] _04__R ;
  logic [33:0] _04__C ;
  logic [33:0] _04__X ;
  logic [13:0] _04__S ;
  logic _05_;
  logic _05__T ;
  logic _05__R ;
  logic _05__C ;
  logic _05__X ;
  logic [13:0] _05__S ;
  logic _06_;
  logic _06__T ;
  logic _06__R ;
  logic _06__C ;
  logic _06__X ;
  logic [13:0] _06__S ;
  logic _07_;
  logic _07__T ;
  logic _07__R ;
  logic _07__C ;
  logic _07__X ;
  logic [13:0] _07__S ;
  logic _08_;
  logic _08__T ;
  logic _08__R ;
  logic _08__C ;
  logic _08__X ;
  logic [13:0] _08__S ;
  logic _09_;
  logic _09__T ;
  logic _09__R ;
  logic _09__C ;
  logic _09__X ;
  logic [13:0] _09__S ;
  logic _10_;
  logic _10__T ;
  logic _10__R ;
  logic _10__C ;
  logic _10__X ;
  logic [13:0] _10__S ;
  logic _11_;
  logic _11__T ;
  logic _11__R ;
  logic _11__C ;
  logic _11__X ;
  logic [13:0] _11__S ;
  logic _12_;
  logic _12__T ;
  logic _12__R ;
  logic _12__C ;
  logic _12__X ;
  logic [13:0] _12__S ;
  logic _13_;
  logic _13__T ;
  logic _13__R ;
  logic _13__C ;
  logic _13__X ;
  logic [13:0] _13__S ;
  logic _14_;
  logic _14__T ;
  logic _14__R ;
  logic _14__C ;
  logic _14__X ;
  logic [13:0] _14__S ;
  logic _15_;
  logic _15__T ;
  logic _15__R ;
  logic _15__C ;
  logic _15__X ;
  logic [13:0] _15__S ;
  logic _16_;
  logic _16__T ;
  logic _16__R ;
  logic _16__C ;
  logic _16__X ;
  logic [13:0] _16__S ;
  logic _17_;
  logic _17__T ;
  logic _17__R ;
  logic _17__C ;
  logic _17__X ;
  logic [13:0] _17__S ;
  logic _18_;
  logic _18__T ;
  logic _18__R ;
  logic _18__C ;
  logic _18__X ;
  logic [13:0] _18__S ;
  input [4:0] cfg_truncate;
  input [4:0] cfg_truncate_T ;
  input [13:0] cfg_truncate_S ;
  output [4:0] cfg_truncate_R ;
  output [4:0] cfg_truncate_X ;
  output [4:0] cfg_truncate_C ;
  logic [21:0] di_pd;
  logic [21:0] di_pd_T ;
  logic [21:0] di_pd_R ;
  logic [21:0] di_pd_C ;
  logic [21:0] di_pd_X ;
  logic [13:0] di_pd_S ;
  logic [31:0] i_final_result;
  logic [31:0] i_final_result_T ;
  logic [31:0] i_final_result_R ;
  logic [31:0] i_final_result_C ;
  logic [31:0] i_final_result_X ;
  logic [13:0] i_final_result_S ;
  logic i_final_vld;
  logic i_final_vld_T ;
  logic i_final_vld_R ;
  logic i_final_vld_C ;
  logic i_final_vld_X ;
  logic [13:0] i_final_vld_S ;
  logic i_guide;
  logic i_guide_T ;
  logic i_guide_R ;
  logic i_guide_C ;
  logic i_guide_X ;
  logic [13:0] i_guide_S ;
  logic [33:0] i_partial_result;
  logic [33:0] i_partial_result_T ;
  logic [33:0] i_partial_result_R ;
  logic [33:0] i_partial_result_C ;
  logic [33:0] i_partial_result_X ;
  logic [13:0] i_partial_result_S ;
  logic i_partial_vld;
  logic i_partial_vld_T ;
  logic i_partial_vld_R ;
  logic i_partial_vld_C ;
  logic i_partial_vld_X ;
  logic [13:0] i_partial_vld_S ;
  logic i_point5;
  logic i_point5_T ;
  logic i_point5_R ;
  logic i_point5_C ;
  logic i_point5_X ;
  logic [13:0] i_point5_S ;
  logic [31:0] i_pos_pd;
  logic [31:0] i_pos_pd_T ;
  logic [31:0] i_pos_pd_R ;
  logic [31:0] i_pos_pd_C ;
  logic [31:0] i_pos_pd_X ;
  logic [13:0] i_pos_pd_S ;
  logic [33:0] i_pre_sft_pd;
  logic [33:0] i_pre_sft_pd_T ;
  logic [33:0] i_pre_sft_pd_R ;
  logic [33:0] i_pre_sft_pd_C ;
  logic [33:0] i_pre_sft_pd_X ;
  logic [13:0] i_pre_sft_pd_S ;
  logic [32:0] i_sat_bits;
  logic [32:0] i_sat_bits_T ;
  logic [32:0] i_sat_bits_R ;
  logic [32:0] i_sat_bits_C ;
  logic [32:0] i_sat_bits_X ;
  logic [13:0] i_sat_bits_S ;
  logic [33:0] i_sat_pd;
  logic [33:0] i_sat_pd_T ;
  logic [33:0] i_sat_pd_R ;
  logic [33:0] i_sat_pd_C ;
  logic [33:0] i_sat_pd_X ;
  logic [13:0] i_sat_pd_S ;
  logic i_sat_sel;
  logic  i_sat_sel_T ;
  logic  i_sat_sel_PREV_VAL1 ;
  logic  i_sat_sel_PREV_VAL2 ;
  logic  i_sat_sel_R ;
  logic  i_sat_sel_X ;
  logic  i_sat_sel_C ;
  logic [13:0] i_sat_sel_S ;
  logic i_sat_sel_t_flag ;
  logic i_sat_sel_r_flag ;
  assign i_sat_sel_S = 938 ;
  logic i_sat_sign;
  logic i_sat_sign_T ;
  logic i_sat_sign_R ;
  logic i_sat_sign_C ;
  logic i_sat_sign_X ;
  logic [13:0] i_sat_sign_S ;
  logic i_sat_vld;
  logic  i_sat_vld_T ;
  logic  i_sat_vld_PREV_VAL1 ;
  logic  i_sat_vld_PREV_VAL2 ;
  logic  i_sat_vld_R ;
  logic  i_sat_vld_X ;
  logic  i_sat_vld_C ;
  logic [13:0] i_sat_vld_S ;
  logic i_sat_vld_t_flag ;
  logic i_sat_vld_r_flag ;
  assign i_sat_vld_S = 939 ;
  logic i_sel;
  logic i_sel_T ;
  logic i_sel_R ;
  logic i_sel_C ;
  logic i_sel_X ;
  logic [13:0] i_sel_S ;
  logic [31:0] i_sft_max;
  logic [31:0] i_sft_max_T ;
  logic [31:0] i_sft_max_R ;
  logic [31:0] i_sft_max_C ;
  logic [31:0] i_sft_max_X ;
  logic [13:0] i_sft_max_S ;
  logic i_sft_need_sat;
  logic i_sft_need_sat_T ;
  logic i_sft_need_sat_R ;
  logic i_sft_need_sat_C ;
  logic i_sft_need_sat_X ;
  logic [13:0] i_sft_need_sat_S ;
  logic [32:0] i_sft_pd;
  logic [32:0] i_sft_pd_T ;
  logic [32:0] i_sft_pd_R ;
  logic [32:0] i_sft_pd_C ;
  logic [32:0] i_sft_pd_X ;
  logic [13:0] i_sft_pd_S ;
  logic [14:0] i_stick;
  logic [14:0] i_stick_T ;
  logic [14:0] i_stick_R ;
  logic [14:0] i_stick_C ;
  logic [14:0] i_stick_X ;
  logic [13:0] i_stick_S ;
  logic i_sum_msb;
  logic i_sum_msb_T ;
  logic i_sum_msb_R ;
  logic i_sum_msb_C ;
  logic i_sum_msb_X ;
  logic [13:0] i_sum_msb_S ;
  logic [34:0] i_sum_pd;
  logic [34:0]  i_sum_pd_T ;
  logic [34:0]  i_sum_pd_PREV_VAL1 ;
  logic [34:0]  i_sum_pd_PREV_VAL2 ;
  logic [34:0]  i_sum_pd_R ;
  logic [34:0]  i_sum_pd_X ;
  logic [34:0]  i_sum_pd_C ;
  logic [13:0] i_sum_pd_S ;
  logic i_sum_pd_t_flag ;
  logic i_sum_pd_r_flag ;
  assign i_sum_pd_S = 940 ;
  logic [34:0] i_sum_pd_nxt;
  logic [34:0] i_sum_pd_nxt_T ;
  logic [34:0] i_sum_pd_nxt_R ;
  logic [34:0] i_sum_pd_nxt_C ;
  logic [34:0] i_sum_pd_nxt_X ;
  logic [13:0] i_sum_pd_nxt_S ;
  logic i_sum_sign;
  logic i_sum_sign_T ;
  logic i_sum_sign_R ;
  logic i_sum_sign_C ;
  logic i_sum_sign_X ;
  logic [13:0] i_sum_sign_S ;
  logic [31:0] i_tru_pd;
  logic [31:0] i_tru_pd_T ;
  logic [31:0] i_tru_pd_R ;
  logic [31:0] i_tru_pd_C ;
  logic [31:0] i_tru_pd_X ;
  logic [13:0] i_tru_pd_S ;
  logic i_vld;
  logic i_vld_T ;
  logic i_vld_R ;
  logic i_vld_C ;
  logic i_vld_X ;
  logic [13:0] i_vld_S ;
  input [21:0] in_data;
  input [21:0] in_data_T ;
  input [13:0] in_data_S ;
  output [21:0] in_data_R ;
  output [21:0] in_data_X ;
  output [21:0] in_data_C ;
  logic [33:0] in_mask_op;
  logic [33:0] in_mask_op_T ;
  logic [33:0] in_mask_op_R ;
  logic [33:0] in_mask_op_C ;
  logic [33:0] in_mask_op_X ;
  logic [13:0] in_mask_op_S ;
  input [33:0] in_op;
  input [33:0] in_op_T ;
  input [13:0] in_op_S ;
  output [33:0] in_op_R ;
  output [33:0] in_op_X ;
  output [33:0] in_op_C ;
  input in_op_valid;
  input in_op_valid_T ;
  input [13:0] in_op_valid_S ;
  output in_op_valid_R ;
  output in_op_valid_X ;
  output in_op_valid_C ;
  input in_sel;
  input in_sel_T ;
  input [13:0] in_sel_S ;
  output in_sel_R ;
  output in_sel_X ;
  output in_sel_C ;
  input in_valid;
  input in_valid_T ;
  input [13:0] in_valid_S ;
  output in_valid_R ;
  output in_valid_X ;
  output in_valid_C ;
  input nvdla_core_clk;
  input nvdla_core_clk_T ;
  input [13:0] nvdla_core_clk_S ;
  output nvdla_core_clk_R ;
  output nvdla_core_clk_X ;
  output nvdla_core_clk_C ;
  input nvdla_core_rstn;
  input nvdla_core_rstn_T ;
  input [13:0] nvdla_core_rstn_S ;
  output nvdla_core_rstn_R ;
  output nvdla_core_rstn_X ;
  output nvdla_core_rstn_C ;
  logic [33:0] oi_pd;
  logic [33:0] oi_pd_T ;
  logic [33:0] oi_pd_R ;
  logic [33:0] oi_pd_C ;
  logic [33:0] oi_pd_X ;
  logic [13:0] oi_pd_S ;
  output [31:0] out_final_data;
  logic [31:0] out_final_data ;
  output [31:0] out_final_data_T ;
  logic [31:0] out_final_data_T ;
  logic [31:0] out_final_data_R ;
  logic [31:0] out_final_data_C ;
  logic [31:0] out_final_data_X ;
  logic [13:0] out_final_data_S ;
  input [31:0] out_final_data_R0 ;
  input [31:0] out_final_data_C0 ;
  input [31:0] out_final_data_X0 ;
  output [13:0] out_final_data_S ;
  logic [31:0] out_final_data;
  logic [31:0]  out_final_data_T ;
  logic [31:0]  out_final_data_PREV_VAL1 ;
  logic [31:0]  out_final_data_PREV_VAL2 ;
  logic out_final_data_t_flag ;
  logic out_final_data_r_flag ;
  assign out_final_data_S = 941 ;
  output out_final_sat;
  logic out_final_sat ;
  output out_final_sat_T ;
  logic out_final_sat_T ;
  logic out_final_sat_R ;
  logic out_final_sat_C ;
  logic out_final_sat_X ;
  logic [13:0] out_final_sat_S ;
  input out_final_sat_R0 ;
  input out_final_sat_C0 ;
  input out_final_sat_X0 ;
  output [13:0] out_final_sat_S ;
  logic out_final_sat;
  logic  out_final_sat_T ;
  logic  out_final_sat_PREV_VAL1 ;
  logic  out_final_sat_PREV_VAL2 ;
  logic out_final_sat_t_flag ;
  logic out_final_sat_r_flag ;
  assign out_final_sat_S = 942 ;
  output out_final_valid;
  logic out_final_valid ;
  output out_final_valid_T ;
  logic out_final_valid_T ;
  logic out_final_valid_R ;
  logic out_final_valid_C ;
  logic out_final_valid_X ;
  logic [13:0] out_final_valid_S ;
  input out_final_valid_R0 ;
  input out_final_valid_C0 ;
  input out_final_valid_X0 ;
  output [13:0] out_final_valid_S ;
  logic out_final_valid;
  logic  out_final_valid_T ;
  logic  out_final_valid_PREV_VAL1 ;
  logic  out_final_valid_PREV_VAL2 ;
  logic out_final_valid_t_flag ;
  logic out_final_valid_r_flag ;
  assign out_final_valid_S = 943 ;
  output [33:0] out_partial_data;
  logic [33:0] out_partial_data ;
  output [33:0] out_partial_data_T ;
  logic [33:0] out_partial_data_T ;
  logic [33:0] out_partial_data_R ;
  logic [33:0] out_partial_data_C ;
  logic [33:0] out_partial_data_X ;
  logic [13:0] out_partial_data_S ;
  input [33:0] out_partial_data_R0 ;
  input [33:0] out_partial_data_C0 ;
  input [33:0] out_partial_data_X0 ;
  output [13:0] out_partial_data_S ;
  logic [33:0] out_partial_data;
  logic [33:0]  out_partial_data_T ;
  logic [33:0]  out_partial_data_PREV_VAL1 ;
  logic [33:0]  out_partial_data_PREV_VAL2 ;
  logic out_partial_data_t_flag ;
  logic out_partial_data_r_flag ;
  assign out_partial_data_S = 944 ;
  output out_partial_valid;
  logic out_partial_valid ;
  output out_partial_valid_T ;
  logic out_partial_valid_T ;
  logic out_partial_valid_R ;
  logic out_partial_valid_C ;
  logic out_partial_valid_X ;
  logic [13:0] out_partial_valid_S ;
  input out_partial_valid_R0 ;
  input out_partial_valid_C0 ;
  input out_partial_valid_X0 ;
  output [13:0] out_partial_valid_S ;
  logic out_partial_valid;
  logic  out_partial_valid_T ;
  logic  out_partial_valid_PREV_VAL1 ;
  logic  out_partial_valid_PREV_VAL2 ;
  logic out_partial_valid_t_flag ;
  logic out_partial_valid_r_flag ;
  assign out_partial_valid_S = 945 ;
 assign i_sum_pd_nxt = in_data + oi_pd;
 assign i_sum_pd_nxt_S = 0 ;
 logic [21:0] in_data_C0 ;
 logic [21:0] in_data_R0 ;
 logic [21:0] in_data_X0 ;
 logic [33:0] oi_pd_C0 ;
 logic [33:0] oi_pd_R0 ;
 logic [33:0] oi_pd_X0 ;
 assign i_sum_pd_nxt_T = in_data_T | oi_pd_T ;
 assign in_data_C0 = i_sum_pd_nxt_C ;
 assign in_data_X0 = i_sum_pd_nxt_X ;
 assign oi_pd_C0 = i_sum_pd_nxt_C ;
 assign oi_pd_X0 = i_sum_pd_nxt_X ;
 assign in_data_R0 = i_sum_pd_nxt_R | ( i_sum_pd_nxt_C & oi_pd_T );
 assign oi_pd_R0 = i_sum_pd_nxt_R | ( i_sum_pd_nxt_C & in_data_T );
  assign i_tru_pd = i_sft_pd[31:0] + i_point5;
  assign i_tru_pd_S = 0 ;
  logic [32:0] i_sft_pd_C0 ;
  logic [32:0] i_sft_pd_R0 ;
  logic [32:0] i_sft_pd_X0 ;
  logic [0:0] i_point5_C0 ;
  logic [0:0] i_point5_R0 ;
  logic [0:0] i_point5_X0 ;
  assign i_tru_pd_T = i_sft_pd_T [31:0] | i_point5_T ;
  assign i_sft_pd_C0 [31:0] = i_tru_pd_C ;
  assign i_sft_pd_X0 [31:0] = i_tru_pd_X ;
  assign i_point5_C0 = i_tru_pd_C ;
  assign i_point5_X0 = i_tru_pd_X ;
  assign i_sft_pd_R0 [31:0] = i_tru_pd_R | ( i_tru_pd_C & i_point5_T );
  assign i_point5_R0 = i_tru_pd_R | ( i_tru_pd_C & i_sft_pd_T [31:0] );
  assign _05_ = i_sum_pd[34] & _10_;
  assign _05__S = 0 ;
  logic [34:0] i_sum_pd_C0 ;
  logic [34:0] i_sum_pd_R0 ;
  logic [34:0] i_sum_pd_X0 ;
  logic [0:0] _10__C0 ;
  logic [0:0] _10__R0 ;
  logic [0:0] _10__X0 ;
  assign _05__T = i_sum_pd_T [34] | _10__T ;
  assign i_sum_pd_C0 [34] = _05__C ;
  assign i_sum_pd_X0 [34] = _05__X ;
  assign _10__C0 = _05__C ;
  assign _10__X0 = _05__X ;
  assign i_sum_pd_R0 [34] = ( _05__R | _05__C & _10__T ) & { 1{ _10_ != 0 }} ;
  assign _10__R0 = ( _05__R | _05__C & i_sum_pd_T [34] ) & { 1{ i_sum_pd[34] != 0 }} ;
  assign _06_ = _09_ & _17_;
  assign _06__S = 0 ;
  logic [0:0] _09__C0 ;
  logic [0:0] _09__R0 ;
  logic [0:0] _09__X0 ;
  logic [0:0] _17__C0 ;
  logic [0:0] _17__R0 ;
  logic [0:0] _17__X0 ;
  assign _06__T = _09__T | _17__T ;
  assign _09__C0 = _06__C ;
  assign _09__X0 = _06__X ;
  assign _17__C0 = _06__C ;
  assign _17__X0 = _06__X ;
  assign _09__R0 = ( _06__R | _06__C & _17__T ) & { 1{ _17_ != 0 }} ;
  assign _17__R0 = ( _06__R | _06__C & _09__T ) & { 1{ _09_ != 0 }} ;
  assign _07_ = _09_ & _16_;
  assign _07__S = 0 ;
  logic [0:0] _09__C1 ;
  logic [0:0] _09__R1 ;
  logic [0:0] _09__X1 ;
  logic [0:0] _16__C0 ;
  logic [0:0] _16__R0 ;
  logic [0:0] _16__X0 ;
  assign _07__T = _09__T | _16__T ;
  assign _09__C1 = _07__C ;
  assign _09__X1 = _07__X ;
  assign _16__C0 = _07__C ;
  assign _16__X0 = _07__X ;
  assign _09__R1 = ( _07__R | _07__C & _16__T ) & { 1{ _16_ != 0 }} ;
  assign _16__R0 = ( _07__R | _07__C & _09__T ) & { 1{ _09_ != 0 }} ;
  assign _08_ = i_sat_sel & i_guide;
  assign _08__S = 0 ;
  logic [0:0] i_sat_sel_C0 ;
  logic [0:0] i_sat_sel_R0 ;
  logic [0:0] i_sat_sel_X0 ;
  logic [0:0] i_guide_C0 ;
  logic [0:0] i_guide_R0 ;
  logic [0:0] i_guide_X0 ;
  assign _08__T = i_sat_sel_T | i_guide_T ;
  assign i_sat_sel_C0 = _08__C ;
  assign i_sat_sel_X0 = _08__X ;
  assign i_guide_C0 = _08__C ;
  assign i_guide_X0 = _08__X ;
  assign i_sat_sel_R0 = ( _08__R | _08__C & i_guide_T ) & { 1{ i_guide != 0 }} ;
  assign i_guide_R0 = ( _08__R | _08__C & i_sat_sel_T ) & { 1{ i_sat_sel != 0 }} ;
  assign i_point5 = _08_ & _13_;
  assign i_point5_S = 0 ;
  logic [0:0] _08__C0 ;
  logic [0:0] _08__R0 ;
  logic [0:0] _08__X0 ;
  logic [0:0] _13__C0 ;
  logic [0:0] _13__R0 ;
  logic [0:0] _13__X0 ;
  assign i_point5_T = _08__T | _13__T ;
  assign _08__C0 = i_point5_C ;
  assign _08__X0 = i_point5_X ;
  assign _13__C0 = i_point5_C ;
  assign _13__X0 = i_point5_X ;
  assign _08__R0 = ( i_point5_R | i_point5_C & _13__T ) & { 1{ _13_ != 0 }} ;
  assign _13__R0 = ( i_point5_R | i_point5_C & _08__T ) & { 1{ _08_ != 0 }} ;
  assign i_partial_vld = i_sat_vld & _11_;
  assign i_partial_vld_S = 0 ;
  logic [0:0] i_sat_vld_C0 ;
  logic [0:0] i_sat_vld_R0 ;
  logic [0:0] i_sat_vld_X0 ;
  logic [0:0] _11__C0 ;
  logic [0:0] _11__R0 ;
  logic [0:0] _11__X0 ;
  assign i_partial_vld_T = i_sat_vld_T | _11__T ;
  assign i_sat_vld_C0 = i_partial_vld_C ;
  assign i_sat_vld_X0 = i_partial_vld_X ;
  assign _11__C0 = i_partial_vld_C ;
  assign _11__X0 = i_partial_vld_X ;
  assign i_sat_vld_R0 = ( i_partial_vld_R | i_partial_vld_C & _11__T ) & { 1{ _11_ != 0 }} ;
  assign _11__R0 = ( i_partial_vld_R | i_partial_vld_C & i_sat_vld_T ) & { 1{ i_sat_vld != 0 }} ;
  assign i_final_vld = i_sat_vld & i_sat_sel;
  assign i_final_vld_S = 0 ;
  logic [0:0] i_sat_vld_C1 ;
  logic [0:0] i_sat_vld_R1 ;
  logic [0:0] i_sat_vld_X1 ;
  logic [0:0] i_sat_sel_C1 ;
  logic [0:0] i_sat_sel_R1 ;
  logic [0:0] i_sat_sel_X1 ;
  assign i_final_vld_T = i_sat_vld_T | i_sat_sel_T ;
  assign i_sat_vld_C1 = i_final_vld_C ;
  assign i_sat_vld_X1 = i_final_vld_X ;
  assign i_sat_sel_C1 = i_final_vld_C ;
  assign i_sat_sel_X1 = i_final_vld_X ;
  assign i_sat_vld_R1 = ( i_final_vld_R | i_final_vld_C & i_sat_sel_T ) & { 1{ i_sat_sel != 0 }} ;
  assign i_sat_sel_R1 = ( i_final_vld_R | i_final_vld_C & i_sat_vld_T ) & { 1{ i_sat_vld != 0 }} ;
  assign _03_ = i_final_vld & i_sft_need_sat;
  assign _03__S = 0 ;
  logic [0:0] i_final_vld_C0 ;
  logic [0:0] i_final_vld_R0 ;
  logic [0:0] i_final_vld_X0 ;
  logic [0:0] i_sft_need_sat_C0 ;
  logic [0:0] i_sft_need_sat_R0 ;
  logic [0:0] i_sft_need_sat_X0 ;
  assign _03__T = i_final_vld_T | i_sft_need_sat_T ;
  assign i_final_vld_C0 = _03__C ;
  assign i_final_vld_X0 = _03__X ;
  assign i_sft_need_sat_C0 = _03__C ;
  assign i_sft_need_sat_X0 = _03__X ;
  assign i_final_vld_R0 = ( _03__R | _03__C & i_sft_need_sat_T ) & { 1{ i_sft_need_sat != 0 }} ;
  assign i_sft_need_sat_R0 = ( _03__R | _03__C & i_final_vld_T ) & { 1{ i_final_vld != 0 }} ;
  assign _09_ = ~ i_sum_pd[34];
  assign { i_sum_pd_R0 [0], i_sum_pd_R0 [1], i_sum_pd_R0 [2], i_sum_pd_R0 [3], i_sum_pd_R0 [4], i_sum_pd_R0 [5], i_sum_pd_R0 [6], i_sum_pd_R0 [7], i_sum_pd_R0 [8], i_sum_pd_R0 [9], i_sum_pd_R0 [10], i_sum_pd_R0 [11], i_sum_pd_R0 [12], i_sum_pd_R0 [13], i_sum_pd_R0 [14], i_sum_pd_R0 [15], i_sum_pd_R0 [16], i_sum_pd_R0 [17], i_sum_pd_R0 [18], i_sum_pd_R0 [19], i_sum_pd_R0 [20], i_sum_pd_R0 [21], i_sum_pd_R0 [22], i_sum_pd_R0 [23], i_sum_pd_R0 [24], i_sum_pd_R0 [25], i_sum_pd_R0 [26], i_sum_pd_R0 [27], i_sum_pd_R0 [28], i_sum_pd_R0 [29], i_sum_pd_R0 [30], i_sum_pd_R0 [31], i_sum_pd_R0 [32], i_sum_pd_R0 [33] } = 0;
  assign { i_sum_pd_X0 [0], i_sum_pd_X0 [1], i_sum_pd_X0 [2], i_sum_pd_X0 [3], i_sum_pd_X0 [4], i_sum_pd_X0 [5], i_sum_pd_X0 [6], i_sum_pd_X0 [7], i_sum_pd_X0 [8], i_sum_pd_X0 [9], i_sum_pd_X0 [10], i_sum_pd_X0 [11], i_sum_pd_X0 [12], i_sum_pd_X0 [13], i_sum_pd_X0 [14], i_sum_pd_X0 [15], i_sum_pd_X0 [16], i_sum_pd_X0 [17], i_sum_pd_X0 [18], i_sum_pd_X0 [19], i_sum_pd_X0 [20], i_sum_pd_X0 [21], i_sum_pd_X0 [22], i_sum_pd_X0 [23], i_sum_pd_X0 [24], i_sum_pd_X0 [25], i_sum_pd_X0 [26], i_sum_pd_X0 [27], i_sum_pd_X0 [28], i_sum_pd_X0 [29], i_sum_pd_X0 [30], i_sum_pd_X0 [31], i_sum_pd_X0 [32], i_sum_pd_X0 [33] } = 0;
  assign { i_sum_pd_C0 [0], i_sum_pd_C0 [1], i_sum_pd_C0 [2], i_sum_pd_C0 [3], i_sum_pd_C0 [4], i_sum_pd_C0 [5], i_sum_pd_C0 [6], i_sum_pd_C0 [7], i_sum_pd_C0 [8], i_sum_pd_C0 [9], i_sum_pd_C0 [10], i_sum_pd_C0 [11], i_sum_pd_C0 [12], i_sum_pd_C0 [13], i_sum_pd_C0 [14], i_sum_pd_C0 [15], i_sum_pd_C0 [16], i_sum_pd_C0 [17], i_sum_pd_C0 [18], i_sum_pd_C0 [19], i_sum_pd_C0 [20], i_sum_pd_C0 [21], i_sum_pd_C0 [22], i_sum_pd_C0 [23], i_sum_pd_C0 [24], i_sum_pd_C0 [25], i_sum_pd_C0 [26], i_sum_pd_C0 [27], i_sum_pd_C0 [28], i_sum_pd_C0 [29], i_sum_pd_C0 [30], i_sum_pd_C0 [31], i_sum_pd_C0 [32], i_sum_pd_C0 [33] } = 0;
  logic [34:0] i_sum_pd_C1 ;
  logic [34:0] i_sum_pd_R1 ;
  logic [34:0] i_sum_pd_X1 ;
  assign _09__T = i_sum_pd_T [34] ;
  assign i_sum_pd_C1 [34] = _09__C ;
  assign i_sum_pd_R1 [34] = _09__R ;
  assign i_sum_pd_X1 [34] = _09__X ;
  assign _09__S = 0 ;
  assign _10_ = ~ _15_;
  logic [0:0] _15__C0 ;
  logic [0:0] _15__R0 ;
  logic [0:0] _15__X0 ;
  assign _10__T = _15__T ;
  assign _15__C0 = _10__C ;
  assign _15__R0 = _10__R ;
  assign _15__X0 = _10__X ;
  assign _10__S = 0 ;
  assign _11_ = ~ i_sat_sel;
  logic [0:0] i_sat_sel_C2 ;
  logic [0:0] i_sat_sel_R2 ;
  logic [0:0] i_sat_sel_X2 ;
  assign _11__T = i_sat_sel_T ;
  assign i_sat_sel_C2 = _11__C ;
  assign i_sat_sel_R2 = _11__R ;
  assign i_sat_sel_X2 = _11__X ;
  assign _11__S = 0 ;
  assign _12_ = _05_ | _06_;
  assign _12__S = 0 ;
  logic [0:0] _05__C0 ;
  logic [0:0] _05__R0 ;
  logic [0:0] _05__X0 ;
  logic [0:0] _06__C0 ;
  logic [0:0] _06__R0 ;
  logic [0:0] _06__X0 ;
  assign _12__T = _05__T | _06__T ;
  assign _05__C0 = _12__C ;
  assign _05__X0 = _12__X ;
  assign _06__C0 = _12__C ;
  assign _06__X0 = _12__X ;
  assign _05__R0 = ( _12__R | _12__C & _06__T ) & { 1{ _06_ != 1'b1 }} ;
  assign _06__R0 = ( _12__R | _12__C & _05__T ) & { 1{ _05_ != 1'b1 }} ;
  assign i_sft_need_sat = _12_ | _07_;
  assign i_sft_need_sat_S = 0 ;
  logic [0:0] _12__C0 ;
  logic [0:0] _12__R0 ;
  logic [0:0] _12__X0 ;
  logic [0:0] _07__C0 ;
  logic [0:0] _07__R0 ;
  logic [0:0] _07__X0 ;
  assign i_sft_need_sat_T = _12__T | _07__T ;
  assign _12__C0 = i_sft_need_sat_C ;
  assign _12__X0 = i_sft_need_sat_X ;
  assign _07__C0 = i_sft_need_sat_C ;
  assign _07__X0 = i_sft_need_sat_X ;
  assign _12__R0 = ( i_sft_need_sat_R | i_sft_need_sat_C & _07__T ) & { 1{ _07_ != 1'b1 }} ;
  assign _07__R0 = ( i_sft_need_sat_R | i_sft_need_sat_C & _12__T ) & { 1{ _12_ != 1'b1 }} ;
  assign _13_ = _09_ | _18_;
  assign _13__S = 0 ;
  logic [0:0] _09__C2 ;
  logic [0:0] _09__R2 ;
  logic [0:0] _09__X2 ;
  logic [0:0] _18__C0 ;
  logic [0:0] _18__R0 ;
  logic [0:0] _18__X0 ;
  assign _13__T = _09__T | _18__T ;
  assign _09__C2 = _13__C ;
  assign _09__X2 = _13__X ;
  assign _18__C0 = _13__C ;
  assign _18__X0 = _13__X ;
  assign _09__R2 = ( _13__R | _13__C & _18__T ) & { 1{ _18_ != 1'b1 }} ;
  assign _18__R0 = ( _13__R | _13__C & _09__T ) & { 1{ _09_ != 1'b1 }} ;
  always @(posedge nvdla_core_clk)
      out_final_data <= _02_;
  logic [31:0] _02__X0 ;
  logic [31:0] _02__R0 ;
  logic [31:0] _02__C0 ;
  assign _02__X0 = { 32{ out_final_data_S != _02__S }} ;
  assign _02__R0 = 0 ;
  assign _02__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      out_final_data_T 		<= !nvdla_core_rstn ? 0 : ( _02__T & _02__X0 );
  always @( posedge nvdla_core_clk )
      out_final_data_t_flag 	<= !nvdla_core_rstn ? 0 : out_final_data_t_flag ? 1 : | _02__T & ( | _02__X0 );
  always @( posedge nvdla_core_clk )
      out_final_data_r_flag 	<= !nvdla_core_rstn ? 0 : out_final_data_r_flag ? 1 : out_final_data_t_flag ? 0 : ( | out_final_data_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      out_final_sat <= 1'b0;
    else
      out_final_sat <= _03_;
  logic [0:0] _03__X0 ;
  logic [0:0] _03__R0 ;
  logic [0:0] _03__C0 ;
  assign _03__X0 = { 1{ out_final_sat_S != _03__S }} ;
  assign _03__R0 = 0 ;
  assign _03__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      out_final_sat_T 		<= !nvdla_core_rstn ? 0 : ( _03__T & _03__X0 );
  always @( posedge nvdla_core_clk )
      out_final_sat_t_flag 	<= !nvdla_core_rstn ? 0 : out_final_sat_t_flag ? 1 : | _03__T & ( | _03__X0 );
  always @( posedge nvdla_core_clk )
      out_final_sat_r_flag 	<= !nvdla_core_rstn ? 0 : out_final_sat_r_flag ? 1 : out_final_sat_t_flag ? 0 : ( | out_final_sat_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      out_final_valid <= 1'b0;
    else
      out_final_valid <= i_final_vld;
  logic [0:0] i_final_vld_X1 ;
  logic [0:0] i_final_vld_R1 ;
  logic [0:0] i_final_vld_C1 ;
  assign i_final_vld_X1 = { 1{ out_final_valid_S != i_final_vld_S }} ;
  assign i_final_vld_R1 = 0 ;
  assign i_final_vld_C1 = 0 ;
  always @( posedge nvdla_core_clk )
      out_final_valid_T 		<= !nvdla_core_rstn ? 0 : ( i_final_vld_T & i_final_vld_X1 );
  always @( posedge nvdla_core_clk )
      out_final_valid_t_flag 	<= !nvdla_core_rstn ? 0 : out_final_valid_t_flag ? 1 : | i_final_vld_T & ( | i_final_vld_X1 );
  always @( posedge nvdla_core_clk )
      out_final_valid_r_flag 	<= !nvdla_core_rstn ? 0 : out_final_valid_r_flag ? 1 : out_final_valid_t_flag ? 0 : ( | out_final_valid_R ) ;
  always @(posedge nvdla_core_clk)
      out_partial_data <= _04_;
  logic [33:0] _04__X0 ;
  logic [33:0] _04__R0 ;
  logic [33:0] _04__C0 ;
  assign _04__X0 = { 34{ out_partial_data_S != _04__S }} ;
  assign _04__R0 = 0 ;
  assign _04__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      out_partial_data_T 		<= !nvdla_core_rstn ? 0 : ( _04__T & _04__X0 );
  always @( posedge nvdla_core_clk )
      out_partial_data_t_flag 	<= !nvdla_core_rstn ? 0 : out_partial_data_t_flag ? 1 : | _04__T & ( | _04__X0 );
  always @( posedge nvdla_core_clk )
      out_partial_data_r_flag 	<= !nvdla_core_rstn ? 0 : out_partial_data_r_flag ? 1 : out_partial_data_t_flag ? 0 : ( | out_partial_data_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      out_partial_valid <= 1'b0;
    else
      out_partial_valid <= i_partial_vld;
  logic [0:0] i_partial_vld_X0 ;
  logic [0:0] i_partial_vld_R0 ;
  logic [0:0] i_partial_vld_C0 ;
  assign i_partial_vld_X0 = { 1{ out_partial_valid_S != i_partial_vld_S }} ;
  assign i_partial_vld_R0 = 0 ;
  assign i_partial_vld_C0 = 0 ;
  always @( posedge nvdla_core_clk )
      out_partial_valid_T 		<= !nvdla_core_rstn ? 0 : ( i_partial_vld_T & i_partial_vld_X0 );
  always @( posedge nvdla_core_clk )
      out_partial_valid_t_flag 	<= !nvdla_core_rstn ? 0 : out_partial_valid_t_flag ? 1 : | i_partial_vld_T & ( | i_partial_vld_X0 );
  always @( posedge nvdla_core_clk )
      out_partial_valid_r_flag 	<= !nvdla_core_rstn ? 0 : out_partial_valid_r_flag ? 1 : out_partial_valid_t_flag ? 0 : ( | out_partial_valid_R ) ;
  always @(posedge nvdla_core_clk)
      i_sum_pd <= _01_;
  logic [34:0] _01__X0 ;
  logic [34:0] _01__R0 ;
  logic [34:0] _01__C0 ;
  assign _01__X0 = { 35{ i_sum_pd_S != _01__S }} ;
  assign _01__R0 = 0 ;
  assign _01__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      i_sum_pd_T 		<= !nvdla_core_rstn ? 0 : ( _01__T & _01__X0 );
  always @( posedge nvdla_core_clk )
      i_sum_pd_t_flag 	<= !nvdla_core_rstn ? 0 : i_sum_pd_t_flag ? 1 : | _01__T & ( | _01__X0 );
  always @( posedge nvdla_core_clk )
      i_sum_pd_r_flag 	<= !nvdla_core_rstn ? 0 : i_sum_pd_r_flag ? 1 : i_sum_pd_t_flag ? 0 : ( | i_sum_pd_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      i_sat_sel <= 1'b0;
    else
      i_sat_sel <= _00_;
  logic [0:0] _00__X0 ;
  logic [0:0] _00__R0 ;
  logic [0:0] _00__C0 ;
  assign _00__X0 = { 1{ i_sat_sel_S != _00__S }} ;
  assign _00__R0 = 0 ;
  assign _00__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      i_sat_sel_T 		<= !nvdla_core_rstn ? 0 : ( _00__T & _00__X0 );
  always @( posedge nvdla_core_clk )
      i_sat_sel_t_flag 	<= !nvdla_core_rstn ? 0 : i_sat_sel_t_flag ? 1 : | _00__T & ( | _00__X0 );
  always @( posedge nvdla_core_clk )
      i_sat_sel_r_flag 	<= !nvdla_core_rstn ? 0 : i_sat_sel_r_flag ? 1 : i_sat_sel_t_flag ? 0 : ( | i_sat_sel_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      i_sat_vld <= 1'b0;
    else
      i_sat_vld <= in_valid;
  logic [0:0] in_valid_X0 ;
  logic [0:0] in_valid_R0 ;
  logic [0:0] in_valid_C0 ;
  assign in_valid_X0 = { 1{ i_sat_vld_S != in_valid_S }} ;
  assign in_valid_R0 = 0 ;
  assign in_valid_C0 = 0 ;
  always @( posedge nvdla_core_clk )
      i_sat_vld_T 		<= !nvdla_core_rstn ? 0 : ( in_valid_T & in_valid_X0 );
  always @( posedge nvdla_core_clk )
      i_sat_vld_t_flag 	<= !nvdla_core_rstn ? 0 : i_sat_vld_t_flag ? 1 : | in_valid_T & ( | in_valid_X0 );
  always @( posedge nvdla_core_clk )
      i_sat_vld_r_flag 	<= !nvdla_core_rstn ? 0 : i_sat_vld_r_flag ? 1 : i_sat_vld_t_flag ? 0 : ( | i_sat_vld_R ) ;
  assign _02_ = i_final_vld ? i_final_result : out_final_data;
  logic [0:0] i_final_vld_C2 ;
  logic [0:0] i_final_vld_R2 ;
  logic [0:0] i_final_vld_X2 ;
  assign i_final_vld_C2 = | _02__C ;
  assign i_final_vld_X2 = | _02__X ;
  assign _02__T = i_final_vld ? ( { 32{ i_final_vld_T  }} | i_final_result_T ) : ( { 32{ i_final_vld_T  }} | out_final_data_T );
  assign _02__S = i_final_vld ? i_final_result_S : out_final_data_S ;
  assign i_final_vld_R2 = ( | (_02__R | ( _02__C & ( { 32{ i_final_vld }} & i_final_result_T | { 32{ !i_final_vld }} & out_final_data_T )))) && i_final_result != out_final_data ;
  logic [31:0] i_final_result_C0 ;
  logic [31:0] i_final_result_R0 ;
  logic [31:0] i_final_result_X0 ;
  assign i_final_result_C0 = { 32{ i_final_vld }} ;
  assign i_final_result_R0 = { 32{ i_final_vld }} & ( _02__R | ( { 32{ i_final_vld_T  }} & _02__C ));
  assign i_final_result_X0 = { 32{ i_final_vld }} & _02__X ;
  logic [31:0] out_final_data_C1 ;
  logic [31:0] out_final_data_R1 ;
  logic [31:0] out_final_data_X1 ;
  assign out_final_data_C1 = { 32{ !i_final_vld }} ;
  assign out_final_data_R1 = { 32{ !i_final_vld }} & ( _02__R | ( { 32{ i_final_vld_T  }} & _02__C ));
  assign out_final_data_X1 = { 32{ !i_final_vld }} & _02__X ;
  logic [33:0] fangyuan0;
  logic [33:0] fangyuan0_T ;
  logic [33:0] fangyuan0_R ;
  logic [33:0] fangyuan0_C ;
  logic [33:0] fangyuan0_X ;
  assign fangyuan0 = { i_sum_pd[34], i_sat_bits };
  assign fangyuan0_T = {  i_sum_pd_T [34] , i_sat_bits_T  };
  logic [13:0] fangyuan0_S ;
  assign fangyuan0_S = 0 ;
  assign { i_sum_pd_R1 [0], i_sum_pd_R1 [1], i_sum_pd_R1 [2], i_sum_pd_R1 [3], i_sum_pd_R1 [4], i_sum_pd_R1 [5], i_sum_pd_R1 [6], i_sum_pd_R1 [7], i_sum_pd_R1 [8], i_sum_pd_R1 [9], i_sum_pd_R1 [10], i_sum_pd_R1 [11], i_sum_pd_R1 [12], i_sum_pd_R1 [13], i_sum_pd_R1 [14], i_sum_pd_R1 [15], i_sum_pd_R1 [16], i_sum_pd_R1 [17], i_sum_pd_R1 [18], i_sum_pd_R1 [19], i_sum_pd_R1 [20], i_sum_pd_R1 [21], i_sum_pd_R1 [22], i_sum_pd_R1 [23], i_sum_pd_R1 [24], i_sum_pd_R1 [25], i_sum_pd_R1 [26], i_sum_pd_R1 [27], i_sum_pd_R1 [28], i_sum_pd_R1 [29], i_sum_pd_R1 [30], i_sum_pd_R1 [31], i_sum_pd_R1 [32], i_sum_pd_R1 [33] } = 0;
  assign { i_sum_pd_X1 [0], i_sum_pd_X1 [1], i_sum_pd_X1 [2], i_sum_pd_X1 [3], i_sum_pd_X1 [4], i_sum_pd_X1 [5], i_sum_pd_X1 [6], i_sum_pd_X1 [7], i_sum_pd_X1 [8], i_sum_pd_X1 [9], i_sum_pd_X1 [10], i_sum_pd_X1 [11], i_sum_pd_X1 [12], i_sum_pd_X1 [13], i_sum_pd_X1 [14], i_sum_pd_X1 [15], i_sum_pd_X1 [16], i_sum_pd_X1 [17], i_sum_pd_X1 [18], i_sum_pd_X1 [19], i_sum_pd_X1 [20], i_sum_pd_X1 [21], i_sum_pd_X1 [22], i_sum_pd_X1 [23], i_sum_pd_X1 [24], i_sum_pd_X1 [25], i_sum_pd_X1 [26], i_sum_pd_X1 [27], i_sum_pd_X1 [28], i_sum_pd_X1 [29], i_sum_pd_X1 [30], i_sum_pd_X1 [31], i_sum_pd_X1 [32], i_sum_pd_X1 [33] } = 0;
  assign { i_sum_pd_C1 [0], i_sum_pd_C1 [1], i_sum_pd_C1 [2], i_sum_pd_C1 [3], i_sum_pd_C1 [4], i_sum_pd_C1 [5], i_sum_pd_C1 [6], i_sum_pd_C1 [7], i_sum_pd_C1 [8], i_sum_pd_C1 [9], i_sum_pd_C1 [10], i_sum_pd_C1 [11], i_sum_pd_C1 [12], i_sum_pd_C1 [13], i_sum_pd_C1 [14], i_sum_pd_C1 [15], i_sum_pd_C1 [16], i_sum_pd_C1 [17], i_sum_pd_C1 [18], i_sum_pd_C1 [19], i_sum_pd_C1 [20], i_sum_pd_C1 [21], i_sum_pd_C1 [22], i_sum_pd_C1 [23], i_sum_pd_C1 [24], i_sum_pd_C1 [25], i_sum_pd_C1 [26], i_sum_pd_C1 [27], i_sum_pd_C1 [28], i_sum_pd_C1 [29], i_sum_pd_C1 [30], i_sum_pd_C1 [31], i_sum_pd_C1 [32], i_sum_pd_C1 [33] } = 0;
  logic [34:0] i_sum_pd_R2 ;
  logic [34:0] i_sum_pd_X2 ;
  logic [34:0] i_sum_pd_C2 ;
  assign i_sum_pd_R2 [34:34] = fangyuan0_R [33:33] ;
  assign i_sum_pd_X2 [34:34] = fangyuan0_X [33:33] ;
  assign i_sum_pd_C2 [34:34] = fangyuan0_C [33:33] ;
  logic [32:0] i_sat_bits_R0 ;
  logic [32:0] i_sat_bits_X0 ;
  logic [32:0] i_sat_bits_C0 ;
  assign i_sat_bits_R0 = fangyuan0_R [32:0] ;
  assign i_sat_bits_X0 = fangyuan0_X [32:0] ;
  assign i_sat_bits_C0 = fangyuan0_C [32:0] ;

  assign _04_ = i_partial_vld ? fangyuan0 : out_partial_data;
  logic [0:0] i_partial_vld_C1 ;
  logic [0:0] i_partial_vld_R1 ;
  logic [0:0] i_partial_vld_X1 ;
  assign i_partial_vld_C1 = | _04__C ;
  assign i_partial_vld_X1 = | _04__X ;
  assign _04__T = i_partial_vld ? ( { 34{ i_partial_vld_T  }} | fangyuan0_T ) : ( { 34{ i_partial_vld_T  }} | out_partial_data_T );
  assign _04__S = i_partial_vld ? fangyuan0_S : out_partial_data_S ;
  assign i_partial_vld_R1 = ( | (_04__R | ( _04__C & ( { 34{ i_partial_vld }} & fangyuan0_T | { 34{ !i_partial_vld }} & out_partial_data_T )))) && fangyuan0 != out_partial_data ;
  logic [33:0] fangyuan0_C0 ;
  logic [33:0] fangyuan0_R0 ;
  logic [33:0] fangyuan0_X0 ;
  assign fangyuan0_C0 = { 34{ i_partial_vld }} ;
  assign fangyuan0_R0 = { 34{ i_partial_vld }} & ( _04__R | ( { 34{ i_partial_vld_T  }} & _04__C ));
  assign fangyuan0_X0 = { 34{ i_partial_vld }} & _04__X ;
  logic [33:0] out_partial_data_C1 ;
  logic [33:0] out_partial_data_R1 ;
  logic [33:0] out_partial_data_X1 ;
  assign out_partial_data_C1 = { 34{ !i_partial_vld }} ;
  assign out_partial_data_R1 = { 34{ !i_partial_vld }} & ( _04__R | ( { 34{ i_partial_vld_T  }} & _04__C ));
  assign out_partial_data_X1 = { 34{ !i_partial_vld }} & _04__X ;
  logic [32:0] fangyuan1;
  logic [32:0] fangyuan1_T ;
  logic [32:0] fangyuan1_R ;
  logic [32:0] fangyuan1_C ;
  logic [32:0] fangyuan1_X ;
  assign fangyuan1 = { _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_, _09_ };
  assign fangyuan1_T = {  _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T , _09__T  };
  logic [13:0] fangyuan1_S ;
  assign fangyuan1_S = 0 ;
  logic [0:0] _09__R3 ;
  logic [0:0] _09__X3 ;
  logic [0:0] _09__C3 ;
  assign _09__R3 = fangyuan1_R [32:32] ;
  assign _09__X3 = fangyuan1_X [32:32] ;
  assign _09__C3 = fangyuan1_C [32:32] ;
  logic [0:0] _09__R4 ;
  logic [0:0] _09__X4 ;
  logic [0:0] _09__C4 ;
  assign _09__R4 = fangyuan1_R [31:31] ;
  assign _09__X4 = fangyuan1_X [31:31] ;
  assign _09__C4 = fangyuan1_C [31:31] ;
  logic [0:0] _09__R5 ;
  logic [0:0] _09__X5 ;
  logic [0:0] _09__C5 ;
  assign _09__R5 = fangyuan1_R [30:30] ;
  assign _09__X5 = fangyuan1_X [30:30] ;
  assign _09__C5 = fangyuan1_C [30:30] ;
  logic [0:0] _09__R6 ;
  logic [0:0] _09__X6 ;
  logic [0:0] _09__C6 ;
  assign _09__R6 = fangyuan1_R [29:29] ;
  assign _09__X6 = fangyuan1_X [29:29] ;
  assign _09__C6 = fangyuan1_C [29:29] ;
  logic [0:0] _09__R7 ;
  logic [0:0] _09__X7 ;
  logic [0:0] _09__C7 ;
  assign _09__R7 = fangyuan1_R [28:28] ;
  assign _09__X7 = fangyuan1_X [28:28] ;
  assign _09__C7 = fangyuan1_C [28:28] ;
  logic [0:0] _09__R8 ;
  logic [0:0] _09__X8 ;
  logic [0:0] _09__C8 ;
  assign _09__R8 = fangyuan1_R [27:27] ;
  assign _09__X8 = fangyuan1_X [27:27] ;
  assign _09__C8 = fangyuan1_C [27:27] ;
  logic [0:0] _09__R9 ;
  logic [0:0] _09__X9 ;
  logic [0:0] _09__C9 ;
  assign _09__R9 = fangyuan1_R [26:26] ;
  assign _09__X9 = fangyuan1_X [26:26] ;
  assign _09__C9 = fangyuan1_C [26:26] ;
  logic [0:0] _09__R10 ;
  logic [0:0] _09__X10 ;
  logic [0:0] _09__C10 ;
  assign _09__R10 = fangyuan1_R [25:25] ;
  assign _09__X10 = fangyuan1_X [25:25] ;
  assign _09__C10 = fangyuan1_C [25:25] ;
  logic [0:0] _09__R11 ;
  logic [0:0] _09__X11 ;
  logic [0:0] _09__C11 ;
  assign _09__R11 = fangyuan1_R [24:24] ;
  assign _09__X11 = fangyuan1_X [24:24] ;
  assign _09__C11 = fangyuan1_C [24:24] ;
  logic [0:0] _09__R12 ;
  logic [0:0] _09__X12 ;
  logic [0:0] _09__C12 ;
  assign _09__R12 = fangyuan1_R [23:23] ;
  assign _09__X12 = fangyuan1_X [23:23] ;
  assign _09__C12 = fangyuan1_C [23:23] ;
  logic [0:0] _09__R13 ;
  logic [0:0] _09__X13 ;
  logic [0:0] _09__C13 ;
  assign _09__R13 = fangyuan1_R [22:22] ;
  assign _09__X13 = fangyuan1_X [22:22] ;
  assign _09__C13 = fangyuan1_C [22:22] ;
  logic [0:0] _09__R14 ;
  logic [0:0] _09__X14 ;
  logic [0:0] _09__C14 ;
  assign _09__R14 = fangyuan1_R [21:21] ;
  assign _09__X14 = fangyuan1_X [21:21] ;
  assign _09__C14 = fangyuan1_C [21:21] ;
  logic [0:0] _09__R15 ;
  logic [0:0] _09__X15 ;
  logic [0:0] _09__C15 ;
  assign _09__R15 = fangyuan1_R [20:20] ;
  assign _09__X15 = fangyuan1_X [20:20] ;
  assign _09__C15 = fangyuan1_C [20:20] ;
  logic [0:0] _09__R16 ;
  logic [0:0] _09__X16 ;
  logic [0:0] _09__C16 ;
  assign _09__R16 = fangyuan1_R [19:19] ;
  assign _09__X16 = fangyuan1_X [19:19] ;
  assign _09__C16 = fangyuan1_C [19:19] ;
  logic [0:0] _09__R17 ;
  logic [0:0] _09__X17 ;
  logic [0:0] _09__C17 ;
  assign _09__R17 = fangyuan1_R [18:18] ;
  assign _09__X17 = fangyuan1_X [18:18] ;
  assign _09__C17 = fangyuan1_C [18:18] ;
  logic [0:0] _09__R18 ;
  logic [0:0] _09__X18 ;
  logic [0:0] _09__C18 ;
  assign _09__R18 = fangyuan1_R [17:17] ;
  assign _09__X18 = fangyuan1_X [17:17] ;
  assign _09__C18 = fangyuan1_C [17:17] ;
  logic [0:0] _09__R19 ;
  logic [0:0] _09__X19 ;
  logic [0:0] _09__C19 ;
  assign _09__R19 = fangyuan1_R [16:16] ;
  assign _09__X19 = fangyuan1_X [16:16] ;
  assign _09__C19 = fangyuan1_C [16:16] ;
  logic [0:0] _09__R20 ;
  logic [0:0] _09__X20 ;
  logic [0:0] _09__C20 ;
  assign _09__R20 = fangyuan1_R [15:15] ;
  assign _09__X20 = fangyuan1_X [15:15] ;
  assign _09__C20 = fangyuan1_C [15:15] ;
  logic [0:0] _09__R21 ;
  logic [0:0] _09__X21 ;
  logic [0:0] _09__C21 ;
  assign _09__R21 = fangyuan1_R [14:14] ;
  assign _09__X21 = fangyuan1_X [14:14] ;
  assign _09__C21 = fangyuan1_C [14:14] ;
  logic [0:0] _09__R22 ;
  logic [0:0] _09__X22 ;
  logic [0:0] _09__C22 ;
  assign _09__R22 = fangyuan1_R [13:13] ;
  assign _09__X22 = fangyuan1_X [13:13] ;
  assign _09__C22 = fangyuan1_C [13:13] ;
  logic [0:0] _09__R23 ;
  logic [0:0] _09__X23 ;
  logic [0:0] _09__C23 ;
  assign _09__R23 = fangyuan1_R [12:12] ;
  assign _09__X23 = fangyuan1_X [12:12] ;
  assign _09__C23 = fangyuan1_C [12:12] ;
  logic [0:0] _09__R24 ;
  logic [0:0] _09__X24 ;
  logic [0:0] _09__C24 ;
  assign _09__R24 = fangyuan1_R [11:11] ;
  assign _09__X24 = fangyuan1_X [11:11] ;
  assign _09__C24 = fangyuan1_C [11:11] ;
  logic [0:0] _09__R25 ;
  logic [0:0] _09__X25 ;
  logic [0:0] _09__C25 ;
  assign _09__R25 = fangyuan1_R [10:10] ;
  assign _09__X25 = fangyuan1_X [10:10] ;
  assign _09__C25 = fangyuan1_C [10:10] ;
  logic [0:0] _09__R26 ;
  logic [0:0] _09__X26 ;
  logic [0:0] _09__C26 ;
  assign _09__R26 = fangyuan1_R [9:9] ;
  assign _09__X26 = fangyuan1_X [9:9] ;
  assign _09__C26 = fangyuan1_C [9:9] ;
  logic [0:0] _09__R27 ;
  logic [0:0] _09__X27 ;
  logic [0:0] _09__C27 ;
  assign _09__R27 = fangyuan1_R [8:8] ;
  assign _09__X27 = fangyuan1_X [8:8] ;
  assign _09__C27 = fangyuan1_C [8:8] ;
  logic [0:0] _09__R28 ;
  logic [0:0] _09__X28 ;
  logic [0:0] _09__C28 ;
  assign _09__R28 = fangyuan1_R [7:7] ;
  assign _09__X28 = fangyuan1_X [7:7] ;
  assign _09__C28 = fangyuan1_C [7:7] ;
  logic [0:0] _09__R29 ;
  logic [0:0] _09__X29 ;
  logic [0:0] _09__C29 ;
  assign _09__R29 = fangyuan1_R [6:6] ;
  assign _09__X29 = fangyuan1_X [6:6] ;
  assign _09__C29 = fangyuan1_C [6:6] ;
  logic [0:0] _09__R30 ;
  logic [0:0] _09__X30 ;
  logic [0:0] _09__C30 ;
  assign _09__R30 = fangyuan1_R [5:5] ;
  assign _09__X30 = fangyuan1_X [5:5] ;
  assign _09__C30 = fangyuan1_C [5:5] ;
  logic [0:0] _09__R31 ;
  logic [0:0] _09__X31 ;
  logic [0:0] _09__C31 ;
  assign _09__R31 = fangyuan1_R [4:4] ;
  assign _09__X31 = fangyuan1_X [4:4] ;
  assign _09__C31 = fangyuan1_C [4:4] ;
  logic [0:0] _09__R32 ;
  logic [0:0] _09__X32 ;
  logic [0:0] _09__C32 ;
  assign _09__R32 = fangyuan1_R [3:3] ;
  assign _09__X32 = fangyuan1_X [3:3] ;
  assign _09__C32 = fangyuan1_C [3:3] ;
  logic [0:0] _09__R33 ;
  logic [0:0] _09__X33 ;
  logic [0:0] _09__C33 ;
  assign _09__R33 = fangyuan1_R [2:2] ;
  assign _09__X33 = fangyuan1_X [2:2] ;
  assign _09__C33 = fangyuan1_C [2:2] ;
  logic [0:0] _09__R34 ;
  logic [0:0] _09__X34 ;
  logic [0:0] _09__C34 ;
  assign _09__R34 = fangyuan1_R [1:1] ;
  assign _09__X34 = fangyuan1_X [1:1] ;
  assign _09__C34 = fangyuan1_C [1:1] ;
  logic [0:0] _09__R35 ;
  logic [0:0] _09__X35 ;
  logic [0:0] _09__C35 ;
  assign _09__R35 = fangyuan1_R [0:0] ;
  assign _09__X35 = fangyuan1_X [0:0] ;
  assign _09__C35 = fangyuan1_C [0:0] ;

  assign i_sat_bits = _14_ ? fangyuan1 : i_sum_pd[32:0];
  logic [0:0] _14__C0 ;
  logic [0:0] _14__R0 ;
  logic [0:0] _14__X0 ;
  assign _14__C0 = | i_sat_bits_C ;
  assign _14__X0 = | i_sat_bits_X ;
  assign i_sat_bits_T = _14_ ? ( { 33{ _14__T  }} | fangyuan1_T ) : ( { 33{ _14__T  }} | i_sum_pd_T [32:0] );
  assign i_sat_bits_S = _14_ ? fangyuan1_S : i_sum_pd_S ;
  assign _14__R0 = ( | (i_sat_bits_R | ( i_sat_bits_C & ( { 33{ _14_ }} & fangyuan1_T | { 33{ !_14_ }} & i_sum_pd_T [32:0] )))) && fangyuan1 != i_sum_pd[32:0] ;
  logic [32:0] fangyuan1_C0 ;
  logic [32:0] fangyuan1_R0 ;
  logic [32:0] fangyuan1_X0 ;
  assign fangyuan1_C0 = { 33{ _14_ }} ;
  assign fangyuan1_R0 = { 33{ _14_ }} & ( i_sat_bits_R | ( { 33{ _14__T  }} & i_sat_bits_C ));
  assign fangyuan1_X0 = { 33{ _14_ }} & i_sat_bits_X ;
  assign i_sum_pd_C2 [32:0] = { 33{ !_14_ }} ;
  assign i_sum_pd_R2 [32:0] = { 33{ !_14_ }} & ( i_sat_bits_R | ( { 33{ _14__T  }} & i_sat_bits_C ));
  assign i_sum_pd_X2 [32:0] = { 33{ !_14_ }} & i_sat_bits_X ;
  assign _01_ = in_valid ? i_sum_pd_nxt : i_sum_pd;
  logic [0:0] in_valid_C1 ;
  logic [0:0] in_valid_R1 ;
  logic [0:0] in_valid_X1 ;
  assign in_valid_C1 = | _01__C ;
  assign in_valid_X1 = | _01__X ;
  assign _01__T = in_valid ? ( { 35{ in_valid_T  }} | i_sum_pd_nxt_T ) : ( { 35{ in_valid_T  }} | i_sum_pd_T );
  assign _01__S = in_valid ? i_sum_pd_nxt_S : i_sum_pd_S ;
  assign in_valid_R1 = ( | (_01__R | ( _01__C & ( { 35{ in_valid }} & i_sum_pd_nxt_T | { 35{ !in_valid }} & i_sum_pd_T )))) && i_sum_pd_nxt != i_sum_pd ;
  assign { i_sum_pd_R2 [33] } = 0;
  assign { i_sum_pd_X2 [33] } = 0;
  assign { i_sum_pd_C2 [33] } = 0;
  logic [34:0] i_sum_pd_nxt_C0 ;
  logic [34:0] i_sum_pd_nxt_R0 ;
  logic [34:0] i_sum_pd_nxt_X0 ;
  assign i_sum_pd_nxt_C0 = { 35{ in_valid }} ;
  assign i_sum_pd_nxt_R0 = { 35{ in_valid }} & ( _01__R | ( { 35{ in_valid_T  }} & _01__C ));
  assign i_sum_pd_nxt_X0 = { 35{ in_valid }} & _01__X ;
  logic [34:0] i_sum_pd_C3 ;
  logic [34:0] i_sum_pd_R3 ;
  logic [34:0] i_sum_pd_X3 ;
  assign i_sum_pd_C3 = { 35{ !in_valid }} ;
  assign i_sum_pd_R3 = { 35{ !in_valid }} & ( _01__R | ( { 35{ in_valid_T  }} & _01__C ));
  assign i_sum_pd_X3 = { 35{ !in_valid }} & _01__X ;
  assign _00_ = in_valid ? in_sel : i_sat_sel;
  logic [0:0] in_valid_C2 ;
  logic [0:0] in_valid_R2 ;
  logic [0:0] in_valid_X2 ;
  assign in_valid_C2 = | _00__C ;
  assign in_valid_X2 = | _00__X ;
  assign _00__T = in_valid ? ( { 1{ in_valid_T  }} | in_sel_T ) : ( { 1{ in_valid_T  }} | i_sat_sel_T );
  assign _00__S = in_valid ? in_sel_S : i_sat_sel_S ;
  assign in_valid_R2 = ( | (_00__R | ( _00__C & ( { 1{ in_valid }} & in_sel_T | { 1{ !in_valid }} & i_sat_sel_T )))) && in_sel != i_sat_sel ;
  logic [0:0] in_sel_C0 ;
  logic [0:0] in_sel_R0 ;
  logic [0:0] in_sel_X0 ;
  assign in_sel_C0 = { 1{ in_valid }} ;
  assign in_sel_R0 = { 1{ in_valid }} & ( _00__R | ( { 1{ in_valid_T  }} & _00__C ));
  assign in_sel_X0 = { 1{ in_valid }} & _00__X ;
  logic [0:0] i_sat_sel_C3 ;
  logic [0:0] i_sat_sel_R3 ;
  logic [0:0] i_sat_sel_X3 ;
  assign i_sat_sel_C3 = { 1{ !in_valid }} ;
  assign i_sat_sel_R3 = { 1{ !in_valid }} & ( _00__R | ( { 1{ in_valid_T  }} & _00__C ));
  assign i_sat_sel_X3 = { 1{ !in_valid }} & _00__X ;
  logic [1:0] fangyuan2;
  logic [1:0] fangyuan2_T ;
  logic [1:0] fangyuan2_R ;
  logic [1:0] fangyuan2_C ;
  logic [1:0] fangyuan2_X ;
  assign fangyuan2 = { i_sft_pd[31], i_sft_pd[32] };
  assign fangyuan2_T = {  i_sft_pd_T [31] , i_sft_pd_T [32]  };
  logic [13:0] fangyuan2_S ;
  assign fangyuan2_S = 0 ;
  assign { i_sft_pd_R0 [32:32] } = 0;
  assign { i_sft_pd_X0 [32:32] } = 0;
  assign { i_sft_pd_C0 [32:32] } = 0;
  logic [32:0] i_sft_pd_R1 ;
  logic [32:0] i_sft_pd_X1 ;
  logic [32:0] i_sft_pd_C1 ;
  assign i_sft_pd_R1 [31:31] = fangyuan2_R [1:1] ;
  assign i_sft_pd_X1 [31:31] = fangyuan2_X [1:1] ;
  assign i_sft_pd_C1 [31:31] = fangyuan2_C [1:1] ;
  assign i_sft_pd_R1 [32:32] = fangyuan2_R [0:0] ;
  assign i_sft_pd_X1 [32:32] = fangyuan2_X [0:0] ;
  assign i_sft_pd_C1 [32:32] = fangyuan2_C [0:0] ;

  assign _15_ = & fangyuan2;
  logic [1:0] fangyuan2_C0 ;
  logic [1:0] fangyuan2_R0 ;
  logic [1:0] fangyuan2_X0 ;
  assign _15__T = | fangyuan2_T ;
  assign fangyuan2_C0 = { 2{ _15__C }} ;
  assign fangyuan2_X0 = { 2{ _15__X }} ;
  assign fangyuan2_R0 = { 2{ _15__R }} & ~fangyuan2 ;
  assign _15__S = 0 ;
  logic [31:0] fangyuan3;
  logic [31:0] fangyuan3_T ;
  logic [31:0] fangyuan3_R ;
  logic [31:0] fangyuan3_C ;
  logic [31:0] fangyuan3_X ;
  assign fangyuan3 = { i_point5, i_sft_pd[0], i_sft_pd[1], i_sft_pd[2], i_sft_pd[3], i_sft_pd[4], i_sft_pd[5], i_sft_pd[6], i_sft_pd[7], i_sft_pd[8], i_sft_pd[9], i_sft_pd[10], i_sft_pd[11], i_sft_pd[12], i_sft_pd[13], i_sft_pd[14], i_sft_pd[15], i_sft_pd[16], i_sft_pd[17], i_sft_pd[18], i_sft_pd[19], i_sft_pd[20], i_sft_pd[21], i_sft_pd[22], i_sft_pd[23], i_sft_pd[24], i_sft_pd[25], i_sft_pd[26], i_sft_pd[27], i_sft_pd[28], i_sft_pd[29], i_sft_pd[30] };
  assign fangyuan3_T = {  i_point5_T , i_sft_pd_T [0] , i_sft_pd_T [1] , i_sft_pd_T [2] , i_sft_pd_T [3] , i_sft_pd_T [4] , i_sft_pd_T [5] , i_sft_pd_T [6] , i_sft_pd_T [7] , i_sft_pd_T [8] , i_sft_pd_T [9] , i_sft_pd_T [10] , i_sft_pd_T [11] , i_sft_pd_T [12] , i_sft_pd_T [13] , i_sft_pd_T [14] , i_sft_pd_T [15] , i_sft_pd_T [16] , i_sft_pd_T [17] , i_sft_pd_T [18] , i_sft_pd_T [19] , i_sft_pd_T [20] , i_sft_pd_T [21] , i_sft_pd_T [22] , i_sft_pd_T [23] , i_sft_pd_T [24] , i_sft_pd_T [25] , i_sft_pd_T [26] , i_sft_pd_T [27] , i_sft_pd_T [28] , i_sft_pd_T [29] , i_sft_pd_T [30]  };
  logic [13:0] fangyuan3_S ;
  assign fangyuan3_S = 0 ;
  logic [0:0] i_point5_R1 ;
  logic [0:0] i_point5_X1 ;
  logic [0:0] i_point5_C1 ;
  assign i_point5_R1 = fangyuan3_R [31:31] ;
  assign i_point5_X1 = fangyuan3_X [31:31] ;
  assign i_point5_C1 = fangyuan3_C [31:31] ;
  assign i_sft_pd_R1 [0:0] = fangyuan3_R [30:30] ;
  assign i_sft_pd_X1 [0:0] = fangyuan3_X [30:30] ;
  assign i_sft_pd_C1 [0:0] = fangyuan3_C [30:30] ;
  assign i_sft_pd_R1 [1:1] = fangyuan3_R [29:29] ;
  assign i_sft_pd_X1 [1:1] = fangyuan3_X [29:29] ;
  assign i_sft_pd_C1 [1:1] = fangyuan3_C [29:29] ;
  assign i_sft_pd_R1 [2:2] = fangyuan3_R [28:28] ;
  assign i_sft_pd_X1 [2:2] = fangyuan3_X [28:28] ;
  assign i_sft_pd_C1 [2:2] = fangyuan3_C [28:28] ;
  assign i_sft_pd_R1 [3:3] = fangyuan3_R [27:27] ;
  assign i_sft_pd_X1 [3:3] = fangyuan3_X [27:27] ;
  assign i_sft_pd_C1 [3:3] = fangyuan3_C [27:27] ;
  assign i_sft_pd_R1 [4:4] = fangyuan3_R [26:26] ;
  assign i_sft_pd_X1 [4:4] = fangyuan3_X [26:26] ;
  assign i_sft_pd_C1 [4:4] = fangyuan3_C [26:26] ;
  assign i_sft_pd_R1 [5:5] = fangyuan3_R [25:25] ;
  assign i_sft_pd_X1 [5:5] = fangyuan3_X [25:25] ;
  assign i_sft_pd_C1 [5:5] = fangyuan3_C [25:25] ;
  assign i_sft_pd_R1 [6:6] = fangyuan3_R [24:24] ;
  assign i_sft_pd_X1 [6:6] = fangyuan3_X [24:24] ;
  assign i_sft_pd_C1 [6:6] = fangyuan3_C [24:24] ;
  assign i_sft_pd_R1 [7:7] = fangyuan3_R [23:23] ;
  assign i_sft_pd_X1 [7:7] = fangyuan3_X [23:23] ;
  assign i_sft_pd_C1 [7:7] = fangyuan3_C [23:23] ;
  assign i_sft_pd_R1 [8:8] = fangyuan3_R [22:22] ;
  assign i_sft_pd_X1 [8:8] = fangyuan3_X [22:22] ;
  assign i_sft_pd_C1 [8:8] = fangyuan3_C [22:22] ;
  assign i_sft_pd_R1 [9:9] = fangyuan3_R [21:21] ;
  assign i_sft_pd_X1 [9:9] = fangyuan3_X [21:21] ;
  assign i_sft_pd_C1 [9:9] = fangyuan3_C [21:21] ;
  assign i_sft_pd_R1 [10:10] = fangyuan3_R [20:20] ;
  assign i_sft_pd_X1 [10:10] = fangyuan3_X [20:20] ;
  assign i_sft_pd_C1 [10:10] = fangyuan3_C [20:20] ;
  assign i_sft_pd_R1 [11:11] = fangyuan3_R [19:19] ;
  assign i_sft_pd_X1 [11:11] = fangyuan3_X [19:19] ;
  assign i_sft_pd_C1 [11:11] = fangyuan3_C [19:19] ;
  assign i_sft_pd_R1 [12:12] = fangyuan3_R [18:18] ;
  assign i_sft_pd_X1 [12:12] = fangyuan3_X [18:18] ;
  assign i_sft_pd_C1 [12:12] = fangyuan3_C [18:18] ;
  assign i_sft_pd_R1 [13:13] = fangyuan3_R [17:17] ;
  assign i_sft_pd_X1 [13:13] = fangyuan3_X [17:17] ;
  assign i_sft_pd_C1 [13:13] = fangyuan3_C [17:17] ;
  assign i_sft_pd_R1 [14:14] = fangyuan3_R [16:16] ;
  assign i_sft_pd_X1 [14:14] = fangyuan3_X [16:16] ;
  assign i_sft_pd_C1 [14:14] = fangyuan3_C [16:16] ;
  assign i_sft_pd_R1 [15:15] = fangyuan3_R [15:15] ;
  assign i_sft_pd_X1 [15:15] = fangyuan3_X [15:15] ;
  assign i_sft_pd_C1 [15:15] = fangyuan3_C [15:15] ;
  assign i_sft_pd_R1 [16:16] = fangyuan3_R [14:14] ;
  assign i_sft_pd_X1 [16:16] = fangyuan3_X [14:14] ;
  assign i_sft_pd_C1 [16:16] = fangyuan3_C [14:14] ;
  assign i_sft_pd_R1 [17:17] = fangyuan3_R [13:13] ;
  assign i_sft_pd_X1 [17:17] = fangyuan3_X [13:13] ;
  assign i_sft_pd_C1 [17:17] = fangyuan3_C [13:13] ;
  assign i_sft_pd_R1 [18:18] = fangyuan3_R [12:12] ;
  assign i_sft_pd_X1 [18:18] = fangyuan3_X [12:12] ;
  assign i_sft_pd_C1 [18:18] = fangyuan3_C [12:12] ;
  assign i_sft_pd_R1 [19:19] = fangyuan3_R [11:11] ;
  assign i_sft_pd_X1 [19:19] = fangyuan3_X [11:11] ;
  assign i_sft_pd_C1 [19:19] = fangyuan3_C [11:11] ;
  assign i_sft_pd_R1 [20:20] = fangyuan3_R [10:10] ;
  assign i_sft_pd_X1 [20:20] = fangyuan3_X [10:10] ;
  assign i_sft_pd_C1 [20:20] = fangyuan3_C [10:10] ;
  assign i_sft_pd_R1 [21:21] = fangyuan3_R [9:9] ;
  assign i_sft_pd_X1 [21:21] = fangyuan3_X [9:9] ;
  assign i_sft_pd_C1 [21:21] = fangyuan3_C [9:9] ;
  assign i_sft_pd_R1 [22:22] = fangyuan3_R [8:8] ;
  assign i_sft_pd_X1 [22:22] = fangyuan3_X [8:8] ;
  assign i_sft_pd_C1 [22:22] = fangyuan3_C [8:8] ;
  assign i_sft_pd_R1 [23:23] = fangyuan3_R [7:7] ;
  assign i_sft_pd_X1 [23:23] = fangyuan3_X [7:7] ;
  assign i_sft_pd_C1 [23:23] = fangyuan3_C [7:7] ;
  assign i_sft_pd_R1 [24:24] = fangyuan3_R [6:6] ;
  assign i_sft_pd_X1 [24:24] = fangyuan3_X [6:6] ;
  assign i_sft_pd_C1 [24:24] = fangyuan3_C [6:6] ;
  assign i_sft_pd_R1 [25:25] = fangyuan3_R [5:5] ;
  assign i_sft_pd_X1 [25:25] = fangyuan3_X [5:5] ;
  assign i_sft_pd_C1 [25:25] = fangyuan3_C [5:5] ;
  assign i_sft_pd_R1 [26:26] = fangyuan3_R [4:4] ;
  assign i_sft_pd_X1 [26:26] = fangyuan3_X [4:4] ;
  assign i_sft_pd_C1 [26:26] = fangyuan3_C [4:4] ;
  assign i_sft_pd_R1 [27:27] = fangyuan3_R [3:3] ;
  assign i_sft_pd_X1 [27:27] = fangyuan3_X [3:3] ;
  assign i_sft_pd_C1 [27:27] = fangyuan3_C [3:3] ;
  assign i_sft_pd_R1 [28:28] = fangyuan3_R [2:2] ;
  assign i_sft_pd_X1 [28:28] = fangyuan3_X [2:2] ;
  assign i_sft_pd_C1 [28:28] = fangyuan3_C [2:2] ;
  assign i_sft_pd_R1 [29:29] = fangyuan3_R [1:1] ;
  assign i_sft_pd_X1 [29:29] = fangyuan3_X [1:1] ;
  assign i_sft_pd_C1 [29:29] = fangyuan3_C [1:1] ;
  assign i_sft_pd_R1 [30:30] = fangyuan3_R [0:0] ;
  assign i_sft_pd_X1 [30:30] = fangyuan3_X [0:0] ;
  assign i_sft_pd_C1 [30:30] = fangyuan3_C [0:0] ;

  assign _16_ = & fangyuan3;
  logic [31:0] fangyuan3_C0 ;
  logic [31:0] fangyuan3_R0 ;
  logic [31:0] fangyuan3_X0 ;
  assign _16__T = | fangyuan3_T ;
  assign fangyuan3_C0 = { 32{ _16__C }} ;
  assign fangyuan3_X0 = { 32{ _16__X }} ;
  assign fangyuan3_R0 = { 32{ _16__R }} & ~fangyuan3 ;
  assign _16__S = 0 ;
  logic [1:0] fangyuan4;
  logic [1:0] fangyuan4_T ;
  logic [1:0] fangyuan4_R ;
  logic [1:0] fangyuan4_C ;
  logic [1:0] fangyuan4_X ;
  assign fangyuan4 = { i_sft_pd[31], i_sft_pd[32] };
  assign fangyuan4_T = {  i_sft_pd_T [31] , i_sft_pd_T [32]  };
  logic [13:0] fangyuan4_S ;
  assign fangyuan4_S = 0 ;
  logic [32:0] i_sft_pd_R2 ;
  logic [32:0] i_sft_pd_X2 ;
  logic [32:0] i_sft_pd_C2 ;
  assign i_sft_pd_R2 [31:31] = fangyuan4_R [1:1] ;
  assign i_sft_pd_X2 [31:31] = fangyuan4_X [1:1] ;
  assign i_sft_pd_C2 [31:31] = fangyuan4_C [1:1] ;
  assign i_sft_pd_R2 [32:32] = fangyuan4_R [0:0] ;
  assign i_sft_pd_X2 [32:32] = fangyuan4_X [0:0] ;
  assign i_sft_pd_C2 [32:32] = fangyuan4_C [0:0] ;

  assign _17_ = | fangyuan4;
  logic [1:0] fangyuan4_C0 ;
  logic [1:0] fangyuan4_R0 ;
  logic [1:0] fangyuan4_X0 ;
  assign _17__T = | fangyuan4_T ;
  assign fangyuan4_C0 = { 2{ _17__C }} ;
  assign fangyuan4_X0 = { 2{ _17__X }} ;
  assign fangyuan4_R0 = { 2{ _17__R }} & fangyuan4 ;
  assign _17__S = 0 ;
  logic [14:0] fangyuan5;
  logic [14:0] fangyuan5_T ;
  logic [14:0] fangyuan5_R ;
  logic [14:0] fangyuan5_C ;
  logic [14:0] fangyuan5_X ;
  assign fangyuan5 = { i_stick[0], i_stick[1], i_stick[2], i_stick[3], i_stick[4], i_stick[5], i_stick[6], i_stick[7], i_stick[8], i_stick[9], i_stick[10], i_stick[11], i_stick[12], i_stick[13], i_stick[14] };
  assign fangyuan5_T = {  i_stick_T [0] , i_stick_T [1] , i_stick_T [2] , i_stick_T [3] , i_stick_T [4] , i_stick_T [5] , i_stick_T [6] , i_stick_T [7] , i_stick_T [8] , i_stick_T [9] , i_stick_T [10] , i_stick_T [11] , i_stick_T [12] , i_stick_T [13] , i_stick_T [14]  };
  logic [13:0] fangyuan5_S ;
  assign fangyuan5_S = 0 ;
  logic [14:0] i_stick_R0 ;
  logic [14:0] i_stick_X0 ;
  logic [14:0] i_stick_C0 ;
  assign i_stick_R0 [0:0] = fangyuan5_R [14:14] ;
  assign i_stick_X0 [0:0] = fangyuan5_X [14:14] ;
  assign i_stick_C0 [0:0] = fangyuan5_C [14:14] ;
  assign i_stick_R0 [1:1] = fangyuan5_R [13:13] ;
  assign i_stick_X0 [1:1] = fangyuan5_X [13:13] ;
  assign i_stick_C0 [1:1] = fangyuan5_C [13:13] ;
  assign i_stick_R0 [2:2] = fangyuan5_R [12:12] ;
  assign i_stick_X0 [2:2] = fangyuan5_X [12:12] ;
  assign i_stick_C0 [2:2] = fangyuan5_C [12:12] ;
  assign i_stick_R0 [3:3] = fangyuan5_R [11:11] ;
  assign i_stick_X0 [3:3] = fangyuan5_X [11:11] ;
  assign i_stick_C0 [3:3] = fangyuan5_C [11:11] ;
  assign i_stick_R0 [4:4] = fangyuan5_R [10:10] ;
  assign i_stick_X0 [4:4] = fangyuan5_X [10:10] ;
  assign i_stick_C0 [4:4] = fangyuan5_C [10:10] ;
  assign i_stick_R0 [5:5] = fangyuan5_R [9:9] ;
  assign i_stick_X0 [5:5] = fangyuan5_X [9:9] ;
  assign i_stick_C0 [5:5] = fangyuan5_C [9:9] ;
  assign i_stick_R0 [6:6] = fangyuan5_R [8:8] ;
  assign i_stick_X0 [6:6] = fangyuan5_X [8:8] ;
  assign i_stick_C0 [6:6] = fangyuan5_C [8:8] ;
  assign i_stick_R0 [7:7] = fangyuan5_R [7:7] ;
  assign i_stick_X0 [7:7] = fangyuan5_X [7:7] ;
  assign i_stick_C0 [7:7] = fangyuan5_C [7:7] ;
  assign i_stick_R0 [8:8] = fangyuan5_R [6:6] ;
  assign i_stick_X0 [8:8] = fangyuan5_X [6:6] ;
  assign i_stick_C0 [8:8] = fangyuan5_C [6:6] ;
  assign i_stick_R0 [9:9] = fangyuan5_R [5:5] ;
  assign i_stick_X0 [9:9] = fangyuan5_X [5:5] ;
  assign i_stick_C0 [9:9] = fangyuan5_C [5:5] ;
  assign i_stick_R0 [10:10] = fangyuan5_R [4:4] ;
  assign i_stick_X0 [10:10] = fangyuan5_X [4:4] ;
  assign i_stick_C0 [10:10] = fangyuan5_C [4:4] ;
  assign i_stick_R0 [11:11] = fangyuan5_R [3:3] ;
  assign i_stick_X0 [11:11] = fangyuan5_X [3:3] ;
  assign i_stick_C0 [11:11] = fangyuan5_C [3:3] ;
  assign i_stick_R0 [12:12] = fangyuan5_R [2:2] ;
  assign i_stick_X0 [12:12] = fangyuan5_X [2:2] ;
  assign i_stick_C0 [12:12] = fangyuan5_C [2:2] ;
  assign i_stick_R0 [13:13] = fangyuan5_R [1:1] ;
  assign i_stick_X0 [13:13] = fangyuan5_X [1:1] ;
  assign i_stick_C0 [13:13] = fangyuan5_C [1:1] ;
  assign i_stick_R0 [14:14] = fangyuan5_R [0:0] ;
  assign i_stick_X0 [14:14] = fangyuan5_X [0:0] ;
  assign i_stick_C0 [14:14] = fangyuan5_C [0:0] ;

  assign _18_ = | fangyuan5;
  logic [14:0] fangyuan5_C0 ;
  logic [14:0] fangyuan5_R0 ;
  logic [14:0] fangyuan5_X0 ;
  assign _18__T = | fangyuan5_T ;
  assign fangyuan5_C0 = { 15{ _18__C }} ;
  assign fangyuan5_X0 = { 15{ _18__X }} ;
  assign fangyuan5_R0 = { 15{ _18__R }} & fangyuan5 ;
  assign _18__S = 0 ;
  logic [48:0] fangyuan6;
  logic [48:0] fangyuan6_T ;
  logic [48:0] fangyuan6_R ;
  logic [48:0] fangyuan6_C ;
  logic [48:0] fangyuan6_X ;
  assign fangyuan6 = { i_sft_pd, i_guide, i_stick };
  assign fangyuan6_T = {  i_sft_pd_T , i_guide_T , i_stick_T  };
  logic [13:0] fangyuan6_S ;
  assign fangyuan6_S = 0 ;
  assign { i_sft_pd_R2 [0], i_sft_pd_R2 [1], i_sft_pd_R2 [2], i_sft_pd_R2 [3], i_sft_pd_R2 [4], i_sft_pd_R2 [5], i_sft_pd_R2 [6], i_sft_pd_R2 [7], i_sft_pd_R2 [8], i_sft_pd_R2 [9], i_sft_pd_R2 [10], i_sft_pd_R2 [11], i_sft_pd_R2 [12], i_sft_pd_R2 [13], i_sft_pd_R2 [14], i_sft_pd_R2 [15], i_sft_pd_R2 [16], i_sft_pd_R2 [17], i_sft_pd_R2 [18], i_sft_pd_R2 [19], i_sft_pd_R2 [20], i_sft_pd_R2 [21], i_sft_pd_R2 [22], i_sft_pd_R2 [23], i_sft_pd_R2 [24], i_sft_pd_R2 [25], i_sft_pd_R2 [26], i_sft_pd_R2 [27], i_sft_pd_R2 [28], i_sft_pd_R2 [29], i_sft_pd_R2 [30] } = 0;
  assign { i_sft_pd_X2 [0], i_sft_pd_X2 [1], i_sft_pd_X2 [2], i_sft_pd_X2 [3], i_sft_pd_X2 [4], i_sft_pd_X2 [5], i_sft_pd_X2 [6], i_sft_pd_X2 [7], i_sft_pd_X2 [8], i_sft_pd_X2 [9], i_sft_pd_X2 [10], i_sft_pd_X2 [11], i_sft_pd_X2 [12], i_sft_pd_X2 [13], i_sft_pd_X2 [14], i_sft_pd_X2 [15], i_sft_pd_X2 [16], i_sft_pd_X2 [17], i_sft_pd_X2 [18], i_sft_pd_X2 [19], i_sft_pd_X2 [20], i_sft_pd_X2 [21], i_sft_pd_X2 [22], i_sft_pd_X2 [23], i_sft_pd_X2 [24], i_sft_pd_X2 [25], i_sft_pd_X2 [26], i_sft_pd_X2 [27], i_sft_pd_X2 [28], i_sft_pd_X2 [29], i_sft_pd_X2 [30] } = 0;
  assign { i_sft_pd_C2 [0], i_sft_pd_C2 [1], i_sft_pd_C2 [2], i_sft_pd_C2 [3], i_sft_pd_C2 [4], i_sft_pd_C2 [5], i_sft_pd_C2 [6], i_sft_pd_C2 [7], i_sft_pd_C2 [8], i_sft_pd_C2 [9], i_sft_pd_C2 [10], i_sft_pd_C2 [11], i_sft_pd_C2 [12], i_sft_pd_C2 [13], i_sft_pd_C2 [14], i_sft_pd_C2 [15], i_sft_pd_C2 [16], i_sft_pd_C2 [17], i_sft_pd_C2 [18], i_sft_pd_C2 [19], i_sft_pd_C2 [20], i_sft_pd_C2 [21], i_sft_pd_C2 [22], i_sft_pd_C2 [23], i_sft_pd_C2 [24], i_sft_pd_C2 [25], i_sft_pd_C2 [26], i_sft_pd_C2 [27], i_sft_pd_C2 [28], i_sft_pd_C2 [29], i_sft_pd_C2 [30] } = 0;
  logic [32:0] i_sft_pd_R3 ;
  logic [32:0] i_sft_pd_X3 ;
  logic [32:0] i_sft_pd_C3 ;
  assign i_sft_pd_R3 = fangyuan6_R [48:16] ;
  assign i_sft_pd_X3 = fangyuan6_X [48:16] ;
  assign i_sft_pd_C3 = fangyuan6_C [48:16] ;
  logic [0:0] i_guide_R1 ;
  logic [0:0] i_guide_X1 ;
  logic [0:0] i_guide_C1 ;
  assign i_guide_R1 = fangyuan6_R [15:15] ;
  assign i_guide_X1 = fangyuan6_X [15:15] ;
  assign i_guide_C1 = fangyuan6_C [15:15] ;
  logic [14:0] i_stick_R1 ;
  logic [14:0] i_stick_X1 ;
  logic [14:0] i_stick_C1 ;
  assign i_stick_R1 = fangyuan6_R [14:0] ;
  assign i_stick_X1 = fangyuan6_X [14:0] ;
  assign i_stick_C1 = fangyuan6_C [14:0] ;
  logic [49:0] fangyuan7;
  logic [49:0] fangyuan7_T ;
  logic [49:0] fangyuan7_R ;
  logic [49:0] fangyuan7_C ;
  logic [49:0] fangyuan7_X ;
  assign fangyuan7 = { i_pre_sft_pd, 16'b0000000000000000 };
  assign fangyuan7_T = {  i_pre_sft_pd_T , 16'h0  };
  logic [13:0] fangyuan7_S ;
  assign fangyuan7_S = 0 ;
  logic [33:0] i_pre_sft_pd_R0 ;
  logic [33:0] i_pre_sft_pd_X0 ;
  logic [33:0] i_pre_sft_pd_C0 ;
  assign i_pre_sft_pd_R0 = fangyuan7_R [49:16] ;
  assign i_pre_sft_pd_X0 = fangyuan7_X [49:16] ;
  assign i_pre_sft_pd_C0 = fangyuan7_C [49:16] ;

 assign fangyuan6 = fangyuan7 >>> cfg_truncate;
 assign fangyuan6_S = 0 ;
 logic [49:0] fangyuan7_C0 ;
 logic [49:0] fangyuan7_R0 ;
 logic [49:0] fangyuan7_X0 ;
 logic [4:0] cfg_truncate_C0 ;
 logic [4:0] cfg_truncate_R0 ;
 logic [4:0] cfg_truncate_X0 ;
 assign fangyuan6_T = fangyuan7_T | cfg_truncate_T ;
 assign fangyuan7_C0 = fangyuan6_C ;
 assign fangyuan7_X0 = fangyuan6_X ;
 assign cfg_truncate_C0 = fangyuan6_C ;
 assign cfg_truncate_X0 = fangyuan6_X ;
 assign fangyuan7_R0 = fangyuan6_R | ( fangyuan6_C & cfg_truncate_T );
 assign cfg_truncate_R0 = fangyuan6_R | ( fangyuan6_C & fangyuan7_T );
  logic [33:0] fangyuan8;
  logic [33:0] fangyuan8_T ;
  logic [33:0] fangyuan8_R ;
  logic [33:0] fangyuan8_C ;
  logic [33:0] fangyuan8_X ;
  assign fangyuan8 = { i_sum_pd[34], i_sat_bits };
  assign fangyuan8_T = {  i_sum_pd_T [34] , i_sat_bits_T  };
  logic [13:0] fangyuan8_S ;
  assign fangyuan8_S = 0 ;
  logic [34:0] i_sum_pd_R4 ;
  logic [34:0] i_sum_pd_X4 ;
  logic [34:0] i_sum_pd_C4 ;
  assign i_sum_pd_R4 [34:34] = fangyuan8_R [33:33] ;
  assign i_sum_pd_X4 [34:34] = fangyuan8_X [33:33] ;
  assign i_sum_pd_C4 [34:34] = fangyuan8_C [33:33] ;
  logic [32:0] i_sat_bits_R1 ;
  logic [32:0] i_sat_bits_X1 ;
  logic [32:0] i_sat_bits_C1 ;
  assign i_sat_bits_R1 = fangyuan8_R [32:0] ;
  assign i_sat_bits_X1 = fangyuan8_X [32:0] ;
  assign i_sat_bits_C1 = fangyuan8_C [32:0] ;

  assign i_pre_sft_pd = i_sat_sel ? fangyuan8 : 34'b0000000000000000000000000000000000;
  logic [0:0] i_sat_sel_C4 ;
  logic [0:0] i_sat_sel_R4 ;
  logic [0:0] i_sat_sel_X4 ;
  assign i_sat_sel_C4 = | i_pre_sft_pd_C ;
  assign i_sat_sel_X4 = | i_pre_sft_pd_X ;
  logic [33:0] fangyuan8_C0 ;
  logic [33:0] fangyuan8_R0 ;
  logic [33:0] fangyuan8_X0 ;
  assign fangyuan8_C0 = { 34{ i_sat_sel }} ;
  assign fangyuan8_R0 = { 34{ i_sat_sel }} & ( i_pre_sft_pd_R | ( { 34{ i_sat_sel_T  }} & i_pre_sft_pd_C ));
  assign fangyuan8_X0 = { 34{ i_sat_sel }} & i_pre_sft_pd_X ;
  assign i_pre_sft_pd_T = i_sat_sel ? ( { 34{ | i_sat_sel_T  }} | fangyuan8_T ) : { 34{ | i_sat_sel_T  }};
  assign i_pre_sft_pd_S = i_sat_sel ? fangyuan8_S : i_sat_sel_S ;
  assign i_sat_sel_R4 = ( | (i_pre_sft_pd_R | ( { 34{ i_sat_sel }} & fangyuan8_T & i_pre_sft_pd_C ))) && fangyuan8 != 34'b0000000000000000000000000000000000 ;
  assign i_sft_max = i_sum_pd[34] ? 32'd2147483648 : 32'd2147483647;
  assign { i_sum_pd_R4 [0], i_sum_pd_R4 [1], i_sum_pd_R4 [2], i_sum_pd_R4 [3], i_sum_pd_R4 [4], i_sum_pd_R4 [5], i_sum_pd_R4 [6], i_sum_pd_R4 [7], i_sum_pd_R4 [8], i_sum_pd_R4 [9], i_sum_pd_R4 [10], i_sum_pd_R4 [11], i_sum_pd_R4 [12], i_sum_pd_R4 [13], i_sum_pd_R4 [14], i_sum_pd_R4 [15], i_sum_pd_R4 [16], i_sum_pd_R4 [17], i_sum_pd_R4 [18], i_sum_pd_R4 [19], i_sum_pd_R4 [20], i_sum_pd_R4 [21], i_sum_pd_R4 [22], i_sum_pd_R4 [23], i_sum_pd_R4 [24], i_sum_pd_R4 [25], i_sum_pd_R4 [26], i_sum_pd_R4 [27], i_sum_pd_R4 [28], i_sum_pd_R4 [29], i_sum_pd_R4 [30], i_sum_pd_R4 [31], i_sum_pd_R4 [32], i_sum_pd_R4 [33] } = 0;
  assign { i_sum_pd_X4 [0], i_sum_pd_X4 [1], i_sum_pd_X4 [2], i_sum_pd_X4 [3], i_sum_pd_X4 [4], i_sum_pd_X4 [5], i_sum_pd_X4 [6], i_sum_pd_X4 [7], i_sum_pd_X4 [8], i_sum_pd_X4 [9], i_sum_pd_X4 [10], i_sum_pd_X4 [11], i_sum_pd_X4 [12], i_sum_pd_X4 [13], i_sum_pd_X4 [14], i_sum_pd_X4 [15], i_sum_pd_X4 [16], i_sum_pd_X4 [17], i_sum_pd_X4 [18], i_sum_pd_X4 [19], i_sum_pd_X4 [20], i_sum_pd_X4 [21], i_sum_pd_X4 [22], i_sum_pd_X4 [23], i_sum_pd_X4 [24], i_sum_pd_X4 [25], i_sum_pd_X4 [26], i_sum_pd_X4 [27], i_sum_pd_X4 [28], i_sum_pd_X4 [29], i_sum_pd_X4 [30], i_sum_pd_X4 [31], i_sum_pd_X4 [32], i_sum_pd_X4 [33] } = 0;
  assign { i_sum_pd_C4 [0], i_sum_pd_C4 [1], i_sum_pd_C4 [2], i_sum_pd_C4 [3], i_sum_pd_C4 [4], i_sum_pd_C4 [5], i_sum_pd_C4 [6], i_sum_pd_C4 [7], i_sum_pd_C4 [8], i_sum_pd_C4 [9], i_sum_pd_C4 [10], i_sum_pd_C4 [11], i_sum_pd_C4 [12], i_sum_pd_C4 [13], i_sum_pd_C4 [14], i_sum_pd_C4 [15], i_sum_pd_C4 [16], i_sum_pd_C4 [17], i_sum_pd_C4 [18], i_sum_pd_C4 [19], i_sum_pd_C4 [20], i_sum_pd_C4 [21], i_sum_pd_C4 [22], i_sum_pd_C4 [23], i_sum_pd_C4 [24], i_sum_pd_C4 [25], i_sum_pd_C4 [26], i_sum_pd_C4 [27], i_sum_pd_C4 [28], i_sum_pd_C4 [29], i_sum_pd_C4 [30], i_sum_pd_C4 [31], i_sum_pd_C4 [32], i_sum_pd_C4 [33] } = 0;
  logic [34:0] i_sum_pd_C5 ;
  logic [34:0] i_sum_pd_R5 ;
  logic [34:0] i_sum_pd_X5 ;
  assign i_sum_pd_C5 [34] = | i_sft_max_C ;
  assign i_sum_pd_X5 [34] = | i_sft_max_X ;
  assign i_sft_max_T = { 32{ i_sum_pd_T  [34] }} ;
  assign i_sft_max_S = i_sum_pd_S ;
  assign i_sum_pd_R5 [34] = ( | i_sft_max_R) && 32'd2147483648 != 32'd2147483647 ;
  assign i_final_result = i_sft_need_sat ? i_sft_max : i_tru_pd;
  logic [0:0] i_sft_need_sat_C1 ;
  logic [0:0] i_sft_need_sat_R1 ;
  logic [0:0] i_sft_need_sat_X1 ;
  assign i_sft_need_sat_C1 = | i_final_result_C ;
  assign i_sft_need_sat_X1 = | i_final_result_X ;
  assign i_final_result_T = i_sft_need_sat ? ( { 32{ i_sft_need_sat_T  }} | i_sft_max_T ) : ( { 32{ i_sft_need_sat_T  }} | i_tru_pd_T );
  assign i_final_result_S = i_sft_need_sat ? i_sft_max_S : i_tru_pd_S ;
  assign i_sft_need_sat_R1 = ( | (i_final_result_R | ( i_final_result_C & ( { 32{ i_sft_need_sat }} & i_sft_max_T | { 32{ !i_sft_need_sat }} & i_tru_pd_T )))) && i_sft_max != i_tru_pd ;
  logic [31:0] i_sft_max_C0 ;
  logic [31:0] i_sft_max_R0 ;
  logic [31:0] i_sft_max_X0 ;
  assign i_sft_max_C0 = { 32{ i_sft_need_sat }} ;
  assign i_sft_max_R0 = { 32{ i_sft_need_sat }} & ( i_final_result_R | ( { 32{ i_sft_need_sat_T  }} & i_final_result_C ));
  assign i_sft_max_X0 = { 32{ i_sft_need_sat }} & i_final_result_X ;
  logic [31:0] i_tru_pd_C0 ;
  logic [31:0] i_tru_pd_R0 ;
  logic [31:0] i_tru_pd_X0 ;
  assign i_tru_pd_C0 = { 32{ !i_sft_need_sat }} ;
  assign i_tru_pd_R0 = { 32{ !i_sft_need_sat }} & ( i_final_result_R | ( { 32{ i_sft_need_sat_T  }} & i_final_result_C ));
  assign i_tru_pd_X0 = { 32{ !i_sft_need_sat }} & i_final_result_X ;
  assign oi_pd = in_op_valid ? in_op : 34'b0000000000000000000000000000000000;
  logic [0:0] in_op_valid_C0 ;
  logic [0:0] in_op_valid_R0 ;
  logic [0:0] in_op_valid_X0 ;
  assign in_op_valid_C0 = | oi_pd_C ;
  assign in_op_valid_X0 = | oi_pd_X ;
  logic [33:0] in_op_C0 ;
  logic [33:0] in_op_R0 ;
  logic [33:0] in_op_X0 ;
  assign in_op_C0 = { 34{ in_op_valid }} ;
  assign in_op_R0 = { 34{ in_op_valid }} & ( oi_pd_R | ( { 34{ in_op_valid_T  }} & oi_pd_C ));
  assign in_op_X0 = { 34{ in_op_valid }} & oi_pd_X ;
  assign oi_pd_T = in_op_valid ? ( { 34{ | in_op_valid_T  }} | in_op_T ) : { 34{ | in_op_valid_T  }};
  assign oi_pd_S = in_op_valid ? in_op_S : in_op_valid_S ;
  assign in_op_valid_R0 = ( | (oi_pd_R | ( { 34{ in_op_valid }} & in_op_T & oi_pd_C ))) && in_op != 34'b0000000000000000000000000000000000 ;
  assign _14_ = i_sum_pd[34] ^ i_sum_pd[33];
  assign _14__S = 0 ;
  assign { i_sum_pd_R5 [0], i_sum_pd_R5 [1], i_sum_pd_R5 [2], i_sum_pd_R5 [3], i_sum_pd_R5 [4], i_sum_pd_R5 [5], i_sum_pd_R5 [6], i_sum_pd_R5 [7], i_sum_pd_R5 [8], i_sum_pd_R5 [9], i_sum_pd_R5 [10], i_sum_pd_R5 [11], i_sum_pd_R5 [12], i_sum_pd_R5 [13], i_sum_pd_R5 [14], i_sum_pd_R5 [15], i_sum_pd_R5 [16], i_sum_pd_R5 [17], i_sum_pd_R5 [18], i_sum_pd_R5 [19], i_sum_pd_R5 [20], i_sum_pd_R5 [21], i_sum_pd_R5 [22], i_sum_pd_R5 [23], i_sum_pd_R5 [24], i_sum_pd_R5 [25], i_sum_pd_R5 [26], i_sum_pd_R5 [27], i_sum_pd_R5 [28], i_sum_pd_R5 [29], i_sum_pd_R5 [30], i_sum_pd_R5 [31], i_sum_pd_R5 [32], i_sum_pd_R5 [33] } = 0;
  assign { i_sum_pd_X5 [0], i_sum_pd_X5 [1], i_sum_pd_X5 [2], i_sum_pd_X5 [3], i_sum_pd_X5 [4], i_sum_pd_X5 [5], i_sum_pd_X5 [6], i_sum_pd_X5 [7], i_sum_pd_X5 [8], i_sum_pd_X5 [9], i_sum_pd_X5 [10], i_sum_pd_X5 [11], i_sum_pd_X5 [12], i_sum_pd_X5 [13], i_sum_pd_X5 [14], i_sum_pd_X5 [15], i_sum_pd_X5 [16], i_sum_pd_X5 [17], i_sum_pd_X5 [18], i_sum_pd_X5 [19], i_sum_pd_X5 [20], i_sum_pd_X5 [21], i_sum_pd_X5 [22], i_sum_pd_X5 [23], i_sum_pd_X5 [24], i_sum_pd_X5 [25], i_sum_pd_X5 [26], i_sum_pd_X5 [27], i_sum_pd_X5 [28], i_sum_pd_X5 [29], i_sum_pd_X5 [30], i_sum_pd_X5 [31], i_sum_pd_X5 [32], i_sum_pd_X5 [33] } = 0;
  assign { i_sum_pd_C5 [0], i_sum_pd_C5 [1], i_sum_pd_C5 [2], i_sum_pd_C5 [3], i_sum_pd_C5 [4], i_sum_pd_C5 [5], i_sum_pd_C5 [6], i_sum_pd_C5 [7], i_sum_pd_C5 [8], i_sum_pd_C5 [9], i_sum_pd_C5 [10], i_sum_pd_C5 [11], i_sum_pd_C5 [12], i_sum_pd_C5 [13], i_sum_pd_C5 [14], i_sum_pd_C5 [15], i_sum_pd_C5 [16], i_sum_pd_C5 [17], i_sum_pd_C5 [18], i_sum_pd_C5 [19], i_sum_pd_C5 [20], i_sum_pd_C5 [21], i_sum_pd_C5 [22], i_sum_pd_C5 [23], i_sum_pd_C5 [24], i_sum_pd_C5 [25], i_sum_pd_C5 [26], i_sum_pd_C5 [27], i_sum_pd_C5 [28], i_sum_pd_C5 [29], i_sum_pd_C5 [30], i_sum_pd_C5 [31], i_sum_pd_C5 [32], i_sum_pd_C5 [33] } = 0;
  logic [34:0] i_sum_pd_C6 ;
  logic [34:0] i_sum_pd_R6 ;
  logic [34:0] i_sum_pd_X6 ;
  assign _14__T = i_sum_pd_T [34] | i_sum_pd_T [33] ;
  assign i_sum_pd_C6 [34] = _14__C ;
  assign i_sum_pd_X6 [34] = _14__X ;
  assign i_sum_pd_C6 [33] = _14__C ;
  assign i_sum_pd_X6 [33] = _14__X ;
  assign i_sum_pd_R6 [34] = _14__R | ( _14__C & i_sum_pd_T [33] );
  assign i_sum_pd_R6 [33] = _14__R | ( _14__C & i_sum_pd_T [34] );
  assign di_pd = in_data;
  logic [21:0] in_data_C1 ;
  logic [21:0] in_data_R1 ;
  logic [21:0] in_data_X1 ;
  assign di_pd_T = in_data_T ;
  assign in_data_C1 = di_pd_C ;
  assign in_data_R1 = di_pd_R ;
  assign in_data_X1 = di_pd_X ;
  assign di_pd_S = in_data_S ;
  assign i_partial_result = { i_sum_pd[34], i_sat_bits };
  assign i_partial_result_T = {  i_sum_pd_T [34] , i_sat_bits_T  };
  logic [13:0] i_partial_result_S ;
  assign i_partial_result_S = 0 ;
  assign { i_sum_pd_R6 [0], i_sum_pd_R6 [1], i_sum_pd_R6 [2], i_sum_pd_R6 [3], i_sum_pd_R6 [4], i_sum_pd_R6 [5], i_sum_pd_R6 [6], i_sum_pd_R6 [7], i_sum_pd_R6 [8], i_sum_pd_R6 [9], i_sum_pd_R6 [10], i_sum_pd_R6 [11], i_sum_pd_R6 [12], i_sum_pd_R6 [13], i_sum_pd_R6 [14], i_sum_pd_R6 [15], i_sum_pd_R6 [16], i_sum_pd_R6 [17], i_sum_pd_R6 [18], i_sum_pd_R6 [19], i_sum_pd_R6 [20], i_sum_pd_R6 [21], i_sum_pd_R6 [22], i_sum_pd_R6 [23], i_sum_pd_R6 [24], i_sum_pd_R6 [25], i_sum_pd_R6 [26], i_sum_pd_R6 [27], i_sum_pd_R6 [28], i_sum_pd_R6 [29], i_sum_pd_R6 [30], i_sum_pd_R6 [31], i_sum_pd_R6 [32] } = 0;
  assign { i_sum_pd_X6 [0], i_sum_pd_X6 [1], i_sum_pd_X6 [2], i_sum_pd_X6 [3], i_sum_pd_X6 [4], i_sum_pd_X6 [5], i_sum_pd_X6 [6], i_sum_pd_X6 [7], i_sum_pd_X6 [8], i_sum_pd_X6 [9], i_sum_pd_X6 [10], i_sum_pd_X6 [11], i_sum_pd_X6 [12], i_sum_pd_X6 [13], i_sum_pd_X6 [14], i_sum_pd_X6 [15], i_sum_pd_X6 [16], i_sum_pd_X6 [17], i_sum_pd_X6 [18], i_sum_pd_X6 [19], i_sum_pd_X6 [20], i_sum_pd_X6 [21], i_sum_pd_X6 [22], i_sum_pd_X6 [23], i_sum_pd_X6 [24], i_sum_pd_X6 [25], i_sum_pd_X6 [26], i_sum_pd_X6 [27], i_sum_pd_X6 [28], i_sum_pd_X6 [29], i_sum_pd_X6 [30], i_sum_pd_X6 [31], i_sum_pd_X6 [32] } = 0;
  assign { i_sum_pd_C6 [0], i_sum_pd_C6 [1], i_sum_pd_C6 [2], i_sum_pd_C6 [3], i_sum_pd_C6 [4], i_sum_pd_C6 [5], i_sum_pd_C6 [6], i_sum_pd_C6 [7], i_sum_pd_C6 [8], i_sum_pd_C6 [9], i_sum_pd_C6 [10], i_sum_pd_C6 [11], i_sum_pd_C6 [12], i_sum_pd_C6 [13], i_sum_pd_C6 [14], i_sum_pd_C6 [15], i_sum_pd_C6 [16], i_sum_pd_C6 [17], i_sum_pd_C6 [18], i_sum_pd_C6 [19], i_sum_pd_C6 [20], i_sum_pd_C6 [21], i_sum_pd_C6 [22], i_sum_pd_C6 [23], i_sum_pd_C6 [24], i_sum_pd_C6 [25], i_sum_pd_C6 [26], i_sum_pd_C6 [27], i_sum_pd_C6 [28], i_sum_pd_C6 [29], i_sum_pd_C6 [30], i_sum_pd_C6 [31], i_sum_pd_C6 [32] } = 0;
  logic [34:0] i_sum_pd_R7 ;
  logic [34:0] i_sum_pd_X7 ;
  logic [34:0] i_sum_pd_C7 ;
  assign i_sum_pd_R7 [34:34] = i_partial_result_R [33:33] ;
  assign i_sum_pd_X7 [34:34] = i_partial_result_X [33:33] ;
  assign i_sum_pd_C7 [34:34] = i_partial_result_C [33:33] ;
  logic [32:0] i_sat_bits_R2 ;
  logic [32:0] i_sat_bits_X2 ;
  logic [32:0] i_sat_bits_C2 ;
  assign i_sat_bits_R2 = i_partial_result_R [32:0] ;
  assign i_sat_bits_X2 = i_partial_result_X [32:0] ;
  assign i_sat_bits_C2 = i_partial_result_C [32:0] ;
  assign i_pos_pd = i_tru_pd;
  logic [31:0] i_tru_pd_C1 ;
  logic [31:0] i_tru_pd_R1 ;
  logic [31:0] i_tru_pd_X1 ;
  assign i_pos_pd_T = i_tru_pd_T ;
  assign i_tru_pd_C1 = i_pos_pd_C ;
  assign i_tru_pd_R1 = i_pos_pd_R ;
  assign i_tru_pd_X1 = i_pos_pd_X ;
  assign i_pos_pd_S = i_tru_pd_S ;
  assign i_sat_pd = { i_sum_pd[34], i_sat_bits };
  assign i_sat_pd_T = {  i_sum_pd_T [34] , i_sat_bits_T  };
  logic [13:0] i_sat_pd_S ;
  assign i_sat_pd_S = 0 ;
  assign { i_sum_pd_R7 [0], i_sum_pd_R7 [1], i_sum_pd_R7 [2], i_sum_pd_R7 [3], i_sum_pd_R7 [4], i_sum_pd_R7 [5], i_sum_pd_R7 [6], i_sum_pd_R7 [7], i_sum_pd_R7 [8], i_sum_pd_R7 [9], i_sum_pd_R7 [10], i_sum_pd_R7 [11], i_sum_pd_R7 [12], i_sum_pd_R7 [13], i_sum_pd_R7 [14], i_sum_pd_R7 [15], i_sum_pd_R7 [16], i_sum_pd_R7 [17], i_sum_pd_R7 [18], i_sum_pd_R7 [19], i_sum_pd_R7 [20], i_sum_pd_R7 [21], i_sum_pd_R7 [22], i_sum_pd_R7 [23], i_sum_pd_R7 [24], i_sum_pd_R7 [25], i_sum_pd_R7 [26], i_sum_pd_R7 [27], i_sum_pd_R7 [28], i_sum_pd_R7 [29], i_sum_pd_R7 [30], i_sum_pd_R7 [31], i_sum_pd_R7 [32], i_sum_pd_R7 [33] } = 0;
  assign { i_sum_pd_X7 [0], i_sum_pd_X7 [1], i_sum_pd_X7 [2], i_sum_pd_X7 [3], i_sum_pd_X7 [4], i_sum_pd_X7 [5], i_sum_pd_X7 [6], i_sum_pd_X7 [7], i_sum_pd_X7 [8], i_sum_pd_X7 [9], i_sum_pd_X7 [10], i_sum_pd_X7 [11], i_sum_pd_X7 [12], i_sum_pd_X7 [13], i_sum_pd_X7 [14], i_sum_pd_X7 [15], i_sum_pd_X7 [16], i_sum_pd_X7 [17], i_sum_pd_X7 [18], i_sum_pd_X7 [19], i_sum_pd_X7 [20], i_sum_pd_X7 [21], i_sum_pd_X7 [22], i_sum_pd_X7 [23], i_sum_pd_X7 [24], i_sum_pd_X7 [25], i_sum_pd_X7 [26], i_sum_pd_X7 [27], i_sum_pd_X7 [28], i_sum_pd_X7 [29], i_sum_pd_X7 [30], i_sum_pd_X7 [31], i_sum_pd_X7 [32], i_sum_pd_X7 [33] } = 0;
  assign { i_sum_pd_C7 [0], i_sum_pd_C7 [1], i_sum_pd_C7 [2], i_sum_pd_C7 [3], i_sum_pd_C7 [4], i_sum_pd_C7 [5], i_sum_pd_C7 [6], i_sum_pd_C7 [7], i_sum_pd_C7 [8], i_sum_pd_C7 [9], i_sum_pd_C7 [10], i_sum_pd_C7 [11], i_sum_pd_C7 [12], i_sum_pd_C7 [13], i_sum_pd_C7 [14], i_sum_pd_C7 [15], i_sum_pd_C7 [16], i_sum_pd_C7 [17], i_sum_pd_C7 [18], i_sum_pd_C7 [19], i_sum_pd_C7 [20], i_sum_pd_C7 [21], i_sum_pd_C7 [22], i_sum_pd_C7 [23], i_sum_pd_C7 [24], i_sum_pd_C7 [25], i_sum_pd_C7 [26], i_sum_pd_C7 [27], i_sum_pd_C7 [28], i_sum_pd_C7 [29], i_sum_pd_C7 [30], i_sum_pd_C7 [31], i_sum_pd_C7 [32], i_sum_pd_C7 [33] } = 0;
  logic [34:0] i_sum_pd_R8 ;
  logic [34:0] i_sum_pd_X8 ;
  logic [34:0] i_sum_pd_C8 ;
  assign i_sum_pd_R8 [34:34] = i_sat_pd_R [33:33] ;
  assign i_sum_pd_X8 [34:34] = i_sat_pd_X [33:33] ;
  assign i_sum_pd_C8 [34:34] = i_sat_pd_C [33:33] ;
  logic [32:0] i_sat_bits_R3 ;
  logic [32:0] i_sat_bits_X3 ;
  logic [32:0] i_sat_bits_C3 ;
  assign i_sat_bits_R3 = i_sat_pd_R [32:0] ;
  assign i_sat_bits_X3 = i_sat_pd_X [32:0] ;
  assign i_sat_bits_C3 = i_sat_pd_C [32:0] ;
  assign i_sat_sign = i_sum_pd[34];
  assign { i_sum_pd_R8 [0], i_sum_pd_R8 [1], i_sum_pd_R8 [2], i_sum_pd_R8 [3], i_sum_pd_R8 [4], i_sum_pd_R8 [5], i_sum_pd_R8 [6], i_sum_pd_R8 [7], i_sum_pd_R8 [8], i_sum_pd_R8 [9], i_sum_pd_R8 [10], i_sum_pd_R8 [11], i_sum_pd_R8 [12], i_sum_pd_R8 [13], i_sum_pd_R8 [14], i_sum_pd_R8 [15], i_sum_pd_R8 [16], i_sum_pd_R8 [17], i_sum_pd_R8 [18], i_sum_pd_R8 [19], i_sum_pd_R8 [20], i_sum_pd_R8 [21], i_sum_pd_R8 [22], i_sum_pd_R8 [23], i_sum_pd_R8 [24], i_sum_pd_R8 [25], i_sum_pd_R8 [26], i_sum_pd_R8 [27], i_sum_pd_R8 [28], i_sum_pd_R8 [29], i_sum_pd_R8 [30], i_sum_pd_R8 [31], i_sum_pd_R8 [32], i_sum_pd_R8 [33] } = 0;
  assign { i_sum_pd_X8 [0], i_sum_pd_X8 [1], i_sum_pd_X8 [2], i_sum_pd_X8 [3], i_sum_pd_X8 [4], i_sum_pd_X8 [5], i_sum_pd_X8 [6], i_sum_pd_X8 [7], i_sum_pd_X8 [8], i_sum_pd_X8 [9], i_sum_pd_X8 [10], i_sum_pd_X8 [11], i_sum_pd_X8 [12], i_sum_pd_X8 [13], i_sum_pd_X8 [14], i_sum_pd_X8 [15], i_sum_pd_X8 [16], i_sum_pd_X8 [17], i_sum_pd_X8 [18], i_sum_pd_X8 [19], i_sum_pd_X8 [20], i_sum_pd_X8 [21], i_sum_pd_X8 [22], i_sum_pd_X8 [23], i_sum_pd_X8 [24], i_sum_pd_X8 [25], i_sum_pd_X8 [26], i_sum_pd_X8 [27], i_sum_pd_X8 [28], i_sum_pd_X8 [29], i_sum_pd_X8 [30], i_sum_pd_X8 [31], i_sum_pd_X8 [32], i_sum_pd_X8 [33] } = 0;
  assign { i_sum_pd_C8 [0], i_sum_pd_C8 [1], i_sum_pd_C8 [2], i_sum_pd_C8 [3], i_sum_pd_C8 [4], i_sum_pd_C8 [5], i_sum_pd_C8 [6], i_sum_pd_C8 [7], i_sum_pd_C8 [8], i_sum_pd_C8 [9], i_sum_pd_C8 [10], i_sum_pd_C8 [11], i_sum_pd_C8 [12], i_sum_pd_C8 [13], i_sum_pd_C8 [14], i_sum_pd_C8 [15], i_sum_pd_C8 [16], i_sum_pd_C8 [17], i_sum_pd_C8 [18], i_sum_pd_C8 [19], i_sum_pd_C8 [20], i_sum_pd_C8 [21], i_sum_pd_C8 [22], i_sum_pd_C8 [23], i_sum_pd_C8 [24], i_sum_pd_C8 [25], i_sum_pd_C8 [26], i_sum_pd_C8 [27], i_sum_pd_C8 [28], i_sum_pd_C8 [29], i_sum_pd_C8 [30], i_sum_pd_C8 [31], i_sum_pd_C8 [32], i_sum_pd_C8 [33] } = 0;
  logic [34:0] i_sum_pd_C9 ;
  logic [34:0] i_sum_pd_R9 ;
  logic [34:0] i_sum_pd_X9 ;
  assign i_sat_sign_T = i_sum_pd_T [34] ;
  assign i_sum_pd_C9 [34] = i_sat_sign_C ;
  assign i_sum_pd_R9 [34] = i_sat_sign_R ;
  assign i_sum_pd_X9 [34] = i_sat_sign_X ;
  assign i_sat_sign_S = i_sum_pd_S ;
  assign i_sel = in_sel;
  logic [0:0] in_sel_C1 ;
  logic [0:0] in_sel_R1 ;
  logic [0:0] in_sel_X1 ;
  assign i_sel_T = in_sel_T ;
  assign in_sel_C1 = i_sel_C ;
  assign in_sel_R1 = i_sel_R ;
  assign in_sel_X1 = i_sel_X ;
  assign i_sel_S = in_sel_S ;
  assign i_sum_msb = i_sum_pd[33];
  assign i_sum_msb_T = i_sum_pd_T [33] ;
  assign i_sum_pd_C9 [33] = i_sum_msb_C ;
  assign i_sum_pd_R9 [33] = i_sum_msb_R ;
  assign i_sum_pd_X9 [33] = i_sum_msb_X ;
  assign i_sum_msb_S = i_sum_pd_S ;
  assign i_sum_sign = i_sum_pd[34];
  assign { i_sum_pd_R9 [0], i_sum_pd_R9 [1], i_sum_pd_R9 [2], i_sum_pd_R9 [3], i_sum_pd_R9 [4], i_sum_pd_R9 [5], i_sum_pd_R9 [6], i_sum_pd_R9 [7], i_sum_pd_R9 [8], i_sum_pd_R9 [9], i_sum_pd_R9 [10], i_sum_pd_R9 [11], i_sum_pd_R9 [12], i_sum_pd_R9 [13], i_sum_pd_R9 [14], i_sum_pd_R9 [15], i_sum_pd_R9 [16], i_sum_pd_R9 [17], i_sum_pd_R9 [18], i_sum_pd_R9 [19], i_sum_pd_R9 [20], i_sum_pd_R9 [21], i_sum_pd_R9 [22], i_sum_pd_R9 [23], i_sum_pd_R9 [24], i_sum_pd_R9 [25], i_sum_pd_R9 [26], i_sum_pd_R9 [27], i_sum_pd_R9 [28], i_sum_pd_R9 [29], i_sum_pd_R9 [30], i_sum_pd_R9 [31], i_sum_pd_R9 [32] } = 0;
  assign { i_sum_pd_X9 [0], i_sum_pd_X9 [1], i_sum_pd_X9 [2], i_sum_pd_X9 [3], i_sum_pd_X9 [4], i_sum_pd_X9 [5], i_sum_pd_X9 [6], i_sum_pd_X9 [7], i_sum_pd_X9 [8], i_sum_pd_X9 [9], i_sum_pd_X9 [10], i_sum_pd_X9 [11], i_sum_pd_X9 [12], i_sum_pd_X9 [13], i_sum_pd_X9 [14], i_sum_pd_X9 [15], i_sum_pd_X9 [16], i_sum_pd_X9 [17], i_sum_pd_X9 [18], i_sum_pd_X9 [19], i_sum_pd_X9 [20], i_sum_pd_X9 [21], i_sum_pd_X9 [22], i_sum_pd_X9 [23], i_sum_pd_X9 [24], i_sum_pd_X9 [25], i_sum_pd_X9 [26], i_sum_pd_X9 [27], i_sum_pd_X9 [28], i_sum_pd_X9 [29], i_sum_pd_X9 [30], i_sum_pd_X9 [31], i_sum_pd_X9 [32] } = 0;
  assign { i_sum_pd_C9 [0], i_sum_pd_C9 [1], i_sum_pd_C9 [2], i_sum_pd_C9 [3], i_sum_pd_C9 [4], i_sum_pd_C9 [5], i_sum_pd_C9 [6], i_sum_pd_C9 [7], i_sum_pd_C9 [8], i_sum_pd_C9 [9], i_sum_pd_C9 [10], i_sum_pd_C9 [11], i_sum_pd_C9 [12], i_sum_pd_C9 [13], i_sum_pd_C9 [14], i_sum_pd_C9 [15], i_sum_pd_C9 [16], i_sum_pd_C9 [17], i_sum_pd_C9 [18], i_sum_pd_C9 [19], i_sum_pd_C9 [20], i_sum_pd_C9 [21], i_sum_pd_C9 [22], i_sum_pd_C9 [23], i_sum_pd_C9 [24], i_sum_pd_C9 [25], i_sum_pd_C9 [26], i_sum_pd_C9 [27], i_sum_pd_C9 [28], i_sum_pd_C9 [29], i_sum_pd_C9 [30], i_sum_pd_C9 [31], i_sum_pd_C9 [32] } = 0;
  logic [34:0] i_sum_pd_C10 ;
  logic [34:0] i_sum_pd_R10 ;
  logic [34:0] i_sum_pd_X10 ;
  assign i_sum_sign_T = i_sum_pd_T [34] ;
  assign i_sum_pd_C10 [34] = i_sum_sign_C ;
  assign i_sum_pd_R10 [34] = i_sum_sign_R ;
  assign i_sum_pd_X10 [34] = i_sum_sign_X ;
  assign i_sum_sign_S = i_sum_pd_S ;
  assign i_vld = in_valid;
  logic [0:0] in_valid_C3 ;
  logic [0:0] in_valid_R3 ;
  logic [0:0] in_valid_X3 ;
  assign i_vld_T = in_valid_T ;
  assign in_valid_C3 = i_vld_C ;
  assign in_valid_R3 = i_vld_R ;
  assign in_valid_X3 = i_vld_X ;
  assign i_vld_S = in_valid_S ;
  assign in_mask_op = oi_pd;
  logic [33:0] oi_pd_C1 ;
  logic [33:0] oi_pd_R1 ;
  logic [33:0] oi_pd_X1 ;
  assign in_mask_op_T = oi_pd_T ;
  assign oi_pd_C1 = in_mask_op_C ;
  assign oi_pd_R1 = in_mask_op_R ;
  assign oi_pd_X1 = in_mask_op_X ;
  assign in_mask_op_S = oi_pd_S ;
  assign in_op_C = ( in_op_C0 );
  assign in_op_valid_C = ( in_op_valid_C0 );
  assign i_tru_pd_C = ( i_tru_pd_C0 ) | ( i_tru_pd_C1 );
  assign i_sft_max_C = ( i_sft_max_C0 );
  assign fangyuan8_C = ( fangyuan8_C0 );
  assign cfg_truncate_C = ( cfg_truncate_C0 );
  assign fangyuan7_C = ( fangyuan7_C0 );
  assign i_pre_sft_pd_C = ( i_pre_sft_pd_C0 );
  assign fangyuan5_C = ( fangyuan5_C0 );
  assign i_stick_C = ( i_stick_C0 ) | ( i_stick_C1 );
  assign fangyuan4_C = ( fangyuan4_C0 );
  assign fangyuan3_C = ( fangyuan3_C0 );
  assign fangyuan2_C = ( fangyuan2_C0 );
  assign in_sel_C = ( in_sel_C0 ) | ( in_sel_C1 );
  assign i_sum_pd_nxt_C = ( i_sum_pd_nxt_C0 );
  assign fangyuan1_C = ( fangyuan1_C0 );
  assign _14__C = ( _14__C0 );
  assign fangyuan0_C = ( fangyuan0_C0 );
  assign i_sat_bits_C = ( i_sat_bits_C0 ) | ( i_sat_bits_C1 ) | ( i_sat_bits_C2 ) | ( i_sat_bits_C3 );
  assign i_final_result_C = ( i_final_result_C0 );
  assign in_valid_C = ( in_valid_C0 ) | ( in_valid_C1 ) | ( in_valid_C2 ) | ( in_valid_C3 );
  assign _00__C = ( _00__C0 );
  assign _01__C = ( _01__C0 );
  assign i_partial_vld_C = ( i_partial_vld_C0 ) | ( i_partial_vld_C1 );
  assign _04__C = ( _04__C0 );
  assign _03__C = ( _03__C0 );
  assign _02__C = ( _02__C0 );
  assign _18__C = ( _18__C0 );
  assign _07__C = ( _07__C0 );
  assign _12__C = ( _12__C0 );
  assign _06__C = ( _06__C0 );
  assign _05__C = ( _05__C0 );
  assign _15__C = ( _15__C0 );
  assign i_sft_need_sat_C = ( i_sft_need_sat_C0 ) | ( i_sft_need_sat_C1 );
  assign i_final_vld_C = ( i_final_vld_C0 ) | ( i_final_vld_C1 ) | ( i_final_vld_C2 );
  assign _11__C = ( _11__C0 );
  assign i_sat_vld_C = ( i_sat_vld_C0 ) | ( i_sat_vld_C1 );
  assign _13__C = ( _13__C0 );
  assign _08__C = ( _08__C0 );
  assign i_guide_C = ( i_guide_C0 ) | ( i_guide_C1 );
  assign i_sat_sel_C = ( i_sat_sel_C0 ) | ( i_sat_sel_C1 ) | ( i_sat_sel_C2 ) | ( i_sat_sel_C3 ) | ( i_sat_sel_C4 );
  assign _16__C = ( _16__C0 );
  assign _17__C = ( _17__C0 );
  assign _09__C = ( _09__C0 ) | ( _09__C1 ) | ( _09__C2 ) | ( _09__C3 ) | ( _09__C4 ) | ( _09__C5 ) | ( _09__C6 ) | ( _09__C7 ) | ( _09__C8 ) | ( _09__C9 ) | ( _09__C10 ) | ( _09__C11 ) | ( _09__C12 ) | ( _09__C13 ) | ( _09__C14 ) | ( _09__C15 ) | ( _09__C16 ) | ( _09__C17 ) | ( _09__C18 ) | ( _09__C19 ) | ( _09__C20 ) | ( _09__C21 ) | ( _09__C22 ) | ( _09__C23 ) | ( _09__C24 ) | ( _09__C25 ) | ( _09__C26 ) | ( _09__C27 ) | ( _09__C28 ) | ( _09__C29 ) | ( _09__C30 ) | ( _09__C31 ) | ( _09__C32 ) | ( _09__C33 ) | ( _09__C34 ) | ( _09__C35 );
  assign _10__C = ( _10__C0 );
  assign i_sum_pd_C = ( i_sum_pd_C0 ) | ( i_sum_pd_C1 ) | ( i_sum_pd_C2 ) | ( i_sum_pd_C3 ) | ( i_sum_pd_C4 ) | ( i_sum_pd_C5 ) | ( i_sum_pd_C6 ) | ( i_sum_pd_C7 ) | ( i_sum_pd_C8 ) | ( i_sum_pd_C9 ) | ( i_sum_pd_C10 );
  assign i_point5_C = ( i_point5_C0 ) | ( i_point5_C1 );
  assign i_sft_pd_C = ( i_sft_pd_C0 ) | ( i_sft_pd_C1 ) | ( i_sft_pd_C2 ) | ( i_sft_pd_C3 );
  assign oi_pd_C = ( oi_pd_C0 ) | ( oi_pd_C1 );
  assign in_data_C = ( in_data_C0 ) | ( in_data_C1 );
  assign out_partial_valid_C = ( out_partial_valid_C0 );
  assign out_partial_data_C = ( out_partial_data_C0 ) | ( out_partial_data_C1 );
  assign out_final_valid_C = ( out_final_valid_C0 );
  assign out_final_sat_C = ( out_final_sat_C0 );
  assign out_final_data_C = ( out_final_data_C0 ) | ( out_final_data_C1 );
  assign in_op_X = ( in_op_X0 );
  assign in_op_valid_X = ( in_op_valid_X0 );
  assign i_tru_pd_X = ( i_tru_pd_X0 ) | ( i_tru_pd_X1 );
  assign i_sft_max_X = ( i_sft_max_X0 );
  assign fangyuan8_X = ( fangyuan8_X0 );
  assign cfg_truncate_X = ( cfg_truncate_X0 );
  assign fangyuan7_X = ( fangyuan7_X0 );
  assign i_pre_sft_pd_X = ( i_pre_sft_pd_X0 );
  assign fangyuan5_X = ( fangyuan5_X0 );
  assign i_stick_X = ( i_stick_X0 ) | ( i_stick_X1 );
  assign fangyuan4_X = ( fangyuan4_X0 );
  assign fangyuan3_X = ( fangyuan3_X0 );
  assign fangyuan2_X = ( fangyuan2_X0 );
  assign in_sel_X = ( in_sel_X0 ) | ( in_sel_X1 );
  assign i_sum_pd_nxt_X = ( i_sum_pd_nxt_X0 );
  assign fangyuan1_X = ( fangyuan1_X0 );
  assign _14__X = ( _14__X0 );
  assign fangyuan0_X = ( fangyuan0_X0 );
  assign i_sat_bits_X = ( i_sat_bits_X0 ) | ( i_sat_bits_X1 ) | ( i_sat_bits_X2 ) | ( i_sat_bits_X3 );
  assign i_final_result_X = ( i_final_result_X0 );
  assign in_valid_X = ( in_valid_X0 ) | ( in_valid_X1 ) | ( in_valid_X2 ) | ( in_valid_X3 );
  assign _00__X = ( _00__X0 );
  assign _01__X = ( _01__X0 );
  assign i_partial_vld_X = ( i_partial_vld_X0 ) | ( i_partial_vld_X1 );
  assign _04__X = ( _04__X0 );
  assign _03__X = ( _03__X0 );
  assign _02__X = ( _02__X0 );
  assign _18__X = ( _18__X0 );
  assign _07__X = ( _07__X0 );
  assign _12__X = ( _12__X0 );
  assign _06__X = ( _06__X0 );
  assign _05__X = ( _05__X0 );
  assign _15__X = ( _15__X0 );
  assign i_sft_need_sat_X = ( i_sft_need_sat_X0 ) | ( i_sft_need_sat_X1 );
  assign i_final_vld_X = ( i_final_vld_X0 ) | ( i_final_vld_X1 ) | ( i_final_vld_X2 );
  assign _11__X = ( _11__X0 );
  assign i_sat_vld_X = ( i_sat_vld_X0 ) | ( i_sat_vld_X1 );
  assign _13__X = ( _13__X0 );
  assign _08__X = ( _08__X0 );
  assign i_guide_X = ( i_guide_X0 ) | ( i_guide_X1 );
  assign i_sat_sel_X = ( i_sat_sel_X0 ) | ( i_sat_sel_X1 ) | ( i_sat_sel_X2 ) | ( i_sat_sel_X3 ) | ( i_sat_sel_X4 );
  assign _16__X = ( _16__X0 );
  assign _17__X = ( _17__X0 );
  assign _09__X = ( _09__X0 ) | ( _09__X1 ) | ( _09__X2 ) | ( _09__X3 ) | ( _09__X4 ) | ( _09__X5 ) | ( _09__X6 ) | ( _09__X7 ) | ( _09__X8 ) | ( _09__X9 ) | ( _09__X10 ) | ( _09__X11 ) | ( _09__X12 ) | ( _09__X13 ) | ( _09__X14 ) | ( _09__X15 ) | ( _09__X16 ) | ( _09__X17 ) | ( _09__X18 ) | ( _09__X19 ) | ( _09__X20 ) | ( _09__X21 ) | ( _09__X22 ) | ( _09__X23 ) | ( _09__X24 ) | ( _09__X25 ) | ( _09__X26 ) | ( _09__X27 ) | ( _09__X28 ) | ( _09__X29 ) | ( _09__X30 ) | ( _09__X31 ) | ( _09__X32 ) | ( _09__X33 ) | ( _09__X34 ) | ( _09__X35 );
  assign _10__X = ( _10__X0 );
  assign i_sum_pd_X = ( i_sum_pd_X0 ) | ( i_sum_pd_X1 ) | ( i_sum_pd_X2 ) | ( i_sum_pd_X3 ) | ( i_sum_pd_X4 ) | ( i_sum_pd_X5 ) | ( i_sum_pd_X6 ) | ( i_sum_pd_X7 ) | ( i_sum_pd_X8 ) | ( i_sum_pd_X9 ) | ( i_sum_pd_X10 );
  assign i_point5_X = ( i_point5_X0 ) | ( i_point5_X1 );
  assign i_sft_pd_X = ( i_sft_pd_X0 ) | ( i_sft_pd_X1 ) | ( i_sft_pd_X2 ) | ( i_sft_pd_X3 );
  assign oi_pd_X = ( oi_pd_X0 ) | ( oi_pd_X1 );
  assign in_data_X = ( in_data_X0 ) | ( in_data_X1 );
  assign out_partial_valid_X = ( out_partial_valid_X0 );
  assign out_partial_data_X = ( out_partial_data_X0 ) | ( out_partial_data_X1 );
  assign out_final_valid_X = ( out_final_valid_X0 );
  assign out_final_sat_X = ( out_final_sat_X0 );
  assign out_final_data_X = ( out_final_data_X0 ) | ( out_final_data_X1 );
  assign in_op_R = ( in_op_X0 & in_op_R0 );
  assign in_op_valid_R = ( in_op_valid_X0 & in_op_valid_R0 );
  assign i_tru_pd_R = ( i_tru_pd_X0 & i_tru_pd_R0 ) | ( i_tru_pd_X1 & i_tru_pd_R1 );
  assign i_sft_max_R = ( i_sft_max_X0 & i_sft_max_R0 );
  assign fangyuan8_R = ( fangyuan8_X0 & fangyuan8_R0 );
  assign cfg_truncate_R = ( cfg_truncate_X0 & cfg_truncate_R0 );
  assign fangyuan7_R = ( fangyuan7_X0 & fangyuan7_R0 );
  assign i_pre_sft_pd_R = ( i_pre_sft_pd_X0 & i_pre_sft_pd_R0 );
  assign fangyuan5_R = ( fangyuan5_X0 & fangyuan5_R0 );
  assign i_stick_R = ( i_stick_X0 & i_stick_R0 ) | ( i_stick_X1 & i_stick_R1 );
  assign fangyuan4_R = ( fangyuan4_X0 & fangyuan4_R0 );
  assign fangyuan3_R = ( fangyuan3_X0 & fangyuan3_R0 );
  assign fangyuan2_R = ( fangyuan2_X0 & fangyuan2_R0 );
  assign in_sel_R = ( in_sel_X0 & in_sel_R0 ) | ( in_sel_X1 & in_sel_R1 );
  assign i_sum_pd_nxt_R = ( i_sum_pd_nxt_X0 & i_sum_pd_nxt_R0 );
  assign fangyuan1_R = ( fangyuan1_X0 & fangyuan1_R0 );
  assign _14__R = ( _14__X0 & _14__R0 );
  assign fangyuan0_R = ( fangyuan0_X0 & fangyuan0_R0 );
  assign i_sat_bits_R = ( i_sat_bits_X0 & i_sat_bits_R0 ) | ( i_sat_bits_X1 & i_sat_bits_R1 ) | ( i_sat_bits_X2 & i_sat_bits_R2 ) | ( i_sat_bits_X3 & i_sat_bits_R3 );
  assign i_final_result_R = ( i_final_result_X0 & i_final_result_R0 );
  assign in_valid_R = ( in_valid_X0 & in_valid_R0 ) | ( in_valid_X1 & in_valid_R1 ) | ( in_valid_X2 & in_valid_R2 ) | ( in_valid_X3 & in_valid_R3 );
  assign _00__R = ( _00__X0 & _00__R0 );
  assign _01__R = ( _01__X0 & _01__R0 );
  assign i_partial_vld_R = ( i_partial_vld_X0 & i_partial_vld_R0 ) | ( i_partial_vld_X1 & i_partial_vld_R1 );
  assign _04__R = ( _04__X0 & _04__R0 );
  assign _03__R = ( _03__X0 & _03__R0 );
  assign _02__R = ( _02__X0 & _02__R0 );
  assign _18__R = ( _18__X0 & _18__R0 );
  assign _07__R = ( _07__X0 & _07__R0 );
  assign _12__R = ( _12__X0 & _12__R0 );
  assign _06__R = ( _06__X0 & _06__R0 );
  assign _05__R = ( _05__X0 & _05__R0 );
  assign _15__R = ( _15__X0 & _15__R0 );
  assign i_sft_need_sat_R = ( i_sft_need_sat_X0 & i_sft_need_sat_R0 ) | ( i_sft_need_sat_X1 & i_sft_need_sat_R1 );
  assign i_final_vld_R = ( i_final_vld_X0 & i_final_vld_R0 ) | ( i_final_vld_X1 & i_final_vld_R1 ) | ( i_final_vld_X2 & i_final_vld_R2 );
  assign _11__R = ( _11__X0 & _11__R0 );
  assign i_sat_vld_R = ( i_sat_vld_X0 & i_sat_vld_R0 ) | ( i_sat_vld_X1 & i_sat_vld_R1 );
  assign _13__R = ( _13__X0 & _13__R0 );
  assign _08__R = ( _08__X0 & _08__R0 );
  assign i_guide_R = ( i_guide_X0 & i_guide_R0 ) | ( i_guide_X1 & i_guide_R1 );
  assign i_sat_sel_R = ( i_sat_sel_X0 & i_sat_sel_R0 ) | ( i_sat_sel_X1 & i_sat_sel_R1 ) | ( i_sat_sel_X2 & i_sat_sel_R2 ) | ( i_sat_sel_X3 & i_sat_sel_R3 ) | ( i_sat_sel_X4 & i_sat_sel_R4 );
  assign _16__R = ( _16__X0 & _16__R0 );
  assign _17__R = ( _17__X0 & _17__R0 );
  assign _09__R = ( _09__X0 & _09__R0 ) | ( _09__X1 & _09__R1 ) | ( _09__X2 & _09__R2 ) | ( _09__X3 & _09__R3 ) | ( _09__X4 & _09__R4 ) | ( _09__X5 & _09__R5 ) | ( _09__X6 & _09__R6 ) | ( _09__X7 & _09__R7 ) | ( _09__X8 & _09__R8 ) | ( _09__X9 & _09__R9 ) | ( _09__X10 & _09__R10 ) | ( _09__X11 & _09__R11 ) | ( _09__X12 & _09__R12 ) | ( _09__X13 & _09__R13 ) | ( _09__X14 & _09__R14 ) | ( _09__X15 & _09__R15 ) | ( _09__X16 & _09__R16 ) | ( _09__X17 & _09__R17 ) | ( _09__X18 & _09__R18 ) | ( _09__X19 & _09__R19 ) | ( _09__X20 & _09__R20 ) | ( _09__X21 & _09__R21 ) | ( _09__X22 & _09__R22 ) | ( _09__X23 & _09__R23 ) | ( _09__X24 & _09__R24 ) | ( _09__X25 & _09__R25 ) | ( _09__X26 & _09__R26 ) | ( _09__X27 & _09__R27 ) | ( _09__X28 & _09__R28 ) | ( _09__X29 & _09__R29 ) | ( _09__X30 & _09__R30 ) | ( _09__X31 & _09__R31 ) | ( _09__X32 & _09__R32 ) | ( _09__X33 & _09__R33 ) | ( _09__X34 & _09__R34 ) | ( _09__X35 & _09__R35 );
  assign _10__R = ( _10__X0 & _10__R0 );
  assign i_sum_pd_R = ( i_sum_pd_X0 & i_sum_pd_R0 ) | ( i_sum_pd_X1 & i_sum_pd_R1 ) | ( i_sum_pd_X2 & i_sum_pd_R2 ) | ( i_sum_pd_X3 & i_sum_pd_R3 ) | ( i_sum_pd_X4 & i_sum_pd_R4 ) | ( i_sum_pd_X5 & i_sum_pd_R5 ) | ( i_sum_pd_X6 & i_sum_pd_R6 ) | ( i_sum_pd_X7 & i_sum_pd_R7 ) | ( i_sum_pd_X8 & i_sum_pd_R8 ) | ( i_sum_pd_X9 & i_sum_pd_R9 ) | ( i_sum_pd_X10 & i_sum_pd_R10 );
  assign i_point5_R = ( i_point5_X0 & i_point5_R0 ) | ( i_point5_X1 & i_point5_R1 );
  assign i_sft_pd_R = ( i_sft_pd_X0 & i_sft_pd_R0 ) | ( i_sft_pd_X1 & i_sft_pd_R1 ) | ( i_sft_pd_X2 & i_sft_pd_R2 ) | ( i_sft_pd_X3 & i_sft_pd_R3 );
  assign oi_pd_R = ( oi_pd_X0 & oi_pd_R0 ) | ( oi_pd_X1 & oi_pd_R1 );
  assign in_data_R = ( in_data_X0 & in_data_R0 ) | ( in_data_X1 & in_data_R1 );
  assign out_partial_valid_R = ( out_partial_valid_X0 & out_partial_valid_R0 );
  assign out_partial_data_R = ( out_partial_data_X0 & out_partial_data_R0 ) | ( out_partial_data_X1 & out_partial_data_R1 );
  assign out_final_valid_R = ( out_final_valid_X0 & out_final_valid_R0 );
  assign out_final_sat_R = ( out_final_sat_X0 & out_final_sat_R0 );
  assign out_final_data_R = ( out_final_data_X0 & out_final_data_R0 ) | ( out_final_data_X1 & out_final_data_R1 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { di_pd_R , di_pd_C , di_pd_X , fangyuan6_R , fangyuan6_C , fangyuan6_X , i_partial_result_R , i_partial_result_C , i_partial_result_X , i_pos_pd_R , i_pos_pd_C , i_pos_pd_X , i_sat_pd_R , i_sat_pd_C , i_sat_pd_X , i_sat_sign_R , i_sat_sign_C , i_sat_sign_X , i_sel_R , i_sel_C , i_sel_X , i_sum_msb_R , i_sum_msb_C , i_sum_msb_X , i_sum_sign_R , i_sum_sign_C , i_sum_sign_X , i_vld_R , i_vld_C , i_vld_X , in_mask_op_R , in_mask_op_C , in_mask_op_X  } = 0;
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) out_final_data_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) out_final_data_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) out_final_data_PREV_VAL1 <= out_final_data ;
    if( INSTR_IN_ZY ) out_final_data_PREV_VAL2 <= out_final_data_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) out_final_sat_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) out_final_sat_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) out_final_sat_PREV_VAL1 <= out_final_sat ;
    if( INSTR_IN_ZY ) out_final_sat_PREV_VAL2 <= out_final_sat_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) out_final_valid_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) out_final_valid_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) out_final_valid_PREV_VAL1 <= out_final_valid ;
    if( INSTR_IN_ZY ) out_final_valid_PREV_VAL2 <= out_final_valid_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) out_partial_data_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) out_partial_data_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) out_partial_data_PREV_VAL1 <= out_partial_data ;
    if( INSTR_IN_ZY ) out_partial_data_PREV_VAL2 <= out_partial_data_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) out_partial_valid_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) out_partial_valid_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) out_partial_valid_PREV_VAL1 <= out_partial_valid ;
    if( INSTR_IN_ZY ) out_partial_valid_PREV_VAL2 <= out_partial_valid_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) i_sum_pd_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) i_sum_pd_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) i_sum_pd_PREV_VAL1 <= i_sum_pd ;
    if( INSTR_IN_ZY ) i_sum_pd_PREV_VAL2 <= i_sum_pd_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) i_sat_sel_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) i_sat_sel_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) i_sat_sel_PREV_VAL1 <= i_sat_sel ;
    if( INSTR_IN_ZY ) i_sat_sel_PREV_VAL2 <= i_sat_sel_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) i_sat_vld_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) i_sat_vld_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) i_sat_vld_PREV_VAL1 <= i_sat_vld ;
    if( INSTR_IN_ZY ) i_sat_vld_PREV_VAL2 <= i_sat_vld_PREV_VAL1 ;
  end
 // ground taints for unused wire slices
  assign { i_sum_pd_R10 [0], i_sum_pd_R10 [1], i_sum_pd_R10 [2], i_sum_pd_R10 [3], i_sum_pd_R10 [4], i_sum_pd_R10 [5], i_sum_pd_R10 [6], i_sum_pd_R10 [7], i_sum_pd_R10 [8], i_sum_pd_R10 [9], i_sum_pd_R10 [10], i_sum_pd_R10 [11], i_sum_pd_R10 [12], i_sum_pd_R10 [13], i_sum_pd_R10 [14], i_sum_pd_R10 [15], i_sum_pd_R10 [16], i_sum_pd_R10 [17], i_sum_pd_R10 [18], i_sum_pd_R10 [19], i_sum_pd_R10 [20], i_sum_pd_R10 [21], i_sum_pd_R10 [22], i_sum_pd_R10 [23], i_sum_pd_R10 [24], i_sum_pd_R10 [25], i_sum_pd_R10 [26], i_sum_pd_R10 [27], i_sum_pd_R10 [28], i_sum_pd_R10 [29], i_sum_pd_R10 [30], i_sum_pd_R10 [31], i_sum_pd_R10 [32], i_sum_pd_R10 [33] } = 0;
  assign { i_sum_pd_X10 [0], i_sum_pd_X10 [1], i_sum_pd_X10 [2], i_sum_pd_X10 [3], i_sum_pd_X10 [4], i_sum_pd_X10 [5], i_sum_pd_X10 [6], i_sum_pd_X10 [7], i_sum_pd_X10 [8], i_sum_pd_X10 [9], i_sum_pd_X10 [10], i_sum_pd_X10 [11], i_sum_pd_X10 [12], i_sum_pd_X10 [13], i_sum_pd_X10 [14], i_sum_pd_X10 [15], i_sum_pd_X10 [16], i_sum_pd_X10 [17], i_sum_pd_X10 [18], i_sum_pd_X10 [19], i_sum_pd_X10 [20], i_sum_pd_X10 [21], i_sum_pd_X10 [22], i_sum_pd_X10 [23], i_sum_pd_X10 [24], i_sum_pd_X10 [25], i_sum_pd_X10 [26], i_sum_pd_X10 [27], i_sum_pd_X10 [28], i_sum_pd_X10 [29], i_sum_pd_X10 [30], i_sum_pd_X10 [31], i_sum_pd_X10 [32], i_sum_pd_X10 [33] } = 0;
  assign { i_sum_pd_C10 [0], i_sum_pd_C10 [1], i_sum_pd_C10 [2], i_sum_pd_C10 [3], i_sum_pd_C10 [4], i_sum_pd_C10 [5], i_sum_pd_C10 [6], i_sum_pd_C10 [7], i_sum_pd_C10 [8], i_sum_pd_C10 [9], i_sum_pd_C10 [10], i_sum_pd_C10 [11], i_sum_pd_C10 [12], i_sum_pd_C10 [13], i_sum_pd_C10 [14], i_sum_pd_C10 [15], i_sum_pd_C10 [16], i_sum_pd_C10 [17], i_sum_pd_C10 [18], i_sum_pd_C10 [19], i_sum_pd_C10 [20], i_sum_pd_C10 [21], i_sum_pd_C10 [22], i_sum_pd_C10 [23], i_sum_pd_C10 [24], i_sum_pd_C10 [25], i_sum_pd_C10 [26], i_sum_pd_C10 [27], i_sum_pd_C10 [28], i_sum_pd_C10 [29], i_sum_pd_C10 [30], i_sum_pd_C10 [31], i_sum_pd_C10 [32], i_sum_pd_C10 [33] } = 0;
  assert property( i_sat_sel_r_flag == 0 || i_sat_sel_PREV_VAL1 == i_sat_sel_PREV_VAL2 );
  assert property( i_sat_vld_r_flag == 0 || i_sat_vld_PREV_VAL1 == i_sat_vld_PREV_VAL2 );
  assert property( i_sum_pd_r_flag == 0 || i_sum_pd_PREV_VAL1 == i_sum_pd_PREV_VAL2 );
  assert property( out_final_data_r_flag == 0 || out_final_data_PREV_VAL1 == out_final_data_PREV_VAL2 );
  assert property( out_final_sat_r_flag == 0 || out_final_sat_PREV_VAL1 == out_final_sat_PREV_VAL2 );
  assert property( out_final_valid_r_flag == 0 || out_final_valid_PREV_VAL1 == out_final_valid_PREV_VAL2 );
  assert property( out_partial_data_r_flag == 0 || out_partial_data_PREV_VAL1 == out_partial_data_PREV_VAL2 );
  assert property( out_partial_valid_r_flag == 0 || out_partial_valid_PREV_VAL1 == out_partial_valid_PREV_VAL2 );
  assign rst_zy = !nvdla_core_rstn ;
endmodule
