  input A1;
  input A1_T ;
  input [13:0] A1_S ;
  output A1_R ;
  output A1_X ;
  output A1_C ;
  input A2;
  input A2_T ;
  input [13:0] A2_S ;
  output A2_R ;
  output A2_X ;
  output A2_C ;
  output Z;
  logic Z ;
  output Z_T ;
  logic Z_T ;
  logic Z_R ;
  logic Z_C ;
  logic Z_X ;
  logic [13:0] Z_S ;
  input Z_R0 ;
  input Z_C0 ;
  input Z_X0 ;
  output [13:0] Z_S ;
  assign Z = A1 & A2;
  assign Z_S = 0 ;
  logic [0:0] A1_C0 ;
  logic [0:0] A1_R0 ;
  logic [0:0] A1_X0 ;
  logic [0:0] A2_C0 ;
  logic [0:0] A2_R0 ;
  logic [0:0] A2_X0 ;
  assign Z_T = A1_T | A2_T ;
  assign A1_C0 = Z_C ;
  assign A1_X0 = Z_X ;
  assign A2_C0 = Z_C ;
  assign A2_X0 = Z_X ;
  assign A1_R0 = ( Z_R | Z_C & A2_T ) & { 1{ A2 != 0 }} ;
  assign A2_R0 = ( Z_R | Z_C & A1_T ) & { 1{ A1 != 0 }} ;
  assign A2_C = ( A2_C0 );
  assign A1_C = ( A1_C0 );
  assign Z_C = ( Z_C0 );
  assign A2_X = ( A2_X0 );
  assign A1_X = ( A1_X0 );
  assign Z_X = ( Z_X0 );
  assign A2_R = ( A2_X0 & A2_R0 );
  assign A1_R = ( A1_X0 & A1_R0 );
  assign Z_R = ( Z_X0 & Z_R0 );
 // ground taints for floating regs
 // ground taints for unused wires
 // ground taints for unused wire slices
endmodule
