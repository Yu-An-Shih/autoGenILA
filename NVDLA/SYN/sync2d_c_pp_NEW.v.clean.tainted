  input clk;
  input clk_T ;
  input [13:0] clk_S ;
  output clk_R ;
  output clk_X ;
  output clk_C ;
  input clr_;
  input clr__T ;
  input [13:0] clr__S ;
  output clr__R ;
  output clr__X ;
  output clr__C ;
  input d;
  input d_T ;
  input [13:0] d_S ;
  output d_R ;
  output d_X ;
  output d_C ;
  output q;
  logic q ;
  output q_T ;
  logic q_T ;
  logic q_R ;
  logic q_C ;
  logic q_X ;
  logic [13:0] q_S ;
  input q_R0 ;
  input q_C0 ;
  input q_X0 ;
  output [13:0] q_S ;
  logic [0:0] clr__R0 ;
  logic [0:0] clr__X0 ;
  logic [0:0] clr__C0 ;
  logic [0:0] d_R0 ;
  logic [0:0] d_X0 ;
  logic [0:0] d_C0 ;
// module: p_SSYNC2DO_C_PP
  p_SSYNC2DO_C_PP NV_GENERIC_CELL (
    .clr__T (  clr__T  ),
    .clr__R (  clr__R0  ),
    .clr__X (  clr__X0  ),
    .clr__C (  clr__C0  ),
    .clr__S (  clr__S  ),
    .d_T (  d_T  ),
    .d_R (  d_R0  ),
    .d_X (  d_X0  ),
    .d_C (  d_C0  ),
    .d_S (  d_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .q_T (  q_T  ),
    .q_R0 (  q_R  ),
    .q_X0 (  q_X  ),
    .q_C0 (  q_C  ),
    .q_S ( q_S ),
    .q ( q ),
    .d ( d ),
    .clk ( clk ),
    .clr_ ( clr_ )
  );
  assign d_C = ( d_C0 );
  assign clr__C = ( clr__C0 );
  assign q_C = ( q_C0 );
  assign d_X = ( d_X0 );
  assign clr__X = ( clr__X0 );
  assign q_X = ( q_X0 );
  assign d_R = ( d_X0 & d_R0 );
  assign clr__R = ( clr__X0 & clr__R0 );
  assign q_R = ( q_X0 & q_R0 );
 // ground taints for floating regs
 // ground taints for unused wires
 // ground taints for unused wire slices
endmodule
