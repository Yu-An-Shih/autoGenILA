module \$paramod\CSC_mgc_shift_bl\width_a=1\signd_a=0\width_s=5\width_z=11 ( a , s , INSTR_IN_ZY , rst_zy , a_T , a_S , s_T , s_S , z_R0 , z , a_R , s_R , z_T , z_S );
  input rst_zy;
  integer i;
  input INSTR_IN_ZY;
  logic [4:0] _0_;
  logic [4:0] _0__T ;
  logic [4:0] _0__R ;
  logic [13:0] _0__S ;
  logic [10:0] _1_;
  logic [10:0] _1__T ;
  logic [10:0] _1__R ;
  logic [13:0] _1__S ;
  logic [10:0] _2_;
  logic [10:0] _2__T ;
  logic [10:0] _2__R ;
  logic [13:0] _2__S ;
  input a;
  input a_T ;
  output a_R ;
  input [13:0] a_S ;
  input [4:0] s;
  input [4:0] s_T ;
  output [4:0] s_R ;
  input [13:0] s_S ;
  output [10:0] z;
  logic [10:0] z ;
  output [10:0] z_T ;
  logic [10:0] z_T ;
  logic [10:0] z_R ;
  logic [13:0] z_S ;
  input [10:0] z_R0 ;
  output [13:0] z_S ;
  assign _0_ = ~ s;
  logic [4:0] s_R0 ;
  assign _0__T = s_T ;
  assign s_R0 = _0__R ;
  assign _0__S = 0 ;
  assign z = s[4] ? _2_ : _1_;
  logic [4:0] s_R1 ;
  assign s_R1 [4] = ( | z_R ) && _2_ != _1_ ;
  assign z_T = s[4] ? ( { 11{ s_T  [4] }} | _2__T ) : ( { 11{ s_T  [4] }} | _1__T );
  assign z_S = s[4] ? _2__S : _1__S ;
  logic [10:0] _2__R0 ;
  assign _2__R0 = { 11{ s[4] }} & ( z_R );
  logic [10:0] _1__R0 ;
  assign _1__R0 = { 11{ !s[4] }} & ( z_R );
  assign _1_ = a <<< s;
  assign _1__S = 0 ;
  assign { s_R1 [0], s_R1 [1], s_R1 [2], s_R1 [3] } = 0;
  logic [0:0] a_R0 ;
  logic [4:0] s_R2 ;
  assign _1__T = { 11{ (| a_T ) | (|s_T ) }} ;
  assign a_R0 = { 1{ | _1__R }} ;
  assign s_R2 = { 5{ | _1__R }} ;
 assign _2_ = 1'b0 >>> _0_;
 assign _2__S = 0 ;
 logic [4:0] _0__R0 ;
 assign _2__T = { 11{ | _0__T }} ;
 assign _0__R0 = { 5{ | _2__R }} ;
  assign _0__R = ( _0__R0 );
  assign a_R = ( a_R0 );
  assign _1__R = ( _1__R0 );
  assign _2__R = ( _2__R0 );
  assign s_R = ( s_R0 ) | ( s_R1 ) | ( s_R2 );
  assign z_R = ( z_R0 );
 // ground taints for floating regs
 // ground taints for unused wires
 // ground taints for unused wire slices
endmodule
