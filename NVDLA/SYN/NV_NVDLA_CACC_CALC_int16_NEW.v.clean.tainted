  logic _000_;
  logic _000__T ;
  logic _000__R ;
  logic _000__C ;
  logic _000__X ;
  logic [13:0] _000__S ;
  logic [16:0] _001_;
  logic [16:0] _001__T ;
  logic [16:0] _001__R ;
  logic [16:0] _001__C ;
  logic [16:0] _001__X ;
  logic [13:0] _001__S ;
  logic [32:0] _002_;
  logic [32:0] _002__T ;
  logic [32:0] _002__R ;
  logic [32:0] _002__C ;
  logic [32:0] _002__X ;
  logic [13:0] _002__S ;
  logic _003_;
  logic _003__T ;
  logic _003__R ;
  logic _003__C ;
  logic _003__X ;
  logic [13:0] _003__S ;
  logic _004_;
  logic _004__T ;
  logic _004__R ;
  logic _004__C ;
  logic _004__X ;
  logic [13:0] _004__S ;
  logic _005_;
  logic _005__T ;
  logic _005__R ;
  logic _005__C ;
  logic _005__X ;
  logic [13:0] _005__S ;
  logic [31:0] _006_;
  logic [31:0] _006__T ;
  logic [31:0] _006__R ;
  logic [31:0] _006__C ;
  logic [31:0] _006__X ;
  logic [13:0] _006__S ;
  logic _007_;
  logic _007__T ;
  logic _007__R ;
  logic _007__C ;
  logic _007__X ;
  logic [13:0] _007__S ;
  logic [47:0] _008_;
  logic [47:0] _008__T ;
  logic [47:0] _008__R ;
  logic [47:0] _008__C ;
  logic [47:0] _008__X ;
  logic [13:0] _008__S ;
  logic [16:0] _009_;
  logic [16:0] _009__T ;
  logic [16:0] _009__R ;
  logic [16:0] _009__C ;
  logic [16:0] _009__X ;
  logic [13:0] _009__S ;
  logic _010_;
  logic _010__T ;
  logic _010__R ;
  logic _010__C ;
  logic _010__X ;
  logic [13:0] _010__S ;
  logic _011_;
  logic _011__T ;
  logic _011__R ;
  logic _011__C ;
  logic _011__X ;
  logic [13:0] _011__S ;
  logic _012_;
  logic _012__T ;
  logic _012__R ;
  logic _012__C ;
  logic _012__X ;
  logic [13:0] _012__S ;
  logic _013_;
  logic _013__T ;
  logic _013__R ;
  logic _013__C ;
  logic _013__X ;
  logic [13:0] _013__S ;
  logic _014_;
  logic _014__T ;
  logic _014__R ;
  logic _014__C ;
  logic _014__X ;
  logic [13:0] _014__S ;
  logic _015_;
  logic _015__T ;
  logic _015__R ;
  logic _015__C ;
  logic _015__X ;
  logic [13:0] _015__S ;
  logic _016_;
  logic _016__T ;
  logic _016__R ;
  logic _016__C ;
  logic _016__X ;
  logic [13:0] _016__S ;
  logic _017_;
  logic _017__T ;
  logic _017__R ;
  logic _017__C ;
  logic _017__X ;
  logic [13:0] _017__S ;
  logic _018_;
  logic _018__T ;
  logic _018__R ;
  logic _018__C ;
  logic _018__X ;
  logic [13:0] _018__S ;
  logic _019_;
  logic _019__T ;
  logic _019__R ;
  logic _019__C ;
  logic _019__X ;
  logic [13:0] _019__S ;
  logic _020_;
  logic _020__T ;
  logic _020__R ;
  logic _020__C ;
  logic _020__X ;
  logic [13:0] _020__S ;
  logic _021_;
  logic _021__T ;
  logic _021__R ;
  logic _021__C ;
  logic _021__X ;
  logic [13:0] _021__S ;
  logic _022_;
  logic _022__T ;
  logic _022__R ;
  logic _022__C ;
  logic _022__X ;
  logic [13:0] _022__S ;
  logic _023_;
  logic _023__T ;
  logic _023__R ;
  logic _023__C ;
  logic _023__X ;
  logic [13:0] _023__S ;
  logic _024_;
  logic _024__T ;
  logic _024__R ;
  logic _024__C ;
  logic _024__X ;
  logic [13:0] _024__S ;
  logic _025_;
  logic _025__T ;
  logic _025__R ;
  logic _025__C ;
  logic _025__X ;
  logic [13:0] _025__S ;
  logic _026_;
  logic _026__T ;
  logic _026__R ;
  logic _026__C ;
  logic _026__X ;
  logic [13:0] _026__S ;
  logic _027_;
  logic _027__T ;
  logic _027__R ;
  logic _027__C ;
  logic _027__X ;
  logic [13:0] _027__S ;
  logic _028_;
  logic _028__T ;
  logic _028__R ;
  logic _028__C ;
  logic _028__X ;
  logic [13:0] _028__S ;
  logic _029_;
  logic _029__T ;
  logic _029__R ;
  logic _029__C ;
  logic _029__X ;
  logic [13:0] _029__S ;
  logic _030_;
  logic _030__T ;
  logic _030__R ;
  logic _030__C ;
  logic _030__X ;
  logic [13:0] _030__S ;
  logic _031_;
  logic _031__T ;
  logic _031__R ;
  logic _031__C ;
  logic _031__X ;
  logic [13:0] _031__S ;
  logic _032_;
  logic _032__T ;
  logic _032__R ;
  logic _032__C ;
  logic _032__X ;
  logic [13:0] _032__S ;
  logic _033_;
  logic _033__T ;
  logic _033__R ;
  logic _033__C ;
  logic _033__X ;
  logic [13:0] _033__S ;
  logic _034_;
  logic _034__T ;
  logic _034__R ;
  logic _034__C ;
  logic _034__X ;
  logic [13:0] _034__S ;
  input [4:0] cfg_truncate;
  input [4:0] cfg_truncate_T ;
  input [13:0] cfg_truncate_S ;
  output [4:0] cfg_truncate_R ;
  output [4:0] cfg_truncate_X ;
  output [4:0] cfg_truncate_C ;
  logic [5:0] di_hsb_pd;
  logic [5:0] di_hsb_pd_T ;
  logic [5:0] di_hsb_pd_R ;
  logic [5:0] di_hsb_pd_C ;
  logic [5:0] di_hsb_pd_X ;
  logic [13:0] di_hsb_pd_S ;
  logic [5:0] di_hsb_pd_tmp;
  logic [5:0] di_hsb_pd_tmp_T ;
  logic [5:0] di_hsb_pd_tmp_R ;
  logic [5:0] di_hsb_pd_tmp_C ;
  logic [5:0] di_hsb_pd_tmp_X ;
  logic [13:0] di_hsb_pd_tmp_S ;
  logic [31:0] di_lsb_pd;
  logic [31:0] di_lsb_pd_T ;
  logic [31:0] di_lsb_pd_R ;
  logic [31:0] di_lsb_pd_C ;
  logic [31:0] di_lsb_pd_X ;
  logic [13:0] di_lsb_pd_S ;
  logic di_sign;
  logic di_sign_T ;
  logic di_sign_R ;
  logic di_sign_C ;
  logic di_sign_X ;
  logic [13:0] di_sign_S ;
  logic di_sign_d;
  logic  di_sign_d_T ;
  logic  di_sign_d_PREV_VAL1 ;
  logic  di_sign_d_PREV_VAL2 ;
  logic  di_sign_d_R ;
  logic  di_sign_d_X ;
  logic  di_sign_d_C ;
  logic [13:0] di_sign_d_S ;
  logic di_sign_d_t_flag ;
  logic di_sign_d_r_flag ;
  assign di_sign_d_S = 926 ;
  logic [31:0] i_final_result;
  logic [31:0] i_final_result_T ;
  logic [31:0] i_final_result_R ;
  logic [31:0] i_final_result_C ;
  logic [31:0] i_final_result_X ;
  logic [13:0] i_final_result_S ;
  logic i_final_vld;
  logic i_final_vld_T ;
  logic i_final_vld_R ;
  logic i_final_vld_C ;
  logic i_final_vld_X ;
  logic [13:0] i_final_vld_S ;
  logic i_guide;
  logic i_guide_T ;
  logic i_guide_R ;
  logic i_guide_C ;
  logic i_guide_X ;
  logic [13:0] i_guide_S ;
  logic [15:0] i_hsame_sign;
  logic [15:0] i_hsame_sign_T ;
  logic [15:0] i_hsame_sign_R ;
  logic [15:0] i_hsame_sign_C ;
  logic [15:0] i_hsame_sign_X ;
  logic [13:0] i_hsame_sign_S ;
  logic i_hsum_msb;
  logic i_hsum_msb_T ;
  logic i_hsum_msb_R ;
  logic i_hsum_msb_C ;
  logic i_hsum_msb_X ;
  logic [13:0] i_hsum_msb_S ;
  logic [16:0] i_hsum_pd;
  logic [16:0]  i_hsum_pd_T ;
  logic [16:0]  i_hsum_pd_PREV_VAL1 ;
  logic [16:0]  i_hsum_pd_PREV_VAL2 ;
  logic [16:0]  i_hsum_pd_R ;
  logic [16:0]  i_hsum_pd_X ;
  logic [16:0]  i_hsum_pd_C ;
  logic [13:0] i_hsum_pd_S ;
  logic i_hsum_pd_t_flag ;
  logic i_hsum_pd_r_flag ;
  assign i_hsum_pd_S = 927 ;
  logic [16:0] i_hsum_pd_nxt;
  logic [16:0] i_hsum_pd_nxt_T ;
  logic [16:0] i_hsum_pd_nxt_R ;
  logic [16:0] i_hsum_pd_nxt_C ;
  logic [16:0] i_hsum_pd_nxt_X ;
  logic [13:0] i_hsum_pd_nxt_S ;
  logic i_hsum_sign;
  logic i_hsum_sign_T ;
  logic i_hsum_sign_R ;
  logic i_hsum_sign_C ;
  logic i_hsum_sign_X ;
  logic [13:0] i_hsum_sign_S ;
  logic [47:0] i_last_pd;
  logic [47:0] i_last_pd_T ;
  logic [47:0] i_last_pd_R ;
  logic [47:0] i_last_pd_C ;
  logic [47:0] i_last_pd_X ;
  logic [13:0] i_last_pd_S ;
  logic [48:0] i_last_pd3;
  logic [48:0] i_last_pd3_T ;
  logic [48:0] i_last_pd3_R ;
  logic [48:0] i_last_pd3_C ;
  logic [48:0] i_last_pd3_X ;
  logic [13:0] i_last_pd3_S ;
  logic i_lsum_msb;
  logic i_lsum_msb_T ;
  logic i_lsum_msb_R ;
  logic i_lsum_msb_C ;
  logic i_lsum_msb_X ;
  logic [13:0] i_lsum_msb_S ;
  logic i_lsum_msb_nxt;
  logic i_lsum_msb_nxt_T ;
  logic i_lsum_msb_nxt_R ;
  logic i_lsum_msb_nxt_C ;
  logic i_lsum_msb_nxt_X ;
  logic [13:0] i_lsum_msb_nxt_S ;
  logic i_lsum_msb_tmp;
  logic i_lsum_msb_tmp_T ;
  logic i_lsum_msb_tmp_R ;
  logic i_lsum_msb_tmp_C ;
  logic i_lsum_msb_tmp_X ;
  logic [13:0] i_lsum_msb_tmp_S ;
  logic [32:0] i_lsum_pd;
  logic [32:0]  i_lsum_pd_T ;
  logic [32:0]  i_lsum_pd_PREV_VAL1 ;
  logic [32:0]  i_lsum_pd_PREV_VAL2 ;
  logic [32:0]  i_lsum_pd_R ;
  logic [32:0]  i_lsum_pd_X ;
  logic [32:0]  i_lsum_pd_C ;
  logic [13:0] i_lsum_pd_S ;
  logic i_lsum_pd_t_flag ;
  logic i_lsum_pd_r_flag ;
  assign i_lsum_pd_S = 928 ;
  logic [32:0] i_lsum_pd_nxt;
  logic [32:0] i_lsum_pd_nxt_T ;
  logic [32:0] i_lsum_pd_nxt_R ;
  logic [32:0] i_lsum_pd_nxt_C ;
  logic [32:0] i_lsum_pd_nxt_X ;
  logic [13:0] i_lsum_pd_nxt_S ;
  logic [47:0] i_partial_result;
  logic [47:0] i_partial_result_T ;
  logic [47:0] i_partial_result_R ;
  logic [47:0] i_partial_result_C ;
  logic [47:0] i_partial_result_X ;
  logic [13:0] i_partial_result_S ;
  logic i_partial_vld;
  logic i_partial_vld_T ;
  logic i_partial_vld_R ;
  logic i_partial_vld_C ;
  logic i_partial_vld_X ;
  logic [13:0] i_partial_vld_S ;
  logic i_point5;
  logic i_point5_T ;
  logic i_point5_R ;
  logic i_point5_C ;
  logic i_point5_X ;
  logic [13:0] i_point5_S ;
  logic [31:0] i_pos_pd;
  logic [31:0] i_pos_pd_T ;
  logic [31:0] i_pos_pd_R ;
  logic [31:0] i_pos_pd_C ;
  logic [31:0] i_pos_pd_X ;
  logic [13:0] i_pos_pd_S ;
  logic [47:0] i_pre_sft_pd;
  logic [47:0] i_pre_sft_pd_T ;
  logic [47:0] i_pre_sft_pd_R ;
  logic [47:0] i_pre_sft_pd_C ;
  logic [47:0] i_pre_sft_pd_X ;
  logic [13:0] i_pre_sft_pd_S ;
  logic [47:0] i_sat_pd;
  logic [47:0] i_sat_pd_T ;
  logic [47:0] i_sat_pd_R ;
  logic [47:0] i_sat_pd_C ;
  logic [47:0] i_sat_pd_X ;
  logic [13:0] i_sat_pd_S ;
  logic [47:0] i_sat_pd3;
  logic [47:0] i_sat_pd3_T ;
  logic [47:0] i_sat_pd3_R ;
  logic [47:0] i_sat_pd3_C ;
  logic [47:0] i_sat_pd3_X ;
  logic [13:0] i_sat_pd3_S ;
  logic i_sat_sel;
  logic  i_sat_sel_T ;
  logic  i_sat_sel_PREV_VAL1 ;
  logic  i_sat_sel_PREV_VAL2 ;
  logic  i_sat_sel_R ;
  logic  i_sat_sel_X ;
  logic  i_sat_sel_C ;
  logic [13:0] i_sat_sel_S ;
  logic i_sat_sel_t_flag ;
  logic i_sat_sel_r_flag ;
  assign i_sat_sel_S = 929 ;
  logic i_sat_sign;
  logic i_sat_sign_T ;
  logic i_sat_sign_R ;
  logic i_sat_sign_C ;
  logic i_sat_sign_X ;
  logic [13:0] i_sat_sign_S ;
  logic i_sat_vld;
  logic  i_sat_vld_T ;
  logic  i_sat_vld_PREV_VAL1 ;
  logic  i_sat_vld_PREV_VAL2 ;
  logic  i_sat_vld_R ;
  logic  i_sat_vld_X ;
  logic  i_sat_vld_C ;
  logic [13:0] i_sat_vld_S ;
  logic i_sat_vld_t_flag ;
  logic i_sat_vld_r_flag ;
  assign i_sat_vld_S = 930 ;
  logic i_sel;
  logic i_sel_T ;
  logic i_sel_R ;
  logic i_sel_C ;
  logic i_sel_X ;
  logic [13:0] i_sel_S ;
  logic [31:0] i_sft_max;
  logic [31:0] i_sft_max_T ;
  logic [31:0] i_sft_max_R ;
  logic [31:0] i_sft_max_C ;
  logic [31:0] i_sft_max_X ;
  logic [13:0] i_sft_max_S ;
  logic i_sft_need_sat;
  logic i_sft_need_sat_T ;
  logic i_sft_need_sat_R ;
  logic i_sft_need_sat_C ;
  logic i_sft_need_sat_X ;
  logic [13:0] i_sft_need_sat_S ;
  logic [46:0] i_sft_pd;
  logic [46:0] i_sft_pd_T ;
  logic [46:0] i_sft_pd_R ;
  logic [46:0] i_sft_pd_C ;
  logic [46:0] i_sft_pd_X ;
  logic [13:0] i_sft_pd_S ;
  logic [14:0] i_stick;
  logic [14:0] i_stick_T ;
  logic [14:0] i_stick_R ;
  logic [14:0] i_stick_C ;
  logic [14:0] i_stick_X ;
  logic [13:0] i_stick_S ;
  logic [31:0] i_tru_pd;
  logic [31:0] i_tru_pd_T ;
  logic [31:0] i_tru_pd_R ;
  logic [31:0] i_tru_pd_C ;
  logic [31:0] i_tru_pd_X ;
  logic [13:0] i_tru_pd_S ;
  logic i_vld;
  logic i_vld_T ;
  logic i_vld_R ;
  logic i_vld_C ;
  logic i_vld_X ;
  logic [13:0] i_vld_S ;
  input [37:0] in_data;
  input [37:0] in_data_T ;
  input [13:0] in_data_S ;
  output [37:0] in_data_R ;
  output [37:0] in_data_X ;
  output [37:0] in_data_C ;
  logic in_hsb_same;
  logic in_hsb_same_T ;
  logic in_hsb_same_R ;
  logic in_hsb_same_C ;
  logic in_hsb_same_X ;
  logic [13:0] in_hsb_same_S ;
  logic in_hsb_same_d;
  logic  in_hsb_same_d_T ;
  logic  in_hsb_same_d_PREV_VAL1 ;
  logic  in_hsb_same_d_PREV_VAL2 ;
  logic  in_hsb_same_d_R ;
  logic  in_hsb_same_d_X ;
  logic  in_hsb_same_d_C ;
  logic [13:0] in_hsb_same_d_S ;
  logic in_hsb_same_d_t_flag ;
  logic in_hsb_same_d_r_flag ;
  assign in_hsb_same_d_S = 931 ;
  logic [47:0] in_mask_op;
  logic [47:0] in_mask_op_T ;
  logic [47:0] in_mask_op_R ;
  logic [47:0] in_mask_op_C ;
  logic [47:0] in_mask_op_X ;
  logic [13:0] in_mask_op_S ;
  input [47:0] in_op;
  input [47:0] in_op_T ;
  input [13:0] in_op_S ;
  output [47:0] in_op_R ;
  output [47:0] in_op_X ;
  output [47:0] in_op_C ;
  input in_op_valid;
  input in_op_valid_T ;
  input [13:0] in_op_valid_S ;
  output in_op_valid_R ;
  output in_op_valid_X ;
  output in_op_valid_C ;
  input in_sel;
  input in_sel_T ;
  input [13:0] in_sel_S ;
  output in_sel_R ;
  output in_sel_X ;
  output in_sel_C ;
  input in_valid;
  input in_valid_T ;
  input [13:0] in_valid_S ;
  output in_valid_R ;
  output in_valid_X ;
  output in_valid_C ;
  input nvdla_core_clk;
  input nvdla_core_clk_T ;
  input [13:0] nvdla_core_clk_S ;
  output nvdla_core_clk_R ;
  output nvdla_core_clk_X ;
  output nvdla_core_clk_C ;
  input nvdla_core_rstn;
  input nvdla_core_rstn_T ;
  input [13:0] nvdla_core_rstn_S ;
  output nvdla_core_rstn_R ;
  output nvdla_core_rstn_X ;
  output nvdla_core_rstn_C ;
  logic [15:0] oi_hsb_pd;
  logic [15:0] oi_hsb_pd_T ;
  logic [15:0] oi_hsb_pd_R ;
  logic [15:0] oi_hsb_pd_C ;
  logic [15:0] oi_hsb_pd_X ;
  logic [13:0] oi_hsb_pd_S ;
  logic [15:0] oi_hsb_pd_tmp;
  logic [15:0] oi_hsb_pd_tmp_T ;
  logic [15:0] oi_hsb_pd_tmp_R ;
  logic [15:0] oi_hsb_pd_tmp_C ;
  logic [15:0] oi_hsb_pd_tmp_X ;
  logic [13:0] oi_hsb_pd_tmp_S ;
  logic [31:0] oi_lsb_pd;
  logic [31:0] oi_lsb_pd_T ;
  logic [31:0] oi_lsb_pd_R ;
  logic [31:0] oi_lsb_pd_C ;
  logic [31:0] oi_lsb_pd_X ;
  logic [13:0] oi_lsb_pd_S ;
  logic oi_sign;
  logic oi_sign_T ;
  logic oi_sign_R ;
  logic oi_sign_C ;
  logic oi_sign_X ;
  logic [13:0] oi_sign_S ;
  logic oi_sign_d;
  logic  oi_sign_d_T ;
  logic  oi_sign_d_PREV_VAL1 ;
  logic  oi_sign_d_PREV_VAL2 ;
  logic  oi_sign_d_R ;
  logic  oi_sign_d_X ;
  logic  oi_sign_d_C ;
  logic [13:0] oi_sign_d_S ;
  logic oi_sign_d_t_flag ;
  logic oi_sign_d_r_flag ;
  assign oi_sign_d_S = 932 ;
  output [31:0] out_final_data;
  logic [31:0] out_final_data ;
  output [31:0] out_final_data_T ;
  logic [31:0] out_final_data_T ;
  logic [31:0] out_final_data_R ;
  logic [31:0] out_final_data_C ;
  logic [31:0] out_final_data_X ;
  logic [13:0] out_final_data_S ;
  input [31:0] out_final_data_R0 ;
  input [31:0] out_final_data_C0 ;
  input [31:0] out_final_data_X0 ;
  output [13:0] out_final_data_S ;
  logic [31:0] out_final_data;
  logic [31:0]  out_final_data_T ;
  logic [31:0]  out_final_data_PREV_VAL1 ;
  logic [31:0]  out_final_data_PREV_VAL2 ;
  logic out_final_data_t_flag ;
  logic out_final_data_r_flag ;
  assign out_final_data_S = 933 ;
  output out_final_sat;
  logic out_final_sat ;
  output out_final_sat_T ;
  logic out_final_sat_T ;
  logic out_final_sat_R ;
  logic out_final_sat_C ;
  logic out_final_sat_X ;
  logic [13:0] out_final_sat_S ;
  input out_final_sat_R0 ;
  input out_final_sat_C0 ;
  input out_final_sat_X0 ;
  output [13:0] out_final_sat_S ;
  logic out_final_sat;
  logic  out_final_sat_T ;
  logic  out_final_sat_PREV_VAL1 ;
  logic  out_final_sat_PREV_VAL2 ;
  logic out_final_sat_t_flag ;
  logic out_final_sat_r_flag ;
  assign out_final_sat_S = 934 ;
  output out_final_valid;
  logic out_final_valid ;
  output out_final_valid_T ;
  logic out_final_valid_T ;
  logic out_final_valid_R ;
  logic out_final_valid_C ;
  logic out_final_valid_X ;
  logic [13:0] out_final_valid_S ;
  input out_final_valid_R0 ;
  input out_final_valid_C0 ;
  input out_final_valid_X0 ;
  output [13:0] out_final_valid_S ;
  logic out_final_valid;
  logic  out_final_valid_T ;
  logic  out_final_valid_PREV_VAL1 ;
  logic  out_final_valid_PREV_VAL2 ;
  logic out_final_valid_t_flag ;
  logic out_final_valid_r_flag ;
  assign out_final_valid_S = 935 ;
  output [47:0] out_partial_data;
  logic [47:0] out_partial_data ;
  output [47:0] out_partial_data_T ;
  logic [47:0] out_partial_data_T ;
  logic [47:0] out_partial_data_R ;
  logic [47:0] out_partial_data_C ;
  logic [47:0] out_partial_data_X ;
  logic [13:0] out_partial_data_S ;
  input [47:0] out_partial_data_R0 ;
  input [47:0] out_partial_data_C0 ;
  input [47:0] out_partial_data_X0 ;
  output [13:0] out_partial_data_S ;
  logic [47:0] out_partial_data;
  logic [47:0]  out_partial_data_T ;
  logic [47:0]  out_partial_data_PREV_VAL1 ;
  logic [47:0]  out_partial_data_PREV_VAL2 ;
  logic out_partial_data_t_flag ;
  logic out_partial_data_r_flag ;
  assign out_partial_data_S = 936 ;
  output out_partial_valid;
  logic out_partial_valid ;
  output out_partial_valid_T ;
  logic out_partial_valid_T ;
  logic out_partial_valid_R ;
  logic out_partial_valid_C ;
  logic out_partial_valid_X ;
  logic [13:0] out_partial_valid_S ;
  input out_partial_valid_R0 ;
  input out_partial_valid_C0 ;
  input out_partial_valid_X0 ;
  output [13:0] out_partial_valid_S ;
  logic out_partial_valid;
  logic  out_partial_valid_T ;
  logic  out_partial_valid_PREV_VAL1 ;
  logic  out_partial_valid_PREV_VAL2 ;
  logic out_partial_valid_t_flag ;
  logic out_partial_valid_r_flag ;
  assign out_partial_valid_S = 937 ;
  assign i_lsum_pd_nxt = in_data[31:0] + in_mask_op[31:0];
  assign i_lsum_pd_nxt_S = 0 ;
  logic [37:0] in_data_C0 ;
  logic [37:0] in_data_R0 ;
  logic [37:0] in_data_X0 ;
  logic [47:0] in_mask_op_C0 ;
  logic [47:0] in_mask_op_R0 ;
  logic [47:0] in_mask_op_X0 ;
  assign i_lsum_pd_nxt_T = in_data_T [31:0] | in_mask_op_T [31:0] ;
  assign in_data_C0 [31:0] = i_lsum_pd_nxt_C ;
  assign in_data_X0 [31:0] = i_lsum_pd_nxt_X ;
  assign in_mask_op_C0 [31:0] = i_lsum_pd_nxt_C ;
  assign in_mask_op_X0 [31:0] = i_lsum_pd_nxt_X ;
  assign in_data_R0 [31:0] = i_lsum_pd_nxt_R | ( i_lsum_pd_nxt_C & in_mask_op_T [31:0] );
  assign in_mask_op_R0 [31:0] = i_lsum_pd_nxt_R | ( i_lsum_pd_nxt_C & in_data_T [31:0] );
 assign _009_ = di_hsb_pd_tmp + oi_hsb_pd_tmp;
 assign _009__S = 0 ;
 logic [5:0] di_hsb_pd_tmp_C0 ;
 logic [5:0] di_hsb_pd_tmp_R0 ;
 logic [5:0] di_hsb_pd_tmp_X0 ;
 logic [15:0] oi_hsb_pd_tmp_C0 ;
 logic [15:0] oi_hsb_pd_tmp_R0 ;
 logic [15:0] oi_hsb_pd_tmp_X0 ;
 assign _009__T = di_hsb_pd_tmp_T | oi_hsb_pd_tmp_T ;
 assign di_hsb_pd_tmp_C0 = _009__C ;
 assign di_hsb_pd_tmp_X0 = _009__X ;
 assign oi_hsb_pd_tmp_C0 = _009__C ;
 assign oi_hsb_pd_tmp_X0 = _009__X ;
 assign di_hsb_pd_tmp_R0 = _009__R | ( _009__C & oi_hsb_pd_tmp_T );
 assign oi_hsb_pd_tmp_R0 = _009__R | ( _009__C & di_hsb_pd_tmp_T );
  logic [1:0] fangyuan0;
  logic [1:0] fangyuan0_T ;
  logic [1:0] fangyuan0_R ;
  logic [1:0] fangyuan0_C ;
  logic [1:0] fangyuan0_X ;
  assign fangyuan0 = { 1'b0, i_lsum_msb_tmp };
  assign fangyuan0_T = {  1'h0 , i_lsum_msb_tmp_T  };
  logic [13:0] fangyuan0_S ;
  assign fangyuan0_S = 0 ;
  logic [0:0] i_lsum_msb_tmp_R0 ;
  logic [0:0] i_lsum_msb_tmp_X0 ;
  logic [0:0] i_lsum_msb_tmp_C0 ;
  assign i_lsum_msb_tmp_R0 = fangyuan0_R [0:0] ;
  assign i_lsum_msb_tmp_X0 = fangyuan0_X [0:0] ;
  assign i_lsum_msb_tmp_C0 = fangyuan0_C [0:0] ;

 assign i_hsum_pd_nxt = _009_ + fangyuan0;
 assign i_hsum_pd_nxt_S = 0 ;
 logic [16:0] _009__C0 ;
 logic [16:0] _009__R0 ;
 logic [16:0] _009__X0 ;
 logic [1:0] fangyuan0_C0 ;
 logic [1:0] fangyuan0_R0 ;
 logic [1:0] fangyuan0_X0 ;
 assign i_hsum_pd_nxt_T = _009__T | fangyuan0_T ;
 assign _009__C0 = i_hsum_pd_nxt_C ;
 assign _009__X0 = i_hsum_pd_nxt_X ;
 assign fangyuan0_C0 = i_hsum_pd_nxt_C ;
 assign fangyuan0_X0 = i_hsum_pd_nxt_X ;
 assign _009__R0 = i_hsum_pd_nxt_R | ( i_hsum_pd_nxt_C & fangyuan0_T );
 assign fangyuan0_R0 = i_hsum_pd_nxt_R | ( i_hsum_pd_nxt_C & _009__T );
  assign i_tru_pd = i_sft_pd[31:0] + i_point5;
  assign i_tru_pd_S = 0 ;
  logic [46:0] i_sft_pd_C0 ;
  logic [46:0] i_sft_pd_R0 ;
  logic [46:0] i_sft_pd_X0 ;
  logic [0:0] i_point5_C0 ;
  logic [0:0] i_point5_R0 ;
  logic [0:0] i_point5_X0 ;
  assign i_tru_pd_T = i_sft_pd_T [31:0] | i_point5_T ;
  assign i_sft_pd_C0 [31:0] = i_tru_pd_C ;
  assign i_sft_pd_X0 [31:0] = i_tru_pd_X ;
  assign i_point5_C0 = i_tru_pd_C ;
  assign i_point5_X0 = i_tru_pd_X ;
  assign i_sft_pd_R0 [31:0] = i_tru_pd_R | ( i_tru_pd_C & i_point5_T );
  assign i_point5_R0 = i_tru_pd_R | ( i_tru_pd_C & i_sft_pd_T [31:0] );
  assign _010_ = in_valid & _021_;
  assign _010__S = 0 ;
  logic [0:0] in_valid_C0 ;
  logic [0:0] in_valid_R0 ;
  logic [0:0] in_valid_X0 ;
  logic [0:0] _021__C0 ;
  logic [0:0] _021__R0 ;
  logic [0:0] _021__X0 ;
  assign _010__T = in_valid_T | _021__T ;
  assign in_valid_C0 = _010__C ;
  assign in_valid_X0 = _010__X ;
  assign _021__C0 = _010__C ;
  assign _021__X0 = _010__X ;
  assign in_valid_R0 = ( _010__R | _010__C & _021__T ) & { 1{ _021_ != 0 }} ;
  assign _021__R0 = ( _010__R | _010__C & in_valid_T ) & { 1{ in_valid != 0 }} ;
  assign _011_ = i_partial_result[47] & _024_;
  assign _011__S = 0 ;
  logic [47:0] i_partial_result_C0 ;
  logic [47:0] i_partial_result_R0 ;
  logic [47:0] i_partial_result_X0 ;
  logic [0:0] _024__C0 ;
  logic [0:0] _024__R0 ;
  logic [0:0] _024__X0 ;
  assign _011__T = i_partial_result_T [47] | _024__T ;
  assign i_partial_result_C0 [47] = _011__C ;
  assign i_partial_result_X0 [47] = _011__X ;
  assign _024__C0 = _011__C ;
  assign _024__X0 = _011__X ;
  assign i_partial_result_R0 [47] = ( _011__R | _011__C & _024__T ) & { 1{ _024_ != 0 }} ;
  assign _024__R0 = ( _011__R | _011__C & i_partial_result_T [47] ) & { 1{ i_partial_result[47] != 0 }} ;
  assign _012_ = _025_ & _033_;
  assign _012__S = 0 ;
  logic [0:0] _025__C0 ;
  logic [0:0] _025__R0 ;
  logic [0:0] _025__X0 ;
  logic [0:0] _033__C0 ;
  logic [0:0] _033__R0 ;
  logic [0:0] _033__X0 ;
  assign _012__T = _025__T | _033__T ;
  assign _025__C0 = _012__C ;
  assign _025__X0 = _012__X ;
  assign _033__C0 = _012__C ;
  assign _033__X0 = _012__X ;
  assign _025__R0 = ( _012__R | _012__C & _033__T ) & { 1{ _033_ != 0 }} ;
  assign _033__R0 = ( _012__R | _012__C & _025__T ) & { 1{ _025_ != 0 }} ;
  assign _013_ = _025_ & _032_;
  assign _013__S = 0 ;
  logic [0:0] _025__C1 ;
  logic [0:0] _025__R1 ;
  logic [0:0] _025__X1 ;
  logic [0:0] _032__C0 ;
  logic [0:0] _032__R0 ;
  logic [0:0] _032__X0 ;
  assign _013__T = _025__T | _032__T ;
  assign _025__C1 = _013__C ;
  assign _025__X1 = _013__X ;
  assign _032__C0 = _013__C ;
  assign _032__X0 = _013__X ;
  assign _025__R1 = ( _013__R | _013__C & _032__T ) & { 1{ _032_ != 0 }} ;
  assign _032__R0 = ( _013__R | _013__C & _025__T ) & { 1{ _025_ != 0 }} ;
  assign _014_ = i_sat_sel & i_guide;
  assign _014__S = 0 ;
  logic [0:0] i_sat_sel_C0 ;
  logic [0:0] i_sat_sel_R0 ;
  logic [0:0] i_sat_sel_X0 ;
  logic [0:0] i_guide_C0 ;
  logic [0:0] i_guide_R0 ;
  logic [0:0] i_guide_X0 ;
  assign _014__T = i_sat_sel_T | i_guide_T ;
  assign i_sat_sel_C0 = _014__C ;
  assign i_sat_sel_X0 = _014__X ;
  assign i_guide_C0 = _014__C ;
  assign i_guide_X0 = _014__X ;
  assign i_sat_sel_R0 = ( _014__R | _014__C & i_guide_T ) & { 1{ i_guide != 0 }} ;
  assign i_guide_R0 = ( _014__R | _014__C & i_sat_sel_T ) & { 1{ i_sat_sel != 0 }} ;
  assign i_point5 = _014_ & _028_;
  assign i_point5_S = 0 ;
  logic [0:0] _014__C0 ;
  logic [0:0] _014__R0 ;
  logic [0:0] _014__X0 ;
  logic [0:0] _028__C0 ;
  logic [0:0] _028__R0 ;
  logic [0:0] _028__X0 ;
  assign i_point5_T = _014__T | _028__T ;
  assign _014__C0 = i_point5_C ;
  assign _014__X0 = i_point5_X ;
  assign _028__C0 = i_point5_C ;
  assign _028__X0 = i_point5_X ;
  assign _014__R0 = ( i_point5_R | i_point5_C & _028__T ) & { 1{ _028_ != 0 }} ;
  assign _028__R0 = ( i_point5_R | i_point5_C & _014__T ) & { 1{ _014_ != 0 }} ;
  assign i_partial_vld = i_sat_vld & _026_;
  assign i_partial_vld_S = 0 ;
  logic [0:0] i_sat_vld_C0 ;
  logic [0:0] i_sat_vld_R0 ;
  logic [0:0] i_sat_vld_X0 ;
  logic [0:0] _026__C0 ;
  logic [0:0] _026__R0 ;
  logic [0:0] _026__X0 ;
  assign i_partial_vld_T = i_sat_vld_T | _026__T ;
  assign i_sat_vld_C0 = i_partial_vld_C ;
  assign i_sat_vld_X0 = i_partial_vld_X ;
  assign _026__C0 = i_partial_vld_C ;
  assign _026__X0 = i_partial_vld_X ;
  assign i_sat_vld_R0 = ( i_partial_vld_R | i_partial_vld_C & _026__T ) & { 1{ _026_ != 0 }} ;
  assign _026__R0 = ( i_partial_vld_R | i_partial_vld_C & i_sat_vld_T ) & { 1{ i_sat_vld != 0 }} ;
  assign i_final_vld = i_sat_vld & i_sat_sel;
  assign i_final_vld_S = 0 ;
  logic [0:0] i_sat_vld_C1 ;
  logic [0:0] i_sat_vld_R1 ;
  logic [0:0] i_sat_vld_X1 ;
  logic [0:0] i_sat_sel_C1 ;
  logic [0:0] i_sat_sel_R1 ;
  logic [0:0] i_sat_sel_X1 ;
  assign i_final_vld_T = i_sat_vld_T | i_sat_sel_T ;
  assign i_sat_vld_C1 = i_final_vld_C ;
  assign i_sat_vld_X1 = i_final_vld_X ;
  assign i_sat_sel_C1 = i_final_vld_C ;
  assign i_sat_sel_X1 = i_final_vld_X ;
  assign i_sat_vld_R1 = ( i_final_vld_R | i_final_vld_C & i_sat_sel_T ) & { 1{ i_sat_sel != 0 }} ;
  assign i_sat_sel_R1 = ( i_final_vld_R | i_final_vld_C & i_sat_vld_T ) & { 1{ i_sat_vld != 0 }} ;
  assign _007_ = i_final_vld & i_sft_need_sat;
  assign _007__S = 0 ;
  logic [0:0] i_final_vld_C0 ;
  logic [0:0] i_final_vld_R0 ;
  logic [0:0] i_final_vld_X0 ;
  logic [0:0] i_sft_need_sat_C0 ;
  logic [0:0] i_sft_need_sat_R0 ;
  logic [0:0] i_sft_need_sat_X0 ;
  assign _007__T = i_final_vld_T | i_sft_need_sat_T ;
  assign i_final_vld_C0 = _007__C ;
  assign i_final_vld_X0 = _007__X ;
  assign i_sft_need_sat_C0 = _007__C ;
  assign i_sft_need_sat_X0 = _007__X ;
  assign i_final_vld_R0 = ( _007__R | _007__C & i_sft_need_sat_T ) & { 1{ i_sft_need_sat != 0 }} ;
  assign i_sft_need_sat_R0 = ( _007__R | _007__C & i_final_vld_T ) & { 1{ i_final_vld != 0 }} ;
  assign _015_ = ! in_data[37:32];
  assign _015__T = | in_data_T [37:32] ;
  assign in_data_C0 [37:32] = { 6{ _015__C }} ;
  assign in_data_X0 [37:32] = { 6{ _015__X }} ;
  assign in_data_R0 [37:32] = { 6{ _015__R }} ;
  assign _015__S = 0 ;
  assign _016_ = in_data[37:32] == 6'b111111;
  assign _016__S = 0 ;
  logic [37:0] in_data_C1 ;
  logic [37:0] in_data_R1 ;
  logic [37:0] in_data_X1 ;
  assign _016__T = | in_data_T [37:32] ;
  assign in_data_C1 [37:32] = { 6{ _016__C }} ;
  assign in_data_R1 [37:32] = { 6{ _016__R }} ;
  assign in_data_X1 [37:32] = { 6{ _016__X }} ;
  assign _017_ = ! in_mask_op[47:32];
  assign _017__T = | in_mask_op_T [47:32] ;
  assign in_mask_op_C0 [47:32] = { 16{ _017__C }} ;
  assign in_mask_op_X0 [47:32] = { 16{ _017__X }} ;
  assign in_mask_op_R0 [47:32] = { 16{ _017__R }} ;
  assign _017__S = 0 ;
  assign _018_ = in_mask_op[47:32] == 16'b1111111111111111;
  assign _018__S = 0 ;
  logic [47:0] in_mask_op_C1 ;
  logic [47:0] in_mask_op_R1 ;
  logic [47:0] in_mask_op_X1 ;
  assign _018__T = | in_mask_op_T [47:32] ;
  assign in_mask_op_C1 [47:32] = { 16{ _018__C }} ;
  assign in_mask_op_R1 [47:32] = { 16{ _018__R }} ;
  assign in_mask_op_X1 [47:32] = { 16{ _018__X }} ;
  assign in_hsb_same = _019_ && _020_;
  assign in_hsb_same_S = 0 ;
  logic [0:0] _019__C0 ;
  logic [0:0] _019__R0 ;
  logic [0:0] _019__X0 ;
  logic [0:0] _020__C0 ;
  logic [0:0] _020__R0 ;
  logic [0:0] _020__X0 ;
  assign in_hsb_same_T = _019__T | _020__T ;
  assign _019__C0 = in_hsb_same_C ;
  assign _019__X0 = in_hsb_same_X ;
  assign _020__C0 = in_hsb_same_C ;
  assign _020__X0 = in_hsb_same_X ;
  assign _019__R0 = ( in_hsb_same_R | in_hsb_same_C & _020__T ) & { 1{ _020_ != 0 }} ;
  assign _020__R0 = ( in_hsb_same_R | in_hsb_same_C & _019__T ) & { 1{ _019_ != 0 }} ;
  assign _019_ = _015_ || _016_;
  assign _019__S = 0 ;
  logic [0:0] _015__C0 ;
  logic [0:0] _015__R0 ;
  logic [0:0] _015__X0 ;
  logic [0:0] _016__C0 ;
  logic [0:0] _016__R0 ;
  logic [0:0] _016__X0 ;
  assign _019__T = _015__T | _016__T ;
  assign _015__C0 = _019__C ;
  assign _015__X0 = _019__X ;
  assign _016__C0 = _019__C ;
  assign _016__X0 = _019__X ;
  assign _015__R0 = ( _019__R | _019__C & _016__T ) & { 1{ _016_ == 0 }} ;
  assign _016__R0 = ( _019__R | _019__C & _015__T ) & { 1{ _015_ == 0 }} ;
  assign _020_ = _017_ || _018_;
  assign _020__S = 0 ;
  logic [0:0] _017__C0 ;
  logic [0:0] _017__R0 ;
  logic [0:0] _017__X0 ;
  logic [0:0] _018__C0 ;
  logic [0:0] _018__R0 ;
  logic [0:0] _018__X0 ;
  assign _020__T = _017__T | _018__T ;
  assign _017__C0 = _020__C ;
  assign _017__X0 = _020__X ;
  assign _018__C0 = _020__C ;
  assign _018__X0 = _020__X ;
  assign _017__R0 = ( _020__R | _020__C & _018__T ) & { 1{ _018_ == 0 }} ;
  assign _018__R0 = ( _020__R | _020__C & _017__T ) & { 1{ _017_ == 0 }} ;
  assign _021_ = ~ in_hsb_same;
  logic [0:0] in_hsb_same_C0 ;
  logic [0:0] in_hsb_same_R0 ;
  logic [0:0] in_hsb_same_X0 ;
  assign _021__T = in_hsb_same_T ;
  assign in_hsb_same_C0 = _021__C ;
  assign in_hsb_same_R0 = _021__R ;
  assign in_hsb_same_X0 = _021__X ;
  assign _021__S = 0 ;
  assign _022_ = ~ i_lsum_pd[32];
  logic [32:0] i_lsum_pd_C0 ;
  logic [32:0] i_lsum_pd_R0 ;
  logic [32:0] i_lsum_pd_X0 ;
  assign _022__T = i_lsum_pd_T [32] ;
  assign i_lsum_pd_C0 [32] = _022__C ;
  assign i_lsum_pd_R0 [32] = _022__R ;
  assign i_lsum_pd_X0 [32] = _022__X ;
  assign _022__S = 0 ;
  assign _023_ = ~ i_hsum_pd[16];
  logic [16:0] i_hsum_pd_C0 ;
  logic [16:0] i_hsum_pd_R0 ;
  logic [16:0] i_hsum_pd_X0 ;
  assign _023__T = i_hsum_pd_T [16] ;
  assign i_hsum_pd_C0 [16] = _023__C ;
  assign i_hsum_pd_R0 [16] = _023__R ;
  assign i_hsum_pd_X0 [16] = _023__X ;
  assign _023__S = 0 ;
  assign _024_ = ~ _031_;
  logic [0:0] _031__C0 ;
  logic [0:0] _031__R0 ;
  logic [0:0] _031__X0 ;
  assign _024__T = _031__T ;
  assign _031__C0 = _024__C ;
  assign _031__R0 = _024__R ;
  assign _031__X0 = _024__X ;
  assign _024__S = 0 ;
  assign _025_ = ~ i_partial_result[47];
  assign { i_partial_result_R0 [0], i_partial_result_R0 [1], i_partial_result_R0 [2], i_partial_result_R0 [3], i_partial_result_R0 [4], i_partial_result_R0 [5], i_partial_result_R0 [6], i_partial_result_R0 [7], i_partial_result_R0 [8], i_partial_result_R0 [9], i_partial_result_R0 [10], i_partial_result_R0 [11], i_partial_result_R0 [12], i_partial_result_R0 [13], i_partial_result_R0 [14], i_partial_result_R0 [15], i_partial_result_R0 [16], i_partial_result_R0 [17], i_partial_result_R0 [18], i_partial_result_R0 [19], i_partial_result_R0 [20], i_partial_result_R0 [21], i_partial_result_R0 [22], i_partial_result_R0 [23], i_partial_result_R0 [24], i_partial_result_R0 [25], i_partial_result_R0 [26], i_partial_result_R0 [27], i_partial_result_R0 [28], i_partial_result_R0 [29], i_partial_result_R0 [30], i_partial_result_R0 [31], i_partial_result_R0 [32], i_partial_result_R0 [33], i_partial_result_R0 [34], i_partial_result_R0 [35], i_partial_result_R0 [36], i_partial_result_R0 [37], i_partial_result_R0 [38], i_partial_result_R0 [39], i_partial_result_R0 [40], i_partial_result_R0 [41], i_partial_result_R0 [42], i_partial_result_R0 [43], i_partial_result_R0 [44], i_partial_result_R0 [45], i_partial_result_R0 [46] } = 0;
  assign { i_partial_result_X0 [0], i_partial_result_X0 [1], i_partial_result_X0 [2], i_partial_result_X0 [3], i_partial_result_X0 [4], i_partial_result_X0 [5], i_partial_result_X0 [6], i_partial_result_X0 [7], i_partial_result_X0 [8], i_partial_result_X0 [9], i_partial_result_X0 [10], i_partial_result_X0 [11], i_partial_result_X0 [12], i_partial_result_X0 [13], i_partial_result_X0 [14], i_partial_result_X0 [15], i_partial_result_X0 [16], i_partial_result_X0 [17], i_partial_result_X0 [18], i_partial_result_X0 [19], i_partial_result_X0 [20], i_partial_result_X0 [21], i_partial_result_X0 [22], i_partial_result_X0 [23], i_partial_result_X0 [24], i_partial_result_X0 [25], i_partial_result_X0 [26], i_partial_result_X0 [27], i_partial_result_X0 [28], i_partial_result_X0 [29], i_partial_result_X0 [30], i_partial_result_X0 [31], i_partial_result_X0 [32], i_partial_result_X0 [33], i_partial_result_X0 [34], i_partial_result_X0 [35], i_partial_result_X0 [36], i_partial_result_X0 [37], i_partial_result_X0 [38], i_partial_result_X0 [39], i_partial_result_X0 [40], i_partial_result_X0 [41], i_partial_result_X0 [42], i_partial_result_X0 [43], i_partial_result_X0 [44], i_partial_result_X0 [45], i_partial_result_X0 [46] } = 0;
  assign { i_partial_result_C0 [0], i_partial_result_C0 [1], i_partial_result_C0 [2], i_partial_result_C0 [3], i_partial_result_C0 [4], i_partial_result_C0 [5], i_partial_result_C0 [6], i_partial_result_C0 [7], i_partial_result_C0 [8], i_partial_result_C0 [9], i_partial_result_C0 [10], i_partial_result_C0 [11], i_partial_result_C0 [12], i_partial_result_C0 [13], i_partial_result_C0 [14], i_partial_result_C0 [15], i_partial_result_C0 [16], i_partial_result_C0 [17], i_partial_result_C0 [18], i_partial_result_C0 [19], i_partial_result_C0 [20], i_partial_result_C0 [21], i_partial_result_C0 [22], i_partial_result_C0 [23], i_partial_result_C0 [24], i_partial_result_C0 [25], i_partial_result_C0 [26], i_partial_result_C0 [27], i_partial_result_C0 [28], i_partial_result_C0 [29], i_partial_result_C0 [30], i_partial_result_C0 [31], i_partial_result_C0 [32], i_partial_result_C0 [33], i_partial_result_C0 [34], i_partial_result_C0 [35], i_partial_result_C0 [36], i_partial_result_C0 [37], i_partial_result_C0 [38], i_partial_result_C0 [39], i_partial_result_C0 [40], i_partial_result_C0 [41], i_partial_result_C0 [42], i_partial_result_C0 [43], i_partial_result_C0 [44], i_partial_result_C0 [45], i_partial_result_C0 [46] } = 0;
  logic [47:0] i_partial_result_C1 ;
  logic [47:0] i_partial_result_R1 ;
  logic [47:0] i_partial_result_X1 ;
  assign _025__T = i_partial_result_T [47] ;
  assign i_partial_result_C1 [47] = _025__C ;
  assign i_partial_result_R1 [47] = _025__R ;
  assign i_partial_result_X1 [47] = _025__X ;
  assign _025__S = 0 ;
  assign _026_ = ~ i_sat_sel;
  logic [0:0] i_sat_sel_C2 ;
  logic [0:0] i_sat_sel_R2 ;
  logic [0:0] i_sat_sel_X2 ;
  assign _026__T = i_sat_sel_T ;
  assign i_sat_sel_C2 = _026__C ;
  assign i_sat_sel_R2 = _026__R ;
  assign i_sat_sel_X2 = _026__X ;
  assign _026__S = 0 ;
  assign _027_ = _011_ | _012_;
  assign _027__S = 0 ;
  logic [0:0] _011__C0 ;
  logic [0:0] _011__R0 ;
  logic [0:0] _011__X0 ;
  logic [0:0] _012__C0 ;
  logic [0:0] _012__R0 ;
  logic [0:0] _012__X0 ;
  assign _027__T = _011__T | _012__T ;
  assign _011__C0 = _027__C ;
  assign _011__X0 = _027__X ;
  assign _012__C0 = _027__C ;
  assign _012__X0 = _027__X ;
  assign _011__R0 = ( _027__R | _027__C & _012__T ) & { 1{ _012_ != 1'b1 }} ;
  assign _012__R0 = ( _027__R | _027__C & _011__T ) & { 1{ _011_ != 1'b1 }} ;
  assign i_sft_need_sat = _027_ | _013_;
  assign i_sft_need_sat_S = 0 ;
  logic [0:0] _027__C0 ;
  logic [0:0] _027__R0 ;
  logic [0:0] _027__X0 ;
  logic [0:0] _013__C0 ;
  logic [0:0] _013__R0 ;
  logic [0:0] _013__X0 ;
  assign i_sft_need_sat_T = _027__T | _013__T ;
  assign _027__C0 = i_sft_need_sat_C ;
  assign _027__X0 = i_sft_need_sat_X ;
  assign _013__C0 = i_sft_need_sat_C ;
  assign _013__X0 = i_sft_need_sat_X ;
  assign _027__R0 = ( i_sft_need_sat_R | i_sft_need_sat_C & _013__T ) & { 1{ _013_ != 1'b1 }} ;
  assign _013__R0 = ( i_sft_need_sat_R | i_sft_need_sat_C & _027__T ) & { 1{ _027_ != 1'b1 }} ;
  assign _028_ = _025_ | _034_;
  assign _028__S = 0 ;
  logic [0:0] _025__C2 ;
  logic [0:0] _025__R2 ;
  logic [0:0] _025__X2 ;
  logic [0:0] _034__C0 ;
  logic [0:0] _034__R0 ;
  logic [0:0] _034__X0 ;
  assign _028__T = _025__T | _034__T ;
  assign _025__C2 = _028__C ;
  assign _025__X2 = _028__X ;
  assign _034__C0 = _028__C ;
  assign _034__X0 = _028__X ;
  assign _025__R2 = ( _028__R | _028__C & _034__T ) & { 1{ _034_ != 1'b1 }} ;
  assign _034__R0 = ( _028__R | _028__C & _025__T ) & { 1{ _025_ != 1'b1 }} ;
  always @(posedge nvdla_core_clk)
      out_final_data <= _006_;
  logic [31:0] _006__X0 ;
  logic [31:0] _006__R0 ;
  logic [31:0] _006__C0 ;
  assign _006__X0 = { 32{ out_final_data_S != _006__S }} ;
  assign _006__R0 = 0 ;
  assign _006__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      out_final_data_T 		<= !nvdla_core_rstn ? 0 : ( _006__T & _006__X0 );
  always @( posedge nvdla_core_clk )
      out_final_data_t_flag 	<= !nvdla_core_rstn ? 0 : out_final_data_t_flag ? 1 : | _006__T & ( | _006__X0 );
  always @( posedge nvdla_core_clk )
      out_final_data_r_flag 	<= !nvdla_core_rstn ? 0 : out_final_data_r_flag ? 1 : out_final_data_t_flag ? 0 : ( | out_final_data_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      out_final_sat <= 1'b0;
    else
      out_final_sat <= _007_;
  logic [0:0] _007__X0 ;
  logic [0:0] _007__R0 ;
  logic [0:0] _007__C0 ;
  assign _007__X0 = { 1{ out_final_sat_S != _007__S }} ;
  assign _007__R0 = 0 ;
  assign _007__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      out_final_sat_T 		<= !nvdla_core_rstn ? 0 : ( _007__T & _007__X0 );
  always @( posedge nvdla_core_clk )
      out_final_sat_t_flag 	<= !nvdla_core_rstn ? 0 : out_final_sat_t_flag ? 1 : | _007__T & ( | _007__X0 );
  always @( posedge nvdla_core_clk )
      out_final_sat_r_flag 	<= !nvdla_core_rstn ? 0 : out_final_sat_r_flag ? 1 : out_final_sat_t_flag ? 0 : ( | out_final_sat_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      out_final_valid <= 1'b0;
    else
      out_final_valid <= i_final_vld;
  logic [0:0] i_final_vld_X1 ;
  logic [0:0] i_final_vld_R1 ;
  logic [0:0] i_final_vld_C1 ;
  assign i_final_vld_X1 = { 1{ out_final_valid_S != i_final_vld_S }} ;
  assign i_final_vld_R1 = 0 ;
  assign i_final_vld_C1 = 0 ;
  always @( posedge nvdla_core_clk )
      out_final_valid_T 		<= !nvdla_core_rstn ? 0 : ( i_final_vld_T & i_final_vld_X1 );
  always @( posedge nvdla_core_clk )
      out_final_valid_t_flag 	<= !nvdla_core_rstn ? 0 : out_final_valid_t_flag ? 1 : | i_final_vld_T & ( | i_final_vld_X1 );
  always @( posedge nvdla_core_clk )
      out_final_valid_r_flag 	<= !nvdla_core_rstn ? 0 : out_final_valid_r_flag ? 1 : out_final_valid_t_flag ? 0 : ( | out_final_valid_R ) ;
  always @(posedge nvdla_core_clk)
      out_partial_data <= _008_;
  logic [47:0] _008__X0 ;
  logic [47:0] _008__R0 ;
  logic [47:0] _008__C0 ;
  assign _008__X0 = { 48{ out_partial_data_S != _008__S }} ;
  assign _008__R0 = 0 ;
  assign _008__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      out_partial_data_T 		<= !nvdla_core_rstn ? 0 : ( _008__T & _008__X0 );
  always @( posedge nvdla_core_clk )
      out_partial_data_t_flag 	<= !nvdla_core_rstn ? 0 : out_partial_data_t_flag ? 1 : | _008__T & ( | _008__X0 );
  always @( posedge nvdla_core_clk )
      out_partial_data_r_flag 	<= !nvdla_core_rstn ? 0 : out_partial_data_r_flag ? 1 : out_partial_data_t_flag ? 0 : ( | out_partial_data_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      out_partial_valid <= 1'b0;
    else
      out_partial_valid <= i_partial_vld;
  logic [0:0] i_partial_vld_X0 ;
  logic [0:0] i_partial_vld_R0 ;
  logic [0:0] i_partial_vld_C0 ;
  assign i_partial_vld_X0 = { 1{ out_partial_valid_S != i_partial_vld_S }} ;
  assign i_partial_vld_R0 = 0 ;
  assign i_partial_vld_C0 = 0 ;
  always @( posedge nvdla_core_clk )
      out_partial_valid_T 		<= !nvdla_core_rstn ? 0 : ( i_partial_vld_T & i_partial_vld_X0 );
  always @( posedge nvdla_core_clk )
      out_partial_valid_t_flag 	<= !nvdla_core_rstn ? 0 : out_partial_valid_t_flag ? 1 : | i_partial_vld_T & ( | i_partial_vld_X0 );
  always @( posedge nvdla_core_clk )
      out_partial_valid_r_flag 	<= !nvdla_core_rstn ? 0 : out_partial_valid_r_flag ? 1 : out_partial_valid_t_flag ? 0 : ( | out_partial_valid_R ) ;
  always @(posedge nvdla_core_clk)
      i_hsum_pd <= _001_;
  logic [16:0] _001__X0 ;
  logic [16:0] _001__R0 ;
  logic [16:0] _001__C0 ;
  assign _001__X0 = { 17{ i_hsum_pd_S != _001__S }} ;
  assign _001__R0 = 0 ;
  assign _001__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      i_hsum_pd_T 		<= !nvdla_core_rstn ? 0 : ( _001__T & _001__X0 );
  always @( posedge nvdla_core_clk )
      i_hsum_pd_t_flag 	<= !nvdla_core_rstn ? 0 : i_hsum_pd_t_flag ? 1 : | _001__T & ( | _001__X0 );
  always @( posedge nvdla_core_clk )
      i_hsum_pd_r_flag 	<= !nvdla_core_rstn ? 0 : i_hsum_pd_r_flag ? 1 : i_hsum_pd_t_flag ? 0 : ( | i_hsum_pd_R ) ;
  always @(posedge nvdla_core_clk)
      i_lsum_pd <= _002_;
  logic [32:0] _002__X0 ;
  logic [32:0] _002__R0 ;
  logic [32:0] _002__C0 ;
  assign _002__X0 = { 33{ i_lsum_pd_S != _002__S }} ;
  assign _002__R0 = 0 ;
  assign _002__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      i_lsum_pd_T 		<= !nvdla_core_rstn ? 0 : ( _002__T & _002__X0 );
  always @( posedge nvdla_core_clk )
      i_lsum_pd_t_flag 	<= !nvdla_core_rstn ? 0 : i_lsum_pd_t_flag ? 1 : | _002__T & ( | _002__X0 );
  always @( posedge nvdla_core_clk )
      i_lsum_pd_r_flag 	<= !nvdla_core_rstn ? 0 : i_lsum_pd_r_flag ? 1 : i_lsum_pd_t_flag ? 0 : ( | i_lsum_pd_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      in_hsb_same_d <= 1'b0;
    else
      in_hsb_same_d <= _004_;
  logic [0:0] _004__X0 ;
  logic [0:0] _004__R0 ;
  logic [0:0] _004__C0 ;
  assign _004__X0 = { 1{ in_hsb_same_d_S != _004__S }} ;
  assign _004__R0 = 0 ;
  assign _004__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      in_hsb_same_d_T 		<= !nvdla_core_rstn ? 0 : ( _004__T & _004__X0 );
  always @( posedge nvdla_core_clk )
      in_hsb_same_d_t_flag 	<= !nvdla_core_rstn ? 0 : in_hsb_same_d_t_flag ? 1 : | _004__T & ( | _004__X0 );
  always @( posedge nvdla_core_clk )
      in_hsb_same_d_r_flag 	<= !nvdla_core_rstn ? 0 : in_hsb_same_d_r_flag ? 1 : in_hsb_same_d_t_flag ? 0 : ( | in_hsb_same_d_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      oi_sign_d <= 1'b0;
    else
      oi_sign_d <= _005_;
  logic [0:0] _005__X0 ;
  logic [0:0] _005__R0 ;
  logic [0:0] _005__C0 ;
  assign _005__X0 = { 1{ oi_sign_d_S != _005__S }} ;
  assign _005__R0 = 0 ;
  assign _005__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      oi_sign_d_T 		<= !nvdla_core_rstn ? 0 : ( _005__T & _005__X0 );
  always @( posedge nvdla_core_clk )
      oi_sign_d_t_flag 	<= !nvdla_core_rstn ? 0 : oi_sign_d_t_flag ? 1 : | _005__T & ( | _005__X0 );
  always @( posedge nvdla_core_clk )
      oi_sign_d_r_flag 	<= !nvdla_core_rstn ? 0 : oi_sign_d_r_flag ? 1 : oi_sign_d_t_flag ? 0 : ( | oi_sign_d_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      di_sign_d <= 1'b0;
    else
      di_sign_d <= _000_;
  logic [0:0] _000__X0 ;
  logic [0:0] _000__R0 ;
  logic [0:0] _000__C0 ;
  assign _000__X0 = { 1{ di_sign_d_S != _000__S }} ;
  assign _000__R0 = 0 ;
  assign _000__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      di_sign_d_T 		<= !nvdla_core_rstn ? 0 : ( _000__T & _000__X0 );
  always @( posedge nvdla_core_clk )
      di_sign_d_t_flag 	<= !nvdla_core_rstn ? 0 : di_sign_d_t_flag ? 1 : | _000__T & ( | _000__X0 );
  always @( posedge nvdla_core_clk )
      di_sign_d_r_flag 	<= !nvdla_core_rstn ? 0 : di_sign_d_r_flag ? 1 : di_sign_d_t_flag ? 0 : ( | di_sign_d_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      i_sat_sel <= 1'b0;
    else
      i_sat_sel <= _003_;
  logic [0:0] _003__X0 ;
  logic [0:0] _003__R0 ;
  logic [0:0] _003__C0 ;
  assign _003__X0 = { 1{ i_sat_sel_S != _003__S }} ;
  assign _003__R0 = 0 ;
  assign _003__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      i_sat_sel_T 		<= !nvdla_core_rstn ? 0 : ( _003__T & _003__X0 );
  always @( posedge nvdla_core_clk )
      i_sat_sel_t_flag 	<= !nvdla_core_rstn ? 0 : i_sat_sel_t_flag ? 1 : | _003__T & ( | _003__X0 );
  always @( posedge nvdla_core_clk )
      i_sat_sel_r_flag 	<= !nvdla_core_rstn ? 0 : i_sat_sel_r_flag ? 1 : i_sat_sel_t_flag ? 0 : ( | i_sat_sel_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      i_sat_vld <= 1'b0;
    else
      i_sat_vld <= in_valid;
  logic [0:0] in_valid_X1 ;
  logic [0:0] in_valid_R1 ;
  logic [0:0] in_valid_C1 ;
  assign in_valid_X1 = { 1{ i_sat_vld_S != in_valid_S }} ;
  assign in_valid_R1 = 0 ;
  assign in_valid_C1 = 0 ;
  always @( posedge nvdla_core_clk )
      i_sat_vld_T 		<= !nvdla_core_rstn ? 0 : ( in_valid_T & in_valid_X1 );
  always @( posedge nvdla_core_clk )
      i_sat_vld_t_flag 	<= !nvdla_core_rstn ? 0 : i_sat_vld_t_flag ? 1 : | in_valid_T & ( | in_valid_X1 );
  always @( posedge nvdla_core_clk )
      i_sat_vld_r_flag 	<= !nvdla_core_rstn ? 0 : i_sat_vld_r_flag ? 1 : i_sat_vld_t_flag ? 0 : ( | i_sat_vld_R ) ;
  assign _006_ = i_final_vld ? i_final_result : out_final_data;
  logic [0:0] i_final_vld_C2 ;
  logic [0:0] i_final_vld_R2 ;
  logic [0:0] i_final_vld_X2 ;
  assign i_final_vld_C2 = | _006__C ;
  assign i_final_vld_X2 = | _006__X ;
  assign _006__T = i_final_vld ? ( { 32{ i_final_vld_T  }} | i_final_result_T ) : ( { 32{ i_final_vld_T  }} | out_final_data_T );
  assign _006__S = i_final_vld ? i_final_result_S : out_final_data_S ;
  assign i_final_vld_R2 = ( | (_006__R | ( _006__C & ( { 32{ i_final_vld }} & i_final_result_T | { 32{ !i_final_vld }} & out_final_data_T )))) && i_final_result != out_final_data ;
  logic [31:0] i_final_result_C0 ;
  logic [31:0] i_final_result_R0 ;
  logic [31:0] i_final_result_X0 ;
  assign i_final_result_C0 = { 32{ i_final_vld }} ;
  assign i_final_result_R0 = { 32{ i_final_vld }} & ( _006__R | ( { 32{ i_final_vld_T  }} & _006__C ));
  assign i_final_result_X0 = { 32{ i_final_vld }} & _006__X ;
  logic [31:0] out_final_data_C1 ;
  logic [31:0] out_final_data_R1 ;
  logic [31:0] out_final_data_X1 ;
  assign out_final_data_C1 = { 32{ !i_final_vld }} ;
  assign out_final_data_R1 = { 32{ !i_final_vld }} & ( _006__R | ( { 32{ i_final_vld_T  }} & _006__C ));
  assign out_final_data_X1 = { 32{ !i_final_vld }} & _006__X ;
  assign _008_ = i_partial_vld ? i_partial_result : out_partial_data;
  logic [0:0] i_partial_vld_C1 ;
  logic [0:0] i_partial_vld_R1 ;
  logic [0:0] i_partial_vld_X1 ;
  assign i_partial_vld_C1 = | _008__C ;
  assign i_partial_vld_X1 = | _008__X ;
  assign _008__T = i_partial_vld ? ( { 48{ i_partial_vld_T  }} | i_partial_result_T ) : ( { 48{ i_partial_vld_T  }} | out_partial_data_T );
  assign _008__S = i_partial_vld ? i_partial_result_S : out_partial_data_S ;
  assign i_partial_vld_R1 = ( | (_008__R | ( _008__C & ( { 48{ i_partial_vld }} & i_partial_result_T | { 48{ !i_partial_vld }} & out_partial_data_T )))) && i_partial_result != out_partial_data ;
  assign { i_partial_result_R1 [0], i_partial_result_R1 [1], i_partial_result_R1 [2], i_partial_result_R1 [3], i_partial_result_R1 [4], i_partial_result_R1 [5], i_partial_result_R1 [6], i_partial_result_R1 [7], i_partial_result_R1 [8], i_partial_result_R1 [9], i_partial_result_R1 [10], i_partial_result_R1 [11], i_partial_result_R1 [12], i_partial_result_R1 [13], i_partial_result_R1 [14], i_partial_result_R1 [15], i_partial_result_R1 [16], i_partial_result_R1 [17], i_partial_result_R1 [18], i_partial_result_R1 [19], i_partial_result_R1 [20], i_partial_result_R1 [21], i_partial_result_R1 [22], i_partial_result_R1 [23], i_partial_result_R1 [24], i_partial_result_R1 [25], i_partial_result_R1 [26], i_partial_result_R1 [27], i_partial_result_R1 [28], i_partial_result_R1 [29], i_partial_result_R1 [30], i_partial_result_R1 [31], i_partial_result_R1 [32], i_partial_result_R1 [33], i_partial_result_R1 [34], i_partial_result_R1 [35], i_partial_result_R1 [36], i_partial_result_R1 [37], i_partial_result_R1 [38], i_partial_result_R1 [39], i_partial_result_R1 [40], i_partial_result_R1 [41], i_partial_result_R1 [42], i_partial_result_R1 [43], i_partial_result_R1 [44], i_partial_result_R1 [45], i_partial_result_R1 [46] } = 0;
  assign { i_partial_result_X1 [0], i_partial_result_X1 [1], i_partial_result_X1 [2], i_partial_result_X1 [3], i_partial_result_X1 [4], i_partial_result_X1 [5], i_partial_result_X1 [6], i_partial_result_X1 [7], i_partial_result_X1 [8], i_partial_result_X1 [9], i_partial_result_X1 [10], i_partial_result_X1 [11], i_partial_result_X1 [12], i_partial_result_X1 [13], i_partial_result_X1 [14], i_partial_result_X1 [15], i_partial_result_X1 [16], i_partial_result_X1 [17], i_partial_result_X1 [18], i_partial_result_X1 [19], i_partial_result_X1 [20], i_partial_result_X1 [21], i_partial_result_X1 [22], i_partial_result_X1 [23], i_partial_result_X1 [24], i_partial_result_X1 [25], i_partial_result_X1 [26], i_partial_result_X1 [27], i_partial_result_X1 [28], i_partial_result_X1 [29], i_partial_result_X1 [30], i_partial_result_X1 [31], i_partial_result_X1 [32], i_partial_result_X1 [33], i_partial_result_X1 [34], i_partial_result_X1 [35], i_partial_result_X1 [36], i_partial_result_X1 [37], i_partial_result_X1 [38], i_partial_result_X1 [39], i_partial_result_X1 [40], i_partial_result_X1 [41], i_partial_result_X1 [42], i_partial_result_X1 [43], i_partial_result_X1 [44], i_partial_result_X1 [45], i_partial_result_X1 [46] } = 0;
  assign { i_partial_result_C1 [0], i_partial_result_C1 [1], i_partial_result_C1 [2], i_partial_result_C1 [3], i_partial_result_C1 [4], i_partial_result_C1 [5], i_partial_result_C1 [6], i_partial_result_C1 [7], i_partial_result_C1 [8], i_partial_result_C1 [9], i_partial_result_C1 [10], i_partial_result_C1 [11], i_partial_result_C1 [12], i_partial_result_C1 [13], i_partial_result_C1 [14], i_partial_result_C1 [15], i_partial_result_C1 [16], i_partial_result_C1 [17], i_partial_result_C1 [18], i_partial_result_C1 [19], i_partial_result_C1 [20], i_partial_result_C1 [21], i_partial_result_C1 [22], i_partial_result_C1 [23], i_partial_result_C1 [24], i_partial_result_C1 [25], i_partial_result_C1 [26], i_partial_result_C1 [27], i_partial_result_C1 [28], i_partial_result_C1 [29], i_partial_result_C1 [30], i_partial_result_C1 [31], i_partial_result_C1 [32], i_partial_result_C1 [33], i_partial_result_C1 [34], i_partial_result_C1 [35], i_partial_result_C1 [36], i_partial_result_C1 [37], i_partial_result_C1 [38], i_partial_result_C1 [39], i_partial_result_C1 [40], i_partial_result_C1 [41], i_partial_result_C1 [42], i_partial_result_C1 [43], i_partial_result_C1 [44], i_partial_result_C1 [45], i_partial_result_C1 [46] } = 0;
  logic [47:0] i_partial_result_C2 ;
  logic [47:0] i_partial_result_R2 ;
  logic [47:0] i_partial_result_X2 ;
  assign i_partial_result_C2 = { 48{ i_partial_vld }} ;
  assign i_partial_result_R2 = { 48{ i_partial_vld }} & ( _008__R | ( { 48{ i_partial_vld_T  }} & _008__C ));
  assign i_partial_result_X2 = { 48{ i_partial_vld }} & _008__X ;
  logic [47:0] out_partial_data_C1 ;
  logic [47:0] out_partial_data_R1 ;
  logic [47:0] out_partial_data_X1 ;
  assign out_partial_data_C1 = { 48{ !i_partial_vld }} ;
  assign out_partial_data_R1 = { 48{ !i_partial_vld }} & ( _008__R | ( { 48{ i_partial_vld_T  }} & _008__C ));
  assign out_partial_data_X1 = { 48{ !i_partial_vld }} & _008__X ;
  logic [46:0] fangyuan1;
  logic [46:0] fangyuan1_T ;
  logic [46:0] fangyuan1_R ;
  logic [46:0] fangyuan1_C ;
  logic [46:0] fangyuan1_X ;
  assign fangyuan1 = { _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_, _023_ };
  assign fangyuan1_T = {  _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T , _023__T  };
  logic [13:0] fangyuan1_S ;
  assign fangyuan1_S = 0 ;
  logic [0:0] _023__R0 ;
  logic [0:0] _023__X0 ;
  logic [0:0] _023__C0 ;
  assign _023__R0 = fangyuan1_R [46:46] ;
  assign _023__X0 = fangyuan1_X [46:46] ;
  assign _023__C0 = fangyuan1_C [46:46] ;
  logic [0:0] _023__R1 ;
  logic [0:0] _023__X1 ;
  logic [0:0] _023__C1 ;
  assign _023__R1 = fangyuan1_R [45:45] ;
  assign _023__X1 = fangyuan1_X [45:45] ;
  assign _023__C1 = fangyuan1_C [45:45] ;
  logic [0:0] _023__R2 ;
  logic [0:0] _023__X2 ;
  logic [0:0] _023__C2 ;
  assign _023__R2 = fangyuan1_R [44:44] ;
  assign _023__X2 = fangyuan1_X [44:44] ;
  assign _023__C2 = fangyuan1_C [44:44] ;
  logic [0:0] _023__R3 ;
  logic [0:0] _023__X3 ;
  logic [0:0] _023__C3 ;
  assign _023__R3 = fangyuan1_R [43:43] ;
  assign _023__X3 = fangyuan1_X [43:43] ;
  assign _023__C3 = fangyuan1_C [43:43] ;
  logic [0:0] _023__R4 ;
  logic [0:0] _023__X4 ;
  logic [0:0] _023__C4 ;
  assign _023__R4 = fangyuan1_R [42:42] ;
  assign _023__X4 = fangyuan1_X [42:42] ;
  assign _023__C4 = fangyuan1_C [42:42] ;
  logic [0:0] _023__R5 ;
  logic [0:0] _023__X5 ;
  logic [0:0] _023__C5 ;
  assign _023__R5 = fangyuan1_R [41:41] ;
  assign _023__X5 = fangyuan1_X [41:41] ;
  assign _023__C5 = fangyuan1_C [41:41] ;
  logic [0:0] _023__R6 ;
  logic [0:0] _023__X6 ;
  logic [0:0] _023__C6 ;
  assign _023__R6 = fangyuan1_R [40:40] ;
  assign _023__X6 = fangyuan1_X [40:40] ;
  assign _023__C6 = fangyuan1_C [40:40] ;
  logic [0:0] _023__R7 ;
  logic [0:0] _023__X7 ;
  logic [0:0] _023__C7 ;
  assign _023__R7 = fangyuan1_R [39:39] ;
  assign _023__X7 = fangyuan1_X [39:39] ;
  assign _023__C7 = fangyuan1_C [39:39] ;
  logic [0:0] _023__R8 ;
  logic [0:0] _023__X8 ;
  logic [0:0] _023__C8 ;
  assign _023__R8 = fangyuan1_R [38:38] ;
  assign _023__X8 = fangyuan1_X [38:38] ;
  assign _023__C8 = fangyuan1_C [38:38] ;
  logic [0:0] _023__R9 ;
  logic [0:0] _023__X9 ;
  logic [0:0] _023__C9 ;
  assign _023__R9 = fangyuan1_R [37:37] ;
  assign _023__X9 = fangyuan1_X [37:37] ;
  assign _023__C9 = fangyuan1_C [37:37] ;
  logic [0:0] _023__R10 ;
  logic [0:0] _023__X10 ;
  logic [0:0] _023__C10 ;
  assign _023__R10 = fangyuan1_R [36:36] ;
  assign _023__X10 = fangyuan1_X [36:36] ;
  assign _023__C10 = fangyuan1_C [36:36] ;
  logic [0:0] _023__R11 ;
  logic [0:0] _023__X11 ;
  logic [0:0] _023__C11 ;
  assign _023__R11 = fangyuan1_R [35:35] ;
  assign _023__X11 = fangyuan1_X [35:35] ;
  assign _023__C11 = fangyuan1_C [35:35] ;
  logic [0:0] _023__R12 ;
  logic [0:0] _023__X12 ;
  logic [0:0] _023__C12 ;
  assign _023__R12 = fangyuan1_R [34:34] ;
  assign _023__X12 = fangyuan1_X [34:34] ;
  assign _023__C12 = fangyuan1_C [34:34] ;
  logic [0:0] _023__R13 ;
  logic [0:0] _023__X13 ;
  logic [0:0] _023__C13 ;
  assign _023__R13 = fangyuan1_R [33:33] ;
  assign _023__X13 = fangyuan1_X [33:33] ;
  assign _023__C13 = fangyuan1_C [33:33] ;
  logic [0:0] _023__R14 ;
  logic [0:0] _023__X14 ;
  logic [0:0] _023__C14 ;
  assign _023__R14 = fangyuan1_R [32:32] ;
  assign _023__X14 = fangyuan1_X [32:32] ;
  assign _023__C14 = fangyuan1_C [32:32] ;
  logic [0:0] _023__R15 ;
  logic [0:0] _023__X15 ;
  logic [0:0] _023__C15 ;
  assign _023__R15 = fangyuan1_R [31:31] ;
  assign _023__X15 = fangyuan1_X [31:31] ;
  assign _023__C15 = fangyuan1_C [31:31] ;
  logic [0:0] _023__R16 ;
  logic [0:0] _023__X16 ;
  logic [0:0] _023__C16 ;
  assign _023__R16 = fangyuan1_R [30:30] ;
  assign _023__X16 = fangyuan1_X [30:30] ;
  assign _023__C16 = fangyuan1_C [30:30] ;
  logic [0:0] _023__R17 ;
  logic [0:0] _023__X17 ;
  logic [0:0] _023__C17 ;
  assign _023__R17 = fangyuan1_R [29:29] ;
  assign _023__X17 = fangyuan1_X [29:29] ;
  assign _023__C17 = fangyuan1_C [29:29] ;
  logic [0:0] _023__R18 ;
  logic [0:0] _023__X18 ;
  logic [0:0] _023__C18 ;
  assign _023__R18 = fangyuan1_R [28:28] ;
  assign _023__X18 = fangyuan1_X [28:28] ;
  assign _023__C18 = fangyuan1_C [28:28] ;
  logic [0:0] _023__R19 ;
  logic [0:0] _023__X19 ;
  logic [0:0] _023__C19 ;
  assign _023__R19 = fangyuan1_R [27:27] ;
  assign _023__X19 = fangyuan1_X [27:27] ;
  assign _023__C19 = fangyuan1_C [27:27] ;
  logic [0:0] _023__R20 ;
  logic [0:0] _023__X20 ;
  logic [0:0] _023__C20 ;
  assign _023__R20 = fangyuan1_R [26:26] ;
  assign _023__X20 = fangyuan1_X [26:26] ;
  assign _023__C20 = fangyuan1_C [26:26] ;
  logic [0:0] _023__R21 ;
  logic [0:0] _023__X21 ;
  logic [0:0] _023__C21 ;
  assign _023__R21 = fangyuan1_R [25:25] ;
  assign _023__X21 = fangyuan1_X [25:25] ;
  assign _023__C21 = fangyuan1_C [25:25] ;
  logic [0:0] _023__R22 ;
  logic [0:0] _023__X22 ;
  logic [0:0] _023__C22 ;
  assign _023__R22 = fangyuan1_R [24:24] ;
  assign _023__X22 = fangyuan1_X [24:24] ;
  assign _023__C22 = fangyuan1_C [24:24] ;
  logic [0:0] _023__R23 ;
  logic [0:0] _023__X23 ;
  logic [0:0] _023__C23 ;
  assign _023__R23 = fangyuan1_R [23:23] ;
  assign _023__X23 = fangyuan1_X [23:23] ;
  assign _023__C23 = fangyuan1_C [23:23] ;
  logic [0:0] _023__R24 ;
  logic [0:0] _023__X24 ;
  logic [0:0] _023__C24 ;
  assign _023__R24 = fangyuan1_R [22:22] ;
  assign _023__X24 = fangyuan1_X [22:22] ;
  assign _023__C24 = fangyuan1_C [22:22] ;
  logic [0:0] _023__R25 ;
  logic [0:0] _023__X25 ;
  logic [0:0] _023__C25 ;
  assign _023__R25 = fangyuan1_R [21:21] ;
  assign _023__X25 = fangyuan1_X [21:21] ;
  assign _023__C25 = fangyuan1_C [21:21] ;
  logic [0:0] _023__R26 ;
  logic [0:0] _023__X26 ;
  logic [0:0] _023__C26 ;
  assign _023__R26 = fangyuan1_R [20:20] ;
  assign _023__X26 = fangyuan1_X [20:20] ;
  assign _023__C26 = fangyuan1_C [20:20] ;
  logic [0:0] _023__R27 ;
  logic [0:0] _023__X27 ;
  logic [0:0] _023__C27 ;
  assign _023__R27 = fangyuan1_R [19:19] ;
  assign _023__X27 = fangyuan1_X [19:19] ;
  assign _023__C27 = fangyuan1_C [19:19] ;
  logic [0:0] _023__R28 ;
  logic [0:0] _023__X28 ;
  logic [0:0] _023__C28 ;
  assign _023__R28 = fangyuan1_R [18:18] ;
  assign _023__X28 = fangyuan1_X [18:18] ;
  assign _023__C28 = fangyuan1_C [18:18] ;
  logic [0:0] _023__R29 ;
  logic [0:0] _023__X29 ;
  logic [0:0] _023__C29 ;
  assign _023__R29 = fangyuan1_R [17:17] ;
  assign _023__X29 = fangyuan1_X [17:17] ;
  assign _023__C29 = fangyuan1_C [17:17] ;
  logic [0:0] _023__R30 ;
  logic [0:0] _023__X30 ;
  logic [0:0] _023__C30 ;
  assign _023__R30 = fangyuan1_R [16:16] ;
  assign _023__X30 = fangyuan1_X [16:16] ;
  assign _023__C30 = fangyuan1_C [16:16] ;
  logic [0:0] _023__R31 ;
  logic [0:0] _023__X31 ;
  logic [0:0] _023__C31 ;
  assign _023__R31 = fangyuan1_R [15:15] ;
  assign _023__X31 = fangyuan1_X [15:15] ;
  assign _023__C31 = fangyuan1_C [15:15] ;
  logic [0:0] _023__R32 ;
  logic [0:0] _023__X32 ;
  logic [0:0] _023__C32 ;
  assign _023__R32 = fangyuan1_R [14:14] ;
  assign _023__X32 = fangyuan1_X [14:14] ;
  assign _023__C32 = fangyuan1_C [14:14] ;
  logic [0:0] _023__R33 ;
  logic [0:0] _023__X33 ;
  logic [0:0] _023__C33 ;
  assign _023__R33 = fangyuan1_R [13:13] ;
  assign _023__X33 = fangyuan1_X [13:13] ;
  assign _023__C33 = fangyuan1_C [13:13] ;
  logic [0:0] _023__R34 ;
  logic [0:0] _023__X34 ;
  logic [0:0] _023__C34 ;
  assign _023__R34 = fangyuan1_R [12:12] ;
  assign _023__X34 = fangyuan1_X [12:12] ;
  assign _023__C34 = fangyuan1_C [12:12] ;
  logic [0:0] _023__R35 ;
  logic [0:0] _023__X35 ;
  logic [0:0] _023__C35 ;
  assign _023__R35 = fangyuan1_R [11:11] ;
  assign _023__X35 = fangyuan1_X [11:11] ;
  assign _023__C35 = fangyuan1_C [11:11] ;
  logic [0:0] _023__R36 ;
  logic [0:0] _023__X36 ;
  logic [0:0] _023__C36 ;
  assign _023__R36 = fangyuan1_R [10:10] ;
  assign _023__X36 = fangyuan1_X [10:10] ;
  assign _023__C36 = fangyuan1_C [10:10] ;
  logic [0:0] _023__R37 ;
  logic [0:0] _023__X37 ;
  logic [0:0] _023__C37 ;
  assign _023__R37 = fangyuan1_R [9:9] ;
  assign _023__X37 = fangyuan1_X [9:9] ;
  assign _023__C37 = fangyuan1_C [9:9] ;
  logic [0:0] _023__R38 ;
  logic [0:0] _023__X38 ;
  logic [0:0] _023__C38 ;
  assign _023__R38 = fangyuan1_R [8:8] ;
  assign _023__X38 = fangyuan1_X [8:8] ;
  assign _023__C38 = fangyuan1_C [8:8] ;
  logic [0:0] _023__R39 ;
  logic [0:0] _023__X39 ;
  logic [0:0] _023__C39 ;
  assign _023__R39 = fangyuan1_R [7:7] ;
  assign _023__X39 = fangyuan1_X [7:7] ;
  assign _023__C39 = fangyuan1_C [7:7] ;
  logic [0:0] _023__R40 ;
  logic [0:0] _023__X40 ;
  logic [0:0] _023__C40 ;
  assign _023__R40 = fangyuan1_R [6:6] ;
  assign _023__X40 = fangyuan1_X [6:6] ;
  assign _023__C40 = fangyuan1_C [6:6] ;
  logic [0:0] _023__R41 ;
  logic [0:0] _023__X41 ;
  logic [0:0] _023__C41 ;
  assign _023__R41 = fangyuan1_R [5:5] ;
  assign _023__X41 = fangyuan1_X [5:5] ;
  assign _023__C41 = fangyuan1_C [5:5] ;
  logic [0:0] _023__R42 ;
  logic [0:0] _023__X42 ;
  logic [0:0] _023__C42 ;
  assign _023__R42 = fangyuan1_R [4:4] ;
  assign _023__X42 = fangyuan1_X [4:4] ;
  assign _023__C42 = fangyuan1_C [4:4] ;
  logic [0:0] _023__R43 ;
  logic [0:0] _023__X43 ;
  logic [0:0] _023__C43 ;
  assign _023__R43 = fangyuan1_R [3:3] ;
  assign _023__X43 = fangyuan1_X [3:3] ;
  assign _023__C43 = fangyuan1_C [3:3] ;
  logic [0:0] _023__R44 ;
  logic [0:0] _023__X44 ;
  logic [0:0] _023__C44 ;
  assign _023__R44 = fangyuan1_R [2:2] ;
  assign _023__X44 = fangyuan1_X [2:2] ;
  assign _023__C44 = fangyuan1_C [2:2] ;
  logic [0:0] _023__R45 ;
  logic [0:0] _023__X45 ;
  logic [0:0] _023__C45 ;
  assign _023__R45 = fangyuan1_R [1:1] ;
  assign _023__X45 = fangyuan1_X [1:1] ;
  assign _023__C45 = fangyuan1_C [1:1] ;
  logic [0:0] _023__R46 ;
  logic [0:0] _023__X46 ;
  logic [0:0] _023__C46 ;
  assign _023__R46 = fangyuan1_R [0:0] ;
  assign _023__X46 = fangyuan1_X [0:0] ;
  assign _023__C46 = fangyuan1_C [0:0] ;
  logic [46:0] fangyuan2;
  logic [46:0] fangyuan2_T ;
  logic [46:0] fangyuan2_R ;
  logic [46:0] fangyuan2_C ;
  logic [46:0] fangyuan2_X ;
  assign fangyuan2 = { i_hsum_pd[14:0], i_lsum_pd[31:0] };
  assign fangyuan2_T = {  i_hsum_pd_T [14:0] , i_lsum_pd_T [31:0]  };
  logic [13:0] fangyuan2_S ;
  assign fangyuan2_S = 0 ;
  assign i_hsum_pd_R0 [14:0] = fangyuan2_R [46:32] ;
  assign i_hsum_pd_X0 [14:0] = fangyuan2_X [46:32] ;
  assign i_hsum_pd_C0 [14:0] = fangyuan2_C [46:32] ;
  assign i_lsum_pd_R0 [31:0] = fangyuan2_R [31:0] ;
  assign i_lsum_pd_X0 [31:0] = fangyuan2_X [31:0] ;
  assign i_lsum_pd_C0 [31:0] = fangyuan2_C [31:0] ;

  assign i_sat_pd3[46:0] = _029_ ? fangyuan1 : fangyuan2;
  logic [0:0] _029__C0 ;
  logic [0:0] _029__R0 ;
  logic [0:0] _029__X0 ;
  assign _029__C0 = | i_sat_pd3_C [46:0] ;
  assign _029__X0 = | i_sat_pd3_X [46:0] ;
  assign i_sat_pd3_T [46:0] = _029_ ? ( { 47{ _029__T  }} | fangyuan1_T ) : ( { 47{ _029__T  }} | fangyuan2_T );
  assign i_sat_pd3_S = _029_ ? fangyuan1_S : fangyuan2_S ;
  assign _029__R0 = ( | (i_sat_pd3_R [46:0] | ( i_sat_pd3_C [46:0] & ( { 47{ _029_ }} & fangyuan1_T | { 47{ !_029_ }} & fangyuan2_T )))) && fangyuan1 != fangyuan2 ;
  logic [46:0] fangyuan1_C0 ;
  logic [46:0] fangyuan1_R0 ;
  logic [46:0] fangyuan1_X0 ;
  assign fangyuan1_C0 = { 47{ _029_ }} ;
  assign fangyuan1_R0 = { 47{ _029_ }} & ( i_sat_pd3_R [46:0] | ( { 47{ _029__T  }} & i_sat_pd3_C [46:0] ));
  assign fangyuan1_X0 = { 47{ _029_ }} & i_sat_pd3_X [46:0] ;
  logic [46:0] fangyuan2_C0 ;
  logic [46:0] fangyuan2_R0 ;
  logic [46:0] fangyuan2_X0 ;
  assign fangyuan2_C0 = { 47{ !_029_ }} ;
  assign fangyuan2_R0 = { 47{ !_029_ }} & ( i_sat_pd3_R [46:0] | ( { 47{ _029__T  }} & i_sat_pd3_C [46:0] ));
  assign fangyuan2_X0 = { 47{ !_029_ }} & i_sat_pd3_X [46:0] ;
  logic [15:0] fangyuan3;
  logic [15:0] fangyuan3_T ;
  logic [15:0] fangyuan3_R ;
  logic [15:0] fangyuan3_C ;
  logic [15:0] fangyuan3_X ;
  assign fangyuan3 = { _022_, _022_, _022_, _022_, _022_, _022_, _022_, _022_, _022_, _022_, _022_, _022_, _022_, _022_, _022_, _022_ };
  assign fangyuan3_T = {  _022__T , _022__T , _022__T , _022__T , _022__T , _022__T , _022__T , _022__T , _022__T , _022__T , _022__T , _022__T , _022__T , _022__T , _022__T , _022__T  };
  logic [13:0] fangyuan3_S ;
  assign fangyuan3_S = 0 ;
  logic [0:0] _022__R0 ;
  logic [0:0] _022__X0 ;
  logic [0:0] _022__C0 ;
  assign _022__R0 = fangyuan3_R [15:15] ;
  assign _022__X0 = fangyuan3_X [15:15] ;
  assign _022__C0 = fangyuan3_C [15:15] ;
  logic [0:0] _022__R1 ;
  logic [0:0] _022__X1 ;
  logic [0:0] _022__C1 ;
  assign _022__R1 = fangyuan3_R [14:14] ;
  assign _022__X1 = fangyuan3_X [14:14] ;
  assign _022__C1 = fangyuan3_C [14:14] ;
  logic [0:0] _022__R2 ;
  logic [0:0] _022__X2 ;
  logic [0:0] _022__C2 ;
  assign _022__R2 = fangyuan3_R [13:13] ;
  assign _022__X2 = fangyuan3_X [13:13] ;
  assign _022__C2 = fangyuan3_C [13:13] ;
  logic [0:0] _022__R3 ;
  logic [0:0] _022__X3 ;
  logic [0:0] _022__C3 ;
  assign _022__R3 = fangyuan3_R [12:12] ;
  assign _022__X3 = fangyuan3_X [12:12] ;
  assign _022__C3 = fangyuan3_C [12:12] ;
  logic [0:0] _022__R4 ;
  logic [0:0] _022__X4 ;
  logic [0:0] _022__C4 ;
  assign _022__R4 = fangyuan3_R [11:11] ;
  assign _022__X4 = fangyuan3_X [11:11] ;
  assign _022__C4 = fangyuan3_C [11:11] ;
  logic [0:0] _022__R5 ;
  logic [0:0] _022__X5 ;
  logic [0:0] _022__C5 ;
  assign _022__R5 = fangyuan3_R [10:10] ;
  assign _022__X5 = fangyuan3_X [10:10] ;
  assign _022__C5 = fangyuan3_C [10:10] ;
  logic [0:0] _022__R6 ;
  logic [0:0] _022__X6 ;
  logic [0:0] _022__C6 ;
  assign _022__R6 = fangyuan3_R [9:9] ;
  assign _022__X6 = fangyuan3_X [9:9] ;
  assign _022__C6 = fangyuan3_C [9:9] ;
  logic [0:0] _022__R7 ;
  logic [0:0] _022__X7 ;
  logic [0:0] _022__C7 ;
  assign _022__R7 = fangyuan3_R [8:8] ;
  assign _022__X7 = fangyuan3_X [8:8] ;
  assign _022__C7 = fangyuan3_C [8:8] ;
  logic [0:0] _022__R8 ;
  logic [0:0] _022__X8 ;
  logic [0:0] _022__C8 ;
  assign _022__R8 = fangyuan3_R [7:7] ;
  assign _022__X8 = fangyuan3_X [7:7] ;
  assign _022__C8 = fangyuan3_C [7:7] ;
  logic [0:0] _022__R9 ;
  logic [0:0] _022__X9 ;
  logic [0:0] _022__C9 ;
  assign _022__R9 = fangyuan3_R [6:6] ;
  assign _022__X9 = fangyuan3_X [6:6] ;
  assign _022__C9 = fangyuan3_C [6:6] ;
  logic [0:0] _022__R10 ;
  logic [0:0] _022__X10 ;
  logic [0:0] _022__C10 ;
  assign _022__R10 = fangyuan3_R [5:5] ;
  assign _022__X10 = fangyuan3_X [5:5] ;
  assign _022__C10 = fangyuan3_C [5:5] ;
  logic [0:0] _022__R11 ;
  logic [0:0] _022__X11 ;
  logic [0:0] _022__C11 ;
  assign _022__R11 = fangyuan3_R [4:4] ;
  assign _022__X11 = fangyuan3_X [4:4] ;
  assign _022__C11 = fangyuan3_C [4:4] ;
  logic [0:0] _022__R12 ;
  logic [0:0] _022__X12 ;
  logic [0:0] _022__C12 ;
  assign _022__R12 = fangyuan3_R [3:3] ;
  assign _022__X12 = fangyuan3_X [3:3] ;
  assign _022__C12 = fangyuan3_C [3:3] ;
  logic [0:0] _022__R13 ;
  logic [0:0] _022__X13 ;
  logic [0:0] _022__C13 ;
  assign _022__R13 = fangyuan3_R [2:2] ;
  assign _022__X13 = fangyuan3_X [2:2] ;
  assign _022__C13 = fangyuan3_C [2:2] ;
  logic [0:0] _022__R14 ;
  logic [0:0] _022__X14 ;
  logic [0:0] _022__C14 ;
  assign _022__R14 = fangyuan3_R [1:1] ;
  assign _022__X14 = fangyuan3_X [1:1] ;
  assign _022__C14 = fangyuan3_C [1:1] ;
  logic [0:0] _022__R15 ;
  logic [0:0] _022__X15 ;
  logic [0:0] _022__C15 ;
  assign _022__R15 = fangyuan3_R [0:0] ;
  assign _022__X15 = fangyuan3_X [0:0] ;
  assign _022__C15 = fangyuan3_C [0:0] ;
  logic [15:0] fangyuan4;
  logic [15:0] fangyuan4_T ;
  logic [15:0] fangyuan4_R ;
  logic [15:0] fangyuan4_C ;
  logic [15:0] fangyuan4_X ;
  assign fangyuan4 = { oi_sign_d, oi_sign_d, oi_sign_d, oi_sign_d, oi_sign_d, oi_sign_d, oi_sign_d, oi_sign_d, oi_sign_d, oi_sign_d, oi_sign_d, oi_sign_d, oi_sign_d, oi_sign_d, oi_sign_d, i_lsum_pd[32] };
  assign fangyuan4_T = {  oi_sign_d_T , oi_sign_d_T , oi_sign_d_T , oi_sign_d_T , oi_sign_d_T , oi_sign_d_T , oi_sign_d_T , oi_sign_d_T , oi_sign_d_T , oi_sign_d_T , oi_sign_d_T , oi_sign_d_T , oi_sign_d_T , oi_sign_d_T , oi_sign_d_T , i_lsum_pd_T [32]  };
  logic [13:0] fangyuan4_S ;
  assign fangyuan4_S = 0 ;
  logic [0:0] oi_sign_d_R0 ;
  logic [0:0] oi_sign_d_X0 ;
  logic [0:0] oi_sign_d_C0 ;
  assign oi_sign_d_R0 = fangyuan4_R [15:15] ;
  assign oi_sign_d_X0 = fangyuan4_X [15:15] ;
  assign oi_sign_d_C0 = fangyuan4_C [15:15] ;
  logic [0:0] oi_sign_d_R1 ;
  logic [0:0] oi_sign_d_X1 ;
  logic [0:0] oi_sign_d_C1 ;
  assign oi_sign_d_R1 = fangyuan4_R [14:14] ;
  assign oi_sign_d_X1 = fangyuan4_X [14:14] ;
  assign oi_sign_d_C1 = fangyuan4_C [14:14] ;
  logic [0:0] oi_sign_d_R2 ;
  logic [0:0] oi_sign_d_X2 ;
  logic [0:0] oi_sign_d_C2 ;
  assign oi_sign_d_R2 = fangyuan4_R [13:13] ;
  assign oi_sign_d_X2 = fangyuan4_X [13:13] ;
  assign oi_sign_d_C2 = fangyuan4_C [13:13] ;
  logic [0:0] oi_sign_d_R3 ;
  logic [0:0] oi_sign_d_X3 ;
  logic [0:0] oi_sign_d_C3 ;
  assign oi_sign_d_R3 = fangyuan4_R [12:12] ;
  assign oi_sign_d_X3 = fangyuan4_X [12:12] ;
  assign oi_sign_d_C3 = fangyuan4_C [12:12] ;
  logic [0:0] oi_sign_d_R4 ;
  logic [0:0] oi_sign_d_X4 ;
  logic [0:0] oi_sign_d_C4 ;
  assign oi_sign_d_R4 = fangyuan4_R [11:11] ;
  assign oi_sign_d_X4 = fangyuan4_X [11:11] ;
  assign oi_sign_d_C4 = fangyuan4_C [11:11] ;
  logic [0:0] oi_sign_d_R5 ;
  logic [0:0] oi_sign_d_X5 ;
  logic [0:0] oi_sign_d_C5 ;
  assign oi_sign_d_R5 = fangyuan4_R [10:10] ;
  assign oi_sign_d_X5 = fangyuan4_X [10:10] ;
  assign oi_sign_d_C5 = fangyuan4_C [10:10] ;
  logic [0:0] oi_sign_d_R6 ;
  logic [0:0] oi_sign_d_X6 ;
  logic [0:0] oi_sign_d_C6 ;
  assign oi_sign_d_R6 = fangyuan4_R [9:9] ;
  assign oi_sign_d_X6 = fangyuan4_X [9:9] ;
  assign oi_sign_d_C6 = fangyuan4_C [9:9] ;
  logic [0:0] oi_sign_d_R7 ;
  logic [0:0] oi_sign_d_X7 ;
  logic [0:0] oi_sign_d_C7 ;
  assign oi_sign_d_R7 = fangyuan4_R [8:8] ;
  assign oi_sign_d_X7 = fangyuan4_X [8:8] ;
  assign oi_sign_d_C7 = fangyuan4_C [8:8] ;
  logic [0:0] oi_sign_d_R8 ;
  logic [0:0] oi_sign_d_X8 ;
  logic [0:0] oi_sign_d_C8 ;
  assign oi_sign_d_R8 = fangyuan4_R [7:7] ;
  assign oi_sign_d_X8 = fangyuan4_X [7:7] ;
  assign oi_sign_d_C8 = fangyuan4_C [7:7] ;
  logic [0:0] oi_sign_d_R9 ;
  logic [0:0] oi_sign_d_X9 ;
  logic [0:0] oi_sign_d_C9 ;
  assign oi_sign_d_R9 = fangyuan4_R [6:6] ;
  assign oi_sign_d_X9 = fangyuan4_X [6:6] ;
  assign oi_sign_d_C9 = fangyuan4_C [6:6] ;
  logic [0:0] oi_sign_d_R10 ;
  logic [0:0] oi_sign_d_X10 ;
  logic [0:0] oi_sign_d_C10 ;
  assign oi_sign_d_R10 = fangyuan4_R [5:5] ;
  assign oi_sign_d_X10 = fangyuan4_X [5:5] ;
  assign oi_sign_d_C10 = fangyuan4_C [5:5] ;
  logic [0:0] oi_sign_d_R11 ;
  logic [0:0] oi_sign_d_X11 ;
  logic [0:0] oi_sign_d_C11 ;
  assign oi_sign_d_R11 = fangyuan4_R [4:4] ;
  assign oi_sign_d_X11 = fangyuan4_X [4:4] ;
  assign oi_sign_d_C11 = fangyuan4_C [4:4] ;
  logic [0:0] oi_sign_d_R12 ;
  logic [0:0] oi_sign_d_X12 ;
  logic [0:0] oi_sign_d_C12 ;
  assign oi_sign_d_R12 = fangyuan4_R [3:3] ;
  assign oi_sign_d_X12 = fangyuan4_X [3:3] ;
  assign oi_sign_d_C12 = fangyuan4_C [3:3] ;
  logic [0:0] oi_sign_d_R13 ;
  logic [0:0] oi_sign_d_X13 ;
  logic [0:0] oi_sign_d_C13 ;
  assign oi_sign_d_R13 = fangyuan4_R [2:2] ;
  assign oi_sign_d_X13 = fangyuan4_X [2:2] ;
  assign oi_sign_d_C13 = fangyuan4_C [2:2] ;
  logic [0:0] oi_sign_d_R14 ;
  logic [0:0] oi_sign_d_X14 ;
  logic [0:0] oi_sign_d_C14 ;
  assign oi_sign_d_R14 = fangyuan4_R [1:1] ;
  assign oi_sign_d_X14 = fangyuan4_X [1:1] ;
  assign oi_sign_d_C14 = fangyuan4_C [1:1] ;
  logic [32:0] i_lsum_pd_R1 ;
  logic [32:0] i_lsum_pd_X1 ;
  logic [32:0] i_lsum_pd_C1 ;
  assign i_lsum_pd_R1 [32:32] = fangyuan4_R [0:0] ;
  assign i_lsum_pd_X1 [32:32] = fangyuan4_X [0:0] ;
  assign i_lsum_pd_C1 [32:32] = fangyuan4_C [0:0] ;

  assign i_hsame_sign = _030_ ? fangyuan3 : fangyuan4;
  logic [0:0] _030__C0 ;
  logic [0:0] _030__R0 ;
  logic [0:0] _030__X0 ;
  assign _030__C0 = | i_hsame_sign_C ;
  assign _030__X0 = | i_hsame_sign_X ;
  assign i_hsame_sign_T = _030_ ? ( { 16{ _030__T  }} | fangyuan3_T ) : ( { 16{ _030__T  }} | fangyuan4_T );
  assign i_hsame_sign_S = _030_ ? fangyuan3_S : fangyuan4_S ;
  assign _030__R0 = ( | (i_hsame_sign_R | ( i_hsame_sign_C & ( { 16{ _030_ }} & fangyuan3_T | { 16{ !_030_ }} & fangyuan4_T )))) && fangyuan3 != fangyuan4 ;
  logic [15:0] fangyuan3_C0 ;
  logic [15:0] fangyuan3_R0 ;
  logic [15:0] fangyuan3_X0 ;
  assign fangyuan3_C0 = { 16{ _030_ }} ;
  assign fangyuan3_R0 = { 16{ _030_ }} & ( i_hsame_sign_R | ( { 16{ _030__T  }} & i_hsame_sign_C ));
  assign fangyuan3_X0 = { 16{ _030_ }} & i_hsame_sign_X ;
  logic [15:0] fangyuan4_C0 ;
  logic [15:0] fangyuan4_R0 ;
  logic [15:0] fangyuan4_X0 ;
  assign fangyuan4_C0 = { 16{ !_030_ }} ;
  assign fangyuan4_R0 = { 16{ !_030_ }} & ( i_hsame_sign_R | ( { 16{ _030__T  }} & i_hsame_sign_C ));
  assign fangyuan4_X0 = { 16{ !_030_ }} & i_hsame_sign_X ;
  assign _001_ = _010_ ? i_hsum_pd_nxt : i_hsum_pd;
  logic [0:0] _010__C0 ;
  logic [0:0] _010__R0 ;
  logic [0:0] _010__X0 ;
  assign _010__C0 = | _001__C ;
  assign _010__X0 = | _001__X ;
  assign _001__T = _010_ ? ( { 17{ _010__T  }} | i_hsum_pd_nxt_T ) : ( { 17{ _010__T  }} | i_hsum_pd_T );
  assign _001__S = _010_ ? i_hsum_pd_nxt_S : i_hsum_pd_S ;
  assign _010__R0 = ( | (_001__R | ( _001__C & ( { 17{ _010_ }} & i_hsum_pd_nxt_T | { 17{ !_010_ }} & i_hsum_pd_T )))) && i_hsum_pd_nxt != i_hsum_pd ;
  assign { i_hsum_pd_R0 [15] } = 0;
  assign { i_hsum_pd_X0 [15] } = 0;
  assign { i_hsum_pd_C0 [15] } = 0;
  logic [16:0] i_hsum_pd_nxt_C0 ;
  logic [16:0] i_hsum_pd_nxt_R0 ;
  logic [16:0] i_hsum_pd_nxt_X0 ;
  assign i_hsum_pd_nxt_C0 = { 17{ _010_ }} ;
  assign i_hsum_pd_nxt_R0 = { 17{ _010_ }} & ( _001__R | ( { 17{ _010__T  }} & _001__C ));
  assign i_hsum_pd_nxt_X0 = { 17{ _010_ }} & _001__X ;
  logic [16:0] i_hsum_pd_C1 ;
  logic [16:0] i_hsum_pd_R1 ;
  logic [16:0] i_hsum_pd_X1 ;
  assign i_hsum_pd_C1 = { 17{ !_010_ }} ;
  assign i_hsum_pd_R1 = { 17{ !_010_ }} & ( _001__R | ( { 17{ _010__T  }} & _001__C ));
  assign i_hsum_pd_X1 = { 17{ !_010_ }} & _001__X ;
  assign _002_ = in_valid ? i_lsum_pd_nxt : i_lsum_pd;
  logic [0:0] in_valid_C2 ;
  logic [0:0] in_valid_R2 ;
  logic [0:0] in_valid_X2 ;
  assign in_valid_C2 = | _002__C ;
  assign in_valid_X2 = | _002__X ;
  assign _002__T = in_valid ? ( { 33{ in_valid_T  }} | i_lsum_pd_nxt_T ) : ( { 33{ in_valid_T  }} | i_lsum_pd_T );
  assign _002__S = in_valid ? i_lsum_pd_nxt_S : i_lsum_pd_S ;
  assign in_valid_R2 = ( | (_002__R | ( _002__C & ( { 33{ in_valid }} & i_lsum_pd_nxt_T | { 33{ !in_valid }} & i_lsum_pd_T )))) && i_lsum_pd_nxt != i_lsum_pd ;
  assign { i_lsum_pd_R1 [0], i_lsum_pd_R1 [1], i_lsum_pd_R1 [2], i_lsum_pd_R1 [3], i_lsum_pd_R1 [4], i_lsum_pd_R1 [5], i_lsum_pd_R1 [6], i_lsum_pd_R1 [7], i_lsum_pd_R1 [8], i_lsum_pd_R1 [9], i_lsum_pd_R1 [10], i_lsum_pd_R1 [11], i_lsum_pd_R1 [12], i_lsum_pd_R1 [13], i_lsum_pd_R1 [14], i_lsum_pd_R1 [15], i_lsum_pd_R1 [16], i_lsum_pd_R1 [17], i_lsum_pd_R1 [18], i_lsum_pd_R1 [19], i_lsum_pd_R1 [20], i_lsum_pd_R1 [21], i_lsum_pd_R1 [22], i_lsum_pd_R1 [23], i_lsum_pd_R1 [24], i_lsum_pd_R1 [25], i_lsum_pd_R1 [26], i_lsum_pd_R1 [27], i_lsum_pd_R1 [28], i_lsum_pd_R1 [29], i_lsum_pd_R1 [30], i_lsum_pd_R1 [31] } = 0;
  assign { i_lsum_pd_X1 [0], i_lsum_pd_X1 [1], i_lsum_pd_X1 [2], i_lsum_pd_X1 [3], i_lsum_pd_X1 [4], i_lsum_pd_X1 [5], i_lsum_pd_X1 [6], i_lsum_pd_X1 [7], i_lsum_pd_X1 [8], i_lsum_pd_X1 [9], i_lsum_pd_X1 [10], i_lsum_pd_X1 [11], i_lsum_pd_X1 [12], i_lsum_pd_X1 [13], i_lsum_pd_X1 [14], i_lsum_pd_X1 [15], i_lsum_pd_X1 [16], i_lsum_pd_X1 [17], i_lsum_pd_X1 [18], i_lsum_pd_X1 [19], i_lsum_pd_X1 [20], i_lsum_pd_X1 [21], i_lsum_pd_X1 [22], i_lsum_pd_X1 [23], i_lsum_pd_X1 [24], i_lsum_pd_X1 [25], i_lsum_pd_X1 [26], i_lsum_pd_X1 [27], i_lsum_pd_X1 [28], i_lsum_pd_X1 [29], i_lsum_pd_X1 [30], i_lsum_pd_X1 [31] } = 0;
  assign { i_lsum_pd_C1 [0], i_lsum_pd_C1 [1], i_lsum_pd_C1 [2], i_lsum_pd_C1 [3], i_lsum_pd_C1 [4], i_lsum_pd_C1 [5], i_lsum_pd_C1 [6], i_lsum_pd_C1 [7], i_lsum_pd_C1 [8], i_lsum_pd_C1 [9], i_lsum_pd_C1 [10], i_lsum_pd_C1 [11], i_lsum_pd_C1 [12], i_lsum_pd_C1 [13], i_lsum_pd_C1 [14], i_lsum_pd_C1 [15], i_lsum_pd_C1 [16], i_lsum_pd_C1 [17], i_lsum_pd_C1 [18], i_lsum_pd_C1 [19], i_lsum_pd_C1 [20], i_lsum_pd_C1 [21], i_lsum_pd_C1 [22], i_lsum_pd_C1 [23], i_lsum_pd_C1 [24], i_lsum_pd_C1 [25], i_lsum_pd_C1 [26], i_lsum_pd_C1 [27], i_lsum_pd_C1 [28], i_lsum_pd_C1 [29], i_lsum_pd_C1 [30], i_lsum_pd_C1 [31] } = 0;
  logic [32:0] i_lsum_pd_nxt_C0 ;
  logic [32:0] i_lsum_pd_nxt_R0 ;
  logic [32:0] i_lsum_pd_nxt_X0 ;
  assign i_lsum_pd_nxt_C0 = { 33{ in_valid }} ;
  assign i_lsum_pd_nxt_R0 = { 33{ in_valid }} & ( _002__R | ( { 33{ in_valid_T  }} & _002__C ));
  assign i_lsum_pd_nxt_X0 = { 33{ in_valid }} & _002__X ;
  logic [32:0] i_lsum_pd_C2 ;
  logic [32:0] i_lsum_pd_R2 ;
  logic [32:0] i_lsum_pd_X2 ;
  assign i_lsum_pd_C2 = { 33{ !in_valid }} ;
  assign i_lsum_pd_R2 = { 33{ !in_valid }} & ( _002__R | ( { 33{ in_valid_T  }} & _002__C ));
  assign i_lsum_pd_X2 = { 33{ !in_valid }} & _002__X ;
  assign _004_ = in_valid ? in_hsb_same : in_hsb_same_d;
  logic [0:0] in_valid_C3 ;
  logic [0:0] in_valid_R3 ;
  logic [0:0] in_valid_X3 ;
  assign in_valid_C3 = | _004__C ;
  assign in_valid_X3 = | _004__X ;
  assign _004__T = in_valid ? ( { 1{ in_valid_T  }} | in_hsb_same_T ) : ( { 1{ in_valid_T  }} | in_hsb_same_d_T );
  assign _004__S = in_valid ? in_hsb_same_S : in_hsb_same_d_S ;
  assign in_valid_R3 = ( | (_004__R | ( _004__C & ( { 1{ in_valid }} & in_hsb_same_T | { 1{ !in_valid }} & in_hsb_same_d_T )))) && in_hsb_same != in_hsb_same_d ;
  logic [0:0] in_hsb_same_C1 ;
  logic [0:0] in_hsb_same_R1 ;
  logic [0:0] in_hsb_same_X1 ;
  assign in_hsb_same_C1 = { 1{ in_valid }} ;
  assign in_hsb_same_R1 = { 1{ in_valid }} & ( _004__R | ( { 1{ in_valid_T  }} & _004__C ));
  assign in_hsb_same_X1 = { 1{ in_valid }} & _004__X ;
  logic [0:0] in_hsb_same_d_C0 ;
  logic [0:0] in_hsb_same_d_R0 ;
  logic [0:0] in_hsb_same_d_X0 ;
  assign in_hsb_same_d_C0 = { 1{ !in_valid }} ;
  assign in_hsb_same_d_R0 = { 1{ !in_valid }} & ( _004__R | ( { 1{ in_valid_T  }} & _004__C ));
  assign in_hsb_same_d_X0 = { 1{ !in_valid }} & _004__X ;
  assign _005_ = in_valid ? in_mask_op[47] : oi_sign_d;
  logic [0:0] in_valid_C4 ;
  logic [0:0] in_valid_R4 ;
  logic [0:0] in_valid_X4 ;
  assign in_valid_C4 = | _005__C ;
  assign in_valid_X4 = | _005__X ;
  assign _005__T = in_valid ? ( { 1{ in_valid_T  }} | in_mask_op_T [47] ) : ( { 1{ in_valid_T  }} | oi_sign_d_T );
  assign _005__S = in_valid ? in_mask_op_S : oi_sign_d_S ;
  assign in_valid_R4 = ( | (_005__R | ( _005__C & ( { 1{ in_valid }} & in_mask_op_T [47] | { 1{ !in_valid }} & oi_sign_d_T )))) && in_mask_op[47] != oi_sign_d ;
  assign { in_mask_op_R1 [0], in_mask_op_R1 [1], in_mask_op_R1 [2], in_mask_op_R1 [3], in_mask_op_R1 [4], in_mask_op_R1 [5], in_mask_op_R1 [6], in_mask_op_R1 [7], in_mask_op_R1 [8], in_mask_op_R1 [9], in_mask_op_R1 [10], in_mask_op_R1 [11], in_mask_op_R1 [12], in_mask_op_R1 [13], in_mask_op_R1 [14], in_mask_op_R1 [15], in_mask_op_R1 [16], in_mask_op_R1 [17], in_mask_op_R1 [18], in_mask_op_R1 [19], in_mask_op_R1 [20], in_mask_op_R1 [21], in_mask_op_R1 [22], in_mask_op_R1 [23], in_mask_op_R1 [24], in_mask_op_R1 [25], in_mask_op_R1 [26], in_mask_op_R1 [27], in_mask_op_R1 [28], in_mask_op_R1 [29], in_mask_op_R1 [30], in_mask_op_R1 [31] } = 0;
  assign { in_mask_op_X1 [0], in_mask_op_X1 [1], in_mask_op_X1 [2], in_mask_op_X1 [3], in_mask_op_X1 [4], in_mask_op_X1 [5], in_mask_op_X1 [6], in_mask_op_X1 [7], in_mask_op_X1 [8], in_mask_op_X1 [9], in_mask_op_X1 [10], in_mask_op_X1 [11], in_mask_op_X1 [12], in_mask_op_X1 [13], in_mask_op_X1 [14], in_mask_op_X1 [15], in_mask_op_X1 [16], in_mask_op_X1 [17], in_mask_op_X1 [18], in_mask_op_X1 [19], in_mask_op_X1 [20], in_mask_op_X1 [21], in_mask_op_X1 [22], in_mask_op_X1 [23], in_mask_op_X1 [24], in_mask_op_X1 [25], in_mask_op_X1 [26], in_mask_op_X1 [27], in_mask_op_X1 [28], in_mask_op_X1 [29], in_mask_op_X1 [30], in_mask_op_X1 [31] } = 0;
  assign { in_mask_op_C1 [0], in_mask_op_C1 [1], in_mask_op_C1 [2], in_mask_op_C1 [3], in_mask_op_C1 [4], in_mask_op_C1 [5], in_mask_op_C1 [6], in_mask_op_C1 [7], in_mask_op_C1 [8], in_mask_op_C1 [9], in_mask_op_C1 [10], in_mask_op_C1 [11], in_mask_op_C1 [12], in_mask_op_C1 [13], in_mask_op_C1 [14], in_mask_op_C1 [15], in_mask_op_C1 [16], in_mask_op_C1 [17], in_mask_op_C1 [18], in_mask_op_C1 [19], in_mask_op_C1 [20], in_mask_op_C1 [21], in_mask_op_C1 [22], in_mask_op_C1 [23], in_mask_op_C1 [24], in_mask_op_C1 [25], in_mask_op_C1 [26], in_mask_op_C1 [27], in_mask_op_C1 [28], in_mask_op_C1 [29], in_mask_op_C1 [30], in_mask_op_C1 [31] } = 0;
  logic [47:0] in_mask_op_C2 ;
  logic [47:0] in_mask_op_R2 ;
  logic [47:0] in_mask_op_X2 ;
  assign in_mask_op_C2 [47] = { 1{ in_valid }} ;
  assign in_mask_op_R2 [47] = { 1{ in_valid }} & ( _005__R | ( { 1{ in_valid_T  }} & _005__C ));
  assign in_mask_op_X2 [47] = { 1{ in_valid }} & _005__X ;
  logic [0:0] oi_sign_d_C15 ;
  logic [0:0] oi_sign_d_R15 ;
  logic [0:0] oi_sign_d_X15 ;
  assign oi_sign_d_C15 = { 1{ !in_valid }} ;
  assign oi_sign_d_R15 = { 1{ !in_valid }} & ( _005__R | ( { 1{ in_valid_T  }} & _005__C ));
  assign oi_sign_d_X15 = { 1{ !in_valid }} & _005__X ;
  assign _000_ = in_valid ? in_data[37] : di_sign_d;
  logic [0:0] in_valid_C5 ;
  logic [0:0] in_valid_R5 ;
  logic [0:0] in_valid_X5 ;
  assign in_valid_C5 = | _000__C ;
  assign in_valid_X5 = | _000__X ;
  assign _000__T = in_valid ? ( { 1{ in_valid_T  }} | in_data_T [37] ) : ( { 1{ in_valid_T  }} | di_sign_d_T );
  assign _000__S = in_valid ? in_data_S : di_sign_d_S ;
  assign in_valid_R5 = ( | (_000__R | ( _000__C & ( { 1{ in_valid }} & in_data_T [37] | { 1{ !in_valid }} & di_sign_d_T )))) && in_data[37] != di_sign_d ;
  assign { in_data_R1 [0], in_data_R1 [1], in_data_R1 [2], in_data_R1 [3], in_data_R1 [4], in_data_R1 [5], in_data_R1 [6], in_data_R1 [7], in_data_R1 [8], in_data_R1 [9], in_data_R1 [10], in_data_R1 [11], in_data_R1 [12], in_data_R1 [13], in_data_R1 [14], in_data_R1 [15], in_data_R1 [16], in_data_R1 [17], in_data_R1 [18], in_data_R1 [19], in_data_R1 [20], in_data_R1 [21], in_data_R1 [22], in_data_R1 [23], in_data_R1 [24], in_data_R1 [25], in_data_R1 [26], in_data_R1 [27], in_data_R1 [28], in_data_R1 [29], in_data_R1 [30], in_data_R1 [31] } = 0;
  assign { in_data_X1 [0], in_data_X1 [1], in_data_X1 [2], in_data_X1 [3], in_data_X1 [4], in_data_X1 [5], in_data_X1 [6], in_data_X1 [7], in_data_X1 [8], in_data_X1 [9], in_data_X1 [10], in_data_X1 [11], in_data_X1 [12], in_data_X1 [13], in_data_X1 [14], in_data_X1 [15], in_data_X1 [16], in_data_X1 [17], in_data_X1 [18], in_data_X1 [19], in_data_X1 [20], in_data_X1 [21], in_data_X1 [22], in_data_X1 [23], in_data_X1 [24], in_data_X1 [25], in_data_X1 [26], in_data_X1 [27], in_data_X1 [28], in_data_X1 [29], in_data_X1 [30], in_data_X1 [31] } = 0;
  assign { in_data_C1 [0], in_data_C1 [1], in_data_C1 [2], in_data_C1 [3], in_data_C1 [4], in_data_C1 [5], in_data_C1 [6], in_data_C1 [7], in_data_C1 [8], in_data_C1 [9], in_data_C1 [10], in_data_C1 [11], in_data_C1 [12], in_data_C1 [13], in_data_C1 [14], in_data_C1 [15], in_data_C1 [16], in_data_C1 [17], in_data_C1 [18], in_data_C1 [19], in_data_C1 [20], in_data_C1 [21], in_data_C1 [22], in_data_C1 [23], in_data_C1 [24], in_data_C1 [25], in_data_C1 [26], in_data_C1 [27], in_data_C1 [28], in_data_C1 [29], in_data_C1 [30], in_data_C1 [31] } = 0;
  logic [37:0] in_data_C2 ;
  logic [37:0] in_data_R2 ;
  logic [37:0] in_data_X2 ;
  assign in_data_C2 [37] = { 1{ in_valid }} ;
  assign in_data_R2 [37] = { 1{ in_valid }} & ( _000__R | ( { 1{ in_valid_T  }} & _000__C ));
  assign in_data_X2 [37] = { 1{ in_valid }} & _000__X ;
  logic [0:0] di_sign_d_C0 ;
  logic [0:0] di_sign_d_R0 ;
  logic [0:0] di_sign_d_X0 ;
  assign di_sign_d_C0 = { 1{ !in_valid }} ;
  assign di_sign_d_R0 = { 1{ !in_valid }} & ( _000__R | ( { 1{ in_valid_T  }} & _000__C ));
  assign di_sign_d_X0 = { 1{ !in_valid }} & _000__X ;
  assign _003_ = in_valid ? in_sel : i_sat_sel;
  logic [0:0] in_valid_C6 ;
  logic [0:0] in_valid_R6 ;
  logic [0:0] in_valid_X6 ;
  assign in_valid_C6 = | _003__C ;
  assign in_valid_X6 = | _003__X ;
  assign _003__T = in_valid ? ( { 1{ in_valid_T  }} | in_sel_T ) : ( { 1{ in_valid_T  }} | i_sat_sel_T );
  assign _003__S = in_valid ? in_sel_S : i_sat_sel_S ;
  assign in_valid_R6 = ( | (_003__R | ( _003__C & ( { 1{ in_valid }} & in_sel_T | { 1{ !in_valid }} & i_sat_sel_T )))) && in_sel != i_sat_sel ;
  logic [0:0] in_sel_C0 ;
  logic [0:0] in_sel_R0 ;
  logic [0:0] in_sel_X0 ;
  assign in_sel_C0 = { 1{ in_valid }} ;
  assign in_sel_R0 = { 1{ in_valid }} & ( _003__R | ( { 1{ in_valid_T  }} & _003__C ));
  assign in_sel_X0 = { 1{ in_valid }} & _003__X ;
  logic [0:0] i_sat_sel_C3 ;
  logic [0:0] i_sat_sel_R3 ;
  logic [0:0] i_sat_sel_X3 ;
  assign i_sat_sel_C3 = { 1{ !in_valid }} ;
  assign i_sat_sel_R3 = { 1{ !in_valid }} & ( _003__R | ( { 1{ in_valid_T  }} & _003__C ));
  assign i_sat_sel_X3 = { 1{ !in_valid }} & _003__X ;
  logic [15:0] fangyuan5;
  logic [15:0] fangyuan5_T ;
  logic [15:0] fangyuan5_R ;
  logic [15:0] fangyuan5_C ;
  logic [15:0] fangyuan5_X ;
  assign fangyuan5 = { i_sft_pd[31], i_sft_pd[32], i_sft_pd[33], i_sft_pd[34], i_sft_pd[35], i_sft_pd[36], i_sft_pd[37], i_sft_pd[38], i_sft_pd[39], i_sft_pd[40], i_sft_pd[41], i_sft_pd[42], i_sft_pd[43], i_sft_pd[44], i_sft_pd[45], i_sft_pd[46] };
  assign fangyuan5_T = {  i_sft_pd_T [31] , i_sft_pd_T [32] , i_sft_pd_T [33] , i_sft_pd_T [34] , i_sft_pd_T [35] , i_sft_pd_T [36] , i_sft_pd_T [37] , i_sft_pd_T [38] , i_sft_pd_T [39] , i_sft_pd_T [40] , i_sft_pd_T [41] , i_sft_pd_T [42] , i_sft_pd_T [43] , i_sft_pd_T [44] , i_sft_pd_T [45] , i_sft_pd_T [46]  };
  logic [13:0] fangyuan5_S ;
  assign fangyuan5_S = 0 ;
  assign { i_sft_pd_R0 [46:32] } = 0;
  assign { i_sft_pd_X0 [46:32] } = 0;
  assign { i_sft_pd_C0 [46:32] } = 0;
  logic [46:0] i_sft_pd_R1 ;
  logic [46:0] i_sft_pd_X1 ;
  logic [46:0] i_sft_pd_C1 ;
  assign i_sft_pd_R1 [31:31] = fangyuan5_R [15:15] ;
  assign i_sft_pd_X1 [31:31] = fangyuan5_X [15:15] ;
  assign i_sft_pd_C1 [31:31] = fangyuan5_C [15:15] ;
  assign i_sft_pd_R1 [32:32] = fangyuan5_R [14:14] ;
  assign i_sft_pd_X1 [32:32] = fangyuan5_X [14:14] ;
  assign i_sft_pd_C1 [32:32] = fangyuan5_C [14:14] ;
  assign i_sft_pd_R1 [33:33] = fangyuan5_R [13:13] ;
  assign i_sft_pd_X1 [33:33] = fangyuan5_X [13:13] ;
  assign i_sft_pd_C1 [33:33] = fangyuan5_C [13:13] ;
  assign i_sft_pd_R1 [34:34] = fangyuan5_R [12:12] ;
  assign i_sft_pd_X1 [34:34] = fangyuan5_X [12:12] ;
  assign i_sft_pd_C1 [34:34] = fangyuan5_C [12:12] ;
  assign i_sft_pd_R1 [35:35] = fangyuan5_R [11:11] ;
  assign i_sft_pd_X1 [35:35] = fangyuan5_X [11:11] ;
  assign i_sft_pd_C1 [35:35] = fangyuan5_C [11:11] ;
  assign i_sft_pd_R1 [36:36] = fangyuan5_R [10:10] ;
  assign i_sft_pd_X1 [36:36] = fangyuan5_X [10:10] ;
  assign i_sft_pd_C1 [36:36] = fangyuan5_C [10:10] ;
  assign i_sft_pd_R1 [37:37] = fangyuan5_R [9:9] ;
  assign i_sft_pd_X1 [37:37] = fangyuan5_X [9:9] ;
  assign i_sft_pd_C1 [37:37] = fangyuan5_C [9:9] ;
  assign i_sft_pd_R1 [38:38] = fangyuan5_R [8:8] ;
  assign i_sft_pd_X1 [38:38] = fangyuan5_X [8:8] ;
  assign i_sft_pd_C1 [38:38] = fangyuan5_C [8:8] ;
  assign i_sft_pd_R1 [39:39] = fangyuan5_R [7:7] ;
  assign i_sft_pd_X1 [39:39] = fangyuan5_X [7:7] ;
  assign i_sft_pd_C1 [39:39] = fangyuan5_C [7:7] ;
  assign i_sft_pd_R1 [40:40] = fangyuan5_R [6:6] ;
  assign i_sft_pd_X1 [40:40] = fangyuan5_X [6:6] ;
  assign i_sft_pd_C1 [40:40] = fangyuan5_C [6:6] ;
  assign i_sft_pd_R1 [41:41] = fangyuan5_R [5:5] ;
  assign i_sft_pd_X1 [41:41] = fangyuan5_X [5:5] ;
  assign i_sft_pd_C1 [41:41] = fangyuan5_C [5:5] ;
  assign i_sft_pd_R1 [42:42] = fangyuan5_R [4:4] ;
  assign i_sft_pd_X1 [42:42] = fangyuan5_X [4:4] ;
  assign i_sft_pd_C1 [42:42] = fangyuan5_C [4:4] ;
  assign i_sft_pd_R1 [43:43] = fangyuan5_R [3:3] ;
  assign i_sft_pd_X1 [43:43] = fangyuan5_X [3:3] ;
  assign i_sft_pd_C1 [43:43] = fangyuan5_C [3:3] ;
  assign i_sft_pd_R1 [44:44] = fangyuan5_R [2:2] ;
  assign i_sft_pd_X1 [44:44] = fangyuan5_X [2:2] ;
  assign i_sft_pd_C1 [44:44] = fangyuan5_C [2:2] ;
  assign i_sft_pd_R1 [45:45] = fangyuan5_R [1:1] ;
  assign i_sft_pd_X1 [45:45] = fangyuan5_X [1:1] ;
  assign i_sft_pd_C1 [45:45] = fangyuan5_C [1:1] ;
  assign i_sft_pd_R1 [46:46] = fangyuan5_R [0:0] ;
  assign i_sft_pd_X1 [46:46] = fangyuan5_X [0:0] ;
  assign i_sft_pd_C1 [46:46] = fangyuan5_C [0:0] ;

  assign _031_ = & fangyuan5;
  logic [15:0] fangyuan5_C0 ;
  logic [15:0] fangyuan5_R0 ;
  logic [15:0] fangyuan5_X0 ;
  assign _031__T = | fangyuan5_T ;
  assign fangyuan5_C0 = { 16{ _031__C }} ;
  assign fangyuan5_X0 = { 16{ _031__X }} ;
  assign fangyuan5_R0 = { 16{ _031__R }} & ~fangyuan5 ;
  assign _031__S = 0 ;
  logic [31:0] fangyuan6;
  logic [31:0] fangyuan6_T ;
  logic [31:0] fangyuan6_R ;
  logic [31:0] fangyuan6_C ;
  logic [31:0] fangyuan6_X ;
  assign fangyuan6 = { i_point5, i_sft_pd[0], i_sft_pd[1], i_sft_pd[2], i_sft_pd[3], i_sft_pd[4], i_sft_pd[5], i_sft_pd[6], i_sft_pd[7], i_sft_pd[8], i_sft_pd[9], i_sft_pd[10], i_sft_pd[11], i_sft_pd[12], i_sft_pd[13], i_sft_pd[14], i_sft_pd[15], i_sft_pd[16], i_sft_pd[17], i_sft_pd[18], i_sft_pd[19], i_sft_pd[20], i_sft_pd[21], i_sft_pd[22], i_sft_pd[23], i_sft_pd[24], i_sft_pd[25], i_sft_pd[26], i_sft_pd[27], i_sft_pd[28], i_sft_pd[29], i_sft_pd[30] };
  assign fangyuan6_T = {  i_point5_T , i_sft_pd_T [0] , i_sft_pd_T [1] , i_sft_pd_T [2] , i_sft_pd_T [3] , i_sft_pd_T [4] , i_sft_pd_T [5] , i_sft_pd_T [6] , i_sft_pd_T [7] , i_sft_pd_T [8] , i_sft_pd_T [9] , i_sft_pd_T [10] , i_sft_pd_T [11] , i_sft_pd_T [12] , i_sft_pd_T [13] , i_sft_pd_T [14] , i_sft_pd_T [15] , i_sft_pd_T [16] , i_sft_pd_T [17] , i_sft_pd_T [18] , i_sft_pd_T [19] , i_sft_pd_T [20] , i_sft_pd_T [21] , i_sft_pd_T [22] , i_sft_pd_T [23] , i_sft_pd_T [24] , i_sft_pd_T [25] , i_sft_pd_T [26] , i_sft_pd_T [27] , i_sft_pd_T [28] , i_sft_pd_T [29] , i_sft_pd_T [30]  };
  logic [13:0] fangyuan6_S ;
  assign fangyuan6_S = 0 ;
  logic [0:0] i_point5_R1 ;
  logic [0:0] i_point5_X1 ;
  logic [0:0] i_point5_C1 ;
  assign i_point5_R1 = fangyuan6_R [31:31] ;
  assign i_point5_X1 = fangyuan6_X [31:31] ;
  assign i_point5_C1 = fangyuan6_C [31:31] ;
  assign i_sft_pd_R1 [0:0] = fangyuan6_R [30:30] ;
  assign i_sft_pd_X1 [0:0] = fangyuan6_X [30:30] ;
  assign i_sft_pd_C1 [0:0] = fangyuan6_C [30:30] ;
  assign i_sft_pd_R1 [1:1] = fangyuan6_R [29:29] ;
  assign i_sft_pd_X1 [1:1] = fangyuan6_X [29:29] ;
  assign i_sft_pd_C1 [1:1] = fangyuan6_C [29:29] ;
  assign i_sft_pd_R1 [2:2] = fangyuan6_R [28:28] ;
  assign i_sft_pd_X1 [2:2] = fangyuan6_X [28:28] ;
  assign i_sft_pd_C1 [2:2] = fangyuan6_C [28:28] ;
  assign i_sft_pd_R1 [3:3] = fangyuan6_R [27:27] ;
  assign i_sft_pd_X1 [3:3] = fangyuan6_X [27:27] ;
  assign i_sft_pd_C1 [3:3] = fangyuan6_C [27:27] ;
  assign i_sft_pd_R1 [4:4] = fangyuan6_R [26:26] ;
  assign i_sft_pd_X1 [4:4] = fangyuan6_X [26:26] ;
  assign i_sft_pd_C1 [4:4] = fangyuan6_C [26:26] ;
  assign i_sft_pd_R1 [5:5] = fangyuan6_R [25:25] ;
  assign i_sft_pd_X1 [5:5] = fangyuan6_X [25:25] ;
  assign i_sft_pd_C1 [5:5] = fangyuan6_C [25:25] ;
  assign i_sft_pd_R1 [6:6] = fangyuan6_R [24:24] ;
  assign i_sft_pd_X1 [6:6] = fangyuan6_X [24:24] ;
  assign i_sft_pd_C1 [6:6] = fangyuan6_C [24:24] ;
  assign i_sft_pd_R1 [7:7] = fangyuan6_R [23:23] ;
  assign i_sft_pd_X1 [7:7] = fangyuan6_X [23:23] ;
  assign i_sft_pd_C1 [7:7] = fangyuan6_C [23:23] ;
  assign i_sft_pd_R1 [8:8] = fangyuan6_R [22:22] ;
  assign i_sft_pd_X1 [8:8] = fangyuan6_X [22:22] ;
  assign i_sft_pd_C1 [8:8] = fangyuan6_C [22:22] ;
  assign i_sft_pd_R1 [9:9] = fangyuan6_R [21:21] ;
  assign i_sft_pd_X1 [9:9] = fangyuan6_X [21:21] ;
  assign i_sft_pd_C1 [9:9] = fangyuan6_C [21:21] ;
  assign i_sft_pd_R1 [10:10] = fangyuan6_R [20:20] ;
  assign i_sft_pd_X1 [10:10] = fangyuan6_X [20:20] ;
  assign i_sft_pd_C1 [10:10] = fangyuan6_C [20:20] ;
  assign i_sft_pd_R1 [11:11] = fangyuan6_R [19:19] ;
  assign i_sft_pd_X1 [11:11] = fangyuan6_X [19:19] ;
  assign i_sft_pd_C1 [11:11] = fangyuan6_C [19:19] ;
  assign i_sft_pd_R1 [12:12] = fangyuan6_R [18:18] ;
  assign i_sft_pd_X1 [12:12] = fangyuan6_X [18:18] ;
  assign i_sft_pd_C1 [12:12] = fangyuan6_C [18:18] ;
  assign i_sft_pd_R1 [13:13] = fangyuan6_R [17:17] ;
  assign i_sft_pd_X1 [13:13] = fangyuan6_X [17:17] ;
  assign i_sft_pd_C1 [13:13] = fangyuan6_C [17:17] ;
  assign i_sft_pd_R1 [14:14] = fangyuan6_R [16:16] ;
  assign i_sft_pd_X1 [14:14] = fangyuan6_X [16:16] ;
  assign i_sft_pd_C1 [14:14] = fangyuan6_C [16:16] ;
  assign i_sft_pd_R1 [15:15] = fangyuan6_R [15:15] ;
  assign i_sft_pd_X1 [15:15] = fangyuan6_X [15:15] ;
  assign i_sft_pd_C1 [15:15] = fangyuan6_C [15:15] ;
  assign i_sft_pd_R1 [16:16] = fangyuan6_R [14:14] ;
  assign i_sft_pd_X1 [16:16] = fangyuan6_X [14:14] ;
  assign i_sft_pd_C1 [16:16] = fangyuan6_C [14:14] ;
  assign i_sft_pd_R1 [17:17] = fangyuan6_R [13:13] ;
  assign i_sft_pd_X1 [17:17] = fangyuan6_X [13:13] ;
  assign i_sft_pd_C1 [17:17] = fangyuan6_C [13:13] ;
  assign i_sft_pd_R1 [18:18] = fangyuan6_R [12:12] ;
  assign i_sft_pd_X1 [18:18] = fangyuan6_X [12:12] ;
  assign i_sft_pd_C1 [18:18] = fangyuan6_C [12:12] ;
  assign i_sft_pd_R1 [19:19] = fangyuan6_R [11:11] ;
  assign i_sft_pd_X1 [19:19] = fangyuan6_X [11:11] ;
  assign i_sft_pd_C1 [19:19] = fangyuan6_C [11:11] ;
  assign i_sft_pd_R1 [20:20] = fangyuan6_R [10:10] ;
  assign i_sft_pd_X1 [20:20] = fangyuan6_X [10:10] ;
  assign i_sft_pd_C1 [20:20] = fangyuan6_C [10:10] ;
  assign i_sft_pd_R1 [21:21] = fangyuan6_R [9:9] ;
  assign i_sft_pd_X1 [21:21] = fangyuan6_X [9:9] ;
  assign i_sft_pd_C1 [21:21] = fangyuan6_C [9:9] ;
  assign i_sft_pd_R1 [22:22] = fangyuan6_R [8:8] ;
  assign i_sft_pd_X1 [22:22] = fangyuan6_X [8:8] ;
  assign i_sft_pd_C1 [22:22] = fangyuan6_C [8:8] ;
  assign i_sft_pd_R1 [23:23] = fangyuan6_R [7:7] ;
  assign i_sft_pd_X1 [23:23] = fangyuan6_X [7:7] ;
  assign i_sft_pd_C1 [23:23] = fangyuan6_C [7:7] ;
  assign i_sft_pd_R1 [24:24] = fangyuan6_R [6:6] ;
  assign i_sft_pd_X1 [24:24] = fangyuan6_X [6:6] ;
  assign i_sft_pd_C1 [24:24] = fangyuan6_C [6:6] ;
  assign i_sft_pd_R1 [25:25] = fangyuan6_R [5:5] ;
  assign i_sft_pd_X1 [25:25] = fangyuan6_X [5:5] ;
  assign i_sft_pd_C1 [25:25] = fangyuan6_C [5:5] ;
  assign i_sft_pd_R1 [26:26] = fangyuan6_R [4:4] ;
  assign i_sft_pd_X1 [26:26] = fangyuan6_X [4:4] ;
  assign i_sft_pd_C1 [26:26] = fangyuan6_C [4:4] ;
  assign i_sft_pd_R1 [27:27] = fangyuan6_R [3:3] ;
  assign i_sft_pd_X1 [27:27] = fangyuan6_X [3:3] ;
  assign i_sft_pd_C1 [27:27] = fangyuan6_C [3:3] ;
  assign i_sft_pd_R1 [28:28] = fangyuan6_R [2:2] ;
  assign i_sft_pd_X1 [28:28] = fangyuan6_X [2:2] ;
  assign i_sft_pd_C1 [28:28] = fangyuan6_C [2:2] ;
  assign i_sft_pd_R1 [29:29] = fangyuan6_R [1:1] ;
  assign i_sft_pd_X1 [29:29] = fangyuan6_X [1:1] ;
  assign i_sft_pd_C1 [29:29] = fangyuan6_C [1:1] ;
  assign i_sft_pd_R1 [30:30] = fangyuan6_R [0:0] ;
  assign i_sft_pd_X1 [30:30] = fangyuan6_X [0:0] ;
  assign i_sft_pd_C1 [30:30] = fangyuan6_C [0:0] ;

  assign _032_ = & fangyuan6;
  logic [31:0] fangyuan6_C0 ;
  logic [31:0] fangyuan6_R0 ;
  logic [31:0] fangyuan6_X0 ;
  assign _032__T = | fangyuan6_T ;
  assign fangyuan6_C0 = { 32{ _032__C }} ;
  assign fangyuan6_X0 = { 32{ _032__X }} ;
  assign fangyuan6_R0 = { 32{ _032__R }} & ~fangyuan6 ;
  assign _032__S = 0 ;
  logic [15:0] fangyuan7;
  logic [15:0] fangyuan7_T ;
  logic [15:0] fangyuan7_R ;
  logic [15:0] fangyuan7_C ;
  logic [15:0] fangyuan7_X ;
  assign fangyuan7 = { i_sft_pd[31], i_sft_pd[32], i_sft_pd[33], i_sft_pd[34], i_sft_pd[35], i_sft_pd[36], i_sft_pd[37], i_sft_pd[38], i_sft_pd[39], i_sft_pd[40], i_sft_pd[41], i_sft_pd[42], i_sft_pd[43], i_sft_pd[44], i_sft_pd[45], i_sft_pd[46] };
  assign fangyuan7_T = {  i_sft_pd_T [31] , i_sft_pd_T [32] , i_sft_pd_T [33] , i_sft_pd_T [34] , i_sft_pd_T [35] , i_sft_pd_T [36] , i_sft_pd_T [37] , i_sft_pd_T [38] , i_sft_pd_T [39] , i_sft_pd_T [40] , i_sft_pd_T [41] , i_sft_pd_T [42] , i_sft_pd_T [43] , i_sft_pd_T [44] , i_sft_pd_T [45] , i_sft_pd_T [46]  };
  logic [13:0] fangyuan7_S ;
  assign fangyuan7_S = 0 ;
  logic [46:0] i_sft_pd_R2 ;
  logic [46:0] i_sft_pd_X2 ;
  logic [46:0] i_sft_pd_C2 ;
  assign i_sft_pd_R2 [31:31] = fangyuan7_R [15:15] ;
  assign i_sft_pd_X2 [31:31] = fangyuan7_X [15:15] ;
  assign i_sft_pd_C2 [31:31] = fangyuan7_C [15:15] ;
  assign i_sft_pd_R2 [32:32] = fangyuan7_R [14:14] ;
  assign i_sft_pd_X2 [32:32] = fangyuan7_X [14:14] ;
  assign i_sft_pd_C2 [32:32] = fangyuan7_C [14:14] ;
  assign i_sft_pd_R2 [33:33] = fangyuan7_R [13:13] ;
  assign i_sft_pd_X2 [33:33] = fangyuan7_X [13:13] ;
  assign i_sft_pd_C2 [33:33] = fangyuan7_C [13:13] ;
  assign i_sft_pd_R2 [34:34] = fangyuan7_R [12:12] ;
  assign i_sft_pd_X2 [34:34] = fangyuan7_X [12:12] ;
  assign i_sft_pd_C2 [34:34] = fangyuan7_C [12:12] ;
  assign i_sft_pd_R2 [35:35] = fangyuan7_R [11:11] ;
  assign i_sft_pd_X2 [35:35] = fangyuan7_X [11:11] ;
  assign i_sft_pd_C2 [35:35] = fangyuan7_C [11:11] ;
  assign i_sft_pd_R2 [36:36] = fangyuan7_R [10:10] ;
  assign i_sft_pd_X2 [36:36] = fangyuan7_X [10:10] ;
  assign i_sft_pd_C2 [36:36] = fangyuan7_C [10:10] ;
  assign i_sft_pd_R2 [37:37] = fangyuan7_R [9:9] ;
  assign i_sft_pd_X2 [37:37] = fangyuan7_X [9:9] ;
  assign i_sft_pd_C2 [37:37] = fangyuan7_C [9:9] ;
  assign i_sft_pd_R2 [38:38] = fangyuan7_R [8:8] ;
  assign i_sft_pd_X2 [38:38] = fangyuan7_X [8:8] ;
  assign i_sft_pd_C2 [38:38] = fangyuan7_C [8:8] ;
  assign i_sft_pd_R2 [39:39] = fangyuan7_R [7:7] ;
  assign i_sft_pd_X2 [39:39] = fangyuan7_X [7:7] ;
  assign i_sft_pd_C2 [39:39] = fangyuan7_C [7:7] ;
  assign i_sft_pd_R2 [40:40] = fangyuan7_R [6:6] ;
  assign i_sft_pd_X2 [40:40] = fangyuan7_X [6:6] ;
  assign i_sft_pd_C2 [40:40] = fangyuan7_C [6:6] ;
  assign i_sft_pd_R2 [41:41] = fangyuan7_R [5:5] ;
  assign i_sft_pd_X2 [41:41] = fangyuan7_X [5:5] ;
  assign i_sft_pd_C2 [41:41] = fangyuan7_C [5:5] ;
  assign i_sft_pd_R2 [42:42] = fangyuan7_R [4:4] ;
  assign i_sft_pd_X2 [42:42] = fangyuan7_X [4:4] ;
  assign i_sft_pd_C2 [42:42] = fangyuan7_C [4:4] ;
  assign i_sft_pd_R2 [43:43] = fangyuan7_R [3:3] ;
  assign i_sft_pd_X2 [43:43] = fangyuan7_X [3:3] ;
  assign i_sft_pd_C2 [43:43] = fangyuan7_C [3:3] ;
  assign i_sft_pd_R2 [44:44] = fangyuan7_R [2:2] ;
  assign i_sft_pd_X2 [44:44] = fangyuan7_X [2:2] ;
  assign i_sft_pd_C2 [44:44] = fangyuan7_C [2:2] ;
  assign i_sft_pd_R2 [45:45] = fangyuan7_R [1:1] ;
  assign i_sft_pd_X2 [45:45] = fangyuan7_X [1:1] ;
  assign i_sft_pd_C2 [45:45] = fangyuan7_C [1:1] ;
  assign i_sft_pd_R2 [46:46] = fangyuan7_R [0:0] ;
  assign i_sft_pd_X2 [46:46] = fangyuan7_X [0:0] ;
  assign i_sft_pd_C2 [46:46] = fangyuan7_C [0:0] ;

  assign _033_ = | fangyuan7;
  logic [15:0] fangyuan7_C0 ;
  logic [15:0] fangyuan7_R0 ;
  logic [15:0] fangyuan7_X0 ;
  assign _033__T = | fangyuan7_T ;
  assign fangyuan7_C0 = { 16{ _033__C }} ;
  assign fangyuan7_X0 = { 16{ _033__X }} ;
  assign fangyuan7_R0 = { 16{ _033__R }} & fangyuan7 ;
  assign _033__S = 0 ;
  logic [14:0] fangyuan8;
  logic [14:0] fangyuan8_T ;
  logic [14:0] fangyuan8_R ;
  logic [14:0] fangyuan8_C ;
  logic [14:0] fangyuan8_X ;
  assign fangyuan8 = { i_stick[0], i_stick[1], i_stick[2], i_stick[3], i_stick[4], i_stick[5], i_stick[6], i_stick[7], i_stick[8], i_stick[9], i_stick[10], i_stick[11], i_stick[12], i_stick[13], i_stick[14] };
  assign fangyuan8_T = {  i_stick_T [0] , i_stick_T [1] , i_stick_T [2] , i_stick_T [3] , i_stick_T [4] , i_stick_T [5] , i_stick_T [6] , i_stick_T [7] , i_stick_T [8] , i_stick_T [9] , i_stick_T [10] , i_stick_T [11] , i_stick_T [12] , i_stick_T [13] , i_stick_T [14]  };
  logic [13:0] fangyuan8_S ;
  assign fangyuan8_S = 0 ;
  logic [14:0] i_stick_R0 ;
  logic [14:0] i_stick_X0 ;
  logic [14:0] i_stick_C0 ;
  assign i_stick_R0 [0:0] = fangyuan8_R [14:14] ;
  assign i_stick_X0 [0:0] = fangyuan8_X [14:14] ;
  assign i_stick_C0 [0:0] = fangyuan8_C [14:14] ;
  assign i_stick_R0 [1:1] = fangyuan8_R [13:13] ;
  assign i_stick_X0 [1:1] = fangyuan8_X [13:13] ;
  assign i_stick_C0 [1:1] = fangyuan8_C [13:13] ;
  assign i_stick_R0 [2:2] = fangyuan8_R [12:12] ;
  assign i_stick_X0 [2:2] = fangyuan8_X [12:12] ;
  assign i_stick_C0 [2:2] = fangyuan8_C [12:12] ;
  assign i_stick_R0 [3:3] = fangyuan8_R [11:11] ;
  assign i_stick_X0 [3:3] = fangyuan8_X [11:11] ;
  assign i_stick_C0 [3:3] = fangyuan8_C [11:11] ;
  assign i_stick_R0 [4:4] = fangyuan8_R [10:10] ;
  assign i_stick_X0 [4:4] = fangyuan8_X [10:10] ;
  assign i_stick_C0 [4:4] = fangyuan8_C [10:10] ;
  assign i_stick_R0 [5:5] = fangyuan8_R [9:9] ;
  assign i_stick_X0 [5:5] = fangyuan8_X [9:9] ;
  assign i_stick_C0 [5:5] = fangyuan8_C [9:9] ;
  assign i_stick_R0 [6:6] = fangyuan8_R [8:8] ;
  assign i_stick_X0 [6:6] = fangyuan8_X [8:8] ;
  assign i_stick_C0 [6:6] = fangyuan8_C [8:8] ;
  assign i_stick_R0 [7:7] = fangyuan8_R [7:7] ;
  assign i_stick_X0 [7:7] = fangyuan8_X [7:7] ;
  assign i_stick_C0 [7:7] = fangyuan8_C [7:7] ;
  assign i_stick_R0 [8:8] = fangyuan8_R [6:6] ;
  assign i_stick_X0 [8:8] = fangyuan8_X [6:6] ;
  assign i_stick_C0 [8:8] = fangyuan8_C [6:6] ;
  assign i_stick_R0 [9:9] = fangyuan8_R [5:5] ;
  assign i_stick_X0 [9:9] = fangyuan8_X [5:5] ;
  assign i_stick_C0 [9:9] = fangyuan8_C [5:5] ;
  assign i_stick_R0 [10:10] = fangyuan8_R [4:4] ;
  assign i_stick_X0 [10:10] = fangyuan8_X [4:4] ;
  assign i_stick_C0 [10:10] = fangyuan8_C [4:4] ;
  assign i_stick_R0 [11:11] = fangyuan8_R [3:3] ;
  assign i_stick_X0 [11:11] = fangyuan8_X [3:3] ;
  assign i_stick_C0 [11:11] = fangyuan8_C [3:3] ;
  assign i_stick_R0 [12:12] = fangyuan8_R [2:2] ;
  assign i_stick_X0 [12:12] = fangyuan8_X [2:2] ;
  assign i_stick_C0 [12:12] = fangyuan8_C [2:2] ;
  assign i_stick_R0 [13:13] = fangyuan8_R [1:1] ;
  assign i_stick_X0 [13:13] = fangyuan8_X [1:1] ;
  assign i_stick_C0 [13:13] = fangyuan8_C [1:1] ;
  assign i_stick_R0 [14:14] = fangyuan8_R [0:0] ;
  assign i_stick_X0 [14:14] = fangyuan8_X [0:0] ;
  assign i_stick_C0 [14:14] = fangyuan8_C [0:0] ;

  assign _034_ = | fangyuan8;
  logic [14:0] fangyuan8_C0 ;
  logic [14:0] fangyuan8_R0 ;
  logic [14:0] fangyuan8_X0 ;
  assign _034__T = | fangyuan8_T ;
  assign fangyuan8_C0 = { 15{ _034__C }} ;
  assign fangyuan8_X0 = { 15{ _034__X }} ;
  assign fangyuan8_R0 = { 15{ _034__R }} & fangyuan8 ;
  assign _034__S = 0 ;
  logic [62:0] fangyuan9;
  logic [62:0] fangyuan9_T ;
  logic [62:0] fangyuan9_R ;
  logic [62:0] fangyuan9_C ;
  logic [62:0] fangyuan9_X ;
  assign fangyuan9 = { i_sft_pd, i_guide, i_stick };
  assign fangyuan9_T = {  i_sft_pd_T , i_guide_T , i_stick_T  };
  logic [13:0] fangyuan9_S ;
  assign fangyuan9_S = 0 ;
  assign { i_sft_pd_R2 [0], i_sft_pd_R2 [1], i_sft_pd_R2 [2], i_sft_pd_R2 [3], i_sft_pd_R2 [4], i_sft_pd_R2 [5], i_sft_pd_R2 [6], i_sft_pd_R2 [7], i_sft_pd_R2 [8], i_sft_pd_R2 [9], i_sft_pd_R2 [10], i_sft_pd_R2 [11], i_sft_pd_R2 [12], i_sft_pd_R2 [13], i_sft_pd_R2 [14], i_sft_pd_R2 [15], i_sft_pd_R2 [16], i_sft_pd_R2 [17], i_sft_pd_R2 [18], i_sft_pd_R2 [19], i_sft_pd_R2 [20], i_sft_pd_R2 [21], i_sft_pd_R2 [22], i_sft_pd_R2 [23], i_sft_pd_R2 [24], i_sft_pd_R2 [25], i_sft_pd_R2 [26], i_sft_pd_R2 [27], i_sft_pd_R2 [28], i_sft_pd_R2 [29], i_sft_pd_R2 [30] } = 0;
  assign { i_sft_pd_X2 [0], i_sft_pd_X2 [1], i_sft_pd_X2 [2], i_sft_pd_X2 [3], i_sft_pd_X2 [4], i_sft_pd_X2 [5], i_sft_pd_X2 [6], i_sft_pd_X2 [7], i_sft_pd_X2 [8], i_sft_pd_X2 [9], i_sft_pd_X2 [10], i_sft_pd_X2 [11], i_sft_pd_X2 [12], i_sft_pd_X2 [13], i_sft_pd_X2 [14], i_sft_pd_X2 [15], i_sft_pd_X2 [16], i_sft_pd_X2 [17], i_sft_pd_X2 [18], i_sft_pd_X2 [19], i_sft_pd_X2 [20], i_sft_pd_X2 [21], i_sft_pd_X2 [22], i_sft_pd_X2 [23], i_sft_pd_X2 [24], i_sft_pd_X2 [25], i_sft_pd_X2 [26], i_sft_pd_X2 [27], i_sft_pd_X2 [28], i_sft_pd_X2 [29], i_sft_pd_X2 [30] } = 0;
  assign { i_sft_pd_C2 [0], i_sft_pd_C2 [1], i_sft_pd_C2 [2], i_sft_pd_C2 [3], i_sft_pd_C2 [4], i_sft_pd_C2 [5], i_sft_pd_C2 [6], i_sft_pd_C2 [7], i_sft_pd_C2 [8], i_sft_pd_C2 [9], i_sft_pd_C2 [10], i_sft_pd_C2 [11], i_sft_pd_C2 [12], i_sft_pd_C2 [13], i_sft_pd_C2 [14], i_sft_pd_C2 [15], i_sft_pd_C2 [16], i_sft_pd_C2 [17], i_sft_pd_C2 [18], i_sft_pd_C2 [19], i_sft_pd_C2 [20], i_sft_pd_C2 [21], i_sft_pd_C2 [22], i_sft_pd_C2 [23], i_sft_pd_C2 [24], i_sft_pd_C2 [25], i_sft_pd_C2 [26], i_sft_pd_C2 [27], i_sft_pd_C2 [28], i_sft_pd_C2 [29], i_sft_pd_C2 [30] } = 0;
  logic [46:0] i_sft_pd_R3 ;
  logic [46:0] i_sft_pd_X3 ;
  logic [46:0] i_sft_pd_C3 ;
  assign i_sft_pd_R3 = fangyuan9_R [62:16] ;
  assign i_sft_pd_X3 = fangyuan9_X [62:16] ;
  assign i_sft_pd_C3 = fangyuan9_C [62:16] ;
  logic [0:0] i_guide_R1 ;
  logic [0:0] i_guide_X1 ;
  logic [0:0] i_guide_C1 ;
  assign i_guide_R1 = fangyuan9_R [15:15] ;
  assign i_guide_X1 = fangyuan9_X [15:15] ;
  assign i_guide_C1 = fangyuan9_C [15:15] ;
  logic [14:0] i_stick_R1 ;
  logic [14:0] i_stick_X1 ;
  logic [14:0] i_stick_C1 ;
  assign i_stick_R1 = fangyuan9_R [14:0] ;
  assign i_stick_X1 = fangyuan9_X [14:0] ;
  assign i_stick_C1 = fangyuan9_C [14:0] ;
  logic [63:0] fangyuan10;
  logic [63:0] fangyuan10_T ;
  logic [63:0] fangyuan10_R ;
  logic [63:0] fangyuan10_C ;
  logic [63:0] fangyuan10_X ;
  assign fangyuan10 = { i_pre_sft_pd, 16'b0000000000000000 };
  assign fangyuan10_T = {  i_pre_sft_pd_T , 16'h0  };
  logic [13:0] fangyuan10_S ;
  assign fangyuan10_S = 0 ;
  logic [47:0] i_pre_sft_pd_R0 ;
  logic [47:0] i_pre_sft_pd_X0 ;
  logic [47:0] i_pre_sft_pd_C0 ;
  assign i_pre_sft_pd_R0 = fangyuan10_R [63:16] ;
  assign i_pre_sft_pd_X0 = fangyuan10_X [63:16] ;
  assign i_pre_sft_pd_C0 = fangyuan10_C [63:16] ;

 assign fangyuan9 = fangyuan10 >>> cfg_truncate;
 assign fangyuan9_S = 0 ;
 logic [63:0] fangyuan10_C0 ;
 logic [63:0] fangyuan10_R0 ;
 logic [63:0] fangyuan10_X0 ;
 logic [4:0] cfg_truncate_C0 ;
 logic [4:0] cfg_truncate_R0 ;
 logic [4:0] cfg_truncate_X0 ;
 assign fangyuan9_T = fangyuan10_T | cfg_truncate_T ;
 assign fangyuan10_C0 = fangyuan9_C ;
 assign fangyuan10_X0 = fangyuan9_X ;
 assign cfg_truncate_C0 = fangyuan9_C ;
 assign cfg_truncate_X0 = fangyuan9_X ;
 assign fangyuan10_R0 = fangyuan9_R | ( fangyuan9_C & cfg_truncate_T );
 assign cfg_truncate_R0 = fangyuan9_R | ( fangyuan9_C & fangyuan10_T );
  assign di_hsb_pd_tmp = in_hsb_same ? 6'b000000 : in_data[37:32];
  logic [0:0] in_hsb_same_C2 ;
  logic [0:0] in_hsb_same_R2 ;
  logic [0:0] in_hsb_same_X2 ;
  assign in_hsb_same_C2 = | di_hsb_pd_tmp_C ;
  assign in_hsb_same_X2 = | di_hsb_pd_tmp_X ;
  assign { in_data_R2 [0], in_data_R2 [1], in_data_R2 [2], in_data_R2 [3], in_data_R2 [4], in_data_R2 [5], in_data_R2 [6], in_data_R2 [7], in_data_R2 [8], in_data_R2 [9], in_data_R2 [10], in_data_R2 [11], in_data_R2 [12], in_data_R2 [13], in_data_R2 [14], in_data_R2 [15], in_data_R2 [16], in_data_R2 [17], in_data_R2 [18], in_data_R2 [19], in_data_R2 [20], in_data_R2 [21], in_data_R2 [22], in_data_R2 [23], in_data_R2 [24], in_data_R2 [25], in_data_R2 [26], in_data_R2 [27], in_data_R2 [28], in_data_R2 [29], in_data_R2 [30], in_data_R2 [31], in_data_R2 [32], in_data_R2 [33], in_data_R2 [34], in_data_R2 [35], in_data_R2 [36] } = 0;
  assign { in_data_X2 [0], in_data_X2 [1], in_data_X2 [2], in_data_X2 [3], in_data_X2 [4], in_data_X2 [5], in_data_X2 [6], in_data_X2 [7], in_data_X2 [8], in_data_X2 [9], in_data_X2 [10], in_data_X2 [11], in_data_X2 [12], in_data_X2 [13], in_data_X2 [14], in_data_X2 [15], in_data_X2 [16], in_data_X2 [17], in_data_X2 [18], in_data_X2 [19], in_data_X2 [20], in_data_X2 [21], in_data_X2 [22], in_data_X2 [23], in_data_X2 [24], in_data_X2 [25], in_data_X2 [26], in_data_X2 [27], in_data_X2 [28], in_data_X2 [29], in_data_X2 [30], in_data_X2 [31], in_data_X2 [32], in_data_X2 [33], in_data_X2 [34], in_data_X2 [35], in_data_X2 [36] } = 0;
  assign { in_data_C2 [0], in_data_C2 [1], in_data_C2 [2], in_data_C2 [3], in_data_C2 [4], in_data_C2 [5], in_data_C2 [6], in_data_C2 [7], in_data_C2 [8], in_data_C2 [9], in_data_C2 [10], in_data_C2 [11], in_data_C2 [12], in_data_C2 [13], in_data_C2 [14], in_data_C2 [15], in_data_C2 [16], in_data_C2 [17], in_data_C2 [18], in_data_C2 [19], in_data_C2 [20], in_data_C2 [21], in_data_C2 [22], in_data_C2 [23], in_data_C2 [24], in_data_C2 [25], in_data_C2 [26], in_data_C2 [27], in_data_C2 [28], in_data_C2 [29], in_data_C2 [30], in_data_C2 [31], in_data_C2 [32], in_data_C2 [33], in_data_C2 [34], in_data_C2 [35], in_data_C2 [36] } = 0;
  logic [37:0] in_data_C3 ;
  logic [37:0] in_data_R3 ;
  logic [37:0] in_data_X3 ;
  assign in_data_C3 [37:32] = { 6{ !in_hsb_same }};
  assign in_data_R3 [37:32] = { 6{ !in_hsb_same }} & ( di_hsb_pd_tmp_R | ( { 6{ in_hsb_same_T  }} & di_hsb_pd_tmp_C ));
  assign in_data_X3 [37:32] = { 6{ !in_hsb_same }} & di_hsb_pd_tmp_X ;
  assign di_hsb_pd_tmp_T = in_hsb_same ? { 6{ | in_hsb_same_T  }} : ( { 6{ | in_hsb_same_T  }} | in_data_T [37:32] );
  assign di_hsb_pd_tmp_S = in_hsb_same ? in_hsb_same_S : in_data_S ;
  assign in_hsb_same_R2 = ( | (di_hsb_pd_tmp_R | ( { 6{ !in_hsb_same }} & in_data_T [37:32] & di_hsb_pd_tmp_C ))) && 6'b000000 != in_data[37:32] ;
  assign oi_hsb_pd_tmp = in_hsb_same ? 16'b0000000000000000 : in_mask_op[47:32];
  logic [0:0] in_hsb_same_C3 ;
  logic [0:0] in_hsb_same_R3 ;
  logic [0:0] in_hsb_same_X3 ;
  assign in_hsb_same_C3 = | oi_hsb_pd_tmp_C ;
  assign in_hsb_same_X3 = | oi_hsb_pd_tmp_X ;
  assign { in_mask_op_R2 [0], in_mask_op_R2 [1], in_mask_op_R2 [2], in_mask_op_R2 [3], in_mask_op_R2 [4], in_mask_op_R2 [5], in_mask_op_R2 [6], in_mask_op_R2 [7], in_mask_op_R2 [8], in_mask_op_R2 [9], in_mask_op_R2 [10], in_mask_op_R2 [11], in_mask_op_R2 [12], in_mask_op_R2 [13], in_mask_op_R2 [14], in_mask_op_R2 [15], in_mask_op_R2 [16], in_mask_op_R2 [17], in_mask_op_R2 [18], in_mask_op_R2 [19], in_mask_op_R2 [20], in_mask_op_R2 [21], in_mask_op_R2 [22], in_mask_op_R2 [23], in_mask_op_R2 [24], in_mask_op_R2 [25], in_mask_op_R2 [26], in_mask_op_R2 [27], in_mask_op_R2 [28], in_mask_op_R2 [29], in_mask_op_R2 [30], in_mask_op_R2 [31], in_mask_op_R2 [32], in_mask_op_R2 [33], in_mask_op_R2 [34], in_mask_op_R2 [35], in_mask_op_R2 [36], in_mask_op_R2 [37], in_mask_op_R2 [38], in_mask_op_R2 [39], in_mask_op_R2 [40], in_mask_op_R2 [41], in_mask_op_R2 [42], in_mask_op_R2 [43], in_mask_op_R2 [44], in_mask_op_R2 [45], in_mask_op_R2 [46] } = 0;
  assign { in_mask_op_X2 [0], in_mask_op_X2 [1], in_mask_op_X2 [2], in_mask_op_X2 [3], in_mask_op_X2 [4], in_mask_op_X2 [5], in_mask_op_X2 [6], in_mask_op_X2 [7], in_mask_op_X2 [8], in_mask_op_X2 [9], in_mask_op_X2 [10], in_mask_op_X2 [11], in_mask_op_X2 [12], in_mask_op_X2 [13], in_mask_op_X2 [14], in_mask_op_X2 [15], in_mask_op_X2 [16], in_mask_op_X2 [17], in_mask_op_X2 [18], in_mask_op_X2 [19], in_mask_op_X2 [20], in_mask_op_X2 [21], in_mask_op_X2 [22], in_mask_op_X2 [23], in_mask_op_X2 [24], in_mask_op_X2 [25], in_mask_op_X2 [26], in_mask_op_X2 [27], in_mask_op_X2 [28], in_mask_op_X2 [29], in_mask_op_X2 [30], in_mask_op_X2 [31], in_mask_op_X2 [32], in_mask_op_X2 [33], in_mask_op_X2 [34], in_mask_op_X2 [35], in_mask_op_X2 [36], in_mask_op_X2 [37], in_mask_op_X2 [38], in_mask_op_X2 [39], in_mask_op_X2 [40], in_mask_op_X2 [41], in_mask_op_X2 [42], in_mask_op_X2 [43], in_mask_op_X2 [44], in_mask_op_X2 [45], in_mask_op_X2 [46] } = 0;
  assign { in_mask_op_C2 [0], in_mask_op_C2 [1], in_mask_op_C2 [2], in_mask_op_C2 [3], in_mask_op_C2 [4], in_mask_op_C2 [5], in_mask_op_C2 [6], in_mask_op_C2 [7], in_mask_op_C2 [8], in_mask_op_C2 [9], in_mask_op_C2 [10], in_mask_op_C2 [11], in_mask_op_C2 [12], in_mask_op_C2 [13], in_mask_op_C2 [14], in_mask_op_C2 [15], in_mask_op_C2 [16], in_mask_op_C2 [17], in_mask_op_C2 [18], in_mask_op_C2 [19], in_mask_op_C2 [20], in_mask_op_C2 [21], in_mask_op_C2 [22], in_mask_op_C2 [23], in_mask_op_C2 [24], in_mask_op_C2 [25], in_mask_op_C2 [26], in_mask_op_C2 [27], in_mask_op_C2 [28], in_mask_op_C2 [29], in_mask_op_C2 [30], in_mask_op_C2 [31], in_mask_op_C2 [32], in_mask_op_C2 [33], in_mask_op_C2 [34], in_mask_op_C2 [35], in_mask_op_C2 [36], in_mask_op_C2 [37], in_mask_op_C2 [38], in_mask_op_C2 [39], in_mask_op_C2 [40], in_mask_op_C2 [41], in_mask_op_C2 [42], in_mask_op_C2 [43], in_mask_op_C2 [44], in_mask_op_C2 [45], in_mask_op_C2 [46] } = 0;
  logic [47:0] in_mask_op_C3 ;
  logic [47:0] in_mask_op_R3 ;
  logic [47:0] in_mask_op_X3 ;
  assign in_mask_op_C3 [47:32] = { 16{ !in_hsb_same }};
  assign in_mask_op_R3 [47:32] = { 16{ !in_hsb_same }} & ( oi_hsb_pd_tmp_R | ( { 16{ in_hsb_same_T  }} & oi_hsb_pd_tmp_C ));
  assign in_mask_op_X3 [47:32] = { 16{ !in_hsb_same }} & oi_hsb_pd_tmp_X ;
  assign oi_hsb_pd_tmp_T = in_hsb_same ? { 16{ | in_hsb_same_T  }} : ( { 16{ | in_hsb_same_T  }} | in_mask_op_T [47:32] );
  assign oi_hsb_pd_tmp_S = in_hsb_same ? in_hsb_same_S : in_mask_op_S ;
  assign in_hsb_same_R3 = ( | (oi_hsb_pd_tmp_R | ( { 16{ !in_hsb_same }} & in_mask_op_T [47:32] & oi_hsb_pd_tmp_C ))) && 16'b0000000000000000 != in_mask_op[47:32] ;
  assign i_lsum_msb_tmp = in_hsb_same ? 1'b0 : i_lsum_pd_nxt[32];
  logic [0:0] in_hsb_same_C4 ;
  logic [0:0] in_hsb_same_R4 ;
  logic [0:0] in_hsb_same_X4 ;
  assign in_hsb_same_C4 = | i_lsum_msb_tmp_C ;
  assign in_hsb_same_X4 = | i_lsum_msb_tmp_X ;
  logic [32:0] i_lsum_pd_nxt_C1 ;
  logic [32:0] i_lsum_pd_nxt_R1 ;
  logic [32:0] i_lsum_pd_nxt_X1 ;
  assign i_lsum_pd_nxt_C1 [32] = { 1{ !in_hsb_same }};
  assign i_lsum_pd_nxt_R1 [32] = { 1{ !in_hsb_same }} & ( i_lsum_msb_tmp_R | ( { 1{ in_hsb_same_T  }} & i_lsum_msb_tmp_C ));
  assign i_lsum_pd_nxt_X1 [32] = { 1{ !in_hsb_same }} & i_lsum_msb_tmp_X ;
  assign i_lsum_msb_tmp_T = in_hsb_same ? { 1{ | in_hsb_same_T  }} : ( { 1{ | in_hsb_same_T  }} | i_lsum_pd_nxt_T [32] );
  assign i_lsum_msb_tmp_S = in_hsb_same ? in_hsb_same_S : i_lsum_pd_nxt_S ;
  assign in_hsb_same_R4 = ( | (i_lsum_msb_tmp_R | ( { 1{ !in_hsb_same }} & i_lsum_pd_nxt_T [32] & i_lsum_msb_tmp_C ))) && 1'b0 != i_lsum_pd_nxt[32] ;
  logic [47:0] fangyuan11;
  logic [47:0] fangyuan11_T ;
  logic [47:0] fangyuan11_R ;
  logic [47:0] fangyuan11_C ;
  logic [47:0] fangyuan11_X ;
  assign fangyuan11 = { i_hsame_sign, i_lsum_pd[31:0] };
  assign fangyuan11_T = {  i_hsame_sign_T , i_lsum_pd_T [31:0]  };
  logic [13:0] fangyuan11_S ;
  assign fangyuan11_S = 0 ;
  logic [15:0] i_hsame_sign_R0 ;
  logic [15:0] i_hsame_sign_X0 ;
  logic [15:0] i_hsame_sign_C0 ;
  assign i_hsame_sign_R0 = fangyuan11_R [47:32] ;
  assign i_hsame_sign_X0 = fangyuan11_X [47:32] ;
  assign i_hsame_sign_C0 = fangyuan11_C [47:32] ;
  logic [32:0] i_lsum_pd_R3 ;
  logic [32:0] i_lsum_pd_X3 ;
  logic [32:0] i_lsum_pd_C3 ;
  assign i_lsum_pd_R3 [31:0] = fangyuan11_R [31:0] ;
  assign i_lsum_pd_X3 [31:0] = fangyuan11_X [31:0] ;
  assign i_lsum_pd_C3 [31:0] = fangyuan11_C [31:0] ;
  logic [47:0] fangyuan12;
  logic [47:0] fangyuan12_T ;
  logic [47:0] fangyuan12_R ;
  logic [47:0] fangyuan12_C ;
  logic [47:0] fangyuan12_X ;
  assign fangyuan12 = { i_hsum_pd[16], i_sat_pd3[46:0] };
  assign fangyuan12_T = {  i_hsum_pd_T [16] , i_sat_pd3_T [46:0]  };
  logic [13:0] fangyuan12_S ;
  assign fangyuan12_S = 0 ;
  logic [16:0] i_hsum_pd_R2 ;
  logic [16:0] i_hsum_pd_X2 ;
  logic [16:0] i_hsum_pd_C2 ;
  assign i_hsum_pd_R2 [16:16] = fangyuan12_R [47:47] ;
  assign i_hsum_pd_X2 [16:16] = fangyuan12_X [47:47] ;
  assign i_hsum_pd_C2 [16:16] = fangyuan12_C [47:47] ;
  logic [47:0] i_sat_pd3_R0 ;
  logic [47:0] i_sat_pd3_X0 ;
  logic [47:0] i_sat_pd3_C0 ;
  assign i_sat_pd3_R0 [46:0] = fangyuan12_R [46:0] ;
  assign i_sat_pd3_X0 [46:0] = fangyuan12_X [46:0] ;
  assign i_sat_pd3_C0 [46:0] = fangyuan12_C [46:0] ;

  assign i_partial_result = in_hsb_same_d ? fangyuan11 : fangyuan12;
  logic [0:0] in_hsb_same_d_C1 ;
  logic [0:0] in_hsb_same_d_R1 ;
  logic [0:0] in_hsb_same_d_X1 ;
  assign in_hsb_same_d_C1 = | i_partial_result_C ;
  assign in_hsb_same_d_X1 = | i_partial_result_X ;
  assign i_partial_result_T = in_hsb_same_d ? ( { 48{ in_hsb_same_d_T  }} | fangyuan11_T ) : ( { 48{ in_hsb_same_d_T  }} | fangyuan12_T );
  assign i_partial_result_S = in_hsb_same_d ? fangyuan11_S : fangyuan12_S ;
  assign in_hsb_same_d_R1 = ( | (i_partial_result_R | ( i_partial_result_C & ( { 48{ in_hsb_same_d }} & fangyuan11_T | { 48{ !in_hsb_same_d }} & fangyuan12_T )))) && fangyuan11 != fangyuan12 ;
  logic [47:0] fangyuan11_C0 ;
  logic [47:0] fangyuan11_R0 ;
  logic [47:0] fangyuan11_X0 ;
  assign fangyuan11_C0 = { 48{ in_hsb_same_d }} ;
  assign fangyuan11_R0 = { 48{ in_hsb_same_d }} & ( i_partial_result_R | ( { 48{ in_hsb_same_d_T  }} & i_partial_result_C ));
  assign fangyuan11_X0 = { 48{ in_hsb_same_d }} & i_partial_result_X ;
  logic [47:0] fangyuan12_C0 ;
  logic [47:0] fangyuan12_R0 ;
  logic [47:0] fangyuan12_X0 ;
  assign fangyuan12_C0 = { 48{ !in_hsb_same_d }} ;
  assign fangyuan12_R0 = { 48{ !in_hsb_same_d }} & ( i_partial_result_R | ( { 48{ in_hsb_same_d_T  }} & i_partial_result_C ));
  assign fangyuan12_X0 = { 48{ !in_hsb_same_d }} & i_partial_result_X ;
  assign i_pre_sft_pd = i_sat_sel ? i_partial_result : 48'b000000000000000000000000000000000000000000000000;
  logic [0:0] i_sat_sel_C4 ;
  logic [0:0] i_sat_sel_R4 ;
  logic [0:0] i_sat_sel_X4 ;
  assign i_sat_sel_C4 = | i_pre_sft_pd_C ;
  assign i_sat_sel_X4 = | i_pre_sft_pd_X ;
  logic [47:0] i_partial_result_C3 ;
  logic [47:0] i_partial_result_R3 ;
  logic [47:0] i_partial_result_X3 ;
  assign i_partial_result_C3 = { 48{ i_sat_sel }} ;
  assign i_partial_result_R3 = { 48{ i_sat_sel }} & ( i_pre_sft_pd_R | ( { 48{ i_sat_sel_T  }} & i_pre_sft_pd_C ));
  assign i_partial_result_X3 = { 48{ i_sat_sel }} & i_pre_sft_pd_X ;
  assign i_pre_sft_pd_T = i_sat_sel ? ( { 48{ | i_sat_sel_T  }} | i_partial_result_T ) : { 48{ | i_sat_sel_T  }};
  assign i_pre_sft_pd_S = i_sat_sel ? i_partial_result_S : i_sat_sel_S ;
  assign i_sat_sel_R4 = ( | (i_pre_sft_pd_R | ( { 48{ i_sat_sel }} & i_partial_result_T & i_pre_sft_pd_C ))) && i_partial_result != 48'b000000000000000000000000000000000000000000000000 ;
  assign i_sft_max = i_partial_result[47] ? 32'd2147483648 : 32'd2147483647;
  logic [47:0] i_partial_result_C4 ;
  logic [47:0] i_partial_result_R4 ;
  logic [47:0] i_partial_result_X4 ;
  assign i_partial_result_C4 [47] = | i_sft_max_C ;
  assign i_partial_result_X4 [47] = | i_sft_max_X ;
  assign i_sft_max_T = { 32{ i_partial_result_T  [47] }} ;
  assign i_sft_max_S = i_partial_result_S ;
  assign i_partial_result_R4 [47] = ( | i_sft_max_R) && 32'd2147483648 != 32'd2147483647 ;
  assign i_final_result = i_sft_need_sat ? i_sft_max : i_tru_pd;
  logic [0:0] i_sft_need_sat_C1 ;
  logic [0:0] i_sft_need_sat_R1 ;
  logic [0:0] i_sft_need_sat_X1 ;
  assign i_sft_need_sat_C1 = | i_final_result_C ;
  assign i_sft_need_sat_X1 = | i_final_result_X ;
  assign i_final_result_T = i_sft_need_sat ? ( { 32{ i_sft_need_sat_T  }} | i_sft_max_T ) : ( { 32{ i_sft_need_sat_T  }} | i_tru_pd_T );
  assign i_final_result_S = i_sft_need_sat ? i_sft_max_S : i_tru_pd_S ;
  assign i_sft_need_sat_R1 = ( | (i_final_result_R | ( i_final_result_C & ( { 32{ i_sft_need_sat }} & i_sft_max_T | { 32{ !i_sft_need_sat }} & i_tru_pd_T )))) && i_sft_max != i_tru_pd ;
  logic [31:0] i_sft_max_C0 ;
  logic [31:0] i_sft_max_R0 ;
  logic [31:0] i_sft_max_X0 ;
  assign i_sft_max_C0 = { 32{ i_sft_need_sat }} ;
  assign i_sft_max_R0 = { 32{ i_sft_need_sat }} & ( i_final_result_R | ( { 32{ i_sft_need_sat_T  }} & i_final_result_C ));
  assign i_sft_max_X0 = { 32{ i_sft_need_sat }} & i_final_result_X ;
  logic [31:0] i_tru_pd_C0 ;
  logic [31:0] i_tru_pd_R0 ;
  logic [31:0] i_tru_pd_X0 ;
  assign i_tru_pd_C0 = { 32{ !i_sft_need_sat }} ;
  assign i_tru_pd_R0 = { 32{ !i_sft_need_sat }} & ( i_final_result_R | ( { 32{ i_sft_need_sat_T  }} & i_final_result_C ));
  assign i_tru_pd_X0 = { 32{ !i_sft_need_sat }} & i_final_result_X ;
  assign in_mask_op = in_op_valid ? in_op : 48'b000000000000000000000000000000000000000000000000;
  logic [0:0] in_op_valid_C0 ;
  logic [0:0] in_op_valid_R0 ;
  logic [0:0] in_op_valid_X0 ;
  assign in_op_valid_C0 = | in_mask_op_C ;
  assign in_op_valid_X0 = | in_mask_op_X ;
  logic [47:0] in_op_C0 ;
  logic [47:0] in_op_R0 ;
  logic [47:0] in_op_X0 ;
  assign in_op_C0 = { 48{ in_op_valid }} ;
  assign in_op_R0 = { 48{ in_op_valid }} & ( in_mask_op_R | ( { 48{ in_op_valid_T  }} & in_mask_op_C ));
  assign in_op_X0 = { 48{ in_op_valid }} & in_mask_op_X ;
  assign in_mask_op_T = in_op_valid ? ( { 48{ | in_op_valid_T  }} | in_op_T ) : { 48{ | in_op_valid_T  }};
  assign in_mask_op_S = in_op_valid ? in_op_S : in_op_valid_S ;
  assign in_op_valid_R0 = ( | (in_mask_op_R | ( { 48{ in_op_valid }} & in_op_T & in_mask_op_C ))) && in_op != 48'b000000000000000000000000000000000000000000000000 ;
  assign _030_ = di_sign_d ^ oi_sign_d;
  assign _030__S = 0 ;
  logic [0:0] di_sign_d_C1 ;
  logic [0:0] di_sign_d_R1 ;
  logic [0:0] di_sign_d_X1 ;
  logic [0:0] oi_sign_d_C16 ;
  logic [0:0] oi_sign_d_R16 ;
  logic [0:0] oi_sign_d_X16 ;
  assign _030__T = di_sign_d_T | oi_sign_d_T ;
  assign di_sign_d_C1 = _030__C ;
  assign di_sign_d_X1 = _030__X ;
  assign oi_sign_d_C16 = _030__C ;
  assign oi_sign_d_X16 = _030__X ;
  assign di_sign_d_R1 = _030__R | ( _030__C & oi_sign_d_T );
  assign oi_sign_d_R16 = _030__R | ( _030__C & di_sign_d_T );
  assign _029_ = i_hsum_pd[16] ^ i_hsum_pd[15];
  assign _029__S = 0 ;
  assign { i_hsum_pd_R2 [0], i_hsum_pd_R2 [1], i_hsum_pd_R2 [2], i_hsum_pd_R2 [3], i_hsum_pd_R2 [4], i_hsum_pd_R2 [5], i_hsum_pd_R2 [6], i_hsum_pd_R2 [7], i_hsum_pd_R2 [8], i_hsum_pd_R2 [9], i_hsum_pd_R2 [10], i_hsum_pd_R2 [11], i_hsum_pd_R2 [12], i_hsum_pd_R2 [13], i_hsum_pd_R2 [14], i_hsum_pd_R2 [15] } = 0;
  assign { i_hsum_pd_X2 [0], i_hsum_pd_X2 [1], i_hsum_pd_X2 [2], i_hsum_pd_X2 [3], i_hsum_pd_X2 [4], i_hsum_pd_X2 [5], i_hsum_pd_X2 [6], i_hsum_pd_X2 [7], i_hsum_pd_X2 [8], i_hsum_pd_X2 [9], i_hsum_pd_X2 [10], i_hsum_pd_X2 [11], i_hsum_pd_X2 [12], i_hsum_pd_X2 [13], i_hsum_pd_X2 [14], i_hsum_pd_X2 [15] } = 0;
  assign { i_hsum_pd_C2 [0], i_hsum_pd_C2 [1], i_hsum_pd_C2 [2], i_hsum_pd_C2 [3], i_hsum_pd_C2 [4], i_hsum_pd_C2 [5], i_hsum_pd_C2 [6], i_hsum_pd_C2 [7], i_hsum_pd_C2 [8], i_hsum_pd_C2 [9], i_hsum_pd_C2 [10], i_hsum_pd_C2 [11], i_hsum_pd_C2 [12], i_hsum_pd_C2 [13], i_hsum_pd_C2 [14], i_hsum_pd_C2 [15] } = 0;
  logic [16:0] i_hsum_pd_C3 ;
  logic [16:0] i_hsum_pd_R3 ;
  logic [16:0] i_hsum_pd_X3 ;
  assign _029__T = i_hsum_pd_T [16] | i_hsum_pd_T [15] ;
  assign i_hsum_pd_C3 [16] = _029__C ;
  assign i_hsum_pd_X3 [16] = _029__X ;
  assign i_hsum_pd_C3 [15] = _029__C ;
  assign i_hsum_pd_X3 [15] = _029__X ;
  assign i_hsum_pd_R3 [16] = _029__R | ( _029__C & i_hsum_pd_T [15] );
  assign i_hsum_pd_R3 [15] = _029__R | ( _029__C & i_hsum_pd_T [16] );
  assign di_hsb_pd = in_data[37:32];
  assign { in_data_R3 [0], in_data_R3 [1], in_data_R3 [2], in_data_R3 [3], in_data_R3 [4], in_data_R3 [5], in_data_R3 [6], in_data_R3 [7], in_data_R3 [8], in_data_R3 [9], in_data_R3 [10], in_data_R3 [11], in_data_R3 [12], in_data_R3 [13], in_data_R3 [14], in_data_R3 [15], in_data_R3 [16], in_data_R3 [17], in_data_R3 [18], in_data_R3 [19], in_data_R3 [20], in_data_R3 [21], in_data_R3 [22], in_data_R3 [23], in_data_R3 [24], in_data_R3 [25], in_data_R3 [26], in_data_R3 [27], in_data_R3 [28], in_data_R3 [29], in_data_R3 [30], in_data_R3 [31] } = 0;
  assign { in_data_X3 [0], in_data_X3 [1], in_data_X3 [2], in_data_X3 [3], in_data_X3 [4], in_data_X3 [5], in_data_X3 [6], in_data_X3 [7], in_data_X3 [8], in_data_X3 [9], in_data_X3 [10], in_data_X3 [11], in_data_X3 [12], in_data_X3 [13], in_data_X3 [14], in_data_X3 [15], in_data_X3 [16], in_data_X3 [17], in_data_X3 [18], in_data_X3 [19], in_data_X3 [20], in_data_X3 [21], in_data_X3 [22], in_data_X3 [23], in_data_X3 [24], in_data_X3 [25], in_data_X3 [26], in_data_X3 [27], in_data_X3 [28], in_data_X3 [29], in_data_X3 [30], in_data_X3 [31] } = 0;
  assign { in_data_C3 [0], in_data_C3 [1], in_data_C3 [2], in_data_C3 [3], in_data_C3 [4], in_data_C3 [5], in_data_C3 [6], in_data_C3 [7], in_data_C3 [8], in_data_C3 [9], in_data_C3 [10], in_data_C3 [11], in_data_C3 [12], in_data_C3 [13], in_data_C3 [14], in_data_C3 [15], in_data_C3 [16], in_data_C3 [17], in_data_C3 [18], in_data_C3 [19], in_data_C3 [20], in_data_C3 [21], in_data_C3 [22], in_data_C3 [23], in_data_C3 [24], in_data_C3 [25], in_data_C3 [26], in_data_C3 [27], in_data_C3 [28], in_data_C3 [29], in_data_C3 [30], in_data_C3 [31] } = 0;
  logic [37:0] in_data_C4 ;
  logic [37:0] in_data_R4 ;
  logic [37:0] in_data_X4 ;
  assign di_hsb_pd_T = in_data_T [37:32] ;
  assign in_data_C4 [37:32] = di_hsb_pd_C ;
  assign in_data_R4 [37:32] = di_hsb_pd_R ;
  assign in_data_X4 [37:32] = di_hsb_pd_X ;
  assign di_hsb_pd_S = in_data_S ;
  assign di_lsb_pd = in_data[31:0];
  assign di_lsb_pd_T = in_data_T [31:0] ;
  assign in_data_C4 [31:0] = di_lsb_pd_C ;
  assign in_data_R4 [31:0] = di_lsb_pd_R ;
  assign in_data_X4 [31:0] = di_lsb_pd_X ;
  assign di_lsb_pd_S = in_data_S ;
  assign di_sign = in_data[37];
  logic [37:0] in_data_C5 ;
  logic [37:0] in_data_R5 ;
  logic [37:0] in_data_X5 ;
  assign di_sign_T = in_data_T [37] ;
  assign in_data_C5 [37] = di_sign_C ;
  assign in_data_R5 [37] = di_sign_R ;
  assign in_data_X5 [37] = di_sign_X ;
  assign di_sign_S = in_data_S ;
  assign i_hsum_msb = i_hsum_pd[15];
  assign { i_hsum_pd_R3 [0], i_hsum_pd_R3 [1], i_hsum_pd_R3 [2], i_hsum_pd_R3 [3], i_hsum_pd_R3 [4], i_hsum_pd_R3 [5], i_hsum_pd_R3 [6], i_hsum_pd_R3 [7], i_hsum_pd_R3 [8], i_hsum_pd_R3 [9], i_hsum_pd_R3 [10], i_hsum_pd_R3 [11], i_hsum_pd_R3 [12], i_hsum_pd_R3 [13], i_hsum_pd_R3 [14] } = 0;
  assign { i_hsum_pd_X3 [0], i_hsum_pd_X3 [1], i_hsum_pd_X3 [2], i_hsum_pd_X3 [3], i_hsum_pd_X3 [4], i_hsum_pd_X3 [5], i_hsum_pd_X3 [6], i_hsum_pd_X3 [7], i_hsum_pd_X3 [8], i_hsum_pd_X3 [9], i_hsum_pd_X3 [10], i_hsum_pd_X3 [11], i_hsum_pd_X3 [12], i_hsum_pd_X3 [13], i_hsum_pd_X3 [14] } = 0;
  assign { i_hsum_pd_C3 [0], i_hsum_pd_C3 [1], i_hsum_pd_C3 [2], i_hsum_pd_C3 [3], i_hsum_pd_C3 [4], i_hsum_pd_C3 [5], i_hsum_pd_C3 [6], i_hsum_pd_C3 [7], i_hsum_pd_C3 [8], i_hsum_pd_C3 [9], i_hsum_pd_C3 [10], i_hsum_pd_C3 [11], i_hsum_pd_C3 [12], i_hsum_pd_C3 [13], i_hsum_pd_C3 [14] } = 0;
  logic [16:0] i_hsum_pd_C4 ;
  logic [16:0] i_hsum_pd_R4 ;
  logic [16:0] i_hsum_pd_X4 ;
  assign i_hsum_msb_T = i_hsum_pd_T [15] ;
  assign i_hsum_pd_C4 [15] = i_hsum_msb_C ;
  assign i_hsum_pd_R4 [15] = i_hsum_msb_R ;
  assign i_hsum_pd_X4 [15] = i_hsum_msb_X ;
  assign i_hsum_msb_S = i_hsum_pd_S ;
  assign i_hsum_sign = i_hsum_pd[16];
  assign i_hsum_sign_T = i_hsum_pd_T [16] ;
  assign i_hsum_pd_C4 [16] = i_hsum_sign_C ;
  assign i_hsum_pd_R4 [16] = i_hsum_sign_R ;
  assign i_hsum_pd_X4 [16] = i_hsum_sign_X ;
  assign i_hsum_sign_S = i_hsum_pd_S ;
  assign i_last_pd = { i_hsame_sign, i_lsum_pd[31:0] };
  assign i_last_pd_T = {  i_hsame_sign_T , i_lsum_pd_T [31:0]  };
  logic [13:0] i_last_pd_S ;
  assign i_last_pd_S = 0 ;
  logic [15:0] i_hsame_sign_R1 ;
  logic [15:0] i_hsame_sign_X1 ;
  logic [15:0] i_hsame_sign_C1 ;
  assign i_hsame_sign_R1 = i_last_pd_R [47:32] ;
  assign i_hsame_sign_X1 = i_last_pd_X [47:32] ;
  assign i_hsame_sign_C1 = i_last_pd_C [47:32] ;
  assign { i_lsum_pd_R3 [32:32] } = 0;
  assign { i_lsum_pd_X3 [32:32] } = 0;
  assign { i_lsum_pd_C3 [32:32] } = 0;
  logic [32:0] i_lsum_pd_R4 ;
  logic [32:0] i_lsum_pd_X4 ;
  logic [32:0] i_lsum_pd_C4 ;
  assign i_lsum_pd_R4 [31:0] = i_last_pd_R [31:0] ;
  assign i_lsum_pd_X4 [31:0] = i_last_pd_X [31:0] ;
  assign i_lsum_pd_C4 [31:0] = i_last_pd_C [31:0] ;
  assign i_last_pd3 = { i_hsum_pd, i_lsum_pd[31:0] };
  assign i_last_pd3_T = {  i_hsum_pd_T , i_lsum_pd_T [31:0]  };
  logic [13:0] i_last_pd3_S ;
  assign i_last_pd3_S = 0 ;
  assign { i_hsum_pd_R4 [0], i_hsum_pd_R4 [1], i_hsum_pd_R4 [2], i_hsum_pd_R4 [3], i_hsum_pd_R4 [4], i_hsum_pd_R4 [5], i_hsum_pd_R4 [6], i_hsum_pd_R4 [7], i_hsum_pd_R4 [8], i_hsum_pd_R4 [9], i_hsum_pd_R4 [10], i_hsum_pd_R4 [11], i_hsum_pd_R4 [12], i_hsum_pd_R4 [13], i_hsum_pd_R4 [14] } = 0;
  assign { i_hsum_pd_X4 [0], i_hsum_pd_X4 [1], i_hsum_pd_X4 [2], i_hsum_pd_X4 [3], i_hsum_pd_X4 [4], i_hsum_pd_X4 [5], i_hsum_pd_X4 [6], i_hsum_pd_X4 [7], i_hsum_pd_X4 [8], i_hsum_pd_X4 [9], i_hsum_pd_X4 [10], i_hsum_pd_X4 [11], i_hsum_pd_X4 [12], i_hsum_pd_X4 [13], i_hsum_pd_X4 [14] } = 0;
  assign { i_hsum_pd_C4 [0], i_hsum_pd_C4 [1], i_hsum_pd_C4 [2], i_hsum_pd_C4 [3], i_hsum_pd_C4 [4], i_hsum_pd_C4 [5], i_hsum_pd_C4 [6], i_hsum_pd_C4 [7], i_hsum_pd_C4 [8], i_hsum_pd_C4 [9], i_hsum_pd_C4 [10], i_hsum_pd_C4 [11], i_hsum_pd_C4 [12], i_hsum_pd_C4 [13], i_hsum_pd_C4 [14] } = 0;
  logic [16:0] i_hsum_pd_R5 ;
  logic [16:0] i_hsum_pd_X5 ;
  logic [16:0] i_hsum_pd_C5 ;
  assign i_hsum_pd_R5 = i_last_pd3_R [48:32] ;
  assign i_hsum_pd_X5 = i_last_pd3_X [48:32] ;
  assign i_hsum_pd_C5 = i_last_pd3_C [48:32] ;
  assign { i_lsum_pd_R4 [32:32] } = 0;
  assign { i_lsum_pd_X4 [32:32] } = 0;
  assign { i_lsum_pd_C4 [32:32] } = 0;
  logic [32:0] i_lsum_pd_R5 ;
  logic [32:0] i_lsum_pd_X5 ;
  logic [32:0] i_lsum_pd_C5 ;
  assign i_lsum_pd_R5 [31:0] = i_last_pd3_R [31:0] ;
  assign i_lsum_pd_X5 [31:0] = i_last_pd3_X [31:0] ;
  assign i_lsum_pd_C5 [31:0] = i_last_pd3_C [31:0] ;
  assign i_lsum_msb = i_lsum_pd[32];
  assign i_lsum_msb_T = i_lsum_pd_T [32] ;
  assign i_lsum_pd_C5 [32] = i_lsum_msb_C ;
  assign i_lsum_pd_R5 [32] = i_lsum_msb_R ;
  assign i_lsum_pd_X5 [32] = i_lsum_msb_X ;
  assign i_lsum_msb_S = i_lsum_pd_S ;
  assign i_lsum_msb_nxt = i_lsum_pd_nxt[32];
  assign { i_lsum_pd_nxt_R1 [0], i_lsum_pd_nxt_R1 [1], i_lsum_pd_nxt_R1 [2], i_lsum_pd_nxt_R1 [3], i_lsum_pd_nxt_R1 [4], i_lsum_pd_nxt_R1 [5], i_lsum_pd_nxt_R1 [6], i_lsum_pd_nxt_R1 [7], i_lsum_pd_nxt_R1 [8], i_lsum_pd_nxt_R1 [9], i_lsum_pd_nxt_R1 [10], i_lsum_pd_nxt_R1 [11], i_lsum_pd_nxt_R1 [12], i_lsum_pd_nxt_R1 [13], i_lsum_pd_nxt_R1 [14], i_lsum_pd_nxt_R1 [15], i_lsum_pd_nxt_R1 [16], i_lsum_pd_nxt_R1 [17], i_lsum_pd_nxt_R1 [18], i_lsum_pd_nxt_R1 [19], i_lsum_pd_nxt_R1 [20], i_lsum_pd_nxt_R1 [21], i_lsum_pd_nxt_R1 [22], i_lsum_pd_nxt_R1 [23], i_lsum_pd_nxt_R1 [24], i_lsum_pd_nxt_R1 [25], i_lsum_pd_nxt_R1 [26], i_lsum_pd_nxt_R1 [27], i_lsum_pd_nxt_R1 [28], i_lsum_pd_nxt_R1 [29], i_lsum_pd_nxt_R1 [30], i_lsum_pd_nxt_R1 [31] } = 0;
  assign { i_lsum_pd_nxt_X1 [0], i_lsum_pd_nxt_X1 [1], i_lsum_pd_nxt_X1 [2], i_lsum_pd_nxt_X1 [3], i_lsum_pd_nxt_X1 [4], i_lsum_pd_nxt_X1 [5], i_lsum_pd_nxt_X1 [6], i_lsum_pd_nxt_X1 [7], i_lsum_pd_nxt_X1 [8], i_lsum_pd_nxt_X1 [9], i_lsum_pd_nxt_X1 [10], i_lsum_pd_nxt_X1 [11], i_lsum_pd_nxt_X1 [12], i_lsum_pd_nxt_X1 [13], i_lsum_pd_nxt_X1 [14], i_lsum_pd_nxt_X1 [15], i_lsum_pd_nxt_X1 [16], i_lsum_pd_nxt_X1 [17], i_lsum_pd_nxt_X1 [18], i_lsum_pd_nxt_X1 [19], i_lsum_pd_nxt_X1 [20], i_lsum_pd_nxt_X1 [21], i_lsum_pd_nxt_X1 [22], i_lsum_pd_nxt_X1 [23], i_lsum_pd_nxt_X1 [24], i_lsum_pd_nxt_X1 [25], i_lsum_pd_nxt_X1 [26], i_lsum_pd_nxt_X1 [27], i_lsum_pd_nxt_X1 [28], i_lsum_pd_nxt_X1 [29], i_lsum_pd_nxt_X1 [30], i_lsum_pd_nxt_X1 [31] } = 0;
  assign { i_lsum_pd_nxt_C1 [0], i_lsum_pd_nxt_C1 [1], i_lsum_pd_nxt_C1 [2], i_lsum_pd_nxt_C1 [3], i_lsum_pd_nxt_C1 [4], i_lsum_pd_nxt_C1 [5], i_lsum_pd_nxt_C1 [6], i_lsum_pd_nxt_C1 [7], i_lsum_pd_nxt_C1 [8], i_lsum_pd_nxt_C1 [9], i_lsum_pd_nxt_C1 [10], i_lsum_pd_nxt_C1 [11], i_lsum_pd_nxt_C1 [12], i_lsum_pd_nxt_C1 [13], i_lsum_pd_nxt_C1 [14], i_lsum_pd_nxt_C1 [15], i_lsum_pd_nxt_C1 [16], i_lsum_pd_nxt_C1 [17], i_lsum_pd_nxt_C1 [18], i_lsum_pd_nxt_C1 [19], i_lsum_pd_nxt_C1 [20], i_lsum_pd_nxt_C1 [21], i_lsum_pd_nxt_C1 [22], i_lsum_pd_nxt_C1 [23], i_lsum_pd_nxt_C1 [24], i_lsum_pd_nxt_C1 [25], i_lsum_pd_nxt_C1 [26], i_lsum_pd_nxt_C1 [27], i_lsum_pd_nxt_C1 [28], i_lsum_pd_nxt_C1 [29], i_lsum_pd_nxt_C1 [30], i_lsum_pd_nxt_C1 [31] } = 0;
  logic [32:0] i_lsum_pd_nxt_C2 ;
  logic [32:0] i_lsum_pd_nxt_R2 ;
  logic [32:0] i_lsum_pd_nxt_X2 ;
  assign i_lsum_msb_nxt_T = i_lsum_pd_nxt_T [32] ;
  assign i_lsum_pd_nxt_C2 [32] = i_lsum_msb_nxt_C ;
  assign i_lsum_pd_nxt_R2 [32] = i_lsum_msb_nxt_R ;
  assign i_lsum_pd_nxt_X2 [32] = i_lsum_msb_nxt_X ;
  assign i_lsum_msb_nxt_S = i_lsum_pd_nxt_S ;
  assign i_pos_pd = i_tru_pd;
  logic [31:0] i_tru_pd_C1 ;
  logic [31:0] i_tru_pd_R1 ;
  logic [31:0] i_tru_pd_X1 ;
  assign i_pos_pd_T = i_tru_pd_T ;
  assign i_tru_pd_C1 = i_pos_pd_C ;
  assign i_tru_pd_R1 = i_pos_pd_R ;
  assign i_tru_pd_X1 = i_pos_pd_X ;
  assign i_pos_pd_S = i_tru_pd_S ;
  assign i_sat_pd = i_partial_result;
  assign { i_partial_result_R4 [0], i_partial_result_R4 [1], i_partial_result_R4 [2], i_partial_result_R4 [3], i_partial_result_R4 [4], i_partial_result_R4 [5], i_partial_result_R4 [6], i_partial_result_R4 [7], i_partial_result_R4 [8], i_partial_result_R4 [9], i_partial_result_R4 [10], i_partial_result_R4 [11], i_partial_result_R4 [12], i_partial_result_R4 [13], i_partial_result_R4 [14], i_partial_result_R4 [15], i_partial_result_R4 [16], i_partial_result_R4 [17], i_partial_result_R4 [18], i_partial_result_R4 [19], i_partial_result_R4 [20], i_partial_result_R4 [21], i_partial_result_R4 [22], i_partial_result_R4 [23], i_partial_result_R4 [24], i_partial_result_R4 [25], i_partial_result_R4 [26], i_partial_result_R4 [27], i_partial_result_R4 [28], i_partial_result_R4 [29], i_partial_result_R4 [30], i_partial_result_R4 [31], i_partial_result_R4 [32], i_partial_result_R4 [33], i_partial_result_R4 [34], i_partial_result_R4 [35], i_partial_result_R4 [36], i_partial_result_R4 [37], i_partial_result_R4 [38], i_partial_result_R4 [39], i_partial_result_R4 [40], i_partial_result_R4 [41], i_partial_result_R4 [42], i_partial_result_R4 [43], i_partial_result_R4 [44], i_partial_result_R4 [45], i_partial_result_R4 [46] } = 0;
  assign { i_partial_result_X4 [0], i_partial_result_X4 [1], i_partial_result_X4 [2], i_partial_result_X4 [3], i_partial_result_X4 [4], i_partial_result_X4 [5], i_partial_result_X4 [6], i_partial_result_X4 [7], i_partial_result_X4 [8], i_partial_result_X4 [9], i_partial_result_X4 [10], i_partial_result_X4 [11], i_partial_result_X4 [12], i_partial_result_X4 [13], i_partial_result_X4 [14], i_partial_result_X4 [15], i_partial_result_X4 [16], i_partial_result_X4 [17], i_partial_result_X4 [18], i_partial_result_X4 [19], i_partial_result_X4 [20], i_partial_result_X4 [21], i_partial_result_X4 [22], i_partial_result_X4 [23], i_partial_result_X4 [24], i_partial_result_X4 [25], i_partial_result_X4 [26], i_partial_result_X4 [27], i_partial_result_X4 [28], i_partial_result_X4 [29], i_partial_result_X4 [30], i_partial_result_X4 [31], i_partial_result_X4 [32], i_partial_result_X4 [33], i_partial_result_X4 [34], i_partial_result_X4 [35], i_partial_result_X4 [36], i_partial_result_X4 [37], i_partial_result_X4 [38], i_partial_result_X4 [39], i_partial_result_X4 [40], i_partial_result_X4 [41], i_partial_result_X4 [42], i_partial_result_X4 [43], i_partial_result_X4 [44], i_partial_result_X4 [45], i_partial_result_X4 [46] } = 0;
  assign { i_partial_result_C4 [0], i_partial_result_C4 [1], i_partial_result_C4 [2], i_partial_result_C4 [3], i_partial_result_C4 [4], i_partial_result_C4 [5], i_partial_result_C4 [6], i_partial_result_C4 [7], i_partial_result_C4 [8], i_partial_result_C4 [9], i_partial_result_C4 [10], i_partial_result_C4 [11], i_partial_result_C4 [12], i_partial_result_C4 [13], i_partial_result_C4 [14], i_partial_result_C4 [15], i_partial_result_C4 [16], i_partial_result_C4 [17], i_partial_result_C4 [18], i_partial_result_C4 [19], i_partial_result_C4 [20], i_partial_result_C4 [21], i_partial_result_C4 [22], i_partial_result_C4 [23], i_partial_result_C4 [24], i_partial_result_C4 [25], i_partial_result_C4 [26], i_partial_result_C4 [27], i_partial_result_C4 [28], i_partial_result_C4 [29], i_partial_result_C4 [30], i_partial_result_C4 [31], i_partial_result_C4 [32], i_partial_result_C4 [33], i_partial_result_C4 [34], i_partial_result_C4 [35], i_partial_result_C4 [36], i_partial_result_C4 [37], i_partial_result_C4 [38], i_partial_result_C4 [39], i_partial_result_C4 [40], i_partial_result_C4 [41], i_partial_result_C4 [42], i_partial_result_C4 [43], i_partial_result_C4 [44], i_partial_result_C4 [45], i_partial_result_C4 [46] } = 0;
  logic [47:0] i_partial_result_C5 ;
  logic [47:0] i_partial_result_R5 ;
  logic [47:0] i_partial_result_X5 ;
  assign i_sat_pd_T = i_partial_result_T ;
  assign i_partial_result_C5 = i_sat_pd_C ;
  assign i_partial_result_R5 = i_sat_pd_R ;
  assign i_partial_result_X5 = i_sat_pd_X ;
  assign i_sat_pd_S = i_partial_result_S ;
  assign i_sat_pd3[47] = i_hsum_pd[16];
  logic [16:0] i_hsum_pd_C6 ;
  logic [16:0] i_hsum_pd_R6 ;
  logic [16:0] i_hsum_pd_X6 ;
  assign i_sat_pd3_T [47] = i_hsum_pd_T [16] ;
  assign i_hsum_pd_C6 [16] = i_sat_pd3_C [47] ;
  assign i_hsum_pd_R6 [16] = i_sat_pd3_R [47] ;
  assign i_hsum_pd_X6 [16] = i_sat_pd3_X [47] ;
  assign i_sat_pd3_S = i_hsum_pd_S ;
  assign i_sat_sign = i_partial_result[47];
  logic [47:0] i_partial_result_C6 ;
  logic [47:0] i_partial_result_R6 ;
  logic [47:0] i_partial_result_X6 ;
  assign i_sat_sign_T = i_partial_result_T [47] ;
  assign i_partial_result_C6 [47] = i_sat_sign_C ;
  assign i_partial_result_R6 [47] = i_sat_sign_R ;
  assign i_partial_result_X6 [47] = i_sat_sign_X ;
  assign i_sat_sign_S = i_partial_result_S ;
  assign i_sel = in_sel;
  logic [0:0] in_sel_C1 ;
  logic [0:0] in_sel_R1 ;
  logic [0:0] in_sel_X1 ;
  assign i_sel_T = in_sel_T ;
  assign in_sel_C1 = i_sel_C ;
  assign in_sel_R1 = i_sel_R ;
  assign in_sel_X1 = i_sel_X ;
  assign i_sel_S = in_sel_S ;
  assign i_vld = in_valid;
  logic [0:0] in_valid_C7 ;
  logic [0:0] in_valid_R7 ;
  logic [0:0] in_valid_X7 ;
  assign i_vld_T = in_valid_T ;
  assign in_valid_C7 = i_vld_C ;
  assign in_valid_R7 = i_vld_R ;
  assign in_valid_X7 = i_vld_X ;
  assign i_vld_S = in_valid_S ;
  assign oi_hsb_pd = in_mask_op[47:32];
  assign { in_mask_op_R3 [0], in_mask_op_R3 [1], in_mask_op_R3 [2], in_mask_op_R3 [3], in_mask_op_R3 [4], in_mask_op_R3 [5], in_mask_op_R3 [6], in_mask_op_R3 [7], in_mask_op_R3 [8], in_mask_op_R3 [9], in_mask_op_R3 [10], in_mask_op_R3 [11], in_mask_op_R3 [12], in_mask_op_R3 [13], in_mask_op_R3 [14], in_mask_op_R3 [15], in_mask_op_R3 [16], in_mask_op_R3 [17], in_mask_op_R3 [18], in_mask_op_R3 [19], in_mask_op_R3 [20], in_mask_op_R3 [21], in_mask_op_R3 [22], in_mask_op_R3 [23], in_mask_op_R3 [24], in_mask_op_R3 [25], in_mask_op_R3 [26], in_mask_op_R3 [27], in_mask_op_R3 [28], in_mask_op_R3 [29], in_mask_op_R3 [30], in_mask_op_R3 [31] } = 0;
  assign { in_mask_op_X3 [0], in_mask_op_X3 [1], in_mask_op_X3 [2], in_mask_op_X3 [3], in_mask_op_X3 [4], in_mask_op_X3 [5], in_mask_op_X3 [6], in_mask_op_X3 [7], in_mask_op_X3 [8], in_mask_op_X3 [9], in_mask_op_X3 [10], in_mask_op_X3 [11], in_mask_op_X3 [12], in_mask_op_X3 [13], in_mask_op_X3 [14], in_mask_op_X3 [15], in_mask_op_X3 [16], in_mask_op_X3 [17], in_mask_op_X3 [18], in_mask_op_X3 [19], in_mask_op_X3 [20], in_mask_op_X3 [21], in_mask_op_X3 [22], in_mask_op_X3 [23], in_mask_op_X3 [24], in_mask_op_X3 [25], in_mask_op_X3 [26], in_mask_op_X3 [27], in_mask_op_X3 [28], in_mask_op_X3 [29], in_mask_op_X3 [30], in_mask_op_X3 [31] } = 0;
  assign { in_mask_op_C3 [0], in_mask_op_C3 [1], in_mask_op_C3 [2], in_mask_op_C3 [3], in_mask_op_C3 [4], in_mask_op_C3 [5], in_mask_op_C3 [6], in_mask_op_C3 [7], in_mask_op_C3 [8], in_mask_op_C3 [9], in_mask_op_C3 [10], in_mask_op_C3 [11], in_mask_op_C3 [12], in_mask_op_C3 [13], in_mask_op_C3 [14], in_mask_op_C3 [15], in_mask_op_C3 [16], in_mask_op_C3 [17], in_mask_op_C3 [18], in_mask_op_C3 [19], in_mask_op_C3 [20], in_mask_op_C3 [21], in_mask_op_C3 [22], in_mask_op_C3 [23], in_mask_op_C3 [24], in_mask_op_C3 [25], in_mask_op_C3 [26], in_mask_op_C3 [27], in_mask_op_C3 [28], in_mask_op_C3 [29], in_mask_op_C3 [30], in_mask_op_C3 [31] } = 0;
  logic [47:0] in_mask_op_C4 ;
  logic [47:0] in_mask_op_R4 ;
  logic [47:0] in_mask_op_X4 ;
  assign oi_hsb_pd_T = in_mask_op_T [47:32] ;
  assign in_mask_op_C4 [47:32] = oi_hsb_pd_C ;
  assign in_mask_op_R4 [47:32] = oi_hsb_pd_R ;
  assign in_mask_op_X4 [47:32] = oi_hsb_pd_X ;
  assign oi_hsb_pd_S = in_mask_op_S ;
  assign oi_lsb_pd = in_mask_op[31:0];
  assign oi_lsb_pd_T = in_mask_op_T [31:0] ;
  assign in_mask_op_C4 [31:0] = oi_lsb_pd_C ;
  assign in_mask_op_R4 [31:0] = oi_lsb_pd_R ;
  assign in_mask_op_X4 [31:0] = oi_lsb_pd_X ;
  assign oi_lsb_pd_S = in_mask_op_S ;
  assign oi_sign = in_mask_op[47];
  logic [47:0] in_mask_op_C5 ;
  logic [47:0] in_mask_op_R5 ;
  logic [47:0] in_mask_op_X5 ;
  assign oi_sign_T = in_mask_op_T [47] ;
  assign in_mask_op_C5 [47] = oi_sign_C ;
  assign in_mask_op_R5 [47] = oi_sign_R ;
  assign in_mask_op_X5 [47] = oi_sign_X ;
  assign oi_sign_S = in_mask_op_S ;
  assign in_op_C = ( in_op_C0 );
  assign in_op_valid_C = ( in_op_valid_C0 );
  assign i_tru_pd_C = ( i_tru_pd_C0 ) | ( i_tru_pd_C1 );
  assign i_sft_max_C = ( i_sft_max_C0 );
  assign fangyuan12_C = ( fangyuan12_C0 );
  assign fangyuan11_C = ( fangyuan11_C0 );
  assign i_sat_pd3_C = ( i_sat_pd3_C0 );
  assign i_hsame_sign_C = ( i_hsame_sign_C0 ) | ( i_hsame_sign_C1 );
  assign cfg_truncate_C = ( cfg_truncate_C0 );
  assign fangyuan10_C = ( fangyuan10_C0 );
  assign i_pre_sft_pd_C = ( i_pre_sft_pd_C0 );
  assign fangyuan8_C = ( fangyuan8_C0 );
  assign i_stick_C = ( i_stick_C0 ) | ( i_stick_C1 );
  assign fangyuan7_C = ( fangyuan7_C0 );
  assign fangyuan6_C = ( fangyuan6_C0 );
  assign fangyuan5_C = ( fangyuan5_C0 );
  assign in_sel_C = ( in_sel_C0 ) | ( in_sel_C1 );
  assign di_sign_d_C = ( di_sign_d_C0 ) | ( di_sign_d_C1 );
  assign in_hsb_same_d_C = ( in_hsb_same_d_C0 ) | ( in_hsb_same_d_C1 );
  assign i_lsum_pd_nxt_C = ( i_lsum_pd_nxt_C0 ) | ( i_lsum_pd_nxt_C1 ) | ( i_lsum_pd_nxt_C2 );
  assign i_hsum_pd_nxt_C = ( i_hsum_pd_nxt_C0 );
  assign _010__C = ( _010__C0 );
  assign fangyuan4_C = ( fangyuan4_C0 );
  assign fangyuan3_C = ( fangyuan3_C0 );
  assign _030__C = ( _030__C0 );
  assign oi_sign_d_C = ( oi_sign_d_C0 ) | ( oi_sign_d_C1 ) | ( oi_sign_d_C2 ) | ( oi_sign_d_C3 ) | ( oi_sign_d_C4 ) | ( oi_sign_d_C5 ) | ( oi_sign_d_C6 ) | ( oi_sign_d_C7 ) | ( oi_sign_d_C8 ) | ( oi_sign_d_C9 ) | ( oi_sign_d_C10 ) | ( oi_sign_d_C11 ) | ( oi_sign_d_C12 ) | ( oi_sign_d_C13 ) | ( oi_sign_d_C14 ) | ( oi_sign_d_C15 ) | ( oi_sign_d_C16 );
  assign _022__C = ( _022__C0 ) | ( _022__C1 ) | ( _022__C2 ) | ( _022__C3 ) | ( _022__C4 ) | ( _022__C5 ) | ( _022__C6 ) | ( _022__C7 ) | ( _022__C8 ) | ( _022__C9 ) | ( _022__C10 ) | ( _022__C11 ) | ( _022__C12 ) | ( _022__C13 ) | ( _022__C14 ) | ( _022__C15 );
  assign fangyuan2_C = ( fangyuan2_C0 );
  assign fangyuan1_C = ( fangyuan1_C0 );
  assign _029__C = ( _029__C0 );
  assign _023__C = ( _023__C0 ) | ( _023__C1 ) | ( _023__C2 ) | ( _023__C3 ) | ( _023__C4 ) | ( _023__C5 ) | ( _023__C6 ) | ( _023__C7 ) | ( _023__C8 ) | ( _023__C9 ) | ( _023__C10 ) | ( _023__C11 ) | ( _023__C12 ) | ( _023__C13 ) | ( _023__C14 ) | ( _023__C15 ) | ( _023__C16 ) | ( _023__C17 ) | ( _023__C18 ) | ( _023__C19 ) | ( _023__C20 ) | ( _023__C21 ) | ( _023__C22 ) | ( _023__C23 ) | ( _023__C24 ) | ( _023__C25 ) | ( _023__C26 ) | ( _023__C27 ) | ( _023__C28 ) | ( _023__C29 ) | ( _023__C30 ) | ( _023__C31 ) | ( _023__C32 ) | ( _023__C33 ) | ( _023__C34 ) | ( _023__C35 ) | ( _023__C36 ) | ( _023__C37 ) | ( _023__C38 ) | ( _023__C39 ) | ( _023__C40 ) | ( _023__C41 ) | ( _023__C42 ) | ( _023__C43 ) | ( _023__C44 ) | ( _023__C45 ) | ( _023__C46 );
  assign i_final_result_C = ( i_final_result_C0 );
  assign _003__C = ( _003__C0 );
  assign _000__C = ( _000__C0 );
  assign _005__C = ( _005__C0 );
  assign _004__C = ( _004__C0 );
  assign _002__C = ( _002__C0 );
  assign _001__C = ( _001__C0 );
  assign i_partial_vld_C = ( i_partial_vld_C0 ) | ( i_partial_vld_C1 );
  assign _008__C = ( _008__C0 );
  assign _007__C = ( _007__C0 );
  assign _006__C = ( _006__C0 );
  assign _034__C = ( _034__C0 );
  assign _013__C = ( _013__C0 );
  assign _027__C = ( _027__C0 );
  assign _012__C = ( _012__C0 );
  assign _011__C = ( _011__C0 );
  assign _031__C = ( _031__C0 );
  assign i_hsum_pd_C = ( i_hsum_pd_C0 ) | ( i_hsum_pd_C1 ) | ( i_hsum_pd_C2 ) | ( i_hsum_pd_C3 ) | ( i_hsum_pd_C4 ) | ( i_hsum_pd_C5 ) | ( i_hsum_pd_C6 );
  assign i_lsum_pd_C = ( i_lsum_pd_C0 ) | ( i_lsum_pd_C1 ) | ( i_lsum_pd_C2 ) | ( i_lsum_pd_C3 ) | ( i_lsum_pd_C4 ) | ( i_lsum_pd_C5 );
  assign in_hsb_same_C = ( in_hsb_same_C0 ) | ( in_hsb_same_C1 ) | ( in_hsb_same_C2 ) | ( in_hsb_same_C3 ) | ( in_hsb_same_C4 );
  assign _018__C = ( _018__C0 );
  assign _017__C = ( _017__C0 );
  assign _016__C = ( _016__C0 );
  assign _015__C = ( _015__C0 );
  assign _020__C = ( _020__C0 );
  assign _019__C = ( _019__C0 );
  assign i_sft_need_sat_C = ( i_sft_need_sat_C0 ) | ( i_sft_need_sat_C1 );
  assign i_final_vld_C = ( i_final_vld_C0 ) | ( i_final_vld_C1 ) | ( i_final_vld_C2 );
  assign _026__C = ( _026__C0 );
  assign i_sat_vld_C = ( i_sat_vld_C0 ) | ( i_sat_vld_C1 );
  assign _028__C = ( _028__C0 );
  assign _014__C = ( _014__C0 );
  assign i_guide_C = ( i_guide_C0 ) | ( i_guide_C1 );
  assign i_sat_sel_C = ( i_sat_sel_C0 ) | ( i_sat_sel_C1 ) | ( i_sat_sel_C2 ) | ( i_sat_sel_C3 ) | ( i_sat_sel_C4 );
  assign _032__C = ( _032__C0 );
  assign _033__C = ( _033__C0 );
  assign _025__C = ( _025__C0 ) | ( _025__C1 ) | ( _025__C2 );
  assign _024__C = ( _024__C0 );
  assign i_partial_result_C = ( i_partial_result_C0 ) | ( i_partial_result_C1 ) | ( i_partial_result_C2 ) | ( i_partial_result_C3 ) | ( i_partial_result_C4 ) | ( i_partial_result_C5 ) | ( i_partial_result_C6 );
  assign _021__C = ( _021__C0 );
  assign in_valid_C = ( in_valid_C0 ) | ( in_valid_C1 ) | ( in_valid_C2 ) | ( in_valid_C3 ) | ( in_valid_C4 ) | ( in_valid_C5 ) | ( in_valid_C6 ) | ( in_valid_C7 );
  assign i_point5_C = ( i_point5_C0 ) | ( i_point5_C1 );
  assign i_sft_pd_C = ( i_sft_pd_C0 ) | ( i_sft_pd_C1 ) | ( i_sft_pd_C2 ) | ( i_sft_pd_C3 );
  assign fangyuan0_C = ( fangyuan0_C0 );
  assign _009__C = ( _009__C0 );
  assign i_lsum_msb_tmp_C = ( i_lsum_msb_tmp_C0 );
  assign oi_hsb_pd_tmp_C = ( oi_hsb_pd_tmp_C0 );
  assign di_hsb_pd_tmp_C = ( di_hsb_pd_tmp_C0 );
  assign in_mask_op_C = ( in_mask_op_C0 ) | ( in_mask_op_C1 ) | ( in_mask_op_C2 ) | ( in_mask_op_C3 ) | ( in_mask_op_C4 ) | ( in_mask_op_C5 );
  assign in_data_C = ( in_data_C0 ) | ( in_data_C1 ) | ( in_data_C2 ) | ( in_data_C3 ) | ( in_data_C4 ) | ( in_data_C5 );
  assign out_partial_valid_C = ( out_partial_valid_C0 );
  assign out_partial_data_C = ( out_partial_data_C0 ) | ( out_partial_data_C1 );
  assign out_final_valid_C = ( out_final_valid_C0 );
  assign out_final_sat_C = ( out_final_sat_C0 );
  assign out_final_data_C = ( out_final_data_C0 ) | ( out_final_data_C1 );
  assign in_op_X = ( in_op_X0 );
  assign in_op_valid_X = ( in_op_valid_X0 );
  assign i_tru_pd_X = ( i_tru_pd_X0 ) | ( i_tru_pd_X1 );
  assign i_sft_max_X = ( i_sft_max_X0 );
  assign fangyuan12_X = ( fangyuan12_X0 );
  assign fangyuan11_X = ( fangyuan11_X0 );
  assign i_sat_pd3_X = ( i_sat_pd3_X0 );
  assign i_hsame_sign_X = ( i_hsame_sign_X0 ) | ( i_hsame_sign_X1 );
  assign cfg_truncate_X = ( cfg_truncate_X0 );
  assign fangyuan10_X = ( fangyuan10_X0 );
  assign i_pre_sft_pd_X = ( i_pre_sft_pd_X0 );
  assign fangyuan8_X = ( fangyuan8_X0 );
  assign i_stick_X = ( i_stick_X0 ) | ( i_stick_X1 );
  assign fangyuan7_X = ( fangyuan7_X0 );
  assign fangyuan6_X = ( fangyuan6_X0 );
  assign fangyuan5_X = ( fangyuan5_X0 );
  assign in_sel_X = ( in_sel_X0 ) | ( in_sel_X1 );
  assign di_sign_d_X = ( di_sign_d_X0 ) | ( di_sign_d_X1 );
  assign in_hsb_same_d_X = ( in_hsb_same_d_X0 ) | ( in_hsb_same_d_X1 );
  assign i_lsum_pd_nxt_X = ( i_lsum_pd_nxt_X0 ) | ( i_lsum_pd_nxt_X1 ) | ( i_lsum_pd_nxt_X2 );
  assign i_hsum_pd_nxt_X = ( i_hsum_pd_nxt_X0 );
  assign _010__X = ( _010__X0 );
  assign fangyuan4_X = ( fangyuan4_X0 );
  assign fangyuan3_X = ( fangyuan3_X0 );
  assign _030__X = ( _030__X0 );
  assign oi_sign_d_X = ( oi_sign_d_X0 ) | ( oi_sign_d_X1 ) | ( oi_sign_d_X2 ) | ( oi_sign_d_X3 ) | ( oi_sign_d_X4 ) | ( oi_sign_d_X5 ) | ( oi_sign_d_X6 ) | ( oi_sign_d_X7 ) | ( oi_sign_d_X8 ) | ( oi_sign_d_X9 ) | ( oi_sign_d_X10 ) | ( oi_sign_d_X11 ) | ( oi_sign_d_X12 ) | ( oi_sign_d_X13 ) | ( oi_sign_d_X14 ) | ( oi_sign_d_X15 ) | ( oi_sign_d_X16 );
  assign _022__X = ( _022__X0 ) | ( _022__X1 ) | ( _022__X2 ) | ( _022__X3 ) | ( _022__X4 ) | ( _022__X5 ) | ( _022__X6 ) | ( _022__X7 ) | ( _022__X8 ) | ( _022__X9 ) | ( _022__X10 ) | ( _022__X11 ) | ( _022__X12 ) | ( _022__X13 ) | ( _022__X14 ) | ( _022__X15 );
  assign fangyuan2_X = ( fangyuan2_X0 );
  assign fangyuan1_X = ( fangyuan1_X0 );
  assign _029__X = ( _029__X0 );
  assign _023__X = ( _023__X0 ) | ( _023__X1 ) | ( _023__X2 ) | ( _023__X3 ) | ( _023__X4 ) | ( _023__X5 ) | ( _023__X6 ) | ( _023__X7 ) | ( _023__X8 ) | ( _023__X9 ) | ( _023__X10 ) | ( _023__X11 ) | ( _023__X12 ) | ( _023__X13 ) | ( _023__X14 ) | ( _023__X15 ) | ( _023__X16 ) | ( _023__X17 ) | ( _023__X18 ) | ( _023__X19 ) | ( _023__X20 ) | ( _023__X21 ) | ( _023__X22 ) | ( _023__X23 ) | ( _023__X24 ) | ( _023__X25 ) | ( _023__X26 ) | ( _023__X27 ) | ( _023__X28 ) | ( _023__X29 ) | ( _023__X30 ) | ( _023__X31 ) | ( _023__X32 ) | ( _023__X33 ) | ( _023__X34 ) | ( _023__X35 ) | ( _023__X36 ) | ( _023__X37 ) | ( _023__X38 ) | ( _023__X39 ) | ( _023__X40 ) | ( _023__X41 ) | ( _023__X42 ) | ( _023__X43 ) | ( _023__X44 ) | ( _023__X45 ) | ( _023__X46 );
  assign i_final_result_X = ( i_final_result_X0 );
  assign _003__X = ( _003__X0 );
  assign _000__X = ( _000__X0 );
  assign _005__X = ( _005__X0 );
  assign _004__X = ( _004__X0 );
  assign _002__X = ( _002__X0 );
  assign _001__X = ( _001__X0 );
  assign i_partial_vld_X = ( i_partial_vld_X0 ) | ( i_partial_vld_X1 );
  assign _008__X = ( _008__X0 );
  assign _007__X = ( _007__X0 );
  assign _006__X = ( _006__X0 );
  assign _034__X = ( _034__X0 );
  assign _013__X = ( _013__X0 );
  assign _027__X = ( _027__X0 );
  assign _012__X = ( _012__X0 );
  assign _011__X = ( _011__X0 );
  assign _031__X = ( _031__X0 );
  assign i_hsum_pd_X = ( i_hsum_pd_X0 ) | ( i_hsum_pd_X1 ) | ( i_hsum_pd_X2 ) | ( i_hsum_pd_X3 ) | ( i_hsum_pd_X4 ) | ( i_hsum_pd_X5 ) | ( i_hsum_pd_X6 );
  assign i_lsum_pd_X = ( i_lsum_pd_X0 ) | ( i_lsum_pd_X1 ) | ( i_lsum_pd_X2 ) | ( i_lsum_pd_X3 ) | ( i_lsum_pd_X4 ) | ( i_lsum_pd_X5 );
  assign in_hsb_same_X = ( in_hsb_same_X0 ) | ( in_hsb_same_X1 ) | ( in_hsb_same_X2 ) | ( in_hsb_same_X3 ) | ( in_hsb_same_X4 );
  assign _018__X = ( _018__X0 );
  assign _017__X = ( _017__X0 );
  assign _016__X = ( _016__X0 );
  assign _015__X = ( _015__X0 );
  assign _020__X = ( _020__X0 );
  assign _019__X = ( _019__X0 );
  assign i_sft_need_sat_X = ( i_sft_need_sat_X0 ) | ( i_sft_need_sat_X1 );
  assign i_final_vld_X = ( i_final_vld_X0 ) | ( i_final_vld_X1 ) | ( i_final_vld_X2 );
  assign _026__X = ( _026__X0 );
  assign i_sat_vld_X = ( i_sat_vld_X0 ) | ( i_sat_vld_X1 );
  assign _028__X = ( _028__X0 );
  assign _014__X = ( _014__X0 );
  assign i_guide_X = ( i_guide_X0 ) | ( i_guide_X1 );
  assign i_sat_sel_X = ( i_sat_sel_X0 ) | ( i_sat_sel_X1 ) | ( i_sat_sel_X2 ) | ( i_sat_sel_X3 ) | ( i_sat_sel_X4 );
  assign _032__X = ( _032__X0 );
  assign _033__X = ( _033__X0 );
  assign _025__X = ( _025__X0 ) | ( _025__X1 ) | ( _025__X2 );
  assign _024__X = ( _024__X0 );
  assign i_partial_result_X = ( i_partial_result_X0 ) | ( i_partial_result_X1 ) | ( i_partial_result_X2 ) | ( i_partial_result_X3 ) | ( i_partial_result_X4 ) | ( i_partial_result_X5 ) | ( i_partial_result_X6 );
  assign _021__X = ( _021__X0 );
  assign in_valid_X = ( in_valid_X0 ) | ( in_valid_X1 ) | ( in_valid_X2 ) | ( in_valid_X3 ) | ( in_valid_X4 ) | ( in_valid_X5 ) | ( in_valid_X6 ) | ( in_valid_X7 );
  assign i_point5_X = ( i_point5_X0 ) | ( i_point5_X1 );
  assign i_sft_pd_X = ( i_sft_pd_X0 ) | ( i_sft_pd_X1 ) | ( i_sft_pd_X2 ) | ( i_sft_pd_X3 );
  assign fangyuan0_X = ( fangyuan0_X0 );
  assign _009__X = ( _009__X0 );
  assign i_lsum_msb_tmp_X = ( i_lsum_msb_tmp_X0 );
  assign oi_hsb_pd_tmp_X = ( oi_hsb_pd_tmp_X0 );
  assign di_hsb_pd_tmp_X = ( di_hsb_pd_tmp_X0 );
  assign in_mask_op_X = ( in_mask_op_X0 ) | ( in_mask_op_X1 ) | ( in_mask_op_X2 ) | ( in_mask_op_X3 ) | ( in_mask_op_X4 ) | ( in_mask_op_X5 );
  assign in_data_X = ( in_data_X0 ) | ( in_data_X1 ) | ( in_data_X2 ) | ( in_data_X3 ) | ( in_data_X4 ) | ( in_data_X5 );
  assign out_partial_valid_X = ( out_partial_valid_X0 );
  assign out_partial_data_X = ( out_partial_data_X0 ) | ( out_partial_data_X1 );
  assign out_final_valid_X = ( out_final_valid_X0 );
  assign out_final_sat_X = ( out_final_sat_X0 );
  assign out_final_data_X = ( out_final_data_X0 ) | ( out_final_data_X1 );
  assign in_op_R = ( in_op_X0 & in_op_R0 );
  assign in_op_valid_R = ( in_op_valid_X0 & in_op_valid_R0 );
  assign i_tru_pd_R = ( i_tru_pd_X0 & i_tru_pd_R0 ) | ( i_tru_pd_X1 & i_tru_pd_R1 );
  assign i_sft_max_R = ( i_sft_max_X0 & i_sft_max_R0 );
  assign fangyuan12_R = ( fangyuan12_X0 & fangyuan12_R0 );
  assign fangyuan11_R = ( fangyuan11_X0 & fangyuan11_R0 );
  assign i_sat_pd3_R = ( i_sat_pd3_X0 & i_sat_pd3_R0 );
  assign i_hsame_sign_R = ( i_hsame_sign_X0 & i_hsame_sign_R0 ) | ( i_hsame_sign_X1 & i_hsame_sign_R1 );
  assign cfg_truncate_R = ( cfg_truncate_X0 & cfg_truncate_R0 );
  assign fangyuan10_R = ( fangyuan10_X0 & fangyuan10_R0 );
  assign i_pre_sft_pd_R = ( i_pre_sft_pd_X0 & i_pre_sft_pd_R0 );
  assign fangyuan8_R = ( fangyuan8_X0 & fangyuan8_R0 );
  assign i_stick_R = ( i_stick_X0 & i_stick_R0 ) | ( i_stick_X1 & i_stick_R1 );
  assign fangyuan7_R = ( fangyuan7_X0 & fangyuan7_R0 );
  assign fangyuan6_R = ( fangyuan6_X0 & fangyuan6_R0 );
  assign fangyuan5_R = ( fangyuan5_X0 & fangyuan5_R0 );
  assign in_sel_R = ( in_sel_X0 & in_sel_R0 ) | ( in_sel_X1 & in_sel_R1 );
  assign di_sign_d_R = ( di_sign_d_X0 & di_sign_d_R0 ) | ( di_sign_d_X1 & di_sign_d_R1 );
  assign in_hsb_same_d_R = ( in_hsb_same_d_X0 & in_hsb_same_d_R0 ) | ( in_hsb_same_d_X1 & in_hsb_same_d_R1 );
  assign i_lsum_pd_nxt_R = ( i_lsum_pd_nxt_X0 & i_lsum_pd_nxt_R0 ) | ( i_lsum_pd_nxt_X1 & i_lsum_pd_nxt_R1 ) | ( i_lsum_pd_nxt_X2 & i_lsum_pd_nxt_R2 );
  assign i_hsum_pd_nxt_R = ( i_hsum_pd_nxt_X0 & i_hsum_pd_nxt_R0 );
  assign _010__R = ( _010__X0 & _010__R0 );
  assign fangyuan4_R = ( fangyuan4_X0 & fangyuan4_R0 );
  assign fangyuan3_R = ( fangyuan3_X0 & fangyuan3_R0 );
  assign _030__R = ( _030__X0 & _030__R0 );
  assign oi_sign_d_R = ( oi_sign_d_X0 & oi_sign_d_R0 ) | ( oi_sign_d_X1 & oi_sign_d_R1 ) | ( oi_sign_d_X2 & oi_sign_d_R2 ) | ( oi_sign_d_X3 & oi_sign_d_R3 ) | ( oi_sign_d_X4 & oi_sign_d_R4 ) | ( oi_sign_d_X5 & oi_sign_d_R5 ) | ( oi_sign_d_X6 & oi_sign_d_R6 ) | ( oi_sign_d_X7 & oi_sign_d_R7 ) | ( oi_sign_d_X8 & oi_sign_d_R8 ) | ( oi_sign_d_X9 & oi_sign_d_R9 ) | ( oi_sign_d_X10 & oi_sign_d_R10 ) | ( oi_sign_d_X11 & oi_sign_d_R11 ) | ( oi_sign_d_X12 & oi_sign_d_R12 ) | ( oi_sign_d_X13 & oi_sign_d_R13 ) | ( oi_sign_d_X14 & oi_sign_d_R14 ) | ( oi_sign_d_X15 & oi_sign_d_R15 ) | ( oi_sign_d_X16 & oi_sign_d_R16 );
  assign _022__R = ( _022__X0 & _022__R0 ) | ( _022__X1 & _022__R1 ) | ( _022__X2 & _022__R2 ) | ( _022__X3 & _022__R3 ) | ( _022__X4 & _022__R4 ) | ( _022__X5 & _022__R5 ) | ( _022__X6 & _022__R6 ) | ( _022__X7 & _022__R7 ) | ( _022__X8 & _022__R8 ) | ( _022__X9 & _022__R9 ) | ( _022__X10 & _022__R10 ) | ( _022__X11 & _022__R11 ) | ( _022__X12 & _022__R12 ) | ( _022__X13 & _022__R13 ) | ( _022__X14 & _022__R14 ) | ( _022__X15 & _022__R15 );
  assign fangyuan2_R = ( fangyuan2_X0 & fangyuan2_R0 );
  assign fangyuan1_R = ( fangyuan1_X0 & fangyuan1_R0 );
  assign _029__R = ( _029__X0 & _029__R0 );
  assign _023__R = ( _023__X0 & _023__R0 ) | ( _023__X1 & _023__R1 ) | ( _023__X2 & _023__R2 ) | ( _023__X3 & _023__R3 ) | ( _023__X4 & _023__R4 ) | ( _023__X5 & _023__R5 ) | ( _023__X6 & _023__R6 ) | ( _023__X7 & _023__R7 ) | ( _023__X8 & _023__R8 ) | ( _023__X9 & _023__R9 ) | ( _023__X10 & _023__R10 ) | ( _023__X11 & _023__R11 ) | ( _023__X12 & _023__R12 ) | ( _023__X13 & _023__R13 ) | ( _023__X14 & _023__R14 ) | ( _023__X15 & _023__R15 ) | ( _023__X16 & _023__R16 ) | ( _023__X17 & _023__R17 ) | ( _023__X18 & _023__R18 ) | ( _023__X19 & _023__R19 ) | ( _023__X20 & _023__R20 ) | ( _023__X21 & _023__R21 ) | ( _023__X22 & _023__R22 ) | ( _023__X23 & _023__R23 ) | ( _023__X24 & _023__R24 ) | ( _023__X25 & _023__R25 ) | ( _023__X26 & _023__R26 ) | ( _023__X27 & _023__R27 ) | ( _023__X28 & _023__R28 ) | ( _023__X29 & _023__R29 ) | ( _023__X30 & _023__R30 ) | ( _023__X31 & _023__R31 ) | ( _023__X32 & _023__R32 ) | ( _023__X33 & _023__R33 ) | ( _023__X34 & _023__R34 ) | ( _023__X35 & _023__R35 ) | ( _023__X36 & _023__R36 ) | ( _023__X37 & _023__R37 ) | ( _023__X38 & _023__R38 ) | ( _023__X39 & _023__R39 ) | ( _023__X40 & _023__R40 ) | ( _023__X41 & _023__R41 ) | ( _023__X42 & _023__R42 ) | ( _023__X43 & _023__R43 ) | ( _023__X44 & _023__R44 ) | ( _023__X45 & _023__R45 ) | ( _023__X46 & _023__R46 );
  assign i_final_result_R = ( i_final_result_X0 & i_final_result_R0 );
  assign _003__R = ( _003__X0 & _003__R0 );
  assign _000__R = ( _000__X0 & _000__R0 );
  assign _005__R = ( _005__X0 & _005__R0 );
  assign _004__R = ( _004__X0 & _004__R0 );
  assign _002__R = ( _002__X0 & _002__R0 );
  assign _001__R = ( _001__X0 & _001__R0 );
  assign i_partial_vld_R = ( i_partial_vld_X0 & i_partial_vld_R0 ) | ( i_partial_vld_X1 & i_partial_vld_R1 );
  assign _008__R = ( _008__X0 & _008__R0 );
  assign _007__R = ( _007__X0 & _007__R0 );
  assign _006__R = ( _006__X0 & _006__R0 );
  assign _034__R = ( _034__X0 & _034__R0 );
  assign _013__R = ( _013__X0 & _013__R0 );
  assign _027__R = ( _027__X0 & _027__R0 );
  assign _012__R = ( _012__X0 & _012__R0 );
  assign _011__R = ( _011__X0 & _011__R0 );
  assign _031__R = ( _031__X0 & _031__R0 );
  assign i_hsum_pd_R = ( i_hsum_pd_X0 & i_hsum_pd_R0 ) | ( i_hsum_pd_X1 & i_hsum_pd_R1 ) | ( i_hsum_pd_X2 & i_hsum_pd_R2 ) | ( i_hsum_pd_X3 & i_hsum_pd_R3 ) | ( i_hsum_pd_X4 & i_hsum_pd_R4 ) | ( i_hsum_pd_X5 & i_hsum_pd_R5 ) | ( i_hsum_pd_X6 & i_hsum_pd_R6 );
  assign i_lsum_pd_R = ( i_lsum_pd_X0 & i_lsum_pd_R0 ) | ( i_lsum_pd_X1 & i_lsum_pd_R1 ) | ( i_lsum_pd_X2 & i_lsum_pd_R2 ) | ( i_lsum_pd_X3 & i_lsum_pd_R3 ) | ( i_lsum_pd_X4 & i_lsum_pd_R4 ) | ( i_lsum_pd_X5 & i_lsum_pd_R5 );
  assign in_hsb_same_R = ( in_hsb_same_X0 & in_hsb_same_R0 ) | ( in_hsb_same_X1 & in_hsb_same_R1 ) | ( in_hsb_same_X2 & in_hsb_same_R2 ) | ( in_hsb_same_X3 & in_hsb_same_R3 ) | ( in_hsb_same_X4 & in_hsb_same_R4 );
  assign _018__R = ( _018__X0 & _018__R0 );
  assign _017__R = ( _017__X0 & _017__R0 );
  assign _016__R = ( _016__X0 & _016__R0 );
  assign _015__R = ( _015__X0 & _015__R0 );
  assign _020__R = ( _020__X0 & _020__R0 );
  assign _019__R = ( _019__X0 & _019__R0 );
  assign i_sft_need_sat_R = ( i_sft_need_sat_X0 & i_sft_need_sat_R0 ) | ( i_sft_need_sat_X1 & i_sft_need_sat_R1 );
  assign i_final_vld_R = ( i_final_vld_X0 & i_final_vld_R0 ) | ( i_final_vld_X1 & i_final_vld_R1 ) | ( i_final_vld_X2 & i_final_vld_R2 );
  assign _026__R = ( _026__X0 & _026__R0 );
  assign i_sat_vld_R = ( i_sat_vld_X0 & i_sat_vld_R0 ) | ( i_sat_vld_X1 & i_sat_vld_R1 );
  assign _028__R = ( _028__X0 & _028__R0 );
  assign _014__R = ( _014__X0 & _014__R0 );
  assign i_guide_R = ( i_guide_X0 & i_guide_R0 ) | ( i_guide_X1 & i_guide_R1 );
  assign i_sat_sel_R = ( i_sat_sel_X0 & i_sat_sel_R0 ) | ( i_sat_sel_X1 & i_sat_sel_R1 ) | ( i_sat_sel_X2 & i_sat_sel_R2 ) | ( i_sat_sel_X3 & i_sat_sel_R3 ) | ( i_sat_sel_X4 & i_sat_sel_R4 );
  assign _032__R = ( _032__X0 & _032__R0 );
  assign _033__R = ( _033__X0 & _033__R0 );
  assign _025__R = ( _025__X0 & _025__R0 ) | ( _025__X1 & _025__R1 ) | ( _025__X2 & _025__R2 );
  assign _024__R = ( _024__X0 & _024__R0 );
  assign i_partial_result_R = ( i_partial_result_X0 & i_partial_result_R0 ) | ( i_partial_result_X1 & i_partial_result_R1 ) | ( i_partial_result_X2 & i_partial_result_R2 ) | ( i_partial_result_X3 & i_partial_result_R3 ) | ( i_partial_result_X4 & i_partial_result_R4 ) | ( i_partial_result_X5 & i_partial_result_R5 ) | ( i_partial_result_X6 & i_partial_result_R6 );
  assign _021__R = ( _021__X0 & _021__R0 );
  assign in_valid_R = ( in_valid_X0 & in_valid_R0 ) | ( in_valid_X1 & in_valid_R1 ) | ( in_valid_X2 & in_valid_R2 ) | ( in_valid_X3 & in_valid_R3 ) | ( in_valid_X4 & in_valid_R4 ) | ( in_valid_X5 & in_valid_R5 ) | ( in_valid_X6 & in_valid_R6 ) | ( in_valid_X7 & in_valid_R7 );
  assign i_point5_R = ( i_point5_X0 & i_point5_R0 ) | ( i_point5_X1 & i_point5_R1 );
  assign i_sft_pd_R = ( i_sft_pd_X0 & i_sft_pd_R0 ) | ( i_sft_pd_X1 & i_sft_pd_R1 ) | ( i_sft_pd_X2 & i_sft_pd_R2 ) | ( i_sft_pd_X3 & i_sft_pd_R3 );
  assign fangyuan0_R = ( fangyuan0_X0 & fangyuan0_R0 );
  assign _009__R = ( _009__X0 & _009__R0 );
  assign i_lsum_msb_tmp_R = ( i_lsum_msb_tmp_X0 & i_lsum_msb_tmp_R0 );
  assign oi_hsb_pd_tmp_R = ( oi_hsb_pd_tmp_X0 & oi_hsb_pd_tmp_R0 );
  assign di_hsb_pd_tmp_R = ( di_hsb_pd_tmp_X0 & di_hsb_pd_tmp_R0 );
  assign in_mask_op_R = ( in_mask_op_X0 & in_mask_op_R0 ) | ( in_mask_op_X1 & in_mask_op_R1 ) | ( in_mask_op_X2 & in_mask_op_R2 ) | ( in_mask_op_X3 & in_mask_op_R3 ) | ( in_mask_op_X4 & in_mask_op_R4 ) | ( in_mask_op_X5 & in_mask_op_R5 );
  assign in_data_R = ( in_data_X0 & in_data_R0 ) | ( in_data_X1 & in_data_R1 ) | ( in_data_X2 & in_data_R2 ) | ( in_data_X3 & in_data_R3 ) | ( in_data_X4 & in_data_R4 ) | ( in_data_X5 & in_data_R5 );
  assign out_partial_valid_R = ( out_partial_valid_X0 & out_partial_valid_R0 );
  assign out_partial_data_R = ( out_partial_data_X0 & out_partial_data_R0 ) | ( out_partial_data_X1 & out_partial_data_R1 );
  assign out_final_valid_R = ( out_final_valid_X0 & out_final_valid_R0 );
  assign out_final_sat_R = ( out_final_sat_X0 & out_final_sat_R0 );
  assign out_final_data_R = ( out_final_data_X0 & out_final_data_R0 ) | ( out_final_data_X1 & out_final_data_R1 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { di_hsb_pd_R , di_hsb_pd_C , di_hsb_pd_X , di_lsb_pd_R , di_lsb_pd_C , di_lsb_pd_X , di_sign_R , di_sign_C , di_sign_X , fangyuan9_R , fangyuan9_C , fangyuan9_X , i_hsum_msb_R , i_hsum_msb_C , i_hsum_msb_X , i_hsum_sign_R , i_hsum_sign_C , i_hsum_sign_X , i_last_pd_R , i_last_pd_C , i_last_pd_X , i_last_pd3_R , i_last_pd3_C , i_last_pd3_X , i_lsum_msb_R , i_lsum_msb_C , i_lsum_msb_X , i_lsum_msb_nxt_R , i_lsum_msb_nxt_C , i_lsum_msb_nxt_X , i_pos_pd_R , i_pos_pd_C , i_pos_pd_X , i_sat_pd_R , i_sat_pd_C , i_sat_pd_X , i_sat_sign_R , i_sat_sign_C , i_sat_sign_X , i_sel_R , i_sel_C , i_sel_X , i_vld_R , i_vld_C , i_vld_X , oi_hsb_pd_R , oi_hsb_pd_C , oi_hsb_pd_X , oi_lsb_pd_R , oi_lsb_pd_C , oi_lsb_pd_X , oi_sign_R , oi_sign_C , oi_sign_X  } = 0;
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) out_final_data_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) out_final_data_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) out_final_data_PREV_VAL1 <= out_final_data ;
    if( INSTR_IN_ZY ) out_final_data_PREV_VAL2 <= out_final_data_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) out_final_sat_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) out_final_sat_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) out_final_sat_PREV_VAL1 <= out_final_sat ;
    if( INSTR_IN_ZY ) out_final_sat_PREV_VAL2 <= out_final_sat_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) out_final_valid_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) out_final_valid_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) out_final_valid_PREV_VAL1 <= out_final_valid ;
    if( INSTR_IN_ZY ) out_final_valid_PREV_VAL2 <= out_final_valid_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) out_partial_data_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) out_partial_data_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) out_partial_data_PREV_VAL1 <= out_partial_data ;
    if( INSTR_IN_ZY ) out_partial_data_PREV_VAL2 <= out_partial_data_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) out_partial_valid_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) out_partial_valid_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) out_partial_valid_PREV_VAL1 <= out_partial_valid ;
    if( INSTR_IN_ZY ) out_partial_valid_PREV_VAL2 <= out_partial_valid_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) i_hsum_pd_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) i_hsum_pd_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) i_hsum_pd_PREV_VAL1 <= i_hsum_pd ;
    if( INSTR_IN_ZY ) i_hsum_pd_PREV_VAL2 <= i_hsum_pd_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) i_lsum_pd_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) i_lsum_pd_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) i_lsum_pd_PREV_VAL1 <= i_lsum_pd ;
    if( INSTR_IN_ZY ) i_lsum_pd_PREV_VAL2 <= i_lsum_pd_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) in_hsb_same_d_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) in_hsb_same_d_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) in_hsb_same_d_PREV_VAL1 <= in_hsb_same_d ;
    if( INSTR_IN_ZY ) in_hsb_same_d_PREV_VAL2 <= in_hsb_same_d_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) oi_sign_d_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) oi_sign_d_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) oi_sign_d_PREV_VAL1 <= oi_sign_d ;
    if( INSTR_IN_ZY ) oi_sign_d_PREV_VAL2 <= oi_sign_d_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) di_sign_d_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) di_sign_d_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) di_sign_d_PREV_VAL1 <= di_sign_d ;
    if( INSTR_IN_ZY ) di_sign_d_PREV_VAL2 <= di_sign_d_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) i_sat_sel_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) i_sat_sel_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) i_sat_sel_PREV_VAL1 <= i_sat_sel ;
    if( INSTR_IN_ZY ) i_sat_sel_PREV_VAL2 <= i_sat_sel_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) i_sat_vld_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) i_sat_vld_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) i_sat_vld_PREV_VAL1 <= i_sat_vld ;
    if( INSTR_IN_ZY ) i_sat_vld_PREV_VAL2 <= i_sat_vld_PREV_VAL1 ;
  end
 // ground taints for unused wire slices
  assign { i_sat_pd3_R0 [47:47] } = 0;
  assign { i_sat_pd3_X0 [47:47] } = 0;
  assign { i_sat_pd3_C0 [47:47] } = 0;
  assign { i_lsum_pd_nxt_R2 [0], i_lsum_pd_nxt_R2 [1], i_lsum_pd_nxt_R2 [2], i_lsum_pd_nxt_R2 [3], i_lsum_pd_nxt_R2 [4], i_lsum_pd_nxt_R2 [5], i_lsum_pd_nxt_R2 [6], i_lsum_pd_nxt_R2 [7], i_lsum_pd_nxt_R2 [8], i_lsum_pd_nxt_R2 [9], i_lsum_pd_nxt_R2 [10], i_lsum_pd_nxt_R2 [11], i_lsum_pd_nxt_R2 [12], i_lsum_pd_nxt_R2 [13], i_lsum_pd_nxt_R2 [14], i_lsum_pd_nxt_R2 [15], i_lsum_pd_nxt_R2 [16], i_lsum_pd_nxt_R2 [17], i_lsum_pd_nxt_R2 [18], i_lsum_pd_nxt_R2 [19], i_lsum_pd_nxt_R2 [20], i_lsum_pd_nxt_R2 [21], i_lsum_pd_nxt_R2 [22], i_lsum_pd_nxt_R2 [23], i_lsum_pd_nxt_R2 [24], i_lsum_pd_nxt_R2 [25], i_lsum_pd_nxt_R2 [26], i_lsum_pd_nxt_R2 [27], i_lsum_pd_nxt_R2 [28], i_lsum_pd_nxt_R2 [29], i_lsum_pd_nxt_R2 [30], i_lsum_pd_nxt_R2 [31] } = 0;
  assign { i_lsum_pd_nxt_X2 [0], i_lsum_pd_nxt_X2 [1], i_lsum_pd_nxt_X2 [2], i_lsum_pd_nxt_X2 [3], i_lsum_pd_nxt_X2 [4], i_lsum_pd_nxt_X2 [5], i_lsum_pd_nxt_X2 [6], i_lsum_pd_nxt_X2 [7], i_lsum_pd_nxt_X2 [8], i_lsum_pd_nxt_X2 [9], i_lsum_pd_nxt_X2 [10], i_lsum_pd_nxt_X2 [11], i_lsum_pd_nxt_X2 [12], i_lsum_pd_nxt_X2 [13], i_lsum_pd_nxt_X2 [14], i_lsum_pd_nxt_X2 [15], i_lsum_pd_nxt_X2 [16], i_lsum_pd_nxt_X2 [17], i_lsum_pd_nxt_X2 [18], i_lsum_pd_nxt_X2 [19], i_lsum_pd_nxt_X2 [20], i_lsum_pd_nxt_X2 [21], i_lsum_pd_nxt_X2 [22], i_lsum_pd_nxt_X2 [23], i_lsum_pd_nxt_X2 [24], i_lsum_pd_nxt_X2 [25], i_lsum_pd_nxt_X2 [26], i_lsum_pd_nxt_X2 [27], i_lsum_pd_nxt_X2 [28], i_lsum_pd_nxt_X2 [29], i_lsum_pd_nxt_X2 [30], i_lsum_pd_nxt_X2 [31] } = 0;
  assign { i_lsum_pd_nxt_C2 [0], i_lsum_pd_nxt_C2 [1], i_lsum_pd_nxt_C2 [2], i_lsum_pd_nxt_C2 [3], i_lsum_pd_nxt_C2 [4], i_lsum_pd_nxt_C2 [5], i_lsum_pd_nxt_C2 [6], i_lsum_pd_nxt_C2 [7], i_lsum_pd_nxt_C2 [8], i_lsum_pd_nxt_C2 [9], i_lsum_pd_nxt_C2 [10], i_lsum_pd_nxt_C2 [11], i_lsum_pd_nxt_C2 [12], i_lsum_pd_nxt_C2 [13], i_lsum_pd_nxt_C2 [14], i_lsum_pd_nxt_C2 [15], i_lsum_pd_nxt_C2 [16], i_lsum_pd_nxt_C2 [17], i_lsum_pd_nxt_C2 [18], i_lsum_pd_nxt_C2 [19], i_lsum_pd_nxt_C2 [20], i_lsum_pd_nxt_C2 [21], i_lsum_pd_nxt_C2 [22], i_lsum_pd_nxt_C2 [23], i_lsum_pd_nxt_C2 [24], i_lsum_pd_nxt_C2 [25], i_lsum_pd_nxt_C2 [26], i_lsum_pd_nxt_C2 [27], i_lsum_pd_nxt_C2 [28], i_lsum_pd_nxt_C2 [29], i_lsum_pd_nxt_C2 [30], i_lsum_pd_nxt_C2 [31] } = 0;
  assign { i_hsum_pd_R6 [0], i_hsum_pd_R6 [1], i_hsum_pd_R6 [2], i_hsum_pd_R6 [3], i_hsum_pd_R6 [4], i_hsum_pd_R6 [5], i_hsum_pd_R6 [6], i_hsum_pd_R6 [7], i_hsum_pd_R6 [8], i_hsum_pd_R6 [9], i_hsum_pd_R6 [10], i_hsum_pd_R6 [11], i_hsum_pd_R6 [12], i_hsum_pd_R6 [13], i_hsum_pd_R6 [14], i_hsum_pd_R6 [15] } = 0;
  assign { i_hsum_pd_X6 [0], i_hsum_pd_X6 [1], i_hsum_pd_X6 [2], i_hsum_pd_X6 [3], i_hsum_pd_X6 [4], i_hsum_pd_X6 [5], i_hsum_pd_X6 [6], i_hsum_pd_X6 [7], i_hsum_pd_X6 [8], i_hsum_pd_X6 [9], i_hsum_pd_X6 [10], i_hsum_pd_X6 [11], i_hsum_pd_X6 [12], i_hsum_pd_X6 [13], i_hsum_pd_X6 [14], i_hsum_pd_X6 [15] } = 0;
  assign { i_hsum_pd_C6 [0], i_hsum_pd_C6 [1], i_hsum_pd_C6 [2], i_hsum_pd_C6 [3], i_hsum_pd_C6 [4], i_hsum_pd_C6 [5], i_hsum_pd_C6 [6], i_hsum_pd_C6 [7], i_hsum_pd_C6 [8], i_hsum_pd_C6 [9], i_hsum_pd_C6 [10], i_hsum_pd_C6 [11], i_hsum_pd_C6 [12], i_hsum_pd_C6 [13], i_hsum_pd_C6 [14], i_hsum_pd_C6 [15] } = 0;
  assign { i_partial_result_R6 [0], i_partial_result_R6 [1], i_partial_result_R6 [2], i_partial_result_R6 [3], i_partial_result_R6 [4], i_partial_result_R6 [5], i_partial_result_R6 [6], i_partial_result_R6 [7], i_partial_result_R6 [8], i_partial_result_R6 [9], i_partial_result_R6 [10], i_partial_result_R6 [11], i_partial_result_R6 [12], i_partial_result_R6 [13], i_partial_result_R6 [14], i_partial_result_R6 [15], i_partial_result_R6 [16], i_partial_result_R6 [17], i_partial_result_R6 [18], i_partial_result_R6 [19], i_partial_result_R6 [20], i_partial_result_R6 [21], i_partial_result_R6 [22], i_partial_result_R6 [23], i_partial_result_R6 [24], i_partial_result_R6 [25], i_partial_result_R6 [26], i_partial_result_R6 [27], i_partial_result_R6 [28], i_partial_result_R6 [29], i_partial_result_R6 [30], i_partial_result_R6 [31], i_partial_result_R6 [32], i_partial_result_R6 [33], i_partial_result_R6 [34], i_partial_result_R6 [35], i_partial_result_R6 [36], i_partial_result_R6 [37], i_partial_result_R6 [38], i_partial_result_R6 [39], i_partial_result_R6 [40], i_partial_result_R6 [41], i_partial_result_R6 [42], i_partial_result_R6 [43], i_partial_result_R6 [44], i_partial_result_R6 [45], i_partial_result_R6 [46] } = 0;
  assign { i_partial_result_X6 [0], i_partial_result_X6 [1], i_partial_result_X6 [2], i_partial_result_X6 [3], i_partial_result_X6 [4], i_partial_result_X6 [5], i_partial_result_X6 [6], i_partial_result_X6 [7], i_partial_result_X6 [8], i_partial_result_X6 [9], i_partial_result_X6 [10], i_partial_result_X6 [11], i_partial_result_X6 [12], i_partial_result_X6 [13], i_partial_result_X6 [14], i_partial_result_X6 [15], i_partial_result_X6 [16], i_partial_result_X6 [17], i_partial_result_X6 [18], i_partial_result_X6 [19], i_partial_result_X6 [20], i_partial_result_X6 [21], i_partial_result_X6 [22], i_partial_result_X6 [23], i_partial_result_X6 [24], i_partial_result_X6 [25], i_partial_result_X6 [26], i_partial_result_X6 [27], i_partial_result_X6 [28], i_partial_result_X6 [29], i_partial_result_X6 [30], i_partial_result_X6 [31], i_partial_result_X6 [32], i_partial_result_X6 [33], i_partial_result_X6 [34], i_partial_result_X6 [35], i_partial_result_X6 [36], i_partial_result_X6 [37], i_partial_result_X6 [38], i_partial_result_X6 [39], i_partial_result_X6 [40], i_partial_result_X6 [41], i_partial_result_X6 [42], i_partial_result_X6 [43], i_partial_result_X6 [44], i_partial_result_X6 [45], i_partial_result_X6 [46] } = 0;
  assign { i_partial_result_C6 [0], i_partial_result_C6 [1], i_partial_result_C6 [2], i_partial_result_C6 [3], i_partial_result_C6 [4], i_partial_result_C6 [5], i_partial_result_C6 [6], i_partial_result_C6 [7], i_partial_result_C6 [8], i_partial_result_C6 [9], i_partial_result_C6 [10], i_partial_result_C6 [11], i_partial_result_C6 [12], i_partial_result_C6 [13], i_partial_result_C6 [14], i_partial_result_C6 [15], i_partial_result_C6 [16], i_partial_result_C6 [17], i_partial_result_C6 [18], i_partial_result_C6 [19], i_partial_result_C6 [20], i_partial_result_C6 [21], i_partial_result_C6 [22], i_partial_result_C6 [23], i_partial_result_C6 [24], i_partial_result_C6 [25], i_partial_result_C6 [26], i_partial_result_C6 [27], i_partial_result_C6 [28], i_partial_result_C6 [29], i_partial_result_C6 [30], i_partial_result_C6 [31], i_partial_result_C6 [32], i_partial_result_C6 [33], i_partial_result_C6 [34], i_partial_result_C6 [35], i_partial_result_C6 [36], i_partial_result_C6 [37], i_partial_result_C6 [38], i_partial_result_C6 [39], i_partial_result_C6 [40], i_partial_result_C6 [41], i_partial_result_C6 [42], i_partial_result_C6 [43], i_partial_result_C6 [44], i_partial_result_C6 [45], i_partial_result_C6 [46] } = 0;
  assign { in_mask_op_R5 [0], in_mask_op_R5 [1], in_mask_op_R5 [2], in_mask_op_R5 [3], in_mask_op_R5 [4], in_mask_op_R5 [5], in_mask_op_R5 [6], in_mask_op_R5 [7], in_mask_op_R5 [8], in_mask_op_R5 [9], in_mask_op_R5 [10], in_mask_op_R5 [11], in_mask_op_R5 [12], in_mask_op_R5 [13], in_mask_op_R5 [14], in_mask_op_R5 [15], in_mask_op_R5 [16], in_mask_op_R5 [17], in_mask_op_R5 [18], in_mask_op_R5 [19], in_mask_op_R5 [20], in_mask_op_R5 [21], in_mask_op_R5 [22], in_mask_op_R5 [23], in_mask_op_R5 [24], in_mask_op_R5 [25], in_mask_op_R5 [26], in_mask_op_R5 [27], in_mask_op_R5 [28], in_mask_op_R5 [29], in_mask_op_R5 [30], in_mask_op_R5 [31], in_mask_op_R5 [32], in_mask_op_R5 [33], in_mask_op_R5 [34], in_mask_op_R5 [35], in_mask_op_R5 [36], in_mask_op_R5 [37], in_mask_op_R5 [38], in_mask_op_R5 [39], in_mask_op_R5 [40], in_mask_op_R5 [41], in_mask_op_R5 [42], in_mask_op_R5 [43], in_mask_op_R5 [44], in_mask_op_R5 [45], in_mask_op_R5 [46] } = 0;
  assign { in_mask_op_X5 [0], in_mask_op_X5 [1], in_mask_op_X5 [2], in_mask_op_X5 [3], in_mask_op_X5 [4], in_mask_op_X5 [5], in_mask_op_X5 [6], in_mask_op_X5 [7], in_mask_op_X5 [8], in_mask_op_X5 [9], in_mask_op_X5 [10], in_mask_op_X5 [11], in_mask_op_X5 [12], in_mask_op_X5 [13], in_mask_op_X5 [14], in_mask_op_X5 [15], in_mask_op_X5 [16], in_mask_op_X5 [17], in_mask_op_X5 [18], in_mask_op_X5 [19], in_mask_op_X5 [20], in_mask_op_X5 [21], in_mask_op_X5 [22], in_mask_op_X5 [23], in_mask_op_X5 [24], in_mask_op_X5 [25], in_mask_op_X5 [26], in_mask_op_X5 [27], in_mask_op_X5 [28], in_mask_op_X5 [29], in_mask_op_X5 [30], in_mask_op_X5 [31], in_mask_op_X5 [32], in_mask_op_X5 [33], in_mask_op_X5 [34], in_mask_op_X5 [35], in_mask_op_X5 [36], in_mask_op_X5 [37], in_mask_op_X5 [38], in_mask_op_X5 [39], in_mask_op_X5 [40], in_mask_op_X5 [41], in_mask_op_X5 [42], in_mask_op_X5 [43], in_mask_op_X5 [44], in_mask_op_X5 [45], in_mask_op_X5 [46] } = 0;
  assign { in_mask_op_C5 [0], in_mask_op_C5 [1], in_mask_op_C5 [2], in_mask_op_C5 [3], in_mask_op_C5 [4], in_mask_op_C5 [5], in_mask_op_C5 [6], in_mask_op_C5 [7], in_mask_op_C5 [8], in_mask_op_C5 [9], in_mask_op_C5 [10], in_mask_op_C5 [11], in_mask_op_C5 [12], in_mask_op_C5 [13], in_mask_op_C5 [14], in_mask_op_C5 [15], in_mask_op_C5 [16], in_mask_op_C5 [17], in_mask_op_C5 [18], in_mask_op_C5 [19], in_mask_op_C5 [20], in_mask_op_C5 [21], in_mask_op_C5 [22], in_mask_op_C5 [23], in_mask_op_C5 [24], in_mask_op_C5 [25], in_mask_op_C5 [26], in_mask_op_C5 [27], in_mask_op_C5 [28], in_mask_op_C5 [29], in_mask_op_C5 [30], in_mask_op_C5 [31], in_mask_op_C5 [32], in_mask_op_C5 [33], in_mask_op_C5 [34], in_mask_op_C5 [35], in_mask_op_C5 [36], in_mask_op_C5 [37], in_mask_op_C5 [38], in_mask_op_C5 [39], in_mask_op_C5 [40], in_mask_op_C5 [41], in_mask_op_C5 [42], in_mask_op_C5 [43], in_mask_op_C5 [44], in_mask_op_C5 [45], in_mask_op_C5 [46] } = 0;
  assign { in_data_R5 [0], in_data_R5 [1], in_data_R5 [2], in_data_R5 [3], in_data_R5 [4], in_data_R5 [5], in_data_R5 [6], in_data_R5 [7], in_data_R5 [8], in_data_R5 [9], in_data_R5 [10], in_data_R5 [11], in_data_R5 [12], in_data_R5 [13], in_data_R5 [14], in_data_R5 [15], in_data_R5 [16], in_data_R5 [17], in_data_R5 [18], in_data_R5 [19], in_data_R5 [20], in_data_R5 [21], in_data_R5 [22], in_data_R5 [23], in_data_R5 [24], in_data_R5 [25], in_data_R5 [26], in_data_R5 [27], in_data_R5 [28], in_data_R5 [29], in_data_R5 [30], in_data_R5 [31], in_data_R5 [32], in_data_R5 [33], in_data_R5 [34], in_data_R5 [35], in_data_R5 [36] } = 0;
  assign { in_data_X5 [0], in_data_X5 [1], in_data_X5 [2], in_data_X5 [3], in_data_X5 [4], in_data_X5 [5], in_data_X5 [6], in_data_X5 [7], in_data_X5 [8], in_data_X5 [9], in_data_X5 [10], in_data_X5 [11], in_data_X5 [12], in_data_X5 [13], in_data_X5 [14], in_data_X5 [15], in_data_X5 [16], in_data_X5 [17], in_data_X5 [18], in_data_X5 [19], in_data_X5 [20], in_data_X5 [21], in_data_X5 [22], in_data_X5 [23], in_data_X5 [24], in_data_X5 [25], in_data_X5 [26], in_data_X5 [27], in_data_X5 [28], in_data_X5 [29], in_data_X5 [30], in_data_X5 [31], in_data_X5 [32], in_data_X5 [33], in_data_X5 [34], in_data_X5 [35], in_data_X5 [36] } = 0;
  assign { in_data_C5 [0], in_data_C5 [1], in_data_C5 [2], in_data_C5 [3], in_data_C5 [4], in_data_C5 [5], in_data_C5 [6], in_data_C5 [7], in_data_C5 [8], in_data_C5 [9], in_data_C5 [10], in_data_C5 [11], in_data_C5 [12], in_data_C5 [13], in_data_C5 [14], in_data_C5 [15], in_data_C5 [16], in_data_C5 [17], in_data_C5 [18], in_data_C5 [19], in_data_C5 [20], in_data_C5 [21], in_data_C5 [22], in_data_C5 [23], in_data_C5 [24], in_data_C5 [25], in_data_C5 [26], in_data_C5 [27], in_data_C5 [28], in_data_C5 [29], in_data_C5 [30], in_data_C5 [31], in_data_C5 [32], in_data_C5 [33], in_data_C5 [34], in_data_C5 [35], in_data_C5 [36] } = 0;
  assert property( di_sign_d_r_flag == 0 || di_sign_d_PREV_VAL1 == di_sign_d_PREV_VAL2 );
  assert property( i_hsum_pd_r_flag == 0 || i_hsum_pd_PREV_VAL1 == i_hsum_pd_PREV_VAL2 );
  assert property( i_lsum_pd_r_flag == 0 || i_lsum_pd_PREV_VAL1 == i_lsum_pd_PREV_VAL2 );
  assert property( i_sat_sel_r_flag == 0 || i_sat_sel_PREV_VAL1 == i_sat_sel_PREV_VAL2 );
  assert property( i_sat_vld_r_flag == 0 || i_sat_vld_PREV_VAL1 == i_sat_vld_PREV_VAL2 );
  assert property( in_hsb_same_d_r_flag == 0 || in_hsb_same_d_PREV_VAL1 == in_hsb_same_d_PREV_VAL2 );
  assert property( oi_sign_d_r_flag == 0 || oi_sign_d_PREV_VAL1 == oi_sign_d_PREV_VAL2 );
  assert property( out_final_data_r_flag == 0 || out_final_data_PREV_VAL1 == out_final_data_PREV_VAL2 );
  assert property( out_final_sat_r_flag == 0 || out_final_sat_PREV_VAL1 == out_final_sat_PREV_VAL2 );
  assert property( out_final_valid_r_flag == 0 || out_final_valid_PREV_VAL1 == out_final_valid_PREV_VAL2 );
  assert property( out_partial_data_r_flag == 0 || out_partial_data_PREV_VAL1 == out_partial_data_PREV_VAL2 );
  assert property( out_partial_valid_r_flag == 0 || out_partial_valid_PREV_VAL1 == out_partial_valid_PREV_VAL2 );
  assign rst_zy = !nvdla_core_rstn ;
endmodule
