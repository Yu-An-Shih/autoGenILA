  input [31:0] d;
  input [31:0] d_T ;
  output [31:0] d_R ;
  input [13:0] d_S ;
  input ld;
  input ld_T ;
  output ld_R ;
  input [13:0] ld_S ;
  output lz;
  logic lz ;
  output lz_T ;
  logic lz_T ;
  logic lz_R ;
  logic [13:0] lz_S ;
  input lz_R0 ;
  output [13:0] lz_S ;
  output vd;
  logic vd ;
  output vd_T ;
  logic vd_T ;
  logic vd_R ;
  logic [13:0] vd_S ;
  input vd_R0 ;
  output [13:0] vd_S ;
  input vz;
  input vz_T ;
  output vz_R ;
  input [13:0] vz_S ;
  output [31:0] z;
  logic [31:0] z ;
  output [31:0] z_T ;
  logic [31:0] z_T ;
  logic [31:0] z_R ;
  logic [13:0] z_S ;
  input [31:0] z_R0 ;
  output [13:0] z_S ;
  assign lz = ld;
  logic [0:0] ld_R0 ;
  assign lz_T = ld_T ;
  assign ld_R0 = lz_R ;
  assign lz_S = ld_S ;
  assign vd = vz;
  logic [0:0] vz_R0 ;
  assign vd_T = vz_T ;
  assign vz_R0 = vd_R ;
  assign vd_S = vz_S ;
  assign z = d;
  logic [31:0] d_R0 ;
  assign z_T = d_T ;
  assign d_R0 = z_R ;
  assign z_S = d_S ;
  assign d_R = ( d_R0 );
  assign vz_R = ( vz_R0 );
  assign ld_R = ( ld_R0 );
  assign z_R = ( z_R0 );
  assign vd_R = ( vd_R0 );
  assign lz_R = ( lz_R0 );
 // ground taints for floating regs
 // ground taints for unused wires
 // ground taints for unused wire slices
endmodule
