module RAM_BANK_RAMPDP_80X288_GL_M1_D2(WE, CLK, IDDQ, SVOP, WD, RD, RE, RA, WA, SLEEP_EN, RET_EN, clobber_array, clobber_flops);
  wire _00_;
  wire [287:0] _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire [6:0] _13_;
  wire [6:0] _14_;
  wire [287:0] _15_;
  wire [287:0] _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire [6:0] _24_;
  wire [287:0] _25_;
  wire [6:0] ADR;
  wire [287:0] BADBIT;
  wire CAPT_DIS;
  wire CLAMPB;
  input CLK;
  input IDDQ;
  wire [511:0] PDEC0;
  wire [511:0] PDEC1;
  wire [511:0] PDEC2;
  input [6:0] RA;
  reg [6:0] RADR;
  wire RADRCLK;
  wire [6:0] RADRSWI;
  output [287:0] RD;
  wire RDBYP;
  wire [287:0] RDBYPASS;
  input RE;
  wire RECLK;
  input RET_EN;
  reg RE_LATB;
  wire RWSEL;
  wire RdClk0;
  wire [287:0] SHFT;
  input [7:0] SLEEP_EN;
  input [7:0] SVOP;
  input [6:0] WA;
  wire WADRCLK;
  reg [6:0] WAFF;
  input [287:0] WD;
  wire [287:0] WDBQ;
  wire [287:0] WDBQ_pr;
  wire [287:0] WDQ;
  reg [287:0] WDQ_pr;
  input WE;
  wire WECLK;
  reg WE_FF;
  reg WE_LATB;
  wire [287:0] WMNQ;
  wire [287:0] WMNexp;
  wire WRDCLK;
  wire WrClk0;
  input clobber_array;
  input clobber_flops;
  reg [287:0] dout;
  wire [287:0] dout0;
  wire empadd;
  wire [287:0] force_x;
  wire [7:0] fusePDEC0;
  wire [7:0] fusePDEC1;
  wire [7:0] fusePDEC2;
  wire fuseien;
  wire latffclk;
  wire legal;
  wire re_se;
  wire [287:0] rmuxd0;
  wire [287:0] sel_normal;
  wire [287:0] sel_redun;
  wire tiedvalid;
  wire we_se;
  assign _03_ = _19_ & _20_;
  assign _04_ = CLK & _20_;
  assign _05_ = we_se & CLK;
  assign WADRCLK = _05_ & _20_;
  assign RADRCLK = re_se & CLK;
  assign _06_ = re_se & CLAMPB;
  assign _07_ = _06_ & _20_;
  assign _08_ = _07_ & _21_;
  assign RdClk0 = _08_ & CLK;
  assign _09_ = WE_FF & CLAMPB;
  assign _10_ = _09_ & _20_;
  assign _11_ = _10_ & _21_;
  assign WECLK = _11_ & _23_;
  assign RWSEL = _09_ & _23_;
  assign _12_ = _22_ & _20_;
  wire [6:0] fangyuan0;
  assign fangyuan0 = { RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL };

  assign _13_ = fangyuan0 & WAFF;
  assign _14_ = _24_ & RADR;
  assign _01_ = WD & 288'b111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;
  assign _15_ = 288'b111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111 & dout;
  assign _16_ = 1'b0 & WDQ_pr;
  assign _17_ = ADR[6] & ADR[5];
  assign _18_ = ADR[6] & ADR[4];
  assign WrClk0 = WECLK & legal;
  wire [287:0] fangyuan1;
  assign fangyuan1 = { RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0 };

  assign rmuxd0 = fangyuan1 & _25_;
  always @*
    if (RdClk0)
      dout = rmuxd0;
  always @*
    if (_12_)
      RADR = RA;
  always @*
    if (_04_)
      WE_FF = we_se;
  always @*
    if (_03_)
      RE_LATB = _00_;
  always @*
    if (_03_)
      WE_LATB = _02_;
  assign _19_ = ! CLK;
  assign _20_ = ! clobber_flops;
  assign _21_ = ! RET_EN;
  assign _22_ = ! RADRCLK;
  assign CLAMPB = ~ IDDQ;
  assign _00_ = ~ RE;
  assign _02_ = ~ WE;
  assign we_se = ~ WE_LATB;
  assign re_se = ~ RE_LATB;
  assign _23_ = ~ CLK;
  wire [6:0] fangyuan2;
  assign fangyuan2 = { RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL };

  assign _24_ = ~ fangyuan2;
  assign WDBQ = ~ WDQ_pr;
  assign legal = ~ empadd;
  assign _25_ = ~ dout0;
  assign ADR = _13_ | _14_;
  assign WMNQ = WDQ_pr | WDBQ;
  assign RD = _15_ | _16_;
  assign empadd = _17_ | _18_;
  always @(posedge WADRCLK)
      WDQ_pr <= _01_;
  always @(posedge WADRCLK)
      WAFF <= WA;
  \$paramod\RAMPDP_80X288_GL_M1_D2_ram\words=80\bits=288\addrs=7 iow0 (
    .radr(RADR),
    .rout_B(dout0),
    .wadr(WAFF),
    .wrclk(WrClk0),
    .wrdata(WDQ_pr),
    .wrmaskn(WMNQ)
  );
  assign BADBIT = 288'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign CAPT_DIS = 1'b0;
  assign PDEC0 = 512'b
  assign PDEC1 = 512'b
  assign PDEC2 = 512'b
  assign RADRSWI = RADR;
  assign RDBYP = 1'b0;
  assign RDBYPASS = 288'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign RECLK = RdClk0;
  assign SHFT = 288'b111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;
  assign WDBQ_pr = WDBQ;
  assign WDQ = WDQ_pr;
  assign WMNexp = 288'b111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;
  assign WRDCLK = WADRCLK;
  assign force_x = 288'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign fusePDEC0 = 8'b00000000;
  assign fusePDEC1 = 8'b00000000;
  assign fusePDEC2 = 8'b00000000;
  assign fuseien = 1'b0;
  assign latffclk = CLK;
  assign sel_normal = 288'b111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;
  assign sel_redun = 288'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  assign tiedvalid = 1'b1;
endmodule
