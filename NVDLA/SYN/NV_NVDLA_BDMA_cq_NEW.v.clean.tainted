  logic [4:0] _000_;
  logic [4:0] _000__T ;
  logic [4:0] _000__R ;
  logic [4:0] _000__C ;
  logic [4:0] _000__X ;
  logic [13:0] _000__S ;
  logic [4:0] _001_;
  logic [4:0] _001__T ;
  logic [4:0] _001__R ;
  logic [4:0] _001__C ;
  logic [4:0] _001__X ;
  logic [13:0] _001__S ;
  logic [160:0] _002_;
  logic [160:0] _002__T ;
  logic [160:0] _002__R ;
  logic [160:0] _002__C ;
  logic [160:0] _002__X ;
  logic [13:0] _002__S ;
  logic [4:0] _003_;
  logic [4:0] _003__T ;
  logic [4:0] _003__R ;
  logic [4:0] _003__C ;
  logic [4:0] _003__X ;
  logic [13:0] _003__S ;
  logic [4:0] _004_;
  logic [4:0] _004__T ;
  logic [4:0] _004__R ;
  logic [4:0] _004__C ;
  logic [4:0] _004__X ;
  logic [13:0] _004__S ;
  logic _005_;
  logic _005__T ;
  logic _005__R ;
  logic _005__C ;
  logic _005__X ;
  logic [13:0] _005__S ;
  logic [4:0] _006_;
  logic [4:0] _006__T ;
  logic [4:0] _006__R ;
  logic [4:0] _006__C ;
  logic [4:0] _006__X ;
  logic [13:0] _006__S ;
  logic [4:0] _007_;
  logic [4:0] _007__T ;
  logic [4:0] _007__R ;
  logic [4:0] _007__C ;
  logic [4:0] _007__X ;
  logic [13:0] _007__S ;
  logic [4:0] _008_;
  logic [4:0] _008__T ;
  logic [4:0] _008__R ;
  logic [4:0] _008__C ;
  logic [4:0] _008__X ;
  logic [13:0] _008__S ;
  logic [4:0] _009_;
  logic [4:0] _009__T ;
  logic [4:0] _009__R ;
  logic [4:0] _009__C ;
  logic [4:0] _009__X ;
  logic [13:0] _009__S ;
  logic _010_;
  logic _010__T ;
  logic _010__R ;
  logic _010__C ;
  logic _010__X ;
  logic [13:0] _010__S ;
  logic _011_;
  logic _011__T ;
  logic _011__R ;
  logic _011__C ;
  logic _011__X ;
  logic [13:0] _011__S ;
  logic _012_;
  logic _012__T ;
  logic _012__R ;
  logic _012__C ;
  logic _012__X ;
  logic [13:0] _012__S ;
  logic _013_;
  logic _013__T ;
  logic _013__R ;
  logic _013__C ;
  logic _013__X ;
  logic [13:0] _013__S ;
  logic _014_;
  logic _014__T ;
  logic _014__R ;
  logic _014__C ;
  logic _014__X ;
  logic [13:0] _014__S ;
  logic _015_;
  logic _015__T ;
  logic _015__R ;
  logic _015__C ;
  logic _015__X ;
  logic [13:0] _015__S ;
  logic _016_;
  logic _016__T ;
  logic _016__R ;
  logic _016__C ;
  logic _016__X ;
  logic [13:0] _016__S ;
  logic _017_;
  logic _017__T ;
  logic _017__R ;
  logic _017__C ;
  logic _017__X ;
  logic [13:0] _017__S ;
  logic _018_;
  logic _018__T ;
  logic _018__R ;
  logic _018__C ;
  logic _018__X ;
  logic [13:0] _018__S ;
  logic _019_;
  logic _019__T ;
  logic _019__R ;
  logic _019__C ;
  logic _019__X ;
  logic [13:0] _019__S ;
  logic _020_;
  logic _020__T ;
  logic _020__R ;
  logic _020__C ;
  logic _020__X ;
  logic [13:0] _020__S ;
  logic _021_;
  logic _021__T ;
  logic _021__R ;
  logic _021__C ;
  logic _021__X ;
  logic [13:0] _021__S ;
  logic _022_;
  logic _022__T ;
  logic _022__R ;
  logic _022__C ;
  logic _022__X ;
  logic [13:0] _022__S ;
  logic _023_;
  logic _023__T ;
  logic _023__R ;
  logic _023__C ;
  logic _023__X ;
  logic [13:0] _023__S ;
  logic _024_;
  logic _024__T ;
  logic _024__R ;
  logic _024__C ;
  logic _024__X ;
  logic [13:0] _024__S ;
  logic _025_;
  logic _025__T ;
  logic _025__R ;
  logic _025__C ;
  logic _025__X ;
  logic [13:0] _025__S ;
  logic _026_;
  logic _026__T ;
  logic _026__R ;
  logic _026__C ;
  logic _026__X ;
  logic [13:0] _026__S ;
  logic _027_;
  logic _027__T ;
  logic _027__R ;
  logic _027__C ;
  logic _027__X ;
  logic [13:0] _027__S ;
  logic _028_;
  logic _028__T ;
  logic _028__R ;
  logic _028__C ;
  logic _028__X ;
  logic [13:0] _028__S ;
  logic _029_;
  logic _029__T ;
  logic _029__R ;
  logic _029__C ;
  logic _029__X ;
  logic [13:0] _029__S ;
  logic _030_;
  logic _030__T ;
  logic _030__R ;
  logic _030__C ;
  logic _030__X ;
  logic [13:0] _030__S ;
  logic _031_;
  logic _031__T ;
  logic _031__R ;
  logic _031__C ;
  logic _031__X ;
  logic [13:0] _031__S ;
  logic _032_;
  logic _032__T ;
  logic _032__R ;
  logic _032__C ;
  logic _032__X ;
  logic [13:0] _032__S ;
  logic _033_;
  logic _033__T ;
  logic _033__R ;
  logic _033__C ;
  logic _033__X ;
  logic [13:0] _033__S ;
  logic _034_;
  logic _034__T ;
  logic _034__R ;
  logic _034__C ;
  logic _034__X ;
  logic [13:0] _034__S ;
  logic _035_;
  logic _035__T ;
  logic _035__R ;
  logic _035__C ;
  logic _035__X ;
  logic [13:0] _035__S ;
  logic _036_;
  logic _036__T ;
  logic _036__R ;
  logic _036__C ;
  logic _036__X ;
  logic [13:0] _036__S ;
  logic [4:0] _037_;
  logic [4:0] _037__T ;
  logic [4:0] _037__R ;
  logic [4:0] _037__C ;
  logic [4:0] _037__X ;
  logic [13:0] _037__S ;
  logic [4:0] _038_;
  logic [4:0] _038__T ;
  logic [4:0] _038__R ;
  logic [4:0] _038__C ;
  logic [4:0] _038__X ;
  logic [13:0] _038__S ;
  logic [4:0] _039_;
  logic [4:0] _039__T ;
  logic [4:0] _039__R ;
  logic [4:0] _039__C ;
  logic [4:0] _039__X ;
  logic [13:0] _039__S ;
  logic [4:0] ld2st_rd_adr;
  logic [4:0]  ld2st_rd_adr_T ;
  logic [4:0]  ld2st_rd_adr_PREV_VAL1 ;
  logic [4:0]  ld2st_rd_adr_PREV_VAL2 ;
  logic [4:0]  ld2st_rd_adr_R ;
  logic [4:0]  ld2st_rd_adr_X ;
  logic [4:0]  ld2st_rd_adr_C ;
  logic [13:0] ld2st_rd_adr_S ;
  logic ld2st_rd_adr_t_flag ;
  logic ld2st_rd_adr_r_flag ;
  assign ld2st_rd_adr_S = 816 ;
  logic [4:0] ld2st_rd_count_p;
  logic [4:0]  ld2st_rd_count_p_T ;
  logic [4:0]  ld2st_rd_count_p_PREV_VAL1 ;
  logic [4:0]  ld2st_rd_count_p_PREV_VAL2 ;
  logic [4:0]  ld2st_rd_count_p_R ;
  logic [4:0]  ld2st_rd_count_p_X ;
  logic [4:0]  ld2st_rd_count_p_C ;
  logic [13:0] ld2st_rd_count_p_S ;
  logic ld2st_rd_count_p_t_flag ;
  logic ld2st_rd_count_p_r_flag ;
  assign ld2st_rd_count_p_S = 817 ;
  output [160:0] ld2st_rd_pd;
  logic [160:0] ld2st_rd_pd ;
  output [160:0] ld2st_rd_pd_T ;
  logic [160:0] ld2st_rd_pd_T ;
  logic [160:0] ld2st_rd_pd_R ;
  logic [160:0] ld2st_rd_pd_C ;
  logic [160:0] ld2st_rd_pd_X ;
  logic [13:0] ld2st_rd_pd_S ;
  input [160:0] ld2st_rd_pd_R0 ;
  input [160:0] ld2st_rd_pd_C0 ;
  input [160:0] ld2st_rd_pd_X0 ;
  output [13:0] ld2st_rd_pd_S ;
  logic [160:0] ld2st_rd_pd;
  logic [160:0]  ld2st_rd_pd_T ;
  logic [160:0]  ld2st_rd_pd_PREV_VAL1 ;
  logic [160:0]  ld2st_rd_pd_PREV_VAL2 ;
  logic ld2st_rd_pd_t_flag ;
  logic ld2st_rd_pd_r_flag ;
  assign ld2st_rd_pd_S = 818 ;
  logic [160:0] ld2st_rd_pd_p;
  logic [160:0] ld2st_rd_pd_p_T ;
  logic [160:0] ld2st_rd_pd_p_R ;
  logic [160:0] ld2st_rd_pd_p_C ;
  logic [160:0] ld2st_rd_pd_p_X ;
  logic [13:0] ld2st_rd_pd_p_S ;
  input ld2st_rd_prdy;
  input ld2st_rd_prdy_T ;
  input [13:0] ld2st_rd_prdy_S ;
  output ld2st_rd_prdy_R ;
  output ld2st_rd_prdy_X ;
  output ld2st_rd_prdy_C ;
  output ld2st_rd_pvld;
  logic ld2st_rd_pvld ;
  output ld2st_rd_pvld_T ;
  logic ld2st_rd_pvld_T ;
  logic ld2st_rd_pvld_R ;
  logic ld2st_rd_pvld_C ;
  logic ld2st_rd_pvld_X ;
  logic [13:0] ld2st_rd_pvld_S ;
  input ld2st_rd_pvld_R0 ;
  input ld2st_rd_pvld_C0 ;
  input ld2st_rd_pvld_X0 ;
  output [13:0] ld2st_rd_pvld_S ;
  logic ld2st_rd_pvld_int;
  logic  ld2st_rd_pvld_int_T ;
  logic  ld2st_rd_pvld_int_PREV_VAL1 ;
  logic  ld2st_rd_pvld_int_PREV_VAL2 ;
  logic  ld2st_rd_pvld_int_R ;
  logic  ld2st_rd_pvld_int_X ;
  logic  ld2st_rd_pvld_int_C ;
  logic [13:0] ld2st_rd_pvld_int_S ;
  logic ld2st_rd_pvld_int_t_flag ;
  logic ld2st_rd_pvld_int_r_flag ;
  assign ld2st_rd_pvld_int_S = 819 ;
  logic ld2st_rd_pvld_p;
  logic ld2st_rd_pvld_p_T ;
  logic ld2st_rd_pvld_p_R ;
  logic ld2st_rd_pvld_p_C ;
  logic ld2st_rd_pvld_p_X ;
  logic [13:0] ld2st_rd_pvld_p_S ;
  logic [4:0] ld2st_wr_adr;
  logic [4:0]  ld2st_wr_adr_T ;
  logic [4:0]  ld2st_wr_adr_PREV_VAL1 ;
  logic [4:0]  ld2st_wr_adr_PREV_VAL2 ;
  logic [4:0]  ld2st_wr_adr_R ;
  logic [4:0]  ld2st_wr_adr_X ;
  logic [4:0]  ld2st_wr_adr_C ;
  logic [13:0] ld2st_wr_adr_S ;
  logic ld2st_wr_adr_t_flag ;
  logic ld2st_wr_adr_r_flag ;
  assign ld2st_wr_adr_S = 820 ;
  logic ld2st_wr_busy_int;
  logic  ld2st_wr_busy_int_T ;
  logic  ld2st_wr_busy_int_PREV_VAL1 ;
  logic  ld2st_wr_busy_int_PREV_VAL2 ;
  logic  ld2st_wr_busy_int_R ;
  logic  ld2st_wr_busy_int_X ;
  logic  ld2st_wr_busy_int_C ;
  logic [13:0] ld2st_wr_busy_int_S ;
  logic ld2st_wr_busy_int_t_flag ;
  logic ld2st_wr_busy_int_r_flag ;
  assign ld2st_wr_busy_int_S = 821 ;
  logic ld2st_wr_busy_next;
  logic ld2st_wr_busy_next_T ;
  logic ld2st_wr_busy_next_R ;
  logic ld2st_wr_busy_next_C ;
  logic ld2st_wr_busy_next_X ;
  logic [13:0] ld2st_wr_busy_next_S ;
  logic [4:0] ld2st_wr_count;
  logic [4:0]  ld2st_wr_count_T ;
  logic [4:0]  ld2st_wr_count_PREV_VAL1 ;
  logic [4:0]  ld2st_wr_count_PREV_VAL2 ;
  logic [4:0]  ld2st_wr_count_R ;
  logic [4:0]  ld2st_wr_count_X ;
  logic [4:0]  ld2st_wr_count_C ;
  logic [13:0] ld2st_wr_count_S ;
  logic ld2st_wr_count_t_flag ;
  logic ld2st_wr_count_r_flag ;
  assign ld2st_wr_count_S = 822 ;
  output ld2st_wr_idle;
  logic ld2st_wr_idle ;
  output ld2st_wr_idle_T ;
  logic ld2st_wr_idle_T ;
  logic ld2st_wr_idle_R ;
  logic ld2st_wr_idle_C ;
  logic ld2st_wr_idle_X ;
  logic [13:0] ld2st_wr_idle_S ;
  input ld2st_wr_idle_R0 ;
  input ld2st_wr_idle_C0 ;
  input ld2st_wr_idle_X0 ;
  output [13:0] ld2st_wr_idle_S ;
  logic ld2st_wr_idle_d0;
  logic ld2st_wr_idle_d0_T ;
  logic ld2st_wr_idle_d0_R ;
  logic ld2st_wr_idle_d0_C ;
  logic ld2st_wr_idle_d0_X ;
  logic [13:0] ld2st_wr_idle_d0_S ;
  input [160:0] ld2st_wr_pd;
  input [160:0] ld2st_wr_pd_T ;
  input [13:0] ld2st_wr_pd_S ;
  output [160:0] ld2st_wr_pd_R ;
  output [160:0] ld2st_wr_pd_X ;
  output [160:0] ld2st_wr_pd_C ;
  output ld2st_wr_prdy;
  logic ld2st_wr_prdy ;
  output ld2st_wr_prdy_T ;
  logic ld2st_wr_prdy_T ;
  logic ld2st_wr_prdy_R ;
  logic ld2st_wr_prdy_C ;
  logic ld2st_wr_prdy_X ;
  logic [13:0] ld2st_wr_prdy_S ;
  input ld2st_wr_prdy_R0 ;
  input ld2st_wr_prdy_C0 ;
  input ld2st_wr_prdy_X0 ;
  output [13:0] ld2st_wr_prdy_S ;
  input ld2st_wr_pvld;
  input ld2st_wr_pvld_T ;
  input [13:0] ld2st_wr_pvld_S ;
  output ld2st_wr_pvld_R ;
  output ld2st_wr_pvld_X ;
  output ld2st_wr_pvld_C ;
  logic ld2st_wr_pvld_in;
  logic  ld2st_wr_pvld_in_T ;
  logic  ld2st_wr_pvld_in_PREV_VAL1 ;
  logic  ld2st_wr_pvld_in_PREV_VAL2 ;
  logic  ld2st_wr_pvld_in_R ;
  logic  ld2st_wr_pvld_in_X ;
  logic  ld2st_wr_pvld_in_C ;
  logic [13:0] ld2st_wr_pvld_in_S ;
  logic ld2st_wr_pvld_in_t_flag ;
  logic ld2st_wr_pvld_in_r_flag ;
  assign ld2st_wr_pvld_in_S = 823 ;
  input nvdla_core_clk;
  input nvdla_core_clk_T ;
  input [13:0] nvdla_core_clk_S ;
  output nvdla_core_clk_R ;
  output nvdla_core_clk_X ;
  output nvdla_core_clk_C ;
  logic nvdla_core_clk_mgated;
  logic nvdla_core_clk_mgated_T ;
  logic nvdla_core_clk_mgated_R ;
  logic nvdla_core_clk_mgated_C ;
  logic nvdla_core_clk_mgated_X ;
  logic [13:0] nvdla_core_clk_mgated_S ;
  logic nvdla_core_clk_mgated_enable;
  logic nvdla_core_clk_mgated_enable_T ;
  logic nvdla_core_clk_mgated_enable_R ;
  logic nvdla_core_clk_mgated_enable_C ;
  logic nvdla_core_clk_mgated_enable_X ;
  logic [13:0] nvdla_core_clk_mgated_enable_S ;
  input nvdla_core_rstn;
  input nvdla_core_rstn_T ;
  input [13:0] nvdla_core_rstn_S ;
  output nvdla_core_rstn_R ;
  output nvdla_core_rstn_X ;
  output nvdla_core_rstn_C ;
  input [31:0] pwrbus_ram_pd;
  input [31:0] pwrbus_ram_pd_T ;
  input [13:0] pwrbus_ram_pd_S ;
  output [31:0] pwrbus_ram_pd_R ;
  output [31:0] pwrbus_ram_pd_X ;
  output [31:0] pwrbus_ram_pd_C ;
  logic ram_iwe;
  logic ram_iwe_T ;
  logic ram_iwe_R ;
  logic ram_iwe_C ;
  logic ram_iwe_X ;
  logic [13:0] ram_iwe_S ;
  logic ram_we;
  logic ram_we_T ;
  logic ram_we_R ;
  logic ram_we_C ;
  logic ram_we_X ;
  logic [13:0] ram_we_S ;
  logic [4:0] rd_adr_next_popping;
  logic [4:0] rd_adr_next_popping_T ;
  logic [4:0] rd_adr_next_popping_R ;
  logic [4:0] rd_adr_next_popping_C ;
  logic [4:0] rd_adr_next_popping_X ;
  logic [13:0] rd_adr_next_popping_S ;
  logic [4:0] rd_count_p_next;
  logic [4:0] rd_count_p_next_T ;
  logic [4:0] rd_count_p_next_R ;
  logic [4:0] rd_count_p_next_C ;
  logic [4:0] rd_count_p_next_X ;
  logic [13:0] rd_count_p_next_S ;
  logic [4:0] rd_count_p_next_no_rd_popping;
  logic [4:0] rd_count_p_next_no_rd_popping_T ;
  logic [4:0] rd_count_p_next_no_rd_popping_R ;
  logic [4:0] rd_count_p_next_no_rd_popping_C ;
  logic [4:0] rd_count_p_next_no_rd_popping_X ;
  logic [13:0] rd_count_p_next_no_rd_popping_S ;
  logic [4:0] rd_count_p_next_rd_popping;
  logic [4:0] rd_count_p_next_rd_popping_T ;
  logic [4:0] rd_count_p_next_rd_popping_R ;
  logic [4:0] rd_count_p_next_rd_popping_C ;
  logic [4:0] rd_count_p_next_rd_popping_X ;
  logic [13:0] rd_count_p_next_rd_popping_S ;
  logic rd_idle;
  logic rd_idle_T ;
  logic rd_idle_R ;
  logic rd_idle_C ;
  logic rd_idle_X ;
  logic [13:0] rd_idle_S ;
  logic rd_popping;
  logic rd_popping_T ;
  logic rd_popping_R ;
  logic rd_popping_C ;
  logic rd_popping_X ;
  logic [13:0] rd_popping_S ;
  logic rd_pushing;
  logic rd_pushing_T ;
  logic rd_pushing_R ;
  logic rd_pushing_C ;
  logic rd_pushing_X ;
  logic [13:0] rd_pushing_S ;
  logic rd_req_next;
  logic rd_req_next_T ;
  logic rd_req_next_R ;
  logic rd_req_next_C ;
  logic rd_req_next_X ;
  logic [13:0] rd_req_next_S ;
  logic [4:0] wr_adr_next;
  logic [4:0] wr_adr_next_T ;
  logic [4:0] wr_adr_next_R ;
  logic [4:0] wr_adr_next_C ;
  logic [4:0] wr_adr_next_X ;
  logic [13:0] wr_adr_next_S ;
  logic wr_busy_in;
  logic  wr_busy_in_T ;
  logic  wr_busy_in_PREV_VAL1 ;
  logic  wr_busy_in_PREV_VAL2 ;
  logic  wr_busy_in_R ;
  logic  wr_busy_in_X ;
  logic  wr_busy_in_C ;
  logic [13:0] wr_busy_in_S ;
  logic wr_busy_in_t_flag ;
  logic wr_busy_in_r_flag ;
  assign wr_busy_in_S = 824 ;
  logic wr_busy_in_int;
  logic wr_busy_in_int_T ;
  logic wr_busy_in_int_R ;
  logic wr_busy_in_int_C ;
  logic wr_busy_in_int_X ;
  logic [13:0] wr_busy_in_int_S ;
  logic wr_busy_in_next;
  logic wr_busy_in_next_T ;
  logic wr_busy_in_next_R ;
  logic wr_busy_in_next_C ;
  logic wr_busy_in_next_X ;
  logic [13:0] wr_busy_in_next_S ;
  logic wr_busy_in_next_wr_req_eq_0;
  logic wr_busy_in_next_wr_req_eq_0_T ;
  logic wr_busy_in_next_wr_req_eq_0_R ;
  logic wr_busy_in_next_wr_req_eq_0_C ;
  logic wr_busy_in_next_wr_req_eq_0_X ;
  logic [13:0] wr_busy_in_next_wr_req_eq_0_S ;
  logic wr_busy_in_next_wr_req_eq_1;
  logic wr_busy_in_next_wr_req_eq_1_T ;
  logic wr_busy_in_next_wr_req_eq_1_R ;
  logic wr_busy_in_next_wr_req_eq_1_C ;
  logic wr_busy_in_next_wr_req_eq_1_X ;
  logic [13:0] wr_busy_in_next_wr_req_eq_1_S ;
  logic [4:0] wr_count_next;
  logic [4:0] wr_count_next_T ;
  logic [4:0] wr_count_next_R ;
  logic [4:0] wr_count_next_C ;
  logic [4:0] wr_count_next_X ;
  logic [13:0] wr_count_next_S ;
  logic wr_count_next_is_20;
  logic wr_count_next_is_20_T ;
  logic wr_count_next_is_20_R ;
  logic wr_count_next_is_20_C ;
  logic wr_count_next_is_20_X ;
  logic [13:0] wr_count_next_is_20_S ;
  logic [4:0] wr_count_next_no_wr_popping;
  logic [4:0] wr_count_next_no_wr_popping_T ;
  logic [4:0] wr_count_next_no_wr_popping_R ;
  logic [4:0] wr_count_next_no_wr_popping_C ;
  logic [4:0] wr_count_next_no_wr_popping_X ;
  logic [13:0] wr_count_next_no_wr_popping_S ;
  logic wr_count_next_no_wr_popping_is_20;
  logic wr_count_next_no_wr_popping_is_20_T ;
  logic wr_count_next_no_wr_popping_is_20_R ;
  logic wr_count_next_no_wr_popping_is_20_C ;
  logic wr_count_next_no_wr_popping_is_20_X ;
  logic [13:0] wr_count_next_no_wr_popping_is_20_S ;
  logic [4:0] wr_count_next_wr_popping;
  logic [4:0] wr_count_next_wr_popping_T ;
  logic [4:0] wr_count_next_wr_popping_R ;
  logic [4:0] wr_count_next_wr_popping_C ;
  logic [4:0] wr_count_next_wr_popping_X ;
  logic [13:0] wr_count_next_wr_popping_S ;
  logic [4:0] wr_limit_muxed;
  logic [4:0] wr_limit_muxed_T ;
  logic [4:0] wr_limit_muxed_R ;
  logic [4:0] wr_limit_muxed_C ;
  logic [4:0] wr_limit_muxed_X ;
  logic [13:0] wr_limit_muxed_S ;
  logic [4:0] wr_limit_reg;
  logic [4:0] wr_limit_reg_T ;
  logic [4:0] wr_limit_reg_R ;
  logic [4:0] wr_limit_reg_C ;
  logic [4:0] wr_limit_reg_X ;
  logic [13:0] wr_limit_reg_S ;
  logic wr_popping;
  logic wr_popping_T ;
  logic wr_popping_R ;
  logic wr_popping_C ;
  logic wr_popping_X ;
  logic [13:0] wr_popping_S ;
  logic wr_pushing;
  logic wr_pushing_T ;
  logic wr_pushing_R ;
  logic wr_pushing_C ;
  logic wr_pushing_X ;
  logic [13:0] wr_pushing_S ;
  logic wr_reserving;
  logic wr_reserving_T ;
  logic wr_reserving_R ;
  logic wr_reserving_C ;
  logic wr_reserving_X ;
  logic [13:0] wr_reserving_S ;
  assign _006_ = ld2st_wr_adr + 1'b1;
  assign _006__S = 0 ;
  logic [4:0] ld2st_wr_adr_C0 ;
  logic [4:0] ld2st_wr_adr_R0 ;
  logic [4:0] ld2st_wr_adr_X0 ;
  assign _006__T = ld2st_wr_adr_T ;
  assign ld2st_wr_adr_C0 = _006__C ;
  assign ld2st_wr_adr_R0 = _006__R ;
  assign ld2st_wr_adr_X0 = _006__X ;
  assign _007_ = ld2st_rd_adr + 1'b1;
  assign _007__S = 0 ;
  logic [4:0] ld2st_rd_adr_C0 ;
  logic [4:0] ld2st_rd_adr_R0 ;
  logic [4:0] ld2st_rd_adr_X0 ;
  assign _007__T = ld2st_rd_adr_T ;
  assign ld2st_rd_adr_C0 = _007__C ;
  assign ld2st_rd_adr_R0 = _007__R ;
  assign ld2st_rd_adr_X0 = _007__X ;
  assign _008_ = ld2st_rd_count_p + 1'b1;
  assign _008__S = 0 ;
  logic [4:0] ld2st_rd_count_p_C0 ;
  logic [4:0] ld2st_rd_count_p_R0 ;
  logic [4:0] ld2st_rd_count_p_X0 ;
  assign _008__T = ld2st_rd_count_p_T ;
  assign ld2st_rd_count_p_C0 = _008__C ;
  assign ld2st_rd_count_p_R0 = _008__R ;
  assign ld2st_rd_count_p_X0 = _008__X ;
  assign _009_ = ld2st_wr_count + 1'b1;
  assign _009__S = 0 ;
  logic [4:0] ld2st_wr_count_C0 ;
  logic [4:0] ld2st_wr_count_R0 ;
  logic [4:0] ld2st_wr_count_X0 ;
  assign _009__T = ld2st_wr_count_T ;
  assign ld2st_wr_count_C0 = _009__C ;
  assign ld2st_wr_count_R0 = _009__R ;
  assign ld2st_wr_count_X0 = _009__X ;
  assign _010_ = ld2st_wr_adr == 5'b10011;
  assign _010__S = 0 ;
  logic [4:0] ld2st_wr_adr_C1 ;
  logic [4:0] ld2st_wr_adr_R1 ;
  logic [4:0] ld2st_wr_adr_X1 ;
  assign _010__T = | ld2st_wr_adr_T ;
  assign ld2st_wr_adr_C1 = { 5{ _010__C }} ;
  assign ld2st_wr_adr_R1 = { 5{ _010__R }} ;
  assign ld2st_wr_adr_X1 = { 5{ _010__X }} ;
  assign _011_ = ! ld2st_wr_count;
  logic [4:0] ld2st_wr_count_C1 ;
  logic [4:0] ld2st_wr_count_R1 ;
  logic [4:0] ld2st_wr_count_X1 ;
  assign _011__T = | ld2st_wr_count_T ;
  assign ld2st_wr_count_C1 = { 5{ _011__C }} ;
  assign ld2st_wr_count_X1 = { 5{ _011__X }} ;
  assign ld2st_wr_count_R1 = { 5{ _011__R }} ;
  assign _011__S = 0 ;
  assign _012_ = ld2st_rd_adr == 5'b10011;
  assign _012__S = 0 ;
  logic [4:0] ld2st_rd_adr_C1 ;
  logic [4:0] ld2st_rd_adr_R1 ;
  logic [4:0] ld2st_rd_adr_X1 ;
  assign _012__T = | ld2st_rd_adr_T ;
  assign ld2st_rd_adr_C1 = { 5{ _012__C }} ;
  assign ld2st_rd_adr_R1 = { 5{ _012__R }} ;
  assign ld2st_rd_adr_X1 = { 5{ _012__X }} ;
  assign _013_ = ! ld2st_rd_count_p;
  logic [4:0] ld2st_rd_count_p_C1 ;
  logic [4:0] ld2st_rd_count_p_R1 ;
  logic [4:0] ld2st_rd_count_p_X1 ;
  assign _013__T = | ld2st_rd_count_p_T ;
  assign ld2st_rd_count_p_C1 = { 5{ _013__C }} ;
  assign ld2st_rd_count_p_X1 = { 5{ _013__X }} ;
  assign ld2st_rd_count_p_R1 = { 5{ _013__R }} ;
  assign _013__S = 0 ;
  assign wr_count_next_no_wr_popping_is_20 = wr_count_next_no_wr_popping == 5'b10100;
  assign wr_count_next_no_wr_popping_is_20_S = 0 ;
  logic [4:0] wr_count_next_no_wr_popping_C0 ;
  logic [4:0] wr_count_next_no_wr_popping_R0 ;
  logic [4:0] wr_count_next_no_wr_popping_X0 ;
  assign wr_count_next_no_wr_popping_is_20_T = | wr_count_next_no_wr_popping_T ;
  assign wr_count_next_no_wr_popping_C0 = { 5{ wr_count_next_no_wr_popping_is_20_C }} ;
  assign wr_count_next_no_wr_popping_R0 = { 5{ wr_count_next_no_wr_popping_is_20_R }} ;
  assign wr_count_next_no_wr_popping_X0 = { 5{ wr_count_next_no_wr_popping_is_20_X }} ;
  assign _014_ = ld2st_wr_count > 1'b0;
  assign _014__S = 0 ;
  logic [4:0] ld2st_wr_count_C2 ;
  logic [4:0] ld2st_wr_count_R2 ;
  logic [4:0] ld2st_wr_count_X2 ;
  assign _014__T = | ld2st_wr_count_T ;
  assign ld2st_wr_count_C2 = { 5{ _014__C }} ;
  assign ld2st_wr_count_R2 = { 5{ _014__R }} ;
  assign ld2st_wr_count_X2 = { 5{ _014__X }} ;
  assign ram_we = rd_pushing && _028_;
  assign ram_we_S = 0 ;
  logic [0:0] rd_pushing_C0 ;
  logic [0:0] rd_pushing_R0 ;
  logic [0:0] rd_pushing_X0 ;
  logic [0:0] _028__C0 ;
  logic [0:0] _028__R0 ;
  logic [0:0] _028__X0 ;
  assign ram_we_T = rd_pushing_T | _028__T ;
  assign rd_pushing_C0 = ram_we_C ;
  assign rd_pushing_X0 = ram_we_X ;
  assign _028__C0 = ram_we_C ;
  assign _028__X0 = ram_we_X ;
  assign rd_pushing_R0 = ( ram_we_R | ram_we_C & _028__T ) & { 1{ _028_ != 0 }} ;
  assign _028__R0 = ( ram_we_R | ram_we_C & rd_pushing_T ) & { 1{ rd_pushing != 0 }} ;
  assign ram_iwe = ld2st_wr_prdy && ld2st_wr_pvld;
  assign ram_iwe_S = 0 ;
  logic [0:0] ld2st_wr_prdy_C1 ;
  logic [0:0] ld2st_wr_prdy_R1 ;
  logic [0:0] ld2st_wr_prdy_X1 ;
  logic [0:0] ld2st_wr_pvld_C0 ;
  logic [0:0] ld2st_wr_pvld_R0 ;
  logic [0:0] ld2st_wr_pvld_X0 ;
  assign ram_iwe_T = ld2st_wr_prdy_T | ld2st_wr_pvld_T ;
  assign ld2st_wr_prdy_C1 = ram_iwe_C ;
  assign ld2st_wr_prdy_X1 = ram_iwe_X ;
  assign ld2st_wr_pvld_C0 = ram_iwe_C ;
  assign ld2st_wr_pvld_X0 = ram_iwe_X ;
  assign ld2st_wr_prdy_R1 = ( ram_iwe_R | ram_iwe_C & ld2st_wr_pvld_T ) & { 1{ ld2st_wr_pvld != 0 }} ;
  assign ld2st_wr_pvld_R0 = ( ram_iwe_R | ram_iwe_C & ld2st_wr_prdy_T ) & { 1{ ld2st_wr_prdy != 0 }} ;
  assign _015_ = ld2st_rd_pvld_int && _022_;
  assign _015__S = 0 ;
  logic [0:0] ld2st_rd_pvld_int_C0 ;
  logic [0:0] ld2st_rd_pvld_int_R0 ;
  logic [0:0] ld2st_rd_pvld_int_X0 ;
  logic [0:0] _022__C0 ;
  logic [0:0] _022__R0 ;
  logic [0:0] _022__X0 ;
  assign _015__T = ld2st_rd_pvld_int_T | _022__T ;
  assign ld2st_rd_pvld_int_C0 = _015__C ;
  assign ld2st_rd_pvld_int_X0 = _015__X ;
  assign _022__C0 = _015__C ;
  assign _022__X0 = _015__X ;
  assign ld2st_rd_pvld_int_R0 = ( _015__R | _015__C & _022__T ) & { 1{ _022_ != 0 }} ;
  assign _022__R0 = ( _015__R | _015__C & ld2st_rd_pvld_int_T ) & { 1{ ld2st_rd_pvld_int != 0 }} ;
  assign rd_popping = ld2st_rd_pvld_p && _023_;
  assign rd_popping_S = 0 ;
  logic [0:0] ld2st_rd_pvld_p_C0 ;
  logic [0:0] ld2st_rd_pvld_p_R0 ;
  logic [0:0] ld2st_rd_pvld_p_X0 ;
  logic [0:0] _023__C0 ;
  logic [0:0] _023__R0 ;
  logic [0:0] _023__X0 ;
  assign rd_popping_T = ld2st_rd_pvld_p_T | _023__T ;
  assign ld2st_rd_pvld_p_C0 = rd_popping_C ;
  assign ld2st_rd_pvld_p_X0 = rd_popping_X ;
  assign _023__C0 = rd_popping_C ;
  assign _023__X0 = rd_popping_X ;
  assign ld2st_rd_pvld_p_R0 = ( rd_popping_R | rd_popping_C & _023__T ) & { 1{ _023_ != 0 }} ;
  assign _023__R0 = ( rd_popping_R | rd_popping_C & ld2st_rd_pvld_p_T ) & { 1{ ld2st_rd_pvld_p != 0 }} ;
  assign _016_ = _024_ && _025_;
  assign _016__S = 0 ;
  logic [0:0] _024__C0 ;
  logic [0:0] _024__R0 ;
  logic [0:0] _024__X0 ;
  logic [0:0] _025__C0 ;
  logic [0:0] _025__R0 ;
  logic [0:0] _025__X0 ;
  assign _016__T = _024__T | _025__T ;
  assign _024__C0 = _016__C ;
  assign _024__X0 = _016__X ;
  assign _025__C0 = _016__C ;
  assign _025__X0 = _016__X ;
  assign _024__R0 = ( _016__R | _016__C & _025__T ) & { 1{ _025_ != 0 }} ;
  assign _025__R0 = ( _016__R | _016__C & _024__T ) & { 1{ _024_ != 0 }} ;
  assign rd_idle = _016_ && _013_;
  assign rd_idle_S = 0 ;
  logic [0:0] _016__C0 ;
  logic [0:0] _016__R0 ;
  logic [0:0] _016__X0 ;
  logic [0:0] _013__C0 ;
  logic [0:0] _013__R0 ;
  logic [0:0] _013__X0 ;
  assign rd_idle_T = _016__T | _013__T ;
  assign _016__C0 = rd_idle_C ;
  assign _016__X0 = rd_idle_X ;
  assign _013__C0 = rd_idle_C ;
  assign _013__X0 = rd_idle_X ;
  assign _016__R0 = ( rd_idle_R | rd_idle_C & _013__T ) & { 1{ _013_ != 0 }} ;
  assign _013__R0 = ( rd_idle_R | rd_idle_C & _016__T ) & { 1{ _016_ != 0 }} ;
  assign _017_ = _026_ && rd_idle;
  assign _017__S = 0 ;
  logic [0:0] _026__C0 ;
  logic [0:0] _026__R0 ;
  logic [0:0] _026__X0 ;
  logic [0:0] rd_idle_C0 ;
  logic [0:0] rd_idle_R0 ;
  logic [0:0] rd_idle_X0 ;
  assign _017__T = _026__T | rd_idle_T ;
  assign _026__C0 = _017__C ;
  assign _026__X0 = _017__X ;
  assign rd_idle_C0 = _017__C ;
  assign rd_idle_X0 = _017__X ;
  assign _026__R0 = ( _017__R | _017__C & rd_idle_T ) & { 1{ rd_idle != 0 }} ;
  assign rd_idle_R0 = ( _017__R | _017__C & _026__T ) & { 1{ _026_ != 0 }} ;
  assign _018_ = _017_ && _025_;
  assign _018__S = 0 ;
  logic [0:0] _017__C0 ;
  logic [0:0] _017__R0 ;
  logic [0:0] _017__X0 ;
  logic [0:0] _025__C1 ;
  logic [0:0] _025__R1 ;
  logic [0:0] _025__X1 ;
  assign _018__T = _017__T | _025__T ;
  assign _017__C0 = _018__C ;
  assign _017__X0 = _018__X ;
  assign _025__C1 = _018__C ;
  assign _025__X1 = _018__X ;
  assign _017__R0 = ( _018__R | _018__C & _025__T ) & { 1{ _025_ != 0 }} ;
  assign _025__R1 = ( _018__R | _018__C & _017__T ) & { 1{ _017_ != 0 }} ;
  assign ld2st_wr_idle = _018_ && _011_;
  assign ld2st_wr_idle_S = 0 ;
  logic [0:0] _018__C0 ;
  logic [0:0] _018__R0 ;
  logic [0:0] _018__X0 ;
  logic [0:0] _011__C0 ;
  logic [0:0] _011__R0 ;
  logic [0:0] _011__X0 ;
  assign ld2st_wr_idle_T = _018__T | _011__T ;
  assign _018__C0 = ld2st_wr_idle_C ;
  assign _018__X0 = ld2st_wr_idle_X ;
  assign _011__C0 = ld2st_wr_idle_C ;
  assign _011__X0 = ld2st_wr_idle_X ;
  assign _018__R0 = ( ld2st_wr_idle_R | ld2st_wr_idle_C & _011__T ) & { 1{ _011_ != 0 }} ;
  assign _011__R0 = ( ld2st_wr_idle_R | ld2st_wr_idle_C & _018__T ) & { 1{ _018_ != 0 }} ;
  assign rd_pushing = ld2st_wr_pvld_in && _027_;
  assign rd_pushing_S = 0 ;
  logic [0:0] ld2st_wr_pvld_in_C0 ;
  logic [0:0] ld2st_wr_pvld_in_R0 ;
  logic [0:0] ld2st_wr_pvld_in_X0 ;
  logic [0:0] _027__C0 ;
  logic [0:0] _027__R0 ;
  logic [0:0] _027__X0 ;
  assign rd_pushing_T = ld2st_wr_pvld_in_T | _027__T ;
  assign ld2st_wr_pvld_in_C0 = rd_pushing_C ;
  assign ld2st_wr_pvld_in_X0 = rd_pushing_X ;
  assign _027__C0 = rd_pushing_C ;
  assign _027__X0 = rd_pushing_X ;
  assign ld2st_wr_pvld_in_R0 = ( rd_pushing_R | rd_pushing_C & _027__T ) & { 1{ _027_ != 0 }} ;
  assign _027__R0 = ( rd_pushing_R | rd_pushing_C & ld2st_wr_pvld_in_T ) & { 1{ ld2st_wr_pvld_in != 0 }} ;
  assign _019_ = ld2st_rd_pvld_int && ld2st_rd_prdy;
  assign _019__S = 0 ;
  logic [0:0] ld2st_rd_pvld_int_C1 ;
  logic [0:0] ld2st_rd_pvld_int_R1 ;
  logic [0:0] ld2st_rd_pvld_int_X1 ;
  logic [0:0] ld2st_rd_prdy_C0 ;
  logic [0:0] ld2st_rd_prdy_R0 ;
  logic [0:0] ld2st_rd_prdy_X0 ;
  assign _019__T = ld2st_rd_pvld_int_T | ld2st_rd_prdy_T ;
  assign ld2st_rd_pvld_int_C1 = _019__C ;
  assign ld2st_rd_pvld_int_X1 = _019__X ;
  assign ld2st_rd_prdy_C0 = _019__C ;
  assign ld2st_rd_prdy_X0 = _019__X ;
  assign ld2st_rd_pvld_int_R1 = ( _019__R | _019__C & ld2st_rd_prdy_T ) & { 1{ ld2st_rd_prdy != 0 }} ;
  assign ld2st_rd_prdy_R0 = ( _019__R | _019__C & ld2st_rd_pvld_int_T ) & { 1{ ld2st_rd_pvld_int != 0 }} ;
  assign _020_ = ld2st_wr_pvld_in && ld2st_wr_busy_next;
  assign _020__S = 0 ;
  logic [0:0] ld2st_wr_pvld_in_C1 ;
  logic [0:0] ld2st_wr_pvld_in_R1 ;
  logic [0:0] ld2st_wr_pvld_in_X1 ;
  logic [0:0] ld2st_wr_busy_next_C0 ;
  logic [0:0] ld2st_wr_busy_next_R0 ;
  logic [0:0] ld2st_wr_busy_next_X0 ;
  assign _020__T = ld2st_wr_pvld_in_T | ld2st_wr_busy_next_T ;
  assign ld2st_wr_pvld_in_C1 = _020__C ;
  assign ld2st_wr_pvld_in_X1 = _020__X ;
  assign ld2st_wr_busy_next_C0 = _020__C ;
  assign ld2st_wr_busy_next_X0 = _020__X ;
  assign ld2st_wr_pvld_in_R1 = ( _020__R | _020__C & ld2st_wr_busy_next_T ) & { 1{ ld2st_wr_busy_next != 0 }} ;
  assign ld2st_wr_busy_next_R0 = ( _020__R | _020__C & ld2st_wr_pvld_in_T ) & { 1{ ld2st_wr_pvld_in != 0 }} ;
  assign wr_busy_in_next_wr_req_eq_0 = _020_ && _025_;
  assign wr_busy_in_next_wr_req_eq_0_S = 0 ;
  logic [0:0] _020__C0 ;
  logic [0:0] _020__R0 ;
  logic [0:0] _020__X0 ;
  logic [0:0] _025__C2 ;
  logic [0:0] _025__R2 ;
  logic [0:0] _025__X2 ;
  assign wr_busy_in_next_wr_req_eq_0_T = _020__T | _025__T ;
  assign _020__C0 = wr_busy_in_next_wr_req_eq_0_C ;
  assign _020__X0 = wr_busy_in_next_wr_req_eq_0_X ;
  assign _025__C2 = wr_busy_in_next_wr_req_eq_0_C ;
  assign _025__X2 = wr_busy_in_next_wr_req_eq_0_X ;
  assign _020__R0 = ( wr_busy_in_next_wr_req_eq_0_R | wr_busy_in_next_wr_req_eq_0_C & _025__T ) & { 1{ _025_ != 0 }} ;
  assign _025__R2 = ( wr_busy_in_next_wr_req_eq_0_R | wr_busy_in_next_wr_req_eq_0_C & _020__T ) & { 1{ _020_ != 0 }} ;
  assign wr_busy_in_int = ld2st_wr_pvld_in && ld2st_wr_busy_int;
  assign wr_busy_in_int_S = 0 ;
  logic [0:0] ld2st_wr_pvld_in_C2 ;
  logic [0:0] ld2st_wr_pvld_in_R2 ;
  logic [0:0] ld2st_wr_pvld_in_X2 ;
  logic [0:0] ld2st_wr_busy_int_C0 ;
  logic [0:0] ld2st_wr_busy_int_R0 ;
  logic [0:0] ld2st_wr_busy_int_X0 ;
  assign wr_busy_in_int_T = ld2st_wr_pvld_in_T | ld2st_wr_busy_int_T ;
  assign ld2st_wr_pvld_in_C2 = wr_busy_in_int_C ;
  assign ld2st_wr_pvld_in_X2 = wr_busy_in_int_X ;
  assign ld2st_wr_busy_int_C0 = wr_busy_in_int_C ;
  assign ld2st_wr_busy_int_X0 = wr_busy_in_int_X ;
  assign ld2st_wr_pvld_in_R2 = ( wr_busy_in_int_R | wr_busy_in_int_C & ld2st_wr_busy_int_T ) & { 1{ ld2st_wr_busy_int != 0 }} ;
  assign ld2st_wr_busy_int_R0 = ( wr_busy_in_int_R | wr_busy_in_int_C & ld2st_wr_pvld_in_T ) & { 1{ ld2st_wr_pvld_in != 0 }} ;
  assign _021_ = ! rd_popping;
  logic [0:0] rd_popping_C0 ;
  logic [0:0] rd_popping_R0 ;
  logic [0:0] rd_popping_X0 ;
  assign _021__T = | rd_popping_T ;
  assign rd_popping_C0 = { 1{ _021__C }} ;
  assign rd_popping_X0 = { 1{ _021__X }} ;
  assign rd_popping_R0 = { 1{ _021__R }} ;
  assign _021__S = 0 ;
  assign ld2st_wr_prdy = ! wr_busy_in;
  logic [0:0] wr_busy_in_C0 ;
  logic [0:0] wr_busy_in_R0 ;
  logic [0:0] wr_busy_in_X0 ;
  assign ld2st_wr_prdy_T = | wr_busy_in_T ;
  assign wr_busy_in_C0 = { 1{ ld2st_wr_prdy_C }} ;
  assign wr_busy_in_X0 = { 1{ ld2st_wr_prdy_X }} ;
  assign wr_busy_in_R0 = { 1{ ld2st_wr_prdy_R }} ;
  assign ld2st_wr_prdy_S = 0 ;
  assign _022_ = ! ld2st_rd_prdy;
  logic [0:0] ld2st_rd_prdy_C1 ;
  logic [0:0] ld2st_rd_prdy_R1 ;
  logic [0:0] ld2st_rd_prdy_X1 ;
  assign _022__T = | ld2st_rd_prdy_T ;
  assign ld2st_rd_prdy_C1 = { 1{ _022__C }} ;
  assign ld2st_rd_prdy_X1 = { 1{ _022__X }} ;
  assign ld2st_rd_prdy_R1 = { 1{ _022__R }} ;
  assign _022__S = 0 ;
  assign _023_ = ! _015_;
  logic [0:0] _015__C0 ;
  logic [0:0] _015__R0 ;
  logic [0:0] _015__X0 ;
  assign _023__T = | _015__T ;
  assign _015__C0 = { 1{ _023__C }} ;
  assign _015__X0 = { 1{ _023__X }} ;
  assign _015__R0 = { 1{ _023__R }} ;
  assign _023__S = 0 ;
  assign _024_ = ! ld2st_rd_pvld_int;
  logic [0:0] ld2st_rd_pvld_int_C2 ;
  logic [0:0] ld2st_rd_pvld_int_R2 ;
  logic [0:0] ld2st_rd_pvld_int_X2 ;
  assign _024__T = | ld2st_rd_pvld_int_T ;
  assign ld2st_rd_pvld_int_C2 = { 1{ _024__C }} ;
  assign ld2st_rd_pvld_int_X2 = { 1{ _024__X }} ;
  assign ld2st_rd_pvld_int_R2 = { 1{ _024__R }} ;
  assign _024__S = 0 ;
  assign _025_ = ! rd_pushing;
  logic [0:0] rd_pushing_C1 ;
  logic [0:0] rd_pushing_R1 ;
  logic [0:0] rd_pushing_X1 ;
  assign _025__T = | rd_pushing_T ;
  assign rd_pushing_C1 = { 1{ _025__C }} ;
  assign rd_pushing_X1 = { 1{ _025__X }} ;
  assign rd_pushing_R1 = { 1{ _025__R }} ;
  assign _025__S = 0 ;
  assign _026_ = ! ld2st_wr_pvld_in;
  logic [0:0] ld2st_wr_pvld_in_C3 ;
  logic [0:0] ld2st_wr_pvld_in_R3 ;
  logic [0:0] ld2st_wr_pvld_in_X3 ;
  assign _026__T = | ld2st_wr_pvld_in_T ;
  assign ld2st_wr_pvld_in_C3 = { 1{ _026__C }} ;
  assign ld2st_wr_pvld_in_X3 = { 1{ _026__X }} ;
  assign ld2st_wr_pvld_in_R3 = { 1{ _026__R }} ;
  assign _026__S = 0 ;
  assign _027_ = ! ld2st_wr_busy_int;
  logic [0:0] ld2st_wr_busy_int_C1 ;
  logic [0:0] ld2st_wr_busy_int_R1 ;
  logic [0:0] ld2st_wr_busy_int_X1 ;
  assign _027__T = | ld2st_wr_busy_int_T ;
  assign ld2st_wr_busy_int_C1 = { 1{ _027__C }} ;
  assign ld2st_wr_busy_int_X1 = { 1{ _027__X }} ;
  assign ld2st_wr_busy_int_R1 = { 1{ _027__R }} ;
  assign _027__S = 0 ;
  assign _028_ = _014_ || _021_;
  assign _028__S = 0 ;
  logic [0:0] _014__C0 ;
  logic [0:0] _014__R0 ;
  logic [0:0] _014__X0 ;
  logic [0:0] _021__C0 ;
  logic [0:0] _021__R0 ;
  logic [0:0] _021__X0 ;
  assign _028__T = _014__T | _021__T ;
  assign _014__C0 = _028__C ;
  assign _014__X0 = _028__X ;
  assign _021__C0 = _028__C ;
  assign _021__X0 = _028__X ;
  assign _014__R0 = ( _028__R | _028__C & _021__T ) & { 1{ _021_ == 0 }} ;
  assign _021__R0 = ( _028__R | _028__C & _014__T ) & { 1{ _014_ == 0 }} ;
  assign ld2st_rd_pvld_p = _034_ || rd_pushing;
  assign ld2st_rd_pvld_p_S = 0 ;
  logic [0:0] _034__C0 ;
  logic [0:0] _034__R0 ;
  logic [0:0] _034__X0 ;
  logic [0:0] rd_pushing_C2 ;
  logic [0:0] rd_pushing_R2 ;
  logic [0:0] rd_pushing_X2 ;
  assign ld2st_rd_pvld_p_T = _034__T | rd_pushing_T ;
  assign _034__C0 = ld2st_rd_pvld_p_C ;
  assign _034__X0 = ld2st_rd_pvld_p_X ;
  assign rd_pushing_C2 = ld2st_rd_pvld_p_C ;
  assign rd_pushing_X2 = ld2st_rd_pvld_p_X ;
  assign _034__R0 = ( ld2st_rd_pvld_p_R | ld2st_rd_pvld_p_C & rd_pushing_T ) & { 1{ rd_pushing == 0 }} ;
  assign rd_pushing_R2 = ( ld2st_rd_pvld_p_R | ld2st_rd_pvld_p_C & _034__T ) & { 1{ _034_ == 0 }} ;
  assign _029_ = rd_pushing || rd_popping;
  assign _029__S = 0 ;
  logic [0:0] rd_pushing_C3 ;
  logic [0:0] rd_pushing_R3 ;
  logic [0:0] rd_pushing_X3 ;
  logic [0:0] rd_popping_C1 ;
  logic [0:0] rd_popping_R1 ;
  logic [0:0] rd_popping_X1 ;
  assign _029__T = rd_pushing_T | rd_popping_T ;
  assign rd_pushing_C3 = _029__C ;
  assign rd_pushing_X3 = _029__X ;
  assign rd_popping_C1 = _029__C ;
  assign rd_popping_X1 = _029__X ;
  assign rd_pushing_R3 = ( _029__R | _029__C & rd_popping_T ) & { 1{ rd_popping == 0 }} ;
  assign rd_popping_R1 = ( _029__R | _029__C & rd_pushing_T ) & { 1{ rd_pushing == 0 }} ;
  assign rd_req_next = ld2st_rd_pvld_p || _015_;
  assign rd_req_next_S = 0 ;
  logic [0:0] ld2st_rd_pvld_p_C1 ;
  logic [0:0] ld2st_rd_pvld_p_R1 ;
  logic [0:0] ld2st_rd_pvld_p_X1 ;
  logic [0:0] _015__C1 ;
  logic [0:0] _015__R1 ;
  logic [0:0] _015__X1 ;
  assign rd_req_next_T = ld2st_rd_pvld_p_T | _015__T ;
  assign ld2st_rd_pvld_p_C1 = rd_req_next_C ;
  assign ld2st_rd_pvld_p_X1 = rd_req_next_X ;
  assign _015__C1 = rd_req_next_C ;
  assign _015__X1 = rd_req_next_X ;
  assign ld2st_rd_pvld_p_R1 = ( rd_req_next_R | rd_req_next_C & _015__T ) & { 1{ _015_ == 0 }} ;
  assign _015__R1 = ( rd_req_next_R | rd_req_next_C & ld2st_rd_pvld_p_T ) & { 1{ ld2st_rd_pvld_p == 0 }} ;
  assign _030_ = _029_ || rd_pushing;
  assign _030__S = 0 ;
  logic [0:0] _029__C0 ;
  logic [0:0] _029__R0 ;
  logic [0:0] _029__X0 ;
  logic [0:0] rd_pushing_C4 ;
  logic [0:0] rd_pushing_R4 ;
  logic [0:0] rd_pushing_X4 ;
  assign _030__T = _029__T | rd_pushing_T ;
  assign _029__C0 = _030__C ;
  assign _029__X0 = _030__X ;
  assign rd_pushing_C4 = _030__C ;
  assign rd_pushing_X4 = _030__X ;
  assign _029__R0 = ( _030__R | _030__C & rd_pushing_T ) & { 1{ rd_pushing == 0 }} ;
  assign rd_pushing_R4 = ( _030__R | _030__C & _029__T ) & { 1{ _029_ == 0 }} ;
  assign _031_ = _030_ || _035_;
  assign _031__S = 0 ;
  logic [0:0] _030__C0 ;
  logic [0:0] _030__R0 ;
  logic [0:0] _030__X0 ;
  logic [0:0] _035__C0 ;
  logic [0:0] _035__R0 ;
  logic [0:0] _035__X0 ;
  assign _031__T = _030__T | _035__T ;
  assign _030__C0 = _031__C ;
  assign _030__X0 = _031__X ;
  assign _035__C0 = _031__C ;
  assign _035__X0 = _031__X ;
  assign _030__R0 = ( _031__R | _031__C & _035__T ) & { 1{ _035_ == 0 }} ;
  assign _035__R0 = ( _031__R | _031__C & _030__T ) & { 1{ _030_ == 0 }} ;
  assign _032_ = _029_ || _019_;
  assign _032__S = 0 ;
  logic [0:0] _029__C1 ;
  logic [0:0] _029__R1 ;
  logic [0:0] _029__X1 ;
  logic [0:0] _019__C0 ;
  logic [0:0] _019__R0 ;
  logic [0:0] _019__X0 ;
  assign _032__T = _029__T | _019__T ;
  assign _029__C1 = _032__C ;
  assign _029__X1 = _032__X ;
  assign _019__C0 = _032__C ;
  assign _019__X0 = _032__X ;
  assign _029__R1 = ( _032__R | _032__C & _019__T ) & { 1{ _019_ == 0 }} ;
  assign _019__R0 = ( _032__R | _032__C & _029__T ) & { 1{ _029_ == 0 }} ;
  assign _033_ = _031_ || _032_;
  assign _033__S = 0 ;
  logic [0:0] _031__C0 ;
  logic [0:0] _031__R0 ;
  logic [0:0] _031__X0 ;
  logic [0:0] _032__C0 ;
  logic [0:0] _032__R0 ;
  logic [0:0] _032__X0 ;
  assign _033__T = _031__T | _032__T ;
  assign _031__C0 = _033__C ;
  assign _031__X0 = _033__X ;
  assign _032__C0 = _033__C ;
  assign _032__X0 = _033__X ;
  assign _031__R0 = ( _033__R | _033__C & _032__T ) & { 1{ _032_ == 0 }} ;
  assign _032__R0 = ( _033__R | _033__C & _031__T ) & { 1{ _031_ == 0 }} ;
  assign nvdla_core_clk_mgated_enable = _033_ || rd_pushing;
  assign nvdla_core_clk_mgated_enable_S = 0 ;
  logic [0:0] _033__C0 ;
  logic [0:0] _033__R0 ;
  logic [0:0] _033__X0 ;
  logic [0:0] rd_pushing_C5 ;
  logic [0:0] rd_pushing_R5 ;
  logic [0:0] rd_pushing_X5 ;
  assign nvdla_core_clk_mgated_enable_T = _033__T | rd_pushing_T ;
  assign _033__C0 = nvdla_core_clk_mgated_enable_C ;
  assign _033__X0 = nvdla_core_clk_mgated_enable_X ;
  assign rd_pushing_C5 = nvdla_core_clk_mgated_enable_C ;
  assign rd_pushing_X5 = nvdla_core_clk_mgated_enable_X ;
  assign _033__R0 = ( nvdla_core_clk_mgated_enable_R | nvdla_core_clk_mgated_enable_C & rd_pushing_T ) & { 1{ rd_pushing == 0 }} ;
  assign rd_pushing_R5 = ( nvdla_core_clk_mgated_enable_R | nvdla_core_clk_mgated_enable_C & _033__T ) & { 1{ _033_ == 0 }} ;
  assign _034_ = | ld2st_rd_count_p;
  logic [4:0] ld2st_rd_count_p_C2 ;
  logic [4:0] ld2st_rd_count_p_R2 ;
  logic [4:0] ld2st_rd_count_p_X2 ;
  assign _034__T = | ld2st_rd_count_p_T ;
  assign ld2st_rd_count_p_C2 = { 5{ _034__C }} ;
  assign ld2st_rd_count_p_X2 = { 5{ _034__X }} ;
  assign ld2st_rd_count_p_R2 = { 5{ _034__R }} & ld2st_rd_count_p ;
  assign _034__S = 0 ;
  assign _035_ = ld2st_wr_busy_int != ld2st_wr_busy_next;
  assign _035__S = 0 ;
  logic [0:0] ld2st_wr_busy_int_C2 ;
  logic [0:0] ld2st_wr_busy_int_R2 ;
  logic [0:0] ld2st_wr_busy_int_X2 ;
  logic [0:0] ld2st_wr_busy_next_C1 ;
  logic [0:0] ld2st_wr_busy_next_R1 ;
  logic [0:0] ld2st_wr_busy_next_X1 ;
  assign _035__T = (| ld2st_wr_busy_int_T ) | (|ld2st_wr_busy_next_T ) ;
  assign ld2st_wr_busy_int_C2 = { 1{ _035__C }} ;
  assign ld2st_wr_busy_int_R2 = { 1{ _035__R }} | ( { 1{ _035__C }} & ld2st_wr_busy_next_T );
  assign ld2st_wr_busy_int_X2 = { 1{ _035__X }} ;
  assign ld2st_wr_busy_next_C1 = { 1{ _035__C }} ;
  assign ld2st_wr_busy_next_R1 = { 1{ _035__R }} | ( { 1{ _035__C }} & ld2st_wr_busy_int_T );
  assign ld2st_wr_busy_next_X1 = { 1{ _035__X }} ;
  always @(posedge nvdla_core_clk_mgated)
      ld2st_rd_pd <= _002_;
  logic [160:0] _002__X0 ;
  logic [160:0] _002__R0 ;
  logic [160:0] _002__C0 ;
  assign _002__X0 = { 161{ ld2st_rd_pd_S != _002__S }} ;
  assign _002__R0 = 0 ;
  assign _002__C0 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      ld2st_rd_pd_T 		<= !nvdla_core_rstn ? 0 : ( _002__T & _002__X0 );
  always @( posedge nvdla_core_clk_mgated )
      ld2st_rd_pd_t_flag 	<= !nvdla_core_rstn ? 0 : ld2st_rd_pd_t_flag ? 1 : | _002__T & ( | _002__X0 );
  always @( posedge nvdla_core_clk_mgated )
      ld2st_rd_pd_r_flag 	<= !nvdla_core_rstn ? 0 : ld2st_rd_pd_r_flag ? 1 : ld2st_rd_pd_t_flag ? 0 : ( | ld2st_rd_pd_R ) ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      ld2st_rd_pvld_int <= 1'b0;
    else
      ld2st_rd_pvld_int <= rd_req_next;
  logic [0:0] rd_req_next_X0 ;
  logic [0:0] rd_req_next_R0 ;
  logic [0:0] rd_req_next_C0 ;
  assign rd_req_next_X0 = { 1{ ld2st_rd_pvld_int_S != rd_req_next_S }} ;
  assign rd_req_next_R0 = 0 ;
  assign rd_req_next_C0 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      ld2st_rd_pvld_int_T 		<= !nvdla_core_rstn ? 0 : ( rd_req_next_T & rd_req_next_X0 );
  always @( posedge nvdla_core_clk_mgated )
      ld2st_rd_pvld_int_t_flag 	<= !nvdla_core_rstn ? 0 : ld2st_rd_pvld_int_t_flag ? 1 : | rd_req_next_T & ( | rd_req_next_X0 );
  always @( posedge nvdla_core_clk_mgated )
      ld2st_rd_pvld_int_r_flag 	<= !nvdla_core_rstn ? 0 : ld2st_rd_pvld_int_r_flag ? 1 : ld2st_rd_pvld_int_t_flag ? 0 : ( | ld2st_rd_pvld_int_R ) ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      ld2st_rd_count_p <= 5'b00000;
    else
      ld2st_rd_count_p <= _001_;
  logic [4:0] _001__X0 ;
  logic [4:0] _001__R0 ;
  logic [4:0] _001__C0 ;
  assign _001__X0 = { 5{ ld2st_rd_count_p_S != _001__S }} ;
  assign _001__R0 = 0 ;
  assign _001__C0 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      ld2st_rd_count_p_T 		<= !nvdla_core_rstn ? 0 : ( _001__T & _001__X0 );
  always @( posedge nvdla_core_clk_mgated )
      ld2st_rd_count_p_t_flag 	<= !nvdla_core_rstn ? 0 : ld2st_rd_count_p_t_flag ? 1 : | _001__T & ( | _001__X0 );
  always @( posedge nvdla_core_clk_mgated )
      ld2st_rd_count_p_r_flag 	<= !nvdla_core_rstn ? 0 : ld2st_rd_count_p_r_flag ? 1 : ld2st_rd_count_p_t_flag ? 0 : ( | ld2st_rd_count_p_R ) ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      ld2st_rd_adr <= 5'b00000;
    else
      ld2st_rd_adr <= _000_;
  logic [4:0] _000__X0 ;
  logic [4:0] _000__R0 ;
  logic [4:0] _000__C0 ;
  assign _000__X0 = { 5{ ld2st_rd_adr_S != _000__S }} ;
  assign _000__R0 = 0 ;
  assign _000__C0 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      ld2st_rd_adr_T 		<= !nvdla_core_rstn ? 0 : ( _000__T & _000__X0 );
  always @( posedge nvdla_core_clk_mgated )
      ld2st_rd_adr_t_flag 	<= !nvdla_core_rstn ? 0 : ld2st_rd_adr_t_flag ? 1 : | _000__T & ( | _000__X0 );
  always @( posedge nvdla_core_clk_mgated )
      ld2st_rd_adr_r_flag 	<= !nvdla_core_rstn ? 0 : ld2st_rd_adr_r_flag ? 1 : ld2st_rd_adr_t_flag ? 0 : ( | ld2st_rd_adr_R ) ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      ld2st_wr_adr <= 5'b00000;
    else
      ld2st_wr_adr <= _003_;
  logic [4:0] _003__X0 ;
  logic [4:0] _003__R0 ;
  logic [4:0] _003__C0 ;
  assign _003__X0 = { 5{ ld2st_wr_adr_S != _003__S }} ;
  assign _003__R0 = 0 ;
  assign _003__C0 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      ld2st_wr_adr_T 		<= !nvdla_core_rstn ? 0 : ( _003__T & _003__X0 );
  always @( posedge nvdla_core_clk_mgated )
      ld2st_wr_adr_t_flag 	<= !nvdla_core_rstn ? 0 : ld2st_wr_adr_t_flag ? 1 : | _003__T & ( | _003__X0 );
  always @( posedge nvdla_core_clk_mgated )
      ld2st_wr_adr_r_flag 	<= !nvdla_core_rstn ? 0 : ld2st_wr_adr_r_flag ? 1 : ld2st_wr_adr_t_flag ? 0 : ( | ld2st_wr_adr_R ) ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      ld2st_wr_busy_int <= 1'b0;
    else
      ld2st_wr_busy_int <= ld2st_wr_busy_next;
  logic [0:0] ld2st_wr_busy_next_X2 ;
  logic [0:0] ld2st_wr_busy_next_R2 ;
  logic [0:0] ld2st_wr_busy_next_C2 ;
  assign ld2st_wr_busy_next_X2 = { 1{ ld2st_wr_busy_int_S != ld2st_wr_busy_next_S }} ;
  assign ld2st_wr_busy_next_R2 = 0 ;
  assign ld2st_wr_busy_next_C2 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      ld2st_wr_busy_int_T 		<= !nvdla_core_rstn ? 0 : ( ld2st_wr_busy_next_T & ld2st_wr_busy_next_X2 );
  always @( posedge nvdla_core_clk_mgated )
      ld2st_wr_busy_int_t_flag 	<= !nvdla_core_rstn ? 0 : ld2st_wr_busy_int_t_flag ? 1 : | ld2st_wr_busy_next_T & ( | ld2st_wr_busy_next_X2 );
  always @( posedge nvdla_core_clk_mgated )
      ld2st_wr_busy_int_r_flag 	<= !nvdla_core_rstn ? 0 : ld2st_wr_busy_int_r_flag ? 1 : ld2st_wr_busy_int_t_flag ? 0 : ( | ld2st_wr_busy_int_R ) ;
  always @(posedge nvdla_core_clk_mgated or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      ld2st_wr_count <= 5'b00000;
    else
      ld2st_wr_count <= _004_;
  logic [4:0] _004__X0 ;
  logic [4:0] _004__R0 ;
  logic [4:0] _004__C0 ;
  assign _004__X0 = { 5{ ld2st_wr_count_S != _004__S }} ;
  assign _004__R0 = 0 ;
  assign _004__C0 = 0 ;
  always @( posedge nvdla_core_clk_mgated )
      ld2st_wr_count_T 		<= !nvdla_core_rstn ? 0 : ( _004__T & _004__X0 );
  always @( posedge nvdla_core_clk_mgated )
      ld2st_wr_count_t_flag 	<= !nvdla_core_rstn ? 0 : ld2st_wr_count_t_flag ? 1 : | _004__T & ( | _004__X0 );
  always @( posedge nvdla_core_clk_mgated )
      ld2st_wr_count_r_flag 	<= !nvdla_core_rstn ? 0 : ld2st_wr_count_r_flag ? 1 : ld2st_wr_count_t_flag ? 0 : ( | ld2st_wr_count_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      wr_busy_in <= 1'b0;
    else
      wr_busy_in <= wr_busy_in_next;
  logic [0:0] wr_busy_in_next_X0 ;
  logic [0:0] wr_busy_in_next_R0 ;
  logic [0:0] wr_busy_in_next_C0 ;
  assign wr_busy_in_next_X0 = { 1{ wr_busy_in_S != wr_busy_in_next_S }} ;
  assign wr_busy_in_next_R0 = 0 ;
  assign wr_busy_in_next_C0 = 0 ;
  always @( posedge nvdla_core_clk )
      wr_busy_in_T 		<= !nvdla_core_rstn ? 0 : ( wr_busy_in_next_T & wr_busy_in_next_X0 );
  always @( posedge nvdla_core_clk )
      wr_busy_in_t_flag 	<= !nvdla_core_rstn ? 0 : wr_busy_in_t_flag ? 1 : | wr_busy_in_next_T & ( | wr_busy_in_next_X0 );
  always @( posedge nvdla_core_clk )
      wr_busy_in_r_flag 	<= !nvdla_core_rstn ? 0 : wr_busy_in_r_flag ? 1 : wr_busy_in_t_flag ? 0 : ( | wr_busy_in_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      ld2st_wr_pvld_in <= 1'b0;
    else
      ld2st_wr_pvld_in <= _005_;
  logic [0:0] _005__X0 ;
  logic [0:0] _005__R0 ;
  logic [0:0] _005__C0 ;
  assign _005__X0 = { 1{ ld2st_wr_pvld_in_S != _005__S }} ;
  assign _005__R0 = 0 ;
  assign _005__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      ld2st_wr_pvld_in_T 		<= !nvdla_core_rstn ? 0 : ( _005__T & _005__X0 );
  always @( posedge nvdla_core_clk )
      ld2st_wr_pvld_in_t_flag 	<= !nvdla_core_rstn ? 0 : ld2st_wr_pvld_in_t_flag ? 1 : | _005__T & ( | _005__X0 );
  always @( posedge nvdla_core_clk )
      ld2st_wr_pvld_in_r_flag 	<= !nvdla_core_rstn ? 0 : ld2st_wr_pvld_in_r_flag ? 1 : ld2st_wr_pvld_in_t_flag ? 0 : ( | ld2st_wr_pvld_in_R ) ;
  assign _002_ = rd_popping ? ld2st_rd_pd_p : ld2st_rd_pd;
  logic [0:0] rd_popping_C2 ;
  logic [0:0] rd_popping_R2 ;
  logic [0:0] rd_popping_X2 ;
  assign rd_popping_C2 = | _002__C ;
  assign rd_popping_X2 = | _002__X ;
  assign _002__T = rd_popping ? ( { 161{ rd_popping_T  }} | ld2st_rd_pd_p_T ) : ( { 161{ rd_popping_T  }} | ld2st_rd_pd_T );
  assign _002__S = rd_popping ? ld2st_rd_pd_p_S : ld2st_rd_pd_S ;
  assign rd_popping_R2 = ( | (_002__R | ( _002__C & ( { 161{ rd_popping }} & ld2st_rd_pd_p_T | { 161{ !rd_popping }} & ld2st_rd_pd_T )))) && ld2st_rd_pd_p != ld2st_rd_pd ;
  logic [160:0] ld2st_rd_pd_p_C0 ;
  logic [160:0] ld2st_rd_pd_p_R0 ;
  logic [160:0] ld2st_rd_pd_p_X0 ;
  assign ld2st_rd_pd_p_C0 = { 161{ rd_popping }} ;
  assign ld2st_rd_pd_p_R0 = { 161{ rd_popping }} & ( _002__R | ( { 161{ rd_popping_T  }} & _002__C ));
  assign ld2st_rd_pd_p_X0 = { 161{ rd_popping }} & _002__X ;
  logic [160:0] ld2st_rd_pd_C1 ;
  logic [160:0] ld2st_rd_pd_R1 ;
  logic [160:0] ld2st_rd_pd_X1 ;
  assign ld2st_rd_pd_C1 = { 161{ !rd_popping }} ;
  assign ld2st_rd_pd_R1 = { 161{ !rd_popping }} & ( _002__R | ( { 161{ rd_popping_T  }} & _002__C ));
  assign ld2st_rd_pd_X1 = { 161{ !rd_popping }} & _002__X ;
  assign _001_ = _029_ ? rd_count_p_next : ld2st_rd_count_p;
  logic [0:0] _029__C2 ;
  logic [0:0] _029__R2 ;
  logic [0:0] _029__X2 ;
  assign _029__C2 = | _001__C ;
  assign _029__X2 = | _001__X ;
  assign _001__T = _029_ ? ( { 5{ _029__T  }} | rd_count_p_next_T ) : ( { 5{ _029__T  }} | ld2st_rd_count_p_T );
  assign _001__S = _029_ ? rd_count_p_next_S : ld2st_rd_count_p_S ;
  assign _029__R2 = ( | (_001__R | ( _001__C & ( { 5{ _029_ }} & rd_count_p_next_T | { 5{ !_029_ }} & ld2st_rd_count_p_T )))) && rd_count_p_next != ld2st_rd_count_p ;
  logic [4:0] rd_count_p_next_C0 ;
  logic [4:0] rd_count_p_next_R0 ;
  logic [4:0] rd_count_p_next_X0 ;
  assign rd_count_p_next_C0 = { 5{ _029_ }} ;
  assign rd_count_p_next_R0 = { 5{ _029_ }} & ( _001__R | ( { 5{ _029__T  }} & _001__C ));
  assign rd_count_p_next_X0 = { 5{ _029_ }} & _001__X ;
  logic [4:0] ld2st_rd_count_p_C3 ;
  logic [4:0] ld2st_rd_count_p_R3 ;
  logic [4:0] ld2st_rd_count_p_X3 ;
  assign ld2st_rd_count_p_C3 = { 5{ !_029_ }} ;
  assign ld2st_rd_count_p_R3 = { 5{ !_029_ }} & ( _001__R | ( { 5{ _029__T  }} & _001__C ));
  assign ld2st_rd_count_p_X3 = { 5{ !_029_ }} & _001__X ;
  assign _000_ = rd_popping ? rd_adr_next_popping : ld2st_rd_adr;
  logic [0:0] rd_popping_C3 ;
  logic [0:0] rd_popping_R3 ;
  logic [0:0] rd_popping_X3 ;
  assign rd_popping_C3 = | _000__C ;
  assign rd_popping_X3 = | _000__X ;
  assign _000__T = rd_popping ? ( { 5{ rd_popping_T  }} | rd_adr_next_popping_T ) : ( { 5{ rd_popping_T  }} | ld2st_rd_adr_T );
  assign _000__S = rd_popping ? rd_adr_next_popping_S : ld2st_rd_adr_S ;
  assign rd_popping_R3 = ( | (_000__R | ( _000__C & ( { 5{ rd_popping }} & rd_adr_next_popping_T | { 5{ !rd_popping }} & ld2st_rd_adr_T )))) && rd_adr_next_popping != ld2st_rd_adr ;
  logic [4:0] rd_adr_next_popping_C0 ;
  logic [4:0] rd_adr_next_popping_R0 ;
  logic [4:0] rd_adr_next_popping_X0 ;
  assign rd_adr_next_popping_C0 = { 5{ rd_popping }} ;
  assign rd_adr_next_popping_R0 = { 5{ rd_popping }} & ( _000__R | ( { 5{ rd_popping_T  }} & _000__C ));
  assign rd_adr_next_popping_X0 = { 5{ rd_popping }} & _000__X ;
  logic [4:0] ld2st_rd_adr_C2 ;
  logic [4:0] ld2st_rd_adr_R2 ;
  logic [4:0] ld2st_rd_adr_X2 ;
  assign ld2st_rd_adr_C2 = { 5{ !rd_popping }} ;
  assign ld2st_rd_adr_R2 = { 5{ !rd_popping }} & ( _000__R | ( { 5{ rd_popping_T  }} & _000__C ));
  assign ld2st_rd_adr_X2 = { 5{ !rd_popping }} & _000__X ;
  assign _003_ = rd_pushing ? wr_adr_next : ld2st_wr_adr;
  logic [0:0] rd_pushing_C6 ;
  logic [0:0] rd_pushing_R6 ;
  logic [0:0] rd_pushing_X6 ;
  assign rd_pushing_C6 = | _003__C ;
  assign rd_pushing_X6 = | _003__X ;
  assign _003__T = rd_pushing ? ( { 5{ rd_pushing_T  }} | wr_adr_next_T ) : ( { 5{ rd_pushing_T  }} | ld2st_wr_adr_T );
  assign _003__S = rd_pushing ? wr_adr_next_S : ld2st_wr_adr_S ;
  assign rd_pushing_R6 = ( | (_003__R | ( _003__C & ( { 5{ rd_pushing }} & wr_adr_next_T | { 5{ !rd_pushing }} & ld2st_wr_adr_T )))) && wr_adr_next != ld2st_wr_adr ;
  logic [4:0] wr_adr_next_C0 ;
  logic [4:0] wr_adr_next_R0 ;
  logic [4:0] wr_adr_next_X0 ;
  assign wr_adr_next_C0 = { 5{ rd_pushing }} ;
  assign wr_adr_next_R0 = { 5{ rd_pushing }} & ( _003__R | ( { 5{ rd_pushing_T  }} & _003__C ));
  assign wr_adr_next_X0 = { 5{ rd_pushing }} & _003__X ;
  logic [4:0] ld2st_wr_adr_C2 ;
  logic [4:0] ld2st_wr_adr_R2 ;
  logic [4:0] ld2st_wr_adr_X2 ;
  assign ld2st_wr_adr_C2 = { 5{ !rd_pushing }} ;
  assign ld2st_wr_adr_R2 = { 5{ !rd_pushing }} & ( _003__R | ( { 5{ rd_pushing_T  }} & _003__C ));
  assign ld2st_wr_adr_X2 = { 5{ !rd_pushing }} & _003__X ;
  assign _004_ = _036_ ? wr_count_next : ld2st_wr_count;
  logic [0:0] _036__C0 ;
  logic [0:0] _036__R0 ;
  logic [0:0] _036__X0 ;
  assign _036__C0 = | _004__C ;
  assign _036__X0 = | _004__X ;
  assign _004__T = _036_ ? ( { 5{ _036__T  }} | wr_count_next_T ) : ( { 5{ _036__T  }} | ld2st_wr_count_T );
  assign _004__S = _036_ ? wr_count_next_S : ld2st_wr_count_S ;
  assign _036__R0 = ( | (_004__R | ( _004__C & ( { 5{ _036_ }} & wr_count_next_T | { 5{ !_036_ }} & ld2st_wr_count_T )))) && wr_count_next != ld2st_wr_count ;
  logic [4:0] wr_count_next_C0 ;
  logic [4:0] wr_count_next_R0 ;
  logic [4:0] wr_count_next_X0 ;
  assign wr_count_next_C0 = { 5{ _036_ }} ;
  assign wr_count_next_R0 = { 5{ _036_ }} & ( _004__R | ( { 5{ _036__T  }} & _004__C ));
  assign wr_count_next_X0 = { 5{ _036_ }} & _004__X ;
  logic [4:0] ld2st_wr_count_C3 ;
  logic [4:0] ld2st_wr_count_R3 ;
  logic [4:0] ld2st_wr_count_X3 ;
  assign ld2st_wr_count_C3 = { 5{ !_036_ }} ;
  assign ld2st_wr_count_R3 = { 5{ !_036_ }} & ( _004__R | ( { 5{ _036__T  }} & _004__C ));
  assign ld2st_wr_count_X3 = { 5{ !_036_ }} & _004__X ;
  assign _005_ = wr_busy_in_int ? ld2st_wr_pvld_in : ram_iwe;
  logic [0:0] wr_busy_in_int_C0 ;
  logic [0:0] wr_busy_in_int_R0 ;
  logic [0:0] wr_busy_in_int_X0 ;
  assign wr_busy_in_int_C0 = | _005__C ;
  assign wr_busy_in_int_X0 = | _005__X ;
  assign _005__T = wr_busy_in_int ? ( { 1{ wr_busy_in_int_T  }} | ld2st_wr_pvld_in_T ) : ( { 1{ wr_busy_in_int_T  }} | ram_iwe_T );
  assign _005__S = wr_busy_in_int ? ld2st_wr_pvld_in_S : ram_iwe_S ;
  assign wr_busy_in_int_R0 = ( | (_005__R | ( _005__C & ( { 1{ wr_busy_in_int }} & ld2st_wr_pvld_in_T | { 1{ !wr_busy_in_int }} & ram_iwe_T )))) && ld2st_wr_pvld_in != ram_iwe ;
  logic [0:0] ld2st_wr_pvld_in_C4 ;
  logic [0:0] ld2st_wr_pvld_in_R4 ;
  logic [0:0] ld2st_wr_pvld_in_X4 ;
  assign ld2st_wr_pvld_in_C4 = { 1{ wr_busy_in_int }} ;
  assign ld2st_wr_pvld_in_R4 = { 1{ wr_busy_in_int }} & ( _005__R | ( { 1{ wr_busy_in_int_T  }} & _005__C ));
  assign ld2st_wr_pvld_in_X4 = { 1{ wr_busy_in_int }} & _005__X ;
  logic [0:0] ram_iwe_C0 ;
  logic [0:0] ram_iwe_R0 ;
  logic [0:0] ram_iwe_X0 ;
  assign ram_iwe_C0 = { 1{ !wr_busy_in_int }} ;
  assign ram_iwe_R0 = { 1{ !wr_busy_in_int }} & ( _005__R | ( { 1{ wr_busy_in_int_T  }} & _005__C ));
  assign ram_iwe_X0 = { 1{ !wr_busy_in_int }} & _005__X ;
  assign _037_ = ld2st_rd_count_p - 1'b1;
  assign _037__S = 0 ;
  logic [4:0] ld2st_rd_count_p_C4 ;
  logic [4:0] ld2st_rd_count_p_R4 ;
  logic [4:0] ld2st_rd_count_p_X4 ;
  assign _037__T = ld2st_rd_count_p_T ;
  assign ld2st_rd_count_p_C4 = _037__C ;
  assign ld2st_rd_count_p_R4 = _037__R ;
  assign ld2st_rd_count_p_X4 = _037__X ;
  assign _038_ = ld2st_wr_count - 1'b1;
  assign _038__S = 0 ;
  logic [4:0] ld2st_wr_count_C4 ;
  logic [4:0] ld2st_wr_count_R4 ;
  logic [4:0] ld2st_wr_count_X4 ;
  assign _038__T = ld2st_wr_count_T ;
  assign ld2st_wr_count_C4 = _038__C ;
  assign ld2st_wr_count_R4 = _038__R ;
  assign ld2st_wr_count_X4 = _038__X ;
  assign wr_adr_next = _010_ ? 5'b00000 : _006_;
  logic [0:0] _010__C0 ;
  logic [0:0] _010__R0 ;
  logic [0:0] _010__X0 ;
  assign _010__C0 = | wr_adr_next_C ;
  assign _010__X0 = | wr_adr_next_X ;
  logic [4:0] _006__C0 ;
  logic [4:0] _006__R0 ;
  logic [4:0] _006__X0 ;
  assign _006__C0 = { 5{ !_010_ }};
  assign _006__R0 = { 5{ !_010_ }} & ( wr_adr_next_R | ( { 5{ _010__T  }} & wr_adr_next_C ));
  assign _006__X0 = { 5{ !_010_ }} & wr_adr_next_X ;
  assign wr_adr_next_T = _010_ ? { 5{ | _010__T  }} : ( { 5{ | _010__T  }} | _006__T );
  assign wr_adr_next_S = _010_ ? _010__S : _006__S ;
  assign _010__R0 = ( | (wr_adr_next_R | ( { 5{ !_010_ }} & _006__T & wr_adr_next_C ))) && 5'b00000 != _006_ ;
  assign _039_ = _011_ ? 5'b10100 : ld2st_rd_adr;
  logic [0:0] _011__C1 ;
  logic [0:0] _011__R1 ;
  logic [0:0] _011__X1 ;
  assign _011__C1 = | _039__C ;
  assign _011__X1 = | _039__X ;
  logic [4:0] ld2st_rd_adr_C3 ;
  logic [4:0] ld2st_rd_adr_R3 ;
  logic [4:0] ld2st_rd_adr_X3 ;
  assign ld2st_rd_adr_C3 = { 5{ !_011_ }};
  assign ld2st_rd_adr_R3 = { 5{ !_011_ }} & ( _039__R | ( { 5{ _011__T  }} & _039__C ));
  assign ld2st_rd_adr_X3 = { 5{ !_011_ }} & _039__X ;
  assign _039__T = _011_ ? { 5{ | _011__T  }} : ( { 5{ | _011__T  }} | ld2st_rd_adr_T );
  assign _039__S = _011_ ? _011__S : ld2st_rd_adr_S ;
  assign _011__R1 = ( | (_039__R | ( { 5{ !_011_ }} & ld2st_rd_adr_T & _039__C ))) && 5'b10100 != ld2st_rd_adr ;
  assign rd_adr_next_popping = _012_ ? 5'b00000 : _007_;
  logic [0:0] _012__C0 ;
  logic [0:0] _012__R0 ;
  logic [0:0] _012__X0 ;
  assign _012__C0 = | rd_adr_next_popping_C ;
  assign _012__X0 = | rd_adr_next_popping_X ;
  logic [4:0] _007__C0 ;
  logic [4:0] _007__R0 ;
  logic [4:0] _007__X0 ;
  assign _007__C0 = { 5{ !_012_ }};
  assign _007__R0 = { 5{ !_012_ }} & ( rd_adr_next_popping_R | ( { 5{ _012__T  }} & rd_adr_next_popping_C ));
  assign _007__X0 = { 5{ !_012_ }} & rd_adr_next_popping_X ;
  assign rd_adr_next_popping_T = _012_ ? { 5{ | _012__T  }} : ( { 5{ | _012__T  }} | _007__T );
  assign rd_adr_next_popping_S = _012_ ? _012__S : _007__S ;
  assign _012__R0 = ( | (rd_adr_next_popping_R | ( { 5{ !_012_ }} & _007__T & rd_adr_next_popping_C ))) && 5'b00000 != _007_ ;
  assign rd_count_p_next_rd_popping = rd_pushing ? ld2st_rd_count_p : _037_;
  logic [0:0] rd_pushing_C7 ;
  logic [0:0] rd_pushing_R7 ;
  logic [0:0] rd_pushing_X7 ;
  assign rd_pushing_C7 = | rd_count_p_next_rd_popping_C ;
  assign rd_pushing_X7 = | rd_count_p_next_rd_popping_X ;
  assign rd_count_p_next_rd_popping_T = rd_pushing ? ( { 5{ rd_pushing_T  }} | ld2st_rd_count_p_T ) : ( { 5{ rd_pushing_T  }} | _037__T );
  assign rd_count_p_next_rd_popping_S = rd_pushing ? ld2st_rd_count_p_S : _037__S ;
  assign rd_pushing_R7 = ( | (rd_count_p_next_rd_popping_R | ( rd_count_p_next_rd_popping_C & ( { 5{ rd_pushing }} & ld2st_rd_count_p_T | { 5{ !rd_pushing }} & _037__T )))) && ld2st_rd_count_p != _037_ ;
  logic [4:0] ld2st_rd_count_p_C5 ;
  logic [4:0] ld2st_rd_count_p_R5 ;
  logic [4:0] ld2st_rd_count_p_X5 ;
  assign ld2st_rd_count_p_C5 = { 5{ rd_pushing }} ;
  assign ld2st_rd_count_p_R5 = { 5{ rd_pushing }} & ( rd_count_p_next_rd_popping_R | ( { 5{ rd_pushing_T  }} & rd_count_p_next_rd_popping_C ));
  assign ld2st_rd_count_p_X5 = { 5{ rd_pushing }} & rd_count_p_next_rd_popping_X ;
  logic [4:0] _037__C0 ;
  logic [4:0] _037__R0 ;
  logic [4:0] _037__X0 ;
  assign _037__C0 = { 5{ !rd_pushing }} ;
  assign _037__R0 = { 5{ !rd_pushing }} & ( rd_count_p_next_rd_popping_R | ( { 5{ rd_pushing_T  }} & rd_count_p_next_rd_popping_C ));
  assign _037__X0 = { 5{ !rd_pushing }} & rd_count_p_next_rd_popping_X ;
  assign rd_count_p_next_no_rd_popping = rd_pushing ? _008_ : ld2st_rd_count_p;
  logic [0:0] rd_pushing_C8 ;
  logic [0:0] rd_pushing_R8 ;
  logic [0:0] rd_pushing_X8 ;
  assign rd_pushing_C8 = | rd_count_p_next_no_rd_popping_C ;
  assign rd_pushing_X8 = | rd_count_p_next_no_rd_popping_X ;
  assign rd_count_p_next_no_rd_popping_T = rd_pushing ? ( { 5{ rd_pushing_T  }} | _008__T ) : ( { 5{ rd_pushing_T  }} | ld2st_rd_count_p_T );
  assign rd_count_p_next_no_rd_popping_S = rd_pushing ? _008__S : ld2st_rd_count_p_S ;
  assign rd_pushing_R8 = ( | (rd_count_p_next_no_rd_popping_R | ( rd_count_p_next_no_rd_popping_C & ( { 5{ rd_pushing }} & _008__T | { 5{ !rd_pushing }} & ld2st_rd_count_p_T )))) && _008_ != ld2st_rd_count_p ;
  logic [4:0] _008__C0 ;
  logic [4:0] _008__R0 ;
  logic [4:0] _008__X0 ;
  assign _008__C0 = { 5{ rd_pushing }} ;
  assign _008__R0 = { 5{ rd_pushing }} & ( rd_count_p_next_no_rd_popping_R | ( { 5{ rd_pushing_T  }} & rd_count_p_next_no_rd_popping_C ));
  assign _008__X0 = { 5{ rd_pushing }} & rd_count_p_next_no_rd_popping_X ;
  logic [4:0] ld2st_rd_count_p_C6 ;
  logic [4:0] ld2st_rd_count_p_R6 ;
  logic [4:0] ld2st_rd_count_p_X6 ;
  assign ld2st_rd_count_p_C6 = { 5{ !rd_pushing }} ;
  assign ld2st_rd_count_p_R6 = { 5{ !rd_pushing }} & ( rd_count_p_next_no_rd_popping_R | ( { 5{ rd_pushing_T  }} & rd_count_p_next_no_rd_popping_C ));
  assign ld2st_rd_count_p_X6 = { 5{ !rd_pushing }} & rd_count_p_next_no_rd_popping_X ;
  assign rd_count_p_next = rd_popping ? rd_count_p_next_rd_popping : rd_count_p_next_no_rd_popping;
  logic [0:0] rd_popping_C4 ;
  logic [0:0] rd_popping_R4 ;
  logic [0:0] rd_popping_X4 ;
  assign rd_popping_C4 = | rd_count_p_next_C ;
  assign rd_popping_X4 = | rd_count_p_next_X ;
  assign rd_count_p_next_T = rd_popping ? ( { 5{ rd_popping_T  }} | rd_count_p_next_rd_popping_T ) : ( { 5{ rd_popping_T  }} | rd_count_p_next_no_rd_popping_T );
  assign rd_count_p_next_S = rd_popping ? rd_count_p_next_rd_popping_S : rd_count_p_next_no_rd_popping_S ;
  assign rd_popping_R4 = ( | (rd_count_p_next_R | ( rd_count_p_next_C & ( { 5{ rd_popping }} & rd_count_p_next_rd_popping_T | { 5{ !rd_popping }} & rd_count_p_next_no_rd_popping_T )))) && rd_count_p_next_rd_popping != rd_count_p_next_no_rd_popping ;
  logic [4:0] rd_count_p_next_rd_popping_C0 ;
  logic [4:0] rd_count_p_next_rd_popping_R0 ;
  logic [4:0] rd_count_p_next_rd_popping_X0 ;
  assign rd_count_p_next_rd_popping_C0 = { 5{ rd_popping }} ;
  assign rd_count_p_next_rd_popping_R0 = { 5{ rd_popping }} & ( rd_count_p_next_R | ( { 5{ rd_popping_T  }} & rd_count_p_next_C ));
  assign rd_count_p_next_rd_popping_X0 = { 5{ rd_popping }} & rd_count_p_next_X ;
  logic [4:0] rd_count_p_next_no_rd_popping_C0 ;
  logic [4:0] rd_count_p_next_no_rd_popping_R0 ;
  logic [4:0] rd_count_p_next_no_rd_popping_X0 ;
  assign rd_count_p_next_no_rd_popping_C0 = { 5{ !rd_popping }} ;
  assign rd_count_p_next_no_rd_popping_R0 = { 5{ !rd_popping }} & ( rd_count_p_next_R | ( { 5{ rd_popping_T  }} & rd_count_p_next_C ));
  assign rd_count_p_next_no_rd_popping_X0 = { 5{ !rd_popping }} & rd_count_p_next_X ;
  assign wr_busy_in_next = ld2st_wr_pvld ? ld2st_wr_busy_next : wr_busy_in_next_wr_req_eq_0;
  logic [0:0] ld2st_wr_pvld_C1 ;
  logic [0:0] ld2st_wr_pvld_R1 ;
  logic [0:0] ld2st_wr_pvld_X1 ;
  assign ld2st_wr_pvld_C1 = | wr_busy_in_next_C ;
  assign ld2st_wr_pvld_X1 = | wr_busy_in_next_X ;
  assign wr_busy_in_next_T = ld2st_wr_pvld ? ( { 1{ ld2st_wr_pvld_T  }} | ld2st_wr_busy_next_T ) : ( { 1{ ld2st_wr_pvld_T  }} | wr_busy_in_next_wr_req_eq_0_T );
  assign wr_busy_in_next_S = ld2st_wr_pvld ? ld2st_wr_busy_next_S : wr_busy_in_next_wr_req_eq_0_S ;
  assign ld2st_wr_pvld_R1 = ( | (wr_busy_in_next_R | ( wr_busy_in_next_C & ( { 1{ ld2st_wr_pvld }} & ld2st_wr_busy_next_T | { 1{ !ld2st_wr_pvld }} & wr_busy_in_next_wr_req_eq_0_T )))) && ld2st_wr_busy_next != wr_busy_in_next_wr_req_eq_0 ;
  logic [0:0] ld2st_wr_busy_next_C3 ;
  logic [0:0] ld2st_wr_busy_next_R3 ;
  logic [0:0] ld2st_wr_busy_next_X3 ;
  assign ld2st_wr_busy_next_C3 = { 1{ ld2st_wr_pvld }} ;
  assign ld2st_wr_busy_next_R3 = { 1{ ld2st_wr_pvld }} & ( wr_busy_in_next_R | ( { 1{ ld2st_wr_pvld_T  }} & wr_busy_in_next_C ));
  assign ld2st_wr_busy_next_X3 = { 1{ ld2st_wr_pvld }} & wr_busy_in_next_X ;
  logic [0:0] wr_busy_in_next_wr_req_eq_0_C0 ;
  logic [0:0] wr_busy_in_next_wr_req_eq_0_R0 ;
  logic [0:0] wr_busy_in_next_wr_req_eq_0_X0 ;
  assign wr_busy_in_next_wr_req_eq_0_C0 = { 1{ !ld2st_wr_pvld }} ;
  assign wr_busy_in_next_wr_req_eq_0_R0 = { 1{ !ld2st_wr_pvld }} & ( wr_busy_in_next_R | ( { 1{ ld2st_wr_pvld_T  }} & wr_busy_in_next_C ));
  assign wr_busy_in_next_wr_req_eq_0_X0 = { 1{ !ld2st_wr_pvld }} & wr_busy_in_next_X ;
  assign wr_count_next_wr_popping = rd_pushing ? ld2st_wr_count : _038_;
  logic [0:0] rd_pushing_C9 ;
  logic [0:0] rd_pushing_R9 ;
  logic [0:0] rd_pushing_X9 ;
  assign rd_pushing_C9 = | wr_count_next_wr_popping_C ;
  assign rd_pushing_X9 = | wr_count_next_wr_popping_X ;
  assign wr_count_next_wr_popping_T = rd_pushing ? ( { 5{ rd_pushing_T  }} | ld2st_wr_count_T ) : ( { 5{ rd_pushing_T  }} | _038__T );
  assign wr_count_next_wr_popping_S = rd_pushing ? ld2st_wr_count_S : _038__S ;
  assign rd_pushing_R9 = ( | (wr_count_next_wr_popping_R | ( wr_count_next_wr_popping_C & ( { 5{ rd_pushing }} & ld2st_wr_count_T | { 5{ !rd_pushing }} & _038__T )))) && ld2st_wr_count != _038_ ;
  logic [4:0] ld2st_wr_count_C5 ;
  logic [4:0] ld2st_wr_count_R5 ;
  logic [4:0] ld2st_wr_count_X5 ;
  assign ld2st_wr_count_C5 = { 5{ rd_pushing }} ;
  assign ld2st_wr_count_R5 = { 5{ rd_pushing }} & ( wr_count_next_wr_popping_R | ( { 5{ rd_pushing_T  }} & wr_count_next_wr_popping_C ));
  assign ld2st_wr_count_X5 = { 5{ rd_pushing }} & wr_count_next_wr_popping_X ;
  logic [4:0] _038__C0 ;
  logic [4:0] _038__R0 ;
  logic [4:0] _038__X0 ;
  assign _038__C0 = { 5{ !rd_pushing }} ;
  assign _038__R0 = { 5{ !rd_pushing }} & ( wr_count_next_wr_popping_R | ( { 5{ rd_pushing_T  }} & wr_count_next_wr_popping_C ));
  assign _038__X0 = { 5{ !rd_pushing }} & wr_count_next_wr_popping_X ;
  assign wr_count_next_no_wr_popping = rd_pushing ? _009_ : ld2st_wr_count;
  logic [0:0] rd_pushing_C10 ;
  logic [0:0] rd_pushing_R10 ;
  logic [0:0] rd_pushing_X10 ;
  assign rd_pushing_C10 = | wr_count_next_no_wr_popping_C ;
  assign rd_pushing_X10 = | wr_count_next_no_wr_popping_X ;
  assign wr_count_next_no_wr_popping_T = rd_pushing ? ( { 5{ rd_pushing_T  }} | _009__T ) : ( { 5{ rd_pushing_T  }} | ld2st_wr_count_T );
  assign wr_count_next_no_wr_popping_S = rd_pushing ? _009__S : ld2st_wr_count_S ;
  assign rd_pushing_R10 = ( | (wr_count_next_no_wr_popping_R | ( wr_count_next_no_wr_popping_C & ( { 5{ rd_pushing }} & _009__T | { 5{ !rd_pushing }} & ld2st_wr_count_T )))) && _009_ != ld2st_wr_count ;
  logic [4:0] _009__C0 ;
  logic [4:0] _009__R0 ;
  logic [4:0] _009__X0 ;
  assign _009__C0 = { 5{ rd_pushing }} ;
  assign _009__R0 = { 5{ rd_pushing }} & ( wr_count_next_no_wr_popping_R | ( { 5{ rd_pushing_T  }} & wr_count_next_no_wr_popping_C ));
  assign _009__X0 = { 5{ rd_pushing }} & wr_count_next_no_wr_popping_X ;
  logic [4:0] ld2st_wr_count_C6 ;
  logic [4:0] ld2st_wr_count_R6 ;
  logic [4:0] ld2st_wr_count_X6 ;
  assign ld2st_wr_count_C6 = { 5{ !rd_pushing }} ;
  assign ld2st_wr_count_R6 = { 5{ !rd_pushing }} & ( wr_count_next_no_wr_popping_R | ( { 5{ rd_pushing_T  }} & wr_count_next_no_wr_popping_C ));
  assign ld2st_wr_count_X6 = { 5{ !rd_pushing }} & wr_count_next_no_wr_popping_X ;
  assign wr_count_next = rd_popping ? wr_count_next_wr_popping : wr_count_next_no_wr_popping;
  logic [0:0] rd_popping_C5 ;
  logic [0:0] rd_popping_R5 ;
  logic [0:0] rd_popping_X5 ;
  assign rd_popping_C5 = | wr_count_next_C ;
  assign rd_popping_X5 = | wr_count_next_X ;
  assign wr_count_next_T = rd_popping ? ( { 5{ rd_popping_T  }} | wr_count_next_wr_popping_T ) : ( { 5{ rd_popping_T  }} | wr_count_next_no_wr_popping_T );
  assign wr_count_next_S = rd_popping ? wr_count_next_wr_popping_S : wr_count_next_no_wr_popping_S ;
  assign rd_popping_R5 = ( | (wr_count_next_R | ( wr_count_next_C & ( { 5{ rd_popping }} & wr_count_next_wr_popping_T | { 5{ !rd_popping }} & wr_count_next_no_wr_popping_T )))) && wr_count_next_wr_popping != wr_count_next_no_wr_popping ;
  logic [4:0] wr_count_next_wr_popping_C0 ;
  logic [4:0] wr_count_next_wr_popping_R0 ;
  logic [4:0] wr_count_next_wr_popping_X0 ;
  assign wr_count_next_wr_popping_C0 = { 5{ rd_popping }} ;
  assign wr_count_next_wr_popping_R0 = { 5{ rd_popping }} & ( wr_count_next_R | ( { 5{ rd_popping_T  }} & wr_count_next_C ));
  assign wr_count_next_wr_popping_X0 = { 5{ rd_popping }} & wr_count_next_X ;
  logic [4:0] wr_count_next_no_wr_popping_C1 ;
  logic [4:0] wr_count_next_no_wr_popping_R1 ;
  logic [4:0] wr_count_next_no_wr_popping_X1 ;
  assign wr_count_next_no_wr_popping_C1 = { 5{ !rd_popping }} ;
  assign wr_count_next_no_wr_popping_R1 = { 5{ !rd_popping }} & ( wr_count_next_R | ( { 5{ rd_popping_T  }} & wr_count_next_C ));
  assign wr_count_next_no_wr_popping_X1 = { 5{ !rd_popping }} & wr_count_next_X ;
  assign ld2st_wr_busy_next = rd_popping ? 1'b0 : wr_count_next_no_wr_popping_is_20;
  logic [0:0] rd_popping_C6 ;
  logic [0:0] rd_popping_R6 ;
  logic [0:0] rd_popping_X6 ;
  assign rd_popping_C6 = | ld2st_wr_busy_next_C ;
  assign rd_popping_X6 = | ld2st_wr_busy_next_X ;
  logic [0:0] wr_count_next_no_wr_popping_is_20_C0 ;
  logic [0:0] wr_count_next_no_wr_popping_is_20_R0 ;
  logic [0:0] wr_count_next_no_wr_popping_is_20_X0 ;
  assign wr_count_next_no_wr_popping_is_20_C0 = { 1{ !rd_popping }};
  assign wr_count_next_no_wr_popping_is_20_R0 = { 1{ !rd_popping }} & ( ld2st_wr_busy_next_R | ( { 1{ rd_popping_T  }} & ld2st_wr_busy_next_C ));
  assign wr_count_next_no_wr_popping_is_20_X0 = { 1{ !rd_popping }} & ld2st_wr_busy_next_X ;
  assign ld2st_wr_busy_next_T = rd_popping ? { 1{ | rd_popping_T  }} : ( { 1{ | rd_popping_T  }} | wr_count_next_no_wr_popping_is_20_T );
  assign ld2st_wr_busy_next_S = rd_popping ? rd_popping_S : wr_count_next_no_wr_popping_is_20_S ;
  assign rd_popping_R6 = ( | (ld2st_wr_busy_next_R | ( { 1{ !rd_popping }} & wr_count_next_no_wr_popping_is_20_T & ld2st_wr_busy_next_C ))) && 1'b0 != wr_count_next_no_wr_popping_is_20 ;
  assign _036_ = rd_pushing ^ rd_popping;
  assign _036__S = 0 ;
  logic [0:0] rd_pushing_C11 ;
  logic [0:0] rd_pushing_R11 ;
  logic [0:0] rd_pushing_X11 ;
  logic [0:0] rd_popping_C7 ;
  logic [0:0] rd_popping_R7 ;
  logic [0:0] rd_popping_X7 ;
  assign _036__T = rd_pushing_T | rd_popping_T ;
  assign rd_pushing_C11 = _036__C ;
  assign rd_pushing_X11 = _036__X ;
  assign rd_popping_C7 = _036__C ;
  assign rd_popping_X7 = _036__X ;
  assign rd_pushing_R11 = _036__R | ( _036__C & rd_popping_T );
  assign rd_popping_R7 = _036__R | ( _036__C & rd_pushing_T );
  logic [0:0] nvdla_core_clk_R0 ;
  logic [0:0] nvdla_core_clk_X0 ;
  logic [0:0] nvdla_core_clk_C0 ;
  logic [0:0] nvdla_core_clk_mgated_enable_R0 ;
  logic [0:0] nvdla_core_clk_mgated_enable_X0 ;
  logic [0:0] nvdla_core_clk_mgated_enable_C0 ;
  logic [0:0] nvdla_core_rstn_R0 ;
  logic [0:0] nvdla_core_rstn_X0 ;
  logic [0:0] nvdla_core_rstn_C0 ;
// module: NV_CLK_gate_power
  NV_CLK_gate_power nvdla_core_clk_mgate (
    .clk_T (  nvdla_core_clk_T  ),
    .clk_R (  nvdla_core_clk_R0  ),
    .clk_X (  nvdla_core_clk_X0  ),
    .clk_C (  nvdla_core_clk_C0  ),
    .clk_S (  nvdla_core_clk_S  ),
    .clk_en_T (  nvdla_core_clk_mgated_enable_T  ),
    .clk_en_R (  nvdla_core_clk_mgated_enable_R0  ),
    .clk_en_X (  nvdla_core_clk_mgated_enable_X0  ),
    .clk_en_C (  nvdla_core_clk_mgated_enable_C0  ),
    .clk_en_S (  nvdla_core_clk_mgated_enable_S  ),
    .reset__T (  nvdla_core_rstn_T  ),
    .reset__R (  nvdla_core_rstn_R0  ),
    .reset__X (  nvdla_core_rstn_X0  ),
    .reset__C (  nvdla_core_rstn_C0  ),
    .reset__S (  nvdla_core_rstn_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .clk_gated_T (  nvdla_core_clk_mgated_T  ),
    .clk_gated_R0 (  nvdla_core_clk_mgated_R  ),
    .clk_gated_X0 (  nvdla_core_clk_mgated_X  ),
    .clk_gated_C0 (  nvdla_core_clk_mgated_C  ),
    .clk_gated_S ( nvdla_core_clk_mgated_S ),
    .clk ( nvdla_core_clk ),
    .reset_ ( nvdla_core_rstn ),
    .clk_gated ( nvdla_core_clk_mgated ),
    .clk_en ( nvdla_core_clk_mgated_enable )
  );
  logic [0:0] nvdla_core_clk_R1 ;
  logic [0:0] nvdla_core_clk_X1 ;
  logic [0:0] nvdla_core_clk_C1 ;
  logic [0:0] nvdla_core_clk_mgated_R0 ;
  logic [0:0] nvdla_core_clk_mgated_X0 ;
  logic [0:0] nvdla_core_clk_mgated_C0 ;
  logic [160:0] ld2st_wr_pd_R0 ;
  logic [160:0] ld2st_wr_pd_X0 ;
  logic [160:0] ld2st_wr_pd_C0 ;
  logic [0:0] ram_iwe_R1 ;
  logic [0:0] ram_iwe_X1 ;
  logic [0:0] ram_iwe_C1 ;
  logic [31:0] pwrbus_ram_pd_R0 ;
  logic [31:0] pwrbus_ram_pd_X0 ;
  logic [31:0] pwrbus_ram_pd_C0 ;
  logic [4:0] _039__R0 ;
  logic [4:0] _039__X0 ;
  logic [4:0] _039__C0 ;
  logic [4:0] ld2st_wr_adr_R3 ;
  logic [4:0] ld2st_wr_adr_X3 ;
  logic [4:0] ld2st_wr_adr_C3 ;
  logic [0:0] ram_we_R0 ;
  logic [0:0] ram_we_X0 ;
  logic [0:0] ram_we_C0 ;
// module: NV_NVDLA_BDMA_cq_flopram_rwsa_20x161
  NV_NVDLA_BDMA_cq_flopram_rwsa_20x161 ram (
    .clk_T (  nvdla_core_clk_T  ),
    .clk_R (  nvdla_core_clk_R1  ),
    .clk_X (  nvdla_core_clk_X1  ),
    .clk_C (  nvdla_core_clk_C1  ),
    .clk_S (  nvdla_core_clk_S  ),
    .clk_mgated_T (  nvdla_core_clk_mgated_T  ),
    .clk_mgated_R (  nvdla_core_clk_mgated_R0  ),
    .clk_mgated_X (  nvdla_core_clk_mgated_X0  ),
    .clk_mgated_C (  nvdla_core_clk_mgated_C0  ),
    .clk_mgated_S (  nvdla_core_clk_mgated_S  ),
    .di_T (  ld2st_wr_pd_T  ),
    .di_R (  ld2st_wr_pd_R0  ),
    .di_X (  ld2st_wr_pd_X0  ),
    .di_C (  ld2st_wr_pd_C0  ),
    .di_S (  ld2st_wr_pd_S  ),
    .iwe_T (  ram_iwe_T  ),
    .iwe_R (  ram_iwe_R1  ),
    .iwe_X (  ram_iwe_X1  ),
    .iwe_C (  ram_iwe_C1  ),
    .iwe_S (  ram_iwe_S  ),
    .pwrbus_ram_pd_T (  pwrbus_ram_pd_T  ),
    .pwrbus_ram_pd_R (  pwrbus_ram_pd_R0  ),
    .pwrbus_ram_pd_X (  pwrbus_ram_pd_X0  ),
    .pwrbus_ram_pd_C (  pwrbus_ram_pd_C0  ),
    .pwrbus_ram_pd_S (  pwrbus_ram_pd_S  ),
    .ra_T (  _039__T  ),
    .ra_R (  _039__R0  ),
    .ra_X (  _039__X0  ),
    .ra_C (  _039__C0  ),
    .ra_S (  _039__S  ),
    .wa_T (  ld2st_wr_adr_T  ),
    .wa_R (  ld2st_wr_adr_R3  ),
    .wa_X (  ld2st_wr_adr_X3  ),
    .wa_C (  ld2st_wr_adr_C3  ),
    .wa_S (  ld2st_wr_adr_S  ),
    .we_T (  ram_we_T  ),
    .we_R (  ram_we_R0  ),
    .we_X (  ram_we_X0  ),
    .we_C (  ram_we_C0  ),
    .we_S (  ram_we_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .dout_T (  ld2st_rd_pd_p_T  ),
    .dout_R0 (  ld2st_rd_pd_p_R  ),
    .dout_X0 (  ld2st_rd_pd_p_X  ),
    .dout_C0 (  ld2st_rd_pd_p_C  ),
    .dout_S ( ld2st_rd_pd_p_S ),
    .we ( ram_we ),
    .pwrbus_ram_pd ( pwrbus_ram_pd ),
    .di ( ld2st_wr_pd ),
    .clk ( nvdla_core_clk ),
    .ra ( _039_ ),
    .clk_mgated ( nvdla_core_clk_mgated ),
    .dout ( ld2st_rd_pd_p ),
    .wa ( ld2st_wr_adr ),
    .iwe ( ram_iwe )
  );
  assign ld2st_rd_pvld = ld2st_rd_pvld_int;
  logic [0:0] ld2st_rd_pvld_int_C3 ;
  logic [0:0] ld2st_rd_pvld_int_R3 ;
  logic [0:0] ld2st_rd_pvld_int_X3 ;
  assign ld2st_rd_pvld_T = ld2st_rd_pvld_int_T ;
  assign ld2st_rd_pvld_int_C3 = ld2st_rd_pvld_C ;
  assign ld2st_rd_pvld_int_R3 = ld2st_rd_pvld_R ;
  assign ld2st_rd_pvld_int_X3 = ld2st_rd_pvld_X ;
  assign ld2st_rd_pvld_S = ld2st_rd_pvld_int_S ;
  assign ld2st_wr_idle_d0 = ld2st_wr_idle;
  logic [0:0] ld2st_wr_idle_C1 ;
  logic [0:0] ld2st_wr_idle_R1 ;
  logic [0:0] ld2st_wr_idle_X1 ;
  assign ld2st_wr_idle_d0_T = ld2st_wr_idle_T ;
  assign ld2st_wr_idle_C1 = ld2st_wr_idle_d0_C ;
  assign ld2st_wr_idle_R1 = ld2st_wr_idle_d0_R ;
  assign ld2st_wr_idle_X1 = ld2st_wr_idle_d0_X ;
  assign ld2st_wr_idle_d0_S = ld2st_wr_idle_S ;
  assign wr_busy_in_next_wr_req_eq_1 = ld2st_wr_busy_next;
  logic [0:0] ld2st_wr_busy_next_C4 ;
  logic [0:0] ld2st_wr_busy_next_R4 ;
  logic [0:0] ld2st_wr_busy_next_X4 ;
  assign wr_busy_in_next_wr_req_eq_1_T = ld2st_wr_busy_next_T ;
  assign ld2st_wr_busy_next_C4 = wr_busy_in_next_wr_req_eq_1_C ;
  assign ld2st_wr_busy_next_R4 = wr_busy_in_next_wr_req_eq_1_R ;
  assign ld2st_wr_busy_next_X4 = wr_busy_in_next_wr_req_eq_1_X ;
  assign wr_busy_in_next_wr_req_eq_1_S = ld2st_wr_busy_next_S ;
  assign wr_count_next_is_20 = ld2st_wr_busy_next;
  logic [0:0] ld2st_wr_busy_next_C5 ;
  logic [0:0] ld2st_wr_busy_next_R5 ;
  logic [0:0] ld2st_wr_busy_next_X5 ;
  assign wr_count_next_is_20_T = ld2st_wr_busy_next_T ;
  assign ld2st_wr_busy_next_C5 = wr_count_next_is_20_C ;
  assign ld2st_wr_busy_next_R5 = wr_count_next_is_20_R ;
  assign ld2st_wr_busy_next_X5 = wr_count_next_is_20_X ;
  assign wr_count_next_is_20_S = ld2st_wr_busy_next_S ;
  assign wr_limit_muxed = 5'b00000;
  assign wr_limit_muxed_T = 0 ;
  assign wr_limit_muxed_S = 14'b1 ;
  assign wr_limit_reg = 5'b00000;
  assign wr_limit_reg_T = 0 ;
  assign wr_limit_reg_S = 14'b1 ;
  assign wr_popping = rd_popping;
  logic [0:0] rd_popping_C8 ;
  logic [0:0] rd_popping_R8 ;
  logic [0:0] rd_popping_X8 ;
  assign wr_popping_T = rd_popping_T ;
  assign rd_popping_C8 = wr_popping_C ;
  assign rd_popping_R8 = wr_popping_R ;
  assign rd_popping_X8 = wr_popping_X ;
  assign wr_popping_S = rd_popping_S ;
  assign wr_pushing = rd_pushing;
  logic [0:0] rd_pushing_C12 ;
  logic [0:0] rd_pushing_R12 ;
  logic [0:0] rd_pushing_X12 ;
  assign wr_pushing_T = rd_pushing_T ;
  assign rd_pushing_C12 = wr_pushing_C ;
  assign rd_pushing_R12 = wr_pushing_R ;
  assign rd_pushing_X12 = wr_pushing_X ;
  assign wr_pushing_S = rd_pushing_S ;
  assign wr_reserving = rd_pushing;
  logic [0:0] rd_pushing_C13 ;
  logic [0:0] rd_pushing_R13 ;
  logic [0:0] rd_pushing_X13 ;
  assign wr_reserving_T = rd_pushing_T ;
  assign rd_pushing_C13 = wr_reserving_C ;
  assign rd_pushing_R13 = wr_reserving_R ;
  assign rd_pushing_X13 = wr_reserving_X ;
  assign wr_reserving_S = rd_pushing_S ;
  assign ram_we_C = ( ram_we_C0 );
  assign _039__C = ( _039__C0 );
  assign pwrbus_ram_pd_C = ( pwrbus_ram_pd_C0 );
  assign ld2st_wr_pd_C = ( ld2st_wr_pd_C0 );
  assign nvdla_core_clk_mgated_C = ( nvdla_core_clk_mgated_C0 );
  assign nvdla_core_rstn_C = ( nvdla_core_rstn_C0 );
  assign nvdla_core_clk_mgated_enable_C = ( nvdla_core_clk_mgated_enable_C0 );
  assign nvdla_core_clk_C = ( nvdla_core_clk_C0 ) | ( nvdla_core_clk_C1 );
  assign wr_count_next_no_wr_popping_is_20_C = ( wr_count_next_no_wr_popping_is_20_C0 );
  assign wr_count_next_wr_popping_C = ( wr_count_next_wr_popping_C0 );
  assign _009__C = ( _009__C0 );
  assign _038__C = ( _038__C0 );
  assign wr_busy_in_next_wr_req_eq_0_C = ( wr_busy_in_next_wr_req_eq_0_C0 );
  assign rd_count_p_next_no_rd_popping_C = ( rd_count_p_next_no_rd_popping_C0 );
  assign rd_count_p_next_rd_popping_C = ( rd_count_p_next_rd_popping_C0 );
  assign _008__C = ( _008__C0 );
  assign _037__C = ( _037__C0 );
  assign _007__C = ( _007__C0 );
  assign _012__C = ( _012__C0 );
  assign _010__C = ( _010__C0 );
  assign ram_iwe_C = ( ram_iwe_C0 ) | ( ram_iwe_C1 );
  assign wr_busy_in_int_C = ( wr_busy_in_int_C0 );
  assign wr_count_next_C = ( wr_count_next_C0 );
  assign _036__C = ( _036__C0 );
  assign wr_adr_next_C = ( wr_adr_next_C0 );
  assign rd_adr_next_popping_C = ( rd_adr_next_popping_C0 );
  assign rd_count_p_next_C = ( rd_count_p_next_C0 );
  assign ld2st_rd_pd_p_C = ( ld2st_rd_pd_p_C0 );
  assign _005__C = ( _005__C0 );
  assign wr_busy_in_next_C = ( wr_busy_in_next_C0 );
  assign _004__C = ( _004__C0 );
  assign _003__C = ( _003__C0 );
  assign _000__C = ( _000__C0 );
  assign _001__C = ( _001__C0 );
  assign rd_req_next_C = ( rd_req_next_C0 );
  assign _002__C = ( _002__C0 );
  assign _033__C = ( _033__C0 );
  assign _032__C = ( _032__C0 );
  assign _031__C = ( _031__C0 );
  assign _019__C = ( _019__C0 );
  assign _035__C = ( _035__C0 );
  assign _030__C = ( _030__C0 );
  assign _029__C = ( _029__C0 ) | ( _029__C1 ) | ( _029__C2 );
  assign _034__C = ( _034__C0 );
  assign _021__C = ( _021__C0 );
  assign _014__C = ( _014__C0 );
  assign _015__C = ( _015__C0 ) | ( _015__C1 );
  assign wr_busy_in_C = ( wr_busy_in_C0 );
  assign rd_popping_C = ( rd_popping_C0 ) | ( rd_popping_C1 ) | ( rd_popping_C2 ) | ( rd_popping_C3 ) | ( rd_popping_C4 ) | ( rd_popping_C5 ) | ( rd_popping_C6 ) | ( rd_popping_C7 ) | ( rd_popping_C8 );
  assign ld2st_wr_busy_int_C = ( ld2st_wr_busy_int_C0 ) | ( ld2st_wr_busy_int_C1 ) | ( ld2st_wr_busy_int_C2 );
  assign _020__C = ( _020__C0 );
  assign ld2st_wr_busy_next_C = ( ld2st_wr_busy_next_C0 ) | ( ld2st_wr_busy_next_C1 ) | ( ld2st_wr_busy_next_C2 ) | ( ld2st_wr_busy_next_C3 ) | ( ld2st_wr_busy_next_C4 ) | ( ld2st_wr_busy_next_C5 );
  assign ld2st_rd_prdy_C = ( ld2st_rd_prdy_C0 ) | ( ld2st_rd_prdy_C1 );
  assign _027__C = ( _027__C0 );
  assign ld2st_wr_pvld_in_C = ( ld2st_wr_pvld_in_C0 ) | ( ld2st_wr_pvld_in_C1 ) | ( ld2st_wr_pvld_in_C2 ) | ( ld2st_wr_pvld_in_C3 ) | ( ld2st_wr_pvld_in_C4 );
  assign _011__C = ( _011__C0 ) | ( _011__C1 );
  assign _018__C = ( _018__C0 );
  assign _017__C = ( _017__C0 );
  assign rd_idle_C = ( rd_idle_C0 );
  assign _026__C = ( _026__C0 );
  assign _013__C = ( _013__C0 );
  assign _016__C = ( _016__C0 );
  assign _025__C = ( _025__C0 ) | ( _025__C1 ) | ( _025__C2 );
  assign _024__C = ( _024__C0 );
  assign _023__C = ( _023__C0 );
  assign _006__C = ( _006__C0 );
  assign ld2st_rd_pvld_p_C = ( ld2st_rd_pvld_p_C0 ) | ( ld2st_rd_pvld_p_C1 );
  assign _022__C = ( _022__C0 );
  assign ld2st_rd_pvld_int_C = ( ld2st_rd_pvld_int_C0 ) | ( ld2st_rd_pvld_int_C1 ) | ( ld2st_rd_pvld_int_C2 ) | ( ld2st_rd_pvld_int_C3 );
  assign ld2st_wr_pvld_C = ( ld2st_wr_pvld_C0 ) | ( ld2st_wr_pvld_C1 );
  assign _028__C = ( _028__C0 );
  assign rd_pushing_C = ( rd_pushing_C0 ) | ( rd_pushing_C1 ) | ( rd_pushing_C2 ) | ( rd_pushing_C3 ) | ( rd_pushing_C4 ) | ( rd_pushing_C5 ) | ( rd_pushing_C6 ) | ( rd_pushing_C7 ) | ( rd_pushing_C8 ) | ( rd_pushing_C9 ) | ( rd_pushing_C10 ) | ( rd_pushing_C11 ) | ( rd_pushing_C12 ) | ( rd_pushing_C13 );
  assign wr_count_next_no_wr_popping_C = ( wr_count_next_no_wr_popping_C0 ) | ( wr_count_next_no_wr_popping_C1 );
  assign ld2st_wr_count_C = ( ld2st_wr_count_C0 ) | ( ld2st_wr_count_C1 ) | ( ld2st_wr_count_C2 ) | ( ld2st_wr_count_C3 ) | ( ld2st_wr_count_C4 ) | ( ld2st_wr_count_C5 ) | ( ld2st_wr_count_C6 );
  assign ld2st_rd_count_p_C = ( ld2st_rd_count_p_C0 ) | ( ld2st_rd_count_p_C1 ) | ( ld2st_rd_count_p_C2 ) | ( ld2st_rd_count_p_C3 ) | ( ld2st_rd_count_p_C4 ) | ( ld2st_rd_count_p_C5 ) | ( ld2st_rd_count_p_C6 );
  assign ld2st_rd_adr_C = ( ld2st_rd_adr_C0 ) | ( ld2st_rd_adr_C1 ) | ( ld2st_rd_adr_C2 ) | ( ld2st_rd_adr_C3 );
  assign ld2st_wr_adr_C = ( ld2st_wr_adr_C0 ) | ( ld2st_wr_adr_C1 ) | ( ld2st_wr_adr_C2 ) | ( ld2st_wr_adr_C3 );
  assign ld2st_wr_prdy_C = ( ld2st_wr_prdy_C0 ) | ( ld2st_wr_prdy_C1 );
  assign ld2st_wr_idle_C = ( ld2st_wr_idle_C0 ) | ( ld2st_wr_idle_C1 );
  assign ld2st_rd_pvld_C = ( ld2st_rd_pvld_C0 );
  assign ld2st_rd_pd_C = ( ld2st_rd_pd_C0 ) | ( ld2st_rd_pd_C1 );
  assign ram_we_X = ( ram_we_X0 );
  assign _039__X = ( _039__X0 );
  assign pwrbus_ram_pd_X = ( pwrbus_ram_pd_X0 );
  assign ld2st_wr_pd_X = ( ld2st_wr_pd_X0 );
  assign nvdla_core_clk_mgated_X = ( nvdla_core_clk_mgated_X0 );
  assign nvdla_core_rstn_X = ( nvdla_core_rstn_X0 );
  assign nvdla_core_clk_mgated_enable_X = ( nvdla_core_clk_mgated_enable_X0 );
  assign nvdla_core_clk_X = ( nvdla_core_clk_X0 ) | ( nvdla_core_clk_X1 );
  assign wr_count_next_no_wr_popping_is_20_X = ( wr_count_next_no_wr_popping_is_20_X0 );
  assign wr_count_next_wr_popping_X = ( wr_count_next_wr_popping_X0 );
  assign _009__X = ( _009__X0 );
  assign _038__X = ( _038__X0 );
  assign wr_busy_in_next_wr_req_eq_0_X = ( wr_busy_in_next_wr_req_eq_0_X0 );
  assign rd_count_p_next_no_rd_popping_X = ( rd_count_p_next_no_rd_popping_X0 );
  assign rd_count_p_next_rd_popping_X = ( rd_count_p_next_rd_popping_X0 );
  assign _008__X = ( _008__X0 );
  assign _037__X = ( _037__X0 );
  assign _007__X = ( _007__X0 );
  assign _012__X = ( _012__X0 );
  assign _010__X = ( _010__X0 );
  assign ram_iwe_X = ( ram_iwe_X0 ) | ( ram_iwe_X1 );
  assign wr_busy_in_int_X = ( wr_busy_in_int_X0 );
  assign wr_count_next_X = ( wr_count_next_X0 );
  assign _036__X = ( _036__X0 );
  assign wr_adr_next_X = ( wr_adr_next_X0 );
  assign rd_adr_next_popping_X = ( rd_adr_next_popping_X0 );
  assign rd_count_p_next_X = ( rd_count_p_next_X0 );
  assign ld2st_rd_pd_p_X = ( ld2st_rd_pd_p_X0 );
  assign _005__X = ( _005__X0 );
  assign wr_busy_in_next_X = ( wr_busy_in_next_X0 );
  assign _004__X = ( _004__X0 );
  assign _003__X = ( _003__X0 );
  assign _000__X = ( _000__X0 );
  assign _001__X = ( _001__X0 );
  assign rd_req_next_X = ( rd_req_next_X0 );
  assign _002__X = ( _002__X0 );
  assign _033__X = ( _033__X0 );
  assign _032__X = ( _032__X0 );
  assign _031__X = ( _031__X0 );
  assign _019__X = ( _019__X0 );
  assign _035__X = ( _035__X0 );
  assign _030__X = ( _030__X0 );
  assign _029__X = ( _029__X0 ) | ( _029__X1 ) | ( _029__X2 );
  assign _034__X = ( _034__X0 );
  assign _021__X = ( _021__X0 );
  assign _014__X = ( _014__X0 );
  assign _015__X = ( _015__X0 ) | ( _015__X1 );
  assign wr_busy_in_X = ( wr_busy_in_X0 );
  assign rd_popping_X = ( rd_popping_X0 ) | ( rd_popping_X1 ) | ( rd_popping_X2 ) | ( rd_popping_X3 ) | ( rd_popping_X4 ) | ( rd_popping_X5 ) | ( rd_popping_X6 ) | ( rd_popping_X7 ) | ( rd_popping_X8 );
  assign ld2st_wr_busy_int_X = ( ld2st_wr_busy_int_X0 ) | ( ld2st_wr_busy_int_X1 ) | ( ld2st_wr_busy_int_X2 );
  assign _020__X = ( _020__X0 );
  assign ld2st_wr_busy_next_X = ( ld2st_wr_busy_next_X0 ) | ( ld2st_wr_busy_next_X1 ) | ( ld2st_wr_busy_next_X2 ) | ( ld2st_wr_busy_next_X3 ) | ( ld2st_wr_busy_next_X4 ) | ( ld2st_wr_busy_next_X5 );
  assign ld2st_rd_prdy_X = ( ld2st_rd_prdy_X0 ) | ( ld2st_rd_prdy_X1 );
  assign _027__X = ( _027__X0 );
  assign ld2st_wr_pvld_in_X = ( ld2st_wr_pvld_in_X0 ) | ( ld2st_wr_pvld_in_X1 ) | ( ld2st_wr_pvld_in_X2 ) | ( ld2st_wr_pvld_in_X3 ) | ( ld2st_wr_pvld_in_X4 );
  assign _011__X = ( _011__X0 ) | ( _011__X1 );
  assign _018__X = ( _018__X0 );
  assign _017__X = ( _017__X0 );
  assign rd_idle_X = ( rd_idle_X0 );
  assign _026__X = ( _026__X0 );
  assign _013__X = ( _013__X0 );
  assign _016__X = ( _016__X0 );
  assign _025__X = ( _025__X0 ) | ( _025__X1 ) | ( _025__X2 );
  assign _024__X = ( _024__X0 );
  assign _023__X = ( _023__X0 );
  assign _006__X = ( _006__X0 );
  assign ld2st_rd_pvld_p_X = ( ld2st_rd_pvld_p_X0 ) | ( ld2st_rd_pvld_p_X1 );
  assign _022__X = ( _022__X0 );
  assign ld2st_rd_pvld_int_X = ( ld2st_rd_pvld_int_X0 ) | ( ld2st_rd_pvld_int_X1 ) | ( ld2st_rd_pvld_int_X2 ) | ( ld2st_rd_pvld_int_X3 );
  assign ld2st_wr_pvld_X = ( ld2st_wr_pvld_X0 ) | ( ld2st_wr_pvld_X1 );
  assign _028__X = ( _028__X0 );
  assign rd_pushing_X = ( rd_pushing_X0 ) | ( rd_pushing_X1 ) | ( rd_pushing_X2 ) | ( rd_pushing_X3 ) | ( rd_pushing_X4 ) | ( rd_pushing_X5 ) | ( rd_pushing_X6 ) | ( rd_pushing_X7 ) | ( rd_pushing_X8 ) | ( rd_pushing_X9 ) | ( rd_pushing_X10 ) | ( rd_pushing_X11 ) | ( rd_pushing_X12 ) | ( rd_pushing_X13 );
  assign wr_count_next_no_wr_popping_X = ( wr_count_next_no_wr_popping_X0 ) | ( wr_count_next_no_wr_popping_X1 );
  assign ld2st_wr_count_X = ( ld2st_wr_count_X0 ) | ( ld2st_wr_count_X1 ) | ( ld2st_wr_count_X2 ) | ( ld2st_wr_count_X3 ) | ( ld2st_wr_count_X4 ) | ( ld2st_wr_count_X5 ) | ( ld2st_wr_count_X6 );
  assign ld2st_rd_count_p_X = ( ld2st_rd_count_p_X0 ) | ( ld2st_rd_count_p_X1 ) | ( ld2st_rd_count_p_X2 ) | ( ld2st_rd_count_p_X3 ) | ( ld2st_rd_count_p_X4 ) | ( ld2st_rd_count_p_X5 ) | ( ld2st_rd_count_p_X6 );
  assign ld2st_rd_adr_X = ( ld2st_rd_adr_X0 ) | ( ld2st_rd_adr_X1 ) | ( ld2st_rd_adr_X2 ) | ( ld2st_rd_adr_X3 );
  assign ld2st_wr_adr_X = ( ld2st_wr_adr_X0 ) | ( ld2st_wr_adr_X1 ) | ( ld2st_wr_adr_X2 ) | ( ld2st_wr_adr_X3 );
  assign ld2st_wr_prdy_X = ( ld2st_wr_prdy_X0 ) | ( ld2st_wr_prdy_X1 );
  assign ld2st_wr_idle_X = ( ld2st_wr_idle_X0 ) | ( ld2st_wr_idle_X1 );
  assign ld2st_rd_pvld_X = ( ld2st_rd_pvld_X0 );
  assign ld2st_rd_pd_X = ( ld2st_rd_pd_X0 ) | ( ld2st_rd_pd_X1 );
  assign ram_we_R = ( ram_we_X0 & ram_we_R0 );
  assign _039__R = ( _039__X0 & _039__R0 );
  assign pwrbus_ram_pd_R = ( pwrbus_ram_pd_X0 & pwrbus_ram_pd_R0 );
  assign ld2st_wr_pd_R = ( ld2st_wr_pd_X0 & ld2st_wr_pd_R0 );
  assign nvdla_core_clk_mgated_R = ( nvdla_core_clk_mgated_X0 & nvdla_core_clk_mgated_R0 );
  assign nvdla_core_rstn_R = ( nvdla_core_rstn_X0 & nvdla_core_rstn_R0 );
  assign nvdla_core_clk_mgated_enable_R = ( nvdla_core_clk_mgated_enable_X0 & nvdla_core_clk_mgated_enable_R0 );
  assign nvdla_core_clk_R = ( nvdla_core_clk_X0 & nvdla_core_clk_R0 ) | ( nvdla_core_clk_X1 & nvdla_core_clk_R1 );
  assign wr_count_next_no_wr_popping_is_20_R = ( wr_count_next_no_wr_popping_is_20_X0 & wr_count_next_no_wr_popping_is_20_R0 );
  assign wr_count_next_wr_popping_R = ( wr_count_next_wr_popping_X0 & wr_count_next_wr_popping_R0 );
  assign _009__R = ( _009__X0 & _009__R0 );
  assign _038__R = ( _038__X0 & _038__R0 );
  assign wr_busy_in_next_wr_req_eq_0_R = ( wr_busy_in_next_wr_req_eq_0_X0 & wr_busy_in_next_wr_req_eq_0_R0 );
  assign rd_count_p_next_no_rd_popping_R = ( rd_count_p_next_no_rd_popping_X0 & rd_count_p_next_no_rd_popping_R0 );
  assign rd_count_p_next_rd_popping_R = ( rd_count_p_next_rd_popping_X0 & rd_count_p_next_rd_popping_R0 );
  assign _008__R = ( _008__X0 & _008__R0 );
  assign _037__R = ( _037__X0 & _037__R0 );
  assign _007__R = ( _007__X0 & _007__R0 );
  assign _012__R = ( _012__X0 & _012__R0 );
  assign _010__R = ( _010__X0 & _010__R0 );
  assign ram_iwe_R = ( ram_iwe_X0 & ram_iwe_R0 ) | ( ram_iwe_X1 & ram_iwe_R1 );
  assign wr_busy_in_int_R = ( wr_busy_in_int_X0 & wr_busy_in_int_R0 );
  assign wr_count_next_R = ( wr_count_next_X0 & wr_count_next_R0 );
  assign _036__R = ( _036__X0 & _036__R0 );
  assign wr_adr_next_R = ( wr_adr_next_X0 & wr_adr_next_R0 );
  assign rd_adr_next_popping_R = ( rd_adr_next_popping_X0 & rd_adr_next_popping_R0 );
  assign rd_count_p_next_R = ( rd_count_p_next_X0 & rd_count_p_next_R0 );
  assign ld2st_rd_pd_p_R = ( ld2st_rd_pd_p_X0 & ld2st_rd_pd_p_R0 );
  assign _005__R = ( _005__X0 & _005__R0 );
  assign wr_busy_in_next_R = ( wr_busy_in_next_X0 & wr_busy_in_next_R0 );
  assign _004__R = ( _004__X0 & _004__R0 );
  assign _003__R = ( _003__X0 & _003__R0 );
  assign _000__R = ( _000__X0 & _000__R0 );
  assign _001__R = ( _001__X0 & _001__R0 );
  assign rd_req_next_R = ( rd_req_next_X0 & rd_req_next_R0 );
  assign _002__R = ( _002__X0 & _002__R0 );
  assign _033__R = ( _033__X0 & _033__R0 );
  assign _032__R = ( _032__X0 & _032__R0 );
  assign _031__R = ( _031__X0 & _031__R0 );
  assign _019__R = ( _019__X0 & _019__R0 );
  assign _035__R = ( _035__X0 & _035__R0 );
  assign _030__R = ( _030__X0 & _030__R0 );
  assign _029__R = ( _029__X0 & _029__R0 ) | ( _029__X1 & _029__R1 ) | ( _029__X2 & _029__R2 );
  assign _034__R = ( _034__X0 & _034__R0 );
  assign _021__R = ( _021__X0 & _021__R0 );
  assign _014__R = ( _014__X0 & _014__R0 );
  assign _015__R = ( _015__X0 & _015__R0 ) | ( _015__X1 & _015__R1 );
  assign wr_busy_in_R = ( wr_busy_in_X0 & wr_busy_in_R0 );
  assign rd_popping_R = ( rd_popping_X0 & rd_popping_R0 ) | ( rd_popping_X1 & rd_popping_R1 ) | ( rd_popping_X2 & rd_popping_R2 ) | ( rd_popping_X3 & rd_popping_R3 ) | ( rd_popping_X4 & rd_popping_R4 ) | ( rd_popping_X5 & rd_popping_R5 ) | ( rd_popping_X6 & rd_popping_R6 ) | ( rd_popping_X7 & rd_popping_R7 ) | ( rd_popping_X8 & rd_popping_R8 );
  assign ld2st_wr_busy_int_R = ( ld2st_wr_busy_int_X0 & ld2st_wr_busy_int_R0 ) | ( ld2st_wr_busy_int_X1 & ld2st_wr_busy_int_R1 ) | ( ld2st_wr_busy_int_X2 & ld2st_wr_busy_int_R2 );
  assign _020__R = ( _020__X0 & _020__R0 );
  assign ld2st_wr_busy_next_R = ( ld2st_wr_busy_next_X0 & ld2st_wr_busy_next_R0 ) | ( ld2st_wr_busy_next_X1 & ld2st_wr_busy_next_R1 ) | ( ld2st_wr_busy_next_X2 & ld2st_wr_busy_next_R2 ) | ( ld2st_wr_busy_next_X3 & ld2st_wr_busy_next_R3 ) | ( ld2st_wr_busy_next_X4 & ld2st_wr_busy_next_R4 ) | ( ld2st_wr_busy_next_X5 & ld2st_wr_busy_next_R5 );
  assign ld2st_rd_prdy_R = ( ld2st_rd_prdy_X0 & ld2st_rd_prdy_R0 ) | ( ld2st_rd_prdy_X1 & ld2st_rd_prdy_R1 );
  assign _027__R = ( _027__X0 & _027__R0 );
  assign ld2st_wr_pvld_in_R = ( ld2st_wr_pvld_in_X0 & ld2st_wr_pvld_in_R0 ) | ( ld2st_wr_pvld_in_X1 & ld2st_wr_pvld_in_R1 ) | ( ld2st_wr_pvld_in_X2 & ld2st_wr_pvld_in_R2 ) | ( ld2st_wr_pvld_in_X3 & ld2st_wr_pvld_in_R3 ) | ( ld2st_wr_pvld_in_X4 & ld2st_wr_pvld_in_R4 );
  assign _011__R = ( _011__X0 & _011__R0 ) | ( _011__X1 & _011__R1 );
  assign _018__R = ( _018__X0 & _018__R0 );
  assign _017__R = ( _017__X0 & _017__R0 );
  assign rd_idle_R = ( rd_idle_X0 & rd_idle_R0 );
  assign _026__R = ( _026__X0 & _026__R0 );
  assign _013__R = ( _013__X0 & _013__R0 );
  assign _016__R = ( _016__X0 & _016__R0 );
  assign _025__R = ( _025__X0 & _025__R0 ) | ( _025__X1 & _025__R1 ) | ( _025__X2 & _025__R2 );
  assign _024__R = ( _024__X0 & _024__R0 );
  assign _023__R = ( _023__X0 & _023__R0 );
  assign _006__R = ( _006__X0 & _006__R0 );
  assign ld2st_rd_pvld_p_R = ( ld2st_rd_pvld_p_X0 & ld2st_rd_pvld_p_R0 ) | ( ld2st_rd_pvld_p_X1 & ld2st_rd_pvld_p_R1 );
  assign _022__R = ( _022__X0 & _022__R0 );
  assign ld2st_rd_pvld_int_R = ( ld2st_rd_pvld_int_X0 & ld2st_rd_pvld_int_R0 ) | ( ld2st_rd_pvld_int_X1 & ld2st_rd_pvld_int_R1 ) | ( ld2st_rd_pvld_int_X2 & ld2st_rd_pvld_int_R2 ) | ( ld2st_rd_pvld_int_X3 & ld2st_rd_pvld_int_R3 );
  assign ld2st_wr_pvld_R = ( ld2st_wr_pvld_X0 & ld2st_wr_pvld_R0 ) | ( ld2st_wr_pvld_X1 & ld2st_wr_pvld_R1 );
  assign _028__R = ( _028__X0 & _028__R0 );
  assign rd_pushing_R = ( rd_pushing_X0 & rd_pushing_R0 ) | ( rd_pushing_X1 & rd_pushing_R1 ) | ( rd_pushing_X2 & rd_pushing_R2 ) | ( rd_pushing_X3 & rd_pushing_R3 ) | ( rd_pushing_X4 & rd_pushing_R4 ) | ( rd_pushing_X5 & rd_pushing_R5 ) | ( rd_pushing_X6 & rd_pushing_R6 ) | ( rd_pushing_X7 & rd_pushing_R7 ) | ( rd_pushing_X8 & rd_pushing_R8 ) | ( rd_pushing_X9 & rd_pushing_R9 ) | ( rd_pushing_X10 & rd_pushing_R10 ) | ( rd_pushing_X11 & rd_pushing_R11 ) | ( rd_pushing_X12 & rd_pushing_R12 ) | ( rd_pushing_X13 & rd_pushing_R13 );
  assign wr_count_next_no_wr_popping_R = ( wr_count_next_no_wr_popping_X0 & wr_count_next_no_wr_popping_R0 ) | ( wr_count_next_no_wr_popping_X1 & wr_count_next_no_wr_popping_R1 );
  assign ld2st_wr_count_R = ( ld2st_wr_count_X0 & ld2st_wr_count_R0 ) | ( ld2st_wr_count_X1 & ld2st_wr_count_R1 ) | ( ld2st_wr_count_X2 & ld2st_wr_count_R2 ) | ( ld2st_wr_count_X3 & ld2st_wr_count_R3 ) | ( ld2st_wr_count_X4 & ld2st_wr_count_R4 ) | ( ld2st_wr_count_X5 & ld2st_wr_count_R5 ) | ( ld2st_wr_count_X6 & ld2st_wr_count_R6 );
  assign ld2st_rd_count_p_R = ( ld2st_rd_count_p_X0 & ld2st_rd_count_p_R0 ) | ( ld2st_rd_count_p_X1 & ld2st_rd_count_p_R1 ) | ( ld2st_rd_count_p_X2 & ld2st_rd_count_p_R2 ) | ( ld2st_rd_count_p_X3 & ld2st_rd_count_p_R3 ) | ( ld2st_rd_count_p_X4 & ld2st_rd_count_p_R4 ) | ( ld2st_rd_count_p_X5 & ld2st_rd_count_p_R5 ) | ( ld2st_rd_count_p_X6 & ld2st_rd_count_p_R6 );
  assign ld2st_rd_adr_R = ( ld2st_rd_adr_X0 & ld2st_rd_adr_R0 ) | ( ld2st_rd_adr_X1 & ld2st_rd_adr_R1 ) | ( ld2st_rd_adr_X2 & ld2st_rd_adr_R2 ) | ( ld2st_rd_adr_X3 & ld2st_rd_adr_R3 );
  assign ld2st_wr_adr_R = ( ld2st_wr_adr_X0 & ld2st_wr_adr_R0 ) | ( ld2st_wr_adr_X1 & ld2st_wr_adr_R1 ) | ( ld2st_wr_adr_X2 & ld2st_wr_adr_R2 ) | ( ld2st_wr_adr_X3 & ld2st_wr_adr_R3 );
  assign ld2st_wr_prdy_R = ( ld2st_wr_prdy_X0 & ld2st_wr_prdy_R0 ) | ( ld2st_wr_prdy_X1 & ld2st_wr_prdy_R1 );
  assign ld2st_wr_idle_R = ( ld2st_wr_idle_X0 & ld2st_wr_idle_R0 ) | ( ld2st_wr_idle_X1 & ld2st_wr_idle_R1 );
  assign ld2st_rd_pvld_R = ( ld2st_rd_pvld_X0 & ld2st_rd_pvld_R0 );
  assign ld2st_rd_pd_R = ( ld2st_rd_pd_X0 & ld2st_rd_pd_R0 ) | ( ld2st_rd_pd_X1 & ld2st_rd_pd_R1 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { ld2st_wr_idle_d0_R , ld2st_wr_idle_d0_C , ld2st_wr_idle_d0_X , wr_busy_in_next_wr_req_eq_1_R , wr_busy_in_next_wr_req_eq_1_C , wr_busy_in_next_wr_req_eq_1_X , wr_count_next_is_20_R , wr_count_next_is_20_C , wr_count_next_is_20_X , wr_limit_muxed_R , wr_limit_muxed_C , wr_limit_muxed_X , wr_limit_reg_R , wr_limit_reg_C , wr_limit_reg_X , wr_popping_R , wr_popping_C , wr_popping_X , wr_pushing_R , wr_pushing_C , wr_pushing_X , wr_reserving_R , wr_reserving_C , wr_reserving_X  } = 0;
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) ld2st_rd_pd_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) ld2st_rd_pd_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) ld2st_rd_pd_PREV_VAL1 <= ld2st_rd_pd ;
    if( INSTR_IN_ZY ) ld2st_rd_pd_PREV_VAL2 <= ld2st_rd_pd_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) ld2st_rd_pvld_int_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) ld2st_rd_pvld_int_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) ld2st_rd_pvld_int_PREV_VAL1 <= ld2st_rd_pvld_int ;
    if( INSTR_IN_ZY ) ld2st_rd_pvld_int_PREV_VAL2 <= ld2st_rd_pvld_int_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) ld2st_rd_count_p_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) ld2st_rd_count_p_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) ld2st_rd_count_p_PREV_VAL1 <= ld2st_rd_count_p ;
    if( INSTR_IN_ZY ) ld2st_rd_count_p_PREV_VAL2 <= ld2st_rd_count_p_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) ld2st_rd_adr_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) ld2st_rd_adr_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) ld2st_rd_adr_PREV_VAL1 <= ld2st_rd_adr ;
    if( INSTR_IN_ZY ) ld2st_rd_adr_PREV_VAL2 <= ld2st_rd_adr_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) ld2st_wr_adr_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) ld2st_wr_adr_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) ld2st_wr_adr_PREV_VAL1 <= ld2st_wr_adr ;
    if( INSTR_IN_ZY ) ld2st_wr_adr_PREV_VAL2 <= ld2st_wr_adr_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) ld2st_wr_busy_int_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) ld2st_wr_busy_int_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) ld2st_wr_busy_int_PREV_VAL1 <= ld2st_wr_busy_int ;
    if( INSTR_IN_ZY ) ld2st_wr_busy_int_PREV_VAL2 <= ld2st_wr_busy_int_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) ld2st_wr_count_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) ld2st_wr_count_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) ld2st_wr_count_PREV_VAL1 <= ld2st_wr_count ;
    if( INSTR_IN_ZY ) ld2st_wr_count_PREV_VAL2 <= ld2st_wr_count_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) wr_busy_in_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) wr_busy_in_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) wr_busy_in_PREV_VAL1 <= wr_busy_in ;
    if( INSTR_IN_ZY ) wr_busy_in_PREV_VAL2 <= wr_busy_in_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) ld2st_wr_pvld_in_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) ld2st_wr_pvld_in_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) ld2st_wr_pvld_in_PREV_VAL1 <= ld2st_wr_pvld_in ;
    if( INSTR_IN_ZY ) ld2st_wr_pvld_in_PREV_VAL2 <= ld2st_wr_pvld_in_PREV_VAL1 ;
  end
 // ground taints for unused wire slices
  assert property( ld2st_rd_adr_r_flag == 0 || ld2st_rd_adr_PREV_VAL1 == ld2st_rd_adr_PREV_VAL2 );
  assert property( ld2st_rd_count_p_r_flag == 0 || ld2st_rd_count_p_PREV_VAL1 == ld2st_rd_count_p_PREV_VAL2 );
  assert property( ld2st_rd_pd_r_flag == 0 || ld2st_rd_pd_PREV_VAL1 == ld2st_rd_pd_PREV_VAL2 );
  assert property( ld2st_rd_pvld_int_r_flag == 0 || ld2st_rd_pvld_int_PREV_VAL1 == ld2st_rd_pvld_int_PREV_VAL2 );
  assert property( ld2st_wr_adr_r_flag == 0 || ld2st_wr_adr_PREV_VAL1 == ld2st_wr_adr_PREV_VAL2 );
  assert property( ld2st_wr_busy_int_r_flag == 0 || ld2st_wr_busy_int_PREV_VAL1 == ld2st_wr_busy_int_PREV_VAL2 );
  assert property( ld2st_wr_count_r_flag == 0 || ld2st_wr_count_PREV_VAL1 == ld2st_wr_count_PREV_VAL2 );
  assert property( ld2st_wr_pvld_in_r_flag == 0 || ld2st_wr_pvld_in_PREV_VAL1 == ld2st_wr_pvld_in_PREV_VAL2 );
  assert property( wr_busy_in_r_flag == 0 || wr_busy_in_PREV_VAL1 == wr_busy_in_PREV_VAL2 );
  assign rst_zy = !nvdla_core_rstn ;
endmodule
