  logic _0_;
  logic _0__T ;
  logic _0__R ;
  logic _0__C ;
  logic _0__X ;
  logic [13:0] _0__S ;
  logic _1_;
  logic _1__T ;
  logic _1__R ;
  logic _1__C ;
  logic _1__X ;
  logic [13:0] _1__S ;
  input chn_a_rsci_wen_comp;
  input chn_a_rsci_wen_comp_T ;
  input [13:0] chn_a_rsci_wen_comp_S ;
  output chn_a_rsci_wen_comp_R ;
  output chn_a_rsci_wen_comp_X ;
  output chn_a_rsci_wen_comp_C ;
  input chn_b_rsci_wen_comp;
  input chn_b_rsci_wen_comp_T ;
  input [13:0] chn_b_rsci_wen_comp_S ;
  output chn_b_rsci_wen_comp_R ;
  output chn_b_rsci_wen_comp_X ;
  output chn_b_rsci_wen_comp_C ;
  input chn_o_rsci_wen_comp;
  input chn_o_rsci_wen_comp_T ;
  input [13:0] chn_o_rsci_wen_comp_S ;
  output chn_o_rsci_wen_comp_R ;
  output chn_o_rsci_wen_comp_X ;
  output chn_o_rsci_wen_comp_C ;
  output core_wen;
  logic core_wen ;
  output core_wen_T ;
  logic core_wen_T ;
  logic core_wen_R ;
  logic core_wen_C ;
  logic core_wen_X ;
  logic [13:0] core_wen_S ;
  input core_wen_R0 ;
  input core_wen_C0 ;
  input core_wen_X0 ;
  output [13:0] core_wen_S ;
  output core_wten;
  logic core_wten ;
  output core_wten_T ;
  logic core_wten_T ;
  logic core_wten_R ;
  logic core_wten_C ;
  logic core_wten_X ;
  logic [13:0] core_wten_S ;
  input core_wten_R0 ;
  input core_wten_C0 ;
  input core_wten_X0 ;
  output [13:0] core_wten_S ;
  logic core_wten;
  logic  core_wten_T ;
  logic  core_wten_PREV_VAL1 ;
  logic  core_wten_PREV_VAL2 ;
  logic core_wten_t_flag ;
  logic core_wten_r_flag ;
  assign core_wten_S = 642 ;
  input nvdla_core_clk;
  input nvdla_core_clk_T ;
  input [13:0] nvdla_core_clk_S ;
  output nvdla_core_clk_R ;
  output nvdla_core_clk_X ;
  output nvdla_core_clk_C ;
  input nvdla_core_rstn;
  input nvdla_core_rstn_T ;
  input [13:0] nvdla_core_rstn_S ;
  output nvdla_core_rstn_R ;
  output nvdla_core_rstn_X ;
  output nvdla_core_rstn_C ;
  assign _1_ = chn_a_rsci_wen_comp & chn_b_rsci_wen_comp;
  assign _1__S = 0 ;
  logic [0:0] chn_a_rsci_wen_comp_C0 ;
  logic [0:0] chn_a_rsci_wen_comp_R0 ;
  logic [0:0] chn_a_rsci_wen_comp_X0 ;
  logic [0:0] chn_b_rsci_wen_comp_C0 ;
  logic [0:0] chn_b_rsci_wen_comp_R0 ;
  logic [0:0] chn_b_rsci_wen_comp_X0 ;
  assign _1__T = chn_a_rsci_wen_comp_T | chn_b_rsci_wen_comp_T ;
  assign chn_a_rsci_wen_comp_C0 = _1__C ;
  assign chn_a_rsci_wen_comp_X0 = _1__X ;
  assign chn_b_rsci_wen_comp_C0 = _1__C ;
  assign chn_b_rsci_wen_comp_X0 = _1__X ;
  assign chn_a_rsci_wen_comp_R0 = ( _1__R | _1__C & chn_b_rsci_wen_comp_T ) & { 1{ chn_b_rsci_wen_comp != 0 }} ;
  assign chn_b_rsci_wen_comp_R0 = ( _1__R | _1__C & chn_a_rsci_wen_comp_T ) & { 1{ chn_a_rsci_wen_comp != 0 }} ;
  assign core_wen = _1_ & chn_o_rsci_wen_comp;
  assign core_wen_S = 0 ;
  logic [0:0] _1__C0 ;
  logic [0:0] _1__R0 ;
  logic [0:0] _1__X0 ;
  logic [0:0] chn_o_rsci_wen_comp_C0 ;
  logic [0:0] chn_o_rsci_wen_comp_R0 ;
  logic [0:0] chn_o_rsci_wen_comp_X0 ;
  assign core_wen_T = _1__T | chn_o_rsci_wen_comp_T ;
  assign _1__C0 = core_wen_C ;
  assign _1__X0 = core_wen_X ;
  assign chn_o_rsci_wen_comp_C0 = core_wen_C ;
  assign chn_o_rsci_wen_comp_X0 = core_wen_X ;
  assign _1__R0 = ( core_wen_R | core_wen_C & chn_o_rsci_wen_comp_T ) & { 1{ chn_o_rsci_wen_comp != 0 }} ;
  assign chn_o_rsci_wen_comp_R0 = ( core_wen_R | core_wen_C & _1__T ) & { 1{ _1_ != 0 }} ;
  assign _0_ = ~ core_wen;
  logic [0:0] core_wen_C1 ;
  logic [0:0] core_wen_R1 ;
  logic [0:0] core_wen_X1 ;
  assign _0__T = core_wen_T ;
  assign core_wen_C1 = _0__C ;
  assign core_wen_R1 = _0__R ;
  assign core_wen_X1 = _0__X ;
  assign _0__S = 0 ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      core_wten <= 1'b0;
    else
      core_wten <= _0_;
  logic [0:0] _0__X0 ;
  logic [0:0] _0__R0 ;
  logic [0:0] _0__C0 ;
  assign _0__X0 = { 1{ core_wten_S != _0__S }} ;
  assign _0__R0 = 0 ;
  assign _0__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      core_wten_T 		<= !nvdla_core_rstn ? 0 : ( _0__T & _0__X0 );
  always @( posedge nvdla_core_clk )
      core_wten_t_flag 	<= !nvdla_core_rstn ? 0 : core_wten_t_flag ? 1 : | _0__T & ( | _0__X0 );
  always @( posedge nvdla_core_clk )
      core_wten_r_flag 	<= !nvdla_core_rstn ? 0 : core_wten_r_flag ? 1 : core_wten_t_flag ? 0 : ( | core_wten_R ) ;
  assign _0__C = ( _0__C0 );
  assign chn_o_rsci_wen_comp_C = ( chn_o_rsci_wen_comp_C0 );
  assign _1__C = ( _1__C0 );
  assign chn_b_rsci_wen_comp_C = ( chn_b_rsci_wen_comp_C0 );
  assign chn_a_rsci_wen_comp_C = ( chn_a_rsci_wen_comp_C0 );
  assign core_wten_C = ( core_wten_C0 );
  assign core_wen_C = ( core_wen_C0 ) | ( core_wen_C1 );
  assign _0__X = ( _0__X0 );
  assign chn_o_rsci_wen_comp_X = ( chn_o_rsci_wen_comp_X0 );
  assign _1__X = ( _1__X0 );
  assign chn_b_rsci_wen_comp_X = ( chn_b_rsci_wen_comp_X0 );
  assign chn_a_rsci_wen_comp_X = ( chn_a_rsci_wen_comp_X0 );
  assign core_wten_X = ( core_wten_X0 );
  assign core_wen_X = ( core_wen_X0 ) | ( core_wen_X1 );
  assign _0__R = ( _0__X0 & _0__R0 );
  assign chn_o_rsci_wen_comp_R = ( chn_o_rsci_wen_comp_X0 & chn_o_rsci_wen_comp_R0 );
  assign _1__R = ( _1__X0 & _1__R0 );
  assign chn_b_rsci_wen_comp_R = ( chn_b_rsci_wen_comp_X0 & chn_b_rsci_wen_comp_R0 );
  assign chn_a_rsci_wen_comp_R = ( chn_a_rsci_wen_comp_X0 & chn_a_rsci_wen_comp_R0 );
  assign core_wten_R = ( core_wten_X0 & core_wten_R0 );
  assign core_wen_R = ( core_wen_X0 & core_wen_R0 ) | ( core_wen_X1 & core_wen_R1 );
 // ground taints for floating regs
 // ground taints for unused wires
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) core_wten_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) core_wten_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) core_wten_PREV_VAL1 <= core_wten ;
    if( INSTR_IN_ZY ) core_wten_PREV_VAL2 <= core_wten_PREV_VAL1 ;
  end
 // ground taints for unused wire slices
  assert property( core_wten_r_flag == 0 || core_wten_PREV_VAL1 == core_wten_PREV_VAL2 );
  assign rst_zy = !nvdla_core_rstn ;
endmodule
