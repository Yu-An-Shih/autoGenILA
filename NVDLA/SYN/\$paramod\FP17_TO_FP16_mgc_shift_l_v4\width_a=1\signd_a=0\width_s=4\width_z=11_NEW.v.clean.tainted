  input a;
  input a_T ;
  output a_R ;
  input [13:0] a_S ;
  input [3:0] s;
  input [3:0] s_T ;
  output [3:0] s_R ;
  input [13:0] s_S ;
  output [10:0] z;
  logic [10:0] z ;
  output [10:0] z_T ;
  logic [10:0] z_T ;
  logic [10:0] z_R ;
  logic [13:0] z_S ;
  input [10:0] z_R0 ;
  output [13:0] z_S ;
  assign z = a <<< s;
  assign z_S = 0 ;
  logic [0:0] a_R0 ;
  logic [3:0] s_R0 ;
  assign z_T = { 11{ (| a_T ) | (|s_T ) }} ;
  assign a_R0 = { 1{ | z_R }} ;
  assign s_R0 = { 4{ | z_R }} ;
  assign s_R = ( s_R0 );
  assign a_R = ( a_R0 );
  assign z_R = ( z_R0 );
 // ground taints for floating regs
 // ground taints for unused wires
 // ground taints for unused wire slices
endmodule
