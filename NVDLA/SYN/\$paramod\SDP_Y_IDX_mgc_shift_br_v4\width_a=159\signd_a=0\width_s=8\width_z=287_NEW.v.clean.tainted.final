module \$paramod\SDP_Y_IDX_mgc_shift_br_v4\width_a=159\signd_a=0\width_s=8\width_z=287 ( a , s , INSTR_IN_ZY , rst_zy , a_T , a_S , s_T , s_S , z_R0 , z_C0 , z_X0 , z , a_R , a_X , a_C , s_R , s_X , s_C , z_T , z_S );
  input rst_zy;
  integer i;
  input INSTR_IN_ZY;
  logic [7:0] _0_;
  logic [7:0] _0__T ;
  logic [7:0] _0__R ;
  logic [7:0] _0__C ;
  logic [7:0] _0__X ;
  logic [13:0] _0__S ;
  logic [286:0] _1_;
  logic [286:0] _1__T ;
  logic [286:0] _1__R ;
  logic [286:0] _1__C ;
  logic [286:0] _1__X ;
  logic [13:0] _1__S ;
  logic [286:0] _2_;
  logic [286:0] _2__T ;
  logic [286:0] _2__R ;
  logic [286:0] _2__C ;
  logic [286:0] _2__X ;
  logic [13:0] _2__S ;
  input [158:0] a;
  input [158:0] a_T ;
  input [13:0] a_S ;
  output [158:0] a_R ;
  output [158:0] a_X ;
  output [158:0] a_C ;
  input [7:0] s;
  input [7:0] s_T ;
  input [13:0] s_S ;
  output [7:0] s_R ;
  output [7:0] s_X ;
  output [7:0] s_C ;
  output [286:0] z;
  logic [286:0] z ;
  output [286:0] z_T ;
  logic [286:0] z_T ;
  logic [286:0] z_R ;
  logic [286:0] z_C ;
  logic [286:0] z_X ;
  logic [13:0] z_S ;
  input [286:0] z_R0 ;
  input [286:0] z_C0 ;
  input [286:0] z_X0 ;
  output [13:0] z_S ;
  assign _0_ = ~ s;
  logic [7:0] s_C0 ;
  logic [7:0] s_R0 ;
  logic [7:0] s_X0 ;
  assign _0__T = s_T ;
  assign s_C0 = _0__C ;
  assign s_R0 = _0__R ;
  assign s_X0 = _0__X ;
  assign _0__S = 0 ;
  assign z = s[7] ? _1_ : _2_;
  logic [7:0] s_C1 ;
  logic [7:0] s_R1 ;
  logic [7:0] s_X1 ;
  assign s_C1 [7] = | z_C ;
  assign s_X1 [7] = | z_X ;
  assign z_T = s[7] ? ( { 287{ s_T  [7] }} | _1__T ) : ( { 287{ s_T  [7] }} | _2__T );
  assign z_S = s[7] ? _1__S : _2__S ;
  assign s_R1 [7] = ( | (z_R | ( z_C & ( { 287{ s[7] }} & _1__T | { 287{ !s[7] }} & _2__T )))) && _1_ != _2_ ;
  logic [286:0] _1__C0 ;
  logic [286:0] _1__R0 ;
  logic [286:0] _1__X0 ;
  assign _1__C0 = { 287{ s[7] }} ;
  assign _1__R0 = { 287{ s[7] }} & ( z_R | ( { 287{ s_T  [7] }} & z_C ));
  assign _1__X0 = { 287{ s[7] }} & z_X ;
  logic [286:0] _2__C0 ;
  logic [286:0] _2__R0 ;
  logic [286:0] _2__X0 ;
  assign _2__C0 = { 287{ !s[7] }} ;
  assign _2__R0 = { 287{ !s[7] }} & ( z_R | ( { 287{ s_T  [7] }} & z_C ));
  assign _2__X0 = { 287{ !s[7] }} & z_X ;
  logic [159:0] fangyuan0;
  logic [159:0] fangyuan0_T ;
  logic [159:0] fangyuan0_R ;
  logic [159:0] fangyuan0_C ;
  logic [159:0] fangyuan0_X ;
  assign fangyuan0 = { a, 1'b0 };
  assign fangyuan0_T = {  a_T , 1'h0  };
  logic [13:0] fangyuan0_S ;
  assign fangyuan0_S = 0 ;
  logic [158:0] a_R0 ;
  logic [158:0] a_X0 ;
  logic [158:0] a_C0 ;
  assign a_R0 = fangyuan0_R [159:1] ;
  assign a_X0 = fangyuan0_X [159:1] ;
  assign a_C0 = fangyuan0_C [159:1] ;

  assign _1_ = fangyuan0 <<< _0_;
  assign _1__S = 0 ;
  logic [159:0] fangyuan0_C0 ;
  logic [159:0] fangyuan0_R0 ;
  logic [159:0] fangyuan0_X0 ;
  logic [7:0] _0__C0 ;
  logic [7:0] _0__R0 ;
  logic [7:0] _0__X0 ;
  assign _1__T = fangyuan0_T | _0__T ;
  assign fangyuan0_C0 = _1__C ;
  assign fangyuan0_X0 = _1__X ;
  assign _0__C0 = _1__C ;
  assign _0__X0 = _1__X ;
  assign fangyuan0_R0 = _1__R | ( _1__C & _0__T );
  assign _0__R0 = _1__R | ( _1__C & fangyuan0_T );
  logic [159:0] fangyuan1;
  logic [159:0] fangyuan1_T ;
  logic [159:0] fangyuan1_R ;
  logic [159:0] fangyuan1_C ;
  logic [159:0] fangyuan1_X ;
  assign fangyuan1 = { 1'b0, a };
  assign fangyuan1_T = {  1'h0 , a_T  };
  logic [13:0] fangyuan1_S ;
  assign fangyuan1_S = 0 ;
  logic [158:0] a_R1 ;
  logic [158:0] a_X1 ;
  logic [158:0] a_C1 ;
  assign a_R1 = fangyuan1_R [158:0] ;
  assign a_X1 = fangyuan1_X [158:0] ;
  assign a_C1 = fangyuan1_C [158:0] ;

 assign _2_ = fangyuan1 >>> s;
 assign _2__S = 0 ;
  assign { s_R1 [0], s_R1 [1], s_R1 [2], s_R1 [3], s_R1 [4], s_R1 [5], s_R1 [6] } = 0;
  assign { s_X1 [0], s_X1 [1], s_X1 [2], s_X1 [3], s_X1 [4], s_X1 [5], s_X1 [6] } = 0;
  assign { s_C1 [0], s_C1 [1], s_C1 [2], s_C1 [3], s_C1 [4], s_C1 [5], s_C1 [6] } = 0;
 logic [159:0] fangyuan1_C0 ;
 logic [159:0] fangyuan1_R0 ;
 logic [159:0] fangyuan1_X0 ;
 logic [7:0] s_C2 ;
 logic [7:0] s_R2 ;
 logic [7:0] s_X2 ;
 assign _2__T = fangyuan1_T | s_T ;
 assign fangyuan1_C0 = _2__C ;
 assign fangyuan1_X0 = _2__X ;
 assign s_C2 = _2__C ;
 assign s_X2 = _2__X ;
 assign fangyuan1_R0 = _2__R | ( _2__C & s_T );
 assign s_R2 = _2__R | ( _2__C & fangyuan1_T );
  assign fangyuan1_C = ( fangyuan1_C0 );
  assign _0__C = ( _0__C0 );
  assign fangyuan0_C = ( fangyuan0_C0 );
  assign a_C = ( a_C0 ) | ( a_C1 );
  assign _2__C = ( _2__C0 );
  assign _1__C = ( _1__C0 );
  assign s_C = ( s_C0 ) | ( s_C1 ) | ( s_C2 );
  assign z_C = ( z_C0 );
  assign fangyuan1_X = ( fangyuan1_X0 );
  assign _0__X = ( _0__X0 );
  assign fangyuan0_X = ( fangyuan0_X0 );
  assign a_X = ( a_X0 ) | ( a_X1 );
  assign _2__X = ( _2__X0 );
  assign _1__X = ( _1__X0 );
  assign s_X = ( s_X0 ) | ( s_X1 ) | ( s_X2 );
  assign z_X = ( z_X0 );
  assign fangyuan1_R = ( fangyuan1_X0 & fangyuan1_R0 );
  assign _0__R = ( _0__X0 & _0__R0 );
  assign fangyuan0_R = ( fangyuan0_X0 & fangyuan0_R0 );
  assign a_R = ( a_X0 & a_R0 ) | ( a_X1 & a_R1 );
  assign _2__R = ( _2__X0 & _2__R0 );
  assign _1__R = ( _1__X0 & _1__R0 );
  assign s_R = ( s_X0 & s_R0 ) | ( s_X1 & s_R1 ) | ( s_X2 & s_R2 );
  assign z_R = ( z_X0 & z_R0 );
 // ground taints for floating regs
 // ground taints for unused wires
 // ground taints for unused wire slices
endmodule
