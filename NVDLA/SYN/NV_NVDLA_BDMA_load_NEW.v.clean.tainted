  logic _000_;
  logic _000__T ;
  logic _000__R ;
  logic _000__C ;
  logic _000__X ;
  logic [13:0] _000__S ;
  logic [63:0] _001_;
  logic [63:0] _001__T ;
  logic [63:0] _001__R ;
  logic [63:0] _001__C ;
  logic [63:0] _001__X ;
  logic [13:0] _001__S ;
  logic [23:0] _002_;
  logic [23:0] _002__T ;
  logic [23:0] _002__R ;
  logic [23:0] _002__C ;
  logic [23:0] _002__X ;
  logic [13:0] _002__S ;
  logic _003_;
  logic _003__T ;
  logic _003__R ;
  logic _003__C ;
  logic _003__X ;
  logic [13:0] _003__S ;
  logic [23:0] _004_;
  logic [23:0] _004__T ;
  logic [23:0] _004__R ;
  logic [23:0] _004__C ;
  logic [23:0] _004__X ;
  logic [13:0] _004__S ;
  logic [12:0] _005_;
  logic [12:0] _005__T ;
  logic [12:0] _005__R ;
  logic [12:0] _005__C ;
  logic [12:0] _005__X ;
  logic [13:0] _005__S ;
  logic [31:0] _006_;
  logic [31:0] _006__T ;
  logic [31:0] _006__R ;
  logic [31:0] _006__C ;
  logic [31:0] _006__X ;
  logic [13:0] _006__S ;
  logic [23:0] _007_;
  logic [23:0] _007__T ;
  logic [23:0] _007__R ;
  logic [23:0] _007__C ;
  logic [23:0] _007__X ;
  logic [13:0] _007__S ;
  logic [31:0] _008_;
  logic [31:0] _008__T ;
  logic [31:0] _008__R ;
  logic [31:0] _008__C ;
  logic [31:0] _008__X ;
  logic [13:0] _008__S ;
  logic [63:0] _009_;
  logic [63:0] _009__T ;
  logic [63:0] _009__R ;
  logic [63:0] _009__C ;
  logic [63:0] _009__X ;
  logic [13:0] _009__S ;
  logic [23:0] _010_;
  logic [23:0] _010__T ;
  logic [23:0] _010__R ;
  logic [23:0] _010__C ;
  logic [23:0] _010__X ;
  logic [13:0] _010__S ;
  logic _011_;
  logic _011__T ;
  logic _011__R ;
  logic _011__C ;
  logic _011__X ;
  logic [13:0] _011__S ;
  logic [63:0] _012_;
  logic [63:0] _012__T ;
  logic [63:0] _012__R ;
  logic [63:0] _012__C ;
  logic [63:0] _012__X ;
  logic [13:0] _012__S ;
  logic [63:0] _013_;
  logic [63:0] _013__T ;
  logic [63:0] _013__R ;
  logic [63:0] _013__C ;
  logic [63:0] _013__X ;
  logic [13:0] _013__S ;
  logic [23:0] _014_;
  logic [23:0] _014__T ;
  logic [23:0] _014__R ;
  logic [23:0] _014__C ;
  logic [23:0] _014__X ;
  logic [13:0] _014__S ;
  logic [23:0] _015_;
  logic [23:0] _015__T ;
  logic [23:0] _015__R ;
  logic [23:0] _015__C ;
  logic [23:0] _015__X ;
  logic [13:0] _015__S ;
  logic _016_;
  logic _016__T ;
  logic _016__R ;
  logic _016__C ;
  logic _016__X ;
  logic [13:0] _016__S ;
  logic _017_;
  logic _017__T ;
  logic _017__R ;
  logic _017__C ;
  logic _017__X ;
  logic [13:0] _017__S ;
  logic _018_;
  logic _018__T ;
  logic _018__R ;
  logic _018__C ;
  logic _018__X ;
  logic [13:0] _018__S ;
  logic _019_;
  logic _019__T ;
  logic _019__R ;
  logic _019__C ;
  logic _019__X ;
  logic [13:0] _019__S ;
  logic _020_;
  logic _020__T ;
  logic _020__R ;
  logic _020__C ;
  logic _020__X ;
  logic [13:0] _020__S ;
  logic _021_;
  logic _021__T ;
  logic _021__R ;
  logic _021__C ;
  logic _021__X ;
  logic [13:0] _021__S ;
  logic _022_;
  logic _022__T ;
  logic _022__R ;
  logic _022__C ;
  logic _022__X ;
  logic [13:0] _022__S ;
  logic _023_;
  logic _023__T ;
  logic _023__R ;
  logic _023__C ;
  logic _023__X ;
  logic [13:0] _023__S ;
  logic _024_;
  logic _024__T ;
  logic _024__R ;
  logic _024__C ;
  logic _024__X ;
  logic [13:0] _024__S ;
  logic _025_;
  logic _025__T ;
  logic _025__R ;
  logic _025__C ;
  logic _025__X ;
  logic [13:0] _025__S ;
  logic _026_;
  logic _026__T ;
  logic _026__R ;
  logic _026__C ;
  logic _026__X ;
  logic [13:0] _026__S ;
  logic _027_;
  logic _027__T ;
  logic _027__R ;
  logic _027__C ;
  logic _027__X ;
  logic [13:0] _027__S ;
  logic [23:0] _028_;
  logic [23:0] _028__T ;
  logic [23:0] _028__R ;
  logic [23:0] _028__C ;
  logic [23:0] _028__X ;
  logic [13:0] _028__S ;
  logic [23:0] _029_;
  logic [23:0] _029__T ;
  logic [23:0] _029__R ;
  logic [23:0] _029__C ;
  logic [23:0] _029__X ;
  logic [13:0] _029__S ;
  logic [23:0] _030_;
  logic [23:0] _030__T ;
  logic [23:0] _030__R ;
  logic [23:0] _030__C ;
  logic [23:0] _030__X ;
  logic [13:0] _030__S ;
  logic [63:0] _031_;
  logic [63:0] _031__T ;
  logic [63:0] _031__R ;
  logic [63:0] _031__C ;
  logic [63:0] _031__X ;
  logic [13:0] _031__S ;
  logic [63:0] _032_;
  logic [63:0] _032__T ;
  logic [63:0] _032__R ;
  logic [63:0] _032__C ;
  logic [63:0] _032__X ;
  logic [13:0] _032__S ;
  logic [63:0] _033_;
  logic [63:0] _033__T ;
  logic [63:0] _033__R ;
  logic [63:0] _033__C ;
  logic [63:0] _033__X ;
  logic [13:0] _033__S ;
  logic [63:0] _034_;
  logic [63:0] _034__T ;
  logic [63:0] _034__R ;
  logic [63:0] _034__C ;
  logic [63:0] _034__X ;
  logic [13:0] _034__S ;
  output [78:0] bdma2cvif_rd_req_pd;
  logic [78:0] bdma2cvif_rd_req_pd ;
  output [78:0] bdma2cvif_rd_req_pd_T ;
  logic [78:0] bdma2cvif_rd_req_pd_T ;
  logic [78:0] bdma2cvif_rd_req_pd_R ;
  logic [78:0] bdma2cvif_rd_req_pd_C ;
  logic [78:0] bdma2cvif_rd_req_pd_X ;
  logic [13:0] bdma2cvif_rd_req_pd_S ;
  input [78:0] bdma2cvif_rd_req_pd_R0 ;
  input [78:0] bdma2cvif_rd_req_pd_C0 ;
  input [78:0] bdma2cvif_rd_req_pd_X0 ;
  output [13:0] bdma2cvif_rd_req_pd_S ;
  input bdma2cvif_rd_req_ready;
  input bdma2cvif_rd_req_ready_T ;
  input [13:0] bdma2cvif_rd_req_ready_S ;
  output bdma2cvif_rd_req_ready_R ;
  output bdma2cvif_rd_req_ready_X ;
  output bdma2cvif_rd_req_ready_C ;
  output bdma2cvif_rd_req_valid;
  logic bdma2cvif_rd_req_valid ;
  output bdma2cvif_rd_req_valid_T ;
  logic bdma2cvif_rd_req_valid_T ;
  logic bdma2cvif_rd_req_valid_R ;
  logic bdma2cvif_rd_req_valid_C ;
  logic bdma2cvif_rd_req_valid_X ;
  logic [13:0] bdma2cvif_rd_req_valid_S ;
  input bdma2cvif_rd_req_valid_R0 ;
  input bdma2cvif_rd_req_valid_C0 ;
  input bdma2cvif_rd_req_valid_X0 ;
  output [13:0] bdma2cvif_rd_req_valid_S ;
  output [78:0] bdma2mcif_rd_req_pd;
  logic [78:0] bdma2mcif_rd_req_pd ;
  output [78:0] bdma2mcif_rd_req_pd_T ;
  logic [78:0] bdma2mcif_rd_req_pd_T ;
  logic [78:0] bdma2mcif_rd_req_pd_R ;
  logic [78:0] bdma2mcif_rd_req_pd_C ;
  logic [78:0] bdma2mcif_rd_req_pd_X ;
  logic [13:0] bdma2mcif_rd_req_pd_S ;
  input [78:0] bdma2mcif_rd_req_pd_R0 ;
  input [78:0] bdma2mcif_rd_req_pd_C0 ;
  input [78:0] bdma2mcif_rd_req_pd_X0 ;
  output [13:0] bdma2mcif_rd_req_pd_S ;
  input bdma2mcif_rd_req_ready;
  input bdma2mcif_rd_req_ready_T ;
  input [13:0] bdma2mcif_rd_req_ready_S ;
  output bdma2mcif_rd_req_ready_R ;
  output bdma2mcif_rd_req_ready_X ;
  output bdma2mcif_rd_req_ready_C ;
  output bdma2mcif_rd_req_valid;
  logic bdma2mcif_rd_req_valid ;
  output bdma2mcif_rd_req_valid_T ;
  logic bdma2mcif_rd_req_valid_T ;
  logic bdma2mcif_rd_req_valid_R ;
  logic bdma2mcif_rd_req_valid_C ;
  logic bdma2mcif_rd_req_valid_X ;
  logic [13:0] bdma2mcif_rd_req_valid_S ;
  input bdma2mcif_rd_req_valid_R0 ;
  input bdma2mcif_rd_req_valid_C0 ;
  input bdma2mcif_rd_req_valid_X0 ;
  output [13:0] bdma2mcif_rd_req_valid_S ;
  logic cmd_ready;
  logic cmd_ready_T ;
  logic cmd_ready_R ;
  logic cmd_ready_C ;
  logic cmd_ready_X ;
  logic [13:0] cmd_ready_S ;
  logic cmd_valid;
  logic cmd_valid_T ;
  logic cmd_valid_R ;
  logic cmd_valid_C ;
  logic cmd_valid_X ;
  logic [13:0] cmd_valid_S ;
  output csb2ld_rdy;
  logic csb2ld_rdy ;
  output csb2ld_rdy_T ;
  logic csb2ld_rdy_T ;
  logic csb2ld_rdy_R ;
  logic csb2ld_rdy_C ;
  logic csb2ld_rdy_X ;
  logic [13:0] csb2ld_rdy_S ;
  input csb2ld_rdy_R0 ;
  input csb2ld_rdy_C0 ;
  input csb2ld_rdy_X0 ;
  output [13:0] csb2ld_rdy_S ;
  input csb2ld_vld;
  input csb2ld_vld_T ;
  input [13:0] csb2ld_vld_S ;
  output csb2ld_vld_R ;
  output csb2ld_vld_X ;
  output csb2ld_vld_C ;
  logic cv_dma_rd_req_rdy;
  logic cv_dma_rd_req_rdy_T ;
  logic cv_dma_rd_req_rdy_R ;
  logic cv_dma_rd_req_rdy_C ;
  logic cv_dma_rd_req_rdy_X ;
  logic [13:0] cv_dma_rd_req_rdy_S ;
  logic cv_dma_rd_req_vld;
  logic cv_dma_rd_req_vld_T ;
  logic cv_dma_rd_req_vld_R ;
  logic cv_dma_rd_req_vld_C ;
  logic cv_dma_rd_req_vld_X ;
  logic [13:0] cv_dma_rd_req_vld_S ;
  logic [78:0] cv_int_rd_req_pd;
  logic [78:0] cv_int_rd_req_pd_T ;
  logic [78:0] cv_int_rd_req_pd_R ;
  logic [78:0] cv_int_rd_req_pd_C ;
  logic [78:0] cv_int_rd_req_pd_X ;
  logic [13:0] cv_int_rd_req_pd_S ;
  logic [78:0] cv_int_rd_req_pd_d0;
  logic [78:0] cv_int_rd_req_pd_d0_T ;
  logic [78:0] cv_int_rd_req_pd_d0_R ;
  logic [78:0] cv_int_rd_req_pd_d0_C ;
  logic [78:0] cv_int_rd_req_pd_d0_X ;
  logic [13:0] cv_int_rd_req_pd_d0_S ;
  logic cv_int_rd_req_ready;
  logic cv_int_rd_req_ready_T ;
  logic cv_int_rd_req_ready_R ;
  logic cv_int_rd_req_ready_C ;
  logic cv_int_rd_req_ready_X ;
  logic [13:0] cv_int_rd_req_ready_S ;
  logic cv_int_rd_req_ready_d0;
  logic cv_int_rd_req_ready_d0_T ;
  logic cv_int_rd_req_ready_d0_R ;
  logic cv_int_rd_req_ready_d0_C ;
  logic cv_int_rd_req_ready_d0_X ;
  logic [13:0] cv_int_rd_req_ready_d0_S ;
  logic cv_int_rd_req_valid;
  logic cv_int_rd_req_valid_T ;
  logic cv_int_rd_req_valid_R ;
  logic cv_int_rd_req_valid_C ;
  logic cv_int_rd_req_valid_X ;
  logic [13:0] cv_int_rd_req_valid_S ;
  logic cv_int_rd_req_valid_d0;
  logic cv_int_rd_req_valid_d0_T ;
  logic cv_int_rd_req_valid_d0_R ;
  logic cv_int_rd_req_valid_d0_C ;
  logic cv_int_rd_req_valid_d0_X ;
  logic [13:0] cv_int_rd_req_valid_d0_S ;
  logic cv_rd_req_rdyi;
  logic cv_rd_req_rdyi_T ;
  logic cv_rd_req_rdyi_R ;
  logic cv_rd_req_rdyi_C ;
  logic cv_rd_req_rdyi_X ;
  logic [13:0] cv_rd_req_rdyi_S ;
  logic [63:0] dma_rd_req_addr;
  logic [63:0] dma_rd_req_addr_T ;
  logic [63:0] dma_rd_req_addr_R ;
  logic [63:0] dma_rd_req_addr_C ;
  logic [63:0] dma_rd_req_addr_X ;
  logic [13:0] dma_rd_req_addr_S ;
  logic [78:0] dma_rd_req_pd;
  logic [78:0] dma_rd_req_pd_T ;
  logic [78:0] dma_rd_req_pd_R ;
  logic [78:0] dma_rd_req_pd_C ;
  logic [78:0] dma_rd_req_pd_X ;
  logic [13:0] dma_rd_req_pd_S ;
  logic dma_rd_req_rdy;
  logic dma_rd_req_rdy_T ;
  logic dma_rd_req_rdy_R ;
  logic dma_rd_req_rdy_C ;
  logic dma_rd_req_rdy_X ;
  logic [13:0] dma_rd_req_rdy_S ;
  logic [14:0] dma_rd_req_size;
  logic [14:0] dma_rd_req_size_T ;
  logic [14:0] dma_rd_req_size_R ;
  logic [14:0] dma_rd_req_size_C ;
  logic [14:0] dma_rd_req_size_X ;
  logic [13:0] dma_rd_req_size_S ;
  logic dma_rd_req_type;
  logic dma_rd_req_type_T ;
  logic dma_rd_req_type_R ;
  logic dma_rd_req_type_C ;
  logic dma_rd_req_type_X ;
  logic [13:0] dma_rd_req_type_S ;
  logic dma_rd_req_vld;
  logic dma_rd_req_vld_T ;
  logic dma_rd_req_vld_R ;
  logic dma_rd_req_vld_C ;
  logic dma_rd_req_vld_X ;
  logic [13:0] dma_rd_req_vld_S ;
  logic dma_stall_inc;
  logic dma_stall_inc_T ;
  logic dma_stall_inc_R ;
  logic dma_stall_inc_C ;
  logic dma_stall_inc_X ;
  logic [13:0] dma_stall_inc_S ;
  logic is_cube_end;
  logic is_cube_end_T ;
  logic is_cube_end_R ;
  logic is_cube_end_C ;
  logic is_cube_end_X ;
  logic [13:0] is_cube_end_S ;
  logic is_last_req_in_line;
  logic is_last_req_in_line_T ;
  logic is_last_req_in_line_R ;
  logic is_last_req_in_line_C ;
  logic is_last_req_in_line_X ;
  logic [13:0] is_last_req_in_line_S ;
  logic is_src_ram_type_switching;
  logic is_src_ram_type_switching_T ;
  logic is_src_ram_type_switching_R ;
  logic is_src_ram_type_switching_C ;
  logic is_src_ram_type_switching_X ;
  logic [13:0] is_src_ram_type_switching_S ;
  logic is_surf_end;
  logic is_surf_end_T ;
  logic is_surf_end_R ;
  logic is_surf_end_C ;
  logic is_surf_end_X ;
  logic [13:0] is_surf_end_S ;
  output ld2csb_grp0_dma_stall_inc;
  logic ld2csb_grp0_dma_stall_inc ;
  output ld2csb_grp0_dma_stall_inc_T ;
  logic ld2csb_grp0_dma_stall_inc_T ;
  logic ld2csb_grp0_dma_stall_inc_R ;
  logic ld2csb_grp0_dma_stall_inc_C ;
  logic ld2csb_grp0_dma_stall_inc_X ;
  logic [13:0] ld2csb_grp0_dma_stall_inc_S ;
  input ld2csb_grp0_dma_stall_inc_R0 ;
  input ld2csb_grp0_dma_stall_inc_C0 ;
  input ld2csb_grp0_dma_stall_inc_X0 ;
  output [13:0] ld2csb_grp0_dma_stall_inc_S ;
  output ld2csb_grp1_dma_stall_inc;
  logic ld2csb_grp1_dma_stall_inc ;
  output ld2csb_grp1_dma_stall_inc_T ;
  logic ld2csb_grp1_dma_stall_inc_T ;
  logic ld2csb_grp1_dma_stall_inc_R ;
  logic ld2csb_grp1_dma_stall_inc_C ;
  logic ld2csb_grp1_dma_stall_inc_X ;
  logic [13:0] ld2csb_grp1_dma_stall_inc_S ;
  input ld2csb_grp1_dma_stall_inc_R0 ;
  input ld2csb_grp1_dma_stall_inc_C0 ;
  input ld2csb_grp1_dma_stall_inc_X0 ;
  output [13:0] ld2csb_grp1_dma_stall_inc_S ;
  output ld2csb_idle;
  logic ld2csb_idle ;
  output ld2csb_idle_T ;
  logic ld2csb_idle_T ;
  logic ld2csb_idle_R ;
  logic ld2csb_idle_C ;
  logic ld2csb_idle_X ;
  logic [13:0] ld2csb_idle_S ;
  input ld2csb_idle_R0 ;
  input ld2csb_idle_C0 ;
  input ld2csb_idle_X0 ;
  output [13:0] ld2csb_idle_S ;
  output ld2gate_slcg_en;
  logic ld2gate_slcg_en ;
  output ld2gate_slcg_en_T ;
  logic ld2gate_slcg_en_T ;
  logic ld2gate_slcg_en_R ;
  logic ld2gate_slcg_en_C ;
  logic ld2gate_slcg_en_X ;
  logic [13:0] ld2gate_slcg_en_S ;
  input ld2gate_slcg_en_R0 ;
  input ld2gate_slcg_en_C0 ;
  input ld2gate_slcg_en_X0 ;
  output [13:0] ld2gate_slcg_en_S ;
  logic ld2gate_slcg_en;
  logic  ld2gate_slcg_en_T ;
  logic  ld2gate_slcg_en_PREV_VAL1 ;
  logic  ld2gate_slcg_en_PREV_VAL2 ;
  logic ld2gate_slcg_en_t_flag ;
  logic ld2gate_slcg_en_r_flag ;
  assign ld2gate_slcg_en_S = 865 ;
  logic [63:0] ld2st_addr;
  logic [63:0] ld2st_addr_T ;
  logic [63:0] ld2st_addr_R ;
  logic [63:0] ld2st_addr_C ;
  logic [63:0] ld2st_addr_X ;
  logic [13:0] ld2st_addr_S ;
  logic ld2st_cmd_dst_ram_type;
  logic ld2st_cmd_dst_ram_type_T ;
  logic ld2st_cmd_dst_ram_type_R ;
  logic ld2st_cmd_dst_ram_type_C ;
  logic ld2st_cmd_dst_ram_type_X ;
  logic [13:0] ld2st_cmd_dst_ram_type_S ;
  logic ld2st_cmd_interrupt;
  logic ld2st_cmd_interrupt_T ;
  logic ld2st_cmd_interrupt_R ;
  logic ld2st_cmd_interrupt_C ;
  logic ld2st_cmd_interrupt_X ;
  logic [13:0] ld2st_cmd_interrupt_S ;
  logic ld2st_cmd_interrupt_ptr;
  logic ld2st_cmd_interrupt_ptr_T ;
  logic ld2st_cmd_interrupt_ptr_R ;
  logic ld2st_cmd_interrupt_ptr_C ;
  logic ld2st_cmd_interrupt_ptr_X ;
  logic [13:0] ld2st_cmd_interrupt_ptr_S ;
  logic ld2st_cmd_src_ram_type;
  logic ld2st_cmd_src_ram_type_T ;
  logic ld2st_cmd_src_ram_type_R ;
  logic ld2st_cmd_src_ram_type_C ;
  logic ld2st_cmd_src_ram_type_X ;
  logic [13:0] ld2st_cmd_src_ram_type_S ;
  logic [23:0] ld2st_line_repeat_number;
  logic [23:0] ld2st_line_repeat_number_T ;
  logic [23:0] ld2st_line_repeat_number_R ;
  logic [23:0] ld2st_line_repeat_number_C ;
  logic [23:0] ld2st_line_repeat_number_X ;
  logic [13:0] ld2st_line_repeat_number_S ;
  logic [12:0] ld2st_line_size;
  logic [12:0] ld2st_line_size_T ;
  logic [12:0] ld2st_line_size_R ;
  logic [12:0] ld2st_line_size_C ;
  logic [12:0] ld2st_line_size_X ;
  logic [13:0] ld2st_line_size_S ;
  logic [26:0] ld2st_line_stride;
  logic [26:0] ld2st_line_stride_T ;
  logic [26:0] ld2st_line_stride_R ;
  logic [26:0] ld2st_line_stride_C ;
  logic [26:0] ld2st_line_stride_X ;
  logic [13:0] ld2st_line_stride_S ;
  logic [23:0] ld2st_surf_repeat_number;
  logic [23:0] ld2st_surf_repeat_number_T ;
  logic [23:0] ld2st_surf_repeat_number_R ;
  logic [23:0] ld2st_surf_repeat_number_C ;
  logic [23:0] ld2st_surf_repeat_number_X ;
  logic [13:0] ld2st_surf_repeat_number_S ;
  logic [26:0] ld2st_surf_stride;
  logic [26:0] ld2st_surf_stride_T ;
  logic [26:0] ld2st_surf_stride_R ;
  logic [26:0] ld2st_surf_stride_C ;
  logic [26:0] ld2st_surf_stride_X ;
  logic [13:0] ld2st_surf_stride_S ;
  input ld2st_wr_idle;
  input ld2st_wr_idle_T ;
  input [13:0] ld2st_wr_idle_S ;
  output ld2st_wr_idle_R ;
  output ld2st_wr_idle_X ;
  output ld2st_wr_idle_C ;
  output [160:0] ld2st_wr_pd;
  logic [160:0] ld2st_wr_pd ;
  output [160:0] ld2st_wr_pd_T ;
  logic [160:0] ld2st_wr_pd_T ;
  logic [160:0] ld2st_wr_pd_R ;
  logic [160:0] ld2st_wr_pd_C ;
  logic [160:0] ld2st_wr_pd_X ;
  logic [13:0] ld2st_wr_pd_S ;
  input [160:0] ld2st_wr_pd_R0 ;
  input [160:0] ld2st_wr_pd_C0 ;
  input [160:0] ld2st_wr_pd_X0 ;
  output [13:0] ld2st_wr_pd_S ;
  input ld2st_wr_prdy;
  input ld2st_wr_prdy_T ;
  input [13:0] ld2st_wr_prdy_S ;
  output ld2st_wr_prdy_R ;
  output ld2st_wr_prdy_X ;
  output ld2st_wr_prdy_C ;
  output ld2st_wr_pvld;
  logic ld2st_wr_pvld ;
  output ld2st_wr_pvld_T ;
  logic ld2st_wr_pvld_T ;
  logic ld2st_wr_pvld_R ;
  logic ld2st_wr_pvld_C ;
  logic ld2st_wr_pvld_X ;
  logic [13:0] ld2st_wr_pvld_S ;
  input ld2st_wr_pvld_R0 ;
  input ld2st_wr_pvld_C0 ;
  input ld2st_wr_pvld_X0 ;
  output [13:0] ld2st_wr_pvld_S ;
  logic ld_idle;
  logic ld_idle_T ;
  logic ld_idle_R ;
  logic ld_idle_C ;
  logic ld_idle_X ;
  logic [13:0] ld_idle_S ;
  logic [63:0] line_addr;
  logic [63:0]  line_addr_T ;
  logic [63:0]  line_addr_PREV_VAL1 ;
  logic [63:0]  line_addr_PREV_VAL2 ;
  logic [63:0]  line_addr_R ;
  logic [63:0]  line_addr_X ;
  logic [63:0]  line_addr_C ;
  logic [13:0] line_addr_S ;
  logic line_addr_t_flag ;
  logic line_addr_r_flag ;
  assign line_addr_S = 866 ;
  logic [23:0] line_count;
  logic [23:0]  line_count_T ;
  logic [23:0]  line_count_PREV_VAL1 ;
  logic [23:0]  line_count_PREV_VAL2 ;
  logic [23:0]  line_count_R ;
  logic [23:0]  line_count_X ;
  logic [23:0]  line_count_C ;
  logic [13:0] line_count_S ;
  logic line_count_t_flag ;
  logic line_count_r_flag ;
  assign line_count_S = 867 ;
  logic load_cmd;
  logic load_cmd_T ;
  logic load_cmd_R ;
  logic load_cmd_C ;
  logic load_cmd_X ;
  logic [13:0] load_cmd_S ;
  logic load_cmd_en;
  logic load_cmd_en_T ;
  logic load_cmd_en_R ;
  logic load_cmd_en_C ;
  logic load_cmd_en_X ;
  logic [13:0] load_cmd_en_S ;
  logic mc_dma_rd_req_rdy;
  logic mc_dma_rd_req_rdy_T ;
  logic mc_dma_rd_req_rdy_R ;
  logic mc_dma_rd_req_rdy_C ;
  logic mc_dma_rd_req_rdy_X ;
  logic [13:0] mc_dma_rd_req_rdy_S ;
  logic mc_dma_rd_req_vld;
  logic mc_dma_rd_req_vld_T ;
  logic mc_dma_rd_req_vld_R ;
  logic mc_dma_rd_req_vld_C ;
  logic mc_dma_rd_req_vld_X ;
  logic [13:0] mc_dma_rd_req_vld_S ;
  logic [78:0] mc_int_rd_req_pd;
  logic [78:0] mc_int_rd_req_pd_T ;
  logic [78:0] mc_int_rd_req_pd_R ;
  logic [78:0] mc_int_rd_req_pd_C ;
  logic [78:0] mc_int_rd_req_pd_X ;
  logic [13:0] mc_int_rd_req_pd_S ;
  logic [78:0] mc_int_rd_req_pd_d0;
  logic [78:0] mc_int_rd_req_pd_d0_T ;
  logic [78:0] mc_int_rd_req_pd_d0_R ;
  logic [78:0] mc_int_rd_req_pd_d0_C ;
  logic [78:0] mc_int_rd_req_pd_d0_X ;
  logic [13:0] mc_int_rd_req_pd_d0_S ;
  logic mc_int_rd_req_ready;
  logic mc_int_rd_req_ready_T ;
  logic mc_int_rd_req_ready_R ;
  logic mc_int_rd_req_ready_C ;
  logic mc_int_rd_req_ready_X ;
  logic [13:0] mc_int_rd_req_ready_S ;
  logic mc_int_rd_req_ready_d0;
  logic mc_int_rd_req_ready_d0_T ;
  logic mc_int_rd_req_ready_d0_R ;
  logic mc_int_rd_req_ready_d0_C ;
  logic mc_int_rd_req_ready_d0_X ;
  logic [13:0] mc_int_rd_req_ready_d0_S ;
  logic mc_int_rd_req_valid;
  logic mc_int_rd_req_valid_T ;
  logic mc_int_rd_req_valid_R ;
  logic mc_int_rd_req_valid_C ;
  logic mc_int_rd_req_valid_X ;
  logic [13:0] mc_int_rd_req_valid_S ;
  logic mc_int_rd_req_valid_d0;
  logic mc_int_rd_req_valid_d0_T ;
  logic mc_int_rd_req_valid_d0_R ;
  logic mc_int_rd_req_valid_d0_C ;
  logic mc_int_rd_req_valid_d0_X ;
  logic [13:0] mc_int_rd_req_valid_d0_S ;
  logic mc_rd_req_rdyi;
  logic mc_rd_req_rdyi_T ;
  logic mc_rd_req_rdyi_R ;
  logic mc_rd_req_rdyi_C ;
  logic mc_rd_req_rdyi_X ;
  logic [13:0] mc_rd_req_rdyi_S ;
  input nvdla_core_clk;
  input nvdla_core_clk_T ;
  input [13:0] nvdla_core_clk_S ;
  output nvdla_core_clk_R ;
  output nvdla_core_clk_X ;
  output nvdla_core_clk_C ;
  input nvdla_core_rstn;
  input nvdla_core_rstn_T ;
  input [13:0] nvdla_core_rstn_S ;
  output nvdla_core_rstn_R ;
  output nvdla_core_rstn_X ;
  output nvdla_core_rstn_C ;
  logic rd_req_rdyi;
  logic rd_req_rdyi_T ;
  logic rd_req_rdyi_R ;
  logic rd_req_rdyi_C ;
  logic rd_req_rdyi_X ;
  logic [13:0] rd_req_rdyi_S ;
  logic [54:0] reg2dp_addr;
  logic [54:0] reg2dp_addr_T ;
  logic [54:0] reg2dp_addr_R ;
  logic [54:0] reg2dp_addr_C ;
  logic [54:0] reg2dp_addr_X ;
  logic [13:0] reg2dp_addr_S ;
  input reg2dp_cmd_dst_ram_type;
  input reg2dp_cmd_dst_ram_type_T ;
  input [13:0] reg2dp_cmd_dst_ram_type_S ;
  output reg2dp_cmd_dst_ram_type_R ;
  output reg2dp_cmd_dst_ram_type_X ;
  output reg2dp_cmd_dst_ram_type_C ;
  input reg2dp_cmd_interrupt;
  input reg2dp_cmd_interrupt_T ;
  input [13:0] reg2dp_cmd_interrupt_S ;
  output reg2dp_cmd_interrupt_R ;
  output reg2dp_cmd_interrupt_X ;
  output reg2dp_cmd_interrupt_C ;
  input reg2dp_cmd_interrupt_ptr;
  input reg2dp_cmd_interrupt_ptr_T ;
  input [13:0] reg2dp_cmd_interrupt_ptr_S ;
  output reg2dp_cmd_interrupt_ptr_R ;
  output reg2dp_cmd_interrupt_ptr_X ;
  output reg2dp_cmd_interrupt_ptr_C ;
  input reg2dp_cmd_src_ram_type;
  input reg2dp_cmd_src_ram_type_T ;
  input [13:0] reg2dp_cmd_src_ram_type_S ;
  output reg2dp_cmd_src_ram_type_R ;
  output reg2dp_cmd_src_ram_type_X ;
  output reg2dp_cmd_src_ram_type_C ;
  logic [63:0] reg2dp_dst_addr;
  logic [63:0] reg2dp_dst_addr_T ;
  logic [63:0] reg2dp_dst_addr_R ;
  logic [63:0] reg2dp_dst_addr_C ;
  logic [63:0] reg2dp_dst_addr_X ;
  logic [13:0] reg2dp_dst_addr_S ;
  input [31:0] reg2dp_dst_addr_high_v8;
  input [31:0] reg2dp_dst_addr_high_v8_T ;
  input [13:0] reg2dp_dst_addr_high_v8_S ;
  output [31:0] reg2dp_dst_addr_high_v8_R ;
  output [31:0] reg2dp_dst_addr_high_v8_X ;
  output [31:0] reg2dp_dst_addr_high_v8_C ;
  input [26:0] reg2dp_dst_addr_low_v32;
  input [26:0] reg2dp_dst_addr_low_v32_T ;
  input [13:0] reg2dp_dst_addr_low_v32_S ;
  output [26:0] reg2dp_dst_addr_low_v32_R ;
  output [26:0] reg2dp_dst_addr_low_v32_X ;
  output [26:0] reg2dp_dst_addr_low_v32_C ;
  input [26:0] reg2dp_dst_line_stride;
  input [26:0] reg2dp_dst_line_stride_T ;
  input [13:0] reg2dp_dst_line_stride_S ;
  output [26:0] reg2dp_dst_line_stride_R ;
  output [26:0] reg2dp_dst_line_stride_X ;
  output [26:0] reg2dp_dst_line_stride_C ;
  input [26:0] reg2dp_dst_surf_stride;
  input [26:0] reg2dp_dst_surf_stride_T ;
  input [13:0] reg2dp_dst_surf_stride_S ;
  output [26:0] reg2dp_dst_surf_stride_R ;
  output [26:0] reg2dp_dst_surf_stride_X ;
  output [26:0] reg2dp_dst_surf_stride_C ;
  input [23:0] reg2dp_line_repeat_number;
  input [23:0] reg2dp_line_repeat_number_T ;
  input [13:0] reg2dp_line_repeat_number_S ;
  output [23:0] reg2dp_line_repeat_number_R ;
  output [23:0] reg2dp_line_repeat_number_X ;
  output [23:0] reg2dp_line_repeat_number_C ;
  input [12:0] reg2dp_line_size;
  input [12:0] reg2dp_line_size_T ;
  input [13:0] reg2dp_line_size_S ;
  output [12:0] reg2dp_line_size_R ;
  output [12:0] reg2dp_line_size_X ;
  output [12:0] reg2dp_line_size_C ;
  input [31:0] reg2dp_src_addr_high_v8;
  input [31:0] reg2dp_src_addr_high_v8_T ;
  input [13:0] reg2dp_src_addr_high_v8_S ;
  output [31:0] reg2dp_src_addr_high_v8_R ;
  output [31:0] reg2dp_src_addr_high_v8_X ;
  output [31:0] reg2dp_src_addr_high_v8_C ;
  input [26:0] reg2dp_src_addr_low_v32;
  input [26:0] reg2dp_src_addr_low_v32_T ;
  input [13:0] reg2dp_src_addr_low_v32_S ;
  output [26:0] reg2dp_src_addr_low_v32_R ;
  output [26:0] reg2dp_src_addr_low_v32_X ;
  output [26:0] reg2dp_src_addr_low_v32_C ;
  input [26:0] reg2dp_src_line_stride;
  input [26:0] reg2dp_src_line_stride_T ;
  input [13:0] reg2dp_src_line_stride_S ;
  output [26:0] reg2dp_src_line_stride_R ;
  output [26:0] reg2dp_src_line_stride_X ;
  output [26:0] reg2dp_src_line_stride_C ;
  logic [31:0] reg2dp_src_line_stride_ext;
  logic [31:0] reg2dp_src_line_stride_ext_T ;
  logic [31:0] reg2dp_src_line_stride_ext_R ;
  logic [31:0] reg2dp_src_line_stride_ext_C ;
  logic [31:0] reg2dp_src_line_stride_ext_X ;
  logic [13:0] reg2dp_src_line_stride_ext_S ;
  input [26:0] reg2dp_src_surf_stride;
  input [26:0] reg2dp_src_surf_stride_T ;
  input [13:0] reg2dp_src_surf_stride_S ;
  output [26:0] reg2dp_src_surf_stride_R ;
  output [26:0] reg2dp_src_surf_stride_X ;
  output [26:0] reg2dp_src_surf_stride_C ;
  logic [31:0] reg2dp_src_surf_stride_ext;
  logic [31:0] reg2dp_src_surf_stride_ext_T ;
  logic [31:0] reg2dp_src_surf_stride_ext_R ;
  logic [31:0] reg2dp_src_surf_stride_ext_C ;
  logic [31:0] reg2dp_src_surf_stride_ext_X ;
  logic [13:0] reg2dp_src_surf_stride_ext_S ;
  input [23:0] reg2dp_surf_repeat_number;
  input [23:0] reg2dp_surf_repeat_number_T ;
  input [13:0] reg2dp_surf_repeat_number_S ;
  output [23:0] reg2dp_surf_repeat_number_R ;
  output [23:0] reg2dp_surf_repeat_number_X ;
  output [23:0] reg2dp_surf_repeat_number_C ;
  logic reg_cmd_src_ram_type;
  logic  reg_cmd_src_ram_type_T ;
  logic  reg_cmd_src_ram_type_PREV_VAL1 ;
  logic  reg_cmd_src_ram_type_PREV_VAL2 ;
  logic  reg_cmd_src_ram_type_R ;
  logic  reg_cmd_src_ram_type_X ;
  logic  reg_cmd_src_ram_type_C ;
  logic [13:0] reg_cmd_src_ram_type_S ;
  logic reg_cmd_src_ram_type_t_flag ;
  logic reg_cmd_src_ram_type_r_flag ;
  assign reg_cmd_src_ram_type_S = 868 ;
  logic [23:0] reg_line_repeat_number;
  logic [23:0]  reg_line_repeat_number_T ;
  logic [23:0]  reg_line_repeat_number_PREV_VAL1 ;
  logic [23:0]  reg_line_repeat_number_PREV_VAL2 ;
  logic [23:0]  reg_line_repeat_number_R ;
  logic [23:0]  reg_line_repeat_number_X ;
  logic [23:0]  reg_line_repeat_number_C ;
  logic [13:0] reg_line_repeat_number_S ;
  logic reg_line_repeat_number_t_flag ;
  logic reg_line_repeat_number_r_flag ;
  assign reg_line_repeat_number_S = 869 ;
  logic [12:0] reg_line_size;
  logic [12:0]  reg_line_size_T ;
  logic [12:0]  reg_line_size_PREV_VAL1 ;
  logic [12:0]  reg_line_size_PREV_VAL2 ;
  logic [12:0]  reg_line_size_R ;
  logic [12:0]  reg_line_size_X ;
  logic [12:0]  reg_line_size_C ;
  logic [13:0] reg_line_size_S ;
  logic reg_line_size_t_flag ;
  logic reg_line_size_r_flag ;
  assign reg_line_size_S = 870 ;
  logic [31:0] reg_line_stride;
  logic [31:0]  reg_line_stride_T ;
  logic [31:0]  reg_line_stride_PREV_VAL1 ;
  logic [31:0]  reg_line_stride_PREV_VAL2 ;
  logic [31:0]  reg_line_stride_R ;
  logic [31:0]  reg_line_stride_X ;
  logic [31:0]  reg_line_stride_C ;
  logic [13:0] reg_line_stride_S ;
  logic reg_line_stride_t_flag ;
  logic reg_line_stride_r_flag ;
  assign reg_line_stride_S = 871 ;
  logic [23:0] reg_surf_repeat_number;
  logic [23:0]  reg_surf_repeat_number_T ;
  logic [23:0]  reg_surf_repeat_number_PREV_VAL1 ;
  logic [23:0]  reg_surf_repeat_number_PREV_VAL2 ;
  logic [23:0]  reg_surf_repeat_number_R ;
  logic [23:0]  reg_surf_repeat_number_X ;
  logic [23:0]  reg_surf_repeat_number_C ;
  logic [13:0] reg_surf_repeat_number_S ;
  logic reg_surf_repeat_number_t_flag ;
  logic reg_surf_repeat_number_r_flag ;
  assign reg_surf_repeat_number_S = 872 ;
  logic [31:0] reg_surf_stride;
  logic [31:0]  reg_surf_stride_T ;
  logic [31:0]  reg_surf_stride_PREV_VAL1 ;
  logic [31:0]  reg_surf_stride_PREV_VAL2 ;
  logic [31:0]  reg_surf_stride_R ;
  logic [31:0]  reg_surf_stride_X ;
  logic [31:0]  reg_surf_stride_C ;
  logic [13:0] reg_surf_stride_S ;
  logic reg_surf_stride_t_flag ;
  logic reg_surf_stride_r_flag ;
  assign reg_surf_stride_S = 873 ;
  input st2ld_load_idle;
  input st2ld_load_idle_T ;
  input [13:0] st2ld_load_idle_S ;
  output st2ld_load_idle_R ;
  output st2ld_load_idle_X ;
  output st2ld_load_idle_C ;
  logic [63:0] surf_addr;
  logic [63:0]  surf_addr_T ;
  logic [63:0]  surf_addr_PREV_VAL1 ;
  logic [63:0]  surf_addr_PREV_VAL2 ;
  logic [63:0]  surf_addr_R ;
  logic [63:0]  surf_addr_X ;
  logic [63:0]  surf_addr_C ;
  logic [13:0] surf_addr_S ;
  logic surf_addr_t_flag ;
  logic surf_addr_r_flag ;
  assign surf_addr_S = 874 ;
  logic [23:0] surf_count;
  logic [23:0]  surf_count_T ;
  logic [23:0]  surf_count_PREV_VAL1 ;
  logic [23:0]  surf_count_PREV_VAL2 ;
  logic [23:0]  surf_count_R ;
  logic [23:0]  surf_count_X ;
  logic [23:0]  surf_count_C ;
  logic [13:0] surf_count_S ;
  logic surf_count_t_flag ;
  logic surf_count_r_flag ;
  assign surf_count_S = 875 ;
  logic tran_accept;
  logic tran_accept_T ;
  logic tran_accept_R ;
  logic tran_accept_C ;
  logic tran_accept_X ;
  logic [13:0] tran_accept_S ;
  logic [63:0] tran_addr;
  logic [63:0] tran_addr_T ;
  logic [63:0] tran_addr_R ;
  logic [63:0] tran_addr_C ;
  logic [63:0] tran_addr_X ;
  logic [13:0] tran_addr_S ;
  logic tran_ready;
  logic tran_ready_T ;
  logic tran_ready_R ;
  logic tran_ready_C ;
  logic tran_ready_X ;
  logic [13:0] tran_ready_S ;
  logic [14:0] tran_size;
  logic [14:0] tran_size_T ;
  logic [14:0] tran_size_R ;
  logic [14:0] tran_size_C ;
  logic [14:0] tran_size_X ;
  logic [13:0] tran_size_S ;
  logic tran_valid;
  logic  tran_valid_T ;
  logic  tran_valid_PREV_VAL1 ;
  logic  tran_valid_PREV_VAL2 ;
  logic  tran_valid_R ;
  logic  tran_valid_X ;
  logic  tran_valid_C ;
  logic [13:0] tran_valid_S ;
  logic tran_valid_t_flag ;
  logic tran_valid_r_flag ;
  assign tran_valid_S = 876 ;
  assign _012_ = surf_addr + reg_surf_stride;
  assign _012__S = 0 ;
  logic [63:0] surf_addr_C0 ;
  logic [63:0] surf_addr_R0 ;
  logic [63:0] surf_addr_X0 ;
  logic [31:0] reg_surf_stride_C0 ;
  logic [31:0] reg_surf_stride_R0 ;
  logic [31:0] reg_surf_stride_X0 ;
  assign _012__T = surf_addr_T | reg_surf_stride_T ;
  assign surf_addr_C0 = _012__C ;
  assign surf_addr_X0 = _012__X ;
  assign reg_surf_stride_C0 = _012__C ;
  assign reg_surf_stride_X0 = _012__X ;
  assign surf_addr_R0 = _012__R | ( _012__C & reg_surf_stride_T );
  assign reg_surf_stride_R0 = _012__R | ( _012__C & surf_addr_T );
  assign _013_ = line_addr + reg_line_stride;
  assign _013__S = 0 ;
  logic [63:0] line_addr_C0 ;
  logic [63:0] line_addr_R0 ;
  logic [63:0] line_addr_X0 ;
  logic [31:0] reg_line_stride_C0 ;
  logic [31:0] reg_line_stride_R0 ;
  logic [31:0] reg_line_stride_X0 ;
  assign _013__T = line_addr_T | reg_line_stride_T ;
  assign line_addr_C0 = _013__C ;
  assign line_addr_X0 = _013__X ;
  assign reg_line_stride_C0 = _013__C ;
  assign reg_line_stride_X0 = _013__X ;
  assign line_addr_R0 = _013__R | ( _013__C & reg_line_stride_T );
  assign reg_line_stride_R0 = _013__R | ( _013__C & line_addr_T );
  assign _014_ = line_count + 1'b1;
  assign _014__S = 0 ;
  logic [23:0] line_count_C0 ;
  logic [23:0] line_count_R0 ;
  logic [23:0] line_count_X0 ;
  assign _014__T = line_count_T ;
  assign line_count_C0 = _014__C ;
  assign line_count_R0 = _014__R ;
  assign line_count_X0 = _014__X ;
  assign _015_ = surf_count + 1'b1;
  assign _015__S = 0 ;
  logic [23:0] surf_count_C0 ;
  logic [23:0] surf_count_R0 ;
  logic [23:0] surf_count_X0 ;
  assign _015__T = surf_count_T ;
  assign surf_count_C0 = _015__C ;
  assign surf_count_R0 = _015__R ;
  assign surf_count_X0 = _015__X ;
  assign _016_ = ld2st_wr_prdy & cmd_ready;
  assign _016__S = 0 ;
  logic [0:0] ld2st_wr_prdy_C0 ;
  logic [0:0] ld2st_wr_prdy_R0 ;
  logic [0:0] ld2st_wr_prdy_X0 ;
  logic [0:0] cmd_ready_C0 ;
  logic [0:0] cmd_ready_R0 ;
  logic [0:0] cmd_ready_X0 ;
  assign _016__T = ld2st_wr_prdy_T | cmd_ready_T ;
  assign ld2st_wr_prdy_C0 = _016__C ;
  assign ld2st_wr_prdy_X0 = _016__X ;
  assign cmd_ready_C0 = _016__C ;
  assign cmd_ready_X0 = _016__X ;
  assign ld2st_wr_prdy_R0 = ( _016__R | _016__C & cmd_ready_T ) & { 1{ cmd_ready != 0 }} ;
  assign cmd_ready_R0 = ( _016__R | _016__C & ld2st_wr_prdy_T ) & { 1{ ld2st_wr_prdy != 0 }} ;
  assign csb2ld_rdy = _016_ & load_cmd_en;
  assign csb2ld_rdy_S = 0 ;
  logic [0:0] _016__C0 ;
  logic [0:0] _016__R0 ;
  logic [0:0] _016__X0 ;
  logic [0:0] load_cmd_en_C0 ;
  logic [0:0] load_cmd_en_R0 ;
  logic [0:0] load_cmd_en_X0 ;
  assign csb2ld_rdy_T = _016__T | load_cmd_en_T ;
  assign _016__C0 = csb2ld_rdy_C ;
  assign _016__X0 = csb2ld_rdy_X ;
  assign load_cmd_en_C0 = csb2ld_rdy_C ;
  assign load_cmd_en_X0 = csb2ld_rdy_X ;
  assign _016__R0 = ( csb2ld_rdy_R | csb2ld_rdy_C & load_cmd_en_T ) & { 1{ load_cmd_en != 0 }} ;
  assign load_cmd_en_R0 = ( csb2ld_rdy_R | csb2ld_rdy_C & _016__T ) & { 1{ _016_ != 0 }} ;
  assign _017_ = csb2ld_vld & cmd_ready;
  assign _017__S = 0 ;
  logic [0:0] csb2ld_vld_C0 ;
  logic [0:0] csb2ld_vld_R0 ;
  logic [0:0] csb2ld_vld_X0 ;
  logic [0:0] cmd_ready_C1 ;
  logic [0:0] cmd_ready_R1 ;
  logic [0:0] cmd_ready_X1 ;
  assign _017__T = csb2ld_vld_T | cmd_ready_T ;
  assign csb2ld_vld_C0 = _017__C ;
  assign csb2ld_vld_X0 = _017__X ;
  assign cmd_ready_C1 = _017__C ;
  assign cmd_ready_X1 = _017__X ;
  assign csb2ld_vld_R0 = ( _017__R | _017__C & cmd_ready_T ) & { 1{ cmd_ready != 0 }} ;
  assign cmd_ready_R1 = ( _017__R | _017__C & csb2ld_vld_T ) & { 1{ csb2ld_vld != 0 }} ;
  assign ld2st_wr_pvld = _017_ & load_cmd_en;
  assign ld2st_wr_pvld_S = 0 ;
  logic [0:0] _017__C0 ;
  logic [0:0] _017__R0 ;
  logic [0:0] _017__X0 ;
  logic [0:0] load_cmd_en_C1 ;
  logic [0:0] load_cmd_en_R1 ;
  logic [0:0] load_cmd_en_X1 ;
  assign ld2st_wr_pvld_T = _017__T | load_cmd_en_T ;
  assign _017__C0 = ld2st_wr_pvld_C ;
  assign _017__X0 = ld2st_wr_pvld_X ;
  assign load_cmd_en_C1 = ld2st_wr_pvld_C ;
  assign load_cmd_en_X1 = ld2st_wr_pvld_X ;
  assign _017__R0 = ( ld2st_wr_pvld_R | ld2st_wr_pvld_C & load_cmd_en_T ) & { 1{ load_cmd_en != 0 }} ;
  assign load_cmd_en_R1 = ( ld2st_wr_pvld_R | ld2st_wr_pvld_C & _017__T ) & { 1{ _017_ != 0 }} ;
  assign _018_ = csb2ld_vld & ld2st_wr_prdy;
  assign _018__S = 0 ;
  logic [0:0] csb2ld_vld_C1 ;
  logic [0:0] csb2ld_vld_R1 ;
  logic [0:0] csb2ld_vld_X1 ;
  logic [0:0] ld2st_wr_prdy_C1 ;
  logic [0:0] ld2st_wr_prdy_R1 ;
  logic [0:0] ld2st_wr_prdy_X1 ;
  assign _018__T = csb2ld_vld_T | ld2st_wr_prdy_T ;
  assign csb2ld_vld_C1 = _018__C ;
  assign csb2ld_vld_X1 = _018__X ;
  assign ld2st_wr_prdy_C1 = _018__C ;
  assign ld2st_wr_prdy_X1 = _018__X ;
  assign csb2ld_vld_R1 = ( _018__R | _018__C & ld2st_wr_prdy_T ) & { 1{ ld2st_wr_prdy != 0 }} ;
  assign ld2st_wr_prdy_R1 = ( _018__R | _018__C & csb2ld_vld_T ) & { 1{ csb2ld_vld != 0 }} ;
  assign cmd_valid = _018_ & load_cmd_en;
  assign cmd_valid_S = 0 ;
  logic [0:0] _018__C0 ;
  logic [0:0] _018__R0 ;
  logic [0:0] _018__X0 ;
  logic [0:0] load_cmd_en_C2 ;
  logic [0:0] load_cmd_en_R2 ;
  logic [0:0] load_cmd_en_X2 ;
  assign cmd_valid_T = _018__T | load_cmd_en_T ;
  assign _018__C0 = cmd_valid_C ;
  assign _018__X0 = cmd_valid_X ;
  assign load_cmd_en_C2 = cmd_valid_C ;
  assign load_cmd_en_X2 = cmd_valid_X ;
  assign _018__R0 = ( cmd_valid_R | cmd_valid_C & load_cmd_en_T ) & { 1{ load_cmd_en != 0 }} ;
  assign load_cmd_en_R2 = ( cmd_valid_R | cmd_valid_C & _018__T ) & { 1{ _018_ != 0 }} ;
  assign _019_ = tran_accept & is_cube_end;
  assign _019__S = 0 ;
  logic [0:0] tran_accept_C0 ;
  logic [0:0] tran_accept_R0 ;
  logic [0:0] tran_accept_X0 ;
  logic [0:0] is_cube_end_C0 ;
  logic [0:0] is_cube_end_R0 ;
  logic [0:0] is_cube_end_X0 ;
  assign _019__T = tran_accept_T | is_cube_end_T ;
  assign tran_accept_C0 = _019__C ;
  assign tran_accept_X0 = _019__X ;
  assign is_cube_end_C0 = _019__C ;
  assign is_cube_end_X0 = _019__X ;
  assign tran_accept_R0 = ( _019__R | _019__C & is_cube_end_T ) & { 1{ is_cube_end != 0 }} ;
  assign is_cube_end_R0 = ( _019__R | _019__C & tran_accept_T ) & { 1{ tran_accept != 0 }} ;
  assign tran_accept = tran_valid & dma_rd_req_rdy;
  assign tran_accept_S = 0 ;
  logic [0:0] tran_valid_C0 ;
  logic [0:0] tran_valid_R0 ;
  logic [0:0] tran_valid_X0 ;
  logic [0:0] dma_rd_req_rdy_C0 ;
  logic [0:0] dma_rd_req_rdy_R0 ;
  logic [0:0] dma_rd_req_rdy_X0 ;
  assign tran_accept_T = tran_valid_T | dma_rd_req_rdy_T ;
  assign tran_valid_C0 = tran_accept_C ;
  assign tran_valid_X0 = tran_accept_X ;
  assign dma_rd_req_rdy_C0 = tran_accept_C ;
  assign dma_rd_req_rdy_X0 = tran_accept_X ;
  assign tran_valid_R0 = ( tran_accept_R | tran_accept_C & dma_rd_req_rdy_T ) & { 1{ dma_rd_req_rdy != 0 }} ;
  assign dma_rd_req_rdy_R0 = ( tran_accept_R | tran_accept_C & tran_valid_T ) & { 1{ tran_valid != 0 }} ;
  assign load_cmd = cmd_valid & cmd_ready;
  assign load_cmd_S = 0 ;
  logic [0:0] cmd_valid_C0 ;
  logic [0:0] cmd_valid_R0 ;
  logic [0:0] cmd_valid_X0 ;
  logic [0:0] cmd_ready_C2 ;
  logic [0:0] cmd_ready_R2 ;
  logic [0:0] cmd_ready_X2 ;
  assign load_cmd_T = cmd_valid_T | cmd_ready_T ;
  assign cmd_valid_C0 = load_cmd_C ;
  assign cmd_valid_X0 = load_cmd_X ;
  assign cmd_ready_C2 = load_cmd_C ;
  assign cmd_ready_X2 = load_cmd_X ;
  assign cmd_valid_R0 = ( load_cmd_R | load_cmd_C & cmd_ready_T ) & { 1{ cmd_ready != 0 }} ;
  assign cmd_ready_R2 = ( load_cmd_R | load_cmd_C & cmd_valid_T ) & { 1{ cmd_valid != 0 }} ;
  assign _020_ = ld_idle & st2ld_load_idle;
  assign _020__S = 0 ;
  logic [0:0] ld_idle_C0 ;
  logic [0:0] ld_idle_R0 ;
  logic [0:0] ld_idle_X0 ;
  logic [0:0] st2ld_load_idle_C0 ;
  logic [0:0] st2ld_load_idle_R0 ;
  logic [0:0] st2ld_load_idle_X0 ;
  assign _020__T = ld_idle_T | st2ld_load_idle_T ;
  assign ld_idle_C0 = _020__C ;
  assign ld_idle_X0 = _020__X ;
  assign st2ld_load_idle_C0 = _020__C ;
  assign st2ld_load_idle_X0 = _020__X ;
  assign ld_idle_R0 = ( _020__R | _020__C & st2ld_load_idle_T ) & { 1{ st2ld_load_idle != 0 }} ;
  assign st2ld_load_idle_R0 = ( _020__R | _020__C & ld_idle_T ) & { 1{ ld_idle != 0 }} ;
  assign load_cmd_en = csb2ld_vld & _027_;
  assign load_cmd_en_S = 0 ;
  logic [0:0] csb2ld_vld_C2 ;
  logic [0:0] csb2ld_vld_R2 ;
  logic [0:0] csb2ld_vld_X2 ;
  logic [0:0] _027__C0 ;
  logic [0:0] _027__R0 ;
  logic [0:0] _027__X0 ;
  assign load_cmd_en_T = csb2ld_vld_T | _027__T ;
  assign csb2ld_vld_C2 = load_cmd_en_C ;
  assign csb2ld_vld_X2 = load_cmd_en_X ;
  assign _027__C0 = load_cmd_en_C ;
  assign _027__X0 = load_cmd_en_X ;
  assign csb2ld_vld_R2 = ( load_cmd_en_R | load_cmd_en_C & _027__T ) & { 1{ _027_ != 0 }} ;
  assign _027__R0 = ( load_cmd_en_R | load_cmd_en_C & csb2ld_vld_T ) & { 1{ csb2ld_vld != 0 }} ;
  assign ld_idle = ld2st_wr_idle & _024_;
  assign ld_idle_S = 0 ;
  logic [0:0] ld2st_wr_idle_C0 ;
  logic [0:0] ld2st_wr_idle_R0 ;
  logic [0:0] ld2st_wr_idle_X0 ;
  logic [0:0] _024__C0 ;
  logic [0:0] _024__R0 ;
  logic [0:0] _024__X0 ;
  assign ld_idle_T = ld2st_wr_idle_T | _024__T ;
  assign ld2st_wr_idle_C0 = ld_idle_C ;
  assign ld2st_wr_idle_X0 = ld_idle_X ;
  assign _024__C0 = ld_idle_C ;
  assign _024__X0 = ld_idle_X ;
  assign ld2st_wr_idle_R0 = ( ld_idle_R | ld_idle_C & _024__T ) & { 1{ _024_ != 0 }} ;
  assign _024__R0 = ( ld_idle_R | ld_idle_C & ld2st_wr_idle_T ) & { 1{ ld2st_wr_idle != 0 }} ;
  assign is_cube_end = is_surf_end & _021_;
  assign is_cube_end_S = 0 ;
  logic [0:0] is_surf_end_C0 ;
  logic [0:0] is_surf_end_R0 ;
  logic [0:0] is_surf_end_X0 ;
  logic [0:0] _021__C0 ;
  logic [0:0] _021__R0 ;
  logic [0:0] _021__X0 ;
  assign is_cube_end_T = is_surf_end_T | _021__T ;
  assign is_surf_end_C0 = is_cube_end_C ;
  assign is_surf_end_X0 = is_cube_end_X ;
  assign _021__C0 = is_cube_end_C ;
  assign _021__X0 = is_cube_end_X ;
  assign is_surf_end_R0 = ( is_cube_end_R | is_cube_end_C & _021__T ) & { 1{ _021_ != 0 }} ;
  assign _021__R0 = ( is_cube_end_R | is_cube_end_C & is_surf_end_T ) & { 1{ is_surf_end != 0 }} ;
  assign cv_dma_rd_req_vld = tran_valid & _022_;
  assign cv_dma_rd_req_vld_S = 0 ;
  logic [0:0] tran_valid_C1 ;
  logic [0:0] tran_valid_R1 ;
  logic [0:0] tran_valid_X1 ;
  logic [0:0] _022__C0 ;
  logic [0:0] _022__R0 ;
  logic [0:0] _022__X0 ;
  assign cv_dma_rd_req_vld_T = tran_valid_T | _022__T ;
  assign tran_valid_C1 = cv_dma_rd_req_vld_C ;
  assign tran_valid_X1 = cv_dma_rd_req_vld_X ;
  assign _022__C0 = cv_dma_rd_req_vld_C ;
  assign _022__X0 = cv_dma_rd_req_vld_X ;
  assign tran_valid_R1 = ( cv_dma_rd_req_vld_R | cv_dma_rd_req_vld_C & _022__T ) & { 1{ _022_ != 0 }} ;
  assign _022__R0 = ( cv_dma_rd_req_vld_R | cv_dma_rd_req_vld_C & tran_valid_T ) & { 1{ tran_valid != 0 }} ;
  assign mc_dma_rd_req_vld = tran_valid & reg_cmd_src_ram_type;
  assign mc_dma_rd_req_vld_S = 0 ;
  logic [0:0] tran_valid_C2 ;
  logic [0:0] tran_valid_R2 ;
  logic [0:0] tran_valid_X2 ;
  logic [0:0] reg_cmd_src_ram_type_C0 ;
  logic [0:0] reg_cmd_src_ram_type_R0 ;
  logic [0:0] reg_cmd_src_ram_type_X0 ;
  assign mc_dma_rd_req_vld_T = tran_valid_T | reg_cmd_src_ram_type_T ;
  assign tran_valid_C2 = mc_dma_rd_req_vld_C ;
  assign tran_valid_X2 = mc_dma_rd_req_vld_X ;
  assign reg_cmd_src_ram_type_C0 = mc_dma_rd_req_vld_C ;
  assign reg_cmd_src_ram_type_X0 = mc_dma_rd_req_vld_X ;
  assign tran_valid_R2 = ( mc_dma_rd_req_vld_R | mc_dma_rd_req_vld_C & reg_cmd_src_ram_type_T ) & { 1{ reg_cmd_src_ram_type != 0 }} ;
  assign reg_cmd_src_ram_type_R0 = ( mc_dma_rd_req_vld_R | mc_dma_rd_req_vld_C & tran_valid_T ) & { 1{ tran_valid != 0 }} ;
  assign cv_rd_req_rdyi = cv_dma_rd_req_rdy & _022_;
  assign cv_rd_req_rdyi_S = 0 ;
  logic [0:0] cv_dma_rd_req_rdy_C0 ;
  logic [0:0] cv_dma_rd_req_rdy_R0 ;
  logic [0:0] cv_dma_rd_req_rdy_X0 ;
  logic [0:0] _022__C1 ;
  logic [0:0] _022__R1 ;
  logic [0:0] _022__X1 ;
  assign cv_rd_req_rdyi_T = cv_dma_rd_req_rdy_T | _022__T ;
  assign cv_dma_rd_req_rdy_C0 = cv_rd_req_rdyi_C ;
  assign cv_dma_rd_req_rdy_X0 = cv_rd_req_rdyi_X ;
  assign _022__C1 = cv_rd_req_rdyi_C ;
  assign _022__X1 = cv_rd_req_rdyi_X ;
  assign cv_dma_rd_req_rdy_R0 = ( cv_rd_req_rdyi_R | cv_rd_req_rdyi_C & _022__T ) & { 1{ _022_ != 0 }} ;
  assign _022__R1 = ( cv_rd_req_rdyi_R | cv_rd_req_rdyi_C & cv_dma_rd_req_rdy_T ) & { 1{ cv_dma_rd_req_rdy != 0 }} ;
  assign mc_rd_req_rdyi = mc_dma_rd_req_rdy & reg_cmd_src_ram_type;
  assign mc_rd_req_rdyi_S = 0 ;
  logic [0:0] mc_dma_rd_req_rdy_C0 ;
  logic [0:0] mc_dma_rd_req_rdy_R0 ;
  logic [0:0] mc_dma_rd_req_rdy_X0 ;
  logic [0:0] reg_cmd_src_ram_type_C1 ;
  logic [0:0] reg_cmd_src_ram_type_R1 ;
  logic [0:0] reg_cmd_src_ram_type_X1 ;
  assign mc_rd_req_rdyi_T = mc_dma_rd_req_rdy_T | reg_cmd_src_ram_type_T ;
  assign mc_dma_rd_req_rdy_C0 = mc_rd_req_rdyi_C ;
  assign mc_dma_rd_req_rdy_X0 = mc_rd_req_rdyi_X ;
  assign reg_cmd_src_ram_type_C1 = mc_rd_req_rdyi_C ;
  assign reg_cmd_src_ram_type_X1 = mc_rd_req_rdyi_X ;
  assign mc_dma_rd_req_rdy_R0 = ( mc_rd_req_rdyi_R | mc_rd_req_rdyi_C & reg_cmd_src_ram_type_T ) & { 1{ reg_cmd_src_ram_type != 0 }} ;
  assign reg_cmd_src_ram_type_R1 = ( mc_rd_req_rdyi_R | mc_rd_req_rdyi_C & mc_dma_rd_req_rdy_T ) & { 1{ mc_dma_rd_req_rdy != 0 }} ;
  assign dma_stall_inc = tran_valid & _026_;
  assign dma_stall_inc_S = 0 ;
  logic [0:0] tran_valid_C3 ;
  logic [0:0] tran_valid_R3 ;
  logic [0:0] tran_valid_X3 ;
  logic [0:0] _026__C0 ;
  logic [0:0] _026__R0 ;
  logic [0:0] _026__X0 ;
  assign dma_stall_inc_T = tran_valid_T | _026__T ;
  assign tran_valid_C3 = dma_stall_inc_C ;
  assign tran_valid_X3 = dma_stall_inc_X ;
  assign _026__C0 = dma_stall_inc_C ;
  assign _026__X0 = dma_stall_inc_X ;
  assign tran_valid_R3 = ( dma_stall_inc_R | dma_stall_inc_C & _026__T ) & { 1{ _026_ != 0 }} ;
  assign _026__R0 = ( dma_stall_inc_R | dma_stall_inc_C & tran_valid_T ) & { 1{ tran_valid != 0 }} ;
  assign ld2csb_grp0_dma_stall_inc = dma_stall_inc & _023_;
  assign ld2csb_grp0_dma_stall_inc_S = 0 ;
  logic [0:0] dma_stall_inc_C0 ;
  logic [0:0] dma_stall_inc_R0 ;
  logic [0:0] dma_stall_inc_X0 ;
  logic [0:0] _023__C0 ;
  logic [0:0] _023__R0 ;
  logic [0:0] _023__X0 ;
  assign ld2csb_grp0_dma_stall_inc_T = dma_stall_inc_T | _023__T ;
  assign dma_stall_inc_C0 = ld2csb_grp0_dma_stall_inc_C ;
  assign dma_stall_inc_X0 = ld2csb_grp0_dma_stall_inc_X ;
  assign _023__C0 = ld2csb_grp0_dma_stall_inc_C ;
  assign _023__X0 = ld2csb_grp0_dma_stall_inc_X ;
  assign dma_stall_inc_R0 = ( ld2csb_grp0_dma_stall_inc_R | ld2csb_grp0_dma_stall_inc_C & _023__T ) & { 1{ _023_ != 0 }} ;
  assign _023__R0 = ( ld2csb_grp0_dma_stall_inc_R | ld2csb_grp0_dma_stall_inc_C & dma_stall_inc_T ) & { 1{ dma_stall_inc != 0 }} ;
  assign ld2csb_grp1_dma_stall_inc = dma_stall_inc & reg2dp_cmd_interrupt_ptr;
  assign ld2csb_grp1_dma_stall_inc_S = 0 ;
  logic [0:0] dma_stall_inc_C1 ;
  logic [0:0] dma_stall_inc_R1 ;
  logic [0:0] dma_stall_inc_X1 ;
  logic [0:0] reg2dp_cmd_interrupt_ptr_C0 ;
  logic [0:0] reg2dp_cmd_interrupt_ptr_R0 ;
  logic [0:0] reg2dp_cmd_interrupt_ptr_X0 ;
  assign ld2csb_grp1_dma_stall_inc_T = dma_stall_inc_T | reg2dp_cmd_interrupt_ptr_T ;
  assign dma_stall_inc_C1 = ld2csb_grp1_dma_stall_inc_C ;
  assign dma_stall_inc_X1 = ld2csb_grp1_dma_stall_inc_X ;
  assign reg2dp_cmd_interrupt_ptr_C0 = ld2csb_grp1_dma_stall_inc_C ;
  assign reg2dp_cmd_interrupt_ptr_X0 = ld2csb_grp1_dma_stall_inc_X ;
  assign dma_stall_inc_R1 = ( ld2csb_grp1_dma_stall_inc_R | ld2csb_grp1_dma_stall_inc_C & reg2dp_cmd_interrupt_ptr_T ) & { 1{ reg2dp_cmd_interrupt_ptr != 0 }} ;
  assign reg2dp_cmd_interrupt_ptr_R0 = ( ld2csb_grp1_dma_stall_inc_R | ld2csb_grp1_dma_stall_inc_C & dma_stall_inc_T ) & { 1{ dma_stall_inc != 0 }} ;
  assign is_surf_end = line_count == reg_line_repeat_number;
  assign is_surf_end_S = 0 ;
  logic [23:0] line_count_C1 ;
  logic [23:0] line_count_R1 ;
  logic [23:0] line_count_X1 ;
  logic [23:0] reg_line_repeat_number_C0 ;
  logic [23:0] reg_line_repeat_number_R0 ;
  logic [23:0] reg_line_repeat_number_X0 ;
  assign is_surf_end_T = (| line_count_T ) | (|reg_line_repeat_number_T ) ;
  assign line_count_C1 = { 24{ is_surf_end_C }} ;
  assign line_count_R1 = { 24{ is_surf_end_R }} | ( { 24{ is_surf_end_C }} & reg_line_repeat_number_T );
  assign line_count_X1 = { 24{ is_surf_end_X }} ;
  assign reg_line_repeat_number_C0 = { 24{ is_surf_end_C }} ;
  assign reg_line_repeat_number_R0 = { 24{ is_surf_end_R }} | ( { 24{ is_surf_end_C }} & line_count_T );
  assign reg_line_repeat_number_X0 = { 24{ is_surf_end_X }} ;
  assign _021_ = surf_count == reg_surf_repeat_number;
  assign _021__S = 0 ;
  logic [23:0] surf_count_C1 ;
  logic [23:0] surf_count_R1 ;
  logic [23:0] surf_count_X1 ;
  logic [23:0] reg_surf_repeat_number_C0 ;
  logic [23:0] reg_surf_repeat_number_R0 ;
  logic [23:0] reg_surf_repeat_number_X0 ;
  assign _021__T = (| surf_count_T ) | (|reg_surf_repeat_number_T ) ;
  assign surf_count_C1 = { 24{ _021__C }} ;
  assign surf_count_R1 = { 24{ _021__R }} | ( { 24{ _021__C }} & reg_surf_repeat_number_T );
  assign surf_count_X1 = { 24{ _021__X }} ;
  assign reg_surf_repeat_number_C0 = { 24{ _021__C }} ;
  assign reg_surf_repeat_number_R0 = { 24{ _021__R }} | ( { 24{ _021__C }} & surf_count_T );
  assign reg_surf_repeat_number_X0 = { 24{ _021__X }} ;
  assign _022_ = ~ reg_cmd_src_ram_type;
  logic [0:0] reg_cmd_src_ram_type_C2 ;
  logic [0:0] reg_cmd_src_ram_type_R2 ;
  logic [0:0] reg_cmd_src_ram_type_X2 ;
  assign _022__T = reg_cmd_src_ram_type_T ;
  assign reg_cmd_src_ram_type_C2 = _022__C ;
  assign reg_cmd_src_ram_type_R2 = _022__R ;
  assign reg_cmd_src_ram_type_X2 = _022__X ;
  assign _022__S = 0 ;
  assign _023_ = ~ reg2dp_cmd_interrupt_ptr;
  logic [0:0] reg2dp_cmd_interrupt_ptr_C1 ;
  logic [0:0] reg2dp_cmd_interrupt_ptr_R1 ;
  logic [0:0] reg2dp_cmd_interrupt_ptr_X1 ;
  assign _023__T = reg2dp_cmd_interrupt_ptr_T ;
  assign reg2dp_cmd_interrupt_ptr_C1 = _023__C ;
  assign reg2dp_cmd_interrupt_ptr_R1 = _023__R ;
  assign reg2dp_cmd_interrupt_ptr_X1 = _023__X ;
  assign _023__S = 0 ;
  assign _024_ = ! tran_valid;
  logic [0:0] tran_valid_C4 ;
  logic [0:0] tran_valid_R4 ;
  logic [0:0] tran_valid_X4 ;
  assign _024__T = | tran_valid_T ;
  assign tran_valid_C4 = { 1{ _024__C }} ;
  assign tran_valid_X4 = { 1{ _024__X }} ;
  assign tran_valid_R4 = { 1{ _024__R }} ;
  assign _024__S = 0 ;
  assign _025_ = ! is_src_ram_type_switching;
  logic [0:0] is_src_ram_type_switching_C0 ;
  logic [0:0] is_src_ram_type_switching_R0 ;
  logic [0:0] is_src_ram_type_switching_X0 ;
  assign _025__T = | is_src_ram_type_switching_T ;
  assign is_src_ram_type_switching_C0 = { 1{ _025__C }} ;
  assign is_src_ram_type_switching_X0 = { 1{ _025__X }} ;
  assign is_src_ram_type_switching_R0 = { 1{ _025__R }} ;
  assign _025__S = 0 ;
  assign _000_ = ! ld_idle;
  logic [0:0] ld_idle_C1 ;
  logic [0:0] ld_idle_R1 ;
  logic [0:0] ld_idle_X1 ;
  assign _000__T = | ld_idle_T ;
  assign ld_idle_C1 = { 1{ _000__C }} ;
  assign ld_idle_X1 = { 1{ _000__X }} ;
  assign ld_idle_R1 = { 1{ _000__R }} ;
  assign _000__S = 0 ;
  assign _026_ = ! dma_rd_req_rdy;
  logic [0:0] dma_rd_req_rdy_C1 ;
  logic [0:0] dma_rd_req_rdy_R1 ;
  logic [0:0] dma_rd_req_rdy_X1 ;
  assign _026__T = | dma_rd_req_rdy_T ;
  assign dma_rd_req_rdy_C1 = { 1{ _026__C }} ;
  assign dma_rd_req_rdy_X1 = { 1{ _026__X }} ;
  assign dma_rd_req_rdy_R1 = { 1{ _026__R }} ;
  assign _026__S = 0 ;
  assign _027_ = _020_ || _025_;
  assign _027__S = 0 ;
  logic [0:0] _020__C0 ;
  logic [0:0] _020__R0 ;
  logic [0:0] _020__X0 ;
  logic [0:0] _025__C0 ;
  logic [0:0] _025__R0 ;
  logic [0:0] _025__X0 ;
  assign _027__T = _020__T | _025__T ;
  assign _020__C0 = _027__C ;
  assign _020__X0 = _027__X ;
  assign _025__C0 = _027__C ;
  assign _025__X0 = _027__X ;
  assign _020__R0 = ( _027__R | _027__C & _025__T ) & { 1{ _025_ == 0 }} ;
  assign _025__R0 = ( _027__R | _027__C & _020__T ) & { 1{ _020_ == 0 }} ;
  assign is_src_ram_type_switching = reg2dp_cmd_src_ram_type != reg_cmd_src_ram_type;
  assign is_src_ram_type_switching_S = 0 ;
  logic [0:0] reg2dp_cmd_src_ram_type_C0 ;
  logic [0:0] reg2dp_cmd_src_ram_type_R0 ;
  logic [0:0] reg2dp_cmd_src_ram_type_X0 ;
  logic [0:0] reg_cmd_src_ram_type_C3 ;
  logic [0:0] reg_cmd_src_ram_type_R3 ;
  logic [0:0] reg_cmd_src_ram_type_X3 ;
  assign is_src_ram_type_switching_T = (| reg2dp_cmd_src_ram_type_T ) | (|reg_cmd_src_ram_type_T ) ;
  assign reg2dp_cmd_src_ram_type_C0 = { 1{ is_src_ram_type_switching_C }} ;
  assign reg2dp_cmd_src_ram_type_R0 = { 1{ is_src_ram_type_switching_R }} | ( { 1{ is_src_ram_type_switching_C }} & reg_cmd_src_ram_type_T );
  assign reg2dp_cmd_src_ram_type_X0 = { 1{ is_src_ram_type_switching_X }} ;
  assign reg_cmd_src_ram_type_C3 = { 1{ is_src_ram_type_switching_C }} ;
  assign reg_cmd_src_ram_type_R3 = { 1{ is_src_ram_type_switching_R }} | ( { 1{ is_src_ram_type_switching_C }} & reg2dp_cmd_src_ram_type_T );
  assign reg_cmd_src_ram_type_X3 = { 1{ is_src_ram_type_switching_X }} ;
  assign cmd_ready = _024_ | _019_;
  assign cmd_ready_S = 0 ;
  logic [0:0] _024__C1 ;
  logic [0:0] _024__R1 ;
  logic [0:0] _024__X1 ;
  logic [0:0] _019__C0 ;
  logic [0:0] _019__R0 ;
  logic [0:0] _019__X0 ;
  assign cmd_ready_T = _024__T | _019__T ;
  assign _024__C1 = cmd_ready_C ;
  assign _024__X1 = cmd_ready_X ;
  assign _019__C0 = cmd_ready_C ;
  assign _019__X0 = cmd_ready_X ;
  assign _024__R1 = ( cmd_ready_R | cmd_ready_C & _019__T ) & { 1{ _019_ != 1'b1 }} ;
  assign _019__R0 = ( cmd_ready_R | cmd_ready_C & _024__T ) & { 1{ _024_ != 1'b1 }} ;
  assign dma_rd_req_rdy = mc_rd_req_rdyi | cv_rd_req_rdyi;
  assign dma_rd_req_rdy_S = 0 ;
  logic [0:0] mc_rd_req_rdyi_C0 ;
  logic [0:0] mc_rd_req_rdyi_R0 ;
  logic [0:0] mc_rd_req_rdyi_X0 ;
  logic [0:0] cv_rd_req_rdyi_C0 ;
  logic [0:0] cv_rd_req_rdyi_R0 ;
  logic [0:0] cv_rd_req_rdyi_X0 ;
  assign dma_rd_req_rdy_T = mc_rd_req_rdyi_T | cv_rd_req_rdyi_T ;
  assign mc_rd_req_rdyi_C0 = dma_rd_req_rdy_C ;
  assign mc_rd_req_rdyi_X0 = dma_rd_req_rdy_X ;
  assign cv_rd_req_rdyi_C0 = dma_rd_req_rdy_C ;
  assign cv_rd_req_rdyi_X0 = dma_rd_req_rdy_X ;
  assign mc_rd_req_rdyi_R0 = ( dma_rd_req_rdy_R | dma_rd_req_rdy_C & cv_rd_req_rdyi_T ) & { 1{ cv_rd_req_rdyi != 1'b1 }} ;
  assign cv_rd_req_rdyi_R0 = ( dma_rd_req_rdy_R | dma_rd_req_rdy_C & mc_rd_req_rdyi_T ) & { 1{ mc_rd_req_rdyi != 1'b1 }} ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      surf_count <= 24'b000000000000000000000000;
    else
      surf_count <= _010_;
  logic [23:0] _010__X0 ;
  logic [23:0] _010__R0 ;
  logic [23:0] _010__C0 ;
  assign _010__X0 = { 24{ surf_count_S != _010__S }} ;
  assign _010__R0 = 0 ;
  assign _010__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      surf_count_T 		<= !nvdla_core_rstn ? 0 : ( _010__T & _010__X0 );
  always @( posedge nvdla_core_clk )
      surf_count_t_flag 	<= !nvdla_core_rstn ? 0 : surf_count_t_flag ? 1 : | _010__T & ( | _010__X0 );
  always @( posedge nvdla_core_clk )
      surf_count_r_flag 	<= !nvdla_core_rstn ? 0 : surf_count_r_flag ? 1 : surf_count_t_flag ? 0 : ( | surf_count_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      line_count <= 24'b000000000000000000000000;
    else
      line_count <= _002_;
  logic [23:0] _002__X0 ;
  logic [23:0] _002__R0 ;
  logic [23:0] _002__C0 ;
  assign _002__X0 = { 24{ line_count_S != _002__S }} ;
  assign _002__R0 = 0 ;
  assign _002__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      line_count_T 		<= !nvdla_core_rstn ? 0 : ( _002__T & _002__X0 );
  always @( posedge nvdla_core_clk )
      line_count_t_flag 	<= !nvdla_core_rstn ? 0 : line_count_t_flag ? 1 : | _002__T & ( | _002__X0 );
  always @( posedge nvdla_core_clk )
      line_count_r_flag 	<= !nvdla_core_rstn ? 0 : line_count_r_flag ? 1 : line_count_t_flag ? 0 : ( | line_count_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      surf_addr <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    else
      surf_addr <= _009_;
  logic [63:0] _009__X0 ;
  logic [63:0] _009__R0 ;
  logic [63:0] _009__C0 ;
  assign _009__X0 = { 64{ surf_addr_S != _009__S }} ;
  assign _009__R0 = 0 ;
  assign _009__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      surf_addr_T 		<= !nvdla_core_rstn ? 0 : ( _009__T & _009__X0 );
  always @( posedge nvdla_core_clk )
      surf_addr_t_flag 	<= !nvdla_core_rstn ? 0 : surf_addr_t_flag ? 1 : | _009__T & ( | _009__X0 );
  always @( posedge nvdla_core_clk )
      surf_addr_r_flag 	<= !nvdla_core_rstn ? 0 : surf_addr_r_flag ? 1 : surf_addr_t_flag ? 0 : ( | surf_addr_R ) ;
  always @(posedge nvdla_core_clk)
      line_addr <= _001_;
  logic [63:0] _001__X0 ;
  logic [63:0] _001__R0 ;
  logic [63:0] _001__C0 ;
  assign _001__X0 = { 64{ line_addr_S != _001__S }} ;
  assign _001__R0 = 0 ;
  assign _001__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      line_addr_T 		<= !nvdla_core_rstn ? 0 : ( _001__T & _001__X0 );
  always @( posedge nvdla_core_clk )
      line_addr_t_flag 	<= !nvdla_core_rstn ? 0 : line_addr_t_flag ? 1 : | _001__T & ( | _001__X0 );
  always @( posedge nvdla_core_clk )
      line_addr_r_flag 	<= !nvdla_core_rstn ? 0 : line_addr_r_flag ? 1 : line_addr_t_flag ? 0 : ( | line_addr_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      reg_cmd_src_ram_type <= 1'b0;
    else
      reg_cmd_src_ram_type <= _003_;
  logic [0:0] _003__X0 ;
  logic [0:0] _003__R0 ;
  logic [0:0] _003__C0 ;
  assign _003__X0 = { 1{ reg_cmd_src_ram_type_S != _003__S }} ;
  assign _003__R0 = 0 ;
  assign _003__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      reg_cmd_src_ram_type_T 		<= !nvdla_core_rstn ? 0 : ( _003__T & _003__X0 );
  always @( posedge nvdla_core_clk )
      reg_cmd_src_ram_type_t_flag 	<= !nvdla_core_rstn ? 0 : reg_cmd_src_ram_type_t_flag ? 1 : | _003__T & ( | _003__X0 );
  always @( posedge nvdla_core_clk )
      reg_cmd_src_ram_type_r_flag 	<= !nvdla_core_rstn ? 0 : reg_cmd_src_ram_type_r_flag ? 1 : reg_cmd_src_ram_type_t_flag ? 0 : ( | reg_cmd_src_ram_type_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      reg_line_repeat_number <= 24'b000000000000000000000000;
    else
      reg_line_repeat_number <= _004_;
  logic [23:0] _004__X0 ;
  logic [23:0] _004__R0 ;
  logic [23:0] _004__C0 ;
  assign _004__X0 = { 24{ reg_line_repeat_number_S != _004__S }} ;
  assign _004__R0 = 0 ;
  assign _004__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      reg_line_repeat_number_T 		<= !nvdla_core_rstn ? 0 : ( _004__T & _004__X0 );
  always @( posedge nvdla_core_clk )
      reg_line_repeat_number_t_flag 	<= !nvdla_core_rstn ? 0 : reg_line_repeat_number_t_flag ? 1 : | _004__T & ( | _004__X0 );
  always @( posedge nvdla_core_clk )
      reg_line_repeat_number_r_flag 	<= !nvdla_core_rstn ? 0 : reg_line_repeat_number_r_flag ? 1 : reg_line_repeat_number_t_flag ? 0 : ( | reg_line_repeat_number_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      reg_line_size <= 13'b0000000000000;
    else
      reg_line_size <= _005_;
  logic [12:0] _005__X0 ;
  logic [12:0] _005__R0 ;
  logic [12:0] _005__C0 ;
  assign _005__X0 = { 13{ reg_line_size_S != _005__S }} ;
  assign _005__R0 = 0 ;
  assign _005__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      reg_line_size_T 		<= !nvdla_core_rstn ? 0 : ( _005__T & _005__X0 );
  always @( posedge nvdla_core_clk )
      reg_line_size_t_flag 	<= !nvdla_core_rstn ? 0 : reg_line_size_t_flag ? 1 : | _005__T & ( | _005__X0 );
  always @( posedge nvdla_core_clk )
      reg_line_size_r_flag 	<= !nvdla_core_rstn ? 0 : reg_line_size_r_flag ? 1 : reg_line_size_t_flag ? 0 : ( | reg_line_size_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      reg_line_stride <= 32'd0;
    else
      reg_line_stride <= _006_;
  logic [31:0] _006__X0 ;
  logic [31:0] _006__R0 ;
  logic [31:0] _006__C0 ;
  assign _006__X0 = { 32{ reg_line_stride_S != _006__S }} ;
  assign _006__R0 = 0 ;
  assign _006__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      reg_line_stride_T 		<= !nvdla_core_rstn ? 0 : ( _006__T & _006__X0 );
  always @( posedge nvdla_core_clk )
      reg_line_stride_t_flag 	<= !nvdla_core_rstn ? 0 : reg_line_stride_t_flag ? 1 : | _006__T & ( | _006__X0 );
  always @( posedge nvdla_core_clk )
      reg_line_stride_r_flag 	<= !nvdla_core_rstn ? 0 : reg_line_stride_r_flag ? 1 : reg_line_stride_t_flag ? 0 : ( | reg_line_stride_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      reg_surf_repeat_number <= 24'b000000000000000000000000;
    else
      reg_surf_repeat_number <= _007_;
  logic [23:0] _007__X0 ;
  logic [23:0] _007__R0 ;
  logic [23:0] _007__C0 ;
  assign _007__X0 = { 24{ reg_surf_repeat_number_S != _007__S }} ;
  assign _007__R0 = 0 ;
  assign _007__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      reg_surf_repeat_number_T 		<= !nvdla_core_rstn ? 0 : ( _007__T & _007__X0 );
  always @( posedge nvdla_core_clk )
      reg_surf_repeat_number_t_flag 	<= !nvdla_core_rstn ? 0 : reg_surf_repeat_number_t_flag ? 1 : | _007__T & ( | _007__X0 );
  always @( posedge nvdla_core_clk )
      reg_surf_repeat_number_r_flag 	<= !nvdla_core_rstn ? 0 : reg_surf_repeat_number_r_flag ? 1 : reg_surf_repeat_number_t_flag ? 0 : ( | reg_surf_repeat_number_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      reg_surf_stride <= 32'd0;
    else
      reg_surf_stride <= _008_;
  logic [31:0] _008__X0 ;
  logic [31:0] _008__R0 ;
  logic [31:0] _008__C0 ;
  assign _008__X0 = { 32{ reg_surf_stride_S != _008__S }} ;
  assign _008__R0 = 0 ;
  assign _008__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      reg_surf_stride_T 		<= !nvdla_core_rstn ? 0 : ( _008__T & _008__X0 );
  always @( posedge nvdla_core_clk )
      reg_surf_stride_t_flag 	<= !nvdla_core_rstn ? 0 : reg_surf_stride_t_flag ? 1 : | _008__T & ( | _008__X0 );
  always @( posedge nvdla_core_clk )
      reg_surf_stride_r_flag 	<= !nvdla_core_rstn ? 0 : reg_surf_stride_r_flag ? 1 : reg_surf_stride_t_flag ? 0 : ( | reg_surf_stride_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      ld2gate_slcg_en <= 1'b0;
    else
      ld2gate_slcg_en <= _000_;
  logic [0:0] _000__X0 ;
  logic [0:0] _000__R0 ;
  logic [0:0] _000__C0 ;
  assign _000__X0 = { 1{ ld2gate_slcg_en_S != _000__S }} ;
  assign _000__R0 = 0 ;
  assign _000__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      ld2gate_slcg_en_T 		<= !nvdla_core_rstn ? 0 : ( _000__T & _000__X0 );
  always @( posedge nvdla_core_clk )
      ld2gate_slcg_en_t_flag 	<= !nvdla_core_rstn ? 0 : ld2gate_slcg_en_t_flag ? 1 : | _000__T & ( | _000__X0 );
  always @( posedge nvdla_core_clk )
      ld2gate_slcg_en_r_flag 	<= !nvdla_core_rstn ? 0 : ld2gate_slcg_en_r_flag ? 1 : ld2gate_slcg_en_t_flag ? 0 : ( | ld2gate_slcg_en_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      tran_valid <= 1'b0;
    else
      tran_valid <= _011_;
  logic [0:0] _011__X0 ;
  logic [0:0] _011__R0 ;
  logic [0:0] _011__C0 ;
  assign _011__X0 = { 1{ tran_valid_S != _011__S }} ;
  assign _011__R0 = 0 ;
  assign _011__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      tran_valid_T 		<= !nvdla_core_rstn ? 0 : ( _011__T & _011__X0 );
  always @( posedge nvdla_core_clk )
      tran_valid_t_flag 	<= !nvdla_core_rstn ? 0 : tran_valid_t_flag ? 1 : | _011__T & ( | _011__X0 );
  always @( posedge nvdla_core_clk )
      tran_valid_r_flag 	<= !nvdla_core_rstn ? 0 : tran_valid_r_flag ? 1 : tran_valid_t_flag ? 0 : ( | tran_valid_R ) ;
  assign _028_ = is_surf_end ? _015_ : surf_count;
  logic [0:0] is_surf_end_C1 ;
  logic [0:0] is_surf_end_R1 ;
  logic [0:0] is_surf_end_X1 ;
  assign is_surf_end_C1 = | _028__C ;
  assign is_surf_end_X1 = | _028__X ;
  assign _028__T = is_surf_end ? ( { 24{ is_surf_end_T  }} | _015__T ) : ( { 24{ is_surf_end_T  }} | surf_count_T );
  assign _028__S = is_surf_end ? _015__S : surf_count_S ;
  assign is_surf_end_R1 = ( | (_028__R | ( _028__C & ( { 24{ is_surf_end }} & _015__T | { 24{ !is_surf_end }} & surf_count_T )))) && _015_ != surf_count ;
  logic [23:0] _015__C0 ;
  logic [23:0] _015__R0 ;
  logic [23:0] _015__X0 ;
  assign _015__C0 = { 24{ is_surf_end }} ;
  assign _015__R0 = { 24{ is_surf_end }} & ( _028__R | ( { 24{ is_surf_end_T  }} & _028__C ));
  assign _015__X0 = { 24{ is_surf_end }} & _028__X ;
  logic [23:0] surf_count_C2 ;
  logic [23:0] surf_count_R2 ;
  logic [23:0] surf_count_X2 ;
  assign surf_count_C2 = { 24{ !is_surf_end }} ;
  assign surf_count_R2 = { 24{ !is_surf_end }} & ( _028__R | ( { 24{ is_surf_end_T  }} & _028__C ));
  assign surf_count_X2 = { 24{ !is_surf_end }} & _028__X ;
  assign _029_ = is_cube_end ? 24'b000000000000000000000000 : _028_;
  logic [0:0] is_cube_end_C1 ;
  logic [0:0] is_cube_end_R1 ;
  logic [0:0] is_cube_end_X1 ;
  assign is_cube_end_C1 = | _029__C ;
  assign is_cube_end_X1 = | _029__X ;
  logic [23:0] _028__C0 ;
  logic [23:0] _028__R0 ;
  logic [23:0] _028__X0 ;
  assign _028__C0 = { 24{ !is_cube_end }};
  assign _028__R0 = { 24{ !is_cube_end }} & ( _029__R | ( { 24{ is_cube_end_T  }} & _029__C ));
  assign _028__X0 = { 24{ !is_cube_end }} & _029__X ;
  assign _029__T = is_cube_end ? { 24{ | is_cube_end_T  }} : ( { 24{ | is_cube_end_T  }} | _028__T );
  assign _029__S = is_cube_end ? is_cube_end_S : _028__S ;
  assign is_cube_end_R1 = ( | (_029__R | ( { 24{ !is_cube_end }} & _028__T & _029__C ))) && 24'b000000000000000000000000 != _028_ ;
  assign _010_ = tran_accept ? _029_ : surf_count;
  logic [0:0] tran_accept_C1 ;
  logic [0:0] tran_accept_R1 ;
  logic [0:0] tran_accept_X1 ;
  assign tran_accept_C1 = | _010__C ;
  assign tran_accept_X1 = | _010__X ;
  assign _010__T = tran_accept ? ( { 24{ tran_accept_T  }} | _029__T ) : ( { 24{ tran_accept_T  }} | surf_count_T );
  assign _010__S = tran_accept ? _029__S : surf_count_S ;
  assign tran_accept_R1 = ( | (_010__R | ( _010__C & ( { 24{ tran_accept }} & _029__T | { 24{ !tran_accept }} & surf_count_T )))) && _029_ != surf_count ;
  logic [23:0] _029__C0 ;
  logic [23:0] _029__R0 ;
  logic [23:0] _029__X0 ;
  assign _029__C0 = { 24{ tran_accept }} ;
  assign _029__R0 = { 24{ tran_accept }} & ( _010__R | ( { 24{ tran_accept_T  }} & _010__C ));
  assign _029__X0 = { 24{ tran_accept }} & _010__X ;
  logic [23:0] surf_count_C3 ;
  logic [23:0] surf_count_R3 ;
  logic [23:0] surf_count_X3 ;
  assign surf_count_C3 = { 24{ !tran_accept }} ;
  assign surf_count_R3 = { 24{ !tran_accept }} & ( _010__R | ( { 24{ tran_accept_T  }} & _010__C ));
  assign surf_count_X3 = { 24{ !tran_accept }} & _010__X ;
  assign _030_ = is_surf_end ? 24'b000000000000000000000000 : _014_;
  logic [0:0] is_surf_end_C2 ;
  logic [0:0] is_surf_end_R2 ;
  logic [0:0] is_surf_end_X2 ;
  assign is_surf_end_C2 = | _030__C ;
  assign is_surf_end_X2 = | _030__X ;
  logic [23:0] _014__C0 ;
  logic [23:0] _014__R0 ;
  logic [23:0] _014__X0 ;
  assign _014__C0 = { 24{ !is_surf_end }};
  assign _014__R0 = { 24{ !is_surf_end }} & ( _030__R | ( { 24{ is_surf_end_T  }} & _030__C ));
  assign _014__X0 = { 24{ !is_surf_end }} & _030__X ;
  assign _030__T = is_surf_end ? { 24{ | is_surf_end_T  }} : ( { 24{ | is_surf_end_T  }} | _014__T );
  assign _030__S = is_surf_end ? is_surf_end_S : _014__S ;
  assign is_surf_end_R2 = ( | (_030__R | ( { 24{ !is_surf_end }} & _014__T & _030__C ))) && 24'b000000000000000000000000 != _014_ ;
  assign _002_ = tran_accept ? _030_ : line_count;
  logic [0:0] tran_accept_C2 ;
  logic [0:0] tran_accept_R2 ;
  logic [0:0] tran_accept_X2 ;
  assign tran_accept_C2 = | _002__C ;
  assign tran_accept_X2 = | _002__X ;
  assign _002__T = tran_accept ? ( { 24{ tran_accept_T  }} | _030__T ) : ( { 24{ tran_accept_T  }} | line_count_T );
  assign _002__S = tran_accept ? _030__S : line_count_S ;
  assign tran_accept_R2 = ( | (_002__R | ( _002__C & ( { 24{ tran_accept }} & _030__T | { 24{ !tran_accept }} & line_count_T )))) && _030_ != line_count ;
  logic [23:0] _030__C0 ;
  logic [23:0] _030__R0 ;
  logic [23:0] _030__X0 ;
  assign _030__C0 = { 24{ tran_accept }} ;
  assign _030__R0 = { 24{ tran_accept }} & ( _002__R | ( { 24{ tran_accept_T  }} & _002__C ));
  assign _030__X0 = { 24{ tran_accept }} & _002__X ;
  logic [23:0] line_count_C2 ;
  logic [23:0] line_count_R2 ;
  logic [23:0] line_count_X2 ;
  assign line_count_C2 = { 24{ !tran_accept }} ;
  assign line_count_R2 = { 24{ !tran_accept }} & ( _002__R | ( { 24{ tran_accept_T  }} & _002__C ));
  assign line_count_X2 = { 24{ !tran_accept }} & _002__X ;
  assign _031_ = is_surf_end ? _012_ : surf_addr;
  logic [0:0] is_surf_end_C3 ;
  logic [0:0] is_surf_end_R3 ;
  logic [0:0] is_surf_end_X3 ;
  assign is_surf_end_C3 = | _031__C ;
  assign is_surf_end_X3 = | _031__X ;
  assign _031__T = is_surf_end ? ( { 64{ is_surf_end_T  }} | _012__T ) : ( { 64{ is_surf_end_T  }} | surf_addr_T );
  assign _031__S = is_surf_end ? _012__S : surf_addr_S ;
  assign is_surf_end_R3 = ( | (_031__R | ( _031__C & ( { 64{ is_surf_end }} & _012__T | { 64{ !is_surf_end }} & surf_addr_T )))) && _012_ != surf_addr ;
  logic [63:0] _012__C0 ;
  logic [63:0] _012__R0 ;
  logic [63:0] _012__X0 ;
  assign _012__C0 = { 64{ is_surf_end }} ;
  assign _012__R0 = { 64{ is_surf_end }} & ( _031__R | ( { 64{ is_surf_end_T  }} & _031__C ));
  assign _012__X0 = { 64{ is_surf_end }} & _031__X ;
  logic [63:0] surf_addr_C1 ;
  logic [63:0] surf_addr_R1 ;
  logic [63:0] surf_addr_X1 ;
  assign surf_addr_C1 = { 64{ !is_surf_end }} ;
  assign surf_addr_R1 = { 64{ !is_surf_end }} & ( _031__R | ( { 64{ is_surf_end_T  }} & _031__C ));
  assign surf_addr_X1 = { 64{ !is_surf_end }} & _031__X ;
  assign _032_ = tran_accept ? _031_ : surf_addr;
  logic [0:0] tran_accept_C3 ;
  logic [0:0] tran_accept_R3 ;
  logic [0:0] tran_accept_X3 ;
  assign tran_accept_C3 = | _032__C ;
  assign tran_accept_X3 = | _032__X ;
  assign _032__T = tran_accept ? ( { 64{ tran_accept_T  }} | _031__T ) : ( { 64{ tran_accept_T  }} | surf_addr_T );
  assign _032__S = tran_accept ? _031__S : surf_addr_S ;
  assign tran_accept_R3 = ( | (_032__R | ( _032__C & ( { 64{ tran_accept }} & _031__T | { 64{ !tran_accept }} & surf_addr_T )))) && _031_ != surf_addr ;
  logic [63:0] _031__C0 ;
  logic [63:0] _031__R0 ;
  logic [63:0] _031__X0 ;
  assign _031__C0 = { 64{ tran_accept }} ;
  assign _031__R0 = { 64{ tran_accept }} & ( _032__R | ( { 64{ tran_accept_T  }} & _032__C ));
  assign _031__X0 = { 64{ tran_accept }} & _032__X ;
  logic [63:0] surf_addr_C2 ;
  logic [63:0] surf_addr_R2 ;
  logic [63:0] surf_addr_X2 ;
  assign surf_addr_C2 = { 64{ !tran_accept }} ;
  assign surf_addr_R2 = { 64{ !tran_accept }} & ( _032__R | ( { 64{ tran_accept_T  }} & _032__C ));
  assign surf_addr_X2 = { 64{ !tran_accept }} & _032__X ;
  logic [63:0] fangyuan0;
  logic [63:0] fangyuan0_T ;
  logic [63:0] fangyuan0_R ;
  logic [63:0] fangyuan0_C ;
  logic [63:0] fangyuan0_X ;
  assign fangyuan0 = { reg2dp_src_addr_high_v8, reg2dp_src_addr_low_v32, 5'b00000 };
  assign fangyuan0_T = {  reg2dp_src_addr_high_v8_T , reg2dp_src_addr_low_v32_T , 5'h0  };
  logic [13:0] fangyuan0_S ;
  assign fangyuan0_S = 0 ;
  logic [31:0] reg2dp_src_addr_high_v8_R0 ;
  logic [31:0] reg2dp_src_addr_high_v8_X0 ;
  logic [31:0] reg2dp_src_addr_high_v8_C0 ;
  assign reg2dp_src_addr_high_v8_R0 = fangyuan0_R [63:32] ;
  assign reg2dp_src_addr_high_v8_X0 = fangyuan0_X [63:32] ;
  assign reg2dp_src_addr_high_v8_C0 = fangyuan0_C [63:32] ;
  logic [26:0] reg2dp_src_addr_low_v32_R0 ;
  logic [26:0] reg2dp_src_addr_low_v32_X0 ;
  logic [26:0] reg2dp_src_addr_low_v32_C0 ;
  assign reg2dp_src_addr_low_v32_R0 = fangyuan0_R [31:5] ;
  assign reg2dp_src_addr_low_v32_X0 = fangyuan0_X [31:5] ;
  assign reg2dp_src_addr_low_v32_C0 = fangyuan0_C [31:5] ;

  assign _009_ = load_cmd ? fangyuan0 : _032_;
  logic [0:0] load_cmd_C0 ;
  logic [0:0] load_cmd_R0 ;
  logic [0:0] load_cmd_X0 ;
  assign load_cmd_C0 = | _009__C ;
  assign load_cmd_X0 = | _009__X ;
  assign _009__T = load_cmd ? ( { 64{ load_cmd_T  }} | fangyuan0_T ) : ( { 64{ load_cmd_T  }} | _032__T );
  assign _009__S = load_cmd ? fangyuan0_S : _032__S ;
  assign load_cmd_R0 = ( | (_009__R | ( _009__C & ( { 64{ load_cmd }} & fangyuan0_T | { 64{ !load_cmd }} & _032__T )))) && fangyuan0 != _032_ ;
  logic [63:0] fangyuan0_C0 ;
  logic [63:0] fangyuan0_R0 ;
  logic [63:0] fangyuan0_X0 ;
  assign fangyuan0_C0 = { 64{ load_cmd }} ;
  assign fangyuan0_R0 = { 64{ load_cmd }} & ( _009__R | ( { 64{ load_cmd_T  }} & _009__C ));
  assign fangyuan0_X0 = { 64{ load_cmd }} & _009__X ;
  logic [63:0] _032__C0 ;
  logic [63:0] _032__R0 ;
  logic [63:0] _032__X0 ;
  assign _032__C0 = { 64{ !load_cmd }} ;
  assign _032__R0 = { 64{ !load_cmd }} & ( _009__R | ( { 64{ load_cmd_T  }} & _009__C ));
  assign _032__X0 = { 64{ !load_cmd }} & _009__X ;
  assign _033_ = is_surf_end ? _012_ : _013_;
  logic [0:0] is_surf_end_C4 ;
  logic [0:0] is_surf_end_R4 ;
  logic [0:0] is_surf_end_X4 ;
  assign is_surf_end_C4 = | _033__C ;
  assign is_surf_end_X4 = | _033__X ;
  assign _033__T = is_surf_end ? ( { 64{ is_surf_end_T  }} | _012__T ) : ( { 64{ is_surf_end_T  }} | _013__T );
  assign _033__S = is_surf_end ? _012__S : _013__S ;
  assign is_surf_end_R4 = ( | (_033__R | ( _033__C & ( { 64{ is_surf_end }} & _012__T | { 64{ !is_surf_end }} & _013__T )))) && _012_ != _013_ ;
  logic [63:0] _012__C1 ;
  logic [63:0] _012__R1 ;
  logic [63:0] _012__X1 ;
  assign _012__C1 = { 64{ is_surf_end }} ;
  assign _012__R1 = { 64{ is_surf_end }} & ( _033__R | ( { 64{ is_surf_end_T  }} & _033__C ));
  assign _012__X1 = { 64{ is_surf_end }} & _033__X ;
  logic [63:0] _013__C0 ;
  logic [63:0] _013__R0 ;
  logic [63:0] _013__X0 ;
  assign _013__C0 = { 64{ !is_surf_end }} ;
  assign _013__R0 = { 64{ !is_surf_end }} & ( _033__R | ( { 64{ is_surf_end_T  }} & _033__C ));
  assign _013__X0 = { 64{ !is_surf_end }} & _033__X ;
  assign _034_ = tran_accept ? _033_ : line_addr;
  logic [0:0] tran_accept_C4 ;
  logic [0:0] tran_accept_R4 ;
  logic [0:0] tran_accept_X4 ;
  assign tran_accept_C4 = | _034__C ;
  assign tran_accept_X4 = | _034__X ;
  assign _034__T = tran_accept ? ( { 64{ tran_accept_T  }} | _033__T ) : ( { 64{ tran_accept_T  }} | line_addr_T );
  assign _034__S = tran_accept ? _033__S : line_addr_S ;
  assign tran_accept_R4 = ( | (_034__R | ( _034__C & ( { 64{ tran_accept }} & _033__T | { 64{ !tran_accept }} & line_addr_T )))) && _033_ != line_addr ;
  logic [63:0] _033__C0 ;
  logic [63:0] _033__R0 ;
  logic [63:0] _033__X0 ;
  assign _033__C0 = { 64{ tran_accept }} ;
  assign _033__R0 = { 64{ tran_accept }} & ( _034__R | ( { 64{ tran_accept_T  }} & _034__C ));
  assign _033__X0 = { 64{ tran_accept }} & _034__X ;
  logic [63:0] line_addr_C1 ;
  logic [63:0] line_addr_R1 ;
  logic [63:0] line_addr_X1 ;
  assign line_addr_C1 = { 64{ !tran_accept }} ;
  assign line_addr_R1 = { 64{ !tran_accept }} & ( _034__R | ( { 64{ tran_accept_T  }} & _034__C ));
  assign line_addr_X1 = { 64{ !tran_accept }} & _034__X ;
  logic [63:0] fangyuan1;
  logic [63:0] fangyuan1_T ;
  logic [63:0] fangyuan1_R ;
  logic [63:0] fangyuan1_C ;
  logic [63:0] fangyuan1_X ;
  assign fangyuan1 = { reg2dp_src_addr_high_v8, reg2dp_src_addr_low_v32, 5'b00000 };
  assign fangyuan1_T = {  reg2dp_src_addr_high_v8_T , reg2dp_src_addr_low_v32_T , 5'h0  };
  logic [13:0] fangyuan1_S ;
  assign fangyuan1_S = 0 ;
  logic [31:0] reg2dp_src_addr_high_v8_R1 ;
  logic [31:0] reg2dp_src_addr_high_v8_X1 ;
  logic [31:0] reg2dp_src_addr_high_v8_C1 ;
  assign reg2dp_src_addr_high_v8_R1 = fangyuan1_R [63:32] ;
  assign reg2dp_src_addr_high_v8_X1 = fangyuan1_X [63:32] ;
  assign reg2dp_src_addr_high_v8_C1 = fangyuan1_C [63:32] ;
  logic [26:0] reg2dp_src_addr_low_v32_R1 ;
  logic [26:0] reg2dp_src_addr_low_v32_X1 ;
  logic [26:0] reg2dp_src_addr_low_v32_C1 ;
  assign reg2dp_src_addr_low_v32_R1 = fangyuan1_R [31:5] ;
  assign reg2dp_src_addr_low_v32_X1 = fangyuan1_X [31:5] ;
  assign reg2dp_src_addr_low_v32_C1 = fangyuan1_C [31:5] ;

  assign _001_ = load_cmd ? fangyuan1 : _034_;
  logic [0:0] load_cmd_C1 ;
  logic [0:0] load_cmd_R1 ;
  logic [0:0] load_cmd_X1 ;
  assign load_cmd_C1 = | _001__C ;
  assign load_cmd_X1 = | _001__X ;
  assign _001__T = load_cmd ? ( { 64{ load_cmd_T  }} | fangyuan1_T ) : ( { 64{ load_cmd_T  }} | _034__T );
  assign _001__S = load_cmd ? fangyuan1_S : _034__S ;
  assign load_cmd_R1 = ( | (_001__R | ( _001__C & ( { 64{ load_cmd }} & fangyuan1_T | { 64{ !load_cmd }} & _034__T )))) && fangyuan1 != _034_ ;
  logic [63:0] fangyuan1_C0 ;
  logic [63:0] fangyuan1_R0 ;
  logic [63:0] fangyuan1_X0 ;
  assign fangyuan1_C0 = { 64{ load_cmd }} ;
  assign fangyuan1_R0 = { 64{ load_cmd }} & ( _001__R | ( { 64{ load_cmd_T  }} & _001__C ));
  assign fangyuan1_X0 = { 64{ load_cmd }} & _001__X ;
  logic [63:0] _034__C0 ;
  logic [63:0] _034__R0 ;
  logic [63:0] _034__X0 ;
  assign _034__C0 = { 64{ !load_cmd }} ;
  assign _034__R0 = { 64{ !load_cmd }} & ( _001__R | ( { 64{ load_cmd_T  }} & _001__C ));
  assign _034__X0 = { 64{ !load_cmd }} & _001__X ;
  logic [31:0] fangyuan2;
  logic [31:0] fangyuan2_T ;
  logic [31:0] fangyuan2_R ;
  logic [31:0] fangyuan2_C ;
  logic [31:0] fangyuan2_X ;
  assign fangyuan2 = { reg2dp_src_surf_stride, 5'b00000 };
  assign fangyuan2_T = {  reg2dp_src_surf_stride_T , 5'h0  };
  logic [13:0] fangyuan2_S ;
  assign fangyuan2_S = 0 ;
  logic [26:0] reg2dp_src_surf_stride_R0 ;
  logic [26:0] reg2dp_src_surf_stride_X0 ;
  logic [26:0] reg2dp_src_surf_stride_C0 ;
  assign reg2dp_src_surf_stride_R0 = fangyuan2_R [31:5] ;
  assign reg2dp_src_surf_stride_X0 = fangyuan2_X [31:5] ;
  assign reg2dp_src_surf_stride_C0 = fangyuan2_C [31:5] ;

  assign _008_ = load_cmd ? fangyuan2 : reg_surf_stride;
  logic [0:0] load_cmd_C2 ;
  logic [0:0] load_cmd_R2 ;
  logic [0:0] load_cmd_X2 ;
  assign load_cmd_C2 = | _008__C ;
  assign load_cmd_X2 = | _008__X ;
  assign _008__T = load_cmd ? ( { 32{ load_cmd_T  }} | fangyuan2_T ) : ( { 32{ load_cmd_T  }} | reg_surf_stride_T );
  assign _008__S = load_cmd ? fangyuan2_S : reg_surf_stride_S ;
  assign load_cmd_R2 = ( | (_008__R | ( _008__C & ( { 32{ load_cmd }} & fangyuan2_T | { 32{ !load_cmd }} & reg_surf_stride_T )))) && fangyuan2 != reg_surf_stride ;
  logic [31:0] fangyuan2_C0 ;
  logic [31:0] fangyuan2_R0 ;
  logic [31:0] fangyuan2_X0 ;
  assign fangyuan2_C0 = { 32{ load_cmd }} ;
  assign fangyuan2_R0 = { 32{ load_cmd }} & ( _008__R | ( { 32{ load_cmd_T  }} & _008__C ));
  assign fangyuan2_X0 = { 32{ load_cmd }} & _008__X ;
  logic [31:0] reg_surf_stride_C1 ;
  logic [31:0] reg_surf_stride_R1 ;
  logic [31:0] reg_surf_stride_X1 ;
  assign reg_surf_stride_C1 = { 32{ !load_cmd }} ;
  assign reg_surf_stride_R1 = { 32{ !load_cmd }} & ( _008__R | ( { 32{ load_cmd_T  }} & _008__C ));
  assign reg_surf_stride_X1 = { 32{ !load_cmd }} & _008__X ;
  assign _007_ = load_cmd ? reg2dp_surf_repeat_number : reg_surf_repeat_number;
  logic [0:0] load_cmd_C3 ;
  logic [0:0] load_cmd_R3 ;
  logic [0:0] load_cmd_X3 ;
  assign load_cmd_C3 = | _007__C ;
  assign load_cmd_X3 = | _007__X ;
  assign _007__T = load_cmd ? ( { 24{ load_cmd_T  }} | reg2dp_surf_repeat_number_T ) : ( { 24{ load_cmd_T  }} | reg_surf_repeat_number_T );
  assign _007__S = load_cmd ? reg2dp_surf_repeat_number_S : reg_surf_repeat_number_S ;
  assign load_cmd_R3 = ( | (_007__R | ( _007__C & ( { 24{ load_cmd }} & reg2dp_surf_repeat_number_T | { 24{ !load_cmd }} & reg_surf_repeat_number_T )))) && reg2dp_surf_repeat_number != reg_surf_repeat_number ;
  logic [23:0] reg2dp_surf_repeat_number_C0 ;
  logic [23:0] reg2dp_surf_repeat_number_R0 ;
  logic [23:0] reg2dp_surf_repeat_number_X0 ;
  assign reg2dp_surf_repeat_number_C0 = { 24{ load_cmd }} ;
  assign reg2dp_surf_repeat_number_R0 = { 24{ load_cmd }} & ( _007__R | ( { 24{ load_cmd_T  }} & _007__C ));
  assign reg2dp_surf_repeat_number_X0 = { 24{ load_cmd }} & _007__X ;
  logic [23:0] reg_surf_repeat_number_C1 ;
  logic [23:0] reg_surf_repeat_number_R1 ;
  logic [23:0] reg_surf_repeat_number_X1 ;
  assign reg_surf_repeat_number_C1 = { 24{ !load_cmd }} ;
  assign reg_surf_repeat_number_R1 = { 24{ !load_cmd }} & ( _007__R | ( { 24{ load_cmd_T  }} & _007__C ));
  assign reg_surf_repeat_number_X1 = { 24{ !load_cmd }} & _007__X ;
  logic [31:0] fangyuan3;
  logic [31:0] fangyuan3_T ;
  logic [31:0] fangyuan3_R ;
  logic [31:0] fangyuan3_C ;
  logic [31:0] fangyuan3_X ;
  assign fangyuan3 = { reg2dp_src_line_stride, 5'b00000 };
  assign fangyuan3_T = {  reg2dp_src_line_stride_T , 5'h0  };
  logic [13:0] fangyuan3_S ;
  assign fangyuan3_S = 0 ;
  logic [26:0] reg2dp_src_line_stride_R0 ;
  logic [26:0] reg2dp_src_line_stride_X0 ;
  logic [26:0] reg2dp_src_line_stride_C0 ;
  assign reg2dp_src_line_stride_R0 = fangyuan3_R [31:5] ;
  assign reg2dp_src_line_stride_X0 = fangyuan3_X [31:5] ;
  assign reg2dp_src_line_stride_C0 = fangyuan3_C [31:5] ;

  assign _006_ = load_cmd ? fangyuan3 : reg_line_stride;
  logic [0:0] load_cmd_C4 ;
  logic [0:0] load_cmd_R4 ;
  logic [0:0] load_cmd_X4 ;
  assign load_cmd_C4 = | _006__C ;
  assign load_cmd_X4 = | _006__X ;
  assign _006__T = load_cmd ? ( { 32{ load_cmd_T  }} | fangyuan3_T ) : ( { 32{ load_cmd_T  }} | reg_line_stride_T );
  assign _006__S = load_cmd ? fangyuan3_S : reg_line_stride_S ;
  assign load_cmd_R4 = ( | (_006__R | ( _006__C & ( { 32{ load_cmd }} & fangyuan3_T | { 32{ !load_cmd }} & reg_line_stride_T )))) && fangyuan3 != reg_line_stride ;
  logic [31:0] fangyuan3_C0 ;
  logic [31:0] fangyuan3_R0 ;
  logic [31:0] fangyuan3_X0 ;
  assign fangyuan3_C0 = { 32{ load_cmd }} ;
  assign fangyuan3_R0 = { 32{ load_cmd }} & ( _006__R | ( { 32{ load_cmd_T  }} & _006__C ));
  assign fangyuan3_X0 = { 32{ load_cmd }} & _006__X ;
  logic [31:0] reg_line_stride_C1 ;
  logic [31:0] reg_line_stride_R1 ;
  logic [31:0] reg_line_stride_X1 ;
  assign reg_line_stride_C1 = { 32{ !load_cmd }} ;
  assign reg_line_stride_R1 = { 32{ !load_cmd }} & ( _006__R | ( { 32{ load_cmd_T  }} & _006__C ));
  assign reg_line_stride_X1 = { 32{ !load_cmd }} & _006__X ;
  assign _005_ = load_cmd ? reg2dp_line_size : reg_line_size;
  logic [0:0] load_cmd_C5 ;
  logic [0:0] load_cmd_R5 ;
  logic [0:0] load_cmd_X5 ;
  assign load_cmd_C5 = | _005__C ;
  assign load_cmd_X5 = | _005__X ;
  assign _005__T = load_cmd ? ( { 13{ load_cmd_T  }} | reg2dp_line_size_T ) : ( { 13{ load_cmd_T  }} | reg_line_size_T );
  assign _005__S = load_cmd ? reg2dp_line_size_S : reg_line_size_S ;
  assign load_cmd_R5 = ( | (_005__R | ( _005__C & ( { 13{ load_cmd }} & reg2dp_line_size_T | { 13{ !load_cmd }} & reg_line_size_T )))) && reg2dp_line_size != reg_line_size ;
  logic [12:0] reg2dp_line_size_C0 ;
  logic [12:0] reg2dp_line_size_R0 ;
  logic [12:0] reg2dp_line_size_X0 ;
  assign reg2dp_line_size_C0 = { 13{ load_cmd }} ;
  assign reg2dp_line_size_R0 = { 13{ load_cmd }} & ( _005__R | ( { 13{ load_cmd_T  }} & _005__C ));
  assign reg2dp_line_size_X0 = { 13{ load_cmd }} & _005__X ;
  logic [12:0] reg_line_size_C0 ;
  logic [12:0] reg_line_size_R0 ;
  logic [12:0] reg_line_size_X0 ;
  assign reg_line_size_C0 = { 13{ !load_cmd }} ;
  assign reg_line_size_R0 = { 13{ !load_cmd }} & ( _005__R | ( { 13{ load_cmd_T  }} & _005__C ));
  assign reg_line_size_X0 = { 13{ !load_cmd }} & _005__X ;
  assign _004_ = load_cmd ? reg2dp_line_repeat_number : reg_line_repeat_number;
  logic [0:0] load_cmd_C6 ;
  logic [0:0] load_cmd_R6 ;
  logic [0:0] load_cmd_X6 ;
  assign load_cmd_C6 = | _004__C ;
  assign load_cmd_X6 = | _004__X ;
  assign _004__T = load_cmd ? ( { 24{ load_cmd_T  }} | reg2dp_line_repeat_number_T ) : ( { 24{ load_cmd_T  }} | reg_line_repeat_number_T );
  assign _004__S = load_cmd ? reg2dp_line_repeat_number_S : reg_line_repeat_number_S ;
  assign load_cmd_R6 = ( | (_004__R | ( _004__C & ( { 24{ load_cmd }} & reg2dp_line_repeat_number_T | { 24{ !load_cmd }} & reg_line_repeat_number_T )))) && reg2dp_line_repeat_number != reg_line_repeat_number ;
  logic [23:0] reg2dp_line_repeat_number_C0 ;
  logic [23:0] reg2dp_line_repeat_number_R0 ;
  logic [23:0] reg2dp_line_repeat_number_X0 ;
  assign reg2dp_line_repeat_number_C0 = { 24{ load_cmd }} ;
  assign reg2dp_line_repeat_number_R0 = { 24{ load_cmd }} & ( _004__R | ( { 24{ load_cmd_T  }} & _004__C ));
  assign reg2dp_line_repeat_number_X0 = { 24{ load_cmd }} & _004__X ;
  logic [23:0] reg_line_repeat_number_C1 ;
  logic [23:0] reg_line_repeat_number_R1 ;
  logic [23:0] reg_line_repeat_number_X1 ;
  assign reg_line_repeat_number_C1 = { 24{ !load_cmd }} ;
  assign reg_line_repeat_number_R1 = { 24{ !load_cmd }} & ( _004__R | ( { 24{ load_cmd_T  }} & _004__C ));
  assign reg_line_repeat_number_X1 = { 24{ !load_cmd }} & _004__X ;
  assign _003_ = load_cmd ? reg2dp_cmd_src_ram_type : reg_cmd_src_ram_type;
  logic [0:0] load_cmd_C7 ;
  logic [0:0] load_cmd_R7 ;
  logic [0:0] load_cmd_X7 ;
  assign load_cmd_C7 = | _003__C ;
  assign load_cmd_X7 = | _003__X ;
  assign _003__T = load_cmd ? ( { 1{ load_cmd_T  }} | reg2dp_cmd_src_ram_type_T ) : ( { 1{ load_cmd_T  }} | reg_cmd_src_ram_type_T );
  assign _003__S = load_cmd ? reg2dp_cmd_src_ram_type_S : reg_cmd_src_ram_type_S ;
  assign load_cmd_R7 = ( | (_003__R | ( _003__C & ( { 1{ load_cmd }} & reg2dp_cmd_src_ram_type_T | { 1{ !load_cmd }} & reg_cmd_src_ram_type_T )))) && reg2dp_cmd_src_ram_type != reg_cmd_src_ram_type ;
  logic [0:0] reg2dp_cmd_src_ram_type_C1 ;
  logic [0:0] reg2dp_cmd_src_ram_type_R1 ;
  logic [0:0] reg2dp_cmd_src_ram_type_X1 ;
  assign reg2dp_cmd_src_ram_type_C1 = { 1{ load_cmd }} ;
  assign reg2dp_cmd_src_ram_type_R1 = { 1{ load_cmd }} & ( _003__R | ( { 1{ load_cmd_T  }} & _003__C ));
  assign reg2dp_cmd_src_ram_type_X1 = { 1{ load_cmd }} & _003__X ;
  logic [0:0] reg_cmd_src_ram_type_C4 ;
  logic [0:0] reg_cmd_src_ram_type_R4 ;
  logic [0:0] reg_cmd_src_ram_type_X4 ;
  assign reg_cmd_src_ram_type_C4 = { 1{ !load_cmd }} ;
  assign reg_cmd_src_ram_type_R4 = { 1{ !load_cmd }} & ( _003__R | ( { 1{ load_cmd_T  }} & _003__C ));
  assign reg_cmd_src_ram_type_X4 = { 1{ !load_cmd }} & _003__X ;
  assign _011_ = cmd_ready ? cmd_valid : tran_valid;
  logic [0:0] cmd_ready_C3 ;
  logic [0:0] cmd_ready_R3 ;
  logic [0:0] cmd_ready_X3 ;
  assign cmd_ready_C3 = | _011__C ;
  assign cmd_ready_X3 = | _011__X ;
  assign _011__T = cmd_ready ? ( { 1{ cmd_ready_T  }} | cmd_valid_T ) : ( { 1{ cmd_ready_T  }} | tran_valid_T );
  assign _011__S = cmd_ready ? cmd_valid_S : tran_valid_S ;
  assign cmd_ready_R3 = ( | (_011__R | ( _011__C & ( { 1{ cmd_ready }} & cmd_valid_T | { 1{ !cmd_ready }} & tran_valid_T )))) && cmd_valid != tran_valid ;
  logic [0:0] cmd_valid_C1 ;
  logic [0:0] cmd_valid_R1 ;
  logic [0:0] cmd_valid_X1 ;
  assign cmd_valid_C1 = { 1{ cmd_ready }} ;
  assign cmd_valid_R1 = { 1{ cmd_ready }} & ( _011__R | ( { 1{ cmd_ready_T  }} & _011__C ));
  assign cmd_valid_X1 = { 1{ cmd_ready }} & _011__X ;
  logic [0:0] tran_valid_C5 ;
  logic [0:0] tran_valid_R5 ;
  logic [0:0] tran_valid_X5 ;
  assign tran_valid_C5 = { 1{ !cmd_ready }} ;
  assign tran_valid_R5 = { 1{ !cmd_ready }} & ( _011__R | ( { 1{ cmd_ready_T  }} & _011__C ));
  assign tran_valid_X5 = { 1{ !cmd_ready }} & _011__X ;
  logic [12:0] reg_line_size_R1 ;
  logic [12:0] reg_line_size_X1 ;
  logic [12:0] reg_line_size_C1 ;
  logic [63:0] line_addr_R2 ;
  logic [63:0] line_addr_X2 ;
  logic [63:0] line_addr_C2 ;
  logic [0:0] mc_dma_rd_req_vld_R0 ;
  logic [0:0] mc_dma_rd_req_vld_X0 ;
  logic [0:0] mc_dma_rd_req_vld_C0 ;
  logic [0:0] bdma2mcif_rd_req_ready_R0 ;
  logic [0:0] bdma2mcif_rd_req_ready_X0 ;
  logic [0:0] bdma2mcif_rd_req_ready_C0 ;
  logic [0:0] nvdla_core_rstn_R0 ;
  logic [0:0] nvdla_core_rstn_X0 ;
  logic [0:0] nvdla_core_rstn_C0 ;
// module: NV_NVDLA_BDMA_LOAD_pipe_p1
  NV_NVDLA_BDMA_LOAD_pipe_p1 pipe_p1 (
    .dma_rd_req_pd_T ( {  2'h0 , reg_line_size_T , line_addr_T  } ),
    .dma_rd_req_pd_R ( {  nouse_zy0 , reg_line_size_R1 , line_addr_R2  } ),
    .dma_rd_req_pd_X ( {  nouse_zy1 , reg_line_size_X1 , line_addr_X2  } ),
    .dma_rd_req_pd_C ( {  nouse_zy2 , reg_line_size_C1 , line_addr_C2  } ),
    .dma_rd_req_pd_S ( {  2'h0 , reg_line_size_S , line_addr_S  } ),
    .mc_dma_rd_req_vld_T (  mc_dma_rd_req_vld_T  ),
    .mc_dma_rd_req_vld_R (  mc_dma_rd_req_vld_R0  ),
    .mc_dma_rd_req_vld_X (  mc_dma_rd_req_vld_X0  ),
    .mc_dma_rd_req_vld_C (  mc_dma_rd_req_vld_C0  ),
    .mc_dma_rd_req_vld_S (  mc_dma_rd_req_vld_S  ),
    .mc_int_rd_req_ready_T (  bdma2mcif_rd_req_ready_T  ),
    .mc_int_rd_req_ready_R (  bdma2mcif_rd_req_ready_R0  ),
    .mc_int_rd_req_ready_X (  bdma2mcif_rd_req_ready_X0  ),
    .mc_int_rd_req_ready_C (  bdma2mcif_rd_req_ready_C0  ),
    .mc_int_rd_req_ready_S (  bdma2mcif_rd_req_ready_S  ),
    .nvdla_core_rstn_T (  nvdla_core_rstn_T  ),
    .nvdla_core_rstn_R (  nvdla_core_rstn_R0  ),
    .nvdla_core_rstn_X (  nvdla_core_rstn_X0  ),
    .nvdla_core_rstn_C (  nvdla_core_rstn_C0  ),
    .nvdla_core_rstn_S (  nvdla_core_rstn_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .mc_dma_rd_req_rdy_T (  mc_dma_rd_req_rdy_T  ),
    .mc_dma_rd_req_rdy_R0 (  mc_dma_rd_req_rdy_R  ),
    .mc_dma_rd_req_rdy_X0 (  mc_dma_rd_req_rdy_X  ),
    .mc_dma_rd_req_rdy_C0 (  mc_dma_rd_req_rdy_C  ),
    .mc_dma_rd_req_rdy_S ( mc_dma_rd_req_rdy_S ),
    .mc_int_rd_req_pd_T (  mc_int_rd_req_pd_T  ),
    .mc_int_rd_req_pd_R0 (  mc_int_rd_req_pd_R  ),
    .mc_int_rd_req_pd_X0 (  mc_int_rd_req_pd_X  ),
    .mc_int_rd_req_pd_C0 (  mc_int_rd_req_pd_C  ),
    .mc_int_rd_req_pd_S ( mc_int_rd_req_pd_S ),
    .mc_int_rd_req_valid_T (  mc_int_rd_req_valid_T  ),
    .mc_int_rd_req_valid_R0 (  mc_int_rd_req_valid_R  ),
    .mc_int_rd_req_valid_X0 (  mc_int_rd_req_valid_X  ),
    .mc_int_rd_req_valid_C0 (  mc_int_rd_req_valid_C  ),
    .mc_int_rd_req_valid_S ( mc_int_rd_req_valid_S ),
    .nvdla_core_clk ( nvdla_core_clk ),
    .nvdla_core_rstn ( nvdla_core_rstn ),
    .dma_rd_req_pd ( { 2'b00, reg_line_size, line_addr } ),
    .mc_dma_rd_req_rdy ( mc_dma_rd_req_rdy ),
    .mc_dma_rd_req_vld ( mc_dma_rd_req_vld ),
    .mc_int_rd_req_valid ( mc_int_rd_req_valid ),
    .mc_int_rd_req_pd ( mc_int_rd_req_pd ),
    .mc_int_rd_req_ready ( bdma2mcif_rd_req_ready )
  );
  logic [2-1:0] nouse_zy0 ;
  logic [2-1:0] nouse_zy1 ;
  logic [2-1:0] nouse_zy2 ;
  logic [0:0] cv_dma_rd_req_vld_R0 ;
  logic [0:0] cv_dma_rd_req_vld_X0 ;
  logic [0:0] cv_dma_rd_req_vld_C0 ;
  logic [0:0] bdma2cvif_rd_req_ready_R0 ;
  logic [0:0] bdma2cvif_rd_req_ready_X0 ;
  logic [0:0] bdma2cvif_rd_req_ready_C0 ;
  logic [12:0] reg_line_size_R2 ;
  logic [12:0] reg_line_size_X2 ;
  logic [12:0] reg_line_size_C2 ;
  logic [63:0] line_addr_R3 ;
  logic [63:0] line_addr_X3 ;
  logic [63:0] line_addr_C3 ;
  logic [0:0] nvdla_core_rstn_R1 ;
  logic [0:0] nvdla_core_rstn_X1 ;
  logic [0:0] nvdla_core_rstn_C1 ;
// module: NV_NVDLA_BDMA_LOAD_pipe_p2
  NV_NVDLA_BDMA_LOAD_pipe_p2 pipe_p2 (
    .cv_dma_rd_req_vld_T (  cv_dma_rd_req_vld_T  ),
    .cv_dma_rd_req_vld_R (  cv_dma_rd_req_vld_R0  ),
    .cv_dma_rd_req_vld_X (  cv_dma_rd_req_vld_X0  ),
    .cv_dma_rd_req_vld_C (  cv_dma_rd_req_vld_C0  ),
    .cv_dma_rd_req_vld_S (  cv_dma_rd_req_vld_S  ),
    .cv_int_rd_req_ready_T (  bdma2cvif_rd_req_ready_T  ),
    .cv_int_rd_req_ready_R (  bdma2cvif_rd_req_ready_R0  ),
    .cv_int_rd_req_ready_X (  bdma2cvif_rd_req_ready_X0  ),
    .cv_int_rd_req_ready_C (  bdma2cvif_rd_req_ready_C0  ),
    .cv_int_rd_req_ready_S (  bdma2cvif_rd_req_ready_S  ),
    .dma_rd_req_pd_T ( {  2'h0 , reg_line_size_T , line_addr_T  } ),
    .dma_rd_req_pd_R ( {  nouse_zy3 , reg_line_size_R2 , line_addr_R3  } ),
    .dma_rd_req_pd_X ( {  nouse_zy4 , reg_line_size_X2 , line_addr_X3  } ),
    .dma_rd_req_pd_C ( {  nouse_zy5 , reg_line_size_C2 , line_addr_C3  } ),
    .dma_rd_req_pd_S ( {  2'h0 , reg_line_size_S , line_addr_S  } ),
    .nvdla_core_rstn_T (  nvdla_core_rstn_T  ),
    .nvdla_core_rstn_R (  nvdla_core_rstn_R1  ),
    .nvdla_core_rstn_X (  nvdla_core_rstn_X1  ),
    .nvdla_core_rstn_C (  nvdla_core_rstn_C1  ),
    .nvdla_core_rstn_S (  nvdla_core_rstn_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .cv_dma_rd_req_rdy_T (  cv_dma_rd_req_rdy_T  ),
    .cv_dma_rd_req_rdy_R0 (  cv_dma_rd_req_rdy_R  ),
    .cv_dma_rd_req_rdy_X0 (  cv_dma_rd_req_rdy_X  ),
    .cv_dma_rd_req_rdy_C0 (  cv_dma_rd_req_rdy_C  ),
    .cv_dma_rd_req_rdy_S ( cv_dma_rd_req_rdy_S ),
    .cv_int_rd_req_pd_T (  cv_int_rd_req_pd_T  ),
    .cv_int_rd_req_pd_R0 (  cv_int_rd_req_pd_R  ),
    .cv_int_rd_req_pd_X0 (  cv_int_rd_req_pd_X  ),
    .cv_int_rd_req_pd_C0 (  cv_int_rd_req_pd_C  ),
    .cv_int_rd_req_pd_S ( cv_int_rd_req_pd_S ),
    .cv_int_rd_req_valid_T (  cv_int_rd_req_valid_T  ),
    .cv_int_rd_req_valid_R0 (  cv_int_rd_req_valid_R  ),
    .cv_int_rd_req_valid_X0 (  cv_int_rd_req_valid_X  ),
    .cv_int_rd_req_valid_C0 (  cv_int_rd_req_valid_C  ),
    .cv_int_rd_req_valid_S ( cv_int_rd_req_valid_S ),
    .nvdla_core_clk ( nvdla_core_clk ),
    .nvdla_core_rstn ( nvdla_core_rstn ),
    .dma_rd_req_pd ( { 2'b00, reg_line_size, line_addr } ),
    .cv_dma_rd_req_vld ( cv_dma_rd_req_vld ),
    .cv_int_rd_req_pd ( cv_int_rd_req_pd ),
    .cv_dma_rd_req_rdy ( cv_dma_rd_req_rdy ),
    .cv_int_rd_req_ready ( bdma2cvif_rd_req_ready ),
    .cv_int_rd_req_valid ( cv_int_rd_req_valid )
  );
  logic [2-1:0] nouse_zy3 ;
  logic [2-1:0] nouse_zy4 ;
  logic [2-1:0] nouse_zy5 ;
  assign bdma2cvif_rd_req_pd = cv_int_rd_req_pd;
  logic [78:0] cv_int_rd_req_pd_C0 ;
  logic [78:0] cv_int_rd_req_pd_R0 ;
  logic [78:0] cv_int_rd_req_pd_X0 ;
  assign bdma2cvif_rd_req_pd_T = cv_int_rd_req_pd_T ;
  assign cv_int_rd_req_pd_C0 = bdma2cvif_rd_req_pd_C ;
  assign cv_int_rd_req_pd_R0 = bdma2cvif_rd_req_pd_R ;
  assign cv_int_rd_req_pd_X0 = bdma2cvif_rd_req_pd_X ;
  assign bdma2cvif_rd_req_pd_S = cv_int_rd_req_pd_S ;
  assign bdma2cvif_rd_req_valid = cv_int_rd_req_valid;
  logic [0:0] cv_int_rd_req_valid_C0 ;
  logic [0:0] cv_int_rd_req_valid_R0 ;
  logic [0:0] cv_int_rd_req_valid_X0 ;
  assign bdma2cvif_rd_req_valid_T = cv_int_rd_req_valid_T ;
  assign cv_int_rd_req_valid_C0 = bdma2cvif_rd_req_valid_C ;
  assign cv_int_rd_req_valid_R0 = bdma2cvif_rd_req_valid_R ;
  assign cv_int_rd_req_valid_X0 = bdma2cvif_rd_req_valid_X ;
  assign bdma2cvif_rd_req_valid_S = cv_int_rd_req_valid_S ;
  assign bdma2mcif_rd_req_pd = mc_int_rd_req_pd;
  logic [78:0] mc_int_rd_req_pd_C0 ;
  logic [78:0] mc_int_rd_req_pd_R0 ;
  logic [78:0] mc_int_rd_req_pd_X0 ;
  assign bdma2mcif_rd_req_pd_T = mc_int_rd_req_pd_T ;
  assign mc_int_rd_req_pd_C0 = bdma2mcif_rd_req_pd_C ;
  assign mc_int_rd_req_pd_R0 = bdma2mcif_rd_req_pd_R ;
  assign mc_int_rd_req_pd_X0 = bdma2mcif_rd_req_pd_X ;
  assign bdma2mcif_rd_req_pd_S = mc_int_rd_req_pd_S ;
  assign bdma2mcif_rd_req_valid = mc_int_rd_req_valid;
  logic [0:0] mc_int_rd_req_valid_C0 ;
  logic [0:0] mc_int_rd_req_valid_R0 ;
  logic [0:0] mc_int_rd_req_valid_X0 ;
  assign bdma2mcif_rd_req_valid_T = mc_int_rd_req_valid_T ;
  assign mc_int_rd_req_valid_C0 = bdma2mcif_rd_req_valid_C ;
  assign mc_int_rd_req_valid_R0 = bdma2mcif_rd_req_valid_R ;
  assign mc_int_rd_req_valid_X0 = bdma2mcif_rd_req_valid_X ;
  assign bdma2mcif_rd_req_valid_S = mc_int_rd_req_valid_S ;
  assign cv_int_rd_req_pd_d0 = cv_int_rd_req_pd;
  logic [78:0] cv_int_rd_req_pd_C1 ;
  logic [78:0] cv_int_rd_req_pd_R1 ;
  logic [78:0] cv_int_rd_req_pd_X1 ;
  assign cv_int_rd_req_pd_d0_T = cv_int_rd_req_pd_T ;
  assign cv_int_rd_req_pd_C1 = cv_int_rd_req_pd_d0_C ;
  assign cv_int_rd_req_pd_R1 = cv_int_rd_req_pd_d0_R ;
  assign cv_int_rd_req_pd_X1 = cv_int_rd_req_pd_d0_X ;
  assign cv_int_rd_req_pd_d0_S = cv_int_rd_req_pd_S ;
  assign cv_int_rd_req_ready = bdma2cvif_rd_req_ready;
  logic [0:0] bdma2cvif_rd_req_ready_C1 ;
  logic [0:0] bdma2cvif_rd_req_ready_R1 ;
  logic [0:0] bdma2cvif_rd_req_ready_X1 ;
  assign cv_int_rd_req_ready_T = bdma2cvif_rd_req_ready_T ;
  assign bdma2cvif_rd_req_ready_C1 = cv_int_rd_req_ready_C ;
  assign bdma2cvif_rd_req_ready_R1 = cv_int_rd_req_ready_R ;
  assign bdma2cvif_rd_req_ready_X1 = cv_int_rd_req_ready_X ;
  assign cv_int_rd_req_ready_S = bdma2cvif_rd_req_ready_S ;
  assign cv_int_rd_req_ready_d0 = bdma2cvif_rd_req_ready;
  logic [0:0] bdma2cvif_rd_req_ready_C2 ;
  logic [0:0] bdma2cvif_rd_req_ready_R2 ;
  logic [0:0] bdma2cvif_rd_req_ready_X2 ;
  assign cv_int_rd_req_ready_d0_T = bdma2cvif_rd_req_ready_T ;
  assign bdma2cvif_rd_req_ready_C2 = cv_int_rd_req_ready_d0_C ;
  assign bdma2cvif_rd_req_ready_R2 = cv_int_rd_req_ready_d0_R ;
  assign bdma2cvif_rd_req_ready_X2 = cv_int_rd_req_ready_d0_X ;
  assign cv_int_rd_req_ready_d0_S = bdma2cvif_rd_req_ready_S ;
  assign cv_int_rd_req_valid_d0 = cv_int_rd_req_valid;
  logic [0:0] cv_int_rd_req_valid_C1 ;
  logic [0:0] cv_int_rd_req_valid_R1 ;
  logic [0:0] cv_int_rd_req_valid_X1 ;
  assign cv_int_rd_req_valid_d0_T = cv_int_rd_req_valid_T ;
  assign cv_int_rd_req_valid_C1 = cv_int_rd_req_valid_d0_C ;
  assign cv_int_rd_req_valid_R1 = cv_int_rd_req_valid_d0_R ;
  assign cv_int_rd_req_valid_X1 = cv_int_rd_req_valid_d0_X ;
  assign cv_int_rd_req_valid_d0_S = cv_int_rd_req_valid_S ;
  assign dma_rd_req_addr = line_addr;
  logic [63:0] line_addr_C4 ;
  logic [63:0] line_addr_R4 ;
  logic [63:0] line_addr_X4 ;
  assign dma_rd_req_addr_T = line_addr_T ;
  assign line_addr_C4 = dma_rd_req_addr_C ;
  assign line_addr_R4 = dma_rd_req_addr_R ;
  assign line_addr_X4 = dma_rd_req_addr_X ;
  assign dma_rd_req_addr_S = line_addr_S ;
  assign dma_rd_req_pd = { 2'b00, reg_line_size, line_addr };
  assign dma_rd_req_pd_T = {  2'h0 , reg_line_size_T , line_addr_T  };
  logic [13:0] dma_rd_req_pd_S ;
  assign dma_rd_req_pd_S = 0 ;
  logic [12:0] reg_line_size_R3 ;
  logic [12:0] reg_line_size_X3 ;
  logic [12:0] reg_line_size_C3 ;
  assign reg_line_size_R3 = dma_rd_req_pd_R [76:64] ;
  assign reg_line_size_X3 = dma_rd_req_pd_X [76:64] ;
  assign reg_line_size_C3 = dma_rd_req_pd_C [76:64] ;
  logic [63:0] line_addr_R5 ;
  logic [63:0] line_addr_X5 ;
  logic [63:0] line_addr_C5 ;
  assign line_addr_R5 = dma_rd_req_pd_R [63:0] ;
  assign line_addr_X5 = dma_rd_req_pd_X [63:0] ;
  assign line_addr_C5 = dma_rd_req_pd_C [63:0] ;
  assign dma_rd_req_size = { 2'b00, reg_line_size };
  assign dma_rd_req_size_T = {  2'h0 , reg_line_size_T  };
  logic [13:0] dma_rd_req_size_S ;
  assign dma_rd_req_size_S = 0 ;
  logic [12:0] reg_line_size_R4 ;
  logic [12:0] reg_line_size_X4 ;
  logic [12:0] reg_line_size_C4 ;
  assign reg_line_size_R4 = dma_rd_req_size_R [12:0] ;
  assign reg_line_size_X4 = dma_rd_req_size_X [12:0] ;
  assign reg_line_size_C4 = dma_rd_req_size_C [12:0] ;
  assign dma_rd_req_type = reg_cmd_src_ram_type;
  logic [0:0] reg_cmd_src_ram_type_C5 ;
  logic [0:0] reg_cmd_src_ram_type_R5 ;
  logic [0:0] reg_cmd_src_ram_type_X5 ;
  assign dma_rd_req_type_T = reg_cmd_src_ram_type_T ;
  assign reg_cmd_src_ram_type_C5 = dma_rd_req_type_C ;
  assign reg_cmd_src_ram_type_R5 = dma_rd_req_type_R ;
  assign reg_cmd_src_ram_type_X5 = dma_rd_req_type_X ;
  assign dma_rd_req_type_S = reg_cmd_src_ram_type_S ;
  assign dma_rd_req_vld = tran_valid;
  logic [0:0] tran_valid_C6 ;
  logic [0:0] tran_valid_R6 ;
  logic [0:0] tran_valid_X6 ;
  assign dma_rd_req_vld_T = tran_valid_T ;
  assign tran_valid_C6 = dma_rd_req_vld_C ;
  assign tran_valid_R6 = dma_rd_req_vld_R ;
  assign tran_valid_X6 = dma_rd_req_vld_X ;
  assign dma_rd_req_vld_S = tran_valid_S ;
  assign is_last_req_in_line = 1'b1;
  assign is_last_req_in_line_T = 0 ;
  assign is_last_req_in_line_S = 14'b1 ;
  assign ld2csb_idle = ld_idle;
  logic [0:0] ld_idle_C2 ;
  logic [0:0] ld_idle_R2 ;
  logic [0:0] ld_idle_X2 ;
  assign ld2csb_idle_T = ld_idle_T ;
  assign ld_idle_C2 = ld2csb_idle_C ;
  assign ld_idle_R2 = ld2csb_idle_R ;
  assign ld_idle_X2 = ld2csb_idle_X ;
  assign ld2csb_idle_S = ld_idle_S ;
  assign ld2st_addr = { reg2dp_dst_addr_high_v8, reg2dp_dst_addr_low_v32, 5'b00000 };
  assign ld2st_addr_T = {  reg2dp_dst_addr_high_v8_T , reg2dp_dst_addr_low_v32_T , 5'h0  };
  logic [13:0] ld2st_addr_S ;
  assign ld2st_addr_S = 0 ;
  logic [31:0] reg2dp_dst_addr_high_v8_R0 ;
  logic [31:0] reg2dp_dst_addr_high_v8_X0 ;
  logic [31:0] reg2dp_dst_addr_high_v8_C0 ;
  assign reg2dp_dst_addr_high_v8_R0 = ld2st_addr_R [63:32] ;
  assign reg2dp_dst_addr_high_v8_X0 = ld2st_addr_X [63:32] ;
  assign reg2dp_dst_addr_high_v8_C0 = ld2st_addr_C [63:32] ;
  logic [26:0] reg2dp_dst_addr_low_v32_R0 ;
  logic [26:0] reg2dp_dst_addr_low_v32_X0 ;
  logic [26:0] reg2dp_dst_addr_low_v32_C0 ;
  assign reg2dp_dst_addr_low_v32_R0 = ld2st_addr_R [31:5] ;
  assign reg2dp_dst_addr_low_v32_X0 = ld2st_addr_X [31:5] ;
  assign reg2dp_dst_addr_low_v32_C0 = ld2st_addr_C [31:5] ;
  assign ld2st_cmd_dst_ram_type = reg2dp_cmd_dst_ram_type;
  logic [0:0] reg2dp_cmd_dst_ram_type_C0 ;
  logic [0:0] reg2dp_cmd_dst_ram_type_R0 ;
  logic [0:0] reg2dp_cmd_dst_ram_type_X0 ;
  assign ld2st_cmd_dst_ram_type_T = reg2dp_cmd_dst_ram_type_T ;
  assign reg2dp_cmd_dst_ram_type_C0 = ld2st_cmd_dst_ram_type_C ;
  assign reg2dp_cmd_dst_ram_type_R0 = ld2st_cmd_dst_ram_type_R ;
  assign reg2dp_cmd_dst_ram_type_X0 = ld2st_cmd_dst_ram_type_X ;
  assign ld2st_cmd_dst_ram_type_S = reg2dp_cmd_dst_ram_type_S ;
  assign ld2st_cmd_interrupt = reg2dp_cmd_interrupt;
  logic [0:0] reg2dp_cmd_interrupt_C0 ;
  logic [0:0] reg2dp_cmd_interrupt_R0 ;
  logic [0:0] reg2dp_cmd_interrupt_X0 ;
  assign ld2st_cmd_interrupt_T = reg2dp_cmd_interrupt_T ;
  assign reg2dp_cmd_interrupt_C0 = ld2st_cmd_interrupt_C ;
  assign reg2dp_cmd_interrupt_R0 = ld2st_cmd_interrupt_R ;
  assign reg2dp_cmd_interrupt_X0 = ld2st_cmd_interrupt_X ;
  assign ld2st_cmd_interrupt_S = reg2dp_cmd_interrupt_S ;
  assign ld2st_cmd_interrupt_ptr = reg2dp_cmd_interrupt_ptr;
  logic [0:0] reg2dp_cmd_interrupt_ptr_C2 ;
  logic [0:0] reg2dp_cmd_interrupt_ptr_R2 ;
  logic [0:0] reg2dp_cmd_interrupt_ptr_X2 ;
  assign ld2st_cmd_interrupt_ptr_T = reg2dp_cmd_interrupt_ptr_T ;
  assign reg2dp_cmd_interrupt_ptr_C2 = ld2st_cmd_interrupt_ptr_C ;
  assign reg2dp_cmd_interrupt_ptr_R2 = ld2st_cmd_interrupt_ptr_R ;
  assign reg2dp_cmd_interrupt_ptr_X2 = ld2st_cmd_interrupt_ptr_X ;
  assign ld2st_cmd_interrupt_ptr_S = reg2dp_cmd_interrupt_ptr_S ;
  assign ld2st_cmd_src_ram_type = reg2dp_cmd_src_ram_type;
  logic [0:0] reg2dp_cmd_src_ram_type_C2 ;
  logic [0:0] reg2dp_cmd_src_ram_type_R2 ;
  logic [0:0] reg2dp_cmd_src_ram_type_X2 ;
  assign ld2st_cmd_src_ram_type_T = reg2dp_cmd_src_ram_type_T ;
  assign reg2dp_cmd_src_ram_type_C2 = ld2st_cmd_src_ram_type_C ;
  assign reg2dp_cmd_src_ram_type_R2 = ld2st_cmd_src_ram_type_R ;
  assign reg2dp_cmd_src_ram_type_X2 = ld2st_cmd_src_ram_type_X ;
  assign ld2st_cmd_src_ram_type_S = reg2dp_cmd_src_ram_type_S ;
  assign ld2st_line_repeat_number = reg2dp_line_repeat_number;
  logic [23:0] reg2dp_line_repeat_number_C1 ;
  logic [23:0] reg2dp_line_repeat_number_R1 ;
  logic [23:0] reg2dp_line_repeat_number_X1 ;
  assign ld2st_line_repeat_number_T = reg2dp_line_repeat_number_T ;
  assign reg2dp_line_repeat_number_C1 = ld2st_line_repeat_number_C ;
  assign reg2dp_line_repeat_number_R1 = ld2st_line_repeat_number_R ;
  assign reg2dp_line_repeat_number_X1 = ld2st_line_repeat_number_X ;
  assign ld2st_line_repeat_number_S = reg2dp_line_repeat_number_S ;
  assign ld2st_line_size = reg2dp_line_size;
  logic [12:0] reg2dp_line_size_C1 ;
  logic [12:0] reg2dp_line_size_R1 ;
  logic [12:0] reg2dp_line_size_X1 ;
  assign ld2st_line_size_T = reg2dp_line_size_T ;
  assign reg2dp_line_size_C1 = ld2st_line_size_C ;
  assign reg2dp_line_size_R1 = ld2st_line_size_R ;
  assign reg2dp_line_size_X1 = ld2st_line_size_X ;
  assign ld2st_line_size_S = reg2dp_line_size_S ;
  assign ld2st_line_stride = reg2dp_dst_line_stride;
  logic [26:0] reg2dp_dst_line_stride_C0 ;
  logic [26:0] reg2dp_dst_line_stride_R0 ;
  logic [26:0] reg2dp_dst_line_stride_X0 ;
  assign ld2st_line_stride_T = reg2dp_dst_line_stride_T ;
  assign reg2dp_dst_line_stride_C0 = ld2st_line_stride_C ;
  assign reg2dp_dst_line_stride_R0 = ld2st_line_stride_R ;
  assign reg2dp_dst_line_stride_X0 = ld2st_line_stride_X ;
  assign ld2st_line_stride_S = reg2dp_dst_line_stride_S ;
  assign ld2st_surf_repeat_number = reg2dp_surf_repeat_number;
  logic [23:0] reg2dp_surf_repeat_number_C1 ;
  logic [23:0] reg2dp_surf_repeat_number_R1 ;
  logic [23:0] reg2dp_surf_repeat_number_X1 ;
  assign ld2st_surf_repeat_number_T = reg2dp_surf_repeat_number_T ;
  assign reg2dp_surf_repeat_number_C1 = ld2st_surf_repeat_number_C ;
  assign reg2dp_surf_repeat_number_R1 = ld2st_surf_repeat_number_R ;
  assign reg2dp_surf_repeat_number_X1 = ld2st_surf_repeat_number_X ;
  assign ld2st_surf_repeat_number_S = reg2dp_surf_repeat_number_S ;
  assign ld2st_surf_stride = reg2dp_dst_surf_stride;
  logic [26:0] reg2dp_dst_surf_stride_C0 ;
  logic [26:0] reg2dp_dst_surf_stride_R0 ;
  logic [26:0] reg2dp_dst_surf_stride_X0 ;
  assign ld2st_surf_stride_T = reg2dp_dst_surf_stride_T ;
  assign reg2dp_dst_surf_stride_C0 = ld2st_surf_stride_C ;
  assign reg2dp_dst_surf_stride_R0 = ld2st_surf_stride_R ;
  assign reg2dp_dst_surf_stride_X0 = ld2st_surf_stride_X ;
  assign ld2st_surf_stride_S = reg2dp_dst_surf_stride_S ;
  assign ld2st_wr_pd = { reg2dp_surf_repeat_number[12:0], reg2dp_dst_surf_stride, reg2dp_line_repeat_number[12:0], reg2dp_dst_line_stride, reg2dp_cmd_interrupt_ptr, reg2dp_cmd_interrupt, reg2dp_cmd_dst_ram_type, reg2dp_cmd_src_ram_type, reg2dp_line_size, reg2dp_dst_addr_high_v8, reg2dp_dst_addr_low_v32, 5'b00000 };
  assign ld2st_wr_pd_T = {  reg2dp_surf_repeat_number_T [12:0] , reg2dp_dst_surf_stride_T , reg2dp_line_repeat_number_T [12:0] , reg2dp_dst_line_stride_T , reg2dp_cmd_interrupt_ptr_T , reg2dp_cmd_interrupt_T , reg2dp_cmd_dst_ram_type_T , reg2dp_cmd_src_ram_type_T , reg2dp_line_size_T , reg2dp_dst_addr_high_v8_T , reg2dp_dst_addr_low_v32_T , 5'h0  };
  logic [13:0] ld2st_wr_pd_S ;
  assign ld2st_wr_pd_S = 0 ;
  logic [23:0] reg2dp_surf_repeat_number_R2 ;
  logic [23:0] reg2dp_surf_repeat_number_X2 ;
  logic [23:0] reg2dp_surf_repeat_number_C2 ;
  assign reg2dp_surf_repeat_number_R2 [12:0] = ld2st_wr_pd_R [160:148] ;
  assign reg2dp_surf_repeat_number_X2 [12:0] = ld2st_wr_pd_X [160:148] ;
  assign reg2dp_surf_repeat_number_C2 [12:0] = ld2st_wr_pd_C [160:148] ;
  logic [26:0] reg2dp_dst_surf_stride_R1 ;
  logic [26:0] reg2dp_dst_surf_stride_X1 ;
  logic [26:0] reg2dp_dst_surf_stride_C1 ;
  assign reg2dp_dst_surf_stride_R1 = ld2st_wr_pd_R [147:121] ;
  assign reg2dp_dst_surf_stride_X1 = ld2st_wr_pd_X [147:121] ;
  assign reg2dp_dst_surf_stride_C1 = ld2st_wr_pd_C [147:121] ;
  logic [23:0] reg2dp_line_repeat_number_R2 ;
  logic [23:0] reg2dp_line_repeat_number_X2 ;
  logic [23:0] reg2dp_line_repeat_number_C2 ;
  assign reg2dp_line_repeat_number_R2 [12:0] = ld2st_wr_pd_R [120:108] ;
  assign reg2dp_line_repeat_number_X2 [12:0] = ld2st_wr_pd_X [120:108] ;
  assign reg2dp_line_repeat_number_C2 [12:0] = ld2st_wr_pd_C [120:108] ;
  logic [26:0] reg2dp_dst_line_stride_R1 ;
  logic [26:0] reg2dp_dst_line_stride_X1 ;
  logic [26:0] reg2dp_dst_line_stride_C1 ;
  assign reg2dp_dst_line_stride_R1 = ld2st_wr_pd_R [107:81] ;
  assign reg2dp_dst_line_stride_X1 = ld2st_wr_pd_X [107:81] ;
  assign reg2dp_dst_line_stride_C1 = ld2st_wr_pd_C [107:81] ;
  logic [0:0] reg2dp_cmd_interrupt_ptr_R3 ;
  logic [0:0] reg2dp_cmd_interrupt_ptr_X3 ;
  logic [0:0] reg2dp_cmd_interrupt_ptr_C3 ;
  assign reg2dp_cmd_interrupt_ptr_R3 = ld2st_wr_pd_R [80:80] ;
  assign reg2dp_cmd_interrupt_ptr_X3 = ld2st_wr_pd_X [80:80] ;
  assign reg2dp_cmd_interrupt_ptr_C3 = ld2st_wr_pd_C [80:80] ;
  logic [0:0] reg2dp_cmd_interrupt_R1 ;
  logic [0:0] reg2dp_cmd_interrupt_X1 ;
  logic [0:0] reg2dp_cmd_interrupt_C1 ;
  assign reg2dp_cmd_interrupt_R1 = ld2st_wr_pd_R [79:79] ;
  assign reg2dp_cmd_interrupt_X1 = ld2st_wr_pd_X [79:79] ;
  assign reg2dp_cmd_interrupt_C1 = ld2st_wr_pd_C [79:79] ;
  logic [0:0] reg2dp_cmd_dst_ram_type_R1 ;
  logic [0:0] reg2dp_cmd_dst_ram_type_X1 ;
  logic [0:0] reg2dp_cmd_dst_ram_type_C1 ;
  assign reg2dp_cmd_dst_ram_type_R1 = ld2st_wr_pd_R [78:78] ;
  assign reg2dp_cmd_dst_ram_type_X1 = ld2st_wr_pd_X [78:78] ;
  assign reg2dp_cmd_dst_ram_type_C1 = ld2st_wr_pd_C [78:78] ;
  logic [0:0] reg2dp_cmd_src_ram_type_R3 ;
  logic [0:0] reg2dp_cmd_src_ram_type_X3 ;
  logic [0:0] reg2dp_cmd_src_ram_type_C3 ;
  assign reg2dp_cmd_src_ram_type_R3 = ld2st_wr_pd_R [77:77] ;
  assign reg2dp_cmd_src_ram_type_X3 = ld2st_wr_pd_X [77:77] ;
  assign reg2dp_cmd_src_ram_type_C3 = ld2st_wr_pd_C [77:77] ;
  logic [12:0] reg2dp_line_size_R2 ;
  logic [12:0] reg2dp_line_size_X2 ;
  logic [12:0] reg2dp_line_size_C2 ;
  assign reg2dp_line_size_R2 = ld2st_wr_pd_R [76:64] ;
  assign reg2dp_line_size_X2 = ld2st_wr_pd_X [76:64] ;
  assign reg2dp_line_size_C2 = ld2st_wr_pd_C [76:64] ;
  logic [31:0] reg2dp_dst_addr_high_v8_R1 ;
  logic [31:0] reg2dp_dst_addr_high_v8_X1 ;
  logic [31:0] reg2dp_dst_addr_high_v8_C1 ;
  assign reg2dp_dst_addr_high_v8_R1 = ld2st_wr_pd_R [63:32] ;
  assign reg2dp_dst_addr_high_v8_X1 = ld2st_wr_pd_X [63:32] ;
  assign reg2dp_dst_addr_high_v8_C1 = ld2st_wr_pd_C [63:32] ;
  logic [26:0] reg2dp_dst_addr_low_v32_R1 ;
  logic [26:0] reg2dp_dst_addr_low_v32_X1 ;
  logic [26:0] reg2dp_dst_addr_low_v32_C1 ;
  assign reg2dp_dst_addr_low_v32_R1 = ld2st_wr_pd_R [31:5] ;
  assign reg2dp_dst_addr_low_v32_X1 = ld2st_wr_pd_X [31:5] ;
  assign reg2dp_dst_addr_low_v32_C1 = ld2st_wr_pd_C [31:5] ;
  assign mc_int_rd_req_pd_d0 = mc_int_rd_req_pd;
  logic [78:0] mc_int_rd_req_pd_C1 ;
  logic [78:0] mc_int_rd_req_pd_R1 ;
  logic [78:0] mc_int_rd_req_pd_X1 ;
  assign mc_int_rd_req_pd_d0_T = mc_int_rd_req_pd_T ;
  assign mc_int_rd_req_pd_C1 = mc_int_rd_req_pd_d0_C ;
  assign mc_int_rd_req_pd_R1 = mc_int_rd_req_pd_d0_R ;
  assign mc_int_rd_req_pd_X1 = mc_int_rd_req_pd_d0_X ;
  assign mc_int_rd_req_pd_d0_S = mc_int_rd_req_pd_S ;
  assign mc_int_rd_req_ready = bdma2mcif_rd_req_ready;
  logic [0:0] bdma2mcif_rd_req_ready_C1 ;
  logic [0:0] bdma2mcif_rd_req_ready_R1 ;
  logic [0:0] bdma2mcif_rd_req_ready_X1 ;
  assign mc_int_rd_req_ready_T = bdma2mcif_rd_req_ready_T ;
  assign bdma2mcif_rd_req_ready_C1 = mc_int_rd_req_ready_C ;
  assign bdma2mcif_rd_req_ready_R1 = mc_int_rd_req_ready_R ;
  assign bdma2mcif_rd_req_ready_X1 = mc_int_rd_req_ready_X ;
  assign mc_int_rd_req_ready_S = bdma2mcif_rd_req_ready_S ;
  assign mc_int_rd_req_ready_d0 = bdma2mcif_rd_req_ready;
  logic [0:0] bdma2mcif_rd_req_ready_C2 ;
  logic [0:0] bdma2mcif_rd_req_ready_R2 ;
  logic [0:0] bdma2mcif_rd_req_ready_X2 ;
  assign mc_int_rd_req_ready_d0_T = bdma2mcif_rd_req_ready_T ;
  assign bdma2mcif_rd_req_ready_C2 = mc_int_rd_req_ready_d0_C ;
  assign bdma2mcif_rd_req_ready_R2 = mc_int_rd_req_ready_d0_R ;
  assign bdma2mcif_rd_req_ready_X2 = mc_int_rd_req_ready_d0_X ;
  assign mc_int_rd_req_ready_d0_S = bdma2mcif_rd_req_ready_S ;
  assign mc_int_rd_req_valid_d0 = mc_int_rd_req_valid;
  logic [0:0] mc_int_rd_req_valid_C1 ;
  logic [0:0] mc_int_rd_req_valid_R1 ;
  logic [0:0] mc_int_rd_req_valid_X1 ;
  assign mc_int_rd_req_valid_d0_T = mc_int_rd_req_valid_T ;
  assign mc_int_rd_req_valid_C1 = mc_int_rd_req_valid_d0_C ;
  assign mc_int_rd_req_valid_R1 = mc_int_rd_req_valid_d0_R ;
  assign mc_int_rd_req_valid_X1 = mc_int_rd_req_valid_d0_X ;
  assign mc_int_rd_req_valid_d0_S = mc_int_rd_req_valid_S ;
  assign rd_req_rdyi = dma_rd_req_rdy;
  logic [0:0] dma_rd_req_rdy_C2 ;
  logic [0:0] dma_rd_req_rdy_R2 ;
  logic [0:0] dma_rd_req_rdy_X2 ;
  assign rd_req_rdyi_T = dma_rd_req_rdy_T ;
  assign dma_rd_req_rdy_C2 = rd_req_rdyi_C ;
  assign dma_rd_req_rdy_R2 = rd_req_rdyi_R ;
  assign dma_rd_req_rdy_X2 = rd_req_rdyi_X ;
  assign rd_req_rdyi_S = dma_rd_req_rdy_S ;
  assign reg2dp_addr = { reg2dp_src_addr_high_v8[22:0], reg2dp_src_addr_low_v32, 5'b00000 };
  assign reg2dp_addr_T = {  reg2dp_src_addr_high_v8_T [22:0] , reg2dp_src_addr_low_v32_T , 5'h0  };
  logic [13:0] reg2dp_addr_S ;
  assign reg2dp_addr_S = 0 ;
  logic [31:0] reg2dp_src_addr_high_v8_R2 ;
  logic [31:0] reg2dp_src_addr_high_v8_X2 ;
  logic [31:0] reg2dp_src_addr_high_v8_C2 ;
  assign reg2dp_src_addr_high_v8_R2 [22:0] = reg2dp_addr_R [54:32] ;
  assign reg2dp_src_addr_high_v8_X2 [22:0] = reg2dp_addr_X [54:32] ;
  assign reg2dp_src_addr_high_v8_C2 [22:0] = reg2dp_addr_C [54:32] ;
  logic [26:0] reg2dp_src_addr_low_v32_R2 ;
  logic [26:0] reg2dp_src_addr_low_v32_X2 ;
  logic [26:0] reg2dp_src_addr_low_v32_C2 ;
  assign reg2dp_src_addr_low_v32_R2 = reg2dp_addr_R [31:5] ;
  assign reg2dp_src_addr_low_v32_X2 = reg2dp_addr_X [31:5] ;
  assign reg2dp_src_addr_low_v32_C2 = reg2dp_addr_C [31:5] ;
  assign reg2dp_dst_addr = { reg2dp_dst_addr_high_v8, reg2dp_dst_addr_low_v32, 5'b00000 };
  assign reg2dp_dst_addr_T = {  reg2dp_dst_addr_high_v8_T , reg2dp_dst_addr_low_v32_T , 5'h0  };
  logic [13:0] reg2dp_dst_addr_S ;
  assign reg2dp_dst_addr_S = 0 ;
  logic [31:0] reg2dp_dst_addr_high_v8_R2 ;
  logic [31:0] reg2dp_dst_addr_high_v8_X2 ;
  logic [31:0] reg2dp_dst_addr_high_v8_C2 ;
  assign reg2dp_dst_addr_high_v8_R2 = reg2dp_dst_addr_R [63:32] ;
  assign reg2dp_dst_addr_high_v8_X2 = reg2dp_dst_addr_X [63:32] ;
  assign reg2dp_dst_addr_high_v8_C2 = reg2dp_dst_addr_C [63:32] ;
  logic [26:0] reg2dp_dst_addr_low_v32_R2 ;
  logic [26:0] reg2dp_dst_addr_low_v32_X2 ;
  logic [26:0] reg2dp_dst_addr_low_v32_C2 ;
  assign reg2dp_dst_addr_low_v32_R2 = reg2dp_dst_addr_R [31:5] ;
  assign reg2dp_dst_addr_low_v32_X2 = reg2dp_dst_addr_X [31:5] ;
  assign reg2dp_dst_addr_low_v32_C2 = reg2dp_dst_addr_C [31:5] ;
  assign reg2dp_src_line_stride_ext = { reg2dp_src_line_stride, 5'b00000 };
  assign reg2dp_src_line_stride_ext_T = {  reg2dp_src_line_stride_T , 5'h0  };
  logic [13:0] reg2dp_src_line_stride_ext_S ;
  assign reg2dp_src_line_stride_ext_S = 0 ;
  logic [26:0] reg2dp_src_line_stride_R1 ;
  logic [26:0] reg2dp_src_line_stride_X1 ;
  logic [26:0] reg2dp_src_line_stride_C1 ;
  assign reg2dp_src_line_stride_R1 = reg2dp_src_line_stride_ext_R [31:5] ;
  assign reg2dp_src_line_stride_X1 = reg2dp_src_line_stride_ext_X [31:5] ;
  assign reg2dp_src_line_stride_C1 = reg2dp_src_line_stride_ext_C [31:5] ;
  assign reg2dp_src_surf_stride_ext = { reg2dp_src_surf_stride, 5'b00000 };
  assign reg2dp_src_surf_stride_ext_T = {  reg2dp_src_surf_stride_T , 5'h0  };
  logic [13:0] reg2dp_src_surf_stride_ext_S ;
  assign reg2dp_src_surf_stride_ext_S = 0 ;
  logic [26:0] reg2dp_src_surf_stride_R1 ;
  logic [26:0] reg2dp_src_surf_stride_X1 ;
  logic [26:0] reg2dp_src_surf_stride_C1 ;
  assign reg2dp_src_surf_stride_R1 = reg2dp_src_surf_stride_ext_R [31:5] ;
  assign reg2dp_src_surf_stride_X1 = reg2dp_src_surf_stride_ext_X [31:5] ;
  assign reg2dp_src_surf_stride_C1 = reg2dp_src_surf_stride_ext_C [31:5] ;
  assign tran_addr = line_addr;
  logic [63:0] line_addr_C6 ;
  logic [63:0] line_addr_R6 ;
  logic [63:0] line_addr_X6 ;
  assign tran_addr_T = line_addr_T ;
  assign line_addr_C6 = tran_addr_C ;
  assign line_addr_R6 = tran_addr_R ;
  assign line_addr_X6 = tran_addr_X ;
  assign tran_addr_S = line_addr_S ;
  assign tran_ready = dma_rd_req_rdy;
  logic [0:0] dma_rd_req_rdy_C3 ;
  logic [0:0] dma_rd_req_rdy_R3 ;
  logic [0:0] dma_rd_req_rdy_X3 ;
  assign tran_ready_T = dma_rd_req_rdy_T ;
  assign dma_rd_req_rdy_C3 = tran_ready_C ;
  assign dma_rd_req_rdy_R3 = tran_ready_R ;
  assign dma_rd_req_rdy_X3 = tran_ready_X ;
  assign tran_ready_S = dma_rd_req_rdy_S ;
  assign tran_size = { 2'b00, reg_line_size };
  assign tran_size_T = {  2'h0 , reg_line_size_T  };
  logic [13:0] tran_size_S ;
  assign tran_size_S = 0 ;
  logic [12:0] reg_line_size_R5 ;
  logic [12:0] reg_line_size_X5 ;
  logic [12:0] reg_line_size_C5 ;
  assign reg_line_size_R5 = tran_size_R [12:0] ;
  assign reg_line_size_X5 = tran_size_X [12:0] ;
  assign reg_line_size_C5 = tran_size_C [12:0] ;
  assign reg2dp_dst_surf_stride_C = ( reg2dp_dst_surf_stride_C0 ) | ( reg2dp_dst_surf_stride_C1 );
  assign reg2dp_dst_line_stride_C = ( reg2dp_dst_line_stride_C0 ) | ( reg2dp_dst_line_stride_C1 );
  assign reg2dp_cmd_interrupt_C = ( reg2dp_cmd_interrupt_C0 ) | ( reg2dp_cmd_interrupt_C1 );
  assign reg2dp_cmd_dst_ram_type_C = ( reg2dp_cmd_dst_ram_type_C0 ) | ( reg2dp_cmd_dst_ram_type_C1 );
  assign reg2dp_dst_addr_low_v32_C = ( reg2dp_dst_addr_low_v32_C0 ) | ( reg2dp_dst_addr_low_v32_C1 ) | ( reg2dp_dst_addr_low_v32_C2 );
  assign reg2dp_dst_addr_high_v8_C = ( reg2dp_dst_addr_high_v8_C0 ) | ( reg2dp_dst_addr_high_v8_C1 ) | ( reg2dp_dst_addr_high_v8_C2 );
  assign mc_int_rd_req_valid_C = ( mc_int_rd_req_valid_C0 ) | ( mc_int_rd_req_valid_C1 );
  assign mc_int_rd_req_pd_C = ( mc_int_rd_req_pd_C0 ) | ( mc_int_rd_req_pd_C1 );
  assign cv_int_rd_req_valid_C = ( cv_int_rd_req_valid_C0 ) | ( cv_int_rd_req_valid_C1 );
  assign cv_int_rd_req_pd_C = ( cv_int_rd_req_pd_C0 ) | ( cv_int_rd_req_pd_C1 );
  assign bdma2cvif_rd_req_ready_C = ( bdma2cvif_rd_req_ready_C0 ) | ( bdma2cvif_rd_req_ready_C1 ) | ( bdma2cvif_rd_req_ready_C2 );
  assign cv_dma_rd_req_vld_C = ( cv_dma_rd_req_vld_C0 );
  assign nvdla_core_rstn_C = ( nvdla_core_rstn_C0 ) | ( nvdla_core_rstn_C1 );
  assign bdma2mcif_rd_req_ready_C = ( bdma2mcif_rd_req_ready_C0 ) | ( bdma2mcif_rd_req_ready_C1 ) | ( bdma2mcif_rd_req_ready_C2 );
  assign mc_dma_rd_req_vld_C = ( mc_dma_rd_req_vld_C0 );
  assign reg2dp_line_repeat_number_C = ( reg2dp_line_repeat_number_C0 ) | ( reg2dp_line_repeat_number_C1 ) | ( reg2dp_line_repeat_number_C2 );
  assign reg_line_size_C = ( reg_line_size_C0 ) | ( reg_line_size_C1 ) | ( reg_line_size_C2 ) | ( reg_line_size_C3 ) | ( reg_line_size_C4 ) | ( reg_line_size_C5 );
  assign reg2dp_line_size_C = ( reg2dp_line_size_C0 ) | ( reg2dp_line_size_C1 ) | ( reg2dp_line_size_C2 );
  assign fangyuan3_C = ( fangyuan3_C0 );
  assign reg2dp_src_line_stride_C = ( reg2dp_src_line_stride_C0 ) | ( reg2dp_src_line_stride_C1 );
  assign reg2dp_surf_repeat_number_C = ( reg2dp_surf_repeat_number_C0 ) | ( reg2dp_surf_repeat_number_C1 ) | ( reg2dp_surf_repeat_number_C2 );
  assign fangyuan2_C = ( fangyuan2_C0 );
  assign reg2dp_src_surf_stride_C = ( reg2dp_src_surf_stride_C0 ) | ( reg2dp_src_surf_stride_C1 );
  assign _034__C = ( _034__C0 );
  assign fangyuan1_C = ( fangyuan1_C0 );
  assign _033__C = ( _033__C0 );
  assign _013__C = ( _013__C0 );
  assign _032__C = ( _032__C0 );
  assign fangyuan0_C = ( fangyuan0_C0 );
  assign load_cmd_C = ( load_cmd_C0 ) | ( load_cmd_C1 ) | ( load_cmd_C2 ) | ( load_cmd_C3 ) | ( load_cmd_C4 ) | ( load_cmd_C5 ) | ( load_cmd_C6 ) | ( load_cmd_C7 );
  assign reg2dp_src_addr_low_v32_C = ( reg2dp_src_addr_low_v32_C0 ) | ( reg2dp_src_addr_low_v32_C1 ) | ( reg2dp_src_addr_low_v32_C2 );
  assign _031__C = ( _031__C0 );
  assign _012__C = ( _012__C0 ) | ( _012__C1 );
  assign _030__C = ( _030__C0 );
  assign _014__C = ( _014__C0 );
  assign _029__C = ( _029__C0 );
  assign _028__C = ( _028__C0 );
  assign _015__C = ( _015__C0 );
  assign _011__C = ( _011__C0 );
  assign _000__C = ( _000__C0 );
  assign _008__C = ( _008__C0 );
  assign _007__C = ( _007__C0 );
  assign _006__C = ( _006__C0 );
  assign _005__C = ( _005__C0 );
  assign _004__C = ( _004__C0 );
  assign _003__C = ( _003__C0 );
  assign _001__C = ( _001__C0 );
  assign _009__C = ( _009__C0 );
  assign _002__C = ( _002__C0 );
  assign _010__C = ( _010__C0 );
  assign cv_rd_req_rdyi_C = ( cv_rd_req_rdyi_C0 );
  assign mc_rd_req_rdyi_C = ( mc_rd_req_rdyi_C0 );
  assign _019__C = ( _019__C0 );
  assign reg2dp_cmd_src_ram_type_C = ( reg2dp_cmd_src_ram_type_C0 ) | ( reg2dp_cmd_src_ram_type_C1 ) | ( reg2dp_cmd_src_ram_type_C2 ) | ( reg2dp_cmd_src_ram_type_C3 );
  assign _025__C = ( _025__C0 );
  assign _020__C = ( _020__C0 );
  assign is_src_ram_type_switching_C = ( is_src_ram_type_switching_C0 );
  assign reg_surf_repeat_number_C = ( reg_surf_repeat_number_C0 ) | ( reg_surf_repeat_number_C1 );
  assign reg_line_repeat_number_C = ( reg_line_repeat_number_C0 ) | ( reg_line_repeat_number_C1 );
  assign reg2dp_cmd_interrupt_ptr_C = ( reg2dp_cmd_interrupt_ptr_C0 ) | ( reg2dp_cmd_interrupt_ptr_C1 ) | ( reg2dp_cmd_interrupt_ptr_C2 ) | ( reg2dp_cmd_interrupt_ptr_C3 );
  assign _023__C = ( _023__C0 );
  assign dma_stall_inc_C = ( dma_stall_inc_C0 ) | ( dma_stall_inc_C1 );
  assign _026__C = ( _026__C0 );
  assign mc_dma_rd_req_rdy_C = ( mc_dma_rd_req_rdy_C0 );
  assign cv_dma_rd_req_rdy_C = ( cv_dma_rd_req_rdy_C0 );
  assign reg_cmd_src_ram_type_C = ( reg_cmd_src_ram_type_C0 ) | ( reg_cmd_src_ram_type_C1 ) | ( reg_cmd_src_ram_type_C2 ) | ( reg_cmd_src_ram_type_C3 ) | ( reg_cmd_src_ram_type_C4 ) | ( reg_cmd_src_ram_type_C5 );
  assign _022__C = ( _022__C0 ) | ( _022__C1 );
  assign _021__C = ( _021__C0 );
  assign is_surf_end_C = ( is_surf_end_C0 ) | ( is_surf_end_C1 ) | ( is_surf_end_C2 ) | ( is_surf_end_C3 ) | ( is_surf_end_C4 );
  assign _024__C = ( _024__C0 ) | ( _024__C1 );
  assign ld2st_wr_idle_C = ( ld2st_wr_idle_C0 );
  assign _027__C = ( _027__C0 );
  assign st2ld_load_idle_C = ( st2ld_load_idle_C0 );
  assign ld_idle_C = ( ld_idle_C0 ) | ( ld_idle_C1 ) | ( ld_idle_C2 );
  assign cmd_valid_C = ( cmd_valid_C0 ) | ( cmd_valid_C1 );
  assign dma_rd_req_rdy_C = ( dma_rd_req_rdy_C0 ) | ( dma_rd_req_rdy_C1 ) | ( dma_rd_req_rdy_C2 ) | ( dma_rd_req_rdy_C3 );
  assign reg2dp_src_addr_high_v8_C = ( reg2dp_src_addr_high_v8_C0 ) | ( reg2dp_src_addr_high_v8_C1 ) | ( reg2dp_src_addr_high_v8_C2 );
  assign tran_valid_C = ( tran_valid_C0 ) | ( tran_valid_C1 ) | ( tran_valid_C2 ) | ( tran_valid_C3 ) | ( tran_valid_C4 ) | ( tran_valid_C5 ) | ( tran_valid_C6 );
  assign is_cube_end_C = ( is_cube_end_C0 ) | ( is_cube_end_C1 );
  assign tran_accept_C = ( tran_accept_C0 ) | ( tran_accept_C1 ) | ( tran_accept_C2 ) | ( tran_accept_C3 ) | ( tran_accept_C4 );
  assign _018__C = ( _018__C0 );
  assign _017__C = ( _017__C0 );
  assign csb2ld_vld_C = ( csb2ld_vld_C0 ) | ( csb2ld_vld_C1 ) | ( csb2ld_vld_C2 );
  assign load_cmd_en_C = ( load_cmd_en_C0 ) | ( load_cmd_en_C1 ) | ( load_cmd_en_C2 );
  assign _016__C = ( _016__C0 );
  assign cmd_ready_C = ( cmd_ready_C0 ) | ( cmd_ready_C1 ) | ( cmd_ready_C2 ) | ( cmd_ready_C3 );
  assign ld2st_wr_prdy_C = ( ld2st_wr_prdy_C0 ) | ( ld2st_wr_prdy_C1 );
  assign surf_count_C = ( surf_count_C0 ) | ( surf_count_C1 ) | ( surf_count_C2 ) | ( surf_count_C3 );
  assign line_count_C = ( line_count_C0 ) | ( line_count_C1 ) | ( line_count_C2 );
  assign reg_line_stride_C = ( reg_line_stride_C0 ) | ( reg_line_stride_C1 );
  assign line_addr_C = ( line_addr_C0 ) | ( line_addr_C1 ) | ( line_addr_C2 ) | ( line_addr_C3 ) | ( line_addr_C4 ) | ( line_addr_C5 ) | ( line_addr_C6 );
  assign reg_surf_stride_C = ( reg_surf_stride_C0 ) | ( reg_surf_stride_C1 );
  assign surf_addr_C = ( surf_addr_C0 ) | ( surf_addr_C1 ) | ( surf_addr_C2 );
  assign ld2st_wr_pvld_C = ( ld2st_wr_pvld_C0 );
  assign ld2st_wr_pd_C = ( ld2st_wr_pd_C0 );
  assign ld2gate_slcg_en_C = ( ld2gate_slcg_en_C0 );
  assign ld2csb_idle_C = ( ld2csb_idle_C0 );
  assign ld2csb_grp1_dma_stall_inc_C = ( ld2csb_grp1_dma_stall_inc_C0 );
  assign ld2csb_grp0_dma_stall_inc_C = ( ld2csb_grp0_dma_stall_inc_C0 );
  assign csb2ld_rdy_C = ( csb2ld_rdy_C0 );
  assign bdma2mcif_rd_req_valid_C = ( bdma2mcif_rd_req_valid_C0 );
  assign bdma2mcif_rd_req_pd_C = ( bdma2mcif_rd_req_pd_C0 );
  assign bdma2cvif_rd_req_valid_C = ( bdma2cvif_rd_req_valid_C0 );
  assign bdma2cvif_rd_req_pd_C = ( bdma2cvif_rd_req_pd_C0 );
  assign reg2dp_dst_surf_stride_X = ( reg2dp_dst_surf_stride_X0 ) | ( reg2dp_dst_surf_stride_X1 );
  assign reg2dp_dst_line_stride_X = ( reg2dp_dst_line_stride_X0 ) | ( reg2dp_dst_line_stride_X1 );
  assign reg2dp_cmd_interrupt_X = ( reg2dp_cmd_interrupt_X0 ) | ( reg2dp_cmd_interrupt_X1 );
  assign reg2dp_cmd_dst_ram_type_X = ( reg2dp_cmd_dst_ram_type_X0 ) | ( reg2dp_cmd_dst_ram_type_X1 );
  assign reg2dp_dst_addr_low_v32_X = ( reg2dp_dst_addr_low_v32_X0 ) | ( reg2dp_dst_addr_low_v32_X1 ) | ( reg2dp_dst_addr_low_v32_X2 );
  assign reg2dp_dst_addr_high_v8_X = ( reg2dp_dst_addr_high_v8_X0 ) | ( reg2dp_dst_addr_high_v8_X1 ) | ( reg2dp_dst_addr_high_v8_X2 );
  assign mc_int_rd_req_valid_X = ( mc_int_rd_req_valid_X0 ) | ( mc_int_rd_req_valid_X1 );
  assign mc_int_rd_req_pd_X = ( mc_int_rd_req_pd_X0 ) | ( mc_int_rd_req_pd_X1 );
  assign cv_int_rd_req_valid_X = ( cv_int_rd_req_valid_X0 ) | ( cv_int_rd_req_valid_X1 );
  assign cv_int_rd_req_pd_X = ( cv_int_rd_req_pd_X0 ) | ( cv_int_rd_req_pd_X1 );
  assign bdma2cvif_rd_req_ready_X = ( bdma2cvif_rd_req_ready_X0 ) | ( bdma2cvif_rd_req_ready_X1 ) | ( bdma2cvif_rd_req_ready_X2 );
  assign cv_dma_rd_req_vld_X = ( cv_dma_rd_req_vld_X0 );
  assign nvdla_core_rstn_X = ( nvdla_core_rstn_X0 ) | ( nvdla_core_rstn_X1 );
  assign bdma2mcif_rd_req_ready_X = ( bdma2mcif_rd_req_ready_X0 ) | ( bdma2mcif_rd_req_ready_X1 ) | ( bdma2mcif_rd_req_ready_X2 );
  assign mc_dma_rd_req_vld_X = ( mc_dma_rd_req_vld_X0 );
  assign reg2dp_line_repeat_number_X = ( reg2dp_line_repeat_number_X0 ) | ( reg2dp_line_repeat_number_X1 ) | ( reg2dp_line_repeat_number_X2 );
  assign reg_line_size_X = ( reg_line_size_X0 ) | ( reg_line_size_X1 ) | ( reg_line_size_X2 ) | ( reg_line_size_X3 ) | ( reg_line_size_X4 ) | ( reg_line_size_X5 );
  assign reg2dp_line_size_X = ( reg2dp_line_size_X0 ) | ( reg2dp_line_size_X1 ) | ( reg2dp_line_size_X2 );
  assign fangyuan3_X = ( fangyuan3_X0 );
  assign reg2dp_src_line_stride_X = ( reg2dp_src_line_stride_X0 ) | ( reg2dp_src_line_stride_X1 );
  assign reg2dp_surf_repeat_number_X = ( reg2dp_surf_repeat_number_X0 ) | ( reg2dp_surf_repeat_number_X1 ) | ( reg2dp_surf_repeat_number_X2 );
  assign fangyuan2_X = ( fangyuan2_X0 );
  assign reg2dp_src_surf_stride_X = ( reg2dp_src_surf_stride_X0 ) | ( reg2dp_src_surf_stride_X1 );
  assign _034__X = ( _034__X0 );
  assign fangyuan1_X = ( fangyuan1_X0 );
  assign _033__X = ( _033__X0 );
  assign _013__X = ( _013__X0 );
  assign _032__X = ( _032__X0 );
  assign fangyuan0_X = ( fangyuan0_X0 );
  assign load_cmd_X = ( load_cmd_X0 ) | ( load_cmd_X1 ) | ( load_cmd_X2 ) | ( load_cmd_X3 ) | ( load_cmd_X4 ) | ( load_cmd_X5 ) | ( load_cmd_X6 ) | ( load_cmd_X7 );
  assign reg2dp_src_addr_low_v32_X = ( reg2dp_src_addr_low_v32_X0 ) | ( reg2dp_src_addr_low_v32_X1 ) | ( reg2dp_src_addr_low_v32_X2 );
  assign _031__X = ( _031__X0 );
  assign _012__X = ( _012__X0 ) | ( _012__X1 );
  assign _030__X = ( _030__X0 );
  assign _014__X = ( _014__X0 );
  assign _029__X = ( _029__X0 );
  assign _028__X = ( _028__X0 );
  assign _015__X = ( _015__X0 );
  assign _011__X = ( _011__X0 );
  assign _000__X = ( _000__X0 );
  assign _008__X = ( _008__X0 );
  assign _007__X = ( _007__X0 );
  assign _006__X = ( _006__X0 );
  assign _005__X = ( _005__X0 );
  assign _004__X = ( _004__X0 );
  assign _003__X = ( _003__X0 );
  assign _001__X = ( _001__X0 );
  assign _009__X = ( _009__X0 );
  assign _002__X = ( _002__X0 );
  assign _010__X = ( _010__X0 );
  assign cv_rd_req_rdyi_X = ( cv_rd_req_rdyi_X0 );
  assign mc_rd_req_rdyi_X = ( mc_rd_req_rdyi_X0 );
  assign _019__X = ( _019__X0 );
  assign reg2dp_cmd_src_ram_type_X = ( reg2dp_cmd_src_ram_type_X0 ) | ( reg2dp_cmd_src_ram_type_X1 ) | ( reg2dp_cmd_src_ram_type_X2 ) | ( reg2dp_cmd_src_ram_type_X3 );
  assign _025__X = ( _025__X0 );
  assign _020__X = ( _020__X0 );
  assign is_src_ram_type_switching_X = ( is_src_ram_type_switching_X0 );
  assign reg_surf_repeat_number_X = ( reg_surf_repeat_number_X0 ) | ( reg_surf_repeat_number_X1 );
  assign reg_line_repeat_number_X = ( reg_line_repeat_number_X0 ) | ( reg_line_repeat_number_X1 );
  assign reg2dp_cmd_interrupt_ptr_X = ( reg2dp_cmd_interrupt_ptr_X0 ) | ( reg2dp_cmd_interrupt_ptr_X1 ) | ( reg2dp_cmd_interrupt_ptr_X2 ) | ( reg2dp_cmd_interrupt_ptr_X3 );
  assign _023__X = ( _023__X0 );
  assign dma_stall_inc_X = ( dma_stall_inc_X0 ) | ( dma_stall_inc_X1 );
  assign _026__X = ( _026__X0 );
  assign mc_dma_rd_req_rdy_X = ( mc_dma_rd_req_rdy_X0 );
  assign cv_dma_rd_req_rdy_X = ( cv_dma_rd_req_rdy_X0 );
  assign reg_cmd_src_ram_type_X = ( reg_cmd_src_ram_type_X0 ) | ( reg_cmd_src_ram_type_X1 ) | ( reg_cmd_src_ram_type_X2 ) | ( reg_cmd_src_ram_type_X3 ) | ( reg_cmd_src_ram_type_X4 ) | ( reg_cmd_src_ram_type_X5 );
  assign _022__X = ( _022__X0 ) | ( _022__X1 );
  assign _021__X = ( _021__X0 );
  assign is_surf_end_X = ( is_surf_end_X0 ) | ( is_surf_end_X1 ) | ( is_surf_end_X2 ) | ( is_surf_end_X3 ) | ( is_surf_end_X4 );
  assign _024__X = ( _024__X0 ) | ( _024__X1 );
  assign ld2st_wr_idle_X = ( ld2st_wr_idle_X0 );
  assign _027__X = ( _027__X0 );
  assign st2ld_load_idle_X = ( st2ld_load_idle_X0 );
  assign ld_idle_X = ( ld_idle_X0 ) | ( ld_idle_X1 ) | ( ld_idle_X2 );
  assign cmd_valid_X = ( cmd_valid_X0 ) | ( cmd_valid_X1 );
  assign dma_rd_req_rdy_X = ( dma_rd_req_rdy_X0 ) | ( dma_rd_req_rdy_X1 ) | ( dma_rd_req_rdy_X2 ) | ( dma_rd_req_rdy_X3 );
  assign reg2dp_src_addr_high_v8_X = ( reg2dp_src_addr_high_v8_X0 ) | ( reg2dp_src_addr_high_v8_X1 ) | ( reg2dp_src_addr_high_v8_X2 );
  assign tran_valid_X = ( tran_valid_X0 ) | ( tran_valid_X1 ) | ( tran_valid_X2 ) | ( tran_valid_X3 ) | ( tran_valid_X4 ) | ( tran_valid_X5 ) | ( tran_valid_X6 );
  assign is_cube_end_X = ( is_cube_end_X0 ) | ( is_cube_end_X1 );
  assign tran_accept_X = ( tran_accept_X0 ) | ( tran_accept_X1 ) | ( tran_accept_X2 ) | ( tran_accept_X3 ) | ( tran_accept_X4 );
  assign _018__X = ( _018__X0 );
  assign _017__X = ( _017__X0 );
  assign csb2ld_vld_X = ( csb2ld_vld_X0 ) | ( csb2ld_vld_X1 ) | ( csb2ld_vld_X2 );
  assign load_cmd_en_X = ( load_cmd_en_X0 ) | ( load_cmd_en_X1 ) | ( load_cmd_en_X2 );
  assign _016__X = ( _016__X0 );
  assign cmd_ready_X = ( cmd_ready_X0 ) | ( cmd_ready_X1 ) | ( cmd_ready_X2 ) | ( cmd_ready_X3 );
  assign ld2st_wr_prdy_X = ( ld2st_wr_prdy_X0 ) | ( ld2st_wr_prdy_X1 );
  assign surf_count_X = ( surf_count_X0 ) | ( surf_count_X1 ) | ( surf_count_X2 ) | ( surf_count_X3 );
  assign line_count_X = ( line_count_X0 ) | ( line_count_X1 ) | ( line_count_X2 );
  assign reg_line_stride_X = ( reg_line_stride_X0 ) | ( reg_line_stride_X1 );
  assign line_addr_X = ( line_addr_X0 ) | ( line_addr_X1 ) | ( line_addr_X2 ) | ( line_addr_X3 ) | ( line_addr_X4 ) | ( line_addr_X5 ) | ( line_addr_X6 );
  assign reg_surf_stride_X = ( reg_surf_stride_X0 ) | ( reg_surf_stride_X1 );
  assign surf_addr_X = ( surf_addr_X0 ) | ( surf_addr_X1 ) | ( surf_addr_X2 );
  assign ld2st_wr_pvld_X = ( ld2st_wr_pvld_X0 );
  assign ld2st_wr_pd_X = ( ld2st_wr_pd_X0 );
  assign ld2gate_slcg_en_X = ( ld2gate_slcg_en_X0 );
  assign ld2csb_idle_X = ( ld2csb_idle_X0 );
  assign ld2csb_grp1_dma_stall_inc_X = ( ld2csb_grp1_dma_stall_inc_X0 );
  assign ld2csb_grp0_dma_stall_inc_X = ( ld2csb_grp0_dma_stall_inc_X0 );
  assign csb2ld_rdy_X = ( csb2ld_rdy_X0 );
  assign bdma2mcif_rd_req_valid_X = ( bdma2mcif_rd_req_valid_X0 );
  assign bdma2mcif_rd_req_pd_X = ( bdma2mcif_rd_req_pd_X0 );
  assign bdma2cvif_rd_req_valid_X = ( bdma2cvif_rd_req_valid_X0 );
  assign bdma2cvif_rd_req_pd_X = ( bdma2cvif_rd_req_pd_X0 );
  assign reg2dp_dst_surf_stride_R = ( reg2dp_dst_surf_stride_X0 & reg2dp_dst_surf_stride_R0 ) | ( reg2dp_dst_surf_stride_X1 & reg2dp_dst_surf_stride_R1 );
  assign reg2dp_dst_line_stride_R = ( reg2dp_dst_line_stride_X0 & reg2dp_dst_line_stride_R0 ) | ( reg2dp_dst_line_stride_X1 & reg2dp_dst_line_stride_R1 );
  assign reg2dp_cmd_interrupt_R = ( reg2dp_cmd_interrupt_X0 & reg2dp_cmd_interrupt_R0 ) | ( reg2dp_cmd_interrupt_X1 & reg2dp_cmd_interrupt_R1 );
  assign reg2dp_cmd_dst_ram_type_R = ( reg2dp_cmd_dst_ram_type_X0 & reg2dp_cmd_dst_ram_type_R0 ) | ( reg2dp_cmd_dst_ram_type_X1 & reg2dp_cmd_dst_ram_type_R1 );
  assign reg2dp_dst_addr_low_v32_R = ( reg2dp_dst_addr_low_v32_X0 & reg2dp_dst_addr_low_v32_R0 ) | ( reg2dp_dst_addr_low_v32_X1 & reg2dp_dst_addr_low_v32_R1 ) | ( reg2dp_dst_addr_low_v32_X2 & reg2dp_dst_addr_low_v32_R2 );
  assign reg2dp_dst_addr_high_v8_R = ( reg2dp_dst_addr_high_v8_X0 & reg2dp_dst_addr_high_v8_R0 ) | ( reg2dp_dst_addr_high_v8_X1 & reg2dp_dst_addr_high_v8_R1 ) | ( reg2dp_dst_addr_high_v8_X2 & reg2dp_dst_addr_high_v8_R2 );
  assign mc_int_rd_req_valid_R = ( mc_int_rd_req_valid_X0 & mc_int_rd_req_valid_R0 ) | ( mc_int_rd_req_valid_X1 & mc_int_rd_req_valid_R1 );
  assign mc_int_rd_req_pd_R = ( mc_int_rd_req_pd_X0 & mc_int_rd_req_pd_R0 ) | ( mc_int_rd_req_pd_X1 & mc_int_rd_req_pd_R1 );
  assign cv_int_rd_req_valid_R = ( cv_int_rd_req_valid_X0 & cv_int_rd_req_valid_R0 ) | ( cv_int_rd_req_valid_X1 & cv_int_rd_req_valid_R1 );
  assign cv_int_rd_req_pd_R = ( cv_int_rd_req_pd_X0 & cv_int_rd_req_pd_R0 ) | ( cv_int_rd_req_pd_X1 & cv_int_rd_req_pd_R1 );
  assign bdma2cvif_rd_req_ready_R = ( bdma2cvif_rd_req_ready_X0 & bdma2cvif_rd_req_ready_R0 ) | ( bdma2cvif_rd_req_ready_X1 & bdma2cvif_rd_req_ready_R1 ) | ( bdma2cvif_rd_req_ready_X2 & bdma2cvif_rd_req_ready_R2 );
  assign cv_dma_rd_req_vld_R = ( cv_dma_rd_req_vld_X0 & cv_dma_rd_req_vld_R0 );
  assign nvdla_core_rstn_R = ( nvdla_core_rstn_X0 & nvdla_core_rstn_R0 ) | ( nvdla_core_rstn_X1 & nvdla_core_rstn_R1 );
  assign bdma2mcif_rd_req_ready_R = ( bdma2mcif_rd_req_ready_X0 & bdma2mcif_rd_req_ready_R0 ) | ( bdma2mcif_rd_req_ready_X1 & bdma2mcif_rd_req_ready_R1 ) | ( bdma2mcif_rd_req_ready_X2 & bdma2mcif_rd_req_ready_R2 );
  assign mc_dma_rd_req_vld_R = ( mc_dma_rd_req_vld_X0 & mc_dma_rd_req_vld_R0 );
  assign reg2dp_line_repeat_number_R = ( reg2dp_line_repeat_number_X0 & reg2dp_line_repeat_number_R0 ) | ( reg2dp_line_repeat_number_X1 & reg2dp_line_repeat_number_R1 ) | ( reg2dp_line_repeat_number_X2 & reg2dp_line_repeat_number_R2 );
  assign reg_line_size_R = ( reg_line_size_X0 & reg_line_size_R0 ) | ( reg_line_size_X1 & reg_line_size_R1 ) | ( reg_line_size_X2 & reg_line_size_R2 ) | ( reg_line_size_X3 & reg_line_size_R3 ) | ( reg_line_size_X4 & reg_line_size_R4 ) | ( reg_line_size_X5 & reg_line_size_R5 );
  assign reg2dp_line_size_R = ( reg2dp_line_size_X0 & reg2dp_line_size_R0 ) | ( reg2dp_line_size_X1 & reg2dp_line_size_R1 ) | ( reg2dp_line_size_X2 & reg2dp_line_size_R2 );
  assign fangyuan3_R = ( fangyuan3_X0 & fangyuan3_R0 );
  assign reg2dp_src_line_stride_R = ( reg2dp_src_line_stride_X0 & reg2dp_src_line_stride_R0 ) | ( reg2dp_src_line_stride_X1 & reg2dp_src_line_stride_R1 );
  assign reg2dp_surf_repeat_number_R = ( reg2dp_surf_repeat_number_X0 & reg2dp_surf_repeat_number_R0 ) | ( reg2dp_surf_repeat_number_X1 & reg2dp_surf_repeat_number_R1 ) | ( reg2dp_surf_repeat_number_X2 & reg2dp_surf_repeat_number_R2 );
  assign fangyuan2_R = ( fangyuan2_X0 & fangyuan2_R0 );
  assign reg2dp_src_surf_stride_R = ( reg2dp_src_surf_stride_X0 & reg2dp_src_surf_stride_R0 ) | ( reg2dp_src_surf_stride_X1 & reg2dp_src_surf_stride_R1 );
  assign _034__R = ( _034__X0 & _034__R0 );
  assign fangyuan1_R = ( fangyuan1_X0 & fangyuan1_R0 );
  assign _033__R = ( _033__X0 & _033__R0 );
  assign _013__R = ( _013__X0 & _013__R0 );
  assign _032__R = ( _032__X0 & _032__R0 );
  assign fangyuan0_R = ( fangyuan0_X0 & fangyuan0_R0 );
  assign load_cmd_R = ( load_cmd_X0 & load_cmd_R0 ) | ( load_cmd_X1 & load_cmd_R1 ) | ( load_cmd_X2 & load_cmd_R2 ) | ( load_cmd_X3 & load_cmd_R3 ) | ( load_cmd_X4 & load_cmd_R4 ) | ( load_cmd_X5 & load_cmd_R5 ) | ( load_cmd_X6 & load_cmd_R6 ) | ( load_cmd_X7 & load_cmd_R7 );
  assign reg2dp_src_addr_low_v32_R = ( reg2dp_src_addr_low_v32_X0 & reg2dp_src_addr_low_v32_R0 ) | ( reg2dp_src_addr_low_v32_X1 & reg2dp_src_addr_low_v32_R1 ) | ( reg2dp_src_addr_low_v32_X2 & reg2dp_src_addr_low_v32_R2 );
  assign _031__R = ( _031__X0 & _031__R0 );
  assign _012__R = ( _012__X0 & _012__R0 ) | ( _012__X1 & _012__R1 );
  assign _030__R = ( _030__X0 & _030__R0 );
  assign _014__R = ( _014__X0 & _014__R0 );
  assign _029__R = ( _029__X0 & _029__R0 );
  assign _028__R = ( _028__X0 & _028__R0 );
  assign _015__R = ( _015__X0 & _015__R0 );
  assign _011__R = ( _011__X0 & _011__R0 );
  assign _000__R = ( _000__X0 & _000__R0 );
  assign _008__R = ( _008__X0 & _008__R0 );
  assign _007__R = ( _007__X0 & _007__R0 );
  assign _006__R = ( _006__X0 & _006__R0 );
  assign _005__R = ( _005__X0 & _005__R0 );
  assign _004__R = ( _004__X0 & _004__R0 );
  assign _003__R = ( _003__X0 & _003__R0 );
  assign _001__R = ( _001__X0 & _001__R0 );
  assign _009__R = ( _009__X0 & _009__R0 );
  assign _002__R = ( _002__X0 & _002__R0 );
  assign _010__R = ( _010__X0 & _010__R0 );
  assign cv_rd_req_rdyi_R = ( cv_rd_req_rdyi_X0 & cv_rd_req_rdyi_R0 );
  assign mc_rd_req_rdyi_R = ( mc_rd_req_rdyi_X0 & mc_rd_req_rdyi_R0 );
  assign _019__R = ( _019__X0 & _019__R0 );
  assign reg2dp_cmd_src_ram_type_R = ( reg2dp_cmd_src_ram_type_X0 & reg2dp_cmd_src_ram_type_R0 ) | ( reg2dp_cmd_src_ram_type_X1 & reg2dp_cmd_src_ram_type_R1 ) | ( reg2dp_cmd_src_ram_type_X2 & reg2dp_cmd_src_ram_type_R2 ) | ( reg2dp_cmd_src_ram_type_X3 & reg2dp_cmd_src_ram_type_R3 );
  assign _025__R = ( _025__X0 & _025__R0 );
  assign _020__R = ( _020__X0 & _020__R0 );
  assign is_src_ram_type_switching_R = ( is_src_ram_type_switching_X0 & is_src_ram_type_switching_R0 );
  assign reg_surf_repeat_number_R = ( reg_surf_repeat_number_X0 & reg_surf_repeat_number_R0 ) | ( reg_surf_repeat_number_X1 & reg_surf_repeat_number_R1 );
  assign reg_line_repeat_number_R = ( reg_line_repeat_number_X0 & reg_line_repeat_number_R0 ) | ( reg_line_repeat_number_X1 & reg_line_repeat_number_R1 );
  assign reg2dp_cmd_interrupt_ptr_R = ( reg2dp_cmd_interrupt_ptr_X0 & reg2dp_cmd_interrupt_ptr_R0 ) | ( reg2dp_cmd_interrupt_ptr_X1 & reg2dp_cmd_interrupt_ptr_R1 ) | ( reg2dp_cmd_interrupt_ptr_X2 & reg2dp_cmd_interrupt_ptr_R2 ) | ( reg2dp_cmd_interrupt_ptr_X3 & reg2dp_cmd_interrupt_ptr_R3 );
  assign _023__R = ( _023__X0 & _023__R0 );
  assign dma_stall_inc_R = ( dma_stall_inc_X0 & dma_stall_inc_R0 ) | ( dma_stall_inc_X1 & dma_stall_inc_R1 );
  assign _026__R = ( _026__X0 & _026__R0 );
  assign mc_dma_rd_req_rdy_R = ( mc_dma_rd_req_rdy_X0 & mc_dma_rd_req_rdy_R0 );
  assign cv_dma_rd_req_rdy_R = ( cv_dma_rd_req_rdy_X0 & cv_dma_rd_req_rdy_R0 );
  assign reg_cmd_src_ram_type_R = ( reg_cmd_src_ram_type_X0 & reg_cmd_src_ram_type_R0 ) | ( reg_cmd_src_ram_type_X1 & reg_cmd_src_ram_type_R1 ) | ( reg_cmd_src_ram_type_X2 & reg_cmd_src_ram_type_R2 ) | ( reg_cmd_src_ram_type_X3 & reg_cmd_src_ram_type_R3 ) | ( reg_cmd_src_ram_type_X4 & reg_cmd_src_ram_type_R4 ) | ( reg_cmd_src_ram_type_X5 & reg_cmd_src_ram_type_R5 );
  assign _022__R = ( _022__X0 & _022__R0 ) | ( _022__X1 & _022__R1 );
  assign _021__R = ( _021__X0 & _021__R0 );
  assign is_surf_end_R = ( is_surf_end_X0 & is_surf_end_R0 ) | ( is_surf_end_X1 & is_surf_end_R1 ) | ( is_surf_end_X2 & is_surf_end_R2 ) | ( is_surf_end_X3 & is_surf_end_R3 ) | ( is_surf_end_X4 & is_surf_end_R4 );
  assign _024__R = ( _024__X0 & _024__R0 ) | ( _024__X1 & _024__R1 );
  assign ld2st_wr_idle_R = ( ld2st_wr_idle_X0 & ld2st_wr_idle_R0 );
  assign _027__R = ( _027__X0 & _027__R0 );
  assign st2ld_load_idle_R = ( st2ld_load_idle_X0 & st2ld_load_idle_R0 );
  assign ld_idle_R = ( ld_idle_X0 & ld_idle_R0 ) | ( ld_idle_X1 & ld_idle_R1 ) | ( ld_idle_X2 & ld_idle_R2 );
  assign cmd_valid_R = ( cmd_valid_X0 & cmd_valid_R0 ) | ( cmd_valid_X1 & cmd_valid_R1 );
  assign dma_rd_req_rdy_R = ( dma_rd_req_rdy_X0 & dma_rd_req_rdy_R0 ) | ( dma_rd_req_rdy_X1 & dma_rd_req_rdy_R1 ) | ( dma_rd_req_rdy_X2 & dma_rd_req_rdy_R2 ) | ( dma_rd_req_rdy_X3 & dma_rd_req_rdy_R3 );
  assign reg2dp_src_addr_high_v8_R = ( reg2dp_src_addr_high_v8_X0 & reg2dp_src_addr_high_v8_R0 ) | ( reg2dp_src_addr_high_v8_X1 & reg2dp_src_addr_high_v8_R1 ) | ( reg2dp_src_addr_high_v8_X2 & reg2dp_src_addr_high_v8_R2 );
  assign tran_valid_R = ( tran_valid_X0 & tran_valid_R0 ) | ( tran_valid_X1 & tran_valid_R1 ) | ( tran_valid_X2 & tran_valid_R2 ) | ( tran_valid_X3 & tran_valid_R3 ) | ( tran_valid_X4 & tran_valid_R4 ) | ( tran_valid_X5 & tran_valid_R5 ) | ( tran_valid_X6 & tran_valid_R6 );
  assign is_cube_end_R = ( is_cube_end_X0 & is_cube_end_R0 ) | ( is_cube_end_X1 & is_cube_end_R1 );
  assign tran_accept_R = ( tran_accept_X0 & tran_accept_R0 ) | ( tran_accept_X1 & tran_accept_R1 ) | ( tran_accept_X2 & tran_accept_R2 ) | ( tran_accept_X3 & tran_accept_R3 ) | ( tran_accept_X4 & tran_accept_R4 );
  assign _018__R = ( _018__X0 & _018__R0 );
  assign _017__R = ( _017__X0 & _017__R0 );
  assign csb2ld_vld_R = ( csb2ld_vld_X0 & csb2ld_vld_R0 ) | ( csb2ld_vld_X1 & csb2ld_vld_R1 ) | ( csb2ld_vld_X2 & csb2ld_vld_R2 );
  assign load_cmd_en_R = ( load_cmd_en_X0 & load_cmd_en_R0 ) | ( load_cmd_en_X1 & load_cmd_en_R1 ) | ( load_cmd_en_X2 & load_cmd_en_R2 );
  assign _016__R = ( _016__X0 & _016__R0 );
  assign cmd_ready_R = ( cmd_ready_X0 & cmd_ready_R0 ) | ( cmd_ready_X1 & cmd_ready_R1 ) | ( cmd_ready_X2 & cmd_ready_R2 ) | ( cmd_ready_X3 & cmd_ready_R3 );
  assign ld2st_wr_prdy_R = ( ld2st_wr_prdy_X0 & ld2st_wr_prdy_R0 ) | ( ld2st_wr_prdy_X1 & ld2st_wr_prdy_R1 );
  assign surf_count_R = ( surf_count_X0 & surf_count_R0 ) | ( surf_count_X1 & surf_count_R1 ) | ( surf_count_X2 & surf_count_R2 ) | ( surf_count_X3 & surf_count_R3 );
  assign line_count_R = ( line_count_X0 & line_count_R0 ) | ( line_count_X1 & line_count_R1 ) | ( line_count_X2 & line_count_R2 );
  assign reg_line_stride_R = ( reg_line_stride_X0 & reg_line_stride_R0 ) | ( reg_line_stride_X1 & reg_line_stride_R1 );
  assign line_addr_R = ( line_addr_X0 & line_addr_R0 ) | ( line_addr_X1 & line_addr_R1 ) | ( line_addr_X2 & line_addr_R2 ) | ( line_addr_X3 & line_addr_R3 ) | ( line_addr_X4 & line_addr_R4 ) | ( line_addr_X5 & line_addr_R5 ) | ( line_addr_X6 & line_addr_R6 );
  assign reg_surf_stride_R = ( reg_surf_stride_X0 & reg_surf_stride_R0 ) | ( reg_surf_stride_X1 & reg_surf_stride_R1 );
  assign surf_addr_R = ( surf_addr_X0 & surf_addr_R0 ) | ( surf_addr_X1 & surf_addr_R1 ) | ( surf_addr_X2 & surf_addr_R2 );
  assign ld2st_wr_pvld_R = ( ld2st_wr_pvld_X0 & ld2st_wr_pvld_R0 );
  assign ld2st_wr_pd_R = ( ld2st_wr_pd_X0 & ld2st_wr_pd_R0 );
  assign ld2gate_slcg_en_R = ( ld2gate_slcg_en_X0 & ld2gate_slcg_en_R0 );
  assign ld2csb_idle_R = ( ld2csb_idle_X0 & ld2csb_idle_R0 );
  assign ld2csb_grp1_dma_stall_inc_R = ( ld2csb_grp1_dma_stall_inc_X0 & ld2csb_grp1_dma_stall_inc_R0 );
  assign ld2csb_grp0_dma_stall_inc_R = ( ld2csb_grp0_dma_stall_inc_X0 & ld2csb_grp0_dma_stall_inc_R0 );
  assign csb2ld_rdy_R = ( csb2ld_rdy_X0 & csb2ld_rdy_R0 );
  assign bdma2mcif_rd_req_valid_R = ( bdma2mcif_rd_req_valid_X0 & bdma2mcif_rd_req_valid_R0 );
  assign bdma2mcif_rd_req_pd_R = ( bdma2mcif_rd_req_pd_X0 & bdma2mcif_rd_req_pd_R0 );
  assign bdma2cvif_rd_req_valid_R = ( bdma2cvif_rd_req_valid_X0 & bdma2cvif_rd_req_valid_R0 );
  assign bdma2cvif_rd_req_pd_R = ( bdma2cvif_rd_req_pd_X0 & bdma2cvif_rd_req_pd_R0 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { cv_int_rd_req_pd_d0_R , cv_int_rd_req_pd_d0_C , cv_int_rd_req_pd_d0_X , cv_int_rd_req_ready_R , cv_int_rd_req_ready_C , cv_int_rd_req_ready_X , cv_int_rd_req_ready_d0_R , cv_int_rd_req_ready_d0_C , cv_int_rd_req_ready_d0_X , cv_int_rd_req_valid_d0_R , cv_int_rd_req_valid_d0_C , cv_int_rd_req_valid_d0_X , dma_rd_req_addr_R , dma_rd_req_addr_C , dma_rd_req_addr_X , dma_rd_req_pd_R , dma_rd_req_pd_C , dma_rd_req_pd_X , dma_rd_req_size_R , dma_rd_req_size_C , dma_rd_req_size_X , dma_rd_req_type_R , dma_rd_req_type_C , dma_rd_req_type_X , dma_rd_req_vld_R , dma_rd_req_vld_C , dma_rd_req_vld_X , is_last_req_in_line_R , is_last_req_in_line_C , is_last_req_in_line_X , ld2st_addr_R , ld2st_addr_C , ld2st_addr_X , ld2st_cmd_dst_ram_type_R , ld2st_cmd_dst_ram_type_C , ld2st_cmd_dst_ram_type_X , ld2st_cmd_interrupt_R , ld2st_cmd_interrupt_C , ld2st_cmd_interrupt_X , ld2st_cmd_interrupt_ptr_R , ld2st_cmd_interrupt_ptr_C , ld2st_cmd_interrupt_ptr_X , ld2st_cmd_src_ram_type_R , ld2st_cmd_src_ram_type_C , ld2st_cmd_src_ram_type_X , ld2st_line_repeat_number_R , ld2st_line_repeat_number_C , ld2st_line_repeat_number_X , ld2st_line_size_R , ld2st_line_size_C , ld2st_line_size_X , ld2st_line_stride_R , ld2st_line_stride_C , ld2st_line_stride_X , ld2st_surf_repeat_number_R , ld2st_surf_repeat_number_C , ld2st_surf_repeat_number_X , ld2st_surf_stride_R , ld2st_surf_stride_C , ld2st_surf_stride_X , mc_int_rd_req_pd_d0_R , mc_int_rd_req_pd_d0_C , mc_int_rd_req_pd_d0_X , mc_int_rd_req_ready_R , mc_int_rd_req_ready_C , mc_int_rd_req_ready_X , mc_int_rd_req_ready_d0_R , mc_int_rd_req_ready_d0_C , mc_int_rd_req_ready_d0_X , mc_int_rd_req_valid_d0_R , mc_int_rd_req_valid_d0_C , mc_int_rd_req_valid_d0_X , rd_req_rdyi_R , rd_req_rdyi_C , rd_req_rdyi_X , reg2dp_addr_R , reg2dp_addr_C , reg2dp_addr_X , reg2dp_dst_addr_R , reg2dp_dst_addr_C , reg2dp_dst_addr_X , reg2dp_src_line_stride_ext_R , reg2dp_src_line_stride_ext_C , reg2dp_src_line_stride_ext_X , reg2dp_src_surf_stride_ext_R , reg2dp_src_surf_stride_ext_C , reg2dp_src_surf_stride_ext_X , tran_addr_R , tran_addr_C , tran_addr_X , tran_ready_R , tran_ready_C , tran_ready_X , tran_size_R , tran_size_C , tran_size_X  } = 0;
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) surf_count_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) surf_count_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) surf_count_PREV_VAL1 <= surf_count ;
    if( INSTR_IN_ZY ) surf_count_PREV_VAL2 <= surf_count_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) line_count_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) line_count_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) line_count_PREV_VAL1 <= line_count ;
    if( INSTR_IN_ZY ) line_count_PREV_VAL2 <= line_count_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) surf_addr_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) surf_addr_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) surf_addr_PREV_VAL1 <= surf_addr ;
    if( INSTR_IN_ZY ) surf_addr_PREV_VAL2 <= surf_addr_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) line_addr_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) line_addr_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) line_addr_PREV_VAL1 <= line_addr ;
    if( INSTR_IN_ZY ) line_addr_PREV_VAL2 <= line_addr_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) reg_cmd_src_ram_type_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) reg_cmd_src_ram_type_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) reg_cmd_src_ram_type_PREV_VAL1 <= reg_cmd_src_ram_type ;
    if( INSTR_IN_ZY ) reg_cmd_src_ram_type_PREV_VAL2 <= reg_cmd_src_ram_type_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) reg_line_repeat_number_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) reg_line_repeat_number_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) reg_line_repeat_number_PREV_VAL1 <= reg_line_repeat_number ;
    if( INSTR_IN_ZY ) reg_line_repeat_number_PREV_VAL2 <= reg_line_repeat_number_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) reg_line_size_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) reg_line_size_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) reg_line_size_PREV_VAL1 <= reg_line_size ;
    if( INSTR_IN_ZY ) reg_line_size_PREV_VAL2 <= reg_line_size_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) reg_line_stride_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) reg_line_stride_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) reg_line_stride_PREV_VAL1 <= reg_line_stride ;
    if( INSTR_IN_ZY ) reg_line_stride_PREV_VAL2 <= reg_line_stride_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) reg_surf_repeat_number_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) reg_surf_repeat_number_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) reg_surf_repeat_number_PREV_VAL1 <= reg_surf_repeat_number ;
    if( INSTR_IN_ZY ) reg_surf_repeat_number_PREV_VAL2 <= reg_surf_repeat_number_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) reg_surf_stride_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) reg_surf_stride_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) reg_surf_stride_PREV_VAL1 <= reg_surf_stride ;
    if( INSTR_IN_ZY ) reg_surf_stride_PREV_VAL2 <= reg_surf_stride_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) ld2gate_slcg_en_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) ld2gate_slcg_en_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) ld2gate_slcg_en_PREV_VAL1 <= ld2gate_slcg_en ;
    if( INSTR_IN_ZY ) ld2gate_slcg_en_PREV_VAL2 <= ld2gate_slcg_en_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) tran_valid_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) tran_valid_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) tran_valid_PREV_VAL1 <= tran_valid ;
    if( INSTR_IN_ZY ) tran_valid_PREV_VAL2 <= tran_valid_PREV_VAL1 ;
  end
 // ground taints for unused wire slices
  assign { reg2dp_line_repeat_number_R2 [23:13] } = 0;
  assign { reg2dp_line_repeat_number_X2 [23:13] } = 0;
  assign { reg2dp_line_repeat_number_C2 [23:13] } = 0;
  assign { reg2dp_surf_repeat_number_R2 [23:13] } = 0;
  assign { reg2dp_surf_repeat_number_X2 [23:13] } = 0;
  assign { reg2dp_surf_repeat_number_C2 [23:13] } = 0;
  assign { reg2dp_src_addr_high_v8_R2 [31:23] } = 0;
  assign { reg2dp_src_addr_high_v8_X2 [31:23] } = 0;
  assign { reg2dp_src_addr_high_v8_C2 [31:23] } = 0;
  assert property( ld2gate_slcg_en_r_flag == 0 || ld2gate_slcg_en_PREV_VAL1 == ld2gate_slcg_en_PREV_VAL2 );
  assert property( line_addr_r_flag == 0 || line_addr_PREV_VAL1 == line_addr_PREV_VAL2 );
  assert property( line_count_r_flag == 0 || line_count_PREV_VAL1 == line_count_PREV_VAL2 );
  assert property( reg_cmd_src_ram_type_r_flag == 0 || reg_cmd_src_ram_type_PREV_VAL1 == reg_cmd_src_ram_type_PREV_VAL2 );
  assert property( reg_line_repeat_number_r_flag == 0 || reg_line_repeat_number_PREV_VAL1 == reg_line_repeat_number_PREV_VAL2 );
  assert property( reg_line_size_r_flag == 0 || reg_line_size_PREV_VAL1 == reg_line_size_PREV_VAL2 );
  assert property( reg_line_stride_r_flag == 0 || reg_line_stride_PREV_VAL1 == reg_line_stride_PREV_VAL2 );
  assert property( reg_surf_repeat_number_r_flag == 0 || reg_surf_repeat_number_PREV_VAL1 == reg_surf_repeat_number_PREV_VAL2 );
  assert property( reg_surf_stride_r_flag == 0 || reg_surf_stride_PREV_VAL1 == reg_surf_stride_PREV_VAL2 );
  assert property( surf_addr_r_flag == 0 || surf_addr_PREV_VAL1 == surf_addr_PREV_VAL2 );
  assert property( surf_count_r_flag == 0 || surf_count_PREV_VAL1 == surf_count_PREV_VAL2 );
  assert property( tran_valid_r_flag == 0 || tran_valid_PREV_VAL1 == tran_valid_PREV_VAL2 );
  assign rst_zy = !nvdla_core_rstn ;
endmodule
