  logic [15:0] _0_;
  logic [15:0] _0__T ;
  logic [15:0] _0__R ;
  logic [15:0] _0__C ;
  logic [15:0] _0__X ;
  logic [13:0] _0__S ;
  input CLK;
  input CLK_T ;
  input [13:0] CLK_S ;
  output CLK_R ;
  output CLK_X ;
  output CLK_C ;
  logic GND;
  logic GND_T ;
  logic GND_R ;
  logic GND_C ;
  logic GND_X ;
  logic [13:0] GND_S ;
  input IDDQ;
  input IDDQ_T ;
  input [13:0] IDDQ_S ;
  output IDDQ_R ;
  output IDDQ_X ;
  output IDDQ_C ;
  logic [7:0] RA;
  logic [7:0] RA_T ;
  logic [7:0] RA_R ;
  logic [7:0] RA_C ;
  logic [7:0] RA_X ;
  logic [13:0] RA_S ;
  input RADR_0;
  input RADR_0_T ;
  input [13:0] RADR_0_S ;
  output RADR_0_R ;
  output RADR_0_X ;
  output RADR_0_C ;
  input RADR_1;
  input RADR_1_T ;
  input [13:0] RADR_1_S ;
  output RADR_1_R ;
  output RADR_1_X ;
  output RADR_1_C ;
  input RADR_2;
  input RADR_2_T ;
  input [13:0] RADR_2_S ;
  output RADR_2_R ;
  output RADR_2_X ;
  output RADR_2_C ;
  input RADR_3;
  input RADR_3_T ;
  input [13:0] RADR_3_S ;
  output RADR_3_R ;
  output RADR_3_X ;
  output RADR_3_C ;
  input RADR_4;
  input RADR_4_T ;
  input [13:0] RADR_4_S ;
  output RADR_4_R ;
  output RADR_4_X ;
  output RADR_4_C ;
  input RADR_5;
  input RADR_5_T ;
  input [13:0] RADR_5_S ;
  output RADR_5_R ;
  output RADR_5_X ;
  output RADR_5_C ;
  input RADR_6;
  input RADR_6_T ;
  input [13:0] RADR_6_S ;
  output RADR_6_R ;
  output RADR_6_X ;
  output RADR_6_C ;
  input RADR_7;
  input RADR_7_T ;
  input [13:0] RADR_7_S ;
  output RADR_7_R ;
  output RADR_7_X ;
  output RADR_7_C ;
  logic [15:0] RD;
  logic [15:0] RD_T ;
  logic [15:0] RD_R ;
  logic [15:0] RD_C ;
  logic [15:0] RD_X ;
  logic [13:0] RD_S ;
  output RD_0;
  logic RD_0 ;
  output RD_0_T ;
  logic RD_0_T ;
  logic RD_0_R ;
  logic RD_0_C ;
  logic RD_0_X ;
  logic [13:0] RD_0_S ;
  input RD_0_R0 ;
  input RD_0_C0 ;
  input RD_0_X0 ;
  output [13:0] RD_0_S ;
  output RD_1;
  logic RD_1 ;
  output RD_1_T ;
  logic RD_1_T ;
  logic RD_1_R ;
  logic RD_1_C ;
  logic RD_1_X ;
  logic [13:0] RD_1_S ;
  input RD_1_R0 ;
  input RD_1_C0 ;
  input RD_1_X0 ;
  output [13:0] RD_1_S ;
  output RD_10;
  logic RD_10 ;
  output RD_10_T ;
  logic RD_10_T ;
  logic RD_10_R ;
  logic RD_10_C ;
  logic RD_10_X ;
  logic [13:0] RD_10_S ;
  input RD_10_R0 ;
  input RD_10_C0 ;
  input RD_10_X0 ;
  output [13:0] RD_10_S ;
  output RD_11;
  logic RD_11 ;
  output RD_11_T ;
  logic RD_11_T ;
  logic RD_11_R ;
  logic RD_11_C ;
  logic RD_11_X ;
  logic [13:0] RD_11_S ;
  input RD_11_R0 ;
  input RD_11_C0 ;
  input RD_11_X0 ;
  output [13:0] RD_11_S ;
  output RD_12;
  logic RD_12 ;
  output RD_12_T ;
  logic RD_12_T ;
  logic RD_12_R ;
  logic RD_12_C ;
  logic RD_12_X ;
  logic [13:0] RD_12_S ;
  input RD_12_R0 ;
  input RD_12_C0 ;
  input RD_12_X0 ;
  output [13:0] RD_12_S ;
  output RD_13;
  logic RD_13 ;
  output RD_13_T ;
  logic RD_13_T ;
  logic RD_13_R ;
  logic RD_13_C ;
  logic RD_13_X ;
  logic [13:0] RD_13_S ;
  input RD_13_R0 ;
  input RD_13_C0 ;
  input RD_13_X0 ;
  output [13:0] RD_13_S ;
  output RD_14;
  logic RD_14 ;
  output RD_14_T ;
  logic RD_14_T ;
  logic RD_14_R ;
  logic RD_14_C ;
  logic RD_14_X ;
  logic [13:0] RD_14_S ;
  input RD_14_R0 ;
  input RD_14_C0 ;
  input RD_14_X0 ;
  output [13:0] RD_14_S ;
  output RD_15;
  logic RD_15 ;
  output RD_15_T ;
  logic RD_15_T ;
  logic RD_15_R ;
  logic RD_15_C ;
  logic RD_15_X ;
  logic [13:0] RD_15_S ;
  input RD_15_R0 ;
  input RD_15_C0 ;
  input RD_15_X0 ;
  output [13:0] RD_15_S ;
  output RD_2;
  logic RD_2 ;
  output RD_2_T ;
  logic RD_2_T ;
  logic RD_2_R ;
  logic RD_2_C ;
  logic RD_2_X ;
  logic [13:0] RD_2_S ;
  input RD_2_R0 ;
  input RD_2_C0 ;
  input RD_2_X0 ;
  output [13:0] RD_2_S ;
  output RD_3;
  logic RD_3 ;
  output RD_3_T ;
  logic RD_3_T ;
  logic RD_3_R ;
  logic RD_3_C ;
  logic RD_3_X ;
  logic [13:0] RD_3_S ;
  input RD_3_R0 ;
  input RD_3_C0 ;
  input RD_3_X0 ;
  output [13:0] RD_3_S ;
  output RD_4;
  logic RD_4 ;
  output RD_4_T ;
  logic RD_4_T ;
  logic RD_4_R ;
  logic RD_4_C ;
  logic RD_4_X ;
  logic [13:0] RD_4_S ;
  input RD_4_R0 ;
  input RD_4_C0 ;
  input RD_4_X0 ;
  output [13:0] RD_4_S ;
  output RD_5;
  logic RD_5 ;
  output RD_5_T ;
  logic RD_5_T ;
  logic RD_5_R ;
  logic RD_5_C ;
  logic RD_5_X ;
  logic [13:0] RD_5_S ;
  input RD_5_R0 ;
  input RD_5_C0 ;
  input RD_5_X0 ;
  output [13:0] RD_5_S ;
  output RD_6;
  logic RD_6 ;
  output RD_6_T ;
  logic RD_6_T ;
  logic RD_6_R ;
  logic RD_6_C ;
  logic RD_6_X ;
  logic [13:0] RD_6_S ;
  input RD_6_R0 ;
  input RD_6_C0 ;
  input RD_6_X0 ;
  output [13:0] RD_6_S ;
  output RD_7;
  logic RD_7 ;
  output RD_7_T ;
  logic RD_7_T ;
  logic RD_7_R ;
  logic RD_7_C ;
  logic RD_7_X ;
  logic [13:0] RD_7_S ;
  input RD_7_R0 ;
  input RD_7_C0 ;
  input RD_7_X0 ;
  output [13:0] RD_7_S ;
  output RD_8;
  logic RD_8 ;
  output RD_8_T ;
  logic RD_8_T ;
  logic RD_8_R ;
  logic RD_8_C ;
  logic RD_8_X ;
  logic [13:0] RD_8_S ;
  input RD_8_R0 ;
  input RD_8_C0 ;
  input RD_8_X0 ;
  output [13:0] RD_8_S ;
  output RD_9;
  logic RD_9 ;
  output RD_9_T ;
  logic RD_9_T ;
  logic RD_9_R ;
  logic RD_9_C ;
  logic RD_9_X ;
  logic [13:0] RD_9_S ;
  input RD_9_R0 ;
  input RD_9_C0 ;
  input RD_9_X0 ;
  output [13:0] RD_9_S ;
  input RE;
  input RE_T ;
  input [13:0] RE_S ;
  output RE_R ;
  output RE_X ;
  output RE_C ;
  input RET_EN;
  input RET_EN_T ;
  input [13:0] RET_EN_S ;
  output RET_EN_R ;
  output RET_EN_X ;
  output RET_EN_C ;
  logic [7:0] SLEEP_EN;
  logic [7:0] SLEEP_EN_T ;
  logic [7:0] SLEEP_EN_R ;
  logic [7:0] SLEEP_EN_C ;
  logic [7:0] SLEEP_EN_X ;
  logic [13:0] SLEEP_EN_S ;
  input SLEEP_EN_0;
  input SLEEP_EN_0_T ;
  input [13:0] SLEEP_EN_0_S ;
  output SLEEP_EN_0_R ;
  output SLEEP_EN_0_X ;
  output SLEEP_EN_0_C ;
  input SLEEP_EN_1;
  input SLEEP_EN_1_T ;
  input [13:0] SLEEP_EN_1_S ;
  output SLEEP_EN_1_R ;
  output SLEEP_EN_1_X ;
  output SLEEP_EN_1_C ;
  input SLEEP_EN_2;
  input SLEEP_EN_2_T ;
  input [13:0] SLEEP_EN_2_S ;
  output SLEEP_EN_2_R ;
  output SLEEP_EN_2_X ;
  output SLEEP_EN_2_C ;
  input SLEEP_EN_3;
  input SLEEP_EN_3_T ;
  input [13:0] SLEEP_EN_3_S ;
  output SLEEP_EN_3_R ;
  output SLEEP_EN_3_X ;
  output SLEEP_EN_3_C ;
  input SLEEP_EN_4;
  input SLEEP_EN_4_T ;
  input [13:0] SLEEP_EN_4_S ;
  output SLEEP_EN_4_R ;
  output SLEEP_EN_4_X ;
  output SLEEP_EN_4_C ;
  input SLEEP_EN_5;
  input SLEEP_EN_5_T ;
  input [13:0] SLEEP_EN_5_S ;
  output SLEEP_EN_5_R ;
  output SLEEP_EN_5_X ;
  output SLEEP_EN_5_C ;
  input SLEEP_EN_6;
  input SLEEP_EN_6_T ;
  input [13:0] SLEEP_EN_6_S ;
  output SLEEP_EN_6_R ;
  output SLEEP_EN_6_X ;
  output SLEEP_EN_6_C ;
  input SLEEP_EN_7;
  input SLEEP_EN_7_T ;
  input [13:0] SLEEP_EN_7_S ;
  output SLEEP_EN_7_R ;
  output SLEEP_EN_7_X ;
  output SLEEP_EN_7_C ;
  logic [7:0] SVOP;
  logic [7:0] SVOP_T ;
  logic [7:0] SVOP_R ;
  logic [7:0] SVOP_C ;
  logic [7:0] SVOP_X ;
  logic [13:0] SVOP_S ;
  input SVOP_0;
  input SVOP_0_T ;
  input [13:0] SVOP_0_S ;
  output SVOP_0_R ;
  output SVOP_0_X ;
  output SVOP_0_C ;
  input SVOP_1;
  input SVOP_1_T ;
  input [13:0] SVOP_1_S ;
  output SVOP_1_R ;
  output SVOP_1_X ;
  output SVOP_1_C ;
  input SVOP_2;
  input SVOP_2_T ;
  input [13:0] SVOP_2_S ;
  output SVOP_2_R ;
  output SVOP_2_X ;
  output SVOP_2_C ;
  input SVOP_3;
  input SVOP_3_T ;
  input [13:0] SVOP_3_S ;
  output SVOP_3_R ;
  output SVOP_3_X ;
  output SVOP_3_C ;
  input SVOP_4;
  input SVOP_4_T ;
  input [13:0] SVOP_4_S ;
  output SVOP_4_R ;
  output SVOP_4_X ;
  output SVOP_4_C ;
  input SVOP_5;
  input SVOP_5_T ;
  input [13:0] SVOP_5_S ;
  output SVOP_5_R ;
  output SVOP_5_X ;
  output SVOP_5_C ;
  input SVOP_6;
  input SVOP_6_T ;
  input [13:0] SVOP_6_S ;
  output SVOP_6_R ;
  output SVOP_6_X ;
  output SVOP_6_C ;
  input SVOP_7;
  input SVOP_7_T ;
  input [13:0] SVOP_7_S ;
  output SVOP_7_R ;
  output SVOP_7_X ;
  output SVOP_7_C ;
  logic VDD;
  logic VDD_T ;
  logic VDD_R ;
  logic VDD_C ;
  logic VDD_X ;
  logic [13:0] VDD_S ;
  logic [7:0] WA;
  logic [7:0] WA_T ;
  logic [7:0] WA_R ;
  logic [7:0] WA_C ;
  logic [7:0] WA_X ;
  logic [13:0] WA_S ;
  input WADR_0;
  input WADR_0_T ;
  input [13:0] WADR_0_S ;
  output WADR_0_R ;
  output WADR_0_X ;
  output WADR_0_C ;
  input WADR_1;
  input WADR_1_T ;
  input [13:0] WADR_1_S ;
  output WADR_1_R ;
  output WADR_1_X ;
  output WADR_1_C ;
  input WADR_2;
  input WADR_2_T ;
  input [13:0] WADR_2_S ;
  output WADR_2_R ;
  output WADR_2_X ;
  output WADR_2_C ;
  input WADR_3;
  input WADR_3_T ;
  input [13:0] WADR_3_S ;
  output WADR_3_R ;
  output WADR_3_X ;
  output WADR_3_C ;
  input WADR_4;
  input WADR_4_T ;
  input [13:0] WADR_4_S ;
  output WADR_4_R ;
  output WADR_4_X ;
  output WADR_4_C ;
  input WADR_5;
  input WADR_5_T ;
  input [13:0] WADR_5_S ;
  output WADR_5_R ;
  output WADR_5_X ;
  output WADR_5_C ;
  input WADR_6;
  input WADR_6_T ;
  input [13:0] WADR_6_S ;
  output WADR_6_R ;
  output WADR_6_X ;
  output WADR_6_C ;
  input WADR_7;
  input WADR_7_T ;
  input [13:0] WADR_7_S ;
  output WADR_7_R ;
  output WADR_7_X ;
  output WADR_7_C ;
  logic [15:0] WD;
  logic [15:0] WD_T ;
  logic [15:0] WD_R ;
  logic [15:0] WD_C ;
  logic [15:0] WD_X ;
  logic [13:0] WD_S ;
  input WD_0;
  input WD_0_T ;
  input [13:0] WD_0_S ;
  output WD_0_R ;
  output WD_0_X ;
  output WD_0_C ;
  input WD_1;
  input WD_1_T ;
  input [13:0] WD_1_S ;
  output WD_1_R ;
  output WD_1_X ;
  output WD_1_C ;
  input WD_10;
  input WD_10_T ;
  input [13:0] WD_10_S ;
  output WD_10_R ;
  output WD_10_X ;
  output WD_10_C ;
  input WD_11;
  input WD_11_T ;
  input [13:0] WD_11_S ;
  output WD_11_R ;
  output WD_11_X ;
  output WD_11_C ;
  input WD_12;
  input WD_12_T ;
  input [13:0] WD_12_S ;
  output WD_12_R ;
  output WD_12_X ;
  output WD_12_C ;
  input WD_13;
  input WD_13_T ;
  input [13:0] WD_13_S ;
  output WD_13_R ;
  output WD_13_X ;
  output WD_13_C ;
  input WD_14;
  input WD_14_T ;
  input [13:0] WD_14_S ;
  output WD_14_R ;
  output WD_14_X ;
  output WD_14_C ;
  input WD_15;
  input WD_15_T ;
  input [13:0] WD_15_S ;
  output WD_15_R ;
  output WD_15_X ;
  output WD_15_C ;
  input WD_2;
  input WD_2_T ;
  input [13:0] WD_2_S ;
  output WD_2_R ;
  output WD_2_X ;
  output WD_2_C ;
  input WD_3;
  input WD_3_T ;
  input [13:0] WD_3_S ;
  output WD_3_R ;
  output WD_3_X ;
  output WD_3_C ;
  input WD_4;
  input WD_4_T ;
  input [13:0] WD_4_S ;
  output WD_4_R ;
  output WD_4_X ;
  output WD_4_C ;
  input WD_5;
  input WD_5_T ;
  input [13:0] WD_5_S ;
  output WD_5_R ;
  output WD_5_X ;
  output WD_5_C ;
  input WD_6;
  input WD_6_T ;
  input [13:0] WD_6_S ;
  output WD_6_R ;
  output WD_6_X ;
  output WD_6_C ;
  input WD_7;
  input WD_7_T ;
  input [13:0] WD_7_S ;
  output WD_7_R ;
  output WD_7_X ;
  output WD_7_C ;
  input WD_8;
  input WD_8_T ;
  input [13:0] WD_8_S ;
  output WD_8_R ;
  output WD_8_X ;
  output WD_8_C ;
  input WD_9;
  input WD_9_T ;
  input [13:0] WD_9_S ;
  output WD_9_R ;
  output WD_9_X ;
  output WD_9_C ;
  input WE;
  input WE_T ;
  input [13:0] WE_S ;
  output WE_R ;
  output WE_X ;
  output WE_C ;
  logic clamp_rd;
  logic clamp_rd_T ;
  logic clamp_rd_R ;
  logic clamp_rd_C ;
  logic clamp_rd_X ;
  logic [13:0] clamp_rd_S ;
  logic clobber_array;
  logic clobber_array_T ;
  logic clobber_array_R ;
  logic clobber_array_C ;
  logic clobber_array_X ;
  logic [13:0] clobber_array_S ;
  logic clobber_flops;
  logic clobber_flops_T ;
  logic clobber_flops_R ;
  logic clobber_flops_C ;
  logic clobber_flops_X ;
  logic [13:0] clobber_flops_S ;
  logic clobber_x;
  logic clobber_x_T ;
  logic clobber_x_R ;
  logic clobber_x_C ;
  logic clobber_x_X ;
  logic [13:0] clobber_x_S ;
  logic [15:0] fangyuan0;
  logic [15:0] fangyuan0_T ;
  logic [15:0] fangyuan0_R ;
  logic [15:0] fangyuan0_C ;
  logic [15:0] fangyuan0_X ;
  assign fangyuan0 = { RD_15, RD_14, RD_13, RD_12, RD_11, RD_10, RD_9, RD_8, RD_7, RD_6, RD_5, RD_4, RD_3, RD_2, RD_1, RD_0 };
  assign fangyuan0_T = {  RD_15_T , RD_14_T , RD_13_T , RD_12_T , RD_11_T , RD_10_T , RD_9_T , RD_8_T , RD_7_T , RD_6_T , RD_5_T , RD_4_T , RD_3_T , RD_2_T , RD_1_T , RD_0_T  };
  logic [13:0] fangyuan0_S ;
  assign fangyuan0_S = 0 ;
  logic [0:0] RD_15_R1 ;
  logic [0:0] RD_15_X1 ;
  logic [0:0] RD_15_C1 ;
  assign RD_15_R1 = fangyuan0_R [15:15] ;
  assign RD_15_X1 = fangyuan0_X [15:15] ;
  assign RD_15_C1 = fangyuan0_C [15:15] ;
  logic [0:0] RD_14_R1 ;
  logic [0:0] RD_14_X1 ;
  logic [0:0] RD_14_C1 ;
  assign RD_14_R1 = fangyuan0_R [14:14] ;
  assign RD_14_X1 = fangyuan0_X [14:14] ;
  assign RD_14_C1 = fangyuan0_C [14:14] ;
  logic [0:0] RD_13_R1 ;
  logic [0:0] RD_13_X1 ;
  logic [0:0] RD_13_C1 ;
  assign RD_13_R1 = fangyuan0_R [13:13] ;
  assign RD_13_X1 = fangyuan0_X [13:13] ;
  assign RD_13_C1 = fangyuan0_C [13:13] ;
  logic [0:0] RD_12_R1 ;
  logic [0:0] RD_12_X1 ;
  logic [0:0] RD_12_C1 ;
  assign RD_12_R1 = fangyuan0_R [12:12] ;
  assign RD_12_X1 = fangyuan0_X [12:12] ;
  assign RD_12_C1 = fangyuan0_C [12:12] ;
  logic [0:0] RD_11_R1 ;
  logic [0:0] RD_11_X1 ;
  logic [0:0] RD_11_C1 ;
  assign RD_11_R1 = fangyuan0_R [11:11] ;
  assign RD_11_X1 = fangyuan0_X [11:11] ;
  assign RD_11_C1 = fangyuan0_C [11:11] ;
  logic [0:0] RD_10_R1 ;
  logic [0:0] RD_10_X1 ;
  logic [0:0] RD_10_C1 ;
  assign RD_10_R1 = fangyuan0_R [10:10] ;
  assign RD_10_X1 = fangyuan0_X [10:10] ;
  assign RD_10_C1 = fangyuan0_C [10:10] ;
  logic [0:0] RD_9_R1 ;
  logic [0:0] RD_9_X1 ;
  logic [0:0] RD_9_C1 ;
  assign RD_9_R1 = fangyuan0_R [9:9] ;
  assign RD_9_X1 = fangyuan0_X [9:9] ;
  assign RD_9_C1 = fangyuan0_C [9:9] ;
  logic [0:0] RD_8_R1 ;
  logic [0:0] RD_8_X1 ;
  logic [0:0] RD_8_C1 ;
  assign RD_8_R1 = fangyuan0_R [8:8] ;
  assign RD_8_X1 = fangyuan0_X [8:8] ;
  assign RD_8_C1 = fangyuan0_C [8:8] ;
  logic [0:0] RD_7_R1 ;
  logic [0:0] RD_7_X1 ;
  logic [0:0] RD_7_C1 ;
  assign RD_7_R1 = fangyuan0_R [7:7] ;
  assign RD_7_X1 = fangyuan0_X [7:7] ;
  assign RD_7_C1 = fangyuan0_C [7:7] ;
  logic [0:0] RD_6_R1 ;
  logic [0:0] RD_6_X1 ;
  logic [0:0] RD_6_C1 ;
  assign RD_6_R1 = fangyuan0_R [6:6] ;
  assign RD_6_X1 = fangyuan0_X [6:6] ;
  assign RD_6_C1 = fangyuan0_C [6:6] ;
  logic [0:0] RD_5_R1 ;
  logic [0:0] RD_5_X1 ;
  logic [0:0] RD_5_C1 ;
  assign RD_5_R1 = fangyuan0_R [5:5] ;
  assign RD_5_X1 = fangyuan0_X [5:5] ;
  assign RD_5_C1 = fangyuan0_C [5:5] ;
  logic [0:0] RD_4_R1 ;
  logic [0:0] RD_4_X1 ;
  logic [0:0] RD_4_C1 ;
  assign RD_4_R1 = fangyuan0_R [4:4] ;
  assign RD_4_X1 = fangyuan0_X [4:4] ;
  assign RD_4_C1 = fangyuan0_C [4:4] ;
  logic [0:0] RD_3_R1 ;
  logic [0:0] RD_3_X1 ;
  logic [0:0] RD_3_C1 ;
  assign RD_3_R1 = fangyuan0_R [3:3] ;
  assign RD_3_X1 = fangyuan0_X [3:3] ;
  assign RD_3_C1 = fangyuan0_C [3:3] ;
  logic [0:0] RD_2_R1 ;
  logic [0:0] RD_2_X1 ;
  logic [0:0] RD_2_C1 ;
  assign RD_2_R1 = fangyuan0_R [2:2] ;
  assign RD_2_X1 = fangyuan0_X [2:2] ;
  assign RD_2_C1 = fangyuan0_C [2:2] ;
  logic [0:0] RD_1_R1 ;
  logic [0:0] RD_1_X1 ;
  logic [0:0] RD_1_C1 ;
  assign RD_1_R1 = fangyuan0_R [1:1] ;
  assign RD_1_X1 = fangyuan0_X [1:1] ;
  assign RD_1_C1 = fangyuan0_C [1:1] ;
  logic [0:0] RD_0_R1 ;
  logic [0:0] RD_0_X1 ;
  logic [0:0] RD_0_C1 ;
  assign RD_0_R1 = fangyuan0_R [0:0] ;
  assign RD_0_X1 = fangyuan0_X [0:0] ;
  assign RD_0_C1 = fangyuan0_C [0:0] ;

  assign fangyuan0 = RD & _0_;
  assign fangyuan0_S = 0 ;
  logic [15:0] RD_C0 ;
  logic [15:0] RD_R0 ;
  logic [15:0] RD_X0 ;
  logic [15:0] _0__C0 ;
  logic [15:0] _0__R0 ;
  logic [15:0] _0__X0 ;
  assign fangyuan0_T = RD_T | _0__T ;
  assign RD_C0 = fangyuan0_C ;
  assign RD_X0 = fangyuan0_X ;
  assign _0__C0 = fangyuan0_C ;
  assign _0__X0 = fangyuan0_X ;
  assign RD_R0 = ( fangyuan0_R | fangyuan0_C & _0__T ) & { 16{ _0_ != 0 }} ;
  assign _0__R0 = ( fangyuan0_R | fangyuan0_C & RD_T ) & { 16{ RD != 0 }} ;
  logic [15:0] fangyuan1;
  logic [15:0] fangyuan1_T ;
  logic [15:0] fangyuan1_R ;
  logic [15:0] fangyuan1_C ;
  logic [15:0] fangyuan1_X ;
  assign fangyuan1 = { SLEEP_EN_7, SLEEP_EN_7, SLEEP_EN_7, SLEEP_EN_7, SLEEP_EN_7, SLEEP_EN_7, SLEEP_EN_7, SLEEP_EN_7, SLEEP_EN_7, SLEEP_EN_7, SLEEP_EN_7, SLEEP_EN_7, SLEEP_EN_7, SLEEP_EN_7, SLEEP_EN_7, SLEEP_EN_7 };
  assign fangyuan1_T = {  SLEEP_EN_7_T , SLEEP_EN_7_T , SLEEP_EN_7_T , SLEEP_EN_7_T , SLEEP_EN_7_T , SLEEP_EN_7_T , SLEEP_EN_7_T , SLEEP_EN_7_T , SLEEP_EN_7_T , SLEEP_EN_7_T , SLEEP_EN_7_T , SLEEP_EN_7_T , SLEEP_EN_7_T , SLEEP_EN_7_T , SLEEP_EN_7_T , SLEEP_EN_7_T  };
  logic [13:0] fangyuan1_S ;
  assign fangyuan1_S = 0 ;
  logic [0:0] SLEEP_EN_7_R0 ;
  logic [0:0] SLEEP_EN_7_X0 ;
  logic [0:0] SLEEP_EN_7_C0 ;
  assign SLEEP_EN_7_R0 = fangyuan1_R [15:15] ;
  assign SLEEP_EN_7_X0 = fangyuan1_X [15:15] ;
  assign SLEEP_EN_7_C0 = fangyuan1_C [15:15] ;
  logic [0:0] SLEEP_EN_7_R1 ;
  logic [0:0] SLEEP_EN_7_X1 ;
  logic [0:0] SLEEP_EN_7_C1 ;
  assign SLEEP_EN_7_R1 = fangyuan1_R [14:14] ;
  assign SLEEP_EN_7_X1 = fangyuan1_X [14:14] ;
  assign SLEEP_EN_7_C1 = fangyuan1_C [14:14] ;
  logic [0:0] SLEEP_EN_7_R2 ;
  logic [0:0] SLEEP_EN_7_X2 ;
  logic [0:0] SLEEP_EN_7_C2 ;
  assign SLEEP_EN_7_R2 = fangyuan1_R [13:13] ;
  assign SLEEP_EN_7_X2 = fangyuan1_X [13:13] ;
  assign SLEEP_EN_7_C2 = fangyuan1_C [13:13] ;
  logic [0:0] SLEEP_EN_7_R3 ;
  logic [0:0] SLEEP_EN_7_X3 ;
  logic [0:0] SLEEP_EN_7_C3 ;
  assign SLEEP_EN_7_R3 = fangyuan1_R [12:12] ;
  assign SLEEP_EN_7_X3 = fangyuan1_X [12:12] ;
  assign SLEEP_EN_7_C3 = fangyuan1_C [12:12] ;
  logic [0:0] SLEEP_EN_7_R4 ;
  logic [0:0] SLEEP_EN_7_X4 ;
  logic [0:0] SLEEP_EN_7_C4 ;
  assign SLEEP_EN_7_R4 = fangyuan1_R [11:11] ;
  assign SLEEP_EN_7_X4 = fangyuan1_X [11:11] ;
  assign SLEEP_EN_7_C4 = fangyuan1_C [11:11] ;
  logic [0:0] SLEEP_EN_7_R5 ;
  logic [0:0] SLEEP_EN_7_X5 ;
  logic [0:0] SLEEP_EN_7_C5 ;
  assign SLEEP_EN_7_R5 = fangyuan1_R [10:10] ;
  assign SLEEP_EN_7_X5 = fangyuan1_X [10:10] ;
  assign SLEEP_EN_7_C5 = fangyuan1_C [10:10] ;
  logic [0:0] SLEEP_EN_7_R6 ;
  logic [0:0] SLEEP_EN_7_X6 ;
  logic [0:0] SLEEP_EN_7_C6 ;
  assign SLEEP_EN_7_R6 = fangyuan1_R [9:9] ;
  assign SLEEP_EN_7_X6 = fangyuan1_X [9:9] ;
  assign SLEEP_EN_7_C6 = fangyuan1_C [9:9] ;
  logic [0:0] SLEEP_EN_7_R7 ;
  logic [0:0] SLEEP_EN_7_X7 ;
  logic [0:0] SLEEP_EN_7_C7 ;
  assign SLEEP_EN_7_R7 = fangyuan1_R [8:8] ;
  assign SLEEP_EN_7_X7 = fangyuan1_X [8:8] ;
  assign SLEEP_EN_7_C7 = fangyuan1_C [8:8] ;
  logic [0:0] SLEEP_EN_7_R8 ;
  logic [0:0] SLEEP_EN_7_X8 ;
  logic [0:0] SLEEP_EN_7_C8 ;
  assign SLEEP_EN_7_R8 = fangyuan1_R [7:7] ;
  assign SLEEP_EN_7_X8 = fangyuan1_X [7:7] ;
  assign SLEEP_EN_7_C8 = fangyuan1_C [7:7] ;
  logic [0:0] SLEEP_EN_7_R9 ;
  logic [0:0] SLEEP_EN_7_X9 ;
  logic [0:0] SLEEP_EN_7_C9 ;
  assign SLEEP_EN_7_R9 = fangyuan1_R [6:6] ;
  assign SLEEP_EN_7_X9 = fangyuan1_X [6:6] ;
  assign SLEEP_EN_7_C9 = fangyuan1_C [6:6] ;
  logic [0:0] SLEEP_EN_7_R10 ;
  logic [0:0] SLEEP_EN_7_X10 ;
  logic [0:0] SLEEP_EN_7_C10 ;
  assign SLEEP_EN_7_R10 = fangyuan1_R [5:5] ;
  assign SLEEP_EN_7_X10 = fangyuan1_X [5:5] ;
  assign SLEEP_EN_7_C10 = fangyuan1_C [5:5] ;
  logic [0:0] SLEEP_EN_7_R11 ;
  logic [0:0] SLEEP_EN_7_X11 ;
  logic [0:0] SLEEP_EN_7_C11 ;
  assign SLEEP_EN_7_R11 = fangyuan1_R [4:4] ;
  assign SLEEP_EN_7_X11 = fangyuan1_X [4:4] ;
  assign SLEEP_EN_7_C11 = fangyuan1_C [4:4] ;
  logic [0:0] SLEEP_EN_7_R12 ;
  logic [0:0] SLEEP_EN_7_X12 ;
  logic [0:0] SLEEP_EN_7_C12 ;
  assign SLEEP_EN_7_R12 = fangyuan1_R [3:3] ;
  assign SLEEP_EN_7_X12 = fangyuan1_X [3:3] ;
  assign SLEEP_EN_7_C12 = fangyuan1_C [3:3] ;
  logic [0:0] SLEEP_EN_7_R13 ;
  logic [0:0] SLEEP_EN_7_X13 ;
  logic [0:0] SLEEP_EN_7_C13 ;
  assign SLEEP_EN_7_R13 = fangyuan1_R [2:2] ;
  assign SLEEP_EN_7_X13 = fangyuan1_X [2:2] ;
  assign SLEEP_EN_7_C13 = fangyuan1_C [2:2] ;
  logic [0:0] SLEEP_EN_7_R14 ;
  logic [0:0] SLEEP_EN_7_X14 ;
  logic [0:0] SLEEP_EN_7_C14 ;
  assign SLEEP_EN_7_R14 = fangyuan1_R [1:1] ;
  assign SLEEP_EN_7_X14 = fangyuan1_X [1:1] ;
  assign SLEEP_EN_7_C14 = fangyuan1_C [1:1] ;
  logic [0:0] SLEEP_EN_7_R15 ;
  logic [0:0] SLEEP_EN_7_X15 ;
  logic [0:0] SLEEP_EN_7_C15 ;
  assign SLEEP_EN_7_R15 = fangyuan1_R [0:0] ;
  assign SLEEP_EN_7_X15 = fangyuan1_X [0:0] ;
  assign SLEEP_EN_7_C15 = fangyuan1_C [0:0] ;

  assign _0_ = ~ fangyuan1;
  logic [15:0] fangyuan1_C0 ;
  logic [15:0] fangyuan1_R0 ;
  logic [15:0] fangyuan1_X0 ;
  assign _0__T = fangyuan1_T ;
  assign fangyuan1_C0 = _0__C ;
  assign fangyuan1_R0 = _0__R ;
  assign fangyuan1_X0 = _0__X ;
  assign _0__S = 0 ;
  logic [0:0] IDDQ_R0 ;
  logic [0:0] IDDQ_X0 ;
  logic [0:0] IDDQ_C0 ;
  logic [0:0] RADR_7_R0 ;
  logic [0:0] RADR_7_X0 ;
  logic [0:0] RADR_7_C0 ;
  logic [0:0] RADR_6_R0 ;
  logic [0:0] RADR_6_X0 ;
  logic [0:0] RADR_6_C0 ;
  logic [0:0] RADR_5_R0 ;
  logic [0:0] RADR_5_X0 ;
  logic [0:0] RADR_5_C0 ;
  logic [0:0] RADR_4_R0 ;
  logic [0:0] RADR_4_X0 ;
  logic [0:0] RADR_4_C0 ;
  logic [0:0] RADR_3_R0 ;
  logic [0:0] RADR_3_X0 ;
  logic [0:0] RADR_3_C0 ;
  logic [0:0] RADR_2_R0 ;
  logic [0:0] RADR_2_X0 ;
  logic [0:0] RADR_2_C0 ;
  logic [0:0] RADR_1_R0 ;
  logic [0:0] RADR_1_X0 ;
  logic [0:0] RADR_1_C0 ;
  logic [0:0] RADR_0_R0 ;
  logic [0:0] RADR_0_X0 ;
  logic [0:0] RADR_0_C0 ;
  logic [0:0] RE_R0 ;
  logic [0:0] RE_X0 ;
  logic [0:0] RE_C0 ;
  logic [0:0] RET_EN_R0 ;
  logic [0:0] RET_EN_X0 ;
  logic [0:0] RET_EN_C0 ;
  logic [0:0] SLEEP_EN_7_R16 ;
  logic [0:0] SLEEP_EN_7_X16 ;
  logic [0:0] SLEEP_EN_7_C16 ;
  logic [0:0] SLEEP_EN_6_R0 ;
  logic [0:0] SLEEP_EN_6_X0 ;
  logic [0:0] SLEEP_EN_6_C0 ;
  logic [0:0] SLEEP_EN_5_R0 ;
  logic [0:0] SLEEP_EN_5_X0 ;
  logic [0:0] SLEEP_EN_5_C0 ;
  logic [0:0] SLEEP_EN_4_R0 ;
  logic [0:0] SLEEP_EN_4_X0 ;
  logic [0:0] SLEEP_EN_4_C0 ;
  logic [0:0] SLEEP_EN_3_R0 ;
  logic [0:0] SLEEP_EN_3_X0 ;
  logic [0:0] SLEEP_EN_3_C0 ;
  logic [0:0] SLEEP_EN_2_R0 ;
  logic [0:0] SLEEP_EN_2_X0 ;
  logic [0:0] SLEEP_EN_2_C0 ;
  logic [0:0] SLEEP_EN_1_R0 ;
  logic [0:0] SLEEP_EN_1_X0 ;
  logic [0:0] SLEEP_EN_1_C0 ;
  logic [0:0] SLEEP_EN_0_R0 ;
  logic [0:0] SLEEP_EN_0_X0 ;
  logic [0:0] SLEEP_EN_0_C0 ;
  logic [0:0] SVOP_7_R0 ;
  logic [0:0] SVOP_7_X0 ;
  logic [0:0] SVOP_7_C0 ;
  logic [0:0] SVOP_6_R0 ;
  logic [0:0] SVOP_6_X0 ;
  logic [0:0] SVOP_6_C0 ;
  logic [0:0] SVOP_5_R0 ;
  logic [0:0] SVOP_5_X0 ;
  logic [0:0] SVOP_5_C0 ;
  logic [0:0] SVOP_4_R0 ;
  logic [0:0] SVOP_4_X0 ;
  logic [0:0] SVOP_4_C0 ;
  logic [0:0] SVOP_3_R0 ;
  logic [0:0] SVOP_3_X0 ;
  logic [0:0] SVOP_3_C0 ;
  logic [0:0] SVOP_2_R0 ;
  logic [0:0] SVOP_2_X0 ;
  logic [0:0] SVOP_2_C0 ;
  logic [0:0] SVOP_1_R0 ;
  logic [0:0] SVOP_1_X0 ;
  logic [0:0] SVOP_1_C0 ;
  logic [0:0] SVOP_0_R0 ;
  logic [0:0] SVOP_0_X0 ;
  logic [0:0] SVOP_0_C0 ;
  logic [0:0] WADR_7_R0 ;
  logic [0:0] WADR_7_X0 ;
  logic [0:0] WADR_7_C0 ;
  logic [0:0] WADR_6_R0 ;
  logic [0:0] WADR_6_X0 ;
  logic [0:0] WADR_6_C0 ;
  logic [0:0] WADR_5_R0 ;
  logic [0:0] WADR_5_X0 ;
  logic [0:0] WADR_5_C0 ;
  logic [0:0] WADR_4_R0 ;
  logic [0:0] WADR_4_X0 ;
  logic [0:0] WADR_4_C0 ;
  logic [0:0] WADR_3_R0 ;
  logic [0:0] WADR_3_X0 ;
  logic [0:0] WADR_3_C0 ;
  logic [0:0] WADR_2_R0 ;
  logic [0:0] WADR_2_X0 ;
  logic [0:0] WADR_2_C0 ;
  logic [0:0] WADR_1_R0 ;
  logic [0:0] WADR_1_X0 ;
  logic [0:0] WADR_1_C0 ;
  logic [0:0] WADR_0_R0 ;
  logic [0:0] WADR_0_X0 ;
  logic [0:0] WADR_0_C0 ;
  logic [0:0] WD_15_R0 ;
  logic [0:0] WD_15_X0 ;
  logic [0:0] WD_15_C0 ;
  logic [0:0] WD_14_R0 ;
  logic [0:0] WD_14_X0 ;
  logic [0:0] WD_14_C0 ;
  logic [0:0] WD_13_R0 ;
  logic [0:0] WD_13_X0 ;
  logic [0:0] WD_13_C0 ;
  logic [0:0] WD_12_R0 ;
  logic [0:0] WD_12_X0 ;
  logic [0:0] WD_12_C0 ;
  logic [0:0] WD_11_R0 ;
  logic [0:0] WD_11_X0 ;
  logic [0:0] WD_11_C0 ;
  logic [0:0] WD_10_R0 ;
  logic [0:0] WD_10_X0 ;
  logic [0:0] WD_10_C0 ;
  logic [0:0] WD_9_R0 ;
  logic [0:0] WD_9_X0 ;
  logic [0:0] WD_9_C0 ;
  logic [0:0] WD_8_R0 ;
  logic [0:0] WD_8_X0 ;
  logic [0:0] WD_8_C0 ;
  logic [0:0] WD_7_R0 ;
  logic [0:0] WD_7_X0 ;
  logic [0:0] WD_7_C0 ;
  logic [0:0] WD_6_R0 ;
  logic [0:0] WD_6_X0 ;
  logic [0:0] WD_6_C0 ;
  logic [0:0] WD_5_R0 ;
  logic [0:0] WD_5_X0 ;
  logic [0:0] WD_5_C0 ;
  logic [0:0] WD_4_R0 ;
  logic [0:0] WD_4_X0 ;
  logic [0:0] WD_4_C0 ;
  logic [0:0] WD_3_R0 ;
  logic [0:0] WD_3_X0 ;
  logic [0:0] WD_3_C0 ;
  logic [0:0] WD_2_R0 ;
  logic [0:0] WD_2_X0 ;
  logic [0:0] WD_2_C0 ;
  logic [0:0] WD_1_R0 ;
  logic [0:0] WD_1_X0 ;
  logic [0:0] WD_1_C0 ;
  logic [0:0] WD_0_R0 ;
  logic [0:0] WD_0_X0 ;
  logic [0:0] WD_0_C0 ;
  logic [0:0] WE_R0 ;
  logic [0:0] WE_X0 ;
  logic [0:0] WE_C0 ;
// module: RAM_BANK_RAMPDP_160X16_GL_M2_D2
  RAM_BANK_RAMPDP_160X16_GL_M2_D2 ITOP (
    .IDDQ_T (  IDDQ_T  ),
    .IDDQ_R (  IDDQ_R0  ),
    .IDDQ_X (  IDDQ_X0  ),
    .IDDQ_C (  IDDQ_C0  ),
    .IDDQ_S (  IDDQ_S  ),
    .RA_T ( {  RADR_7_T , RADR_6_T , RADR_5_T , RADR_4_T , RADR_3_T , RADR_2_T , RADR_1_T , RADR_0_T  } ),
    .RA_R ( {  RADR_7_R0 , RADR_6_R0 , RADR_5_R0 , RADR_4_R0 , RADR_3_R0 , RADR_2_R0 , RADR_1_R0 , RADR_0_R0  } ),
    .RA_X ( {  RADR_7_X0 , RADR_6_X0 , RADR_5_X0 , RADR_4_X0 , RADR_3_X0 , RADR_2_X0 , RADR_1_X0 , RADR_0_X0  } ),
    .RA_C ( {  RADR_7_C0 , RADR_6_C0 , RADR_5_C0 , RADR_4_C0 , RADR_3_C0 , RADR_2_C0 , RADR_1_C0 , RADR_0_C0  } ),
    .RA_S ( {  RADR_7_S , RADR_6_S , RADR_5_S , RADR_4_S , RADR_3_S , RADR_2_S , RADR_1_S , RADR_0_S  } ),
    .RE_T (  RE_T  ),
    .RE_R (  RE_R0  ),
    .RE_X (  RE_X0  ),
    .RE_C (  RE_C0  ),
    .RE_S (  RE_S  ),
    .RET_EN_T (  RET_EN_T  ),
    .RET_EN_R (  RET_EN_R0  ),
    .RET_EN_X (  RET_EN_X0  ),
    .RET_EN_C (  RET_EN_C0  ),
    .RET_EN_S (  RET_EN_S  ),
    .SLEEP_EN_T ( {  SLEEP_EN_7_T , SLEEP_EN_6_T , SLEEP_EN_5_T , SLEEP_EN_4_T , SLEEP_EN_3_T , SLEEP_EN_2_T , SLEEP_EN_1_T , SLEEP_EN_0_T  } ),
    .SLEEP_EN_R ( {  SLEEP_EN_7_R16 , SLEEP_EN_6_R0 , SLEEP_EN_5_R0 , SLEEP_EN_4_R0 , SLEEP_EN_3_R0 , SLEEP_EN_2_R0 , SLEEP_EN_1_R0 , SLEEP_EN_0_R0  } ),
    .SLEEP_EN_X ( {  SLEEP_EN_7_X16 , SLEEP_EN_6_X0 , SLEEP_EN_5_X0 , SLEEP_EN_4_X0 , SLEEP_EN_3_X0 , SLEEP_EN_2_X0 , SLEEP_EN_1_X0 , SLEEP_EN_0_X0  } ),
    .SLEEP_EN_C ( {  SLEEP_EN_7_C16 , SLEEP_EN_6_C0 , SLEEP_EN_5_C0 , SLEEP_EN_4_C0 , SLEEP_EN_3_C0 , SLEEP_EN_2_C0 , SLEEP_EN_1_C0 , SLEEP_EN_0_C0  } ),
    .SLEEP_EN_S ( {  SLEEP_EN_7_S , SLEEP_EN_6_S , SLEEP_EN_5_S , SLEEP_EN_4_S , SLEEP_EN_3_S , SLEEP_EN_2_S , SLEEP_EN_1_S , SLEEP_EN_0_S  } ),
    .SVOP_T ( {  SVOP_7_T , SVOP_6_T , SVOP_5_T , SVOP_4_T , SVOP_3_T , SVOP_2_T , SVOP_1_T , SVOP_0_T  } ),
    .SVOP_R ( {  SVOP_7_R0 , SVOP_6_R0 , SVOP_5_R0 , SVOP_4_R0 , SVOP_3_R0 , SVOP_2_R0 , SVOP_1_R0 , SVOP_0_R0  } ),
    .SVOP_X ( {  SVOP_7_X0 , SVOP_6_X0 , SVOP_5_X0 , SVOP_4_X0 , SVOP_3_X0 , SVOP_2_X0 , SVOP_1_X0 , SVOP_0_X0  } ),
    .SVOP_C ( {  SVOP_7_C0 , SVOP_6_C0 , SVOP_5_C0 , SVOP_4_C0 , SVOP_3_C0 , SVOP_2_C0 , SVOP_1_C0 , SVOP_0_C0  } ),
    .SVOP_S ( {  SVOP_7_S , SVOP_6_S , SVOP_5_S , SVOP_4_S , SVOP_3_S , SVOP_2_S , SVOP_1_S , SVOP_0_S  } ),
    .WA_T ( {  WADR_7_T , WADR_6_T , WADR_5_T , WADR_4_T , WADR_3_T , WADR_2_T , WADR_1_T , WADR_0_T  } ),
    .WA_R ( {  WADR_7_R0 , WADR_6_R0 , WADR_5_R0 , WADR_4_R0 , WADR_3_R0 , WADR_2_R0 , WADR_1_R0 , WADR_0_R0  } ),
    .WA_X ( {  WADR_7_X0 , WADR_6_X0 , WADR_5_X0 , WADR_4_X0 , WADR_3_X0 , WADR_2_X0 , WADR_1_X0 , WADR_0_X0  } ),
    .WA_C ( {  WADR_7_C0 , WADR_6_C0 , WADR_5_C0 , WADR_4_C0 , WADR_3_C0 , WADR_2_C0 , WADR_1_C0 , WADR_0_C0  } ),
    .WA_S ( {  WADR_7_S , WADR_6_S , WADR_5_S , WADR_4_S , WADR_3_S , WADR_2_S , WADR_1_S , WADR_0_S  } ),
    .WD_T ( {  WD_15_T , WD_14_T , WD_13_T , WD_12_T , WD_11_T , WD_10_T , WD_9_T , WD_8_T , WD_7_T , WD_6_T , WD_5_T , WD_4_T , WD_3_T , WD_2_T , WD_1_T , WD_0_T  } ),
    .WD_R ( {  WD_15_R0 , WD_14_R0 , WD_13_R0 , WD_12_R0 , WD_11_R0 , WD_10_R0 , WD_9_R0 , WD_8_R0 , WD_7_R0 , WD_6_R0 , WD_5_R0 , WD_4_R0 , WD_3_R0 , WD_2_R0 , WD_1_R0 , WD_0_R0  } ),
    .WD_X ( {  WD_15_X0 , WD_14_X0 , WD_13_X0 , WD_12_X0 , WD_11_X0 , WD_10_X0 , WD_9_X0 , WD_8_X0 , WD_7_X0 , WD_6_X0 , WD_5_X0 , WD_4_X0 , WD_3_X0 , WD_2_X0 , WD_1_X0 , WD_0_X0  } ),
    .WD_C ( {  WD_15_C0 , WD_14_C0 , WD_13_C0 , WD_12_C0 , WD_11_C0 , WD_10_C0 , WD_9_C0 , WD_8_C0 , WD_7_C0 , WD_6_C0 , WD_5_C0 , WD_4_C0 , WD_3_C0 , WD_2_C0 , WD_1_C0 , WD_0_C0  } ),
    .WD_S ( {  WD_15_S , WD_14_S , WD_13_S , WD_12_S , WD_11_S , WD_10_S , WD_9_S , WD_8_S , WD_7_S , WD_6_S , WD_5_S , WD_4_S , WD_3_S , WD_2_S , WD_1_S , WD_0_S  } ),
    .WE_T (  WE_T  ),
    .WE_R (  WE_R0  ),
    .WE_X (  WE_X0  ),
    .WE_C (  WE_C0  ),
    .WE_S (  WE_S  ),
    .clobber_array_T (  1'h0  ),
    .clobber_array_R (  nouse_zy0  ),
    .clobber_array_X (  nouse_zy1  ),
    .clobber_array_C (  nouse_zy2  ),
    .clobber_array_S ( 1'h0 ),
    .clobber_flops_T (  1'h0  ),
    .clobber_flops_R (  nouse_zy3  ),
    .clobber_flops_X (  nouse_zy4  ),
    .clobber_flops_C (  nouse_zy5  ),
    .clobber_flops_S ( 1'h0 ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .RD_T (  RD_T  ),
    .RD_R0 (  RD_R  ),
    .RD_X0 (  RD_X  ),
    .RD_C0 (  RD_C  ),
    .RD_S ( RD_S ),
    .RE ( RE ),
    .clobber_flops ( 1'b0 ),
    .RD ( RD ),
    .RET_EN ( RET_EN ),
    .RA ( { RADR_7, RADR_6, RADR_5, RADR_4, RADR_3, RADR_2, RADR_1, RADR_0 } ),
    .WE ( WE ),
    .WA ( { WADR_7, WADR_6, WADR_5, WADR_4, WADR_3, WADR_2, WADR_1, WADR_0 } ),
    .CLK ( CLK ),
    .IDDQ ( IDDQ ),
    .SLEEP_EN ( { SLEEP_EN_7, SLEEP_EN_6, SLEEP_EN_5, SLEEP_EN_4, SLEEP_EN_3, SLEEP_EN_2, SLEEP_EN_1, SLEEP_EN_0 } ),
    .clobber_array ( 1'b0 ),
    .SVOP ( { SVOP_7, SVOP_6, SVOP_5, SVOP_4, SVOP_3, SVOP_2, SVOP_1, SVOP_0 } ),
    .WD ( { WD_15, WD_14, WD_13, WD_12, WD_11, WD_10, WD_9, WD_8, WD_7, WD_6, WD_5, WD_4, WD_3, WD_2, WD_1, WD_0 } )
  );
  logic [1-1:0] nouse_zy0 ;
  logic [1-1:0] nouse_zy1 ;
  logic [1-1:0] nouse_zy2 ;
  logic [1-1:0] nouse_zy3 ;
  logic [1-1:0] nouse_zy4 ;
  logic [1-1:0] nouse_zy5 ;
  assign GND = 1'b0;
  assign GND_T = 0 ;
  assign GND_S = 14'b1 ;
  assign RA = { RADR_7, RADR_6, RADR_5, RADR_4, RADR_3, RADR_2, RADR_1, RADR_0 };
  assign RA_T = {  RADR_7_T , RADR_6_T , RADR_5_T , RADR_4_T , RADR_3_T , RADR_2_T , RADR_1_T , RADR_0_T  };
  logic [13:0] RA_S ;
  assign RA_S = 0 ;
  logic [0:0] RADR_7_R1 ;
  logic [0:0] RADR_7_X1 ;
  logic [0:0] RADR_7_C1 ;
  assign RADR_7_R1 = RA_R [7:7] ;
  assign RADR_7_X1 = RA_X [7:7] ;
  assign RADR_7_C1 = RA_C [7:7] ;
  logic [0:0] RADR_6_R1 ;
  logic [0:0] RADR_6_X1 ;
  logic [0:0] RADR_6_C1 ;
  assign RADR_6_R1 = RA_R [6:6] ;
  assign RADR_6_X1 = RA_X [6:6] ;
  assign RADR_6_C1 = RA_C [6:6] ;
  logic [0:0] RADR_5_R1 ;
  logic [0:0] RADR_5_X1 ;
  logic [0:0] RADR_5_C1 ;
  assign RADR_5_R1 = RA_R [5:5] ;
  assign RADR_5_X1 = RA_X [5:5] ;
  assign RADR_5_C1 = RA_C [5:5] ;
  logic [0:0] RADR_4_R1 ;
  logic [0:0] RADR_4_X1 ;
  logic [0:0] RADR_4_C1 ;
  assign RADR_4_R1 = RA_R [4:4] ;
  assign RADR_4_X1 = RA_X [4:4] ;
  assign RADR_4_C1 = RA_C [4:4] ;
  logic [0:0] RADR_3_R1 ;
  logic [0:0] RADR_3_X1 ;
  logic [0:0] RADR_3_C1 ;
  assign RADR_3_R1 = RA_R [3:3] ;
  assign RADR_3_X1 = RA_X [3:3] ;
  assign RADR_3_C1 = RA_C [3:3] ;
  logic [0:0] RADR_2_R1 ;
  logic [0:0] RADR_2_X1 ;
  logic [0:0] RADR_2_C1 ;
  assign RADR_2_R1 = RA_R [2:2] ;
  assign RADR_2_X1 = RA_X [2:2] ;
  assign RADR_2_C1 = RA_C [2:2] ;
  logic [0:0] RADR_1_R1 ;
  logic [0:0] RADR_1_X1 ;
  logic [0:0] RADR_1_C1 ;
  assign RADR_1_R1 = RA_R [1:1] ;
  assign RADR_1_X1 = RA_X [1:1] ;
  assign RADR_1_C1 = RA_C [1:1] ;
  logic [0:0] RADR_0_R1 ;
  logic [0:0] RADR_0_X1 ;
  logic [0:0] RADR_0_C1 ;
  assign RADR_0_R1 = RA_R [0:0] ;
  assign RADR_0_X1 = RA_X [0:0] ;
  assign RADR_0_C1 = RA_C [0:0] ;
  assign SLEEP_EN = { SLEEP_EN_7, SLEEP_EN_6, SLEEP_EN_5, SLEEP_EN_4, SLEEP_EN_3, SLEEP_EN_2, SLEEP_EN_1, SLEEP_EN_0 };
  assign SLEEP_EN_T = {  SLEEP_EN_7_T , SLEEP_EN_6_T , SLEEP_EN_5_T , SLEEP_EN_4_T , SLEEP_EN_3_T , SLEEP_EN_2_T , SLEEP_EN_1_T , SLEEP_EN_0_T  };
  logic [13:0] SLEEP_EN_S ;
  assign SLEEP_EN_S = 0 ;
  logic [0:0] SLEEP_EN_7_R17 ;
  logic [0:0] SLEEP_EN_7_X17 ;
  logic [0:0] SLEEP_EN_7_C17 ;
  assign SLEEP_EN_7_R17 = SLEEP_EN_R [7:7] ;
  assign SLEEP_EN_7_X17 = SLEEP_EN_X [7:7] ;
  assign SLEEP_EN_7_C17 = SLEEP_EN_C [7:7] ;
  logic [0:0] SLEEP_EN_6_R1 ;
  logic [0:0] SLEEP_EN_6_X1 ;
  logic [0:0] SLEEP_EN_6_C1 ;
  assign SLEEP_EN_6_R1 = SLEEP_EN_R [6:6] ;
  assign SLEEP_EN_6_X1 = SLEEP_EN_X [6:6] ;
  assign SLEEP_EN_6_C1 = SLEEP_EN_C [6:6] ;
  logic [0:0] SLEEP_EN_5_R1 ;
  logic [0:0] SLEEP_EN_5_X1 ;
  logic [0:0] SLEEP_EN_5_C1 ;
  assign SLEEP_EN_5_R1 = SLEEP_EN_R [5:5] ;
  assign SLEEP_EN_5_X1 = SLEEP_EN_X [5:5] ;
  assign SLEEP_EN_5_C1 = SLEEP_EN_C [5:5] ;
  logic [0:0] SLEEP_EN_4_R1 ;
  logic [0:0] SLEEP_EN_4_X1 ;
  logic [0:0] SLEEP_EN_4_C1 ;
  assign SLEEP_EN_4_R1 = SLEEP_EN_R [4:4] ;
  assign SLEEP_EN_4_X1 = SLEEP_EN_X [4:4] ;
  assign SLEEP_EN_4_C1 = SLEEP_EN_C [4:4] ;
  logic [0:0] SLEEP_EN_3_R1 ;
  logic [0:0] SLEEP_EN_3_X1 ;
  logic [0:0] SLEEP_EN_3_C1 ;
  assign SLEEP_EN_3_R1 = SLEEP_EN_R [3:3] ;
  assign SLEEP_EN_3_X1 = SLEEP_EN_X [3:3] ;
  assign SLEEP_EN_3_C1 = SLEEP_EN_C [3:3] ;
  logic [0:0] SLEEP_EN_2_R1 ;
  logic [0:0] SLEEP_EN_2_X1 ;
  logic [0:0] SLEEP_EN_2_C1 ;
  assign SLEEP_EN_2_R1 = SLEEP_EN_R [2:2] ;
  assign SLEEP_EN_2_X1 = SLEEP_EN_X [2:2] ;
  assign SLEEP_EN_2_C1 = SLEEP_EN_C [2:2] ;
  logic [0:0] SLEEP_EN_1_R1 ;
  logic [0:0] SLEEP_EN_1_X1 ;
  logic [0:0] SLEEP_EN_1_C1 ;
  assign SLEEP_EN_1_R1 = SLEEP_EN_R [1:1] ;
  assign SLEEP_EN_1_X1 = SLEEP_EN_X [1:1] ;
  assign SLEEP_EN_1_C1 = SLEEP_EN_C [1:1] ;
  logic [0:0] SLEEP_EN_0_R1 ;
  logic [0:0] SLEEP_EN_0_X1 ;
  logic [0:0] SLEEP_EN_0_C1 ;
  assign SLEEP_EN_0_R1 = SLEEP_EN_R [0:0] ;
  assign SLEEP_EN_0_X1 = SLEEP_EN_X [0:0] ;
  assign SLEEP_EN_0_C1 = SLEEP_EN_C [0:0] ;
  assign SVOP = { SVOP_7, SVOP_6, SVOP_5, SVOP_4, SVOP_3, SVOP_2, SVOP_1, SVOP_0 };
  assign SVOP_T = {  SVOP_7_T , SVOP_6_T , SVOP_5_T , SVOP_4_T , SVOP_3_T , SVOP_2_T , SVOP_1_T , SVOP_0_T  };
  logic [13:0] SVOP_S ;
  assign SVOP_S = 0 ;
  logic [0:0] SVOP_7_R1 ;
  logic [0:0] SVOP_7_X1 ;
  logic [0:0] SVOP_7_C1 ;
  assign SVOP_7_R1 = SVOP_R [7:7] ;
  assign SVOP_7_X1 = SVOP_X [7:7] ;
  assign SVOP_7_C1 = SVOP_C [7:7] ;
  logic [0:0] SVOP_6_R1 ;
  logic [0:0] SVOP_6_X1 ;
  logic [0:0] SVOP_6_C1 ;
  assign SVOP_6_R1 = SVOP_R [6:6] ;
  assign SVOP_6_X1 = SVOP_X [6:6] ;
  assign SVOP_6_C1 = SVOP_C [6:6] ;
  logic [0:0] SVOP_5_R1 ;
  logic [0:0] SVOP_5_X1 ;
  logic [0:0] SVOP_5_C1 ;
  assign SVOP_5_R1 = SVOP_R [5:5] ;
  assign SVOP_5_X1 = SVOP_X [5:5] ;
  assign SVOP_5_C1 = SVOP_C [5:5] ;
  logic [0:0] SVOP_4_R1 ;
  logic [0:0] SVOP_4_X1 ;
  logic [0:0] SVOP_4_C1 ;
  assign SVOP_4_R1 = SVOP_R [4:4] ;
  assign SVOP_4_X1 = SVOP_X [4:4] ;
  assign SVOP_4_C1 = SVOP_C [4:4] ;
  logic [0:0] SVOP_3_R1 ;
  logic [0:0] SVOP_3_X1 ;
  logic [0:0] SVOP_3_C1 ;
  assign SVOP_3_R1 = SVOP_R [3:3] ;
  assign SVOP_3_X1 = SVOP_X [3:3] ;
  assign SVOP_3_C1 = SVOP_C [3:3] ;
  logic [0:0] SVOP_2_R1 ;
  logic [0:0] SVOP_2_X1 ;
  logic [0:0] SVOP_2_C1 ;
  assign SVOP_2_R1 = SVOP_R [2:2] ;
  assign SVOP_2_X1 = SVOP_X [2:2] ;
  assign SVOP_2_C1 = SVOP_C [2:2] ;
  logic [0:0] SVOP_1_R1 ;
  logic [0:0] SVOP_1_X1 ;
  logic [0:0] SVOP_1_C1 ;
  assign SVOP_1_R1 = SVOP_R [1:1] ;
  assign SVOP_1_X1 = SVOP_X [1:1] ;
  assign SVOP_1_C1 = SVOP_C [1:1] ;
  logic [0:0] SVOP_0_R1 ;
  logic [0:0] SVOP_0_X1 ;
  logic [0:0] SVOP_0_C1 ;
  assign SVOP_0_R1 = SVOP_R [0:0] ;
  assign SVOP_0_X1 = SVOP_X [0:0] ;
  assign SVOP_0_C1 = SVOP_C [0:0] ;
  assign VDD = 1'b1;
  assign VDD_T = 0 ;
  assign VDD_S = 14'b1 ;
  assign WA = { WADR_7, WADR_6, WADR_5, WADR_4, WADR_3, WADR_2, WADR_1, WADR_0 };
  assign WA_T = {  WADR_7_T , WADR_6_T , WADR_5_T , WADR_4_T , WADR_3_T , WADR_2_T , WADR_1_T , WADR_0_T  };
  logic [13:0] WA_S ;
  assign WA_S = 0 ;
  logic [0:0] WADR_7_R1 ;
  logic [0:0] WADR_7_X1 ;
  logic [0:0] WADR_7_C1 ;
  assign WADR_7_R1 = WA_R [7:7] ;
  assign WADR_7_X1 = WA_X [7:7] ;
  assign WADR_7_C1 = WA_C [7:7] ;
  logic [0:0] WADR_6_R1 ;
  logic [0:0] WADR_6_X1 ;
  logic [0:0] WADR_6_C1 ;
  assign WADR_6_R1 = WA_R [6:6] ;
  assign WADR_6_X1 = WA_X [6:6] ;
  assign WADR_6_C1 = WA_C [6:6] ;
  logic [0:0] WADR_5_R1 ;
  logic [0:0] WADR_5_X1 ;
  logic [0:0] WADR_5_C1 ;
  assign WADR_5_R1 = WA_R [5:5] ;
  assign WADR_5_X1 = WA_X [5:5] ;
  assign WADR_5_C1 = WA_C [5:5] ;
  logic [0:0] WADR_4_R1 ;
  logic [0:0] WADR_4_X1 ;
  logic [0:0] WADR_4_C1 ;
  assign WADR_4_R1 = WA_R [4:4] ;
  assign WADR_4_X1 = WA_X [4:4] ;
  assign WADR_4_C1 = WA_C [4:4] ;
  logic [0:0] WADR_3_R1 ;
  logic [0:0] WADR_3_X1 ;
  logic [0:0] WADR_3_C1 ;
  assign WADR_3_R1 = WA_R [3:3] ;
  assign WADR_3_X1 = WA_X [3:3] ;
  assign WADR_3_C1 = WA_C [3:3] ;
  logic [0:0] WADR_2_R1 ;
  logic [0:0] WADR_2_X1 ;
  logic [0:0] WADR_2_C1 ;
  assign WADR_2_R1 = WA_R [2:2] ;
  assign WADR_2_X1 = WA_X [2:2] ;
  assign WADR_2_C1 = WA_C [2:2] ;
  logic [0:0] WADR_1_R1 ;
  logic [0:0] WADR_1_X1 ;
  logic [0:0] WADR_1_C1 ;
  assign WADR_1_R1 = WA_R [1:1] ;
  assign WADR_1_X1 = WA_X [1:1] ;
  assign WADR_1_C1 = WA_C [1:1] ;
  logic [0:0] WADR_0_R1 ;
  logic [0:0] WADR_0_X1 ;
  logic [0:0] WADR_0_C1 ;
  assign WADR_0_R1 = WA_R [0:0] ;
  assign WADR_0_X1 = WA_X [0:0] ;
  assign WADR_0_C1 = WA_C [0:0] ;
  assign WD = { WD_15, WD_14, WD_13, WD_12, WD_11, WD_10, WD_9, WD_8, WD_7, WD_6, WD_5, WD_4, WD_3, WD_2, WD_1, WD_0 };
  assign WD_T = {  WD_15_T , WD_14_T , WD_13_T , WD_12_T , WD_11_T , WD_10_T , WD_9_T , WD_8_T , WD_7_T , WD_6_T , WD_5_T , WD_4_T , WD_3_T , WD_2_T , WD_1_T , WD_0_T  };
  logic [13:0] WD_S ;
  assign WD_S = 0 ;
  logic [0:0] WD_15_R1 ;
  logic [0:0] WD_15_X1 ;
  logic [0:0] WD_15_C1 ;
  assign WD_15_R1 = WD_R [15:15] ;
  assign WD_15_X1 = WD_X [15:15] ;
  assign WD_15_C1 = WD_C [15:15] ;
  logic [0:0] WD_14_R1 ;
  logic [0:0] WD_14_X1 ;
  logic [0:0] WD_14_C1 ;
  assign WD_14_R1 = WD_R [14:14] ;
  assign WD_14_X1 = WD_X [14:14] ;
  assign WD_14_C1 = WD_C [14:14] ;
  logic [0:0] WD_13_R1 ;
  logic [0:0] WD_13_X1 ;
  logic [0:0] WD_13_C1 ;
  assign WD_13_R1 = WD_R [13:13] ;
  assign WD_13_X1 = WD_X [13:13] ;
  assign WD_13_C1 = WD_C [13:13] ;
  logic [0:0] WD_12_R1 ;
  logic [0:0] WD_12_X1 ;
  logic [0:0] WD_12_C1 ;
  assign WD_12_R1 = WD_R [12:12] ;
  assign WD_12_X1 = WD_X [12:12] ;
  assign WD_12_C1 = WD_C [12:12] ;
  logic [0:0] WD_11_R1 ;
  logic [0:0] WD_11_X1 ;
  logic [0:0] WD_11_C1 ;
  assign WD_11_R1 = WD_R [11:11] ;
  assign WD_11_X1 = WD_X [11:11] ;
  assign WD_11_C1 = WD_C [11:11] ;
  logic [0:0] WD_10_R1 ;
  logic [0:0] WD_10_X1 ;
  logic [0:0] WD_10_C1 ;
  assign WD_10_R1 = WD_R [10:10] ;
  assign WD_10_X1 = WD_X [10:10] ;
  assign WD_10_C1 = WD_C [10:10] ;
  logic [0:0] WD_9_R1 ;
  logic [0:0] WD_9_X1 ;
  logic [0:0] WD_9_C1 ;
  assign WD_9_R1 = WD_R [9:9] ;
  assign WD_9_X1 = WD_X [9:9] ;
  assign WD_9_C1 = WD_C [9:9] ;
  logic [0:0] WD_8_R1 ;
  logic [0:0] WD_8_X1 ;
  logic [0:0] WD_8_C1 ;
  assign WD_8_R1 = WD_R [8:8] ;
  assign WD_8_X1 = WD_X [8:8] ;
  assign WD_8_C1 = WD_C [8:8] ;
  logic [0:0] WD_7_R1 ;
  logic [0:0] WD_7_X1 ;
  logic [0:0] WD_7_C1 ;
  assign WD_7_R1 = WD_R [7:7] ;
  assign WD_7_X1 = WD_X [7:7] ;
  assign WD_7_C1 = WD_C [7:7] ;
  logic [0:0] WD_6_R1 ;
  logic [0:0] WD_6_X1 ;
  logic [0:0] WD_6_C1 ;
  assign WD_6_R1 = WD_R [6:6] ;
  assign WD_6_X1 = WD_X [6:6] ;
  assign WD_6_C1 = WD_C [6:6] ;
  logic [0:0] WD_5_R1 ;
  logic [0:0] WD_5_X1 ;
  logic [0:0] WD_5_C1 ;
  assign WD_5_R1 = WD_R [5:5] ;
  assign WD_5_X1 = WD_X [5:5] ;
  assign WD_5_C1 = WD_C [5:5] ;
  logic [0:0] WD_4_R1 ;
  logic [0:0] WD_4_X1 ;
  logic [0:0] WD_4_C1 ;
  assign WD_4_R1 = WD_R [4:4] ;
  assign WD_4_X1 = WD_X [4:4] ;
  assign WD_4_C1 = WD_C [4:4] ;
  logic [0:0] WD_3_R1 ;
  logic [0:0] WD_3_X1 ;
  logic [0:0] WD_3_C1 ;
  assign WD_3_R1 = WD_R [3:3] ;
  assign WD_3_X1 = WD_X [3:3] ;
  assign WD_3_C1 = WD_C [3:3] ;
  logic [0:0] WD_2_R1 ;
  logic [0:0] WD_2_X1 ;
  logic [0:0] WD_2_C1 ;
  assign WD_2_R1 = WD_R [2:2] ;
  assign WD_2_X1 = WD_X [2:2] ;
  assign WD_2_C1 = WD_C [2:2] ;
  logic [0:0] WD_1_R1 ;
  logic [0:0] WD_1_X1 ;
  logic [0:0] WD_1_C1 ;
  assign WD_1_R1 = WD_R [1:1] ;
  assign WD_1_X1 = WD_X [1:1] ;
  assign WD_1_C1 = WD_C [1:1] ;
  logic [0:0] WD_0_R1 ;
  logic [0:0] WD_0_X1 ;
  logic [0:0] WD_0_C1 ;
  assign WD_0_R1 = WD_R [0:0] ;
  assign WD_0_X1 = WD_X [0:0] ;
  assign WD_0_C1 = WD_C [0:0] ;
  assign clamp_rd = SLEEP_EN_7;
  logic [0:0] SLEEP_EN_7_C18 ;
  logic [0:0] SLEEP_EN_7_R18 ;
  logic [0:0] SLEEP_EN_7_X18 ;
  assign clamp_rd_T = SLEEP_EN_7_T ;
  assign SLEEP_EN_7_C18 = clamp_rd_C ;
  assign SLEEP_EN_7_R18 = clamp_rd_R ;
  assign SLEEP_EN_7_X18 = clamp_rd_X ;
  assign clamp_rd_S = SLEEP_EN_7_S ;
  assign clobber_array = 1'b0;
  assign clobber_array_T = 0 ;
  assign clobber_array_S = 14'b1 ;
  assign clobber_flops = 1'b0;
  assign clobber_flops_T = 0 ;
  assign clobber_flops_S = 14'b1 ;
  assign clobber_x = 1'b0;
  assign clobber_x_T = 0 ;
  assign clobber_x_S = 14'b1 ;
  assign WE_C = ( WE_C0 );
  assign WD_0_C = ( WD_0_C0 ) | ( WD_0_C1 );
  assign WD_1_C = ( WD_1_C0 ) | ( WD_1_C1 );
  assign WD_2_C = ( WD_2_C0 ) | ( WD_2_C1 );
  assign WD_3_C = ( WD_3_C0 ) | ( WD_3_C1 );
  assign WD_4_C = ( WD_4_C0 ) | ( WD_4_C1 );
  assign WD_5_C = ( WD_5_C0 ) | ( WD_5_C1 );
  assign WD_6_C = ( WD_6_C0 ) | ( WD_6_C1 );
  assign WD_7_C = ( WD_7_C0 ) | ( WD_7_C1 );
  assign WD_8_C = ( WD_8_C0 ) | ( WD_8_C1 );
  assign WD_9_C = ( WD_9_C0 ) | ( WD_9_C1 );
  assign WD_10_C = ( WD_10_C0 ) | ( WD_10_C1 );
  assign WD_11_C = ( WD_11_C0 ) | ( WD_11_C1 );
  assign WD_12_C = ( WD_12_C0 ) | ( WD_12_C1 );
  assign WD_13_C = ( WD_13_C0 ) | ( WD_13_C1 );
  assign WD_14_C = ( WD_14_C0 ) | ( WD_14_C1 );
  assign WD_15_C = ( WD_15_C0 ) | ( WD_15_C1 );
  assign WADR_0_C = ( WADR_0_C0 ) | ( WADR_0_C1 );
  assign WADR_1_C = ( WADR_1_C0 ) | ( WADR_1_C1 );
  assign WADR_2_C = ( WADR_2_C0 ) | ( WADR_2_C1 );
  assign WADR_3_C = ( WADR_3_C0 ) | ( WADR_3_C1 );
  assign WADR_4_C = ( WADR_4_C0 ) | ( WADR_4_C1 );
  assign WADR_5_C = ( WADR_5_C0 ) | ( WADR_5_C1 );
  assign WADR_6_C = ( WADR_6_C0 ) | ( WADR_6_C1 );
  assign WADR_7_C = ( WADR_7_C0 ) | ( WADR_7_C1 );
  assign SVOP_0_C = ( SVOP_0_C0 ) | ( SVOP_0_C1 );
  assign SVOP_1_C = ( SVOP_1_C0 ) | ( SVOP_1_C1 );
  assign SVOP_2_C = ( SVOP_2_C0 ) | ( SVOP_2_C1 );
  assign SVOP_3_C = ( SVOP_3_C0 ) | ( SVOP_3_C1 );
  assign SVOP_4_C = ( SVOP_4_C0 ) | ( SVOP_4_C1 );
  assign SVOP_5_C = ( SVOP_5_C0 ) | ( SVOP_5_C1 );
  assign SVOP_6_C = ( SVOP_6_C0 ) | ( SVOP_6_C1 );
  assign SVOP_7_C = ( SVOP_7_C0 ) | ( SVOP_7_C1 );
  assign SLEEP_EN_0_C = ( SLEEP_EN_0_C0 ) | ( SLEEP_EN_0_C1 );
  assign SLEEP_EN_1_C = ( SLEEP_EN_1_C0 ) | ( SLEEP_EN_1_C1 );
  assign SLEEP_EN_2_C = ( SLEEP_EN_2_C0 ) | ( SLEEP_EN_2_C1 );
  assign SLEEP_EN_3_C = ( SLEEP_EN_3_C0 ) | ( SLEEP_EN_3_C1 );
  assign SLEEP_EN_4_C = ( SLEEP_EN_4_C0 ) | ( SLEEP_EN_4_C1 );
  assign SLEEP_EN_5_C = ( SLEEP_EN_5_C0 ) | ( SLEEP_EN_5_C1 );
  assign SLEEP_EN_6_C = ( SLEEP_EN_6_C0 ) | ( SLEEP_EN_6_C1 );
  assign RET_EN_C = ( RET_EN_C0 );
  assign RE_C = ( RE_C0 );
  assign RADR_0_C = ( RADR_0_C0 ) | ( RADR_0_C1 );
  assign RADR_1_C = ( RADR_1_C0 ) | ( RADR_1_C1 );
  assign RADR_2_C = ( RADR_2_C0 ) | ( RADR_2_C1 );
  assign RADR_3_C = ( RADR_3_C0 ) | ( RADR_3_C1 );
  assign RADR_4_C = ( RADR_4_C0 ) | ( RADR_4_C1 );
  assign RADR_5_C = ( RADR_5_C0 ) | ( RADR_5_C1 );
  assign RADR_6_C = ( RADR_6_C0 ) | ( RADR_6_C1 );
  assign RADR_7_C = ( RADR_7_C0 ) | ( RADR_7_C1 );
  assign IDDQ_C = ( IDDQ_C0 );
  assign fangyuan1_C = ( fangyuan1_C0 );
  assign SLEEP_EN_7_C = ( SLEEP_EN_7_C0 ) | ( SLEEP_EN_7_C1 ) | ( SLEEP_EN_7_C2 ) | ( SLEEP_EN_7_C3 ) | ( SLEEP_EN_7_C4 ) | ( SLEEP_EN_7_C5 ) | ( SLEEP_EN_7_C6 ) | ( SLEEP_EN_7_C7 ) | ( SLEEP_EN_7_C8 ) | ( SLEEP_EN_7_C9 ) | ( SLEEP_EN_7_C10 ) | ( SLEEP_EN_7_C11 ) | ( SLEEP_EN_7_C12 ) | ( SLEEP_EN_7_C13 ) | ( SLEEP_EN_7_C14 ) | ( SLEEP_EN_7_C15 ) | ( SLEEP_EN_7_C16 ) | ( SLEEP_EN_7_C17 ) | ( SLEEP_EN_7_C18 );
  assign _0__C = ( _0__C0 );
  assign RD_C = ( RD_C0 );
  assign RD_9_C = ( RD_9_C0 ) | ( RD_9_C1 );
  assign RD_8_C = ( RD_8_C0 ) | ( RD_8_C1 );
  assign RD_7_C = ( RD_7_C0 ) | ( RD_7_C1 );
  assign RD_6_C = ( RD_6_C0 ) | ( RD_6_C1 );
  assign RD_5_C = ( RD_5_C0 ) | ( RD_5_C1 );
  assign RD_4_C = ( RD_4_C0 ) | ( RD_4_C1 );
  assign RD_3_C = ( RD_3_C0 ) | ( RD_3_C1 );
  assign RD_2_C = ( RD_2_C0 ) | ( RD_2_C1 );
  assign RD_15_C = ( RD_15_C0 ) | ( RD_15_C1 );
  assign RD_14_C = ( RD_14_C0 ) | ( RD_14_C1 );
  assign RD_13_C = ( RD_13_C0 ) | ( RD_13_C1 );
  assign RD_12_C = ( RD_12_C0 ) | ( RD_12_C1 );
  assign RD_11_C = ( RD_11_C0 ) | ( RD_11_C1 );
  assign RD_10_C = ( RD_10_C0 ) | ( RD_10_C1 );
  assign RD_1_C = ( RD_1_C0 ) | ( RD_1_C1 );
  assign RD_0_C = ( RD_0_C0 ) | ( RD_0_C1 );
  assign WE_X = ( WE_X0 );
  assign WD_0_X = ( WD_0_X0 ) | ( WD_0_X1 );
  assign WD_1_X = ( WD_1_X0 ) | ( WD_1_X1 );
  assign WD_2_X = ( WD_2_X0 ) | ( WD_2_X1 );
  assign WD_3_X = ( WD_3_X0 ) | ( WD_3_X1 );
  assign WD_4_X = ( WD_4_X0 ) | ( WD_4_X1 );
  assign WD_5_X = ( WD_5_X0 ) | ( WD_5_X1 );
  assign WD_6_X = ( WD_6_X0 ) | ( WD_6_X1 );
  assign WD_7_X = ( WD_7_X0 ) | ( WD_7_X1 );
  assign WD_8_X = ( WD_8_X0 ) | ( WD_8_X1 );
  assign WD_9_X = ( WD_9_X0 ) | ( WD_9_X1 );
  assign WD_10_X = ( WD_10_X0 ) | ( WD_10_X1 );
  assign WD_11_X = ( WD_11_X0 ) | ( WD_11_X1 );
  assign WD_12_X = ( WD_12_X0 ) | ( WD_12_X1 );
  assign WD_13_X = ( WD_13_X0 ) | ( WD_13_X1 );
  assign WD_14_X = ( WD_14_X0 ) | ( WD_14_X1 );
  assign WD_15_X = ( WD_15_X0 ) | ( WD_15_X1 );
  assign WADR_0_X = ( WADR_0_X0 ) | ( WADR_0_X1 );
  assign WADR_1_X = ( WADR_1_X0 ) | ( WADR_1_X1 );
  assign WADR_2_X = ( WADR_2_X0 ) | ( WADR_2_X1 );
  assign WADR_3_X = ( WADR_3_X0 ) | ( WADR_3_X1 );
  assign WADR_4_X = ( WADR_4_X0 ) | ( WADR_4_X1 );
  assign WADR_5_X = ( WADR_5_X0 ) | ( WADR_5_X1 );
  assign WADR_6_X = ( WADR_6_X0 ) | ( WADR_6_X1 );
  assign WADR_7_X = ( WADR_7_X0 ) | ( WADR_7_X1 );
  assign SVOP_0_X = ( SVOP_0_X0 ) | ( SVOP_0_X1 );
  assign SVOP_1_X = ( SVOP_1_X0 ) | ( SVOP_1_X1 );
  assign SVOP_2_X = ( SVOP_2_X0 ) | ( SVOP_2_X1 );
  assign SVOP_3_X = ( SVOP_3_X0 ) | ( SVOP_3_X1 );
  assign SVOP_4_X = ( SVOP_4_X0 ) | ( SVOP_4_X1 );
  assign SVOP_5_X = ( SVOP_5_X0 ) | ( SVOP_5_X1 );
  assign SVOP_6_X = ( SVOP_6_X0 ) | ( SVOP_6_X1 );
  assign SVOP_7_X = ( SVOP_7_X0 ) | ( SVOP_7_X1 );
  assign SLEEP_EN_0_X = ( SLEEP_EN_0_X0 ) | ( SLEEP_EN_0_X1 );
  assign SLEEP_EN_1_X = ( SLEEP_EN_1_X0 ) | ( SLEEP_EN_1_X1 );
  assign SLEEP_EN_2_X = ( SLEEP_EN_2_X0 ) | ( SLEEP_EN_2_X1 );
  assign SLEEP_EN_3_X = ( SLEEP_EN_3_X0 ) | ( SLEEP_EN_3_X1 );
  assign SLEEP_EN_4_X = ( SLEEP_EN_4_X0 ) | ( SLEEP_EN_4_X1 );
  assign SLEEP_EN_5_X = ( SLEEP_EN_5_X0 ) | ( SLEEP_EN_5_X1 );
  assign SLEEP_EN_6_X = ( SLEEP_EN_6_X0 ) | ( SLEEP_EN_6_X1 );
  assign RET_EN_X = ( RET_EN_X0 );
  assign RE_X = ( RE_X0 );
  assign RADR_0_X = ( RADR_0_X0 ) | ( RADR_0_X1 );
  assign RADR_1_X = ( RADR_1_X0 ) | ( RADR_1_X1 );
  assign RADR_2_X = ( RADR_2_X0 ) | ( RADR_2_X1 );
  assign RADR_3_X = ( RADR_3_X0 ) | ( RADR_3_X1 );
  assign RADR_4_X = ( RADR_4_X0 ) | ( RADR_4_X1 );
  assign RADR_5_X = ( RADR_5_X0 ) | ( RADR_5_X1 );
  assign RADR_6_X = ( RADR_6_X0 ) | ( RADR_6_X1 );
  assign RADR_7_X = ( RADR_7_X0 ) | ( RADR_7_X1 );
  assign IDDQ_X = ( IDDQ_X0 );
  assign fangyuan1_X = ( fangyuan1_X0 );
  assign SLEEP_EN_7_X = ( SLEEP_EN_7_X0 ) | ( SLEEP_EN_7_X1 ) | ( SLEEP_EN_7_X2 ) | ( SLEEP_EN_7_X3 ) | ( SLEEP_EN_7_X4 ) | ( SLEEP_EN_7_X5 ) | ( SLEEP_EN_7_X6 ) | ( SLEEP_EN_7_X7 ) | ( SLEEP_EN_7_X8 ) | ( SLEEP_EN_7_X9 ) | ( SLEEP_EN_7_X10 ) | ( SLEEP_EN_7_X11 ) | ( SLEEP_EN_7_X12 ) | ( SLEEP_EN_7_X13 ) | ( SLEEP_EN_7_X14 ) | ( SLEEP_EN_7_X15 ) | ( SLEEP_EN_7_X16 ) | ( SLEEP_EN_7_X17 ) | ( SLEEP_EN_7_X18 );
  assign _0__X = ( _0__X0 );
  assign RD_X = ( RD_X0 );
  assign RD_9_X = ( RD_9_X0 ) | ( RD_9_X1 );
  assign RD_8_X = ( RD_8_X0 ) | ( RD_8_X1 );
  assign RD_7_X = ( RD_7_X0 ) | ( RD_7_X1 );
  assign RD_6_X = ( RD_6_X0 ) | ( RD_6_X1 );
  assign RD_5_X = ( RD_5_X0 ) | ( RD_5_X1 );
  assign RD_4_X = ( RD_4_X0 ) | ( RD_4_X1 );
  assign RD_3_X = ( RD_3_X0 ) | ( RD_3_X1 );
  assign RD_2_X = ( RD_2_X0 ) | ( RD_2_X1 );
  assign RD_15_X = ( RD_15_X0 ) | ( RD_15_X1 );
  assign RD_14_X = ( RD_14_X0 ) | ( RD_14_X1 );
  assign RD_13_X = ( RD_13_X0 ) | ( RD_13_X1 );
  assign RD_12_X = ( RD_12_X0 ) | ( RD_12_X1 );
  assign RD_11_X = ( RD_11_X0 ) | ( RD_11_X1 );
  assign RD_10_X = ( RD_10_X0 ) | ( RD_10_X1 );
  assign RD_1_X = ( RD_1_X0 ) | ( RD_1_X1 );
  assign RD_0_X = ( RD_0_X0 ) | ( RD_0_X1 );
  assign WE_R = ( WE_X0 & WE_R0 );
  assign WD_0_R = ( WD_0_X0 & WD_0_R0 ) | ( WD_0_X1 & WD_0_R1 );
  assign WD_1_R = ( WD_1_X0 & WD_1_R0 ) | ( WD_1_X1 & WD_1_R1 );
  assign WD_2_R = ( WD_2_X0 & WD_2_R0 ) | ( WD_2_X1 & WD_2_R1 );
  assign WD_3_R = ( WD_3_X0 & WD_3_R0 ) | ( WD_3_X1 & WD_3_R1 );
  assign WD_4_R = ( WD_4_X0 & WD_4_R0 ) | ( WD_4_X1 & WD_4_R1 );
  assign WD_5_R = ( WD_5_X0 & WD_5_R0 ) | ( WD_5_X1 & WD_5_R1 );
  assign WD_6_R = ( WD_6_X0 & WD_6_R0 ) | ( WD_6_X1 & WD_6_R1 );
  assign WD_7_R = ( WD_7_X0 & WD_7_R0 ) | ( WD_7_X1 & WD_7_R1 );
  assign WD_8_R = ( WD_8_X0 & WD_8_R0 ) | ( WD_8_X1 & WD_8_R1 );
  assign WD_9_R = ( WD_9_X0 & WD_9_R0 ) | ( WD_9_X1 & WD_9_R1 );
  assign WD_10_R = ( WD_10_X0 & WD_10_R0 ) | ( WD_10_X1 & WD_10_R1 );
  assign WD_11_R = ( WD_11_X0 & WD_11_R0 ) | ( WD_11_X1 & WD_11_R1 );
  assign WD_12_R = ( WD_12_X0 & WD_12_R0 ) | ( WD_12_X1 & WD_12_R1 );
  assign WD_13_R = ( WD_13_X0 & WD_13_R0 ) | ( WD_13_X1 & WD_13_R1 );
  assign WD_14_R = ( WD_14_X0 & WD_14_R0 ) | ( WD_14_X1 & WD_14_R1 );
  assign WD_15_R = ( WD_15_X0 & WD_15_R0 ) | ( WD_15_X1 & WD_15_R1 );
  assign WADR_0_R = ( WADR_0_X0 & WADR_0_R0 ) | ( WADR_0_X1 & WADR_0_R1 );
  assign WADR_1_R = ( WADR_1_X0 & WADR_1_R0 ) | ( WADR_1_X1 & WADR_1_R1 );
  assign WADR_2_R = ( WADR_2_X0 & WADR_2_R0 ) | ( WADR_2_X1 & WADR_2_R1 );
  assign WADR_3_R = ( WADR_3_X0 & WADR_3_R0 ) | ( WADR_3_X1 & WADR_3_R1 );
  assign WADR_4_R = ( WADR_4_X0 & WADR_4_R0 ) | ( WADR_4_X1 & WADR_4_R1 );
  assign WADR_5_R = ( WADR_5_X0 & WADR_5_R0 ) | ( WADR_5_X1 & WADR_5_R1 );
  assign WADR_6_R = ( WADR_6_X0 & WADR_6_R0 ) | ( WADR_6_X1 & WADR_6_R1 );
  assign WADR_7_R = ( WADR_7_X0 & WADR_7_R0 ) | ( WADR_7_X1 & WADR_7_R1 );
  assign SVOP_0_R = ( SVOP_0_X0 & SVOP_0_R0 ) | ( SVOP_0_X1 & SVOP_0_R1 );
  assign SVOP_1_R = ( SVOP_1_X0 & SVOP_1_R0 ) | ( SVOP_1_X1 & SVOP_1_R1 );
  assign SVOP_2_R = ( SVOP_2_X0 & SVOP_2_R0 ) | ( SVOP_2_X1 & SVOP_2_R1 );
  assign SVOP_3_R = ( SVOP_3_X0 & SVOP_3_R0 ) | ( SVOP_3_X1 & SVOP_3_R1 );
  assign SVOP_4_R = ( SVOP_4_X0 & SVOP_4_R0 ) | ( SVOP_4_X1 & SVOP_4_R1 );
  assign SVOP_5_R = ( SVOP_5_X0 & SVOP_5_R0 ) | ( SVOP_5_X1 & SVOP_5_R1 );
  assign SVOP_6_R = ( SVOP_6_X0 & SVOP_6_R0 ) | ( SVOP_6_X1 & SVOP_6_R1 );
  assign SVOP_7_R = ( SVOP_7_X0 & SVOP_7_R0 ) | ( SVOP_7_X1 & SVOP_7_R1 );
  assign SLEEP_EN_0_R = ( SLEEP_EN_0_X0 & SLEEP_EN_0_R0 ) | ( SLEEP_EN_0_X1 & SLEEP_EN_0_R1 );
  assign SLEEP_EN_1_R = ( SLEEP_EN_1_X0 & SLEEP_EN_1_R0 ) | ( SLEEP_EN_1_X1 & SLEEP_EN_1_R1 );
  assign SLEEP_EN_2_R = ( SLEEP_EN_2_X0 & SLEEP_EN_2_R0 ) | ( SLEEP_EN_2_X1 & SLEEP_EN_2_R1 );
  assign SLEEP_EN_3_R = ( SLEEP_EN_3_X0 & SLEEP_EN_3_R0 ) | ( SLEEP_EN_3_X1 & SLEEP_EN_3_R1 );
  assign SLEEP_EN_4_R = ( SLEEP_EN_4_X0 & SLEEP_EN_4_R0 ) | ( SLEEP_EN_4_X1 & SLEEP_EN_4_R1 );
  assign SLEEP_EN_5_R = ( SLEEP_EN_5_X0 & SLEEP_EN_5_R0 ) | ( SLEEP_EN_5_X1 & SLEEP_EN_5_R1 );
  assign SLEEP_EN_6_R = ( SLEEP_EN_6_X0 & SLEEP_EN_6_R0 ) | ( SLEEP_EN_6_X1 & SLEEP_EN_6_R1 );
  assign RET_EN_R = ( RET_EN_X0 & RET_EN_R0 );
  assign RE_R = ( RE_X0 & RE_R0 );
  assign RADR_0_R = ( RADR_0_X0 & RADR_0_R0 ) | ( RADR_0_X1 & RADR_0_R1 );
  assign RADR_1_R = ( RADR_1_X0 & RADR_1_R0 ) | ( RADR_1_X1 & RADR_1_R1 );
  assign RADR_2_R = ( RADR_2_X0 & RADR_2_R0 ) | ( RADR_2_X1 & RADR_2_R1 );
  assign RADR_3_R = ( RADR_3_X0 & RADR_3_R0 ) | ( RADR_3_X1 & RADR_3_R1 );
  assign RADR_4_R = ( RADR_4_X0 & RADR_4_R0 ) | ( RADR_4_X1 & RADR_4_R1 );
  assign RADR_5_R = ( RADR_5_X0 & RADR_5_R0 ) | ( RADR_5_X1 & RADR_5_R1 );
  assign RADR_6_R = ( RADR_6_X0 & RADR_6_R0 ) | ( RADR_6_X1 & RADR_6_R1 );
  assign RADR_7_R = ( RADR_7_X0 & RADR_7_R0 ) | ( RADR_7_X1 & RADR_7_R1 );
  assign IDDQ_R = ( IDDQ_X0 & IDDQ_R0 );
  assign fangyuan1_R = ( fangyuan1_X0 & fangyuan1_R0 );
  assign SLEEP_EN_7_R = ( SLEEP_EN_7_X0 & SLEEP_EN_7_R0 ) | ( SLEEP_EN_7_X1 & SLEEP_EN_7_R1 ) | ( SLEEP_EN_7_X2 & SLEEP_EN_7_R2 ) | ( SLEEP_EN_7_X3 & SLEEP_EN_7_R3 ) | ( SLEEP_EN_7_X4 & SLEEP_EN_7_R4 ) | ( SLEEP_EN_7_X5 & SLEEP_EN_7_R5 ) | ( SLEEP_EN_7_X6 & SLEEP_EN_7_R6 ) | ( SLEEP_EN_7_X7 & SLEEP_EN_7_R7 ) | ( SLEEP_EN_7_X8 & SLEEP_EN_7_R8 ) | ( SLEEP_EN_7_X9 & SLEEP_EN_7_R9 ) | ( SLEEP_EN_7_X10 & SLEEP_EN_7_R10 ) | ( SLEEP_EN_7_X11 & SLEEP_EN_7_R11 ) | ( SLEEP_EN_7_X12 & SLEEP_EN_7_R12 ) | ( SLEEP_EN_7_X13 & SLEEP_EN_7_R13 ) | ( SLEEP_EN_7_X14 & SLEEP_EN_7_R14 ) | ( SLEEP_EN_7_X15 & SLEEP_EN_7_R15 ) | ( SLEEP_EN_7_X16 & SLEEP_EN_7_R16 ) | ( SLEEP_EN_7_X17 & SLEEP_EN_7_R17 ) | ( SLEEP_EN_7_X18 & SLEEP_EN_7_R18 );
  assign _0__R = ( _0__X0 & _0__R0 );
  assign RD_R = ( RD_X0 & RD_R0 );
  assign RD_9_R = ( RD_9_X0 & RD_9_R0 ) | ( RD_9_X1 & RD_9_R1 );
  assign RD_8_R = ( RD_8_X0 & RD_8_R0 ) | ( RD_8_X1 & RD_8_R1 );
  assign RD_7_R = ( RD_7_X0 & RD_7_R0 ) | ( RD_7_X1 & RD_7_R1 );
  assign RD_6_R = ( RD_6_X0 & RD_6_R0 ) | ( RD_6_X1 & RD_6_R1 );
  assign RD_5_R = ( RD_5_X0 & RD_5_R0 ) | ( RD_5_X1 & RD_5_R1 );
  assign RD_4_R = ( RD_4_X0 & RD_4_R0 ) | ( RD_4_X1 & RD_4_R1 );
  assign RD_3_R = ( RD_3_X0 & RD_3_R0 ) | ( RD_3_X1 & RD_3_R1 );
  assign RD_2_R = ( RD_2_X0 & RD_2_R0 ) | ( RD_2_X1 & RD_2_R1 );
  assign RD_15_R = ( RD_15_X0 & RD_15_R0 ) | ( RD_15_X1 & RD_15_R1 );
  assign RD_14_R = ( RD_14_X0 & RD_14_R0 ) | ( RD_14_X1 & RD_14_R1 );
  assign RD_13_R = ( RD_13_X0 & RD_13_R0 ) | ( RD_13_X1 & RD_13_R1 );
  assign RD_12_R = ( RD_12_X0 & RD_12_R0 ) | ( RD_12_X1 & RD_12_R1 );
  assign RD_11_R = ( RD_11_X0 & RD_11_R0 ) | ( RD_11_X1 & RD_11_R1 );
  assign RD_10_R = ( RD_10_X0 & RD_10_R0 ) | ( RD_10_X1 & RD_10_R1 );
  assign RD_1_R = ( RD_1_X0 & RD_1_R0 ) | ( RD_1_X1 & RD_1_R1 );
  assign RD_0_R = ( RD_0_X0 & RD_0_R0 ) | ( RD_0_X1 & RD_0_R1 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { GND_R , GND_C , GND_X , RA_R , RA_C , RA_X , SLEEP_EN_R , SLEEP_EN_C , SLEEP_EN_X , SVOP_R , SVOP_C , SVOP_X , VDD_R , VDD_C , VDD_X , WA_R , WA_C , WA_X , WD_R , WD_C , WD_X , clamp_rd_R , clamp_rd_C , clamp_rd_X , clobber_array_R , clobber_array_C , clobber_array_X , clobber_flops_R , clobber_flops_C , clobber_flops_X , clobber_x_R , clobber_x_C , clobber_x_X , fangyuan0_R , fangyuan0_C , fangyuan0_X  } = 0;
 // ground taints for unused wire slices
endmodule
