module NV_NVDLA_BDMA_STORE_pipe_p3 ( dma_wr_req_pd , mc_dma_wr_req_vld , mc_int_wr_req_ready , nvdla_core_clk , nvdla_core_rstn , INSTR_IN_ZY , dma_wr_req_pd_T , dma_wr_req_pd_S , mc_dma_wr_req_rdy_R0 , mc_dma_wr_req_rdy_C0 , mc_dma_wr_req_rdy_X0 , mc_dma_wr_req_vld_T , mc_dma_wr_req_vld_S , mc_int_wr_req_pd_R0 , mc_int_wr_req_pd_C0 , mc_int_wr_req_pd_X0 , mc_int_wr_req_ready_T , mc_int_wr_req_ready_S , mc_int_wr_req_valid_R0 , mc_int_wr_req_valid_C0 , mc_int_wr_req_valid_X0 , nvdla_core_clk_T , nvdla_core_clk_S , nvdla_core_rstn_T , nvdla_core_rstn_S , mc_dma_wr_req_rdy , mc_int_wr_req_pd , mc_int_wr_req_valid , dma_wr_req_pd_R , dma_wr_req_pd_X , dma_wr_req_pd_C , mc_dma_wr_req_rdy_T , mc_dma_wr_req_rdy_S , mc_dma_wr_req_vld_R , mc_dma_wr_req_vld_X , mc_dma_wr_req_vld_C , mc_int_wr_req_pd_T , mc_int_wr_req_pd_S , mc_int_wr_req_ready_R , mc_int_wr_req_ready_X , mc_int_wr_req_ready_C , mc_int_wr_req_valid_T , mc_int_wr_req_valid_S , nvdla_core_clk_R , nvdla_core_clk_X , nvdla_core_clk_C , nvdla_core_rstn_R , nvdla_core_rstn_X , nvdla_core_rstn_C );
  logic rst_zy;
  integer i;
  input INSTR_IN_ZY;
  logic [514:0] _00_;
  logic [514:0] _00__T ;
  logic [514:0] _00__R ;
  logic [514:0] _00__C ;
  logic [514:0] _00__X ;
  logic [13:0] _00__S ;
  logic _01_;
  logic _01__T ;
  logic _01__R ;
  logic _01__C ;
  logic _01__X ;
  logic [13:0] _01__S ;
  logic [514:0] _02_;
  logic [514:0] _02__T ;
  logic [514:0] _02__R ;
  logic [514:0] _02__C ;
  logic [514:0] _02__X ;
  logic [13:0] _02__S ;
  logic _03_;
  logic _03__T ;
  logic _03__R ;
  logic _03__C ;
  logic _03__X ;
  logic [13:0] _03__S ;
  logic _04_;
  logic _04__T ;
  logic _04__R ;
  logic _04__C ;
  logic _04__X ;
  logic [13:0] _04__S ;
  logic _05_;
  logic _05__T ;
  logic _05__R ;
  logic _05__C ;
  logic _05__X ;
  logic [13:0] _05__S ;
  logic _06_;
  logic _06__T ;
  logic _06__R ;
  logic _06__C ;
  logic _06__X ;
  logic [13:0] _06__S ;
  logic _07_;
  logic _07__T ;
  logic _07__R ;
  logic _07__C ;
  logic _07__X ;
  logic [13:0] _07__S ;
  logic _08_;
  logic _08__T ;
  logic _08__R ;
  logic _08__C ;
  logic _08__X ;
  logic [13:0] _08__S ;
  input [514:0] dma_wr_req_pd;
  input [514:0] dma_wr_req_pd_T ;
  input [13:0] dma_wr_req_pd_S ;
  output [514:0] dma_wr_req_pd_R ;
  output [514:0] dma_wr_req_pd_X ;
  output [514:0] dma_wr_req_pd_C ;
  output mc_dma_wr_req_rdy;
  logic mc_dma_wr_req_rdy ;
  output mc_dma_wr_req_rdy_T ;
  logic mc_dma_wr_req_rdy_T ;
  logic mc_dma_wr_req_rdy_R ;
  logic mc_dma_wr_req_rdy_C ;
  logic mc_dma_wr_req_rdy_X ;
  logic [13:0] mc_dma_wr_req_rdy_S ;
  input mc_dma_wr_req_rdy_R0 ;
  input mc_dma_wr_req_rdy_C0 ;
  input mc_dma_wr_req_rdy_X0 ;
  output [13:0] mc_dma_wr_req_rdy_S ;
  input mc_dma_wr_req_vld;
  input mc_dma_wr_req_vld_T ;
  input [13:0] mc_dma_wr_req_vld_S ;
  output mc_dma_wr_req_vld_R ;
  output mc_dma_wr_req_vld_X ;
  output mc_dma_wr_req_vld_C ;
  output [514:0] mc_int_wr_req_pd;
  logic [514:0] mc_int_wr_req_pd ;
  output [514:0] mc_int_wr_req_pd_T ;
  logic [514:0] mc_int_wr_req_pd_T ;
  logic [514:0] mc_int_wr_req_pd_R ;
  logic [514:0] mc_int_wr_req_pd_C ;
  logic [514:0] mc_int_wr_req_pd_X ;
  logic [13:0] mc_int_wr_req_pd_S ;
  input [514:0] mc_int_wr_req_pd_R0 ;
  input [514:0] mc_int_wr_req_pd_C0 ;
  input [514:0] mc_int_wr_req_pd_X0 ;
  output [13:0] mc_int_wr_req_pd_S ;
  input mc_int_wr_req_ready;
  input mc_int_wr_req_ready_T ;
  input [13:0] mc_int_wr_req_ready_S ;
  output mc_int_wr_req_ready_R ;
  output mc_int_wr_req_ready_X ;
  output mc_int_wr_req_ready_C ;
  output mc_int_wr_req_valid;
  logic mc_int_wr_req_valid ;
  output mc_int_wr_req_valid_T ;
  logic mc_int_wr_req_valid_T ;
  logic mc_int_wr_req_valid_R ;
  logic mc_int_wr_req_valid_C ;
  logic mc_int_wr_req_valid_X ;
  logic [13:0] mc_int_wr_req_valid_S ;
  input mc_int_wr_req_valid_R0 ;
  input mc_int_wr_req_valid_C0 ;
  input mc_int_wr_req_valid_X0 ;
  output [13:0] mc_int_wr_req_valid_S ;
  input nvdla_core_clk;
  input nvdla_core_clk_T ;
  input [13:0] nvdla_core_clk_S ;
  output nvdla_core_clk_R ;
  output nvdla_core_clk_X ;
  output nvdla_core_clk_C ;
  input nvdla_core_rstn;
  input nvdla_core_rstn_T ;
  input [13:0] nvdla_core_rstn_S ;
  output nvdla_core_rstn_R ;
  output nvdla_core_rstn_X ;
  output nvdla_core_rstn_C ;
  logic p3_assert_clk;
  logic p3_assert_clk_T ;
  logic p3_assert_clk_R ;
  logic p3_assert_clk_C ;
  logic p3_assert_clk_X ;
  logic [13:0] p3_assert_clk_S ;
  logic [514:0] p3_pipe_data;
  logic [514:0]  p3_pipe_data_T ;
  logic [514:0]  p3_pipe_data_PREV_VAL1 ;
  logic [514:0]  p3_pipe_data_PREV_VAL2 ;
  logic [514:0]  p3_pipe_data_R ;
  logic [514:0]  p3_pipe_data_X ;
  logic [514:0]  p3_pipe_data_C ;
  logic [13:0] p3_pipe_data_S ;
  logic p3_pipe_data_t_flag ;
  logic p3_pipe_data_r_flag ;
  assign p3_pipe_data_S = 785 ;
  logic [514:0] p3_pipe_rand_data;
  logic [514:0] p3_pipe_rand_data_T ;
  logic [514:0] p3_pipe_rand_data_R ;
  logic [514:0] p3_pipe_rand_data_C ;
  logic [514:0] p3_pipe_rand_data_X ;
  logic [13:0] p3_pipe_rand_data_S ;
  logic p3_pipe_rand_ready;
  logic p3_pipe_rand_ready_T ;
  logic p3_pipe_rand_ready_R ;
  logic p3_pipe_rand_ready_C ;
  logic p3_pipe_rand_ready_X ;
  logic [13:0] p3_pipe_rand_ready_S ;
  logic p3_pipe_rand_valid;
  logic p3_pipe_rand_valid_T ;
  logic p3_pipe_rand_valid_R ;
  logic p3_pipe_rand_valid_C ;
  logic p3_pipe_rand_valid_X ;
  logic [13:0] p3_pipe_rand_valid_S ;
  logic p3_pipe_ready;
  logic p3_pipe_ready_T ;
  logic p3_pipe_ready_R ;
  logic p3_pipe_ready_C ;
  logic p3_pipe_ready_X ;
  logic [13:0] p3_pipe_ready_S ;
  logic p3_pipe_ready_bc;
  logic p3_pipe_ready_bc_T ;
  logic p3_pipe_ready_bc_R ;
  logic p3_pipe_ready_bc_C ;
  logic p3_pipe_ready_bc_X ;
  logic [13:0] p3_pipe_ready_bc_S ;
  logic p3_pipe_valid;
  logic  p3_pipe_valid_T ;
  logic  p3_pipe_valid_PREV_VAL1 ;
  logic  p3_pipe_valid_PREV_VAL2 ;
  logic  p3_pipe_valid_R ;
  logic  p3_pipe_valid_X ;
  logic  p3_pipe_valid_C ;
  logic [13:0] p3_pipe_valid_S ;
  logic p3_pipe_valid_t_flag ;
  logic p3_pipe_valid_r_flag ;
  assign p3_pipe_valid_S = 786 ;
  logic p3_skid_catch;
  logic p3_skid_catch_T ;
  logic p3_skid_catch_R ;
  logic p3_skid_catch_C ;
  logic p3_skid_catch_X ;
  logic [13:0] p3_skid_catch_S ;
  logic [514:0] p3_skid_data;
  logic [514:0]  p3_skid_data_T ;
  logic [514:0]  p3_skid_data_PREV_VAL1 ;
  logic [514:0]  p3_skid_data_PREV_VAL2 ;
  logic [514:0]  p3_skid_data_R ;
  logic [514:0]  p3_skid_data_X ;
  logic [514:0]  p3_skid_data_C ;
  logic [13:0] p3_skid_data_S ;
  logic p3_skid_data_t_flag ;
  logic p3_skid_data_r_flag ;
  assign p3_skid_data_S = 787 ;
  logic [514:0] p3_skid_pipe_data;
  logic [514:0] p3_skid_pipe_data_T ;
  logic [514:0] p3_skid_pipe_data_R ;
  logic [514:0] p3_skid_pipe_data_C ;
  logic [514:0] p3_skid_pipe_data_X ;
  logic [13:0] p3_skid_pipe_data_S ;
  logic p3_skid_pipe_ready;
  logic p3_skid_pipe_ready_T ;
  logic p3_skid_pipe_ready_R ;
  logic p3_skid_pipe_ready_C ;
  logic p3_skid_pipe_ready_X ;
  logic [13:0] p3_skid_pipe_ready_S ;
  logic p3_skid_pipe_valid;
  logic p3_skid_pipe_valid_T ;
  logic p3_skid_pipe_valid_R ;
  logic p3_skid_pipe_valid_C ;
  logic p3_skid_pipe_valid_X ;
  logic [13:0] p3_skid_pipe_valid_S ;
  logic p3_skid_ready;
  logic p3_skid_ready_T ;
  logic p3_skid_ready_R ;
  logic p3_skid_ready_C ;
  logic p3_skid_ready_X ;
  logic [13:0] p3_skid_ready_S ;
  logic p3_skid_ready_flop;
  logic  p3_skid_ready_flop_T ;
  logic  p3_skid_ready_flop_PREV_VAL1 ;
  logic  p3_skid_ready_flop_PREV_VAL2 ;
  logic  p3_skid_ready_flop_R ;
  logic  p3_skid_ready_flop_X ;
  logic  p3_skid_ready_flop_C ;
  logic [13:0] p3_skid_ready_flop_S ;
  logic p3_skid_ready_flop_t_flag ;
  logic p3_skid_ready_flop_r_flag ;
  assign p3_skid_ready_flop_S = 788 ;
  logic p3_skid_valid;
  logic  p3_skid_valid_T ;
  logic  p3_skid_valid_PREV_VAL1 ;
  logic  p3_skid_valid_PREV_VAL2 ;
  logic  p3_skid_valid_R ;
  logic  p3_skid_valid_X ;
  logic  p3_skid_valid_C ;
  logic [13:0] p3_skid_valid_S ;
  logic p3_skid_valid_t_flag ;
  logic p3_skid_valid_r_flag ;
  assign p3_skid_valid_S = 789 ;
  assign _04_ = mc_dma_wr_req_vld && p3_skid_ready_flop;
  assign _04__S = 0 ;
  logic [0:0] mc_dma_wr_req_vld_C0 ;
  logic [0:0] mc_dma_wr_req_vld_R0 ;
  logic [0:0] mc_dma_wr_req_vld_X0 ;
  logic [0:0] p3_skid_ready_flop_C0 ;
  logic [0:0] p3_skid_ready_flop_R0 ;
  logic [0:0] p3_skid_ready_flop_X0 ;
  assign _04__T = mc_dma_wr_req_vld_T | p3_skid_ready_flop_T ;
  assign mc_dma_wr_req_vld_C0 = _04__C ;
  assign mc_dma_wr_req_vld_X0 = _04__X ;
  assign p3_skid_ready_flop_C0 = _04__C ;
  assign p3_skid_ready_flop_X0 = _04__X ;
  assign mc_dma_wr_req_vld_R0 = ( _04__R | _04__C & p3_skid_ready_flop_T ) & { 1{ p3_skid_ready_flop != 0 }} ;
  assign p3_skid_ready_flop_R0 = ( _04__R | _04__C & mc_dma_wr_req_vld_T ) & { 1{ mc_dma_wr_req_vld != 0 }} ;
  assign p3_skid_catch = _04_ && _06_;
  assign p3_skid_catch_S = 0 ;
  logic [0:0] _04__C0 ;
  logic [0:0] _04__R0 ;
  logic [0:0] _04__X0 ;
  logic [0:0] _06__C0 ;
  logic [0:0] _06__R0 ;
  logic [0:0] _06__X0 ;
  assign p3_skid_catch_T = _04__T | _06__T ;
  assign _04__C0 = p3_skid_catch_C ;
  assign _04__X0 = p3_skid_catch_X ;
  assign _06__C0 = p3_skid_catch_C ;
  assign _06__X0 = p3_skid_catch_X ;
  assign _04__R0 = ( p3_skid_catch_R | p3_skid_catch_C & _06__T ) & { 1{ _06_ != 0 }} ;
  assign _06__R0 = ( p3_skid_catch_R | p3_skid_catch_C & _04__T ) & { 1{ _04_ != 0 }} ;
  assign _05_ = p3_pipe_ready_bc && p3_skid_pipe_valid;
  assign _05__S = 0 ;
  logic [0:0] p3_pipe_ready_bc_C0 ;
  logic [0:0] p3_pipe_ready_bc_R0 ;
  logic [0:0] p3_pipe_ready_bc_X0 ;
  logic [0:0] p3_skid_pipe_valid_C0 ;
  logic [0:0] p3_skid_pipe_valid_R0 ;
  logic [0:0] p3_skid_pipe_valid_X0 ;
  assign _05__T = p3_pipe_ready_bc_T | p3_skid_pipe_valid_T ;
  assign p3_pipe_ready_bc_C0 = _05__C ;
  assign p3_pipe_ready_bc_X0 = _05__X ;
  assign p3_skid_pipe_valid_C0 = _05__C ;
  assign p3_skid_pipe_valid_X0 = _05__X ;
  assign p3_pipe_ready_bc_R0 = ( _05__R | _05__C & p3_skid_pipe_valid_T ) & { 1{ p3_skid_pipe_valid != 0 }} ;
  assign p3_skid_pipe_valid_R0 = ( _05__R | _05__C & p3_pipe_ready_bc_T ) & { 1{ p3_pipe_ready_bc != 0 }} ;
  assign _06_ = ! p3_pipe_ready_bc;
  logic [0:0] p3_pipe_ready_bc_C1 ;
  logic [0:0] p3_pipe_ready_bc_R1 ;
  logic [0:0] p3_pipe_ready_bc_X1 ;
  assign _06__T = | p3_pipe_ready_bc_T ;
  assign p3_pipe_ready_bc_C1 = { 1{ _06__C }} ;
  assign p3_pipe_ready_bc_X1 = { 1{ _06__X }} ;
  assign p3_pipe_ready_bc_R1 = { 1{ _06__R }} ;
  assign _06__S = 0 ;
  assign _07_ = ! p3_skid_catch;
  logic [0:0] p3_skid_catch_C0 ;
  logic [0:0] p3_skid_catch_R0 ;
  logic [0:0] p3_skid_catch_X0 ;
  assign _07__T = | p3_skid_catch_T ;
  assign p3_skid_catch_C0 = { 1{ _07__C }} ;
  assign p3_skid_catch_X0 = { 1{ _07__X }} ;
  assign p3_skid_catch_R0 = { 1{ _07__R }} ;
  assign _07__S = 0 ;
  assign _08_ = ! p3_pipe_valid;
  logic [0:0] p3_pipe_valid_C0 ;
  logic [0:0] p3_pipe_valid_R0 ;
  logic [0:0] p3_pipe_valid_X0 ;
  assign _08__T = | p3_pipe_valid_T ;
  assign p3_pipe_valid_C0 = { 1{ _08__C }} ;
  assign p3_pipe_valid_X0 = { 1{ _08__X }} ;
  assign p3_pipe_valid_R0 = { 1{ _08__R }} ;
  assign _08__S = 0 ;
  assign p3_pipe_ready_bc = mc_int_wr_req_ready || _08_;
  assign p3_pipe_ready_bc_S = 0 ;
  logic [0:0] mc_int_wr_req_ready_C0 ;
  logic [0:0] mc_int_wr_req_ready_R0 ;
  logic [0:0] mc_int_wr_req_ready_X0 ;
  logic [0:0] _08__C0 ;
  logic [0:0] _08__R0 ;
  logic [0:0] _08__X0 ;
  assign p3_pipe_ready_bc_T = mc_int_wr_req_ready_T | _08__T ;
  assign mc_int_wr_req_ready_C0 = p3_pipe_ready_bc_C ;
  assign mc_int_wr_req_ready_X0 = p3_pipe_ready_bc_X ;
  assign _08__C0 = p3_pipe_ready_bc_C ;
  assign _08__X0 = p3_pipe_ready_bc_X ;
  assign mc_int_wr_req_ready_R0 = ( p3_pipe_ready_bc_R | p3_pipe_ready_bc_C & _08__T ) & { 1{ _08_ == 0 }} ;
  assign _08__R0 = ( p3_pipe_ready_bc_R | p3_pipe_ready_bc_C & mc_int_wr_req_ready_T ) & { 1{ mc_int_wr_req_ready == 0 }} ;
  always @(posedge nvdla_core_clk)
      p3_pipe_data <= _00_;
  logic [514:0] _00__X0 ;
  logic [514:0] _00__R0 ;
  logic [514:0] _00__C0 ;
  assign _00__X0 = { 515{ p3_pipe_data_S != _00__S }} ;
  assign _00__R0 = 0 ;
  assign _00__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      p3_pipe_data_T 		<= !nvdla_core_rstn ? 0 : ( _00__T & _00__X0 );
  always @( posedge nvdla_core_clk )
      p3_pipe_data_t_flag 	<= !nvdla_core_rstn ? 0 : p3_pipe_data_t_flag ? 1 : | _00__T & ( | _00__X0 );
  always @( posedge nvdla_core_clk )
      p3_pipe_data_r_flag 	<= !nvdla_core_rstn ? 0 : p3_pipe_data_r_flag ? 1 : p3_pipe_data_t_flag ? 0 : ( | p3_pipe_data_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      p3_pipe_valid <= 1'b0;
    else
      p3_pipe_valid <= _01_;
  logic [0:0] _01__X0 ;
  logic [0:0] _01__R0 ;
  logic [0:0] _01__C0 ;
  assign _01__X0 = { 1{ p3_pipe_valid_S != _01__S }} ;
  assign _01__R0 = 0 ;
  assign _01__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      p3_pipe_valid_T 		<= !nvdla_core_rstn ? 0 : ( _01__T & _01__X0 );
  always @( posedge nvdla_core_clk )
      p3_pipe_valid_t_flag 	<= !nvdla_core_rstn ? 0 : p3_pipe_valid_t_flag ? 1 : | _01__T & ( | _01__X0 );
  always @( posedge nvdla_core_clk )
      p3_pipe_valid_r_flag 	<= !nvdla_core_rstn ? 0 : p3_pipe_valid_r_flag ? 1 : p3_pipe_valid_t_flag ? 0 : ( | p3_pipe_valid_R ) ;
  always @(posedge nvdla_core_clk)
      p3_skid_data <= _02_;
  logic [514:0] _02__X0 ;
  logic [514:0] _02__R0 ;
  logic [514:0] _02__C0 ;
  assign _02__X0 = { 515{ p3_skid_data_S != _02__S }} ;
  assign _02__R0 = 0 ;
  assign _02__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      p3_skid_data_T 		<= !nvdla_core_rstn ? 0 : ( _02__T & _02__X0 );
  always @( posedge nvdla_core_clk )
      p3_skid_data_t_flag 	<= !nvdla_core_rstn ? 0 : p3_skid_data_t_flag ? 1 : | _02__T & ( | _02__X0 );
  always @( posedge nvdla_core_clk )
      p3_skid_data_r_flag 	<= !nvdla_core_rstn ? 0 : p3_skid_data_r_flag ? 1 : p3_skid_data_t_flag ? 0 : ( | p3_skid_data_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      p3_skid_ready_flop <= 1'b1;
    else
      p3_skid_ready_flop <= p3_skid_ready;
  logic [0:0] p3_skid_ready_X0 ;
  logic [0:0] p3_skid_ready_R0 ;
  logic [0:0] p3_skid_ready_C0 ;
  assign p3_skid_ready_X0 = { 1{ p3_skid_ready_flop_S != p3_skid_ready_S }} ;
  assign p3_skid_ready_R0 = 0 ;
  assign p3_skid_ready_C0 = 0 ;
  always @( posedge nvdla_core_clk )
      p3_skid_ready_flop_T 		<= !nvdla_core_rstn ? 0 : ( p3_skid_ready_T & p3_skid_ready_X0 );
  always @( posedge nvdla_core_clk )
      p3_skid_ready_flop_t_flag 	<= !nvdla_core_rstn ? 0 : p3_skid_ready_flop_t_flag ? 1 : | p3_skid_ready_T & ( | p3_skid_ready_X0 );
  always @( posedge nvdla_core_clk )
      p3_skid_ready_flop_r_flag 	<= !nvdla_core_rstn ? 0 : p3_skid_ready_flop_r_flag ? 1 : p3_skid_ready_flop_t_flag ? 0 : ( | p3_skid_ready_flop_R ) ;
  always @(posedge nvdla_core_clk or negedge nvdla_core_rstn)
    if (!nvdla_core_rstn)
      p3_skid_valid <= 1'b0;
    else
      p3_skid_valid <= _03_;
  logic [0:0] _03__X0 ;
  logic [0:0] _03__R0 ;
  logic [0:0] _03__C0 ;
  assign _03__X0 = { 1{ p3_skid_valid_S != _03__S }} ;
  assign _03__R0 = 0 ;
  assign _03__C0 = 0 ;
  always @( posedge nvdla_core_clk )
      p3_skid_valid_T 		<= !nvdla_core_rstn ? 0 : ( _03__T & _03__X0 );
  always @( posedge nvdla_core_clk )
      p3_skid_valid_t_flag 	<= !nvdla_core_rstn ? 0 : p3_skid_valid_t_flag ? 1 : | _03__T & ( | _03__X0 );
  always @( posedge nvdla_core_clk )
      p3_skid_valid_r_flag 	<= !nvdla_core_rstn ? 0 : p3_skid_valid_r_flag ? 1 : p3_skid_valid_t_flag ? 0 : ( | p3_skid_valid_R ) ;
  assign p3_skid_ready = p3_skid_valid ? p3_pipe_ready_bc : _07_;
  logic [0:0] p3_skid_valid_C0 ;
  logic [0:0] p3_skid_valid_R0 ;
  logic [0:0] p3_skid_valid_X0 ;
  assign p3_skid_valid_C0 = | p3_skid_ready_C ;
  assign p3_skid_valid_X0 = | p3_skid_ready_X ;
  assign p3_skid_ready_T = p3_skid_valid ? ( { 1{ p3_skid_valid_T  }} | p3_pipe_ready_bc_T ) : ( { 1{ p3_skid_valid_T  }} | _07__T );
  assign p3_skid_ready_S = p3_skid_valid ? p3_pipe_ready_bc_S : _07__S ;
  assign p3_skid_valid_R0 = ( | (p3_skid_ready_R | ( p3_skid_ready_C & ( { 1{ p3_skid_valid }} & p3_pipe_ready_bc_T | { 1{ !p3_skid_valid }} & _07__T )))) && p3_pipe_ready_bc != _07_ ;
  logic [0:0] p3_pipe_ready_bc_C2 ;
  logic [0:0] p3_pipe_ready_bc_R2 ;
  logic [0:0] p3_pipe_ready_bc_X2 ;
  assign p3_pipe_ready_bc_C2 = { 1{ p3_skid_valid }} ;
  assign p3_pipe_ready_bc_R2 = { 1{ p3_skid_valid }} & ( p3_skid_ready_R | ( { 1{ p3_skid_valid_T  }} & p3_skid_ready_C ));
  assign p3_pipe_ready_bc_X2 = { 1{ p3_skid_valid }} & p3_skid_ready_X ;
  logic [0:0] _07__C0 ;
  logic [0:0] _07__R0 ;
  logic [0:0] _07__X0 ;
  assign _07__C0 = { 1{ !p3_skid_valid }} ;
  assign _07__R0 = { 1{ !p3_skid_valid }} & ( p3_skid_ready_R | ( { 1{ p3_skid_valid_T  }} & p3_skid_ready_C ));
  assign _07__X0 = { 1{ !p3_skid_valid }} & p3_skid_ready_X ;
  assign _03_ = p3_skid_valid ? _06_ : p3_skid_catch;
  logic [0:0] p3_skid_valid_C1 ;
  logic [0:0] p3_skid_valid_R1 ;
  logic [0:0] p3_skid_valid_X1 ;
  assign p3_skid_valid_C1 = | _03__C ;
  assign p3_skid_valid_X1 = | _03__X ;
  assign _03__T = p3_skid_valid ? ( { 1{ p3_skid_valid_T  }} | _06__T ) : ( { 1{ p3_skid_valid_T  }} | p3_skid_catch_T );
  assign _03__S = p3_skid_valid ? _06__S : p3_skid_catch_S ;
  assign p3_skid_valid_R1 = ( | (_03__R | ( _03__C & ( { 1{ p3_skid_valid }} & _06__T | { 1{ !p3_skid_valid }} & p3_skid_catch_T )))) && _06_ != p3_skid_catch ;
  logic [0:0] _06__C1 ;
  logic [0:0] _06__R1 ;
  logic [0:0] _06__X1 ;
  assign _06__C1 = { 1{ p3_skid_valid }} ;
  assign _06__R1 = { 1{ p3_skid_valid }} & ( _03__R | ( { 1{ p3_skid_valid_T  }} & _03__C ));
  assign _06__X1 = { 1{ p3_skid_valid }} & _03__X ;
  logic [0:0] p3_skid_catch_C1 ;
  logic [0:0] p3_skid_catch_R1 ;
  logic [0:0] p3_skid_catch_X1 ;
  assign p3_skid_catch_C1 = { 1{ !p3_skid_valid }} ;
  assign p3_skid_catch_R1 = { 1{ !p3_skid_valid }} & ( _03__R | ( { 1{ p3_skid_valid_T  }} & _03__C ));
  assign p3_skid_catch_X1 = { 1{ !p3_skid_valid }} & _03__X ;
  assign _02_ = p3_skid_catch ? dma_wr_req_pd : p3_skid_data;
  logic [0:0] p3_skid_catch_C2 ;
  logic [0:0] p3_skid_catch_R2 ;
  logic [0:0] p3_skid_catch_X2 ;
  assign p3_skid_catch_C2 = | _02__C ;
  assign p3_skid_catch_X2 = | _02__X ;
  assign _02__T = p3_skid_catch ? ( { 515{ p3_skid_catch_T  }} | dma_wr_req_pd_T ) : ( { 515{ p3_skid_catch_T  }} | p3_skid_data_T );
  assign _02__S = p3_skid_catch ? dma_wr_req_pd_S : p3_skid_data_S ;
  assign p3_skid_catch_R2 = ( | (_02__R | ( _02__C & ( { 515{ p3_skid_catch }} & dma_wr_req_pd_T | { 515{ !p3_skid_catch }} & p3_skid_data_T )))) && dma_wr_req_pd != p3_skid_data ;
  logic [514:0] dma_wr_req_pd_C0 ;
  logic [514:0] dma_wr_req_pd_R0 ;
  logic [514:0] dma_wr_req_pd_X0 ;
  assign dma_wr_req_pd_C0 = { 515{ p3_skid_catch }} ;
  assign dma_wr_req_pd_R0 = { 515{ p3_skid_catch }} & ( _02__R | ( { 515{ p3_skid_catch_T  }} & _02__C ));
  assign dma_wr_req_pd_X0 = { 515{ p3_skid_catch }} & _02__X ;
  logic [514:0] p3_skid_data_C0 ;
  logic [514:0] p3_skid_data_R0 ;
  logic [514:0] p3_skid_data_X0 ;
  assign p3_skid_data_C0 = { 515{ !p3_skid_catch }} ;
  assign p3_skid_data_R0 = { 515{ !p3_skid_catch }} & ( _02__R | ( { 515{ p3_skid_catch_T  }} & _02__C ));
  assign p3_skid_data_X0 = { 515{ !p3_skid_catch }} & _02__X ;
  assign p3_skid_pipe_valid = p3_skid_ready_flop ? mc_dma_wr_req_vld : p3_skid_valid;
  logic [0:0] p3_skid_ready_flop_C1 ;
  logic [0:0] p3_skid_ready_flop_R1 ;
  logic [0:0] p3_skid_ready_flop_X1 ;
  assign p3_skid_ready_flop_C1 = | p3_skid_pipe_valid_C ;
  assign p3_skid_ready_flop_X1 = | p3_skid_pipe_valid_X ;
  assign p3_skid_pipe_valid_T = p3_skid_ready_flop ? ( { 1{ p3_skid_ready_flop_T  }} | mc_dma_wr_req_vld_T ) : ( { 1{ p3_skid_ready_flop_T  }} | p3_skid_valid_T );
  assign p3_skid_pipe_valid_S = p3_skid_ready_flop ? mc_dma_wr_req_vld_S : p3_skid_valid_S ;
  assign p3_skid_ready_flop_R1 = ( | (p3_skid_pipe_valid_R | ( p3_skid_pipe_valid_C & ( { 1{ p3_skid_ready_flop }} & mc_dma_wr_req_vld_T | { 1{ !p3_skid_ready_flop }} & p3_skid_valid_T )))) && mc_dma_wr_req_vld != p3_skid_valid ;
  logic [0:0] mc_dma_wr_req_vld_C1 ;
  logic [0:0] mc_dma_wr_req_vld_R1 ;
  logic [0:0] mc_dma_wr_req_vld_X1 ;
  assign mc_dma_wr_req_vld_C1 = { 1{ p3_skid_ready_flop }} ;
  assign mc_dma_wr_req_vld_R1 = { 1{ p3_skid_ready_flop }} & ( p3_skid_pipe_valid_R | ( { 1{ p3_skid_ready_flop_T  }} & p3_skid_pipe_valid_C ));
  assign mc_dma_wr_req_vld_X1 = { 1{ p3_skid_ready_flop }} & p3_skid_pipe_valid_X ;
  logic [0:0] p3_skid_valid_C2 ;
  logic [0:0] p3_skid_valid_R2 ;
  logic [0:0] p3_skid_valid_X2 ;
  assign p3_skid_valid_C2 = { 1{ !p3_skid_ready_flop }} ;
  assign p3_skid_valid_R2 = { 1{ !p3_skid_ready_flop }} & ( p3_skid_pipe_valid_R | ( { 1{ p3_skid_ready_flop_T  }} & p3_skid_pipe_valid_C ));
  assign p3_skid_valid_X2 = { 1{ !p3_skid_ready_flop }} & p3_skid_pipe_valid_X ;
  assign p3_skid_pipe_data = p3_skid_ready_flop ? dma_wr_req_pd : p3_skid_data;
  logic [0:0] p3_skid_ready_flop_C2 ;
  logic [0:0] p3_skid_ready_flop_R2 ;
  logic [0:0] p3_skid_ready_flop_X2 ;
  assign p3_skid_ready_flop_C2 = | p3_skid_pipe_data_C ;
  assign p3_skid_ready_flop_X2 = | p3_skid_pipe_data_X ;
  assign p3_skid_pipe_data_T = p3_skid_ready_flop ? ( { 515{ p3_skid_ready_flop_T  }} | dma_wr_req_pd_T ) : ( { 515{ p3_skid_ready_flop_T  }} | p3_skid_data_T );
  assign p3_skid_pipe_data_S = p3_skid_ready_flop ? dma_wr_req_pd_S : p3_skid_data_S ;
  assign p3_skid_ready_flop_R2 = ( | (p3_skid_pipe_data_R | ( p3_skid_pipe_data_C & ( { 515{ p3_skid_ready_flop }} & dma_wr_req_pd_T | { 515{ !p3_skid_ready_flop }} & p3_skid_data_T )))) && dma_wr_req_pd != p3_skid_data ;
  logic [514:0] dma_wr_req_pd_C1 ;
  logic [514:0] dma_wr_req_pd_R1 ;
  logic [514:0] dma_wr_req_pd_X1 ;
  assign dma_wr_req_pd_C1 = { 515{ p3_skid_ready_flop }} ;
  assign dma_wr_req_pd_R1 = { 515{ p3_skid_ready_flop }} & ( p3_skid_pipe_data_R | ( { 515{ p3_skid_ready_flop_T  }} & p3_skid_pipe_data_C ));
  assign dma_wr_req_pd_X1 = { 515{ p3_skid_ready_flop }} & p3_skid_pipe_data_X ;
  logic [514:0] p3_skid_data_C1 ;
  logic [514:0] p3_skid_data_R1 ;
  logic [514:0] p3_skid_data_X1 ;
  assign p3_skid_data_C1 = { 515{ !p3_skid_ready_flop }} ;
  assign p3_skid_data_R1 = { 515{ !p3_skid_ready_flop }} & ( p3_skid_pipe_data_R | ( { 515{ p3_skid_ready_flop_T  }} & p3_skid_pipe_data_C ));
  assign p3_skid_data_X1 = { 515{ !p3_skid_ready_flop }} & p3_skid_pipe_data_X ;
  assign _01_ = p3_pipe_ready_bc ? p3_skid_pipe_valid : 1'b1;
  logic [0:0] p3_pipe_ready_bc_C3 ;
  logic [0:0] p3_pipe_ready_bc_R3 ;
  logic [0:0] p3_pipe_ready_bc_X3 ;
  assign p3_pipe_ready_bc_C3 = | _01__C ;
  assign p3_pipe_ready_bc_X3 = | _01__X ;
  logic [0:0] p3_skid_pipe_valid_C1 ;
  logic [0:0] p3_skid_pipe_valid_R1 ;
  logic [0:0] p3_skid_pipe_valid_X1 ;
  assign p3_skid_pipe_valid_C1 = { 1{ p3_pipe_ready_bc }} ;
  assign p3_skid_pipe_valid_R1 = { 1{ p3_pipe_ready_bc }} & ( _01__R | ( { 1{ p3_pipe_ready_bc_T  }} & _01__C ));
  assign p3_skid_pipe_valid_X1 = { 1{ p3_pipe_ready_bc }} & _01__X ;
  assign _01__T = p3_pipe_ready_bc ? ( { 1{ | p3_pipe_ready_bc_T  }} | p3_skid_pipe_valid_T ) : { 1{ | p3_pipe_ready_bc_T  }};
  assign _01__S = p3_pipe_ready_bc ? p3_skid_pipe_valid_S : p3_pipe_ready_bc_S ;
  assign p3_pipe_ready_bc_R3 = ( | (_01__R | ( { 1{ p3_pipe_ready_bc }} & p3_skid_pipe_valid_T & _01__C ))) && p3_skid_pipe_valid != 1'b1 ;
  assign _00_ = _05_ ? p3_skid_pipe_data : p3_pipe_data;
  logic [0:0] _05__C0 ;
  logic [0:0] _05__R0 ;
  logic [0:0] _05__X0 ;
  assign _05__C0 = | _00__C ;
  assign _05__X0 = | _00__X ;
  assign _00__T = _05_ ? ( { 515{ _05__T  }} | p3_skid_pipe_data_T ) : ( { 515{ _05__T  }} | p3_pipe_data_T );
  assign _00__S = _05_ ? p3_skid_pipe_data_S : p3_pipe_data_S ;
  assign _05__R0 = ( | (_00__R | ( _00__C & ( { 515{ _05_ }} & p3_skid_pipe_data_T | { 515{ !_05_ }} & p3_pipe_data_T )))) && p3_skid_pipe_data != p3_pipe_data ;
  logic [514:0] p3_skid_pipe_data_C0 ;
  logic [514:0] p3_skid_pipe_data_R0 ;
  logic [514:0] p3_skid_pipe_data_X0 ;
  assign p3_skid_pipe_data_C0 = { 515{ _05_ }} ;
  assign p3_skid_pipe_data_R0 = { 515{ _05_ }} & ( _00__R | ( { 515{ _05__T  }} & _00__C ));
  assign p3_skid_pipe_data_X0 = { 515{ _05_ }} & _00__X ;
  logic [514:0] p3_pipe_data_C0 ;
  logic [514:0] p3_pipe_data_R0 ;
  logic [514:0] p3_pipe_data_X0 ;
  assign p3_pipe_data_C0 = { 515{ !_05_ }} ;
  assign p3_pipe_data_R0 = { 515{ !_05_ }} & ( _00__R | ( { 515{ _05__T  }} & _00__C ));
  assign p3_pipe_data_X0 = { 515{ !_05_ }} & _00__X ;
  assign mc_dma_wr_req_rdy = p3_skid_ready_flop;
  logic [0:0] p3_skid_ready_flop_C3 ;
  logic [0:0] p3_skid_ready_flop_R3 ;
  logic [0:0] p3_skid_ready_flop_X3 ;
  assign mc_dma_wr_req_rdy_T = p3_skid_ready_flop_T ;
  assign p3_skid_ready_flop_C3 = mc_dma_wr_req_rdy_C ;
  assign p3_skid_ready_flop_R3 = mc_dma_wr_req_rdy_R ;
  assign p3_skid_ready_flop_X3 = mc_dma_wr_req_rdy_X ;
  assign mc_dma_wr_req_rdy_S = p3_skid_ready_flop_S ;
  assign mc_int_wr_req_pd = p3_pipe_data;
  logic [514:0] p3_pipe_data_C1 ;
  logic [514:0] p3_pipe_data_R1 ;
  logic [514:0] p3_pipe_data_X1 ;
  assign mc_int_wr_req_pd_T = p3_pipe_data_T ;
  assign p3_pipe_data_C1 = mc_int_wr_req_pd_C ;
  assign p3_pipe_data_R1 = mc_int_wr_req_pd_R ;
  assign p3_pipe_data_X1 = mc_int_wr_req_pd_X ;
  assign mc_int_wr_req_pd_S = p3_pipe_data_S ;
  assign mc_int_wr_req_valid = p3_pipe_valid;
  logic [0:0] p3_pipe_valid_C1 ;
  logic [0:0] p3_pipe_valid_R1 ;
  logic [0:0] p3_pipe_valid_X1 ;
  assign mc_int_wr_req_valid_T = p3_pipe_valid_T ;
  assign p3_pipe_valid_C1 = mc_int_wr_req_valid_C ;
  assign p3_pipe_valid_R1 = mc_int_wr_req_valid_R ;
  assign p3_pipe_valid_X1 = mc_int_wr_req_valid_X ;
  assign mc_int_wr_req_valid_S = p3_pipe_valid_S ;
  assign p3_assert_clk = nvdla_core_clk;
  logic [0:0] nvdla_core_clk_C0 ;
  logic [0:0] nvdla_core_clk_R0 ;
  logic [0:0] nvdla_core_clk_X0 ;
  assign p3_assert_clk_T = nvdla_core_clk_T ;
  assign nvdla_core_clk_C0 = p3_assert_clk_C ;
  assign nvdla_core_clk_R0 = p3_assert_clk_R ;
  assign nvdla_core_clk_X0 = p3_assert_clk_X ;
  assign p3_assert_clk_S = nvdla_core_clk_S ;
  assign p3_pipe_rand_data = dma_wr_req_pd;
  logic [514:0] dma_wr_req_pd_C2 ;
  logic [514:0] dma_wr_req_pd_R2 ;
  logic [514:0] dma_wr_req_pd_X2 ;
  assign p3_pipe_rand_data_T = dma_wr_req_pd_T ;
  assign dma_wr_req_pd_C2 = p3_pipe_rand_data_C ;
  assign dma_wr_req_pd_R2 = p3_pipe_rand_data_R ;
  assign dma_wr_req_pd_X2 = p3_pipe_rand_data_X ;
  assign p3_pipe_rand_data_S = dma_wr_req_pd_S ;
  assign p3_pipe_rand_ready = p3_skid_ready_flop;
  logic [0:0] p3_skid_ready_flop_C4 ;
  logic [0:0] p3_skid_ready_flop_R4 ;
  logic [0:0] p3_skid_ready_flop_X4 ;
  assign p3_pipe_rand_ready_T = p3_skid_ready_flop_T ;
  assign p3_skid_ready_flop_C4 = p3_pipe_rand_ready_C ;
  assign p3_skid_ready_flop_R4 = p3_pipe_rand_ready_R ;
  assign p3_skid_ready_flop_X4 = p3_pipe_rand_ready_X ;
  assign p3_pipe_rand_ready_S = p3_skid_ready_flop_S ;
  assign p3_pipe_rand_valid = mc_dma_wr_req_vld;
  logic [0:0] mc_dma_wr_req_vld_C2 ;
  logic [0:0] mc_dma_wr_req_vld_R2 ;
  logic [0:0] mc_dma_wr_req_vld_X2 ;
  assign p3_pipe_rand_valid_T = mc_dma_wr_req_vld_T ;
  assign mc_dma_wr_req_vld_C2 = p3_pipe_rand_valid_C ;
  assign mc_dma_wr_req_vld_R2 = p3_pipe_rand_valid_R ;
  assign mc_dma_wr_req_vld_X2 = p3_pipe_rand_valid_X ;
  assign p3_pipe_rand_valid_S = mc_dma_wr_req_vld_S ;
  assign p3_pipe_ready = mc_int_wr_req_ready;
  logic [0:0] mc_int_wr_req_ready_C1 ;
  logic [0:0] mc_int_wr_req_ready_R1 ;
  logic [0:0] mc_int_wr_req_ready_X1 ;
  assign p3_pipe_ready_T = mc_int_wr_req_ready_T ;
  assign mc_int_wr_req_ready_C1 = p3_pipe_ready_C ;
  assign mc_int_wr_req_ready_R1 = p3_pipe_ready_R ;
  assign mc_int_wr_req_ready_X1 = p3_pipe_ready_X ;
  assign p3_pipe_ready_S = mc_int_wr_req_ready_S ;
  assign p3_skid_pipe_ready = p3_pipe_ready_bc;
  logic [0:0] p3_pipe_ready_bc_C4 ;
  logic [0:0] p3_pipe_ready_bc_R4 ;
  logic [0:0] p3_pipe_ready_bc_X4 ;
  assign p3_skid_pipe_ready_T = p3_pipe_ready_bc_T ;
  assign p3_pipe_ready_bc_C4 = p3_skid_pipe_ready_C ;
  assign p3_pipe_ready_bc_R4 = p3_skid_pipe_ready_R ;
  assign p3_pipe_ready_bc_X4 = p3_skid_pipe_ready_X ;
  assign p3_skid_pipe_ready_S = p3_pipe_ready_bc_S ;
  assign nvdla_core_clk_C = ( nvdla_core_clk_C0 );
  assign p3_pipe_data_C = ( p3_pipe_data_C0 ) | ( p3_pipe_data_C1 );
  assign p3_skid_pipe_data_C = ( p3_skid_pipe_data_C0 );
  assign _05__C = ( _05__C0 );
  assign p3_skid_data_C = ( p3_skid_data_C0 ) | ( p3_skid_data_C1 );
  assign dma_wr_req_pd_C = ( dma_wr_req_pd_C0 ) | ( dma_wr_req_pd_C1 ) | ( dma_wr_req_pd_C2 );
  assign _07__C = ( _07__C0 );
  assign p3_skid_valid_C = ( p3_skid_valid_C0 ) | ( p3_skid_valid_C1 ) | ( p3_skid_valid_C2 );
  assign _03__C = ( _03__C0 );
  assign p3_skid_ready_C = ( p3_skid_ready_C0 );
  assign _02__C = ( _02__C0 );
  assign _01__C = ( _01__C0 );
  assign _00__C = ( _00__C0 );
  assign _08__C = ( _08__C0 );
  assign mc_int_wr_req_ready_C = ( mc_int_wr_req_ready_C0 ) | ( mc_int_wr_req_ready_C1 );
  assign p3_pipe_valid_C = ( p3_pipe_valid_C0 ) | ( p3_pipe_valid_C1 );
  assign p3_skid_catch_C = ( p3_skid_catch_C0 ) | ( p3_skid_catch_C1 ) | ( p3_skid_catch_C2 );
  assign p3_skid_pipe_valid_C = ( p3_skid_pipe_valid_C0 ) | ( p3_skid_pipe_valid_C1 );
  assign p3_pipe_ready_bc_C = ( p3_pipe_ready_bc_C0 ) | ( p3_pipe_ready_bc_C1 ) | ( p3_pipe_ready_bc_C2 ) | ( p3_pipe_ready_bc_C3 ) | ( p3_pipe_ready_bc_C4 );
  assign _06__C = ( _06__C0 ) | ( _06__C1 );
  assign _04__C = ( _04__C0 );
  assign p3_skid_ready_flop_C = ( p3_skid_ready_flop_C0 ) | ( p3_skid_ready_flop_C1 ) | ( p3_skid_ready_flop_C2 ) | ( p3_skid_ready_flop_C3 ) | ( p3_skid_ready_flop_C4 );
  assign mc_dma_wr_req_vld_C = ( mc_dma_wr_req_vld_C0 ) | ( mc_dma_wr_req_vld_C1 ) | ( mc_dma_wr_req_vld_C2 );
  assign mc_int_wr_req_valid_C = ( mc_int_wr_req_valid_C0 );
  assign mc_int_wr_req_pd_C = ( mc_int_wr_req_pd_C0 );
  assign mc_dma_wr_req_rdy_C = ( mc_dma_wr_req_rdy_C0 );
  assign nvdla_core_clk_X = ( nvdla_core_clk_X0 );
  assign p3_pipe_data_X = ( p3_pipe_data_X0 ) | ( p3_pipe_data_X1 );
  assign p3_skid_pipe_data_X = ( p3_skid_pipe_data_X0 );
  assign _05__X = ( _05__X0 );
  assign p3_skid_data_X = ( p3_skid_data_X0 ) | ( p3_skid_data_X1 );
  assign dma_wr_req_pd_X = ( dma_wr_req_pd_X0 ) | ( dma_wr_req_pd_X1 ) | ( dma_wr_req_pd_X2 );
  assign _07__X = ( _07__X0 );
  assign p3_skid_valid_X = ( p3_skid_valid_X0 ) | ( p3_skid_valid_X1 ) | ( p3_skid_valid_X2 );
  assign _03__X = ( _03__X0 );
  assign p3_skid_ready_X = ( p3_skid_ready_X0 );
  assign _02__X = ( _02__X0 );
  assign _01__X = ( _01__X0 );
  assign _00__X = ( _00__X0 );
  assign _08__X = ( _08__X0 );
  assign mc_int_wr_req_ready_X = ( mc_int_wr_req_ready_X0 ) | ( mc_int_wr_req_ready_X1 );
  assign p3_pipe_valid_X = ( p3_pipe_valid_X0 ) | ( p3_pipe_valid_X1 );
  assign p3_skid_catch_X = ( p3_skid_catch_X0 ) | ( p3_skid_catch_X1 ) | ( p3_skid_catch_X2 );
  assign p3_skid_pipe_valid_X = ( p3_skid_pipe_valid_X0 ) | ( p3_skid_pipe_valid_X1 );
  assign p3_pipe_ready_bc_X = ( p3_pipe_ready_bc_X0 ) | ( p3_pipe_ready_bc_X1 ) | ( p3_pipe_ready_bc_X2 ) | ( p3_pipe_ready_bc_X3 ) | ( p3_pipe_ready_bc_X4 );
  assign _06__X = ( _06__X0 ) | ( _06__X1 );
  assign _04__X = ( _04__X0 );
  assign p3_skid_ready_flop_X = ( p3_skid_ready_flop_X0 ) | ( p3_skid_ready_flop_X1 ) | ( p3_skid_ready_flop_X2 ) | ( p3_skid_ready_flop_X3 ) | ( p3_skid_ready_flop_X4 );
  assign mc_dma_wr_req_vld_X = ( mc_dma_wr_req_vld_X0 ) | ( mc_dma_wr_req_vld_X1 ) | ( mc_dma_wr_req_vld_X2 );
  assign mc_int_wr_req_valid_X = ( mc_int_wr_req_valid_X0 );
  assign mc_int_wr_req_pd_X = ( mc_int_wr_req_pd_X0 );
  assign mc_dma_wr_req_rdy_X = ( mc_dma_wr_req_rdy_X0 );
  assign nvdla_core_clk_R = ( nvdla_core_clk_X0 & nvdla_core_clk_R0 );
  assign p3_pipe_data_R = ( p3_pipe_data_X0 & p3_pipe_data_R0 ) | ( p3_pipe_data_X1 & p3_pipe_data_R1 );
  assign p3_skid_pipe_data_R = ( p3_skid_pipe_data_X0 & p3_skid_pipe_data_R0 );
  assign _05__R = ( _05__X0 & _05__R0 );
  assign p3_skid_data_R = ( p3_skid_data_X0 & p3_skid_data_R0 ) | ( p3_skid_data_X1 & p3_skid_data_R1 );
  assign dma_wr_req_pd_R = ( dma_wr_req_pd_X0 & dma_wr_req_pd_R0 ) | ( dma_wr_req_pd_X1 & dma_wr_req_pd_R1 ) | ( dma_wr_req_pd_X2 & dma_wr_req_pd_R2 );
  assign _07__R = ( _07__X0 & _07__R0 );
  assign p3_skid_valid_R = ( p3_skid_valid_X0 & p3_skid_valid_R0 ) | ( p3_skid_valid_X1 & p3_skid_valid_R1 ) | ( p3_skid_valid_X2 & p3_skid_valid_R2 );
  assign _03__R = ( _03__X0 & _03__R0 );
  assign p3_skid_ready_R = ( p3_skid_ready_X0 & p3_skid_ready_R0 );
  assign _02__R = ( _02__X0 & _02__R0 );
  assign _01__R = ( _01__X0 & _01__R0 );
  assign _00__R = ( _00__X0 & _00__R0 );
  assign _08__R = ( _08__X0 & _08__R0 );
  assign mc_int_wr_req_ready_R = ( mc_int_wr_req_ready_X0 & mc_int_wr_req_ready_R0 ) | ( mc_int_wr_req_ready_X1 & mc_int_wr_req_ready_R1 );
  assign p3_pipe_valid_R = ( p3_pipe_valid_X0 & p3_pipe_valid_R0 ) | ( p3_pipe_valid_X1 & p3_pipe_valid_R1 );
  assign p3_skid_catch_R = ( p3_skid_catch_X0 & p3_skid_catch_R0 ) | ( p3_skid_catch_X1 & p3_skid_catch_R1 ) | ( p3_skid_catch_X2 & p3_skid_catch_R2 );
  assign p3_skid_pipe_valid_R = ( p3_skid_pipe_valid_X0 & p3_skid_pipe_valid_R0 ) | ( p3_skid_pipe_valid_X1 & p3_skid_pipe_valid_R1 );
  assign p3_pipe_ready_bc_R = ( p3_pipe_ready_bc_X0 & p3_pipe_ready_bc_R0 ) | ( p3_pipe_ready_bc_X1 & p3_pipe_ready_bc_R1 ) | ( p3_pipe_ready_bc_X2 & p3_pipe_ready_bc_R2 ) | ( p3_pipe_ready_bc_X3 & p3_pipe_ready_bc_R3 ) | ( p3_pipe_ready_bc_X4 & p3_pipe_ready_bc_R4 );
  assign _06__R = ( _06__X0 & _06__R0 ) | ( _06__X1 & _06__R1 );
  assign _04__R = ( _04__X0 & _04__R0 );
  assign p3_skid_ready_flop_R = ( p3_skid_ready_flop_X0 & p3_skid_ready_flop_R0 ) | ( p3_skid_ready_flop_X1 & p3_skid_ready_flop_R1 ) | ( p3_skid_ready_flop_X2 & p3_skid_ready_flop_R2 ) | ( p3_skid_ready_flop_X3 & p3_skid_ready_flop_R3 ) | ( p3_skid_ready_flop_X4 & p3_skid_ready_flop_R4 );
  assign mc_dma_wr_req_vld_R = ( mc_dma_wr_req_vld_X0 & mc_dma_wr_req_vld_R0 ) | ( mc_dma_wr_req_vld_X1 & mc_dma_wr_req_vld_R1 ) | ( mc_dma_wr_req_vld_X2 & mc_dma_wr_req_vld_R2 );
  assign mc_int_wr_req_valid_R = ( mc_int_wr_req_valid_X0 & mc_int_wr_req_valid_R0 );
  assign mc_int_wr_req_pd_R = ( mc_int_wr_req_pd_X0 & mc_int_wr_req_pd_R0 );
  assign mc_dma_wr_req_rdy_R = ( mc_dma_wr_req_rdy_X0 & mc_dma_wr_req_rdy_R0 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { p3_assert_clk_R , p3_assert_clk_C , p3_assert_clk_X , p3_pipe_rand_data_R , p3_pipe_rand_data_C , p3_pipe_rand_data_X , p3_pipe_rand_ready_R , p3_pipe_rand_ready_C , p3_pipe_rand_ready_X , p3_pipe_rand_valid_R , p3_pipe_rand_valid_C , p3_pipe_rand_valid_X , p3_pipe_ready_R , p3_pipe_ready_C , p3_pipe_ready_X , p3_skid_pipe_ready_R , p3_skid_pipe_ready_C , p3_skid_pipe_ready_X  } = 0;
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) p3_pipe_data_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) p3_pipe_data_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) p3_pipe_data_PREV_VAL1 <= p3_pipe_data ;
    if( INSTR_IN_ZY ) p3_pipe_data_PREV_VAL2 <= p3_pipe_data_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) p3_pipe_valid_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) p3_pipe_valid_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) p3_pipe_valid_PREV_VAL1 <= p3_pipe_valid ;
    if( INSTR_IN_ZY ) p3_pipe_valid_PREV_VAL2 <= p3_pipe_valid_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) p3_skid_data_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) p3_skid_data_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) p3_skid_data_PREV_VAL1 <= p3_skid_data ;
    if( INSTR_IN_ZY ) p3_skid_data_PREV_VAL2 <= p3_skid_data_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) p3_skid_ready_flop_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) p3_skid_ready_flop_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) p3_skid_ready_flop_PREV_VAL1 <= p3_skid_ready_flop ;
    if( INSTR_IN_ZY ) p3_skid_ready_flop_PREV_VAL2 <= p3_skid_ready_flop_PREV_VAL1 ;
  end
  always @( posedge nvdla_core_clk ) begin
    if( !nvdla_core_rstn ) p3_skid_valid_PREV_VAL1 <= 0 ;
    if( !nvdla_core_rstn ) p3_skid_valid_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) p3_skid_valid_PREV_VAL1 <= p3_skid_valid ;
    if( INSTR_IN_ZY ) p3_skid_valid_PREV_VAL2 <= p3_skid_valid_PREV_VAL1 ;
  end
 // ground taints for unused wire slices
  assert property( p3_pipe_data_r_flag == 0 || p3_pipe_data_PREV_VAL1 == p3_pipe_data_PREV_VAL2 );
  assert property( p3_pipe_valid_r_flag == 0 || p3_pipe_valid_PREV_VAL1 == p3_pipe_valid_PREV_VAL2 );
  assert property( p3_skid_data_r_flag == 0 || p3_skid_data_PREV_VAL1 == p3_skid_data_PREV_VAL2 );
  assert property( p3_skid_ready_flop_r_flag == 0 || p3_skid_ready_flop_PREV_VAL1 == p3_skid_ready_flop_PREV_VAL2 );
  assert property( p3_skid_valid_r_flag == 0 || p3_skid_valid_PREV_VAL1 == p3_skid_valid_PREV_VAL2 );
  assign rst_zy = !nvdla_core_rstn ;
endmodule
