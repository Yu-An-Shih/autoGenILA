module RAM_BANK_RAMPDP_256X11_GL_M4_D2 ( CLK , IDDQ , RA , RE , RET_EN , SLEEP_EN , SVOP , WA , WD , WE , clobber_array , clobber_flops , INSTR_IN_ZY , rst_zy , CLK_T , CLK_S , IDDQ_T , IDDQ_S , RA_T , RA_S , RD_R0 , RD_C0 , RD_X0 , RE_T , RE_S , RET_EN_T , RET_EN_S , SLEEP_EN_T , SLEEP_EN_S , SVOP_T , SVOP_S , WA_T , WA_S , WD_T , WD_S , WE_T , WE_S , clobber_array_T , clobber_array_S , clobber_flops_T , clobber_flops_S , RD , CLK_R , CLK_X , CLK_C , IDDQ_R , IDDQ_X , IDDQ_C , RA_R , RA_X , RA_C , RD_T , RD_S , RE_R , RE_X , RE_C , RET_EN_R , RET_EN_X , RET_EN_C , SLEEP_EN_R , SLEEP_EN_X , SLEEP_EN_C , SVOP_R , SVOP_X , SVOP_C , WA_R , WA_X , WA_C , WD_R , WD_X , WD_C , WE_R , WE_X , WE_C , clobber_array_R , clobber_array_X , clobber_array_C , clobber_flops_R , clobber_flops_X , clobber_flops_C );
  input rst_zy;
  integer i;
  input INSTR_IN_ZY;
  logic _000_;
  logic _000__T ;
  logic _000__R ;
  logic _000__C ;
  logic _000__X ;
  logic [13:0] _000__S ;
  logic [10:0] _001_;
  logic [10:0] _001__T ;
  logic [10:0] _001__R ;
  logic [10:0] _001__C ;
  logic [10:0] _001__X ;
  logic [13:0] _001__S ;
  logic _002_;
  logic _002__T ;
  logic _002__R ;
  logic _002__C ;
  logic _002__X ;
  logic [13:0] _002__S ;
  logic [10:0] _003_;
  logic [10:0] _003__T ;
  logic [10:0] _003__R ;
  logic [10:0] _003__C ;
  logic [10:0] _003__X ;
  logic [13:0] _003__S ;
  logic _004_;
  logic _004__T ;
  logic _004__R ;
  logic _004__C ;
  logic _004__X ;
  logic [13:0] _004__S ;
  logic _005_;
  logic _005__T ;
  logic _005__R ;
  logic _005__C ;
  logic _005__X ;
  logic [13:0] _005__S ;
  logic _006_;
  logic _006__T ;
  logic _006__R ;
  logic _006__C ;
  logic _006__X ;
  logic [13:0] _006__S ;
  logic _007_;
  logic _007__T ;
  logic _007__R ;
  logic _007__C ;
  logic _007__X ;
  logic [13:0] _007__S ;
  logic _008_;
  logic _008__T ;
  logic _008__R ;
  logic _008__C ;
  logic _008__X ;
  logic [13:0] _008__S ;
  logic _009_;
  logic _009__T ;
  logic _009__R ;
  logic _009__C ;
  logic _009__X ;
  logic [13:0] _009__S ;
  logic _010_;
  logic _010__T ;
  logic _010__R ;
  logic _010__C ;
  logic _010__X ;
  logic [13:0] _010__S ;
  logic _011_;
  logic _011__T ;
  logic _011__R ;
  logic _011__C ;
  logic _011__X ;
  logic [13:0] _011__S ;
  logic _012_;
  logic _012__T ;
  logic _012__R ;
  logic _012__C ;
  logic _012__X ;
  logic [13:0] _012__S ;
  logic _013_;
  logic _013__T ;
  logic _013__R ;
  logic _013__C ;
  logic _013__X ;
  logic [13:0] _013__S ;
  logic [8:0] _014_;
  logic [8:0] _014__T ;
  logic [8:0] _014__R ;
  logic [8:0] _014__C ;
  logic [8:0] _014__X ;
  logic [13:0] _014__S ;
  logic [8:0] _015_;
  logic [8:0] _015__T ;
  logic [8:0] _015__R ;
  logic [8:0] _015__C ;
  logic [8:0] _015__X ;
  logic [13:0] _015__S ;
  logic [10:0] _016_;
  logic [10:0] _016__T ;
  logic [10:0] _016__R ;
  logic [10:0] _016__C ;
  logic [10:0] _016__X ;
  logic [13:0] _016__S ;
  logic [10:0] _017_;
  logic [10:0] _017__T ;
  logic [10:0] _017__R ;
  logic [10:0] _017__C ;
  logic [10:0] _017__X ;
  logic [13:0] _017__S ;
  logic _018_;
  logic _018__T ;
  logic _018__R ;
  logic _018__C ;
  logic _018__X ;
  logic [13:0] _018__S ;
  logic _019_;
  logic _019__T ;
  logic _019__R ;
  logic _019__C ;
  logic _019__X ;
  logic [13:0] _019__S ;
  logic _020_;
  logic _020__T ;
  logic _020__R ;
  logic _020__C ;
  logic _020__X ;
  logic [13:0] _020__S ;
  logic _021_;
  logic _021__T ;
  logic _021__R ;
  logic _021__C ;
  logic _021__X ;
  logic [13:0] _021__S ;
  logic _022_;
  logic _022__T ;
  logic _022__R ;
  logic _022__C ;
  logic _022__X ;
  logic [13:0] _022__S ;
  logic _023_;
  logic _023__T ;
  logic _023__R ;
  logic _023__C ;
  logic _023__X ;
  logic [13:0] _023__S ;
  logic _024_;
  logic _024__T ;
  logic _024__R ;
  logic _024__C ;
  logic _024__X ;
  logic [13:0] _024__S ;
  logic _025_;
  logic _025__T ;
  logic _025__R ;
  logic _025__C ;
  logic _025__X ;
  logic [13:0] _025__S ;
  logic _026_;
  logic _026__T ;
  logic _026__R ;
  logic _026__C ;
  logic _026__X ;
  logic [13:0] _026__S ;
  logic _027_;
  logic _027__T ;
  logic _027__R ;
  logic _027__C ;
  logic _027__X ;
  logic [13:0] _027__S ;
  logic _028_;
  logic _028__T ;
  logic _028__R ;
  logic _028__C ;
  logic _028__X ;
  logic [13:0] _028__S ;
  logic _029_;
  logic _029__T ;
  logic _029__R ;
  logic _029__C ;
  logic _029__X ;
  logic [13:0] _029__S ;
  logic _030_;
  logic _030__T ;
  logic _030__R ;
  logic _030__C ;
  logic _030__X ;
  logic [13:0] _030__S ;
  logic [8:0] _031_;
  logic [8:0] _031__T ;
  logic [8:0] _031__R ;
  logic [8:0] _031__C ;
  logic [8:0] _031__X ;
  logic [13:0] _031__S ;
  logic _032_;
  logic _032__T ;
  logic _032__R ;
  logic _032__C ;
  logic _032__X ;
  logic [13:0] _032__S ;
  logic _033_;
  logic _033__T ;
  logic _033__R ;
  logic _033__C ;
  logic _033__X ;
  logic [13:0] _033__S ;
  logic _034_;
  logic _034__T ;
  logic _034__R ;
  logic _034__C ;
  logic _034__X ;
  logic [13:0] _034__S ;
  logic _035_;
  logic _035__T ;
  logic _035__R ;
  logic _035__C ;
  logic _035__X ;
  logic [13:0] _035__S ;
  logic [10:0] _036_;
  logic [10:0] _036__T ;
  logic [10:0] _036__R ;
  logic [10:0] _036__C ;
  logic [10:0] _036__X ;
  logic [13:0] _036__S ;
  logic [10:0] _037_;
  logic [10:0] _037__T ;
  logic [10:0] _037__R ;
  logic [10:0] _037__C ;
  logic [10:0] _037__X ;
  logic [13:0] _037__S ;
  logic [10:0] _038_;
  logic [10:0] _038__T ;
  logic [10:0] _038__R ;
  logic [10:0] _038__C ;
  logic [10:0] _038__X ;
  logic [13:0] _038__S ;
  logic [10:0] _039_;
  logic [10:0] _039__T ;
  logic [10:0] _039__R ;
  logic [10:0] _039__C ;
  logic [10:0] _039__X ;
  logic [13:0] _039__S ;
  logic [10:0] _040_;
  logic [10:0] _040__T ;
  logic [10:0] _040__R ;
  logic [10:0] _040__C ;
  logic [10:0] _040__X ;
  logic [13:0] _040__S ;
  logic [10:0] _041_;
  logic [10:0] _041__T ;
  logic [10:0] _041__R ;
  logic [10:0] _041__C ;
  logic [10:0] _041__X ;
  logic [13:0] _041__S ;
  logic [8:0] ADR;
  logic [8:0] ADR_T ;
  logic [8:0] ADR_R ;
  logic [8:0] ADR_C ;
  logic [8:0] ADR_X ;
  logic [13:0] ADR_S ;
  logic [10:0] BADBIT;
  logic [10:0] BADBIT_T ;
  logic [10:0] BADBIT_R ;
  logic [10:0] BADBIT_C ;
  logic [10:0] BADBIT_X ;
  logic [13:0] BADBIT_S ;
  logic CAPT_DIS;
  logic CAPT_DIS_T ;
  logic CAPT_DIS_R ;
  logic CAPT_DIS_C ;
  logic CAPT_DIS_X ;
  logic [13:0] CAPT_DIS_S ;
  logic CLAMPB;
  logic CLAMPB_T ;
  logic CLAMPB_R ;
  logic CLAMPB_C ;
  logic CLAMPB_X ;
  logic [13:0] CLAMPB_S ;
  input CLK;
  input CLK_T ;
  input [13:0] CLK_S ;
  output CLK_R ;
  output CLK_X ;
  output CLK_C ;
  input IDDQ;
  input IDDQ_T ;
  input [13:0] IDDQ_S ;
  output IDDQ_R ;
  output IDDQ_X ;
  output IDDQ_C ;
  logic [511:0] PDEC0;
  logic [511:0] PDEC0_T ;
  logic [511:0] PDEC0_R ;
  logic [511:0] PDEC0_C ;
  logic [511:0] PDEC0_X ;
  logic [13:0] PDEC0_S ;
  logic [511:0] PDEC1;
  logic [511:0] PDEC1_T ;
  logic [511:0] PDEC1_R ;
  logic [511:0] PDEC1_C ;
  logic [511:0] PDEC1_X ;
  logic [13:0] PDEC1_S ;
  logic [511:0] PDEC2;
  logic [511:0] PDEC2_T ;
  logic [511:0] PDEC2_R ;
  logic [511:0] PDEC2_C ;
  logic [511:0] PDEC2_X ;
  logic [13:0] PDEC2_S ;
  input [8:0] RA;
  input [8:0] RA_T ;
  input [13:0] RA_S ;
  output [8:0] RA_R ;
  output [8:0] RA_X ;
  output [8:0] RA_C ;
  logic [8:0] RADR;
  logic [8:0]  RADR_T ;
  logic [8:0]  RADR_PREV_VAL1 ;
  logic [8:0]  RADR_PREV_VAL2 ;
  logic [8:0]  RADR_R ;
  logic [8:0]  RADR_X ;
  logic [8:0]  RADR_C ;
  logic [13:0] RADR_S ;
  logic RADR_t_flag ;
  logic RADR_r_flag ;
  logic RADRCLK;
  logic RADRCLK_T ;
  logic RADRCLK_R ;
  logic RADRCLK_C ;
  logic RADRCLK_X ;
  logic [13:0] RADRCLK_S ;
  logic [8:0] RADRSWI;
  logic [8:0] RADRSWI_T ;
  logic [8:0] RADRSWI_R ;
  logic [8:0] RADRSWI_C ;
  logic [8:0] RADRSWI_X ;
  logic [13:0] RADRSWI_S ;
  output [10:0] RD;
  logic [10:0] RD ;
  output [10:0] RD_T ;
  logic [10:0] RD_T ;
  logic [10:0] RD_R ;
  logic [10:0] RD_C ;
  logic [10:0] RD_X ;
  logic [13:0] RD_S ;
  input [10:0] RD_R0 ;
  input [10:0] RD_C0 ;
  input [10:0] RD_X0 ;
  output [13:0] RD_S ;
  logic RDBYP;
  logic RDBYP_T ;
  logic RDBYP_R ;
  logic RDBYP_C ;
  logic RDBYP_X ;
  logic [13:0] RDBYP_S ;
  logic [10:0] RDBYPASS;
  logic [10:0] RDBYPASS_T ;
  logic [10:0] RDBYPASS_R ;
  logic [10:0] RDBYPASS_C ;
  logic [10:0] RDBYPASS_X ;
  logic [13:0] RDBYPASS_S ;
  input RE;
  input RE_T ;
  input [13:0] RE_S ;
  output RE_R ;
  output RE_X ;
  output RE_C ;
  logic RECLK;
  logic RECLK_T ;
  logic RECLK_R ;
  logic RECLK_C ;
  logic RECLK_X ;
  logic [13:0] RECLK_S ;
  input RET_EN;
  input RET_EN_T ;
  input [13:0] RET_EN_S ;
  output RET_EN_R ;
  output RET_EN_X ;
  output RET_EN_C ;
  logic RE_LATB;
  logic  RE_LATB_T ;
  logic  RE_LATB_PREV_VAL1 ;
  logic  RE_LATB_PREV_VAL2 ;
  logic  RE_LATB_R ;
  logic  RE_LATB_X ;
  logic  RE_LATB_C ;
  logic [13:0] RE_LATB_S ;
  logic RE_LATB_t_flag ;
  logic RE_LATB_r_flag ;
  logic RWSEL;
  logic RWSEL_T ;
  logic RWSEL_R ;
  logic RWSEL_C ;
  logic RWSEL_X ;
  logic [13:0] RWSEL_S ;
  logic RdClk0;
  logic RdClk0_T ;
  logic RdClk0_R ;
  logic RdClk0_C ;
  logic RdClk0_X ;
  logic [13:0] RdClk0_S ;
  logic RdClk1;
  logic RdClk1_T ;
  logic RdClk1_R ;
  logic RdClk1_C ;
  logic RdClk1_X ;
  logic [13:0] RdClk1_S ;
  logic RdClk2;
  logic RdClk2_T ;
  logic RdClk2_R ;
  logic RdClk2_C ;
  logic RdClk2_X ;
  logic [13:0] RdClk2_S ;
  logic RdClk3;
  logic RdClk3_T ;
  logic RdClk3_R ;
  logic RdClk3_C ;
  logic RdClk3_X ;
  logic [13:0] RdClk3_S ;
  logic [10:0] SHFT;
  logic [10:0] SHFT_T ;
  logic [10:0] SHFT_R ;
  logic [10:0] SHFT_C ;
  logic [10:0] SHFT_X ;
  logic [13:0] SHFT_S ;
  input [7:0] SLEEP_EN;
  input [7:0] SLEEP_EN_T ;
  input [13:0] SLEEP_EN_S ;
  output [7:0] SLEEP_EN_R ;
  output [7:0] SLEEP_EN_X ;
  output [7:0] SLEEP_EN_C ;
  input [7:0] SVOP;
  input [7:0] SVOP_T ;
  input [13:0] SVOP_S ;
  output [7:0] SVOP_R ;
  output [7:0] SVOP_X ;
  output [7:0] SVOP_C ;
  input [8:0] WA;
  input [8:0] WA_T ;
  input [13:0] WA_S ;
  output [8:0] WA_R ;
  output [8:0] WA_X ;
  output [8:0] WA_C ;
  logic WADRCLK;
  logic WADRCLK_T ;
  logic WADRCLK_R ;
  logic WADRCLK_C ;
  logic WADRCLK_X ;
  logic [13:0] WADRCLK_S ;
  logic [8:0] WAFF;
  logic [8:0]  WAFF_T ;
  logic [8:0]  WAFF_PREV_VAL1 ;
  logic [8:0]  WAFF_PREV_VAL2 ;
  logic [8:0]  WAFF_R ;
  logic [8:0]  WAFF_X ;
  logic [8:0]  WAFF_C ;
  logic [13:0] WAFF_S ;
  logic WAFF_t_flag ;
  logic WAFF_r_flag ;
  assign WAFF_S = 137 ;
  input [10:0] WD;
  input [10:0] WD_T ;
  input [13:0] WD_S ;
  output [10:0] WD_R ;
  output [10:0] WD_X ;
  output [10:0] WD_C ;
  logic [10:0] WDBQ;
  logic [10:0] WDBQ_T ;
  logic [10:0] WDBQ_R ;
  logic [10:0] WDBQ_C ;
  logic [10:0] WDBQ_X ;
  logic [13:0] WDBQ_S ;
  logic [10:0] WDBQ_pr;
  logic [10:0] WDBQ_pr_T ;
  logic [10:0] WDBQ_pr_R ;
  logic [10:0] WDBQ_pr_C ;
  logic [10:0] WDBQ_pr_X ;
  logic [13:0] WDBQ_pr_S ;
  logic [10:0] WDQ;
  logic [10:0] WDQ_T ;
  logic [10:0] WDQ_R ;
  logic [10:0] WDQ_C ;
  logic [10:0] WDQ_X ;
  logic [13:0] WDQ_S ;
  logic [10:0] WDQ_pr;
  logic [10:0]  WDQ_pr_T ;
  logic [10:0]  WDQ_pr_PREV_VAL1 ;
  logic [10:0]  WDQ_pr_PREV_VAL2 ;
  logic [10:0]  WDQ_pr_R ;
  logic [10:0]  WDQ_pr_X ;
  logic [10:0]  WDQ_pr_C ;
  logic [13:0] WDQ_pr_S ;
  logic WDQ_pr_t_flag ;
  logic WDQ_pr_r_flag ;
  assign WDQ_pr_S = 138 ;
  input WE;
  input WE_T ;
  input [13:0] WE_S ;
  output WE_R ;
  output WE_X ;
  output WE_C ;
  logic WECLK;
  logic WECLK_T ;
  logic WECLK_R ;
  logic WECLK_C ;
  logic WECLK_X ;
  logic [13:0] WECLK_S ;
  logic WE_FF;
  logic  WE_FF_T ;
  logic  WE_FF_PREV_VAL1 ;
  logic  WE_FF_PREV_VAL2 ;
  logic  WE_FF_R ;
  logic  WE_FF_X ;
  logic  WE_FF_C ;
  logic [13:0] WE_FF_S ;
  logic WE_FF_t_flag ;
  logic WE_FF_r_flag ;
  logic WE_LATB;
  logic  WE_LATB_T ;
  logic  WE_LATB_PREV_VAL1 ;
  logic  WE_LATB_PREV_VAL2 ;
  logic  WE_LATB_R ;
  logic  WE_LATB_X ;
  logic  WE_LATB_C ;
  logic [13:0] WE_LATB_S ;
  logic WE_LATB_t_flag ;
  logic WE_LATB_r_flag ;
  logic [10:0] WMNQ;
  logic [10:0] WMNQ_T ;
  logic [10:0] WMNQ_R ;
  logic [10:0] WMNQ_C ;
  logic [10:0] WMNQ_X ;
  logic [13:0] WMNQ_S ;
  logic [10:0] WMNexp;
  logic [10:0] WMNexp_T ;
  logic [10:0] WMNexp_R ;
  logic [10:0] WMNexp_C ;
  logic [10:0] WMNexp_X ;
  logic [13:0] WMNexp_S ;
  logic WRDCLK;
  logic WRDCLK_T ;
  logic WRDCLK_R ;
  logic WRDCLK_C ;
  logic WRDCLK_X ;
  logic [13:0] WRDCLK_S ;
  logic WrClk0;
  logic WrClk0_T ;
  logic WrClk0_R ;
  logic WrClk0_C ;
  logic WrClk0_X ;
  logic [13:0] WrClk0_S ;
  logic WrClk1;
  logic WrClk1_T ;
  logic WrClk1_R ;
  logic WrClk1_C ;
  logic WrClk1_X ;
  logic [13:0] WrClk1_S ;
  logic WrClk2;
  logic WrClk2_T ;
  logic WrClk2_R ;
  logic WrClk2_C ;
  logic WrClk2_X ;
  logic [13:0] WrClk2_S ;
  logic WrClk3;
  logic WrClk3_T ;
  logic WrClk3_R ;
  logic WrClk3_C ;
  logic WrClk3_X ;
  logic [13:0] WrClk3_S ;
  input clobber_array;
  input clobber_array_T ;
  input [13:0] clobber_array_S ;
  output clobber_array_R ;
  output clobber_array_X ;
  output clobber_array_C ;
  input clobber_flops;
  input clobber_flops_T ;
  input [13:0] clobber_flops_S ;
  output clobber_flops_R ;
  output clobber_flops_X ;
  output clobber_flops_C ;
  logic [10:0] dout;
  logic [10:0]  dout_T ;
  logic [10:0]  dout_PREV_VAL1 ;
  logic [10:0]  dout_PREV_VAL2 ;
  logic [10:0]  dout_R ;
  logic [10:0]  dout_X ;
  logic [10:0]  dout_C ;
  logic [13:0] dout_S ;
  logic dout_t_flag ;
  logic dout_r_flag ;
  logic [10:0] dout0;
  logic [10:0] dout0_T ;
  logic [10:0] dout0_R ;
  logic [10:0] dout0_C ;
  logic [10:0] dout0_X ;
  logic [13:0] dout0_S ;
  logic [10:0] dout1;
  logic [10:0] dout1_T ;
  logic [10:0] dout1_R ;
  logic [10:0] dout1_C ;
  logic [10:0] dout1_X ;
  logic [13:0] dout1_S ;
  logic [10:0] dout2;
  logic [10:0] dout2_T ;
  logic [10:0] dout2_R ;
  logic [10:0] dout2_C ;
  logic [10:0] dout2_X ;
  logic [13:0] dout2_S ;
  logic [10:0] dout3;
  logic [10:0] dout3_T ;
  logic [10:0] dout3_R ;
  logic [10:0] dout3_C ;
  logic [10:0] dout3_X ;
  logic [13:0] dout3_S ;
  logic empadd;
  logic empadd_T ;
  logic empadd_R ;
  logic empadd_C ;
  logic empadd_X ;
  logic [13:0] empadd_S ;
  logic [10:0] force_x;
  logic [10:0] force_x_T ;
  logic [10:0] force_x_R ;
  logic [10:0] force_x_C ;
  logic [10:0] force_x_X ;
  logic [13:0] force_x_S ;
  logic [7:0] fusePDEC0;
  logic [7:0] fusePDEC0_T ;
  logic [7:0] fusePDEC0_R ;
  logic [7:0] fusePDEC0_C ;
  logic [7:0] fusePDEC0_X ;
  logic [13:0] fusePDEC0_S ;
  logic [7:0] fusePDEC1;
  logic [7:0] fusePDEC1_T ;
  logic [7:0] fusePDEC1_R ;
  logic [7:0] fusePDEC1_C ;
  logic [7:0] fusePDEC1_X ;
  logic [13:0] fusePDEC1_S ;
  logic [7:0] fusePDEC2;
  logic [7:0] fusePDEC2_T ;
  logic [7:0] fusePDEC2_R ;
  logic [7:0] fusePDEC2_C ;
  logic [7:0] fusePDEC2_X ;
  logic [13:0] fusePDEC2_S ;
  logic fuseien;
  logic fuseien_T ;
  logic fuseien_R ;
  logic fuseien_C ;
  logic fuseien_X ;
  logic [13:0] fuseien_S ;
  logic latffclk;
  logic latffclk_T ;
  logic latffclk_R ;
  logic latffclk_C ;
  logic latffclk_X ;
  logic [13:0] latffclk_S ;
  logic legal;
  logic legal_T ;
  logic legal_R ;
  logic legal_C ;
  logic legal_X ;
  logic [13:0] legal_S ;
  logic re_se;
  logic re_se_T ;
  logic re_se_R ;
  logic re_se_C ;
  logic re_se_X ;
  logic [13:0] re_se_S ;
  logic [10:0] rmuxd0;
  logic [10:0] rmuxd0_T ;
  logic [10:0] rmuxd0_R ;
  logic [10:0] rmuxd0_C ;
  logic [10:0] rmuxd0_X ;
  logic [13:0] rmuxd0_S ;
  logic [10:0] rmuxd1;
  logic [10:0] rmuxd1_T ;
  logic [10:0] rmuxd1_R ;
  logic [10:0] rmuxd1_C ;
  logic [10:0] rmuxd1_X ;
  logic [13:0] rmuxd1_S ;
  logic [10:0] rmuxd2;
  logic [10:0] rmuxd2_T ;
  logic [10:0] rmuxd2_R ;
  logic [10:0] rmuxd2_C ;
  logic [10:0] rmuxd2_X ;
  logic [13:0] rmuxd2_S ;
  logic [10:0] rmuxd3;
  logic [10:0] rmuxd3_T ;
  logic [10:0] rmuxd3_R ;
  logic [10:0] rmuxd3_C ;
  logic [10:0] rmuxd3_X ;
  logic [13:0] rmuxd3_S ;
  logic [10:0] sel_normal;
  logic [10:0] sel_normal_T ;
  logic [10:0] sel_normal_R ;
  logic [10:0] sel_normal_C ;
  logic [10:0] sel_normal_X ;
  logic [13:0] sel_normal_S ;
  logic [10:0] sel_redun;
  logic [10:0] sel_redun_T ;
  logic [10:0] sel_redun_R ;
  logic [10:0] sel_redun_C ;
  logic [10:0] sel_redun_X ;
  logic [13:0] sel_redun_S ;
  logic tiedvalid;
  logic tiedvalid_T ;
  logic tiedvalid_R ;
  logic tiedvalid_C ;
  logic tiedvalid_X ;
  logic [13:0] tiedvalid_S ;
  logic we_se;
  logic we_se_T ;
  logic we_se_R ;
  logic we_se_C ;
  logic we_se_X ;
  logic [13:0] we_se_S ;
  assign _004_ = _026_ & _027_;
  assign _004__S = 0 ;
  logic [0:0] _026__C0 ;
  logic [0:0] _026__R0 ;
  logic [0:0] _026__X0 ;
  logic [0:0] _027__C0 ;
  logic [0:0] _027__R0 ;
  logic [0:0] _027__X0 ;
  assign _004__T = _026__T | _027__T ;
  assign _026__C0 = _004__C ;
  assign _026__X0 = _004__X ;
  assign _027__C0 = _004__C ;
  assign _027__X0 = _004__X ;
  assign _026__R0 = ( _004__R | _004__C & _027__T ) & { 1{ _027_ != 0 }} ;
  assign _027__R0 = ( _004__R | _004__C & _026__T ) & { 1{ _026_ != 0 }} ;
  assign _005_ = CLK & _027_;
  assign _005__S = 0 ;
  logic [0:0] CLK_C0 ;
  logic [0:0] CLK_R0 ;
  logic [0:0] CLK_X0 ;
  logic [0:0] _027__C1 ;
  logic [0:0] _027__R1 ;
  logic [0:0] _027__X1 ;
  assign _005__T = CLK_T | _027__T ;
  assign CLK_C0 = _005__C ;
  assign CLK_X0 = _005__X ;
  assign _027__C1 = _005__C ;
  assign _027__X1 = _005__X ;
  assign CLK_R0 = ( _005__R | _005__C & _027__T ) & { 1{ _027_ != 0 }} ;
  assign _027__R1 = ( _005__R | _005__C & CLK_T ) & { 1{ CLK != 0 }} ;
  assign _006_ = we_se & CLK;
  assign _006__S = 0 ;
  logic [0:0] we_se_C0 ;
  logic [0:0] we_se_R0 ;
  logic [0:0] we_se_X0 ;
  logic [0:0] CLK_C1 ;
  logic [0:0] CLK_R1 ;
  logic [0:0] CLK_X1 ;
  assign _006__T = we_se_T | CLK_T ;
  assign we_se_C0 = _006__C ;
  assign we_se_X0 = _006__X ;
  assign CLK_C1 = _006__C ;
  assign CLK_X1 = _006__X ;
  assign we_se_R0 = ( _006__R | _006__C & CLK_T ) & { 1{ CLK != 0 }} ;
  assign CLK_R1 = ( _006__R | _006__C & we_se_T ) & { 1{ we_se != 0 }} ;
  assign WADRCLK = _006_ & _027_;
  assign WADRCLK_S = 0 ;
  logic [0:0] _006__C0 ;
  logic [0:0] _006__R0 ;
  logic [0:0] _006__X0 ;
  logic [0:0] _027__C2 ;
  logic [0:0] _027__R2 ;
  logic [0:0] _027__X2 ;
  assign WADRCLK_T = _006__T | _027__T ;
  assign _006__C0 = WADRCLK_C ;
  assign _006__X0 = WADRCLK_X ;
  assign _027__C2 = WADRCLK_C ;
  assign _027__X2 = WADRCLK_X ;
  assign _006__R0 = ( WADRCLK_R | WADRCLK_C & _027__T ) & { 1{ _027_ != 0 }} ;
  assign _027__R2 = ( WADRCLK_R | WADRCLK_C & _006__T ) & { 1{ _006_ != 0 }} ;
  assign RADRCLK = re_se & CLK;
  assign RADRCLK_S = 0 ;
  logic [0:0] re_se_C0 ;
  logic [0:0] re_se_R0 ;
  logic [0:0] re_se_X0 ;
  logic [0:0] CLK_C2 ;
  logic [0:0] CLK_R2 ;
  logic [0:0] CLK_X2 ;
  assign RADRCLK_T = re_se_T | CLK_T ;
  assign re_se_C0 = RADRCLK_C ;
  assign re_se_X0 = RADRCLK_X ;
  assign CLK_C2 = RADRCLK_C ;
  assign CLK_X2 = RADRCLK_X ;
  assign re_se_R0 = ( RADRCLK_R | RADRCLK_C & CLK_T ) & { 1{ CLK != 0 }} ;
  assign CLK_R2 = ( RADRCLK_R | RADRCLK_C & re_se_T ) & { 1{ re_se != 0 }} ;
  assign _007_ = re_se & CLAMPB;
  assign _007__S = 0 ;
  logic [0:0] re_se_C1 ;
  logic [0:0] re_se_R1 ;
  logic [0:0] re_se_X1 ;
  logic [0:0] CLAMPB_C0 ;
  logic [0:0] CLAMPB_R0 ;
  logic [0:0] CLAMPB_X0 ;
  assign _007__T = re_se_T | CLAMPB_T ;
  assign re_se_C1 = _007__C ;
  assign re_se_X1 = _007__X ;
  assign CLAMPB_C0 = _007__C ;
  assign CLAMPB_X0 = _007__X ;
  assign re_se_R1 = ( _007__R | _007__C & CLAMPB_T ) & { 1{ CLAMPB != 0 }} ;
  assign CLAMPB_R0 = ( _007__R | _007__C & re_se_T ) & { 1{ re_se != 0 }} ;
  assign _008_ = _007_ & _027_;
  assign _008__S = 0 ;
  logic [0:0] _007__C0 ;
  logic [0:0] _007__R0 ;
  logic [0:0] _007__X0 ;
  logic [0:0] _027__C3 ;
  logic [0:0] _027__R3 ;
  logic [0:0] _027__X3 ;
  assign _008__T = _007__T | _027__T ;
  assign _007__C0 = _008__C ;
  assign _007__X0 = _008__X ;
  assign _027__C3 = _008__C ;
  assign _027__X3 = _008__X ;
  assign _007__R0 = ( _008__R | _008__C & _027__T ) & { 1{ _027_ != 0 }} ;
  assign _027__R3 = ( _008__R | _008__C & _007__T ) & { 1{ _007_ != 0 }} ;
  assign _009_ = _008_ & _028_;
  assign _009__S = 0 ;
  logic [0:0] _008__C0 ;
  logic [0:0] _008__R0 ;
  logic [0:0] _008__X0 ;
  logic [0:0] _028__C0 ;
  logic [0:0] _028__R0 ;
  logic [0:0] _028__X0 ;
  assign _009__T = _008__T | _028__T ;
  assign _008__C0 = _009__C ;
  assign _008__X0 = _009__X ;
  assign _028__C0 = _009__C ;
  assign _028__X0 = _009__X ;
  assign _008__R0 = ( _009__R | _009__C & _028__T ) & { 1{ _028_ != 0 }} ;
  assign _028__R0 = ( _009__R | _009__C & _008__T ) & { 1{ _008_ != 0 }} ;
  assign RECLK = _009_ & CLK;
  assign RECLK_S = 0 ;
  logic [0:0] _009__C0 ;
  logic [0:0] _009__R0 ;
  logic [0:0] _009__X0 ;
  logic [0:0] CLK_C3 ;
  logic [0:0] CLK_R3 ;
  logic [0:0] CLK_X3 ;
  assign RECLK_T = _009__T | CLK_T ;
  assign _009__C0 = RECLK_C ;
  assign _009__X0 = RECLK_X ;
  assign CLK_C3 = RECLK_C ;
  assign CLK_X3 = RECLK_X ;
  assign _009__R0 = ( RECLK_R | RECLK_C & CLK_T ) & { 1{ CLK != 0 }} ;
  assign CLK_R3 = ( RECLK_R | RECLK_C & _009__T ) & { 1{ _009_ != 0 }} ;
  assign _010_ = WE_FF & CLAMPB;
  assign _010__S = 0 ;
  logic [0:0] WE_FF_C0 ;
  logic [0:0] WE_FF_R0 ;
  logic [0:0] WE_FF_X0 ;
  logic [0:0] CLAMPB_C1 ;
  logic [0:0] CLAMPB_R1 ;
  logic [0:0] CLAMPB_X1 ;
  assign _010__T = WE_FF_T | CLAMPB_T ;
  assign WE_FF_C0 = _010__C ;
  assign WE_FF_X0 = _010__X ;
  assign CLAMPB_C1 = _010__C ;
  assign CLAMPB_X1 = _010__X ;
  assign WE_FF_R0 = ( _010__R | _010__C & CLAMPB_T ) & { 1{ CLAMPB != 0 }} ;
  assign CLAMPB_R1 = ( _010__R | _010__C & WE_FF_T ) & { 1{ WE_FF != 0 }} ;
  assign _011_ = _010_ & _027_;
  assign _011__S = 0 ;
  logic [0:0] _010__C0 ;
  logic [0:0] _010__R0 ;
  logic [0:0] _010__X0 ;
  logic [0:0] _027__C4 ;
  logic [0:0] _027__R4 ;
  logic [0:0] _027__X4 ;
  assign _011__T = _010__T | _027__T ;
  assign _010__C0 = _011__C ;
  assign _010__X0 = _011__X ;
  assign _027__C4 = _011__C ;
  assign _027__X4 = _011__X ;
  assign _010__R0 = ( _011__R | _011__C & _027__T ) & { 1{ _027_ != 0 }} ;
  assign _027__R4 = ( _011__R | _011__C & _010__T ) & { 1{ _010_ != 0 }} ;
  assign _012_ = _011_ & _028_;
  assign _012__S = 0 ;
  logic [0:0] _011__C0 ;
  logic [0:0] _011__R0 ;
  logic [0:0] _011__X0 ;
  logic [0:0] _028__C1 ;
  logic [0:0] _028__R1 ;
  logic [0:0] _028__X1 ;
  assign _012__T = _011__T | _028__T ;
  assign _011__C0 = _012__C ;
  assign _011__X0 = _012__X ;
  assign _028__C1 = _012__C ;
  assign _028__X1 = _012__X ;
  assign _011__R0 = ( _012__R | _012__C & _028__T ) & { 1{ _028_ != 0 }} ;
  assign _028__R1 = ( _012__R | _012__C & _011__T ) & { 1{ _011_ != 0 }} ;
  assign WECLK = _012_ & _030_;
  assign WECLK_S = 0 ;
  logic [0:0] _012__C0 ;
  logic [0:0] _012__R0 ;
  logic [0:0] _012__X0 ;
  logic [0:0] _030__C0 ;
  logic [0:0] _030__R0 ;
  logic [0:0] _030__X0 ;
  assign WECLK_T = _012__T | _030__T ;
  assign _012__C0 = WECLK_C ;
  assign _012__X0 = WECLK_X ;
  assign _030__C0 = WECLK_C ;
  assign _030__X0 = WECLK_X ;
  assign _012__R0 = ( WECLK_R | WECLK_C & _030__T ) & { 1{ _030_ != 0 }} ;
  assign _030__R0 = ( WECLK_R | WECLK_C & _012__T ) & { 1{ _012_ != 0 }} ;
  assign RWSEL = _010_ & _030_;
  assign RWSEL_S = 0 ;
  logic [0:0] _010__C1 ;
  logic [0:0] _010__R1 ;
  logic [0:0] _010__X1 ;
  logic [0:0] _030__C1 ;
  logic [0:0] _030__R1 ;
  logic [0:0] _030__X1 ;
  assign RWSEL_T = _010__T | _030__T ;
  assign _010__C1 = RWSEL_C ;
  assign _010__X1 = RWSEL_X ;
  assign _030__C1 = RWSEL_C ;
  assign _030__X1 = RWSEL_X ;
  assign _010__R1 = ( RWSEL_R | RWSEL_C & _030__T ) & { 1{ _030_ != 0 }} ;
  assign _030__R1 = ( RWSEL_R | RWSEL_C & _010__T ) & { 1{ _010_ != 0 }} ;
  assign _013_ = _029_ & _027_;
  assign _013__S = 0 ;
  logic [0:0] _029__C0 ;
  logic [0:0] _029__R0 ;
  logic [0:0] _029__X0 ;
  logic [0:0] _027__C5 ;
  logic [0:0] _027__R5 ;
  logic [0:0] _027__X5 ;
  assign _013__T = _029__T | _027__T ;
  assign _029__C0 = _013__C ;
  assign _029__X0 = _013__X ;
  assign _027__C5 = _013__C ;
  assign _027__X5 = _013__X ;
  assign _029__R0 = ( _013__R | _013__C & _027__T ) & { 1{ _027_ != 0 }} ;
  assign _027__R5 = ( _013__R | _013__C & _029__T ) & { 1{ _029_ != 0 }} ;
  logic [8:0] fangyuan0;
  logic [8:0] fangyuan0_T ;
  logic [8:0] fangyuan0_R ;
  logic [8:0] fangyuan0_C ;
  logic [8:0] fangyuan0_X ;
  assign fangyuan0 = { RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL };
  assign fangyuan0_T = {  RWSEL_T , RWSEL_T , RWSEL_T , RWSEL_T , RWSEL_T , RWSEL_T , RWSEL_T , RWSEL_T , RWSEL_T  };
  logic [13:0] fangyuan0_S ;
  assign fangyuan0_S = 0 ;
  logic [0:0] RWSEL_R0 ;
  logic [0:0] RWSEL_X0 ;
  logic [0:0] RWSEL_C0 ;
  assign RWSEL_R0 = fangyuan0_R [8:8] ;
  assign RWSEL_X0 = fangyuan0_X [8:8] ;
  assign RWSEL_C0 = fangyuan0_C [8:8] ;
  logic [0:0] RWSEL_R1 ;
  logic [0:0] RWSEL_X1 ;
  logic [0:0] RWSEL_C1 ;
  assign RWSEL_R1 = fangyuan0_R [7:7] ;
  assign RWSEL_X1 = fangyuan0_X [7:7] ;
  assign RWSEL_C1 = fangyuan0_C [7:7] ;
  logic [0:0] RWSEL_R2 ;
  logic [0:0] RWSEL_X2 ;
  logic [0:0] RWSEL_C2 ;
  assign RWSEL_R2 = fangyuan0_R [6:6] ;
  assign RWSEL_X2 = fangyuan0_X [6:6] ;
  assign RWSEL_C2 = fangyuan0_C [6:6] ;
  logic [0:0] RWSEL_R3 ;
  logic [0:0] RWSEL_X3 ;
  logic [0:0] RWSEL_C3 ;
  assign RWSEL_R3 = fangyuan0_R [5:5] ;
  assign RWSEL_X3 = fangyuan0_X [5:5] ;
  assign RWSEL_C3 = fangyuan0_C [5:5] ;
  logic [0:0] RWSEL_R4 ;
  logic [0:0] RWSEL_X4 ;
  logic [0:0] RWSEL_C4 ;
  assign RWSEL_R4 = fangyuan0_R [4:4] ;
  assign RWSEL_X4 = fangyuan0_X [4:4] ;
  assign RWSEL_C4 = fangyuan0_C [4:4] ;
  logic [0:0] RWSEL_R5 ;
  logic [0:0] RWSEL_X5 ;
  logic [0:0] RWSEL_C5 ;
  assign RWSEL_R5 = fangyuan0_R [3:3] ;
  assign RWSEL_X5 = fangyuan0_X [3:3] ;
  assign RWSEL_C5 = fangyuan0_C [3:3] ;
  logic [0:0] RWSEL_R6 ;
  logic [0:0] RWSEL_X6 ;
  logic [0:0] RWSEL_C6 ;
  assign RWSEL_R6 = fangyuan0_R [2:2] ;
  assign RWSEL_X6 = fangyuan0_X [2:2] ;
  assign RWSEL_C6 = fangyuan0_C [2:2] ;
  logic [0:0] RWSEL_R7 ;
  logic [0:0] RWSEL_X7 ;
  logic [0:0] RWSEL_C7 ;
  assign RWSEL_R7 = fangyuan0_R [1:1] ;
  assign RWSEL_X7 = fangyuan0_X [1:1] ;
  assign RWSEL_C7 = fangyuan0_C [1:1] ;
  logic [0:0] RWSEL_R8 ;
  logic [0:0] RWSEL_X8 ;
  logic [0:0] RWSEL_C8 ;
  assign RWSEL_R8 = fangyuan0_R [0:0] ;
  assign RWSEL_X8 = fangyuan0_X [0:0] ;
  assign RWSEL_C8 = fangyuan0_C [0:0] ;

  assign _014_ = fangyuan0 & WAFF;
  assign _014__S = 0 ;
  logic [8:0] fangyuan0_C0 ;
  logic [8:0] fangyuan0_R0 ;
  logic [8:0] fangyuan0_X0 ;
  logic [8:0] WAFF_C0 ;
  logic [8:0] WAFF_R0 ;
  logic [8:0] WAFF_X0 ;
  assign _014__T = fangyuan0_T | WAFF_T ;
  assign fangyuan0_C0 = _014__C ;
  assign fangyuan0_X0 = _014__X ;
  assign WAFF_C0 = _014__C ;
  assign WAFF_X0 = _014__X ;
  assign fangyuan0_R0 = ( _014__R | _014__C & WAFF_T ) & { 9{ WAFF != 0 }} ;
  assign WAFF_R0 = ( _014__R | _014__C & fangyuan0_T ) & { 9{ fangyuan0 != 0 }} ;
  assign _015_ = _031_ & RADR;
  assign _015__S = 0 ;
  logic [8:0] _031__C0 ;
  logic [8:0] _031__R0 ;
  logic [8:0] _031__X0 ;
  logic [8:0] RADR_C0 ;
  logic [8:0] RADR_R0 ;
  logic [8:0] RADR_X0 ;
  assign _015__T = _031__T | RADR_T ;
  assign _031__C0 = _015__C ;
  assign _031__X0 = _015__X ;
  assign RADR_C0 = _015__C ;
  assign RADR_X0 = _015__X ;
  assign _031__R0 = ( _015__R | _015__C & RADR_T ) & { 9{ RADR != 0 }} ;
  assign RADR_R0 = ( _015__R | _015__C & _031__T ) & { 9{ _031_ != 0 }} ;
  assign _001_ = WD & 11'b11111111111;
  assign _001__S = 0 ;
  logic [10:0] WD_C0 ;
  logic [10:0] WD_R0 ;
  logic [10:0] WD_X0 ;
  assign _001__T = WD_T ;
  assign WD_C0 = _001__C ;
  assign WD_R0 = _001__R ;
  assign WD_X0 = _001__X ;
  assign _016_ = 11'b11111111111 & dout;
  assign _016__S = 0 ;
  logic [10:0] dout_C0 ;
  logic [10:0] dout_R0 ;
  logic [10:0] dout_X0 ;
  assign _016__T = dout_T ;
  assign dout_C0 = _016__C ;
  assign dout_R0 = _016__R ;
  assign dout_X0 = _016__X ;
  assign _017_ = 1'b0 & WDQ_pr;
  assign _017__S = 0 ;
  logic [10:0] WDQ_pr_C0 ;
  logic [10:0] WDQ_pr_R0 ;
  logic [10:0] WDQ_pr_X0 ;
  assign _017__T = WDQ_pr_T ;
  assign WDQ_pr_C0 = _017__C ;
  assign WDQ_pr_R0 = _017__R ;
  assign WDQ_pr_X0 = _017__X ;
  assign _018_ = RECLK & _032_;
  assign _018__S = 0 ;
  logic [0:0] RECLK_C0 ;
  logic [0:0] RECLK_R0 ;
  logic [0:0] RECLK_X0 ;
  logic [0:0] _032__C0 ;
  logic [0:0] _032__R0 ;
  logic [0:0] _032__X0 ;
  assign _018__T = RECLK_T | _032__T ;
  assign RECLK_C0 = _018__C ;
  assign RECLK_X0 = _018__X ;
  assign _032__C0 = _018__C ;
  assign _032__X0 = _018__X ;
  assign RECLK_R0 = ( _018__R | _018__C & _032__T ) & { 1{ _032_ != 0 }} ;
  assign _032__R0 = ( _018__R | _018__C & RECLK_T ) & { 1{ RECLK != 0 }} ;
  assign RdClk0 = _018_ & _033_;
  assign RdClk0_S = 0 ;
  logic [0:0] _018__C0 ;
  logic [0:0] _018__R0 ;
  logic [0:0] _018__X0 ;
  logic [0:0] _033__C0 ;
  logic [0:0] _033__R0 ;
  logic [0:0] _033__X0 ;
  assign RdClk0_T = _018__T | _033__T ;
  assign _018__C0 = RdClk0_C ;
  assign _018__X0 = RdClk0_X ;
  assign _033__C0 = RdClk0_C ;
  assign _033__X0 = RdClk0_X ;
  assign _018__R0 = ( RdClk0_R | RdClk0_C & _033__T ) & { 1{ _033_ != 0 }} ;
  assign _033__R0 = ( RdClk0_R | RdClk0_C & _018__T ) & { 1{ _018_ != 0 }} ;
  assign _019_ = RECLK & RADR[0];
  assign _019__S = 0 ;
  logic [0:0] RECLK_C1 ;
  logic [0:0] RECLK_R1 ;
  logic [0:0] RECLK_X1 ;
  logic [8:0] RADR_C1 ;
  logic [8:0] RADR_R1 ;
  logic [8:0] RADR_X1 ;
  assign _019__T = RECLK_T | RADR_T [0] ;
  assign RECLK_C1 = _019__C ;
  assign RECLK_X1 = _019__X ;
  assign RADR_C1 [0] = _019__C ;
  assign RADR_X1 [0] = _019__X ;
  assign RECLK_R1 = ( _019__R | _019__C & RADR_T [0] ) & { 1{ RADR[0] != 0 }} ;
  assign RADR_R1 [0] = ( _019__R | _019__C & RECLK_T ) & { 1{ RECLK != 0 }} ;
  assign RdClk1 = _019_ & _033_;
  assign RdClk1_S = 0 ;
  logic [0:0] _019__C0 ;
  logic [0:0] _019__R0 ;
  logic [0:0] _019__X0 ;
  logic [0:0] _033__C1 ;
  logic [0:0] _033__R1 ;
  logic [0:0] _033__X1 ;
  assign RdClk1_T = _019__T | _033__T ;
  assign _019__C0 = RdClk1_C ;
  assign _019__X0 = RdClk1_X ;
  assign _033__C1 = RdClk1_C ;
  assign _033__X1 = RdClk1_X ;
  assign _019__R0 = ( RdClk1_R | RdClk1_C & _033__T ) & { 1{ _033_ != 0 }} ;
  assign _033__R1 = ( RdClk1_R | RdClk1_C & _019__T ) & { 1{ _019_ != 0 }} ;
  assign RdClk2 = _018_ & RADR[1];
  assign RdClk2_S = 0 ;
  logic [0:0] _018__C1 ;
  logic [0:0] _018__R1 ;
  logic [0:0] _018__X1 ;
  assign RdClk2_T = _018__T | RADR_T [1] ;
  assign _018__C1 = RdClk2_C ;
  assign _018__X1 = RdClk2_X ;
  assign RADR_C1 [1] = RdClk2_C ;
  assign RADR_X1 [1] = RdClk2_X ;
  assign _018__R1 = ( RdClk2_R | RdClk2_C & RADR_T [1] ) & { 1{ RADR[1] != 0 }} ;
  assign RADR_R1 [1] = ( RdClk2_R | RdClk2_C & _018__T ) & { 1{ _018_ != 0 }} ;
  assign RdClk3 = _019_ & RADR[1];
  assign RdClk3_S = 0 ;
  assign { RADR_R1 [8:2] } = 0;
  assign { RADR_X1 [8:2] } = 0;
  assign { RADR_C1 [8:2] } = 0;
  logic [0:0] _019__C1 ;
  logic [0:0] _019__R1 ;
  logic [0:0] _019__X1 ;
  logic [8:0] RADR_C2 ;
  logic [8:0] RADR_R2 ;
  logic [8:0] RADR_X2 ;
  assign RdClk3_T = _019__T | RADR_T [1] ;
  assign _019__C1 = RdClk3_C ;
  assign _019__X1 = RdClk3_X ;
  assign RADR_C2 [1] = RdClk3_C ;
  assign RADR_X2 [1] = RdClk3_X ;
  assign _019__R1 = ( RdClk3_R | RdClk3_C & RADR_T [1] ) & { 1{ RADR[1] != 0 }} ;
  assign RADR_R2 [1] = ( RdClk3_R | RdClk3_C & _019__T ) & { 1{ _019_ != 0 }} ;
  assign _020_ = WECLK & _034_;
  assign _020__S = 0 ;
  logic [0:0] WECLK_C0 ;
  logic [0:0] WECLK_R0 ;
  logic [0:0] WECLK_X0 ;
  logic [0:0] _034__C0 ;
  logic [0:0] _034__R0 ;
  logic [0:0] _034__X0 ;
  assign _020__T = WECLK_T | _034__T ;
  assign WECLK_C0 = _020__C ;
  assign WECLK_X0 = _020__X ;
  assign _034__C0 = _020__C ;
  assign _034__X0 = _020__X ;
  assign WECLK_R0 = ( _020__R | _020__C & _034__T ) & { 1{ _034_ != 0 }} ;
  assign _034__R0 = ( _020__R | _020__C & WECLK_T ) & { 1{ WECLK != 0 }} ;
  assign _021_ = _020_ & _035_;
  assign _021__S = 0 ;
  logic [0:0] _020__C0 ;
  logic [0:0] _020__R0 ;
  logic [0:0] _020__X0 ;
  logic [0:0] _035__C0 ;
  logic [0:0] _035__R0 ;
  logic [0:0] _035__X0 ;
  assign _021__T = _020__T | _035__T ;
  assign _020__C0 = _021__C ;
  assign _020__X0 = _021__X ;
  assign _035__C0 = _021__C ;
  assign _035__X0 = _021__X ;
  assign _020__R0 = ( _021__R | _021__C & _035__T ) & { 1{ _035_ != 0 }} ;
  assign _035__R0 = ( _021__R | _021__C & _020__T ) & { 1{ _020_ != 0 }} ;
  assign WrClk0 = _021_ & legal;
  assign WrClk0_S = 0 ;
  logic [0:0] _021__C0 ;
  logic [0:0] _021__R0 ;
  logic [0:0] _021__X0 ;
  logic [0:0] legal_C0 ;
  logic [0:0] legal_R0 ;
  logic [0:0] legal_X0 ;
  assign WrClk0_T = _021__T | legal_T ;
  assign _021__C0 = WrClk0_C ;
  assign _021__X0 = WrClk0_X ;
  assign legal_C0 = WrClk0_C ;
  assign legal_X0 = WrClk0_X ;
  assign _021__R0 = ( WrClk0_R | WrClk0_C & legal_T ) & { 1{ legal != 0 }} ;
  assign legal_R0 = ( WrClk0_R | WrClk0_C & _021__T ) & { 1{ _021_ != 0 }} ;
  assign _022_ = WECLK & WAFF[0];
  assign _022__S = 0 ;
  logic [0:0] WECLK_C1 ;
  logic [0:0] WECLK_R1 ;
  logic [0:0] WECLK_X1 ;
  logic [8:0] WAFF_C1 ;
  logic [8:0] WAFF_R1 ;
  logic [8:0] WAFF_X1 ;
  assign _022__T = WECLK_T | WAFF_T [0] ;
  assign WECLK_C1 = _022__C ;
  assign WECLK_X1 = _022__X ;
  assign WAFF_C1 [0] = _022__C ;
  assign WAFF_X1 [0] = _022__X ;
  assign WECLK_R1 = ( _022__R | _022__C & WAFF_T [0] ) & { 1{ WAFF[0] != 0 }} ;
  assign WAFF_R1 [0] = ( _022__R | _022__C & WECLK_T ) & { 1{ WECLK != 0 }} ;
  assign _023_ = _022_ & _035_;
  assign _023__S = 0 ;
  logic [0:0] _022__C0 ;
  logic [0:0] _022__R0 ;
  logic [0:0] _022__X0 ;
  logic [0:0] _035__C1 ;
  logic [0:0] _035__R1 ;
  logic [0:0] _035__X1 ;
  assign _023__T = _022__T | _035__T ;
  assign _022__C0 = _023__C ;
  assign _022__X0 = _023__X ;
  assign _035__C1 = _023__C ;
  assign _035__X1 = _023__X ;
  assign _022__R0 = ( _023__R | _023__C & _035__T ) & { 1{ _035_ != 0 }} ;
  assign _035__R1 = ( _023__R | _023__C & _022__T ) & { 1{ _022_ != 0 }} ;
  assign WrClk1 = _023_ & legal;
  assign WrClk1_S = 0 ;
  logic [0:0] _023__C0 ;
  logic [0:0] _023__R0 ;
  logic [0:0] _023__X0 ;
  logic [0:0] legal_C1 ;
  logic [0:0] legal_R1 ;
  logic [0:0] legal_X1 ;
  assign WrClk1_T = _023__T | legal_T ;
  assign _023__C0 = WrClk1_C ;
  assign _023__X0 = WrClk1_X ;
  assign legal_C1 = WrClk1_C ;
  assign legal_X1 = WrClk1_X ;
  assign _023__R0 = ( WrClk1_R | WrClk1_C & legal_T ) & { 1{ legal != 0 }} ;
  assign legal_R1 = ( WrClk1_R | WrClk1_C & _023__T ) & { 1{ _023_ != 0 }} ;
  assign _024_ = _020_ & WAFF[1];
  assign _024__S = 0 ;
  logic [0:0] _020__C1 ;
  logic [0:0] _020__R1 ;
  logic [0:0] _020__X1 ;
  assign _024__T = _020__T | WAFF_T [1] ;
  assign _020__C1 = _024__C ;
  assign _020__X1 = _024__X ;
  assign WAFF_C1 [1] = _024__C ;
  assign WAFF_X1 [1] = _024__X ;
  assign _020__R1 = ( _024__R | _024__C & WAFF_T [1] ) & { 1{ WAFF[1] != 0 }} ;
  assign WAFF_R1 [1] = ( _024__R | _024__C & _020__T ) & { 1{ _020_ != 0 }} ;
  assign WrClk2 = _024_ & legal;
  assign WrClk2_S = 0 ;
  logic [0:0] _024__C0 ;
  logic [0:0] _024__R0 ;
  logic [0:0] _024__X0 ;
  logic [0:0] legal_C2 ;
  logic [0:0] legal_R2 ;
  logic [0:0] legal_X2 ;
  assign WrClk2_T = _024__T | legal_T ;
  assign _024__C0 = WrClk2_C ;
  assign _024__X0 = WrClk2_X ;
  assign legal_C2 = WrClk2_C ;
  assign legal_X2 = WrClk2_X ;
  assign _024__R0 = ( WrClk2_R | WrClk2_C & legal_T ) & { 1{ legal != 0 }} ;
  assign legal_R2 = ( WrClk2_R | WrClk2_C & _024__T ) & { 1{ _024_ != 0 }} ;
  assign _025_ = _022_ & WAFF[1];
  assign _025__S = 0 ;
  assign { WAFF_R1 [8:2] } = 0;
  assign { WAFF_X1 [8:2] } = 0;
  assign { WAFF_C1 [8:2] } = 0;
  logic [0:0] _022__C1 ;
  logic [0:0] _022__R1 ;
  logic [0:0] _022__X1 ;
  logic [8:0] WAFF_C2 ;
  logic [8:0] WAFF_R2 ;
  logic [8:0] WAFF_X2 ;
  assign _025__T = _022__T | WAFF_T [1] ;
  assign _022__C1 = _025__C ;
  assign _022__X1 = _025__X ;
  assign WAFF_C2 [1] = _025__C ;
  assign WAFF_X2 [1] = _025__X ;
  assign _022__R1 = ( _025__R | _025__C & WAFF_T [1] ) & { 1{ WAFF[1] != 0 }} ;
  assign WAFF_R2 [1] = ( _025__R | _025__C & _022__T ) & { 1{ _022_ != 0 }} ;
  assign WrClk3 = _025_ & legal;
  assign WrClk3_S = 0 ;
  logic [0:0] _025__C0 ;
  logic [0:0] _025__R0 ;
  logic [0:0] _025__X0 ;
  logic [0:0] legal_C3 ;
  logic [0:0] legal_R3 ;
  logic [0:0] legal_X3 ;
  assign WrClk3_T = _025__T | legal_T ;
  assign _025__C0 = WrClk3_C ;
  assign _025__X0 = WrClk3_X ;
  assign legal_C3 = WrClk3_C ;
  assign legal_X3 = WrClk3_X ;
  assign _025__R0 = ( WrClk3_R | WrClk3_C & legal_T ) & { 1{ legal != 0 }} ;
  assign legal_R3 = ( WrClk3_R | WrClk3_C & _025__T ) & { 1{ _025_ != 0 }} ;
  logic [10:0] fangyuan1;
  logic [10:0] fangyuan1_T ;
  logic [10:0] fangyuan1_R ;
  logic [10:0] fangyuan1_C ;
  logic [10:0] fangyuan1_X ;
  assign fangyuan1 = { RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0, RdClk0 };
  assign fangyuan1_T = {  RdClk0_T , RdClk0_T , RdClk0_T , RdClk0_T , RdClk0_T , RdClk0_T , RdClk0_T , RdClk0_T , RdClk0_T , RdClk0_T , RdClk0_T  };
  logic [13:0] fangyuan1_S ;
  assign fangyuan1_S = 0 ;
  logic [0:0] RdClk0_R0 ;
  logic [0:0] RdClk0_X0 ;
  logic [0:0] RdClk0_C0 ;
  assign RdClk0_R0 = fangyuan1_R [10:10] ;
  assign RdClk0_X0 = fangyuan1_X [10:10] ;
  assign RdClk0_C0 = fangyuan1_C [10:10] ;
  logic [0:0] RdClk0_R1 ;
  logic [0:0] RdClk0_X1 ;
  logic [0:0] RdClk0_C1 ;
  assign RdClk0_R1 = fangyuan1_R [9:9] ;
  assign RdClk0_X1 = fangyuan1_X [9:9] ;
  assign RdClk0_C1 = fangyuan1_C [9:9] ;
  logic [0:0] RdClk0_R2 ;
  logic [0:0] RdClk0_X2 ;
  logic [0:0] RdClk0_C2 ;
  assign RdClk0_R2 = fangyuan1_R [8:8] ;
  assign RdClk0_X2 = fangyuan1_X [8:8] ;
  assign RdClk0_C2 = fangyuan1_C [8:8] ;
  logic [0:0] RdClk0_R3 ;
  logic [0:0] RdClk0_X3 ;
  logic [0:0] RdClk0_C3 ;
  assign RdClk0_R3 = fangyuan1_R [7:7] ;
  assign RdClk0_X3 = fangyuan1_X [7:7] ;
  assign RdClk0_C3 = fangyuan1_C [7:7] ;
  logic [0:0] RdClk0_R4 ;
  logic [0:0] RdClk0_X4 ;
  logic [0:0] RdClk0_C4 ;
  assign RdClk0_R4 = fangyuan1_R [6:6] ;
  assign RdClk0_X4 = fangyuan1_X [6:6] ;
  assign RdClk0_C4 = fangyuan1_C [6:6] ;
  logic [0:0] RdClk0_R5 ;
  logic [0:0] RdClk0_X5 ;
  logic [0:0] RdClk0_C5 ;
  assign RdClk0_R5 = fangyuan1_R [5:5] ;
  assign RdClk0_X5 = fangyuan1_X [5:5] ;
  assign RdClk0_C5 = fangyuan1_C [5:5] ;
  logic [0:0] RdClk0_R6 ;
  logic [0:0] RdClk0_X6 ;
  logic [0:0] RdClk0_C6 ;
  assign RdClk0_R6 = fangyuan1_R [4:4] ;
  assign RdClk0_X6 = fangyuan1_X [4:4] ;
  assign RdClk0_C6 = fangyuan1_C [4:4] ;
  logic [0:0] RdClk0_R7 ;
  logic [0:0] RdClk0_X7 ;
  logic [0:0] RdClk0_C7 ;
  assign RdClk0_R7 = fangyuan1_R [3:3] ;
  assign RdClk0_X7 = fangyuan1_X [3:3] ;
  assign RdClk0_C7 = fangyuan1_C [3:3] ;
  logic [0:0] RdClk0_R8 ;
  logic [0:0] RdClk0_X8 ;
  logic [0:0] RdClk0_C8 ;
  assign RdClk0_R8 = fangyuan1_R [2:2] ;
  assign RdClk0_X8 = fangyuan1_X [2:2] ;
  assign RdClk0_C8 = fangyuan1_C [2:2] ;
  logic [0:0] RdClk0_R9 ;
  logic [0:0] RdClk0_X9 ;
  logic [0:0] RdClk0_C9 ;
  assign RdClk0_R9 = fangyuan1_R [1:1] ;
  assign RdClk0_X9 = fangyuan1_X [1:1] ;
  assign RdClk0_C9 = fangyuan1_C [1:1] ;
  logic [0:0] RdClk0_R10 ;
  logic [0:0] RdClk0_X10 ;
  logic [0:0] RdClk0_C10 ;
  assign RdClk0_R10 = fangyuan1_R [0:0] ;
  assign RdClk0_X10 = fangyuan1_X [0:0] ;
  assign RdClk0_C10 = fangyuan1_C [0:0] ;

  assign rmuxd0 = fangyuan1 & _036_;
  assign rmuxd0_S = 0 ;
  logic [10:0] fangyuan1_C0 ;
  logic [10:0] fangyuan1_R0 ;
  logic [10:0] fangyuan1_X0 ;
  logic [10:0] _036__C0 ;
  logic [10:0] _036__R0 ;
  logic [10:0] _036__X0 ;
  assign rmuxd0_T = fangyuan1_T | _036__T ;
  assign fangyuan1_C0 = rmuxd0_C ;
  assign fangyuan1_X0 = rmuxd0_X ;
  assign _036__C0 = rmuxd0_C ;
  assign _036__X0 = rmuxd0_X ;
  assign fangyuan1_R0 = ( rmuxd0_R | rmuxd0_C & _036__T ) & { 11{ _036_ != 0 }} ;
  assign _036__R0 = ( rmuxd0_R | rmuxd0_C & fangyuan1_T ) & { 11{ fangyuan1 != 0 }} ;
  logic [10:0] fangyuan2;
  logic [10:0] fangyuan2_T ;
  logic [10:0] fangyuan2_R ;
  logic [10:0] fangyuan2_C ;
  logic [10:0] fangyuan2_X ;
  assign fangyuan2 = { RdClk1, RdClk1, RdClk1, RdClk1, RdClk1, RdClk1, RdClk1, RdClk1, RdClk1, RdClk1, RdClk1 };
  assign fangyuan2_T = {  RdClk1_T , RdClk1_T , RdClk1_T , RdClk1_T , RdClk1_T , RdClk1_T , RdClk1_T , RdClk1_T , RdClk1_T , RdClk1_T , RdClk1_T  };
  logic [13:0] fangyuan2_S ;
  assign fangyuan2_S = 0 ;
  logic [0:0] RdClk1_R0 ;
  logic [0:0] RdClk1_X0 ;
  logic [0:0] RdClk1_C0 ;
  assign RdClk1_R0 = fangyuan2_R [10:10] ;
  assign RdClk1_X0 = fangyuan2_X [10:10] ;
  assign RdClk1_C0 = fangyuan2_C [10:10] ;
  logic [0:0] RdClk1_R1 ;
  logic [0:0] RdClk1_X1 ;
  logic [0:0] RdClk1_C1 ;
  assign RdClk1_R1 = fangyuan2_R [9:9] ;
  assign RdClk1_X1 = fangyuan2_X [9:9] ;
  assign RdClk1_C1 = fangyuan2_C [9:9] ;
  logic [0:0] RdClk1_R2 ;
  logic [0:0] RdClk1_X2 ;
  logic [0:0] RdClk1_C2 ;
  assign RdClk1_R2 = fangyuan2_R [8:8] ;
  assign RdClk1_X2 = fangyuan2_X [8:8] ;
  assign RdClk1_C2 = fangyuan2_C [8:8] ;
  logic [0:0] RdClk1_R3 ;
  logic [0:0] RdClk1_X3 ;
  logic [0:0] RdClk1_C3 ;
  assign RdClk1_R3 = fangyuan2_R [7:7] ;
  assign RdClk1_X3 = fangyuan2_X [7:7] ;
  assign RdClk1_C3 = fangyuan2_C [7:7] ;
  logic [0:0] RdClk1_R4 ;
  logic [0:0] RdClk1_X4 ;
  logic [0:0] RdClk1_C4 ;
  assign RdClk1_R4 = fangyuan2_R [6:6] ;
  assign RdClk1_X4 = fangyuan2_X [6:6] ;
  assign RdClk1_C4 = fangyuan2_C [6:6] ;
  logic [0:0] RdClk1_R5 ;
  logic [0:0] RdClk1_X5 ;
  logic [0:0] RdClk1_C5 ;
  assign RdClk1_R5 = fangyuan2_R [5:5] ;
  assign RdClk1_X5 = fangyuan2_X [5:5] ;
  assign RdClk1_C5 = fangyuan2_C [5:5] ;
  logic [0:0] RdClk1_R6 ;
  logic [0:0] RdClk1_X6 ;
  logic [0:0] RdClk1_C6 ;
  assign RdClk1_R6 = fangyuan2_R [4:4] ;
  assign RdClk1_X6 = fangyuan2_X [4:4] ;
  assign RdClk1_C6 = fangyuan2_C [4:4] ;
  logic [0:0] RdClk1_R7 ;
  logic [0:0] RdClk1_X7 ;
  logic [0:0] RdClk1_C7 ;
  assign RdClk1_R7 = fangyuan2_R [3:3] ;
  assign RdClk1_X7 = fangyuan2_X [3:3] ;
  assign RdClk1_C7 = fangyuan2_C [3:3] ;
  logic [0:0] RdClk1_R8 ;
  logic [0:0] RdClk1_X8 ;
  logic [0:0] RdClk1_C8 ;
  assign RdClk1_R8 = fangyuan2_R [2:2] ;
  assign RdClk1_X8 = fangyuan2_X [2:2] ;
  assign RdClk1_C8 = fangyuan2_C [2:2] ;
  logic [0:0] RdClk1_R9 ;
  logic [0:0] RdClk1_X9 ;
  logic [0:0] RdClk1_C9 ;
  assign RdClk1_R9 = fangyuan2_R [1:1] ;
  assign RdClk1_X9 = fangyuan2_X [1:1] ;
  assign RdClk1_C9 = fangyuan2_C [1:1] ;
  logic [0:0] RdClk1_R10 ;
  logic [0:0] RdClk1_X10 ;
  logic [0:0] RdClk1_C10 ;
  assign RdClk1_R10 = fangyuan2_R [0:0] ;
  assign RdClk1_X10 = fangyuan2_X [0:0] ;
  assign RdClk1_C10 = fangyuan2_C [0:0] ;

  assign rmuxd1 = fangyuan2 & _037_;
  assign rmuxd1_S = 0 ;
  logic [10:0] fangyuan2_C0 ;
  logic [10:0] fangyuan2_R0 ;
  logic [10:0] fangyuan2_X0 ;
  logic [10:0] _037__C0 ;
  logic [10:0] _037__R0 ;
  logic [10:0] _037__X0 ;
  assign rmuxd1_T = fangyuan2_T | _037__T ;
  assign fangyuan2_C0 = rmuxd1_C ;
  assign fangyuan2_X0 = rmuxd1_X ;
  assign _037__C0 = rmuxd1_C ;
  assign _037__X0 = rmuxd1_X ;
  assign fangyuan2_R0 = ( rmuxd1_R | rmuxd1_C & _037__T ) & { 11{ _037_ != 0 }} ;
  assign _037__R0 = ( rmuxd1_R | rmuxd1_C & fangyuan2_T ) & { 11{ fangyuan2 != 0 }} ;
  logic [10:0] fangyuan3;
  logic [10:0] fangyuan3_T ;
  logic [10:0] fangyuan3_R ;
  logic [10:0] fangyuan3_C ;
  logic [10:0] fangyuan3_X ;
  assign fangyuan3 = { RdClk2, RdClk2, RdClk2, RdClk2, RdClk2, RdClk2, RdClk2, RdClk2, RdClk2, RdClk2, RdClk2 };
  assign fangyuan3_T = {  RdClk2_T , RdClk2_T , RdClk2_T , RdClk2_T , RdClk2_T , RdClk2_T , RdClk2_T , RdClk2_T , RdClk2_T , RdClk2_T , RdClk2_T  };
  logic [13:0] fangyuan3_S ;
  assign fangyuan3_S = 0 ;
  logic [0:0] RdClk2_R0 ;
  logic [0:0] RdClk2_X0 ;
  logic [0:0] RdClk2_C0 ;
  assign RdClk2_R0 = fangyuan3_R [10:10] ;
  assign RdClk2_X0 = fangyuan3_X [10:10] ;
  assign RdClk2_C0 = fangyuan3_C [10:10] ;
  logic [0:0] RdClk2_R1 ;
  logic [0:0] RdClk2_X1 ;
  logic [0:0] RdClk2_C1 ;
  assign RdClk2_R1 = fangyuan3_R [9:9] ;
  assign RdClk2_X1 = fangyuan3_X [9:9] ;
  assign RdClk2_C1 = fangyuan3_C [9:9] ;
  logic [0:0] RdClk2_R2 ;
  logic [0:0] RdClk2_X2 ;
  logic [0:0] RdClk2_C2 ;
  assign RdClk2_R2 = fangyuan3_R [8:8] ;
  assign RdClk2_X2 = fangyuan3_X [8:8] ;
  assign RdClk2_C2 = fangyuan3_C [8:8] ;
  logic [0:0] RdClk2_R3 ;
  logic [0:0] RdClk2_X3 ;
  logic [0:0] RdClk2_C3 ;
  assign RdClk2_R3 = fangyuan3_R [7:7] ;
  assign RdClk2_X3 = fangyuan3_X [7:7] ;
  assign RdClk2_C3 = fangyuan3_C [7:7] ;
  logic [0:0] RdClk2_R4 ;
  logic [0:0] RdClk2_X4 ;
  logic [0:0] RdClk2_C4 ;
  assign RdClk2_R4 = fangyuan3_R [6:6] ;
  assign RdClk2_X4 = fangyuan3_X [6:6] ;
  assign RdClk2_C4 = fangyuan3_C [6:6] ;
  logic [0:0] RdClk2_R5 ;
  logic [0:0] RdClk2_X5 ;
  logic [0:0] RdClk2_C5 ;
  assign RdClk2_R5 = fangyuan3_R [5:5] ;
  assign RdClk2_X5 = fangyuan3_X [5:5] ;
  assign RdClk2_C5 = fangyuan3_C [5:5] ;
  logic [0:0] RdClk2_R6 ;
  logic [0:0] RdClk2_X6 ;
  logic [0:0] RdClk2_C6 ;
  assign RdClk2_R6 = fangyuan3_R [4:4] ;
  assign RdClk2_X6 = fangyuan3_X [4:4] ;
  assign RdClk2_C6 = fangyuan3_C [4:4] ;
  logic [0:0] RdClk2_R7 ;
  logic [0:0] RdClk2_X7 ;
  logic [0:0] RdClk2_C7 ;
  assign RdClk2_R7 = fangyuan3_R [3:3] ;
  assign RdClk2_X7 = fangyuan3_X [3:3] ;
  assign RdClk2_C7 = fangyuan3_C [3:3] ;
  logic [0:0] RdClk2_R8 ;
  logic [0:0] RdClk2_X8 ;
  logic [0:0] RdClk2_C8 ;
  assign RdClk2_R8 = fangyuan3_R [2:2] ;
  assign RdClk2_X8 = fangyuan3_X [2:2] ;
  assign RdClk2_C8 = fangyuan3_C [2:2] ;
  logic [0:0] RdClk2_R9 ;
  logic [0:0] RdClk2_X9 ;
  logic [0:0] RdClk2_C9 ;
  assign RdClk2_R9 = fangyuan3_R [1:1] ;
  assign RdClk2_X9 = fangyuan3_X [1:1] ;
  assign RdClk2_C9 = fangyuan3_C [1:1] ;
  logic [0:0] RdClk2_R10 ;
  logic [0:0] RdClk2_X10 ;
  logic [0:0] RdClk2_C10 ;
  assign RdClk2_R10 = fangyuan3_R [0:0] ;
  assign RdClk2_X10 = fangyuan3_X [0:0] ;
  assign RdClk2_C10 = fangyuan3_C [0:0] ;

  assign rmuxd2 = fangyuan3 & _038_;
  assign rmuxd2_S = 0 ;
  logic [10:0] fangyuan3_C0 ;
  logic [10:0] fangyuan3_R0 ;
  logic [10:0] fangyuan3_X0 ;
  logic [10:0] _038__C0 ;
  logic [10:0] _038__R0 ;
  logic [10:0] _038__X0 ;
  assign rmuxd2_T = fangyuan3_T | _038__T ;
  assign fangyuan3_C0 = rmuxd2_C ;
  assign fangyuan3_X0 = rmuxd2_X ;
  assign _038__C0 = rmuxd2_C ;
  assign _038__X0 = rmuxd2_X ;
  assign fangyuan3_R0 = ( rmuxd2_R | rmuxd2_C & _038__T ) & { 11{ _038_ != 0 }} ;
  assign _038__R0 = ( rmuxd2_R | rmuxd2_C & fangyuan3_T ) & { 11{ fangyuan3 != 0 }} ;
  logic [10:0] fangyuan4;
  logic [10:0] fangyuan4_T ;
  logic [10:0] fangyuan4_R ;
  logic [10:0] fangyuan4_C ;
  logic [10:0] fangyuan4_X ;
  assign fangyuan4 = { RdClk3, RdClk3, RdClk3, RdClk3, RdClk3, RdClk3, RdClk3, RdClk3, RdClk3, RdClk3, RdClk3 };
  assign fangyuan4_T = {  RdClk3_T , RdClk3_T , RdClk3_T , RdClk3_T , RdClk3_T , RdClk3_T , RdClk3_T , RdClk3_T , RdClk3_T , RdClk3_T , RdClk3_T  };
  logic [13:0] fangyuan4_S ;
  assign fangyuan4_S = 0 ;
  logic [0:0] RdClk3_R0 ;
  logic [0:0] RdClk3_X0 ;
  logic [0:0] RdClk3_C0 ;
  assign RdClk3_R0 = fangyuan4_R [10:10] ;
  assign RdClk3_X0 = fangyuan4_X [10:10] ;
  assign RdClk3_C0 = fangyuan4_C [10:10] ;
  logic [0:0] RdClk3_R1 ;
  logic [0:0] RdClk3_X1 ;
  logic [0:0] RdClk3_C1 ;
  assign RdClk3_R1 = fangyuan4_R [9:9] ;
  assign RdClk3_X1 = fangyuan4_X [9:9] ;
  assign RdClk3_C1 = fangyuan4_C [9:9] ;
  logic [0:0] RdClk3_R2 ;
  logic [0:0] RdClk3_X2 ;
  logic [0:0] RdClk3_C2 ;
  assign RdClk3_R2 = fangyuan4_R [8:8] ;
  assign RdClk3_X2 = fangyuan4_X [8:8] ;
  assign RdClk3_C2 = fangyuan4_C [8:8] ;
  logic [0:0] RdClk3_R3 ;
  logic [0:0] RdClk3_X3 ;
  logic [0:0] RdClk3_C3 ;
  assign RdClk3_R3 = fangyuan4_R [7:7] ;
  assign RdClk3_X3 = fangyuan4_X [7:7] ;
  assign RdClk3_C3 = fangyuan4_C [7:7] ;
  logic [0:0] RdClk3_R4 ;
  logic [0:0] RdClk3_X4 ;
  logic [0:0] RdClk3_C4 ;
  assign RdClk3_R4 = fangyuan4_R [6:6] ;
  assign RdClk3_X4 = fangyuan4_X [6:6] ;
  assign RdClk3_C4 = fangyuan4_C [6:6] ;
  logic [0:0] RdClk3_R5 ;
  logic [0:0] RdClk3_X5 ;
  logic [0:0] RdClk3_C5 ;
  assign RdClk3_R5 = fangyuan4_R [5:5] ;
  assign RdClk3_X5 = fangyuan4_X [5:5] ;
  assign RdClk3_C5 = fangyuan4_C [5:5] ;
  logic [0:0] RdClk3_R6 ;
  logic [0:0] RdClk3_X6 ;
  logic [0:0] RdClk3_C6 ;
  assign RdClk3_R6 = fangyuan4_R [4:4] ;
  assign RdClk3_X6 = fangyuan4_X [4:4] ;
  assign RdClk3_C6 = fangyuan4_C [4:4] ;
  logic [0:0] RdClk3_R7 ;
  logic [0:0] RdClk3_X7 ;
  logic [0:0] RdClk3_C7 ;
  assign RdClk3_R7 = fangyuan4_R [3:3] ;
  assign RdClk3_X7 = fangyuan4_X [3:3] ;
  assign RdClk3_C7 = fangyuan4_C [3:3] ;
  logic [0:0] RdClk3_R8 ;
  logic [0:0] RdClk3_X8 ;
  logic [0:0] RdClk3_C8 ;
  assign RdClk3_R8 = fangyuan4_R [2:2] ;
  assign RdClk3_X8 = fangyuan4_X [2:2] ;
  assign RdClk3_C8 = fangyuan4_C [2:2] ;
  logic [0:0] RdClk3_R9 ;
  logic [0:0] RdClk3_X9 ;
  logic [0:0] RdClk3_C9 ;
  assign RdClk3_R9 = fangyuan4_R [1:1] ;
  assign RdClk3_X9 = fangyuan4_X [1:1] ;
  assign RdClk3_C9 = fangyuan4_C [1:1] ;
  logic [0:0] RdClk3_R10 ;
  logic [0:0] RdClk3_X10 ;
  logic [0:0] RdClk3_C10 ;
  assign RdClk3_R10 = fangyuan4_R [0:0] ;
  assign RdClk3_X10 = fangyuan4_X [0:0] ;
  assign RdClk3_C10 = fangyuan4_C [0:0] ;

  assign rmuxd3 = fangyuan4 & _039_;
  assign rmuxd3_S = 0 ;
  logic [10:0] fangyuan4_C0 ;
  logic [10:0] fangyuan4_R0 ;
  logic [10:0] fangyuan4_X0 ;
  logic [10:0] _039__C0 ;
  logic [10:0] _039__R0 ;
  logic [10:0] _039__X0 ;
  assign rmuxd3_T = fangyuan4_T | _039__T ;
  assign fangyuan4_C0 = rmuxd3_C ;
  assign fangyuan4_X0 = rmuxd3_X ;
  assign _039__C0 = rmuxd3_C ;
  assign _039__X0 = rmuxd3_X ;
  assign fangyuan4_R0 = ( rmuxd3_R | rmuxd3_C & _039__T ) & { 11{ _039_ != 0 }} ;
  assign _039__R0 = ( rmuxd3_R | rmuxd3_C & fangyuan4_T ) & { 11{ fangyuan4 != 0 }} ;
  always @*
  logic [10:0] _003__R0 ;
  logic [10:0] _003__X0 ;
  logic [10:0] _003__C0 ;
  always @* begin
    dout_T = 0 ;
    _003__R0 = 0 ;
    _003__X0 = 0 ;
    _003__C0 = 0 ;
    if (RECLK) begin
      dout = _003_;
      dout_T = _003__T ;
      _003__R0 = dout_R ;
      _003__X0 = dout_X ;
    end
  end
  always @*
  logic [8:0] RA_R0 ;
  logic [8:0] RA_X0 ;
  logic [8:0] RA_C0 ;
  always @* begin
    RADR_T = 0 ;
    RA_R0 = 0 ;
    RA_X0 = 0 ;
    RA_C0 = 0 ;
    if (_013_) begin
      RADR = RA;
      RADR_T = RA_T ;
      RA_R0 = RADR_R ;
      RA_X0 = RADR_X ;
    end
  end
  always @*
  logic [0:0] we_se_R1 ;
  logic [0:0] we_se_X1 ;
  logic [0:0] we_se_C1 ;
  always @* begin
    WE_FF_T = 0 ;
    we_se_R1 = 0 ;
    we_se_X1 = 0 ;
    we_se_C1 = 0 ;
    if (_005_) begin
      WE_FF = we_se;
      WE_FF_T = we_se_T ;
      we_se_R1 = WE_FF_R ;
      we_se_X1 = WE_FF_X ;
    end
  end
  always @*
  logic [0:0] _000__R0 ;
  logic [0:0] _000__X0 ;
  logic [0:0] _000__C0 ;
  always @* begin
    RE_LATB_T = 0 ;
    _000__R0 = 0 ;
    _000__X0 = 0 ;
    _000__C0 = 0 ;
    if (_004_) begin
      RE_LATB = _000_;
      RE_LATB_T = _000__T ;
      _000__R0 = RE_LATB_R ;
      _000__X0 = RE_LATB_X ;
    end
  end
  always @*
  logic [0:0] _002__R0 ;
  logic [0:0] _002__X0 ;
  logic [0:0] _002__C0 ;
  always @* begin
    WE_LATB_T = 0 ;
    _002__R0 = 0 ;
    _002__X0 = 0 ;
    _002__C0 = 0 ;
    if (_004_) begin
      WE_LATB = _002_;
      WE_LATB_T = _002__T ;
      _002__R0 = WE_LATB_R ;
      _002__X0 = WE_LATB_X ;
    end
  end
  assign _026_ = ! CLK;
  logic [0:0] CLK_C4 ;
  logic [0:0] CLK_R4 ;
  logic [0:0] CLK_X4 ;
  assign _026__T = | CLK_T ;
  assign CLK_C4 = { 1{ _026__C }} ;
  assign CLK_X4 = { 1{ _026__X }} ;
  assign CLK_R4 = { 1{ _026__R }} ;
  assign _026__S = 0 ;
  assign _027_ = ! clobber_flops;
  logic [0:0] clobber_flops_C0 ;
  logic [0:0] clobber_flops_R0 ;
  logic [0:0] clobber_flops_X0 ;
  assign _027__T = | clobber_flops_T ;
  assign clobber_flops_C0 = { 1{ _027__C }} ;
  assign clobber_flops_X0 = { 1{ _027__X }} ;
  assign clobber_flops_R0 = { 1{ _027__R }} ;
  assign _027__S = 0 ;
  assign _028_ = ! RET_EN;
  logic [0:0] RET_EN_C0 ;
  logic [0:0] RET_EN_R0 ;
  logic [0:0] RET_EN_X0 ;
  assign _028__T = | RET_EN_T ;
  assign RET_EN_C0 = { 1{ _028__C }} ;
  assign RET_EN_X0 = { 1{ _028__X }} ;
  assign RET_EN_R0 = { 1{ _028__R }} ;
  assign _028__S = 0 ;
  assign _029_ = ! RADRCLK;
  logic [0:0] RADRCLK_C0 ;
  logic [0:0] RADRCLK_R0 ;
  logic [0:0] RADRCLK_X0 ;
  assign _029__T = | RADRCLK_T ;
  assign RADRCLK_C0 = { 1{ _029__C }} ;
  assign RADRCLK_X0 = { 1{ _029__X }} ;
  assign RADRCLK_R0 = { 1{ _029__R }} ;
  assign _029__S = 0 ;
  assign CLAMPB = ~ IDDQ;
  logic [0:0] IDDQ_C0 ;
  logic [0:0] IDDQ_R0 ;
  logic [0:0] IDDQ_X0 ;
  assign CLAMPB_T = IDDQ_T ;
  assign IDDQ_C0 = CLAMPB_C ;
  assign IDDQ_R0 = CLAMPB_R ;
  assign IDDQ_X0 = CLAMPB_X ;
  assign CLAMPB_S = 0 ;
  assign _000_ = ~ RE;
  logic [0:0] RE_C0 ;
  logic [0:0] RE_R0 ;
  logic [0:0] RE_X0 ;
  assign _000__T = RE_T ;
  assign RE_C0 = _000__C ;
  assign RE_R0 = _000__R ;
  assign RE_X0 = _000__X ;
  assign _000__S = 0 ;
  assign _002_ = ~ WE;
  logic [0:0] WE_C0 ;
  logic [0:0] WE_R0 ;
  logic [0:0] WE_X0 ;
  assign _002__T = WE_T ;
  assign WE_C0 = _002__C ;
  assign WE_R0 = _002__R ;
  assign WE_X0 = _002__X ;
  assign _002__S = 0 ;
  assign we_se = ~ WE_LATB;
  logic [0:0] WE_LATB_C0 ;
  logic [0:0] WE_LATB_R0 ;
  logic [0:0] WE_LATB_X0 ;
  assign we_se_T = WE_LATB_T ;
  assign WE_LATB_C0 = we_se_C ;
  assign WE_LATB_R0 = we_se_R ;
  assign WE_LATB_X0 = we_se_X ;
  assign we_se_S = 0 ;
  assign re_se = ~ RE_LATB;
  logic [0:0] RE_LATB_C0 ;
  logic [0:0] RE_LATB_R0 ;
  logic [0:0] RE_LATB_X0 ;
  assign re_se_T = RE_LATB_T ;
  assign RE_LATB_C0 = re_se_C ;
  assign RE_LATB_R0 = re_se_R ;
  assign RE_LATB_X0 = re_se_X ;
  assign re_se_S = 0 ;
  assign _030_ = ~ CLK;
  logic [0:0] CLK_C5 ;
  logic [0:0] CLK_R5 ;
  logic [0:0] CLK_X5 ;
  assign _030__T = CLK_T ;
  assign CLK_C5 = _030__C ;
  assign CLK_R5 = _030__R ;
  assign CLK_X5 = _030__X ;
  assign _030__S = 0 ;
  logic [8:0] fangyuan5;
  logic [8:0] fangyuan5_T ;
  logic [8:0] fangyuan5_R ;
  logic [8:0] fangyuan5_C ;
  logic [8:0] fangyuan5_X ;
  assign fangyuan5 = { RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL, RWSEL };
  assign fangyuan5_T = {  RWSEL_T , RWSEL_T , RWSEL_T , RWSEL_T , RWSEL_T , RWSEL_T , RWSEL_T , RWSEL_T , RWSEL_T  };
  logic [13:0] fangyuan5_S ;
  assign fangyuan5_S = 0 ;
  logic [0:0] RWSEL_R9 ;
  logic [0:0] RWSEL_X9 ;
  logic [0:0] RWSEL_C9 ;
  assign RWSEL_R9 = fangyuan5_R [8:8] ;
  assign RWSEL_X9 = fangyuan5_X [8:8] ;
  assign RWSEL_C9 = fangyuan5_C [8:8] ;
  logic [0:0] RWSEL_R10 ;
  logic [0:0] RWSEL_X10 ;
  logic [0:0] RWSEL_C10 ;
  assign RWSEL_R10 = fangyuan5_R [7:7] ;
  assign RWSEL_X10 = fangyuan5_X [7:7] ;
  assign RWSEL_C10 = fangyuan5_C [7:7] ;
  logic [0:0] RWSEL_R11 ;
  logic [0:0] RWSEL_X11 ;
  logic [0:0] RWSEL_C11 ;
  assign RWSEL_R11 = fangyuan5_R [6:6] ;
  assign RWSEL_X11 = fangyuan5_X [6:6] ;
  assign RWSEL_C11 = fangyuan5_C [6:6] ;
  logic [0:0] RWSEL_R12 ;
  logic [0:0] RWSEL_X12 ;
  logic [0:0] RWSEL_C12 ;
  assign RWSEL_R12 = fangyuan5_R [5:5] ;
  assign RWSEL_X12 = fangyuan5_X [5:5] ;
  assign RWSEL_C12 = fangyuan5_C [5:5] ;
  logic [0:0] RWSEL_R13 ;
  logic [0:0] RWSEL_X13 ;
  logic [0:0] RWSEL_C13 ;
  assign RWSEL_R13 = fangyuan5_R [4:4] ;
  assign RWSEL_X13 = fangyuan5_X [4:4] ;
  assign RWSEL_C13 = fangyuan5_C [4:4] ;
  logic [0:0] RWSEL_R14 ;
  logic [0:0] RWSEL_X14 ;
  logic [0:0] RWSEL_C14 ;
  assign RWSEL_R14 = fangyuan5_R [3:3] ;
  assign RWSEL_X14 = fangyuan5_X [3:3] ;
  assign RWSEL_C14 = fangyuan5_C [3:3] ;
  logic [0:0] RWSEL_R15 ;
  logic [0:0] RWSEL_X15 ;
  logic [0:0] RWSEL_C15 ;
  assign RWSEL_R15 = fangyuan5_R [2:2] ;
  assign RWSEL_X15 = fangyuan5_X [2:2] ;
  assign RWSEL_C15 = fangyuan5_C [2:2] ;
  logic [0:0] RWSEL_R16 ;
  logic [0:0] RWSEL_X16 ;
  logic [0:0] RWSEL_C16 ;
  assign RWSEL_R16 = fangyuan5_R [1:1] ;
  assign RWSEL_X16 = fangyuan5_X [1:1] ;
  assign RWSEL_C16 = fangyuan5_C [1:1] ;
  logic [0:0] RWSEL_R17 ;
  logic [0:0] RWSEL_X17 ;
  logic [0:0] RWSEL_C17 ;
  assign RWSEL_R17 = fangyuan5_R [0:0] ;
  assign RWSEL_X17 = fangyuan5_X [0:0] ;
  assign RWSEL_C17 = fangyuan5_C [0:0] ;

  assign _031_ = ~ fangyuan5;
  logic [8:0] fangyuan5_C0 ;
  logic [8:0] fangyuan5_R0 ;
  logic [8:0] fangyuan5_X0 ;
  assign _031__T = fangyuan5_T ;
  assign fangyuan5_C0 = _031__C ;
  assign fangyuan5_R0 = _031__R ;
  assign fangyuan5_X0 = _031__X ;
  assign _031__S = 0 ;
  assign WDBQ = ~ WDQ_pr;
  logic [10:0] WDQ_pr_C1 ;
  logic [10:0] WDQ_pr_R1 ;
  logic [10:0] WDQ_pr_X1 ;
  assign WDBQ_T = WDQ_pr_T ;
  assign WDQ_pr_C1 = WDBQ_C ;
  assign WDQ_pr_R1 = WDBQ_R ;
  assign WDQ_pr_X1 = WDBQ_X ;
  assign WDBQ_S = 0 ;
  assign legal = ~ ADR[8];
  logic [8:0] ADR_C0 ;
  logic [8:0] ADR_R0 ;
  logic [8:0] ADR_X0 ;
  assign legal_T = ADR_T [8] ;
  assign ADR_C0 [8] = legal_C ;
  assign ADR_R0 [8] = legal_R ;
  assign ADR_X0 [8] = legal_X ;
  assign legal_S = 0 ;
  assign _032_ = ~ RADR[0];
  assign _032__T = RADR_T [0] ;
  assign RADR_C2 [0] = _032__C ;
  assign RADR_R2 [0] = _032__R ;
  assign RADR_X2 [0] = _032__X ;
  assign _032__S = 0 ;
  assign _033_ = ~ RADR[1];
  assign { RADR_R2 [8:2] } = 0;
  assign { RADR_X2 [8:2] } = 0;
  assign { RADR_C2 [8:2] } = 0;
  logic [8:0] RADR_C3 ;
  logic [8:0] RADR_R3 ;
  logic [8:0] RADR_X3 ;
  assign _033__T = RADR_T [1] ;
  assign RADR_C3 [1] = _033__C ;
  assign RADR_R3 [1] = _033__R ;
  assign RADR_X3 [1] = _033__X ;
  assign _033__S = 0 ;
  assign _034_ = ~ WAFF[0];
  assign _034__T = WAFF_T [0] ;
  assign WAFF_C2 [0] = _034__C ;
  assign WAFF_R2 [0] = _034__R ;
  assign WAFF_X2 [0] = _034__X ;
  assign _034__S = 0 ;
  assign _035_ = ~ WAFF[1];
  assign { WAFF_R2 [8:2] } = 0;
  assign { WAFF_X2 [8:2] } = 0;
  assign { WAFF_C2 [8:2] } = 0;
  logic [8:0] WAFF_C3 ;
  logic [8:0] WAFF_R3 ;
  logic [8:0] WAFF_X3 ;
  assign _035__T = WAFF_T [1] ;
  assign WAFF_C3 [1] = _035__C ;
  assign WAFF_R3 [1] = _035__R ;
  assign WAFF_X3 [1] = _035__X ;
  assign _035__S = 0 ;
  assign _036_ = ~ dout0;
  logic [10:0] dout0_C0 ;
  logic [10:0] dout0_R0 ;
  logic [10:0] dout0_X0 ;
  assign _036__T = dout0_T ;
  assign dout0_C0 = _036__C ;
  assign dout0_R0 = _036__R ;
  assign dout0_X0 = _036__X ;
  assign _036__S = 0 ;
  assign _037_ = ~ dout1;
  logic [10:0] dout1_C0 ;
  logic [10:0] dout1_R0 ;
  logic [10:0] dout1_X0 ;
  assign _037__T = dout1_T ;
  assign dout1_C0 = _037__C ;
  assign dout1_R0 = _037__R ;
  assign dout1_X0 = _037__X ;
  assign _037__S = 0 ;
  assign _038_ = ~ dout2;
  logic [10:0] dout2_C0 ;
  logic [10:0] dout2_R0 ;
  logic [10:0] dout2_X0 ;
  assign _038__T = dout2_T ;
  assign dout2_C0 = _038__C ;
  assign dout2_R0 = _038__R ;
  assign dout2_X0 = _038__X ;
  assign _038__S = 0 ;
  assign _039_ = ~ dout3;
  logic [10:0] dout3_C0 ;
  logic [10:0] dout3_R0 ;
  logic [10:0] dout3_X0 ;
  assign _039__T = dout3_T ;
  assign dout3_C0 = _039__C ;
  assign dout3_R0 = _039__R ;
  assign dout3_X0 = _039__X ;
  assign _039__S = 0 ;
  assign ADR = _014_ | _015_;
  assign ADR_S = 0 ;
  logic [8:0] _014__C0 ;
  logic [8:0] _014__R0 ;
  logic [8:0] _014__X0 ;
  logic [8:0] _015__C0 ;
  logic [8:0] _015__R0 ;
  logic [8:0] _015__X0 ;
  assign ADR_T = _014__T | _015__T ;
  assign _014__C0 = ADR_C ;
  assign _014__X0 = ADR_X ;
  assign _015__C0 = ADR_C ;
  assign _015__X0 = ADR_X ;
  assign _014__R0 = ( ADR_R | ADR_C & _015__T ) & { 9{ _015_ != 9'b111111111 }} ;
  assign _015__R0 = ( ADR_R | ADR_C & _014__T ) & { 9{ _014_ != 9'b111111111 }} ;
  assign WMNQ = WDQ_pr | WDBQ;
  assign WMNQ_S = 0 ;
  logic [10:0] WDQ_pr_C2 ;
  logic [10:0] WDQ_pr_R2 ;
  logic [10:0] WDQ_pr_X2 ;
  logic [10:0] WDBQ_C0 ;
  logic [10:0] WDBQ_R0 ;
  logic [10:0] WDBQ_X0 ;
  assign WMNQ_T = WDQ_pr_T | WDBQ_T ;
  assign WDQ_pr_C2 = WMNQ_C ;
  assign WDQ_pr_X2 = WMNQ_X ;
  assign WDBQ_C0 = WMNQ_C ;
  assign WDBQ_X0 = WMNQ_X ;
  assign WDQ_pr_R2 = ( WMNQ_R | WMNQ_C & WDBQ_T ) & { 11{ WDBQ != 11'b11111111111 }} ;
  assign WDBQ_R0 = ( WMNQ_R | WMNQ_C & WDQ_pr_T ) & { 11{ WDQ_pr != 11'b11111111111 }} ;
  assign RD = _016_ | _017_;
  assign RD_S = 0 ;
  logic [10:0] _016__C0 ;
  logic [10:0] _016__R0 ;
  logic [10:0] _016__X0 ;
  logic [10:0] _017__C0 ;
  logic [10:0] _017__R0 ;
  logic [10:0] _017__X0 ;
  assign RD_T = _016__T | _017__T ;
  assign _016__C0 = RD_C ;
  assign _016__X0 = RD_X ;
  assign _017__C0 = RD_C ;
  assign _017__X0 = RD_X ;
  assign _016__R0 = ( RD_R | RD_C & _017__T ) & { 11{ _017_ != 11'b11111111111 }} ;
  assign _017__R0 = ( RD_R | RD_C & _016__T ) & { 11{ _016_ != 11'b11111111111 }} ;
  assign _040_ = rmuxd0 | rmuxd1;
  assign _040__S = 0 ;
  logic [10:0] rmuxd0_C0 ;
  logic [10:0] rmuxd0_R0 ;
  logic [10:0] rmuxd0_X0 ;
  logic [10:0] rmuxd1_C0 ;
  logic [10:0] rmuxd1_R0 ;
  logic [10:0] rmuxd1_X0 ;
  assign _040__T = rmuxd0_T | rmuxd1_T ;
  assign rmuxd0_C0 = _040__C ;
  assign rmuxd0_X0 = _040__X ;
  assign rmuxd1_C0 = _040__C ;
  assign rmuxd1_X0 = _040__X ;
  assign rmuxd0_R0 = ( _040__R | _040__C & rmuxd1_T ) & { 11{ rmuxd1 != 11'b11111111111 }} ;
  assign rmuxd1_R0 = ( _040__R | _040__C & rmuxd0_T ) & { 11{ rmuxd0 != 11'b11111111111 }} ;
  assign _041_ = _040_ | rmuxd2;
  assign _041__S = 0 ;
  logic [10:0] _040__C0 ;
  logic [10:0] _040__R0 ;
  logic [10:0] _040__X0 ;
  logic [10:0] rmuxd2_C0 ;
  logic [10:0] rmuxd2_R0 ;
  logic [10:0] rmuxd2_X0 ;
  assign _041__T = _040__T | rmuxd2_T ;
  assign _040__C0 = _041__C ;
  assign _040__X0 = _041__X ;
  assign rmuxd2_C0 = _041__C ;
  assign rmuxd2_X0 = _041__X ;
  assign _040__R0 = ( _041__R | _041__C & rmuxd2_T ) & { 11{ rmuxd2 != 11'b11111111111 }} ;
  assign rmuxd2_R0 = ( _041__R | _041__C & _040__T ) & { 11{ _040_ != 11'b11111111111 }} ;
  assign _003_ = _041_ | rmuxd3;
  assign _003__S = 0 ;
  logic [10:0] _041__C0 ;
  logic [10:0] _041__R0 ;
  logic [10:0] _041__X0 ;
  logic [10:0] rmuxd3_C0 ;
  logic [10:0] rmuxd3_R0 ;
  logic [10:0] rmuxd3_X0 ;
  assign _003__T = _041__T | rmuxd3_T ;
  assign _041__C0 = _003__C ;
  assign _041__X0 = _003__X ;
  assign rmuxd3_C0 = _003__C ;
  assign rmuxd3_X0 = _003__X ;
  assign _041__R0 = ( _003__R | _003__C & rmuxd3_T ) & { 11{ rmuxd3 != 11'b11111111111 }} ;
  assign rmuxd3_R0 = ( _003__R | _003__C & _041__T ) & { 11{ _041_ != 11'b11111111111 }} ;
  always @(posedge WADRCLK)
      WDQ_pr <= _001_;
  logic [10:0] _001__X0 ;
  logic [10:0] _001__R0 ;
  logic [10:0] _001__C0 ;
  assign _001__X0 = { 11{ WDQ_pr_S != _001__S }} ;
  assign _001__R0 = 0 ;
  assign _001__C0 = 0 ;
  always @( posedge WADRCLK )
      WDQ_pr_T 		<= rst_zy ? 0 : ( _001__T & _001__X0 );
  always @( posedge WADRCLK )
      WDQ_pr_t_flag 	<= rst_zy ? 0 : WDQ_pr_t_flag ? 1 : | _001__T & ( | _001__X0 );
  always @( posedge WADRCLK )
      WDQ_pr_r_flag 	<= rst_zy ? 0 : WDQ_pr_r_flag ? 1 : WDQ_pr_t_flag ? 0 : ( | WDQ_pr_R ) ;
  always @(posedge WADRCLK)
      WAFF <= WA;
  logic [8:0] WA_X0 ;
  logic [8:0] WA_R0 ;
  logic [8:0] WA_C0 ;
  assign WA_X0 = { 9{ WAFF_S != WA_S }} ;
  assign WA_R0 = 0 ;
  assign WA_C0 = 0 ;
  always @( posedge WADRCLK )
      WAFF_T 		<= rst_zy ? 0 : ( WA_T & WA_X0 );
  always @( posedge WADRCLK )
      WAFF_t_flag 	<= rst_zy ? 0 : WAFF_t_flag ? 1 : | WA_T & ( | WA_X0 );
  always @( posedge WADRCLK )
      WAFF_r_flag 	<= rst_zy ? 0 : WAFF_r_flag ? 1 : WAFF_t_flag ? 0 : ( | WAFF_R ) ;
  logic [0:0] WrClk0_R0 ;
  logic [0:0] WrClk0_X0 ;
  logic [0:0] WrClk0_C0 ;
  logic [10:0] WDQ_pr_R3 ;
  logic [10:0] WDQ_pr_X3 ;
  logic [10:0] WDQ_pr_C3 ;
  logic [10:0] WMNQ_R0 ;
  logic [10:0] WMNQ_X0 ;
  logic [10:0] WMNQ_C0 ;
// module: \$paramod\RAMPDP_256X11_GL_M4_D2_ram\words=64\bits=11\addrs=7
  \$paramod\RAMPDP_256X11_GL_M4_D2_ram\words=64\bits=11\addrs=7 iow0 (
    .radr_T (  RADR_T [8:2]  ),
    .radr_R (  RADR_R3 [8:2]  ),
    .radr_X (  RADR_X3 [8:2]  ),
    .radr_C (  RADR_C3 [8:2]  ),
    .radr_S (  RADR_S [8:2]  ),
    .wadr_T (  WAFF_T [8:2]  ),
    .wadr_R (  WAFF_R3 [8:2]  ),
    .wadr_X (  WAFF_X3 [8:2]  ),
    .wadr_C (  WAFF_C3 [8:2]  ),
    .wadr_S (  WAFF_S [8:2]  ),
    .wrclk_T (  WrClk0_T  ),
    .wrclk_R (  WrClk0_R0  ),
    .wrclk_X (  WrClk0_X0  ),
    .wrclk_C (  WrClk0_C0  ),
    .wrclk_S (  WrClk0_S  ),
    .wrdata_T (  WDQ_pr_T  ),
    .wrdata_R (  WDQ_pr_R3  ),
    .wrdata_X (  WDQ_pr_X3  ),
    .wrdata_C (  WDQ_pr_C3  ),
    .wrdata_S (  WDQ_pr_S  ),
    .wrmaskn_T (  WMNQ_T  ),
    .wrmaskn_R (  WMNQ_R0  ),
    .wrmaskn_X (  WMNQ_X0  ),
    .wrmaskn_C (  WMNQ_C0  ),
    .wrmaskn_S (  WMNQ_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .rout_B_T (  dout0_T  ),
    .rout_B_R0 (  dout0_R  ),
    .rout_B_X0 (  dout0_X  ),
    .rout_B_C0 (  dout0_C  ),
    .rout_B_S ( dout0_S ),
    .wrmaskn ( WMNQ ),
    .rout_B ( dout0 ),
    .wadr ( WAFF[8:2] ),
    .radr ( RADR[8:2] ),
    .wrclk ( WrClk0 ),
    .wrdata ( WDQ_pr )
  );
  assign { RADR_R3 [0] } = 0;
  assign { RADR_X3 [0] } = 0;
  assign { RADR_C3 [0] } = 0;
  logic [8:0] RADR_R4 ;
  logic [8:0] RADR_X4 ;
  logic [8:0] RADR_C4 ;
  assign { WAFF_R3 [0] } = 0;
  assign { WAFF_X3 [0] } = 0;
  assign { WAFF_C3 [0] } = 0;
  logic [8:0] WAFF_R4 ;
  logic [8:0] WAFF_X4 ;
  logic [8:0] WAFF_C4 ;
  logic [0:0] WrClk1_R0 ;
  logic [0:0] WrClk1_X0 ;
  logic [0:0] WrClk1_C0 ;
  logic [10:0] WDQ_pr_R4 ;
  logic [10:0] WDQ_pr_X4 ;
  logic [10:0] WDQ_pr_C4 ;
  logic [10:0] WMNQ_R1 ;
  logic [10:0] WMNQ_X1 ;
  logic [10:0] WMNQ_C1 ;
// module: \$paramod\RAMPDP_256X11_GL_M4_D2_ram\words=64\bits=11\addrs=7
  \$paramod\RAMPDP_256X11_GL_M4_D2_ram\words=64\bits=11\addrs=7 iow1 (
    .radr_T (  RADR_T [8:2]  ),
    .radr_R (  RADR_R4 [8:2]  ),
    .radr_X (  RADR_X4 [8:2]  ),
    .radr_C (  RADR_C4 [8:2]  ),
    .radr_S (  RADR_S [8:2]  ),
    .wadr_T (  WAFF_T [8:2]  ),
    .wadr_R (  WAFF_R4 [8:2]  ),
    .wadr_X (  WAFF_X4 [8:2]  ),
    .wadr_C (  WAFF_C4 [8:2]  ),
    .wadr_S (  WAFF_S [8:2]  ),
    .wrclk_T (  WrClk1_T  ),
    .wrclk_R (  WrClk1_R0  ),
    .wrclk_X (  WrClk1_X0  ),
    .wrclk_C (  WrClk1_C0  ),
    .wrclk_S (  WrClk1_S  ),
    .wrdata_T (  WDQ_pr_T  ),
    .wrdata_R (  WDQ_pr_R4  ),
    .wrdata_X (  WDQ_pr_X4  ),
    .wrdata_C (  WDQ_pr_C4  ),
    .wrdata_S (  WDQ_pr_S  ),
    .wrmaskn_T (  WMNQ_T  ),
    .wrmaskn_R (  WMNQ_R1  ),
    .wrmaskn_X (  WMNQ_X1  ),
    .wrmaskn_C (  WMNQ_C1  ),
    .wrmaskn_S (  WMNQ_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .rout_B_T (  dout1_T  ),
    .rout_B_R0 (  dout1_R  ),
    .rout_B_X0 (  dout1_X  ),
    .rout_B_C0 (  dout1_C  ),
    .rout_B_S ( dout1_S ),
    .wrmaskn ( WMNQ ),
    .rout_B ( dout1 ),
    .wadr ( WAFF[8:2] ),
    .radr ( RADR[8:2] ),
    .wrclk ( WrClk1 ),
    .wrdata ( WDQ_pr )
  );
  assign { RADR_R4 [0], RADR_R4 [1] } = 0;
  assign { RADR_X4 [0], RADR_X4 [1] } = 0;
  assign { RADR_C4 [0], RADR_C4 [1] } = 0;
  logic [8:0] RADR_R5 ;
  logic [8:0] RADR_X5 ;
  logic [8:0] RADR_C5 ;
  assign { WAFF_R4 [0], WAFF_R4 [1] } = 0;
  assign { WAFF_X4 [0], WAFF_X4 [1] } = 0;
  assign { WAFF_C4 [0], WAFF_C4 [1] } = 0;
  logic [8:0] WAFF_R5 ;
  logic [8:0] WAFF_X5 ;
  logic [8:0] WAFF_C5 ;
  logic [0:0] WrClk2_R0 ;
  logic [0:0] WrClk2_X0 ;
  logic [0:0] WrClk2_C0 ;
  logic [10:0] WDQ_pr_R5 ;
  logic [10:0] WDQ_pr_X5 ;
  logic [10:0] WDQ_pr_C5 ;
  logic [10:0] WMNQ_R2 ;
  logic [10:0] WMNQ_X2 ;
  logic [10:0] WMNQ_C2 ;
// module: \$paramod\RAMPDP_256X11_GL_M4_D2_ram\words=64\bits=11\addrs=7
  \$paramod\RAMPDP_256X11_GL_M4_D2_ram\words=64\bits=11\addrs=7 iow2 (
    .radr_T (  RADR_T [8:2]  ),
    .radr_R (  RADR_R5 [8:2]  ),
    .radr_X (  RADR_X5 [8:2]  ),
    .radr_C (  RADR_C5 [8:2]  ),
    .radr_S (  RADR_S [8:2]  ),
    .wadr_T (  WAFF_T [8:2]  ),
    .wadr_R (  WAFF_R5 [8:2]  ),
    .wadr_X (  WAFF_X5 [8:2]  ),
    .wadr_C (  WAFF_C5 [8:2]  ),
    .wadr_S (  WAFF_S [8:2]  ),
    .wrclk_T (  WrClk2_T  ),
    .wrclk_R (  WrClk2_R0  ),
    .wrclk_X (  WrClk2_X0  ),
    .wrclk_C (  WrClk2_C0  ),
    .wrclk_S (  WrClk2_S  ),
    .wrdata_T (  WDQ_pr_T  ),
    .wrdata_R (  WDQ_pr_R5  ),
    .wrdata_X (  WDQ_pr_X5  ),
    .wrdata_C (  WDQ_pr_C5  ),
    .wrdata_S (  WDQ_pr_S  ),
    .wrmaskn_T (  WMNQ_T  ),
    .wrmaskn_R (  WMNQ_R2  ),
    .wrmaskn_X (  WMNQ_X2  ),
    .wrmaskn_C (  WMNQ_C2  ),
    .wrmaskn_S (  WMNQ_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .rout_B_T (  dout2_T  ),
    .rout_B_R0 (  dout2_R  ),
    .rout_B_X0 (  dout2_X  ),
    .rout_B_C0 (  dout2_C  ),
    .rout_B_S ( dout2_S ),
    .wrmaskn ( WMNQ ),
    .rout_B ( dout2 ),
    .wadr ( WAFF[8:2] ),
    .radr ( RADR[8:2] ),
    .wrclk ( WrClk2 ),
    .wrdata ( WDQ_pr )
  );
  assign { RADR_R5 [0], RADR_R5 [1] } = 0;
  assign { RADR_X5 [0], RADR_X5 [1] } = 0;
  assign { RADR_C5 [0], RADR_C5 [1] } = 0;
  logic [8:0] RADR_R6 ;
  logic [8:0] RADR_X6 ;
  logic [8:0] RADR_C6 ;
  assign { WAFF_R5 [0], WAFF_R5 [1] } = 0;
  assign { WAFF_X5 [0], WAFF_X5 [1] } = 0;
  assign { WAFF_C5 [0], WAFF_C5 [1] } = 0;
  logic [8:0] WAFF_R6 ;
  logic [8:0] WAFF_X6 ;
  logic [8:0] WAFF_C6 ;
  logic [0:0] WrClk3_R0 ;
  logic [0:0] WrClk3_X0 ;
  logic [0:0] WrClk3_C0 ;
  logic [10:0] WDQ_pr_R6 ;
  logic [10:0] WDQ_pr_X6 ;
  logic [10:0] WDQ_pr_C6 ;
  logic [10:0] WMNQ_R3 ;
  logic [10:0] WMNQ_X3 ;
  logic [10:0] WMNQ_C3 ;
// module: \$paramod\RAMPDP_256X11_GL_M4_D2_ram\words=64\bits=11\addrs=7
  \$paramod\RAMPDP_256X11_GL_M4_D2_ram\words=64\bits=11\addrs=7 iow3 (
    .radr_T (  RADR_T [8:2]  ),
    .radr_R (  RADR_R6 [8:2]  ),
    .radr_X (  RADR_X6 [8:2]  ),
    .radr_C (  RADR_C6 [8:2]  ),
    .radr_S (  RADR_S [8:2]  ),
    .wadr_T (  WAFF_T [8:2]  ),
    .wadr_R (  WAFF_R6 [8:2]  ),
    .wadr_X (  WAFF_X6 [8:2]  ),
    .wadr_C (  WAFF_C6 [8:2]  ),
    .wadr_S (  WAFF_S [8:2]  ),
    .wrclk_T (  WrClk3_T  ),
    .wrclk_R (  WrClk3_R0  ),
    .wrclk_X (  WrClk3_X0  ),
    .wrclk_C (  WrClk3_C0  ),
    .wrclk_S (  WrClk3_S  ),
    .wrdata_T (  WDQ_pr_T  ),
    .wrdata_R (  WDQ_pr_R6  ),
    .wrdata_X (  WDQ_pr_X6  ),
    .wrdata_C (  WDQ_pr_C6  ),
    .wrdata_S (  WDQ_pr_S  ),
    .wrmaskn_T (  WMNQ_T  ),
    .wrmaskn_R (  WMNQ_R3  ),
    .wrmaskn_X (  WMNQ_X3  ),
    .wrmaskn_C (  WMNQ_C3  ),
    .wrmaskn_S (  WMNQ_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .rout_B_T (  dout3_T  ),
    .rout_B_R0 (  dout3_R  ),
    .rout_B_X0 (  dout3_X  ),
    .rout_B_C0 (  dout3_C  ),
    .rout_B_S ( dout3_S ),
    .wrmaskn ( WMNQ ),
    .rout_B ( dout3 ),
    .wadr ( WAFF[8:2] ),
    .radr ( RADR[8:2] ),
    .wrclk ( WrClk3 ),
    .wrdata ( WDQ_pr )
  );
  assign BADBIT = 11'b00000000000;
  assign BADBIT_T = 0 ;
  assign BADBIT_S = 14'b1 ;
  assign CAPT_DIS = 1'b0;
  assign CAPT_DIS_T = 0 ;
  assign CAPT_DIS_S = 14'b1 ;
  assign PDEC0 = 512'b
  assign PDEC0_T = 0 ;
  assign PDEC0_S = 14'b1 ;
  assign PDEC1 = 512'b
  assign PDEC1_T = 0 ;
  assign PDEC1_S = 14'b1 ;
  assign PDEC2 = 512'b
  assign PDEC2_T = 0 ;
  assign PDEC2_S = 14'b1 ;
  assign RADRSWI = RADR;
  assign { RADR_R6 [0], RADR_R6 [1] } = 0;
  assign { RADR_X6 [0], RADR_X6 [1] } = 0;
  assign { RADR_C6 [0], RADR_C6 [1] } = 0;
  logic [8:0] RADR_C7 ;
  logic [8:0] RADR_R7 ;
  logic [8:0] RADR_X7 ;
  assign RADRSWI_T = RADR_T ;
  assign RADR_C7 = RADRSWI_C ;
  assign RADR_R7 = RADRSWI_R ;
  assign RADR_X7 = RADRSWI_X ;
  assign RADRSWI_S = RADR_S ;
  assign RDBYP = 1'b0;
  assign RDBYP_T = 0 ;
  assign RDBYP_S = 14'b1 ;
  assign RDBYPASS = 11'b00000000000;
  assign RDBYPASS_T = 0 ;
  assign RDBYPASS_S = 14'b1 ;
  assign SHFT = 11'b11111111111;
  assign SHFT_T = 0 ;
  assign SHFT_S = 14'b1 ;
  assign WDBQ_pr = WDBQ;
  logic [10:0] WDBQ_C1 ;
  logic [10:0] WDBQ_R1 ;
  logic [10:0] WDBQ_X1 ;
  assign WDBQ_pr_T = WDBQ_T ;
  assign WDBQ_C1 = WDBQ_pr_C ;
  assign WDBQ_R1 = WDBQ_pr_R ;
  assign WDBQ_X1 = WDBQ_pr_X ;
  assign WDBQ_pr_S = WDBQ_S ;
  assign WDQ = WDQ_pr;
  logic [10:0] WDQ_pr_C7 ;
  logic [10:0] WDQ_pr_R7 ;
  logic [10:0] WDQ_pr_X7 ;
  assign WDQ_T = WDQ_pr_T ;
  assign WDQ_pr_C7 = WDQ_C ;
  assign WDQ_pr_R7 = WDQ_R ;
  assign WDQ_pr_X7 = WDQ_X ;
  assign WDQ_S = WDQ_pr_S ;
  assign WMNexp = 11'b11111111111;
  assign WMNexp_T = 0 ;
  assign WMNexp_S = 14'b1 ;
  assign WRDCLK = WADRCLK;
  logic [0:0] WADRCLK_C0 ;
  logic [0:0] WADRCLK_R0 ;
  logic [0:0] WADRCLK_X0 ;
  assign WRDCLK_T = WADRCLK_T ;
  assign WADRCLK_C0 = WRDCLK_C ;
  assign WADRCLK_R0 = WRDCLK_R ;
  assign WADRCLK_X0 = WRDCLK_X ;
  assign WRDCLK_S = WADRCLK_S ;
  assign empadd = 1'b0;
  assign empadd_T = 0 ;
  assign empadd_S = 14'b1 ;
  assign force_x = 11'b00000000000;
  assign force_x_T = 0 ;
  assign force_x_S = 14'b1 ;
  assign fusePDEC0 = 8'b00000000;
  assign fusePDEC0_T = 0 ;
  assign fusePDEC0_S = 14'b1 ;
  assign fusePDEC1 = 8'b00000000;
  assign fusePDEC1_T = 0 ;
  assign fusePDEC1_S = 14'b1 ;
  assign fusePDEC2 = 8'b00000000;
  assign fusePDEC2_T = 0 ;
  assign fusePDEC2_S = 14'b1 ;
  assign fuseien = 1'b0;
  assign fuseien_T = 0 ;
  assign fuseien_S = 14'b1 ;
  assign latffclk = CLK;
  logic [0:0] CLK_C6 ;
  logic [0:0] CLK_R6 ;
  logic [0:0] CLK_X6 ;
  assign latffclk_T = CLK_T ;
  assign CLK_C6 = latffclk_C ;
  assign CLK_R6 = latffclk_R ;
  assign CLK_X6 = latffclk_X ;
  assign latffclk_S = CLK_S ;
  assign sel_normal = 11'b11111111111;
  assign sel_normal_T = 0 ;
  assign sel_normal_S = 14'b1 ;
  assign sel_redun = 11'b00000000000;
  assign sel_redun_T = 0 ;
  assign sel_redun_S = 14'b1 ;
  assign tiedvalid = legal;
  logic [0:0] legal_C4 ;
  logic [0:0] legal_R4 ;
  logic [0:0] legal_X4 ;
  assign tiedvalid_T = legal_T ;
  assign legal_C4 = tiedvalid_C ;
  assign legal_R4 = tiedvalid_R ;
  assign legal_X4 = tiedvalid_X ;
  assign tiedvalid_S = legal_S ;
  assign WADRCLK_C = ( WADRCLK_C0 );
  assign WrClk3_C = ( WrClk3_C0 );
  assign WrClk2_C = ( WrClk2_C0 );
  assign WrClk1_C = ( WrClk1_C0 );
  assign WMNQ_C = ( WMNQ_C0 ) | ( WMNQ_C1 ) | ( WMNQ_C2 ) | ( WMNQ_C3 );
  assign WrClk0_C = ( WrClk0_C0 );
  assign WA_C = ( WA_C0 );
  assign _001__C = ( _001__C0 );
  assign rmuxd3_C = ( rmuxd3_C0 );
  assign _041__C = ( _041__C0 );
  assign rmuxd2_C = ( rmuxd2_C0 );
  assign _040__C = ( _040__C0 );
  assign rmuxd1_C = ( rmuxd1_C0 );
  assign rmuxd0_C = ( rmuxd0_C0 );
  assign _017__C = ( _017__C0 );
  assign _016__C = ( _016__C0 );
  assign WDBQ_C = ( WDBQ_C0 ) | ( WDBQ_C1 );
  assign _015__C = ( _015__C0 );
  assign _014__C = ( _014__C0 );
  assign dout3_C = ( dout3_C0 );
  assign dout2_C = ( dout2_C0 );
  assign dout1_C = ( dout1_C0 );
  assign dout0_C = ( dout0_C0 );
  assign ADR_C = ( ADR_C0 );
  assign fangyuan5_C = ( fangyuan5_C0 );
  assign RE_LATB_C = ( RE_LATB_C0 );
  assign WE_LATB_C = ( WE_LATB_C0 );
  assign WE_C = ( WE_C0 );
  assign RE_C = ( RE_C0 );
  assign IDDQ_C = ( IDDQ_C0 );
  assign RADRCLK_C = ( RADRCLK_C0 );
  assign RET_EN_C = ( RET_EN_C0 );
  assign clobber_flops_C = ( clobber_flops_C0 );
  assign _002__C = ( _002__C0 );
  assign _000__C = ( _000__C0 );
  assign _004__C = ( _004__C0 ) | ( _004__C1 );
  assign _005__C = ( _005__C0 );
  assign RA_C = ( RA_C0 );
  assign _013__C = ( _013__C0 );
  assign _003__C = ( _003__C0 );
  assign _039__C = ( _039__C0 );
  assign fangyuan4_C = ( fangyuan4_C0 );
  assign RdClk3_C = ( RdClk3_C0 ) | ( RdClk3_C1 ) | ( RdClk3_C2 ) | ( RdClk3_C3 ) | ( RdClk3_C4 ) | ( RdClk3_C5 ) | ( RdClk3_C6 ) | ( RdClk3_C7 ) | ( RdClk3_C8 ) | ( RdClk3_C9 ) | ( RdClk3_C10 );
  assign _038__C = ( _038__C0 );
  assign fangyuan3_C = ( fangyuan3_C0 );
  assign RdClk2_C = ( RdClk2_C0 ) | ( RdClk2_C1 ) | ( RdClk2_C2 ) | ( RdClk2_C3 ) | ( RdClk2_C4 ) | ( RdClk2_C5 ) | ( RdClk2_C6 ) | ( RdClk2_C7 ) | ( RdClk2_C8 ) | ( RdClk2_C9 ) | ( RdClk2_C10 );
  assign _037__C = ( _037__C0 );
  assign fangyuan2_C = ( fangyuan2_C0 );
  assign RdClk1_C = ( RdClk1_C0 ) | ( RdClk1_C1 ) | ( RdClk1_C2 ) | ( RdClk1_C3 ) | ( RdClk1_C4 ) | ( RdClk1_C5 ) | ( RdClk1_C6 ) | ( RdClk1_C7 ) | ( RdClk1_C8 ) | ( RdClk1_C9 ) | ( RdClk1_C10 );
  assign _036__C = ( _036__C0 );
  assign fangyuan1_C = ( fangyuan1_C0 );
  assign RdClk0_C = ( RdClk0_C0 ) | ( RdClk0_C1 ) | ( RdClk0_C2 ) | ( RdClk0_C3 ) | ( RdClk0_C4 ) | ( RdClk0_C5 ) | ( RdClk0_C6 ) | ( RdClk0_C7 ) | ( RdClk0_C8 ) | ( RdClk0_C9 ) | ( RdClk0_C10 );
  assign _025__C = ( _025__C0 );
  assign _024__C = ( _024__C0 );
  assign _023__C = ( _023__C0 );
  assign _022__C = ( _022__C0 ) | ( _022__C1 );
  assign legal_C = ( legal_C0 ) | ( legal_C1 ) | ( legal_C2 ) | ( legal_C3 ) | ( legal_C4 );
  assign _021__C = ( _021__C0 );
  assign _035__C = ( _035__C0 ) | ( _035__C1 );
  assign _020__C = ( _020__C0 ) | ( _020__C1 );
  assign _034__C = ( _034__C0 );
  assign WECLK_C = ( WECLK_C0 ) | ( WECLK_C1 );
  assign _019__C = ( _019__C0 ) | ( _019__C1 );
  assign _033__C = ( _033__C0 ) | ( _033__C1 );
  assign _018__C = ( _018__C0 ) | ( _018__C1 );
  assign _032__C = ( _032__C0 );
  assign RECLK_C = ( RECLK_C0 ) | ( RECLK_C1 ) | ( RECLK_C2 );
  assign WDQ_pr_C = ( WDQ_pr_C0 ) | ( WDQ_pr_C1 ) | ( WDQ_pr_C2 ) | ( WDQ_pr_C3 ) | ( WDQ_pr_C4 ) | ( WDQ_pr_C5 ) | ( WDQ_pr_C6 ) | ( WDQ_pr_C7 );
  assign dout_C = ( dout_C0 );
  assign WD_C = ( WD_C0 );
  assign RADR_C = ( RADR_C0 ) | ( RADR_C1 ) | ( RADR_C2 ) | ( RADR_C3 ) | ( RADR_C4 ) | ( RADR_C5 ) | ( RADR_C6 ) | ( RADR_C7 );
  assign _031__C = ( _031__C0 );
  assign WAFF_C = ( WAFF_C0 ) | ( WAFF_C1 ) | ( WAFF_C2 ) | ( WAFF_C3 ) | ( WAFF_C4 ) | ( WAFF_C5 ) | ( WAFF_C6 );
  assign fangyuan0_C = ( fangyuan0_C0 );
  assign RWSEL_C = ( RWSEL_C0 ) | ( RWSEL_C1 ) | ( RWSEL_C2 ) | ( RWSEL_C3 ) | ( RWSEL_C4 ) | ( RWSEL_C5 ) | ( RWSEL_C6 ) | ( RWSEL_C7 ) | ( RWSEL_C8 ) | ( RWSEL_C9 ) | ( RWSEL_C10 ) | ( RWSEL_C11 ) | ( RWSEL_C12 ) | ( RWSEL_C13 ) | ( RWSEL_C14 ) | ( RWSEL_C15 ) | ( RWSEL_C16 ) | ( RWSEL_C17 );
  assign _029__C = ( _029__C0 );
  assign _030__C = ( _030__C0 ) | ( _030__C1 );
  assign _012__C = ( _012__C0 );
  assign _011__C = ( _011__C0 );
  assign _010__C = ( _010__C0 ) | ( _010__C1 );
  assign WE_FF_C = ( WE_FF_C0 );
  assign _009__C = ( _009__C0 );
  assign _028__C = ( _028__C0 ) | ( _028__C1 );
  assign _008__C = ( _008__C0 );
  assign _007__C = ( _007__C0 );
  assign CLAMPB_C = ( CLAMPB_C0 ) | ( CLAMPB_C1 );
  assign re_se_C = ( re_se_C0 ) | ( re_se_C1 );
  assign _006__C = ( _006__C0 );
  assign we_se_C = ( we_se_C0 ) | ( we_se_C1 );
  assign CLK_C = ( CLK_C0 ) | ( CLK_C1 ) | ( CLK_C2 ) | ( CLK_C3 ) | ( CLK_C4 ) | ( CLK_C5 ) | ( CLK_C6 );
  assign _027__C = ( _027__C0 ) | ( _027__C1 ) | ( _027__C2 ) | ( _027__C3 ) | ( _027__C4 ) | ( _027__C5 );
  assign _026__C = ( _026__C0 );
  assign RD_C = ( RD_C0 );
  assign WADRCLK_X = ( WADRCLK_X0 );
  assign WrClk3_X = ( WrClk3_X0 );
  assign WrClk2_X = ( WrClk2_X0 );
  assign WrClk1_X = ( WrClk1_X0 );
  assign WMNQ_X = ( WMNQ_X0 ) | ( WMNQ_X1 ) | ( WMNQ_X2 ) | ( WMNQ_X3 );
  assign WrClk0_X = ( WrClk0_X0 );
  assign WA_X = ( WA_X0 );
  assign _001__X = ( _001__X0 );
  assign rmuxd3_X = ( rmuxd3_X0 );
  assign _041__X = ( _041__X0 );
  assign rmuxd2_X = ( rmuxd2_X0 );
  assign _040__X = ( _040__X0 );
  assign rmuxd1_X = ( rmuxd1_X0 );
  assign rmuxd0_X = ( rmuxd0_X0 );
  assign _017__X = ( _017__X0 );
  assign _016__X = ( _016__X0 );
  assign WDBQ_X = ( WDBQ_X0 ) | ( WDBQ_X1 );
  assign _015__X = ( _015__X0 );
  assign _014__X = ( _014__X0 );
  assign dout3_X = ( dout3_X0 );
  assign dout2_X = ( dout2_X0 );
  assign dout1_X = ( dout1_X0 );
  assign dout0_X = ( dout0_X0 );
  assign ADR_X = ( ADR_X0 );
  assign fangyuan5_X = ( fangyuan5_X0 );
  assign RE_LATB_X = ( RE_LATB_X0 );
  assign WE_LATB_X = ( WE_LATB_X0 );
  assign WE_X = ( WE_X0 );
  assign RE_X = ( RE_X0 );
  assign IDDQ_X = ( IDDQ_X0 );
  assign RADRCLK_X = ( RADRCLK_X0 );
  assign RET_EN_X = ( RET_EN_X0 );
  assign clobber_flops_X = ( clobber_flops_X0 );
  assign _002__X = ( _002__X0 );
  assign _000__X = ( _000__X0 );
  assign _004__X = ( _004__X0 ) | ( _004__X1 );
  assign _005__X = ( _005__X0 );
  assign RA_X = ( RA_X0 );
  assign _013__X = ( _013__X0 );
  assign _003__X = ( _003__X0 );
  assign _039__X = ( _039__X0 );
  assign fangyuan4_X = ( fangyuan4_X0 );
  assign RdClk3_X = ( RdClk3_X0 ) | ( RdClk3_X1 ) | ( RdClk3_X2 ) | ( RdClk3_X3 ) | ( RdClk3_X4 ) | ( RdClk3_X5 ) | ( RdClk3_X6 ) | ( RdClk3_X7 ) | ( RdClk3_X8 ) | ( RdClk3_X9 ) | ( RdClk3_X10 );
  assign _038__X = ( _038__X0 );
  assign fangyuan3_X = ( fangyuan3_X0 );
  assign RdClk2_X = ( RdClk2_X0 ) | ( RdClk2_X1 ) | ( RdClk2_X2 ) | ( RdClk2_X3 ) | ( RdClk2_X4 ) | ( RdClk2_X5 ) | ( RdClk2_X6 ) | ( RdClk2_X7 ) | ( RdClk2_X8 ) | ( RdClk2_X9 ) | ( RdClk2_X10 );
  assign _037__X = ( _037__X0 );
  assign fangyuan2_X = ( fangyuan2_X0 );
  assign RdClk1_X = ( RdClk1_X0 ) | ( RdClk1_X1 ) | ( RdClk1_X2 ) | ( RdClk1_X3 ) | ( RdClk1_X4 ) | ( RdClk1_X5 ) | ( RdClk1_X6 ) | ( RdClk1_X7 ) | ( RdClk1_X8 ) | ( RdClk1_X9 ) | ( RdClk1_X10 );
  assign _036__X = ( _036__X0 );
  assign fangyuan1_X = ( fangyuan1_X0 );
  assign RdClk0_X = ( RdClk0_X0 ) | ( RdClk0_X1 ) | ( RdClk0_X2 ) | ( RdClk0_X3 ) | ( RdClk0_X4 ) | ( RdClk0_X5 ) | ( RdClk0_X6 ) | ( RdClk0_X7 ) | ( RdClk0_X8 ) | ( RdClk0_X9 ) | ( RdClk0_X10 );
  assign _025__X = ( _025__X0 );
  assign _024__X = ( _024__X0 );
  assign _023__X = ( _023__X0 );
  assign _022__X = ( _022__X0 ) | ( _022__X1 );
  assign legal_X = ( legal_X0 ) | ( legal_X1 ) | ( legal_X2 ) | ( legal_X3 ) | ( legal_X4 );
  assign _021__X = ( _021__X0 );
  assign _035__X = ( _035__X0 ) | ( _035__X1 );
  assign _020__X = ( _020__X0 ) | ( _020__X1 );
  assign _034__X = ( _034__X0 );
  assign WECLK_X = ( WECLK_X0 ) | ( WECLK_X1 );
  assign _019__X = ( _019__X0 ) | ( _019__X1 );
  assign _033__X = ( _033__X0 ) | ( _033__X1 );
  assign _018__X = ( _018__X0 ) | ( _018__X1 );
  assign _032__X = ( _032__X0 );
  assign RECLK_X = ( RECLK_X0 ) | ( RECLK_X1 ) | ( RECLK_X2 );
  assign WDQ_pr_X = ( WDQ_pr_X0 ) | ( WDQ_pr_X1 ) | ( WDQ_pr_X2 ) | ( WDQ_pr_X3 ) | ( WDQ_pr_X4 ) | ( WDQ_pr_X5 ) | ( WDQ_pr_X6 ) | ( WDQ_pr_X7 );
  assign dout_X = ( dout_X0 );
  assign WD_X = ( WD_X0 );
  assign RADR_X = ( RADR_X0 ) | ( RADR_X1 ) | ( RADR_X2 ) | ( RADR_X3 ) | ( RADR_X4 ) | ( RADR_X5 ) | ( RADR_X6 ) | ( RADR_X7 );
  assign _031__X = ( _031__X0 );
  assign WAFF_X = ( WAFF_X0 ) | ( WAFF_X1 ) | ( WAFF_X2 ) | ( WAFF_X3 ) | ( WAFF_X4 ) | ( WAFF_X5 ) | ( WAFF_X6 );
  assign fangyuan0_X = ( fangyuan0_X0 );
  assign RWSEL_X = ( RWSEL_X0 ) | ( RWSEL_X1 ) | ( RWSEL_X2 ) | ( RWSEL_X3 ) | ( RWSEL_X4 ) | ( RWSEL_X5 ) | ( RWSEL_X6 ) | ( RWSEL_X7 ) | ( RWSEL_X8 ) | ( RWSEL_X9 ) | ( RWSEL_X10 ) | ( RWSEL_X11 ) | ( RWSEL_X12 ) | ( RWSEL_X13 ) | ( RWSEL_X14 ) | ( RWSEL_X15 ) | ( RWSEL_X16 ) | ( RWSEL_X17 );
  assign _029__X = ( _029__X0 );
  assign _030__X = ( _030__X0 ) | ( _030__X1 );
  assign _012__X = ( _012__X0 );
  assign _011__X = ( _011__X0 );
  assign _010__X = ( _010__X0 ) | ( _010__X1 );
  assign WE_FF_X = ( WE_FF_X0 );
  assign _009__X = ( _009__X0 );
  assign _028__X = ( _028__X0 ) | ( _028__X1 );
  assign _008__X = ( _008__X0 );
  assign _007__X = ( _007__X0 );
  assign CLAMPB_X = ( CLAMPB_X0 ) | ( CLAMPB_X1 );
  assign re_se_X = ( re_se_X0 ) | ( re_se_X1 );
  assign _006__X = ( _006__X0 );
  assign we_se_X = ( we_se_X0 ) | ( we_se_X1 );
  assign CLK_X = ( CLK_X0 ) | ( CLK_X1 ) | ( CLK_X2 ) | ( CLK_X3 ) | ( CLK_X4 ) | ( CLK_X5 ) | ( CLK_X6 );
  assign _027__X = ( _027__X0 ) | ( _027__X1 ) | ( _027__X2 ) | ( _027__X3 ) | ( _027__X4 ) | ( _027__X5 );
  assign _026__X = ( _026__X0 );
  assign RD_X = ( RD_X0 );
  assign WADRCLK_R = ( WADRCLK_X0 & WADRCLK_R0 );
  assign WrClk3_R = ( WrClk3_X0 & WrClk3_R0 );
  assign WrClk2_R = ( WrClk2_X0 & WrClk2_R0 );
  assign WrClk1_R = ( WrClk1_X0 & WrClk1_R0 );
  assign WMNQ_R = ( WMNQ_X0 & WMNQ_R0 ) | ( WMNQ_X1 & WMNQ_R1 ) | ( WMNQ_X2 & WMNQ_R2 ) | ( WMNQ_X3 & WMNQ_R3 );
  assign WrClk0_R = ( WrClk0_X0 & WrClk0_R0 );
  assign WA_R = ( WA_X0 & WA_R0 );
  assign _001__R = ( _001__X0 & _001__R0 );
  assign rmuxd3_R = ( rmuxd3_X0 & rmuxd3_R0 );
  assign _041__R = ( _041__X0 & _041__R0 );
  assign rmuxd2_R = ( rmuxd2_X0 & rmuxd2_R0 );
  assign _040__R = ( _040__X0 & _040__R0 );
  assign rmuxd1_R = ( rmuxd1_X0 & rmuxd1_R0 );
  assign rmuxd0_R = ( rmuxd0_X0 & rmuxd0_R0 );
  assign _017__R = ( _017__X0 & _017__R0 );
  assign _016__R = ( _016__X0 & _016__R0 );
  assign WDBQ_R = ( WDBQ_X0 & WDBQ_R0 ) | ( WDBQ_X1 & WDBQ_R1 );
  assign _015__R = ( _015__X0 & _015__R0 );
  assign _014__R = ( _014__X0 & _014__R0 );
  assign dout3_R = ( dout3_X0 & dout3_R0 );
  assign dout2_R = ( dout2_X0 & dout2_R0 );
  assign dout1_R = ( dout1_X0 & dout1_R0 );
  assign dout0_R = ( dout0_X0 & dout0_R0 );
  assign ADR_R = ( ADR_X0 & ADR_R0 );
  assign fangyuan5_R = ( fangyuan5_X0 & fangyuan5_R0 );
  assign RE_LATB_R = ( RE_LATB_X0 & RE_LATB_R0 );
  assign WE_LATB_R = ( WE_LATB_X0 & WE_LATB_R0 );
  assign WE_R = ( WE_X0 & WE_R0 );
  assign RE_R = ( RE_X0 & RE_R0 );
  assign IDDQ_R = ( IDDQ_X0 & IDDQ_R0 );
  assign RADRCLK_R = ( RADRCLK_X0 & RADRCLK_R0 );
  assign RET_EN_R = ( RET_EN_X0 & RET_EN_R0 );
  assign clobber_flops_R = ( clobber_flops_X0 & clobber_flops_R0 );
  assign _002__R = ( _002__X0 & _002__R0 );
  assign _000__R = ( _000__X0 & _000__R0 );
  assign _004__R = ( _004__X0 & _004__R0 ) | ( _004__X1 & _004__R1 );
  assign _005__R = ( _005__X0 & _005__R0 );
  assign RA_R = ( RA_X0 & RA_R0 );
  assign _013__R = ( _013__X0 & _013__R0 );
  assign _003__R = ( _003__X0 & _003__R0 );
  assign _039__R = ( _039__X0 & _039__R0 );
  assign fangyuan4_R = ( fangyuan4_X0 & fangyuan4_R0 );
  assign RdClk3_R = ( RdClk3_X0 & RdClk3_R0 ) | ( RdClk3_X1 & RdClk3_R1 ) | ( RdClk3_X2 & RdClk3_R2 ) | ( RdClk3_X3 & RdClk3_R3 ) | ( RdClk3_X4 & RdClk3_R4 ) | ( RdClk3_X5 & RdClk3_R5 ) | ( RdClk3_X6 & RdClk3_R6 ) | ( RdClk3_X7 & RdClk3_R7 ) | ( RdClk3_X8 & RdClk3_R8 ) | ( RdClk3_X9 & RdClk3_R9 ) | ( RdClk3_X10 & RdClk3_R10 );
  assign _038__R = ( _038__X0 & _038__R0 );
  assign fangyuan3_R = ( fangyuan3_X0 & fangyuan3_R0 );
  assign RdClk2_R = ( RdClk2_X0 & RdClk2_R0 ) | ( RdClk2_X1 & RdClk2_R1 ) | ( RdClk2_X2 & RdClk2_R2 ) | ( RdClk2_X3 & RdClk2_R3 ) | ( RdClk2_X4 & RdClk2_R4 ) | ( RdClk2_X5 & RdClk2_R5 ) | ( RdClk2_X6 & RdClk2_R6 ) | ( RdClk2_X7 & RdClk2_R7 ) | ( RdClk2_X8 & RdClk2_R8 ) | ( RdClk2_X9 & RdClk2_R9 ) | ( RdClk2_X10 & RdClk2_R10 );
  assign _037__R = ( _037__X0 & _037__R0 );
  assign fangyuan2_R = ( fangyuan2_X0 & fangyuan2_R0 );
  assign RdClk1_R = ( RdClk1_X0 & RdClk1_R0 ) | ( RdClk1_X1 & RdClk1_R1 ) | ( RdClk1_X2 & RdClk1_R2 ) | ( RdClk1_X3 & RdClk1_R3 ) | ( RdClk1_X4 & RdClk1_R4 ) | ( RdClk1_X5 & RdClk1_R5 ) | ( RdClk1_X6 & RdClk1_R6 ) | ( RdClk1_X7 & RdClk1_R7 ) | ( RdClk1_X8 & RdClk1_R8 ) | ( RdClk1_X9 & RdClk1_R9 ) | ( RdClk1_X10 & RdClk1_R10 );
  assign _036__R = ( _036__X0 & _036__R0 );
  assign fangyuan1_R = ( fangyuan1_X0 & fangyuan1_R0 );
  assign RdClk0_R = ( RdClk0_X0 & RdClk0_R0 ) | ( RdClk0_X1 & RdClk0_R1 ) | ( RdClk0_X2 & RdClk0_R2 ) | ( RdClk0_X3 & RdClk0_R3 ) | ( RdClk0_X4 & RdClk0_R4 ) | ( RdClk0_X5 & RdClk0_R5 ) | ( RdClk0_X6 & RdClk0_R6 ) | ( RdClk0_X7 & RdClk0_R7 ) | ( RdClk0_X8 & RdClk0_R8 ) | ( RdClk0_X9 & RdClk0_R9 ) | ( RdClk0_X10 & RdClk0_R10 );
  assign _025__R = ( _025__X0 & _025__R0 );
  assign _024__R = ( _024__X0 & _024__R0 );
  assign _023__R = ( _023__X0 & _023__R0 );
  assign _022__R = ( _022__X0 & _022__R0 ) | ( _022__X1 & _022__R1 );
  assign legal_R = ( legal_X0 & legal_R0 ) | ( legal_X1 & legal_R1 ) | ( legal_X2 & legal_R2 ) | ( legal_X3 & legal_R3 ) | ( legal_X4 & legal_R4 );
  assign _021__R = ( _021__X0 & _021__R0 );
  assign _035__R = ( _035__X0 & _035__R0 ) | ( _035__X1 & _035__R1 );
  assign _020__R = ( _020__X0 & _020__R0 ) | ( _020__X1 & _020__R1 );
  assign _034__R = ( _034__X0 & _034__R0 );
  assign WECLK_R = ( WECLK_X0 & WECLK_R0 ) | ( WECLK_X1 & WECLK_R1 );
  assign _019__R = ( _019__X0 & _019__R0 ) | ( _019__X1 & _019__R1 );
  assign _033__R = ( _033__X0 & _033__R0 ) | ( _033__X1 & _033__R1 );
  assign _018__R = ( _018__X0 & _018__R0 ) | ( _018__X1 & _018__R1 );
  assign _032__R = ( _032__X0 & _032__R0 );
  assign RECLK_R = ( RECLK_X0 & RECLK_R0 ) | ( RECLK_X1 & RECLK_R1 ) | ( RECLK_X2 & RECLK_R2 );
  assign WDQ_pr_R = ( WDQ_pr_X0 & WDQ_pr_R0 ) | ( WDQ_pr_X1 & WDQ_pr_R1 ) | ( WDQ_pr_X2 & WDQ_pr_R2 ) | ( WDQ_pr_X3 & WDQ_pr_R3 ) | ( WDQ_pr_X4 & WDQ_pr_R4 ) | ( WDQ_pr_X5 & WDQ_pr_R5 ) | ( WDQ_pr_X6 & WDQ_pr_R6 ) | ( WDQ_pr_X7 & WDQ_pr_R7 );
  assign dout_R = ( dout_X0 & dout_R0 );
  assign WD_R = ( WD_X0 & WD_R0 );
  assign RADR_R = ( RADR_X0 & RADR_R0 ) | ( RADR_X1 & RADR_R1 ) | ( RADR_X2 & RADR_R2 ) | ( RADR_X3 & RADR_R3 ) | ( RADR_X4 & RADR_R4 ) | ( RADR_X5 & RADR_R5 ) | ( RADR_X6 & RADR_R6 ) | ( RADR_X7 & RADR_R7 );
  assign _031__R = ( _031__X0 & _031__R0 );
  assign WAFF_R = ( WAFF_X0 & WAFF_R0 ) | ( WAFF_X1 & WAFF_R1 ) | ( WAFF_X2 & WAFF_R2 ) | ( WAFF_X3 & WAFF_R3 ) | ( WAFF_X4 & WAFF_R4 ) | ( WAFF_X5 & WAFF_R5 ) | ( WAFF_X6 & WAFF_R6 );
  assign fangyuan0_R = ( fangyuan0_X0 & fangyuan0_R0 );
  assign RWSEL_R = ( RWSEL_X0 & RWSEL_R0 ) | ( RWSEL_X1 & RWSEL_R1 ) | ( RWSEL_X2 & RWSEL_R2 ) | ( RWSEL_X3 & RWSEL_R3 ) | ( RWSEL_X4 & RWSEL_R4 ) | ( RWSEL_X5 & RWSEL_R5 ) | ( RWSEL_X6 & RWSEL_R6 ) | ( RWSEL_X7 & RWSEL_R7 ) | ( RWSEL_X8 & RWSEL_R8 ) | ( RWSEL_X9 & RWSEL_R9 ) | ( RWSEL_X10 & RWSEL_R10 ) | ( RWSEL_X11 & RWSEL_R11 ) | ( RWSEL_X12 & RWSEL_R12 ) | ( RWSEL_X13 & RWSEL_R13 ) | ( RWSEL_X14 & RWSEL_R14 ) | ( RWSEL_X15 & RWSEL_R15 ) | ( RWSEL_X16 & RWSEL_R16 ) | ( RWSEL_X17 & RWSEL_R17 );
  assign _029__R = ( _029__X0 & _029__R0 );
  assign _030__R = ( _030__X0 & _030__R0 ) | ( _030__X1 & _030__R1 );
  assign _012__R = ( _012__X0 & _012__R0 );
  assign _011__R = ( _011__X0 & _011__R0 );
  assign _010__R = ( _010__X0 & _010__R0 ) | ( _010__X1 & _010__R1 );
  assign WE_FF_R = ( WE_FF_X0 & WE_FF_R0 );
  assign _009__R = ( _009__X0 & _009__R0 );
  assign _028__R = ( _028__X0 & _028__R0 ) | ( _028__X1 & _028__R1 );
  assign _008__R = ( _008__X0 & _008__R0 );
  assign _007__R = ( _007__X0 & _007__R0 );
  assign CLAMPB_R = ( CLAMPB_X0 & CLAMPB_R0 ) | ( CLAMPB_X1 & CLAMPB_R1 );
  assign re_se_R = ( re_se_X0 & re_se_R0 ) | ( re_se_X1 & re_se_R1 );
  assign _006__R = ( _006__X0 & _006__R0 );
  assign we_se_R = ( we_se_X0 & we_se_R0 ) | ( we_se_X1 & we_se_R1 );
  assign CLK_R = ( CLK_X0 & CLK_R0 ) | ( CLK_X1 & CLK_R1 ) | ( CLK_X2 & CLK_R2 ) | ( CLK_X3 & CLK_R3 ) | ( CLK_X4 & CLK_R4 ) | ( CLK_X5 & CLK_R5 ) | ( CLK_X6 & CLK_R6 );
  assign _027__R = ( _027__X0 & _027__R0 ) | ( _027__X1 & _027__R1 ) | ( _027__X2 & _027__R2 ) | ( _027__X3 & _027__R3 ) | ( _027__X4 & _027__R4 ) | ( _027__X5 & _027__R5 );
  assign _026__R = ( _026__X0 & _026__R0 );
  assign RD_R = ( RD_X0 & RD_R0 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { BADBIT_R , BADBIT_C , BADBIT_X , CAPT_DIS_R , CAPT_DIS_C , CAPT_DIS_X , PDEC0_R , PDEC0_C , PDEC0_X , PDEC1_R , PDEC1_C , PDEC1_X , PDEC2_R , PDEC2_C , PDEC2_X , RADRSWI_R , RADRSWI_C , RADRSWI_X , RDBYP_R , RDBYP_C , RDBYP_X , RDBYPASS_R , RDBYPASS_C , RDBYPASS_X , SHFT_R , SHFT_C , SHFT_X , WDBQ_pr_R , WDBQ_pr_C , WDBQ_pr_X , WDQ_R , WDQ_C , WDQ_X , WMNexp_R , WMNexp_C , WMNexp_X , WRDCLK_R , WRDCLK_C , WRDCLK_X , empadd_R , empadd_C , empadd_X , force_x_R , force_x_C , force_x_X , fusePDEC0_R , fusePDEC0_C , fusePDEC0_X , fusePDEC1_R , fusePDEC1_C , fusePDEC1_X , fusePDEC2_R , fusePDEC2_C , fusePDEC2_X , fuseien_R , fuseien_C , fuseien_X , latffclk_R , latffclk_C , latffclk_X , sel_normal_R , sel_normal_C , sel_normal_X , sel_redun_R , sel_redun_C , sel_redun_X , tiedvalid_R , tiedvalid_C , tiedvalid_X  } = 0;
  always @( posedge WADRCLK ) begin
    if( rst_zy ) WDQ_pr_PREV_VAL1 <= 0 ;
    if( rst_zy ) WDQ_pr_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) WDQ_pr_PREV_VAL1 <= WDQ_pr ;
    if( INSTR_IN_ZY ) WDQ_pr_PREV_VAL2 <= WDQ_pr_PREV_VAL1 ;
  end
  always @( posedge WADRCLK ) begin
    if( rst_zy ) WAFF_PREV_VAL1 <= 0 ;
    if( rst_zy ) WAFF_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) WAFF_PREV_VAL1 <= WAFF ;
    if( INSTR_IN_ZY ) WAFF_PREV_VAL2 <= WAFF_PREV_VAL1 ;
  end
 // ground taints for unused wire slices
  assign { ADR_R0 [0], ADR_R0 [1], ADR_R0 [2], ADR_R0 [3], ADR_R0 [4], ADR_R0 [5], ADR_R0 [6], ADR_R0 [7] } = 0;
  assign { ADR_X0 [0], ADR_X0 [1], ADR_X0 [2], ADR_X0 [3], ADR_X0 [4], ADR_X0 [5], ADR_X0 [6], ADR_X0 [7] } = 0;
  assign { ADR_C0 [0], ADR_C0 [1], ADR_C0 [2], ADR_C0 [3], ADR_C0 [4], ADR_C0 [5], ADR_C0 [6], ADR_C0 [7] } = 0;
  assign { WAFF_R6 [0], WAFF_R6 [1] } = 0;
  assign { WAFF_X6 [0], WAFF_X6 [1] } = 0;
  assign { WAFF_C6 [0], WAFF_C6 [1] } = 0;
  assert property( RADR_r_flag == 0 || RADR_PREV_VAL1 == RADR_PREV_VAL2 );
  assert property( RE_LATB_r_flag == 0 || RE_LATB_PREV_VAL1 == RE_LATB_PREV_VAL2 );
  assert property( WAFF_r_flag == 0 || WAFF_PREV_VAL1 == WAFF_PREV_VAL2 );
  assert property( WDQ_pr_r_flag == 0 || WDQ_pr_PREV_VAL1 == WDQ_pr_PREV_VAL2 );
  assert property( WE_FF_r_flag == 0 || WE_FF_PREV_VAL1 == WE_FF_PREV_VAL2 );
  assert property( WE_LATB_r_flag == 0 || WE_LATB_PREV_VAL1 == WE_LATB_PREV_VAL2 );
  assert property( dout_r_flag == 0 || dout_PREV_VAL1 == dout_PREV_VAL2 );
endmodule
