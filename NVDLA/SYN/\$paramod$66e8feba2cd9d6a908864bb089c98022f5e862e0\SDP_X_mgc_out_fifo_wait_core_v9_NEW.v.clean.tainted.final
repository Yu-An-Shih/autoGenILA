module \$paramod$66e8feba2cd9d6a908864bb089c98022f5e862e0\SDP_X_mgc_out_fifo_wait_core_v9 ( arst , clk , d , en , ld , srst , vz , INSTR_IN_ZY , arst_T , arst_S , clk_T , clk_S , d_T , d_S , en_T , en_S , ld_T , ld_S , lz_R0 , sd_R0 , srst_T , srst_S , vd_R0 , vz_T , vz_S , z_R0 , lz , sd , vd , z , arst_R , clk_R , d_R , en_R , ld_R , lz_T , lz_S , sd_T , sd_S , srst_R , vd_T , vd_S , vz_R , z_T , z_S );
  logic rst_zy;
  integer i;
  input INSTR_IN_ZY;
  logic [799:0] _00_;
  logic [799:0] _00__T ;
  logic [799:0] _00__R ;
  logic [13:0] _00__S ;
  logic _01_;
  logic _01__T ;
  logic _01__R ;
  logic [13:0] _01__S ;
  logic _02_;
  logic _02__T ;
  logic _02__R ;
  logic [13:0] _02__S ;
  logic _03_;
  logic _03__T ;
  logic _03__R ;
  logic [13:0] _03__S ;
  logic _04_;
  logic _04__T ;
  logic _04__R ;
  logic [13:0] _04__S ;
  logic _05_;
  logic _05__T ;
  logic _05__R ;
  logic [13:0] _05__S ;
  logic _06_;
  logic _06__T ;
  logic _06__R ;
  logic [13:0] _06__S ;
  logic _07_;
  logic _07__T ;
  logic _07__R ;
  logic [13:0] _07__S ;
  logic _08_;
  logic _08__T ;
  logic _08__R ;
  logic [13:0] _08__S ;
  logic _09_;
  logic _09__T ;
  logic _09__R ;
  logic [13:0] _09__S ;
  logic _10_;
  logic _10__T ;
  logic _10__R ;
  logic [13:0] _10__S ;
  logic _11_;
  logic _11__T ;
  logic _11__R ;
  logic [13:0] _11__S ;
  logic _12_;
  logic _12__T ;
  logic _12__R ;
  logic [13:0] _12__S ;
  logic [799:0] _13_;
  logic [799:0] _13__T ;
  logic [799:0] _13__R ;
  logic [13:0] _13__S ;
  logic _14_;
  logic _14__T ;
  logic _14__R ;
  logic [13:0] _14__S ;
  logic [31:0] \FIFO_REG.delta ;
  logic [31:0] \FIFO_REG.delta_T ;
  logic [31:0] \FIFO_REG.delta_R ;
  logic [13:0] \FIFO_REG.delta_S ;
  logic active;
  logic active_T ;
  logic active_R ;
  logic [13:0] active_S ;
  input arst;
  input arst_T ;
  output arst_R ;
  input [13:0] arst_S ;
  logic [799:0] buff;
  logic [799:0]  buff_T ;
  logic [799:0]  buff_PREV_VAL1 ;
  logic [799:0]  buff_PREV_VAL2 ;
  logic [799:0]  buff_R ;
  logic [13:0] buff_S ;
  logic buff_t_flag ;
  logic buff_r_flag ;
  assign buff_S = 9 ;
  logic [799:0] buff_nxt;
  logic [799:0] buff_nxt_T ;
  logic [799:0] buff_nxt_R ;
  logic [13:0] buff_nxt_S ;
  logic [799:0] buff_pre;
  logic [799:0] buff_pre_T ;
  logic [799:0] buff_pre_R ;
  logic [13:0] buff_pre_S ;
  input clk;
  input clk_T ;
  output clk_R ;
  input [13:0] clk_S ;
  logic count;
  logic count_T ;
  logic count_R ;
  logic [13:0] count_S ;
  logic [31:0] count_t;
  logic [31:0] count_t_T ;
  logic [31:0] count_t_R ;
  logic [13:0] count_t_S ;
  input [799:0] d;
  input [799:0] d_T ;
  output [799:0] d_R ;
  input [13:0] d_S ;
  input en;
  input en_T ;
  output en_R ;
  input [13:0] en_S ;
  logic en_l;
  logic en_l_T ;
  logic en_l_R ;
  logic [13:0] en_l_S ;
  logic en_l_s;
  logic en_l_s_T ;
  logic en_l_s_R ;
  logic [13:0] en_l_s_S ;
  logic en_l_var;
  logic en_l_var_T ;
  logic en_l_var_R ;
  logic [13:0] en_l_var_S ;
  logic [31:0] i;
  logic [31:0] i_T ;
  logic [31:0] i_R ;
  logic [13:0] i_S ;
  input ld;
  input ld_T ;
  output ld_R ;
  input [13:0] ld_S ;
  output lz;
  logic lz ;
  output lz_T ;
  logic lz_T ;
  logic lz_R ;
  logic [13:0] lz_S ;
  input lz_R0 ;
  output [13:0] lz_S ;
  logic [32:0] n_elem;
  logic [32:0] n_elem_T ;
  logic [32:0] n_elem_R ;
  logic [13:0] n_elem_S ;
  output [1:0] sd;
  logic [1:0] sd ;
  output [1:0] sd_T ;
  logic [1:0] sd_T ;
  logic [1:0] sd_R ;
  logic [13:0] sd_S ;
  input [1:0] sd_R0 ;
  output [13:0] sd_S ;
  logic [32:0] size_t;
  logic [32:0] size_t_T ;
  logic [32:0] size_t_R ;
  logic [13:0] size_t_S ;
  input srst;
  input srst_T ;
  output srst_R ;
  input [13:0] srst_S ;
  logic stat;
  logic  stat_T ;
  logic  stat_PREV_VAL1 ;
  logic  stat_PREV_VAL2 ;
  logic  stat_R ;
  logic [13:0] stat_S ;
  logic stat_t_flag ;
  logic stat_r_flag ;
  assign stat_S = 10 ;
  logic stat_after;
  logic stat_after_T ;
  logic stat_after_R ;
  logic [13:0] stat_after_S ;
  logic stat_before;
  logic stat_before_T ;
  logic stat_before_R ;
  logic [13:0] stat_before_S ;
  logic stat_nxt;
  logic stat_nxt_T ;
  logic stat_nxt_R ;
  logic [13:0] stat_nxt_S ;
  logic stat_pre;
  logic stat_pre_T ;
  logic stat_pre_R ;
  logic [13:0] stat_pre_S ;
  output vd;
  logic vd ;
  output vd_T ;
  logic vd_T ;
  logic vd_R ;
  logic [13:0] vd_S ;
  input vd_R0 ;
  output [13:0] vd_S ;
  input vz;
  input vz_T ;
  output vz_R ;
  input [13:0] vz_S ;
  output [799:0] z;
  logic [799:0] z ;
  output [799:0] z_T ;
  logic [799:0] z_T ;
  logic [799:0] z_R ;
  logic [13:0] z_S ;
  input [799:0] z_R0 ;
  output [13:0] z_S ;
  logic [1:0] fangyuan0;
  logic [1:0] fangyuan0_T ;
  logic [1:0] fangyuan0_R ;
  assign fangyuan0 = { \FIFO_REG.delta [31], \FIFO_REG.delta [0] };
  assign fangyuan0_T = {  \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [0]  };
  logic [13:0] fangyuan0_S ;
  assign fangyuan0_S = 0 ;
  logic [31:0] \FIFO_REG.delta_R0 ;
  assign \FIFO_REG.delta_R0 [31:31] = fangyuan0_R [1:1] ;
  assign \FIFO_REG.delta_R0 [0:0] = fangyuan0_R [0:0] ;
  assign sd = stat + fangyuan0;
  assign sd_S = 0 ;
  logic [0:0] stat_R0 ;
  logic [1:0] fangyuan0_R0 ;
  assign sd_T = stat_T | fangyuan0_T ;
  assign stat_R0 = sd_R ;
  assign fangyuan0_R0 = sd_R ;
  assign _02_ = vz & stat;
  assign _02__S = 0 ;
  logic [0:0] vz_R0 ;
  logic [0:0] stat_R1 ;
  assign _02__T = ( vz_T & stat ) | ( stat_T & vz ) ;
  assign vz_R0 = _02__R & { 1{ stat != 0 }} ;
  assign stat_R1 = _02__R & { 1{ vz != 0 }} ;
  assign \FIFO_REG.delta [31] = _06_ & _02_;
  assign \FIFO_REG.delta_S = 0 ;
  logic [0:0] _06__R0 ;
  logic [0:0] _02__R0 ;
  assign \FIFO_REG.delta_T [31] = ( _06__T & _02_ ) | ( _02__T & _06_ ) ;
  assign _06__R0 = \FIFO_REG.delta_R [31] & { 1{ _02_ != 0 }} ;
  assign _02__R0 = \FIFO_REG.delta_R [31] & { 1{ _06_ != 0 }} ;
  assign _03_ = stat & _08_;
  assign _03__S = 0 ;
  logic [0:0] stat_R2 ;
  logic [0:0] _08__R0 ;
  assign _03__T = ( stat_T & _08_ ) | ( _08__T & stat ) ;
  assign stat_R2 = _03__R & { 1{ _08_ != 0 }} ;
  assign _08__R0 = _03__R & { 1{ stat != 0 }} ;
  assign _04_ = stat & ld;
  assign _04__S = 0 ;
  logic [0:0] stat_R3 ;
  logic [0:0] ld_R0 ;
  assign _04__T = ( stat_T & ld ) | ( ld_T & stat ) ;
  assign stat_R3 = _04__R & { 1{ ld != 0 }} ;
  assign ld_R0 = _04__R & { 1{ stat != 0 }} ;
  assign _05_ = ld & _08_;
  assign _05__S = 0 ;
  logic [0:0] ld_R1 ;
  logic [0:0] _08__R1 ;
  assign _05__T = ( ld_T & _08_ ) | ( _08__T & ld ) ;
  assign ld_R1 = _05__R & { 1{ _08_ != 0 }} ;
  assign _08__R1 = _05__R & { 1{ ld != 0 }} ;
  assign en_l_var = ld & _09_;
  assign en_l_var_S = 0 ;
  logic [0:0] ld_R2 ;
  logic [0:0] _09__R0 ;
  assign en_l_var_T = ( ld_T & _09_ ) | ( _09__T & ld ) ;
  assign ld_R2 = en_l_var_R & { 1{ _09_ != 0 }} ;
  assign _09__R0 = en_l_var_R & { 1{ ld != 0 }} ;
  assign _06_ = ~ ld;
  logic [0:0] ld_R3 ;
  assign _06__T = ld_T ;
  assign ld_R3 = _06__R ;
  assign _06__S = 0 ;
  assign _07_ = ~ stat;
  logic [0:0] stat_R4 ;
  assign _07__T = stat_T ;
  assign stat_R4 = _07__R ;
  assign _07__S = 0 ;
  assign _08_ = ~ vz;
  logic [0:0] vz_R1 ;
  assign _08__T = vz_T ;
  assign vz_R1 = _08__R ;
  assign _08__S = 0 ;
  assign _09_ = ~ _03_;
  logic [0:0] _03__R0 ;
  assign _09__T = _03__T ;
  assign _03__R0 = _09__R ;
  assign _09__S = 0 ;
  assign _10_ = ~ active;
  logic [0:0] active_R0 ;
  assign _10__T = active_T ;
  assign active_R0 = _10__R ;
  assign _10__S = 0 ;
  assign _11_ = ~ en_l_var;
  logic [0:0] en_l_var_R0 ;
  assign _11__T = en_l_var_T ;
  assign en_l_var_R0 = _11__R ;
  assign _11__S = 0 ;
  assign active = ld | vz;
  assign active_S = 0 ;
  logic [0:0] ld_R4 ;
  logic [0:0] vz_R2 ;
  assign active_T = ( ld_T & ~vz ) | ( vz_T & ~ld ) ;
  assign ld_R4 = active_R & { 1{ vz != 1'b1 }} ;
  assign vz_R2 = active_R & { 1{ ld != 1'b1 }} ;
  assign vd = vz | _07_;
  assign vd_S = 0 ;
  logic [0:0] vz_R3 ;
  logic [0:0] _07__R0 ;
  assign vd_T = ( vz_T & ~_07_ ) | ( _07__T & ~vz ) ;
  assign vz_R3 = vd_R & { 1{ _07_ != 1'b1 }} ;
  assign _07__R0 = vd_R & { 1{ vz != 1'b1 }} ;
  assign lz = ld | stat;
  assign lz_S = 0 ;
  logic [0:0] ld_R5 ;
  logic [0:0] stat_R5 ;
  assign lz_T = ( ld_T & ~stat ) | ( stat_T & ~ld ) ;
  assign ld_R5 = lz_R & { 1{ stat != 1'b1 }} ;
  assign stat_R5 = lz_R & { 1{ ld != 1'b1 }} ;
  assign _12_ = _03_ | _04_;
  assign _12__S = 0 ;
  logic [0:0] _03__R1 ;
  logic [0:0] _04__R0 ;
  assign _12__T = ( _03__T & ~_04_ ) | ( _04__T & ~_03_ ) ;
  assign _03__R1 = _12__R & { 1{ _04_ != 1'b1 }} ;
  assign _04__R0 = _12__R & { 1{ _03_ != 1'b1 }} ;
  assign stat_pre = _12_ | _05_;
  assign stat_pre_S = 0 ;
  logic [0:0] _12__R0 ;
  logic [0:0] _05__R0 ;
  assign stat_pre_T = ( _12__T & ~_05_ ) | ( _05__T & ~_12_ ) ;
  assign _12__R0 = stat_pre_R & { 1{ _05_ != 1'b1 }} ;
  assign _05__R0 = stat_pre_R & { 1{ _12_ != 1'b1 }} ;
  assign en_l_s = en | _10_;
  assign en_l_s_S = 0 ;
  logic [0:0] en_R0 ;
  logic [0:0] _10__R0 ;
  assign en_l_s_T = ( en_T & ~_10_ ) | ( _10__T & ~en ) ;
  assign en_R0 = en_l_s_R & { 1{ _10_ != 1'b1 }} ;
  assign _10__R0 = en_l_s_R & { 1{ en != 1'b1 }} ;
  assign en_l = en | _11_;
  assign en_l_S = 0 ;
  logic [0:0] en_R1 ;
  logic [0:0] _11__R0 ;
  assign en_l_T = ( en_T & ~_11_ ) | ( _11__T & ~en ) ;
  assign en_R1 = en_l_R & { 1{ _11_ != 1'b1 }} ;
  assign _11__R0 = en_l_R & { 1{ en != 1'b1 }} ;
  always @(posedge clk or negedge arst)
    if (!arst)
      buff <= 800'b
    else
      buff <= _00_;
  logic [799:0] _00__R0 ;
  assign _00__R0 = _00__T & { 800{ buff_S != _00__S }} ;
  always @( posedge clk )
      buff_T 		<= !arst ? 0 : ( _00__T & ( buff_T | { 800{ buff_S != _00__S }} ));
  always @( posedge clk )
      buff_t_flag 	<= !arst ? 0 : buff_t_flag ? 1 : | _00__T & ( buff_S != _00__S );
  always @( posedge clk )
      buff_r_flag 	<= !arst ? 0 : buff_r_flag ? 1 : buff_t_flag ? 0 : ( (| buff_R ) && (buff != 0) ) ;
  always @(posedge clk or negedge arst)
    if (!arst)
      stat <= 1'b0;
    else
      stat <= _01_;
  logic [0:0] _01__R0 ;
  assign _01__R0 = _01__T & { 1{ stat_S != _01__S }} ;
  always @( posedge clk )
      stat_T 		<= !arst ? 0 : ( _01__T & ( stat_T | { 1{ stat_S != _01__S }} ));
  always @( posedge clk )
      stat_t_flag 	<= !arst ? 0 : stat_t_flag ? 1 : | _01__T & ( stat_S != _01__S );
  always @( posedge clk )
      stat_r_flag 	<= !arst ? 0 : stat_r_flag ? 1 : stat_t_flag ? 0 : ( (| stat_R ) && (stat != 0) ) ;
  assign _13_ = en_l ? buff : d;
  logic [0:0] en_l_R0 ;
  assign en_l_R0 = ( | _13__R ) && buff != d ;
  assign _13__T = en_l ? ( { 800{ en_l_T  }} | buff_T ) : ( { 800{ en_l_T  }} | d_T );
  assign _13__S = en_l ? buff_S : d_S ;
  logic [799:0] buff_R0 ;
  assign buff_R0 = { 800{ en_l }} & ( _13__R );
  logic [799:0] d_R0 ;
  assign d_R0 = { 800{ !en_l }} & ( _13__R );
  assign _00_ = srst ? _13_ : 800'b
  logic [0:0] srst_R0 ;
  assign srst_R0 = ( | _00__R ) && _13_ != 800'b
  logic [799:0] _13__R0 ;
  assign _13__R0 = { 800{ srst }} & ( _00__R );
  assign _00__T = srst ? ( { 800{ | srst_T  }} | _13__T ) : { 800{ | srst_T  }};
  assign _00__S = srst ? _13__S : 0 ;
  assign _14_ = en_l_s ? stat : stat_pre;
  logic [0:0] en_l_s_R0 ;
  assign en_l_s_R0 = ( | _14__R ) && stat != stat_pre ;
  assign _14__T = en_l_s ? ( { 1{ en_l_s_T  }} | stat_T ) : ( { 1{ en_l_s_T  }} | stat_pre_T );
  assign _14__S = en_l_s ? stat_S : stat_pre_S ;
  logic [0:0] stat_R6 ;
  assign stat_R6 = { 1{ en_l_s }} & ( _14__R );
  logic [0:0] stat_pre_R0 ;
  assign stat_pre_R0 = { 1{ !en_l_s }} & ( _14__R );
  assign _01_ = srst ? _14_ : 1'b0;
  logic [0:0] srst_R1 ;
  assign srst_R1 = ( | _01__R ) && _14_ != 1'b0 ;
  logic [0:0] _14__R0 ;
  assign _14__R0 = { 1{ srst }} & ( _01__R );
  assign _01__T = srst ? ( { 1{ | srst_T  }} | _14__T ) : { 1{ | srst_T  }};
  assign _01__S = srst ? _14__S : 0 ;
  assign z = stat ? buff : d;
  logic [0:0] stat_R7 ;
  assign stat_R7 = ( | z_R ) && buff != d ;
  assign z_T = stat ? ( { 800{ stat_T  }} | buff_T ) : ( { 800{ stat_T  }} | d_T );
  assign z_S = stat ? buff_S : d_S ;
  logic [799:0] buff_R1 ;
  assign buff_R1 = { 800{ stat }} & ( z_R );
  logic [799:0] d_R1 ;
  assign d_R1 = { 800{ !stat }} & ( z_R );
  assign \FIFO_REG.delta [0] = _02_ ^ ld;
  assign \FIFO_REG.delta_S = 0 ;
  logic [0:0] _02__R1 ;
  logic [0:0] ld_R6 ;
  assign \FIFO_REG.delta_T [0] = _02__T | ld_T ;
  assign _02__R1 = \FIFO_REG.delta_R [0] ;
  assign ld_R6 = \FIFO_REG.delta_R [0] ;
  assign \FIFO_REG.delta [30:1] = { \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31], \FIFO_REG.delta [31] };
  assign \FIFO_REG.delta_T [30:1] = {  \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31] , \FIFO_REG.delta_T [31]  };
  logic [13:0] \FIFO_REG.delta_S ;
  assign \FIFO_REG.delta_S = 0 ;
  assign { \FIFO_REG.delta_R0 [1], \FIFO_REG.delta_R0 [2], \FIFO_REG.delta_R0 [3], \FIFO_REG.delta_R0 [4], \FIFO_REG.delta_R0 [5], \FIFO_REG.delta_R0 [6], \FIFO_REG.delta_R0 [7], \FIFO_REG.delta_R0 [8], \FIFO_REG.delta_R0 [9], \FIFO_REG.delta_R0 [10], \FIFO_REG.delta_R0 [11], \FIFO_REG.delta_R0 [12], \FIFO_REG.delta_R0 [13], \FIFO_REG.delta_R0 [14], \FIFO_REG.delta_R0 [15], \FIFO_REG.delta_R0 [16], \FIFO_REG.delta_R0 [17], \FIFO_REG.delta_R0 [18], \FIFO_REG.delta_R0 [19], \FIFO_REG.delta_R0 [20], \FIFO_REG.delta_R0 [21], \FIFO_REG.delta_R0 [22], \FIFO_REG.delta_R0 [23], \FIFO_REG.delta_R0 [24], \FIFO_REG.delta_R0 [25], \FIFO_REG.delta_R0 [26], \FIFO_REG.delta_R0 [27], \FIFO_REG.delta_R0 [28], \FIFO_REG.delta_R0 [29], \FIFO_REG.delta_R0 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R1 ;
  assign \FIFO_REG.delta_R1 [31:31] = \FIFO_REG.delta_R [30:30] ;
  assign { \FIFO_REG.delta_R1 [0], \FIFO_REG.delta_R1 [1], \FIFO_REG.delta_R1 [2], \FIFO_REG.delta_R1 [3], \FIFO_REG.delta_R1 [4], \FIFO_REG.delta_R1 [5], \FIFO_REG.delta_R1 [6], \FIFO_REG.delta_R1 [7], \FIFO_REG.delta_R1 [8], \FIFO_REG.delta_R1 [9], \FIFO_REG.delta_R1 [10], \FIFO_REG.delta_R1 [11], \FIFO_REG.delta_R1 [12], \FIFO_REG.delta_R1 [13], \FIFO_REG.delta_R1 [14], \FIFO_REG.delta_R1 [15], \FIFO_REG.delta_R1 [16], \FIFO_REG.delta_R1 [17], \FIFO_REG.delta_R1 [18], \FIFO_REG.delta_R1 [19], \FIFO_REG.delta_R1 [20], \FIFO_REG.delta_R1 [21], \FIFO_REG.delta_R1 [22], \FIFO_REG.delta_R1 [23], \FIFO_REG.delta_R1 [24], \FIFO_REG.delta_R1 [25], \FIFO_REG.delta_R1 [26], \FIFO_REG.delta_R1 [27], \FIFO_REG.delta_R1 [28], \FIFO_REG.delta_R1 [29], \FIFO_REG.delta_R1 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R2 ;
  assign \FIFO_REG.delta_R2 [31:31] = \FIFO_REG.delta_R [29:29] ;
  assign { \FIFO_REG.delta_R2 [0], \FIFO_REG.delta_R2 [1], \FIFO_REG.delta_R2 [2], \FIFO_REG.delta_R2 [3], \FIFO_REG.delta_R2 [4], \FIFO_REG.delta_R2 [5], \FIFO_REG.delta_R2 [6], \FIFO_REG.delta_R2 [7], \FIFO_REG.delta_R2 [8], \FIFO_REG.delta_R2 [9], \FIFO_REG.delta_R2 [10], \FIFO_REG.delta_R2 [11], \FIFO_REG.delta_R2 [12], \FIFO_REG.delta_R2 [13], \FIFO_REG.delta_R2 [14], \FIFO_REG.delta_R2 [15], \FIFO_REG.delta_R2 [16], \FIFO_REG.delta_R2 [17], \FIFO_REG.delta_R2 [18], \FIFO_REG.delta_R2 [19], \FIFO_REG.delta_R2 [20], \FIFO_REG.delta_R2 [21], \FIFO_REG.delta_R2 [22], \FIFO_REG.delta_R2 [23], \FIFO_REG.delta_R2 [24], \FIFO_REG.delta_R2 [25], \FIFO_REG.delta_R2 [26], \FIFO_REG.delta_R2 [27], \FIFO_REG.delta_R2 [28], \FIFO_REG.delta_R2 [29], \FIFO_REG.delta_R2 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R3 ;
  assign \FIFO_REG.delta_R3 [31:31] = \FIFO_REG.delta_R [28:28] ;
  assign { \FIFO_REG.delta_R3 [0], \FIFO_REG.delta_R3 [1], \FIFO_REG.delta_R3 [2], \FIFO_REG.delta_R3 [3], \FIFO_REG.delta_R3 [4], \FIFO_REG.delta_R3 [5], \FIFO_REG.delta_R3 [6], \FIFO_REG.delta_R3 [7], \FIFO_REG.delta_R3 [8], \FIFO_REG.delta_R3 [9], \FIFO_REG.delta_R3 [10], \FIFO_REG.delta_R3 [11], \FIFO_REG.delta_R3 [12], \FIFO_REG.delta_R3 [13], \FIFO_REG.delta_R3 [14], \FIFO_REG.delta_R3 [15], \FIFO_REG.delta_R3 [16], \FIFO_REG.delta_R3 [17], \FIFO_REG.delta_R3 [18], \FIFO_REG.delta_R3 [19], \FIFO_REG.delta_R3 [20], \FIFO_REG.delta_R3 [21], \FIFO_REG.delta_R3 [22], \FIFO_REG.delta_R3 [23], \FIFO_REG.delta_R3 [24], \FIFO_REG.delta_R3 [25], \FIFO_REG.delta_R3 [26], \FIFO_REG.delta_R3 [27], \FIFO_REG.delta_R3 [28], \FIFO_REG.delta_R3 [29], \FIFO_REG.delta_R3 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R4 ;
  assign \FIFO_REG.delta_R4 [31:31] = \FIFO_REG.delta_R [27:27] ;
  assign { \FIFO_REG.delta_R4 [0], \FIFO_REG.delta_R4 [1], \FIFO_REG.delta_R4 [2], \FIFO_REG.delta_R4 [3], \FIFO_REG.delta_R4 [4], \FIFO_REG.delta_R4 [5], \FIFO_REG.delta_R4 [6], \FIFO_REG.delta_R4 [7], \FIFO_REG.delta_R4 [8], \FIFO_REG.delta_R4 [9], \FIFO_REG.delta_R4 [10], \FIFO_REG.delta_R4 [11], \FIFO_REG.delta_R4 [12], \FIFO_REG.delta_R4 [13], \FIFO_REG.delta_R4 [14], \FIFO_REG.delta_R4 [15], \FIFO_REG.delta_R4 [16], \FIFO_REG.delta_R4 [17], \FIFO_REG.delta_R4 [18], \FIFO_REG.delta_R4 [19], \FIFO_REG.delta_R4 [20], \FIFO_REG.delta_R4 [21], \FIFO_REG.delta_R4 [22], \FIFO_REG.delta_R4 [23], \FIFO_REG.delta_R4 [24], \FIFO_REG.delta_R4 [25], \FIFO_REG.delta_R4 [26], \FIFO_REG.delta_R4 [27], \FIFO_REG.delta_R4 [28], \FIFO_REG.delta_R4 [29], \FIFO_REG.delta_R4 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R5 ;
  assign \FIFO_REG.delta_R5 [31:31] = \FIFO_REG.delta_R [26:26] ;
  assign { \FIFO_REG.delta_R5 [0], \FIFO_REG.delta_R5 [1], \FIFO_REG.delta_R5 [2], \FIFO_REG.delta_R5 [3], \FIFO_REG.delta_R5 [4], \FIFO_REG.delta_R5 [5], \FIFO_REG.delta_R5 [6], \FIFO_REG.delta_R5 [7], \FIFO_REG.delta_R5 [8], \FIFO_REG.delta_R5 [9], \FIFO_REG.delta_R5 [10], \FIFO_REG.delta_R5 [11], \FIFO_REG.delta_R5 [12], \FIFO_REG.delta_R5 [13], \FIFO_REG.delta_R5 [14], \FIFO_REG.delta_R5 [15], \FIFO_REG.delta_R5 [16], \FIFO_REG.delta_R5 [17], \FIFO_REG.delta_R5 [18], \FIFO_REG.delta_R5 [19], \FIFO_REG.delta_R5 [20], \FIFO_REG.delta_R5 [21], \FIFO_REG.delta_R5 [22], \FIFO_REG.delta_R5 [23], \FIFO_REG.delta_R5 [24], \FIFO_REG.delta_R5 [25], \FIFO_REG.delta_R5 [26], \FIFO_REG.delta_R5 [27], \FIFO_REG.delta_R5 [28], \FIFO_REG.delta_R5 [29], \FIFO_REG.delta_R5 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R6 ;
  assign \FIFO_REG.delta_R6 [31:31] = \FIFO_REG.delta_R [25:25] ;
  assign { \FIFO_REG.delta_R6 [0], \FIFO_REG.delta_R6 [1], \FIFO_REG.delta_R6 [2], \FIFO_REG.delta_R6 [3], \FIFO_REG.delta_R6 [4], \FIFO_REG.delta_R6 [5], \FIFO_REG.delta_R6 [6], \FIFO_REG.delta_R6 [7], \FIFO_REG.delta_R6 [8], \FIFO_REG.delta_R6 [9], \FIFO_REG.delta_R6 [10], \FIFO_REG.delta_R6 [11], \FIFO_REG.delta_R6 [12], \FIFO_REG.delta_R6 [13], \FIFO_REG.delta_R6 [14], \FIFO_REG.delta_R6 [15], \FIFO_REG.delta_R6 [16], \FIFO_REG.delta_R6 [17], \FIFO_REG.delta_R6 [18], \FIFO_REG.delta_R6 [19], \FIFO_REG.delta_R6 [20], \FIFO_REG.delta_R6 [21], \FIFO_REG.delta_R6 [22], \FIFO_REG.delta_R6 [23], \FIFO_REG.delta_R6 [24], \FIFO_REG.delta_R6 [25], \FIFO_REG.delta_R6 [26], \FIFO_REG.delta_R6 [27], \FIFO_REG.delta_R6 [28], \FIFO_REG.delta_R6 [29], \FIFO_REG.delta_R6 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R7 ;
  assign \FIFO_REG.delta_R7 [31:31] = \FIFO_REG.delta_R [24:24] ;
  assign { \FIFO_REG.delta_R7 [0], \FIFO_REG.delta_R7 [1], \FIFO_REG.delta_R7 [2], \FIFO_REG.delta_R7 [3], \FIFO_REG.delta_R7 [4], \FIFO_REG.delta_R7 [5], \FIFO_REG.delta_R7 [6], \FIFO_REG.delta_R7 [7], \FIFO_REG.delta_R7 [8], \FIFO_REG.delta_R7 [9], \FIFO_REG.delta_R7 [10], \FIFO_REG.delta_R7 [11], \FIFO_REG.delta_R7 [12], \FIFO_REG.delta_R7 [13], \FIFO_REG.delta_R7 [14], \FIFO_REG.delta_R7 [15], \FIFO_REG.delta_R7 [16], \FIFO_REG.delta_R7 [17], \FIFO_REG.delta_R7 [18], \FIFO_REG.delta_R7 [19], \FIFO_REG.delta_R7 [20], \FIFO_REG.delta_R7 [21], \FIFO_REG.delta_R7 [22], \FIFO_REG.delta_R7 [23], \FIFO_REG.delta_R7 [24], \FIFO_REG.delta_R7 [25], \FIFO_REG.delta_R7 [26], \FIFO_REG.delta_R7 [27], \FIFO_REG.delta_R7 [28], \FIFO_REG.delta_R7 [29], \FIFO_REG.delta_R7 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R8 ;
  assign \FIFO_REG.delta_R8 [31:31] = \FIFO_REG.delta_R [23:23] ;
  assign { \FIFO_REG.delta_R8 [0], \FIFO_REG.delta_R8 [1], \FIFO_REG.delta_R8 [2], \FIFO_REG.delta_R8 [3], \FIFO_REG.delta_R8 [4], \FIFO_REG.delta_R8 [5], \FIFO_REG.delta_R8 [6], \FIFO_REG.delta_R8 [7], \FIFO_REG.delta_R8 [8], \FIFO_REG.delta_R8 [9], \FIFO_REG.delta_R8 [10], \FIFO_REG.delta_R8 [11], \FIFO_REG.delta_R8 [12], \FIFO_REG.delta_R8 [13], \FIFO_REG.delta_R8 [14], \FIFO_REG.delta_R8 [15], \FIFO_REG.delta_R8 [16], \FIFO_REG.delta_R8 [17], \FIFO_REG.delta_R8 [18], \FIFO_REG.delta_R8 [19], \FIFO_REG.delta_R8 [20], \FIFO_REG.delta_R8 [21], \FIFO_REG.delta_R8 [22], \FIFO_REG.delta_R8 [23], \FIFO_REG.delta_R8 [24], \FIFO_REG.delta_R8 [25], \FIFO_REG.delta_R8 [26], \FIFO_REG.delta_R8 [27], \FIFO_REG.delta_R8 [28], \FIFO_REG.delta_R8 [29], \FIFO_REG.delta_R8 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R9 ;
  assign \FIFO_REG.delta_R9 [31:31] = \FIFO_REG.delta_R [22:22] ;
  assign { \FIFO_REG.delta_R9 [0], \FIFO_REG.delta_R9 [1], \FIFO_REG.delta_R9 [2], \FIFO_REG.delta_R9 [3], \FIFO_REG.delta_R9 [4], \FIFO_REG.delta_R9 [5], \FIFO_REG.delta_R9 [6], \FIFO_REG.delta_R9 [7], \FIFO_REG.delta_R9 [8], \FIFO_REG.delta_R9 [9], \FIFO_REG.delta_R9 [10], \FIFO_REG.delta_R9 [11], \FIFO_REG.delta_R9 [12], \FIFO_REG.delta_R9 [13], \FIFO_REG.delta_R9 [14], \FIFO_REG.delta_R9 [15], \FIFO_REG.delta_R9 [16], \FIFO_REG.delta_R9 [17], \FIFO_REG.delta_R9 [18], \FIFO_REG.delta_R9 [19], \FIFO_REG.delta_R9 [20], \FIFO_REG.delta_R9 [21], \FIFO_REG.delta_R9 [22], \FIFO_REG.delta_R9 [23], \FIFO_REG.delta_R9 [24], \FIFO_REG.delta_R9 [25], \FIFO_REG.delta_R9 [26], \FIFO_REG.delta_R9 [27], \FIFO_REG.delta_R9 [28], \FIFO_REG.delta_R9 [29], \FIFO_REG.delta_R9 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R10 ;
  assign \FIFO_REG.delta_R10 [31:31] = \FIFO_REG.delta_R [21:21] ;
  assign { \FIFO_REG.delta_R10 [0], \FIFO_REG.delta_R10 [1], \FIFO_REG.delta_R10 [2], \FIFO_REG.delta_R10 [3], \FIFO_REG.delta_R10 [4], \FIFO_REG.delta_R10 [5], \FIFO_REG.delta_R10 [6], \FIFO_REG.delta_R10 [7], \FIFO_REG.delta_R10 [8], \FIFO_REG.delta_R10 [9], \FIFO_REG.delta_R10 [10], \FIFO_REG.delta_R10 [11], \FIFO_REG.delta_R10 [12], \FIFO_REG.delta_R10 [13], \FIFO_REG.delta_R10 [14], \FIFO_REG.delta_R10 [15], \FIFO_REG.delta_R10 [16], \FIFO_REG.delta_R10 [17], \FIFO_REG.delta_R10 [18], \FIFO_REG.delta_R10 [19], \FIFO_REG.delta_R10 [20], \FIFO_REG.delta_R10 [21], \FIFO_REG.delta_R10 [22], \FIFO_REG.delta_R10 [23], \FIFO_REG.delta_R10 [24], \FIFO_REG.delta_R10 [25], \FIFO_REG.delta_R10 [26], \FIFO_REG.delta_R10 [27], \FIFO_REG.delta_R10 [28], \FIFO_REG.delta_R10 [29], \FIFO_REG.delta_R10 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R11 ;
  assign \FIFO_REG.delta_R11 [31:31] = \FIFO_REG.delta_R [20:20] ;
  assign { \FIFO_REG.delta_R11 [0], \FIFO_REG.delta_R11 [1], \FIFO_REG.delta_R11 [2], \FIFO_REG.delta_R11 [3], \FIFO_REG.delta_R11 [4], \FIFO_REG.delta_R11 [5], \FIFO_REG.delta_R11 [6], \FIFO_REG.delta_R11 [7], \FIFO_REG.delta_R11 [8], \FIFO_REG.delta_R11 [9], \FIFO_REG.delta_R11 [10], \FIFO_REG.delta_R11 [11], \FIFO_REG.delta_R11 [12], \FIFO_REG.delta_R11 [13], \FIFO_REG.delta_R11 [14], \FIFO_REG.delta_R11 [15], \FIFO_REG.delta_R11 [16], \FIFO_REG.delta_R11 [17], \FIFO_REG.delta_R11 [18], \FIFO_REG.delta_R11 [19], \FIFO_REG.delta_R11 [20], \FIFO_REG.delta_R11 [21], \FIFO_REG.delta_R11 [22], \FIFO_REG.delta_R11 [23], \FIFO_REG.delta_R11 [24], \FIFO_REG.delta_R11 [25], \FIFO_REG.delta_R11 [26], \FIFO_REG.delta_R11 [27], \FIFO_REG.delta_R11 [28], \FIFO_REG.delta_R11 [29], \FIFO_REG.delta_R11 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R12 ;
  assign \FIFO_REG.delta_R12 [31:31] = \FIFO_REG.delta_R [19:19] ;
  assign { \FIFO_REG.delta_R12 [0], \FIFO_REG.delta_R12 [1], \FIFO_REG.delta_R12 [2], \FIFO_REG.delta_R12 [3], \FIFO_REG.delta_R12 [4], \FIFO_REG.delta_R12 [5], \FIFO_REG.delta_R12 [6], \FIFO_REG.delta_R12 [7], \FIFO_REG.delta_R12 [8], \FIFO_REG.delta_R12 [9], \FIFO_REG.delta_R12 [10], \FIFO_REG.delta_R12 [11], \FIFO_REG.delta_R12 [12], \FIFO_REG.delta_R12 [13], \FIFO_REG.delta_R12 [14], \FIFO_REG.delta_R12 [15], \FIFO_REG.delta_R12 [16], \FIFO_REG.delta_R12 [17], \FIFO_REG.delta_R12 [18], \FIFO_REG.delta_R12 [19], \FIFO_REG.delta_R12 [20], \FIFO_REG.delta_R12 [21], \FIFO_REG.delta_R12 [22], \FIFO_REG.delta_R12 [23], \FIFO_REG.delta_R12 [24], \FIFO_REG.delta_R12 [25], \FIFO_REG.delta_R12 [26], \FIFO_REG.delta_R12 [27], \FIFO_REG.delta_R12 [28], \FIFO_REG.delta_R12 [29], \FIFO_REG.delta_R12 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R13 ;
  assign \FIFO_REG.delta_R13 [31:31] = \FIFO_REG.delta_R [18:18] ;
  assign { \FIFO_REG.delta_R13 [0], \FIFO_REG.delta_R13 [1], \FIFO_REG.delta_R13 [2], \FIFO_REG.delta_R13 [3], \FIFO_REG.delta_R13 [4], \FIFO_REG.delta_R13 [5], \FIFO_REG.delta_R13 [6], \FIFO_REG.delta_R13 [7], \FIFO_REG.delta_R13 [8], \FIFO_REG.delta_R13 [9], \FIFO_REG.delta_R13 [10], \FIFO_REG.delta_R13 [11], \FIFO_REG.delta_R13 [12], \FIFO_REG.delta_R13 [13], \FIFO_REG.delta_R13 [14], \FIFO_REG.delta_R13 [15], \FIFO_REG.delta_R13 [16], \FIFO_REG.delta_R13 [17], \FIFO_REG.delta_R13 [18], \FIFO_REG.delta_R13 [19], \FIFO_REG.delta_R13 [20], \FIFO_REG.delta_R13 [21], \FIFO_REG.delta_R13 [22], \FIFO_REG.delta_R13 [23], \FIFO_REG.delta_R13 [24], \FIFO_REG.delta_R13 [25], \FIFO_REG.delta_R13 [26], \FIFO_REG.delta_R13 [27], \FIFO_REG.delta_R13 [28], \FIFO_REG.delta_R13 [29], \FIFO_REG.delta_R13 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R14 ;
  assign \FIFO_REG.delta_R14 [31:31] = \FIFO_REG.delta_R [17:17] ;
  assign { \FIFO_REG.delta_R14 [0], \FIFO_REG.delta_R14 [1], \FIFO_REG.delta_R14 [2], \FIFO_REG.delta_R14 [3], \FIFO_REG.delta_R14 [4], \FIFO_REG.delta_R14 [5], \FIFO_REG.delta_R14 [6], \FIFO_REG.delta_R14 [7], \FIFO_REG.delta_R14 [8], \FIFO_REG.delta_R14 [9], \FIFO_REG.delta_R14 [10], \FIFO_REG.delta_R14 [11], \FIFO_REG.delta_R14 [12], \FIFO_REG.delta_R14 [13], \FIFO_REG.delta_R14 [14], \FIFO_REG.delta_R14 [15], \FIFO_REG.delta_R14 [16], \FIFO_REG.delta_R14 [17], \FIFO_REG.delta_R14 [18], \FIFO_REG.delta_R14 [19], \FIFO_REG.delta_R14 [20], \FIFO_REG.delta_R14 [21], \FIFO_REG.delta_R14 [22], \FIFO_REG.delta_R14 [23], \FIFO_REG.delta_R14 [24], \FIFO_REG.delta_R14 [25], \FIFO_REG.delta_R14 [26], \FIFO_REG.delta_R14 [27], \FIFO_REG.delta_R14 [28], \FIFO_REG.delta_R14 [29], \FIFO_REG.delta_R14 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R15 ;
  assign \FIFO_REG.delta_R15 [31:31] = \FIFO_REG.delta_R [16:16] ;
  assign { \FIFO_REG.delta_R15 [0], \FIFO_REG.delta_R15 [1], \FIFO_REG.delta_R15 [2], \FIFO_REG.delta_R15 [3], \FIFO_REG.delta_R15 [4], \FIFO_REG.delta_R15 [5], \FIFO_REG.delta_R15 [6], \FIFO_REG.delta_R15 [7], \FIFO_REG.delta_R15 [8], \FIFO_REG.delta_R15 [9], \FIFO_REG.delta_R15 [10], \FIFO_REG.delta_R15 [11], \FIFO_REG.delta_R15 [12], \FIFO_REG.delta_R15 [13], \FIFO_REG.delta_R15 [14], \FIFO_REG.delta_R15 [15], \FIFO_REG.delta_R15 [16], \FIFO_REG.delta_R15 [17], \FIFO_REG.delta_R15 [18], \FIFO_REG.delta_R15 [19], \FIFO_REG.delta_R15 [20], \FIFO_REG.delta_R15 [21], \FIFO_REG.delta_R15 [22], \FIFO_REG.delta_R15 [23], \FIFO_REG.delta_R15 [24], \FIFO_REG.delta_R15 [25], \FIFO_REG.delta_R15 [26], \FIFO_REG.delta_R15 [27], \FIFO_REG.delta_R15 [28], \FIFO_REG.delta_R15 [29], \FIFO_REG.delta_R15 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R16 ;
  assign \FIFO_REG.delta_R16 [31:31] = \FIFO_REG.delta_R [15:15] ;
  assign { \FIFO_REG.delta_R16 [0], \FIFO_REG.delta_R16 [1], \FIFO_REG.delta_R16 [2], \FIFO_REG.delta_R16 [3], \FIFO_REG.delta_R16 [4], \FIFO_REG.delta_R16 [5], \FIFO_REG.delta_R16 [6], \FIFO_REG.delta_R16 [7], \FIFO_REG.delta_R16 [8], \FIFO_REG.delta_R16 [9], \FIFO_REG.delta_R16 [10], \FIFO_REG.delta_R16 [11], \FIFO_REG.delta_R16 [12], \FIFO_REG.delta_R16 [13], \FIFO_REG.delta_R16 [14], \FIFO_REG.delta_R16 [15], \FIFO_REG.delta_R16 [16], \FIFO_REG.delta_R16 [17], \FIFO_REG.delta_R16 [18], \FIFO_REG.delta_R16 [19], \FIFO_REG.delta_R16 [20], \FIFO_REG.delta_R16 [21], \FIFO_REG.delta_R16 [22], \FIFO_REG.delta_R16 [23], \FIFO_REG.delta_R16 [24], \FIFO_REG.delta_R16 [25], \FIFO_REG.delta_R16 [26], \FIFO_REG.delta_R16 [27], \FIFO_REG.delta_R16 [28], \FIFO_REG.delta_R16 [29], \FIFO_REG.delta_R16 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R17 ;
  assign \FIFO_REG.delta_R17 [31:31] = \FIFO_REG.delta_R [14:14] ;
  assign { \FIFO_REG.delta_R17 [0], \FIFO_REG.delta_R17 [1], \FIFO_REG.delta_R17 [2], \FIFO_REG.delta_R17 [3], \FIFO_REG.delta_R17 [4], \FIFO_REG.delta_R17 [5], \FIFO_REG.delta_R17 [6], \FIFO_REG.delta_R17 [7], \FIFO_REG.delta_R17 [8], \FIFO_REG.delta_R17 [9], \FIFO_REG.delta_R17 [10], \FIFO_REG.delta_R17 [11], \FIFO_REG.delta_R17 [12], \FIFO_REG.delta_R17 [13], \FIFO_REG.delta_R17 [14], \FIFO_REG.delta_R17 [15], \FIFO_REG.delta_R17 [16], \FIFO_REG.delta_R17 [17], \FIFO_REG.delta_R17 [18], \FIFO_REG.delta_R17 [19], \FIFO_REG.delta_R17 [20], \FIFO_REG.delta_R17 [21], \FIFO_REG.delta_R17 [22], \FIFO_REG.delta_R17 [23], \FIFO_REG.delta_R17 [24], \FIFO_REG.delta_R17 [25], \FIFO_REG.delta_R17 [26], \FIFO_REG.delta_R17 [27], \FIFO_REG.delta_R17 [28], \FIFO_REG.delta_R17 [29], \FIFO_REG.delta_R17 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R18 ;
  assign \FIFO_REG.delta_R18 [31:31] = \FIFO_REG.delta_R [13:13] ;
  assign { \FIFO_REG.delta_R18 [0], \FIFO_REG.delta_R18 [1], \FIFO_REG.delta_R18 [2], \FIFO_REG.delta_R18 [3], \FIFO_REG.delta_R18 [4], \FIFO_REG.delta_R18 [5], \FIFO_REG.delta_R18 [6], \FIFO_REG.delta_R18 [7], \FIFO_REG.delta_R18 [8], \FIFO_REG.delta_R18 [9], \FIFO_REG.delta_R18 [10], \FIFO_REG.delta_R18 [11], \FIFO_REG.delta_R18 [12], \FIFO_REG.delta_R18 [13], \FIFO_REG.delta_R18 [14], \FIFO_REG.delta_R18 [15], \FIFO_REG.delta_R18 [16], \FIFO_REG.delta_R18 [17], \FIFO_REG.delta_R18 [18], \FIFO_REG.delta_R18 [19], \FIFO_REG.delta_R18 [20], \FIFO_REG.delta_R18 [21], \FIFO_REG.delta_R18 [22], \FIFO_REG.delta_R18 [23], \FIFO_REG.delta_R18 [24], \FIFO_REG.delta_R18 [25], \FIFO_REG.delta_R18 [26], \FIFO_REG.delta_R18 [27], \FIFO_REG.delta_R18 [28], \FIFO_REG.delta_R18 [29], \FIFO_REG.delta_R18 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R19 ;
  assign \FIFO_REG.delta_R19 [31:31] = \FIFO_REG.delta_R [12:12] ;
  assign { \FIFO_REG.delta_R19 [0], \FIFO_REG.delta_R19 [1], \FIFO_REG.delta_R19 [2], \FIFO_REG.delta_R19 [3], \FIFO_REG.delta_R19 [4], \FIFO_REG.delta_R19 [5], \FIFO_REG.delta_R19 [6], \FIFO_REG.delta_R19 [7], \FIFO_REG.delta_R19 [8], \FIFO_REG.delta_R19 [9], \FIFO_REG.delta_R19 [10], \FIFO_REG.delta_R19 [11], \FIFO_REG.delta_R19 [12], \FIFO_REG.delta_R19 [13], \FIFO_REG.delta_R19 [14], \FIFO_REG.delta_R19 [15], \FIFO_REG.delta_R19 [16], \FIFO_REG.delta_R19 [17], \FIFO_REG.delta_R19 [18], \FIFO_REG.delta_R19 [19], \FIFO_REG.delta_R19 [20], \FIFO_REG.delta_R19 [21], \FIFO_REG.delta_R19 [22], \FIFO_REG.delta_R19 [23], \FIFO_REG.delta_R19 [24], \FIFO_REG.delta_R19 [25], \FIFO_REG.delta_R19 [26], \FIFO_REG.delta_R19 [27], \FIFO_REG.delta_R19 [28], \FIFO_REG.delta_R19 [29], \FIFO_REG.delta_R19 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R20 ;
  assign \FIFO_REG.delta_R20 [31:31] = \FIFO_REG.delta_R [11:11] ;
  assign { \FIFO_REG.delta_R20 [0], \FIFO_REG.delta_R20 [1], \FIFO_REG.delta_R20 [2], \FIFO_REG.delta_R20 [3], \FIFO_REG.delta_R20 [4], \FIFO_REG.delta_R20 [5], \FIFO_REG.delta_R20 [6], \FIFO_REG.delta_R20 [7], \FIFO_REG.delta_R20 [8], \FIFO_REG.delta_R20 [9], \FIFO_REG.delta_R20 [10], \FIFO_REG.delta_R20 [11], \FIFO_REG.delta_R20 [12], \FIFO_REG.delta_R20 [13], \FIFO_REG.delta_R20 [14], \FIFO_REG.delta_R20 [15], \FIFO_REG.delta_R20 [16], \FIFO_REG.delta_R20 [17], \FIFO_REG.delta_R20 [18], \FIFO_REG.delta_R20 [19], \FIFO_REG.delta_R20 [20], \FIFO_REG.delta_R20 [21], \FIFO_REG.delta_R20 [22], \FIFO_REG.delta_R20 [23], \FIFO_REG.delta_R20 [24], \FIFO_REG.delta_R20 [25], \FIFO_REG.delta_R20 [26], \FIFO_REG.delta_R20 [27], \FIFO_REG.delta_R20 [28], \FIFO_REG.delta_R20 [29], \FIFO_REG.delta_R20 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R21 ;
  assign \FIFO_REG.delta_R21 [31:31] = \FIFO_REG.delta_R [10:10] ;
  assign { \FIFO_REG.delta_R21 [0], \FIFO_REG.delta_R21 [1], \FIFO_REG.delta_R21 [2], \FIFO_REG.delta_R21 [3], \FIFO_REG.delta_R21 [4], \FIFO_REG.delta_R21 [5], \FIFO_REG.delta_R21 [6], \FIFO_REG.delta_R21 [7], \FIFO_REG.delta_R21 [8], \FIFO_REG.delta_R21 [9], \FIFO_REG.delta_R21 [10], \FIFO_REG.delta_R21 [11], \FIFO_REG.delta_R21 [12], \FIFO_REG.delta_R21 [13], \FIFO_REG.delta_R21 [14], \FIFO_REG.delta_R21 [15], \FIFO_REG.delta_R21 [16], \FIFO_REG.delta_R21 [17], \FIFO_REG.delta_R21 [18], \FIFO_REG.delta_R21 [19], \FIFO_REG.delta_R21 [20], \FIFO_REG.delta_R21 [21], \FIFO_REG.delta_R21 [22], \FIFO_REG.delta_R21 [23], \FIFO_REG.delta_R21 [24], \FIFO_REG.delta_R21 [25], \FIFO_REG.delta_R21 [26], \FIFO_REG.delta_R21 [27], \FIFO_REG.delta_R21 [28], \FIFO_REG.delta_R21 [29], \FIFO_REG.delta_R21 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R22 ;
  assign \FIFO_REG.delta_R22 [31:31] = \FIFO_REG.delta_R [9:9] ;
  assign { \FIFO_REG.delta_R22 [0], \FIFO_REG.delta_R22 [1], \FIFO_REG.delta_R22 [2], \FIFO_REG.delta_R22 [3], \FIFO_REG.delta_R22 [4], \FIFO_REG.delta_R22 [5], \FIFO_REG.delta_R22 [6], \FIFO_REG.delta_R22 [7], \FIFO_REG.delta_R22 [8], \FIFO_REG.delta_R22 [9], \FIFO_REG.delta_R22 [10], \FIFO_REG.delta_R22 [11], \FIFO_REG.delta_R22 [12], \FIFO_REG.delta_R22 [13], \FIFO_REG.delta_R22 [14], \FIFO_REG.delta_R22 [15], \FIFO_REG.delta_R22 [16], \FIFO_REG.delta_R22 [17], \FIFO_REG.delta_R22 [18], \FIFO_REG.delta_R22 [19], \FIFO_REG.delta_R22 [20], \FIFO_REG.delta_R22 [21], \FIFO_REG.delta_R22 [22], \FIFO_REG.delta_R22 [23], \FIFO_REG.delta_R22 [24], \FIFO_REG.delta_R22 [25], \FIFO_REG.delta_R22 [26], \FIFO_REG.delta_R22 [27], \FIFO_REG.delta_R22 [28], \FIFO_REG.delta_R22 [29], \FIFO_REG.delta_R22 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R23 ;
  assign \FIFO_REG.delta_R23 [31:31] = \FIFO_REG.delta_R [8:8] ;
  assign { \FIFO_REG.delta_R23 [0], \FIFO_REG.delta_R23 [1], \FIFO_REG.delta_R23 [2], \FIFO_REG.delta_R23 [3], \FIFO_REG.delta_R23 [4], \FIFO_REG.delta_R23 [5], \FIFO_REG.delta_R23 [6], \FIFO_REG.delta_R23 [7], \FIFO_REG.delta_R23 [8], \FIFO_REG.delta_R23 [9], \FIFO_REG.delta_R23 [10], \FIFO_REG.delta_R23 [11], \FIFO_REG.delta_R23 [12], \FIFO_REG.delta_R23 [13], \FIFO_REG.delta_R23 [14], \FIFO_REG.delta_R23 [15], \FIFO_REG.delta_R23 [16], \FIFO_REG.delta_R23 [17], \FIFO_REG.delta_R23 [18], \FIFO_REG.delta_R23 [19], \FIFO_REG.delta_R23 [20], \FIFO_REG.delta_R23 [21], \FIFO_REG.delta_R23 [22], \FIFO_REG.delta_R23 [23], \FIFO_REG.delta_R23 [24], \FIFO_REG.delta_R23 [25], \FIFO_REG.delta_R23 [26], \FIFO_REG.delta_R23 [27], \FIFO_REG.delta_R23 [28], \FIFO_REG.delta_R23 [29], \FIFO_REG.delta_R23 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R24 ;
  assign \FIFO_REG.delta_R24 [31:31] = \FIFO_REG.delta_R [7:7] ;
  assign { \FIFO_REG.delta_R24 [0], \FIFO_REG.delta_R24 [1], \FIFO_REG.delta_R24 [2], \FIFO_REG.delta_R24 [3], \FIFO_REG.delta_R24 [4], \FIFO_REG.delta_R24 [5], \FIFO_REG.delta_R24 [6], \FIFO_REG.delta_R24 [7], \FIFO_REG.delta_R24 [8], \FIFO_REG.delta_R24 [9], \FIFO_REG.delta_R24 [10], \FIFO_REG.delta_R24 [11], \FIFO_REG.delta_R24 [12], \FIFO_REG.delta_R24 [13], \FIFO_REG.delta_R24 [14], \FIFO_REG.delta_R24 [15], \FIFO_REG.delta_R24 [16], \FIFO_REG.delta_R24 [17], \FIFO_REG.delta_R24 [18], \FIFO_REG.delta_R24 [19], \FIFO_REG.delta_R24 [20], \FIFO_REG.delta_R24 [21], \FIFO_REG.delta_R24 [22], \FIFO_REG.delta_R24 [23], \FIFO_REG.delta_R24 [24], \FIFO_REG.delta_R24 [25], \FIFO_REG.delta_R24 [26], \FIFO_REG.delta_R24 [27], \FIFO_REG.delta_R24 [28], \FIFO_REG.delta_R24 [29], \FIFO_REG.delta_R24 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R25 ;
  assign \FIFO_REG.delta_R25 [31:31] = \FIFO_REG.delta_R [6:6] ;
  assign { \FIFO_REG.delta_R25 [0], \FIFO_REG.delta_R25 [1], \FIFO_REG.delta_R25 [2], \FIFO_REG.delta_R25 [3], \FIFO_REG.delta_R25 [4], \FIFO_REG.delta_R25 [5], \FIFO_REG.delta_R25 [6], \FIFO_REG.delta_R25 [7], \FIFO_REG.delta_R25 [8], \FIFO_REG.delta_R25 [9], \FIFO_REG.delta_R25 [10], \FIFO_REG.delta_R25 [11], \FIFO_REG.delta_R25 [12], \FIFO_REG.delta_R25 [13], \FIFO_REG.delta_R25 [14], \FIFO_REG.delta_R25 [15], \FIFO_REG.delta_R25 [16], \FIFO_REG.delta_R25 [17], \FIFO_REG.delta_R25 [18], \FIFO_REG.delta_R25 [19], \FIFO_REG.delta_R25 [20], \FIFO_REG.delta_R25 [21], \FIFO_REG.delta_R25 [22], \FIFO_REG.delta_R25 [23], \FIFO_REG.delta_R25 [24], \FIFO_REG.delta_R25 [25], \FIFO_REG.delta_R25 [26], \FIFO_REG.delta_R25 [27], \FIFO_REG.delta_R25 [28], \FIFO_REG.delta_R25 [29], \FIFO_REG.delta_R25 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R26 ;
  assign \FIFO_REG.delta_R26 [31:31] = \FIFO_REG.delta_R [5:5] ;
  assign { \FIFO_REG.delta_R26 [0], \FIFO_REG.delta_R26 [1], \FIFO_REG.delta_R26 [2], \FIFO_REG.delta_R26 [3], \FIFO_REG.delta_R26 [4], \FIFO_REG.delta_R26 [5], \FIFO_REG.delta_R26 [6], \FIFO_REG.delta_R26 [7], \FIFO_REG.delta_R26 [8], \FIFO_REG.delta_R26 [9], \FIFO_REG.delta_R26 [10], \FIFO_REG.delta_R26 [11], \FIFO_REG.delta_R26 [12], \FIFO_REG.delta_R26 [13], \FIFO_REG.delta_R26 [14], \FIFO_REG.delta_R26 [15], \FIFO_REG.delta_R26 [16], \FIFO_REG.delta_R26 [17], \FIFO_REG.delta_R26 [18], \FIFO_REG.delta_R26 [19], \FIFO_REG.delta_R26 [20], \FIFO_REG.delta_R26 [21], \FIFO_REG.delta_R26 [22], \FIFO_REG.delta_R26 [23], \FIFO_REG.delta_R26 [24], \FIFO_REG.delta_R26 [25], \FIFO_REG.delta_R26 [26], \FIFO_REG.delta_R26 [27], \FIFO_REG.delta_R26 [28], \FIFO_REG.delta_R26 [29], \FIFO_REG.delta_R26 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R27 ;
  assign \FIFO_REG.delta_R27 [31:31] = \FIFO_REG.delta_R [4:4] ;
  assign { \FIFO_REG.delta_R27 [0], \FIFO_REG.delta_R27 [1], \FIFO_REG.delta_R27 [2], \FIFO_REG.delta_R27 [3], \FIFO_REG.delta_R27 [4], \FIFO_REG.delta_R27 [5], \FIFO_REG.delta_R27 [6], \FIFO_REG.delta_R27 [7], \FIFO_REG.delta_R27 [8], \FIFO_REG.delta_R27 [9], \FIFO_REG.delta_R27 [10], \FIFO_REG.delta_R27 [11], \FIFO_REG.delta_R27 [12], \FIFO_REG.delta_R27 [13], \FIFO_REG.delta_R27 [14], \FIFO_REG.delta_R27 [15], \FIFO_REG.delta_R27 [16], \FIFO_REG.delta_R27 [17], \FIFO_REG.delta_R27 [18], \FIFO_REG.delta_R27 [19], \FIFO_REG.delta_R27 [20], \FIFO_REG.delta_R27 [21], \FIFO_REG.delta_R27 [22], \FIFO_REG.delta_R27 [23], \FIFO_REG.delta_R27 [24], \FIFO_REG.delta_R27 [25], \FIFO_REG.delta_R27 [26], \FIFO_REG.delta_R27 [27], \FIFO_REG.delta_R27 [28], \FIFO_REG.delta_R27 [29], \FIFO_REG.delta_R27 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R28 ;
  assign \FIFO_REG.delta_R28 [31:31] = \FIFO_REG.delta_R [3:3] ;
  assign { \FIFO_REG.delta_R28 [0], \FIFO_REG.delta_R28 [1], \FIFO_REG.delta_R28 [2], \FIFO_REG.delta_R28 [3], \FIFO_REG.delta_R28 [4], \FIFO_REG.delta_R28 [5], \FIFO_REG.delta_R28 [6], \FIFO_REG.delta_R28 [7], \FIFO_REG.delta_R28 [8], \FIFO_REG.delta_R28 [9], \FIFO_REG.delta_R28 [10], \FIFO_REG.delta_R28 [11], \FIFO_REG.delta_R28 [12], \FIFO_REG.delta_R28 [13], \FIFO_REG.delta_R28 [14], \FIFO_REG.delta_R28 [15], \FIFO_REG.delta_R28 [16], \FIFO_REG.delta_R28 [17], \FIFO_REG.delta_R28 [18], \FIFO_REG.delta_R28 [19], \FIFO_REG.delta_R28 [20], \FIFO_REG.delta_R28 [21], \FIFO_REG.delta_R28 [22], \FIFO_REG.delta_R28 [23], \FIFO_REG.delta_R28 [24], \FIFO_REG.delta_R28 [25], \FIFO_REG.delta_R28 [26], \FIFO_REG.delta_R28 [27], \FIFO_REG.delta_R28 [28], \FIFO_REG.delta_R28 [29], \FIFO_REG.delta_R28 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R29 ;
  assign \FIFO_REG.delta_R29 [31:31] = \FIFO_REG.delta_R [2:2] ;
  assign { \FIFO_REG.delta_R29 [0], \FIFO_REG.delta_R29 [1], \FIFO_REG.delta_R29 [2], \FIFO_REG.delta_R29 [3], \FIFO_REG.delta_R29 [4], \FIFO_REG.delta_R29 [5], \FIFO_REG.delta_R29 [6], \FIFO_REG.delta_R29 [7], \FIFO_REG.delta_R29 [8], \FIFO_REG.delta_R29 [9], \FIFO_REG.delta_R29 [10], \FIFO_REG.delta_R29 [11], \FIFO_REG.delta_R29 [12], \FIFO_REG.delta_R29 [13], \FIFO_REG.delta_R29 [14], \FIFO_REG.delta_R29 [15], \FIFO_REG.delta_R29 [16], \FIFO_REG.delta_R29 [17], \FIFO_REG.delta_R29 [18], \FIFO_REG.delta_R29 [19], \FIFO_REG.delta_R29 [20], \FIFO_REG.delta_R29 [21], \FIFO_REG.delta_R29 [22], \FIFO_REG.delta_R29 [23], \FIFO_REG.delta_R29 [24], \FIFO_REG.delta_R29 [25], \FIFO_REG.delta_R29 [26], \FIFO_REG.delta_R29 [27], \FIFO_REG.delta_R29 [28], \FIFO_REG.delta_R29 [29], \FIFO_REG.delta_R29 [30] } = 0;
  logic [31:0] \FIFO_REG.delta_R30 ;
  assign \FIFO_REG.delta_R30 [31:31] = \FIFO_REG.delta_R [1:1] ;
  assign buff_nxt = d;
  logic [799:0] d_R2 ;
  assign buff_nxt_T = d_T ;
  assign d_R2 = buff_nxt_R ;
  assign buff_nxt_S = d_S ;
  assign buff_pre = d;
  logic [799:0] d_R3 ;
  assign buff_pre_T = d_T ;
  assign d_R3 = buff_pre_R ;
  assign buff_pre_S = d_S ;
  assign count = stat;
  logic [0:0] stat_R8 ;
  assign count_T = stat_T ;
  assign stat_R8 = count_R ;
  assign count_S = stat_S ;
  assign count_t = { 31'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0, stat };
  assign count_t_T = {  31'h0 , stat_T  };
  logic [13:0] count_t_S ;
  assign count_t_S = 0 ;
  logic [0:0] stat_R9 ;
  assign stat_R9 = count_t_R [0:0] ;
  assign i = 32'd4294967295;
  assign i_T = 0 ;
  assign i_S = 14'b1 ;
  assign n_elem = 33'b000000000000000000000000000000000;
  assign n_elem_T = 0 ;
  assign n_elem_S = 14'b1 ;
  assign size_t[1:0] = sd;
  logic [1:0] sd_R1 ;
  assign size_t_T [1:0] = sd_T ;
  assign sd_R1 = size_t_R [1:0] ;
  assign size_t_S = sd_S ;
  assign stat_after = 1'b1;
  assign stat_after_T = 0 ;
  assign stat_after_S = 14'b1 ;
  assign stat_before = 1'b0;
  assign stat_before_T = 0 ;
  assign stat_before_S = 14'b1 ;
  assign stat_nxt = stat_pre;
  logic [0:0] stat_pre_R1 ;
  assign stat_nxt_T = stat_pre_T ;
  assign stat_pre_R1 = stat_nxt_R ;
  assign stat_nxt_S = stat_pre_S ;
  assign _14__R = ( _14__R0 );
  assign stat_pre_R = ( stat_pre_R0 ) | ( stat_pre_R1 );
  assign en_l_s_R = ( en_l_s_R0 );
  assign _13__R = ( _13__R0 );
  assign d_R = ( d_R0 ) | ( d_R1 ) | ( d_R2 ) | ( d_R3 );
  assign buff_R = ( buff_R0 ) | ( buff_R1 );
  assign en_l_R = ( en_l_R0 );
  assign _01__R = ( _01__R0 );
  assign _00__R = ( _00__R0 );
  assign _11__R = ( _11__R0 );
  assign en_R = ( en_R0 ) | ( en_R1 );
  assign _05__R = ( _05__R0 );
  assign _12__R = ( _12__R0 );
  assign _04__R = ( _04__R0 );
  assign _07__R = ( _07__R0 );
  assign srst_R = ( srst_R0 ) | ( srst_R1 );
  assign en_l_var_R = ( en_l_var_R0 );
  assign active_R = ( active_R0 );
  assign _03__R = ( _03__R0 ) | ( _03__R1 );
  assign _09__R = ( _09__R0 );
  assign ld_R = ( ld_R0 ) | ( ld_R1 ) | ( ld_R2 ) | ( ld_R3 ) | ( ld_R4 ) | ( ld_R5 ) | ( ld_R6 );
  assign _08__R = ( _08__R0 ) | ( _08__R1 );
  assign _10__R = ( _10__R0 );
  assign _02__R = ( _02__R0 ) | ( _02__R1 );
  assign _06__R = ( _06__R0 );
  assign vz_R = ( vz_R0 ) | ( vz_R1 ) | ( vz_R2 ) | ( vz_R3 );
  assign fangyuan0_R = ( fangyuan0_R0 );
  assign stat_R = ( stat_R0 ) | ( stat_R1 ) | ( stat_R2 ) | ( stat_R3 ) | ( stat_R4 ) | ( stat_R5 ) | ( stat_R6 ) | ( stat_R7 ) | ( stat_R8 ) | ( stat_R9 );
  assign \FIFO_REG.delta_R = ( \FIFO_REG.delta_R0 ) | ( \FIFO_REG.delta_R1 ) | ( \FIFO_REG.delta_R2 ) | ( \FIFO_REG.delta_R3 ) | ( \FIFO_REG.delta_R4 ) | ( \FIFO_REG.delta_R5 ) | ( \FIFO_REG.delta_R6 ) | ( \FIFO_REG.delta_R7 ) | ( \FIFO_REG.delta_R8 ) | ( \FIFO_REG.delta_R9 ) | ( \FIFO_REG.delta_R10 ) | ( \FIFO_REG.delta_R11 ) | ( \FIFO_REG.delta_R12 ) | ( \FIFO_REG.delta_R13 ) | ( \FIFO_REG.delta_R14 ) | ( \FIFO_REG.delta_R15 ) | ( \FIFO_REG.delta_R16 ) | ( \FIFO_REG.delta_R17 ) | ( \FIFO_REG.delta_R18 ) | ( \FIFO_REG.delta_R19 ) | ( \FIFO_REG.delta_R20 ) | ( \FIFO_REG.delta_R21 ) | ( \FIFO_REG.delta_R22 ) | ( \FIFO_REG.delta_R23 ) | ( \FIFO_REG.delta_R24 ) | ( \FIFO_REG.delta_R25 ) | ( \FIFO_REG.delta_R26 ) | ( \FIFO_REG.delta_R27 ) | ( \FIFO_REG.delta_R28 ) | ( \FIFO_REG.delta_R29 ) | ( \FIFO_REG.delta_R30 );
  assign z_R = ( z_R0 );
  assign vd_R = ( vd_R0 );
  assign sd_R = ( sd_R0 ) | ( sd_R1 );
  assign lz_R = ( lz_R0 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { buff_nxt_R , buff_pre_R , count_R , count_t_R , i_R , n_elem_R , size_t_R , stat_after_R , stat_before_R , stat_nxt_R , arst_R , clk_R  } = 0;
  always @( posedge clk ) begin
    if( !arst ) buff_PREV_VAL1 <= 0 ;
    if( !arst ) buff_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) buff_PREV_VAL1 <= buff ;
    if( INSTR_IN_ZY ) buff_PREV_VAL2 <= buff_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( !arst ) stat_PREV_VAL1 <= 0 ;
    if( !arst ) stat_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) stat_PREV_VAL1 <= stat ;
    if( INSTR_IN_ZY ) stat_PREV_VAL2 <= stat_PREV_VAL1 ;
  end
 // ground taints for unused wire slices
  assign { \FIFO_REG.delta_R30 [0], \FIFO_REG.delta_R30 [1], \FIFO_REG.delta_R30 [2], \FIFO_REG.delta_R30 [3], \FIFO_REG.delta_R30 [4], \FIFO_REG.delta_R30 [5], \FIFO_REG.delta_R30 [6], \FIFO_REG.delta_R30 [7], \FIFO_REG.delta_R30 [8], \FIFO_REG.delta_R30 [9], \FIFO_REG.delta_R30 [10], \FIFO_REG.delta_R30 [11], \FIFO_REG.delta_R30 [12], \FIFO_REG.delta_R30 [13], \FIFO_REG.delta_R30 [14], \FIFO_REG.delta_R30 [15], \FIFO_REG.delta_R30 [16], \FIFO_REG.delta_R30 [17], \FIFO_REG.delta_R30 [18], \FIFO_REG.delta_R30 [19], \FIFO_REG.delta_R30 [20], \FIFO_REG.delta_R30 [21], \FIFO_REG.delta_R30 [22], \FIFO_REG.delta_R30 [23], \FIFO_REG.delta_R30 [24], \FIFO_REG.delta_R30 [25], \FIFO_REG.delta_R30 [26], \FIFO_REG.delta_R30 [27], \FIFO_REG.delta_R30 [28], \FIFO_REG.delta_R30 [29], \FIFO_REG.delta_R30 [30] } = 0;
  assert property( buff_r_flag == 0 );
  assert property( stat_r_flag == 0 );
  assign rst_zy = !arst ;
endmodule
