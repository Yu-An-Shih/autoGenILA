module word_adder( clk , func , inWord , rst , clk_t , func_t , inWord_t , rst_t , result , counter_r_flag , result , word_r_flag , word_sum_r_flag );
  wire [4:0] _00_;
  wire [4:0] _00__t ;
  wire [4:0] _00__r ;
  wire [4:0] _00__c ;
  wire [4:0] _00__x ;
  wire [8:0] _01_;
  wire [8:0] _01__t ;
  wire [8:0] _01__r ;
  wire [8:0] _01__c ;
  wire [8:0] _01__x ;
  wire [8:0] _02_;
  wire [8:0] _02__t ;
  wire [8:0] _02__r ;
  wire [8:0] _02__c ;
  wire [8:0] _02__x ;
  wire [8:0] _03_;
  wire [8:0] _03__t ;
  wire [8:0] _03__r ;
  wire [8:0] _03__c ;
  wire [8:0] _03__x ;
  wire [31:0] _04_;
  wire [31:0] _04__t ;
  wire [31:0] _04__r ;
  wire [31:0] _04__c ;
  wire [31:0] _04__x ;
  wire _05_;
  wire _05__t ;
  wire _05__r ;
  wire _05__c ;
  wire _05__x ;
  wire _06_;
  wire _06__t ;
  wire _06__r ;
  wire _06__c ;
  wire _06__x ;
  wire _07_;
  wire _07__t ;
  wire _07__r ;
  wire _07__c ;
  wire _07__x ;
  wire [31:0] _08_;
  wire [31:0] _08__t ;
  wire [31:0] _08__r ;
  wire [31:0] _08__c ;
  wire [31:0] _08__x ;
  input clk;
  input clk_t ;
  reg [4:0] counter;
  reg [4:0]  counter_t ;
  reg counter_t_1bit ;
  reg counter_t_flag ;
  output reg counter_r_flag ;
  wire [4:0]  counter_r ;
  wire counter_x ;
  wire [4:0]  counter_c ;
  wire [4:0] counter_next;
  wire [4:0] counter_next_t ;
  wire [4:0] counter_next_r ;
  wire [4:0] counter_next_c ;
  wire [4:0] counter_next_x ;
  input [1:0] func;
  input [1:0] func_t ;
  input [8:0] inWord;
  input [8:0] inWord_t ;
  output [8:0] result;
  wire [8:0] result_t ;
  wire [8:0] result_r ;
  wire [8:0] result_c ;
  wire [8:0] result_x ;
  input rst;
  input rst_t ;
  wire running;
  wire running_t ;
  wire running_r ;
  wire running_c ;
  wire running_x ;
  reg [8:0] word;
  reg [8:0]  word_t ;
  reg word_t_1bit ;
  reg word_t_flag ;
  output reg word_r_flag ;
  wire [8:0]  word_r ;
  wire word_x ;
  wire [8:0]  word_c ;
  wire [8:0] word_next;
  wire [8:0] word_next_t ;
  wire [8:0] word_next_r ;
  wire [8:0] word_next_c ;
  wire [8:0] word_next_x ;
  reg [8:0] word_sum;
  reg [8:0]  word_sum_t ;
  reg word_sum_t_1bit ;
  reg word_sum_t_flag ;
  output reg word_sum_r_flag ;
  wire [8:0]  word_sum_r ;
  wire word_sum_x ;
  wire [8:0]  word_sum_c ;
  wire [8:0] word_sum_next;
  wire [8:0] word_sum_next_t ;
  wire [8:0] word_sum_next_r ;
  wire [8:0] word_sum_next_c ;
  wire [8:0] word_sum_next_x ;
  assign _03_ = word_sum + _07_;
  wire [9-1:0] word_sum_c0 ;
  wire [9-1:0] word_sum_r0 ;
  wire [9-1:0] word_sum_x0 ;
  wire [1-1:0] _07__c0 ;
  wire [1-1:0] _07__r0 ;
  wire [1-1:0] _07__x0 ;
  assign _03__t = word_sum_t | _07__t ;
  assign word_sum_c0 = _03__c ;
  assign word_sum_r0 = _03__r | ( _03__c & _07__t );
  assign word_sum_x0 = _03__x ;
  assign _07__c0 = _03__c ;
  assign _07__r0 = _03__r | ( _03__c & word_sum_t );
  assign _07__x0 = _03__x ;
  assign _05_ = func == 1'h1;
  wire [2-1:0] func_c0 ;
  wire [2-1:0] func_r0 ;
  wire [2-1:0] func_x0 ;
  assign _05__t = func_t ;
  assign func_c0 = { 2{ _05__c }} ;
  assign func_r0 = { 2{ _05__r }} ;
  assign func_x0 = { 2{ _05__x }} ;
  assign _06_ = func == 2'h2;
  wire [2-1:0] func_c1 ;
  wire [2-1:0] func_r1 ;
  wire [2-1:0] func_x1 ;
  assign _06__t = func_t ;
  assign func_c1 = { 2{ _06__c }} ;
  assign func_r1 = { 2{ _06__r }} ;
  assign func_x1 = { 2{ _06__x }} ;
  assign running = counter > 1'h0;
  wire [5-1:0] counter_c0 ;
  wire [5-1:0] counter_r0 ;
  wire [5-1:0] counter_x0 ;
  assign running_t = counter_t ;
  assign counter_c0 = { 5{ running_c }} ;
  assign counter_r0 = { 5{ running_r }} ;
  assign counter_x0 = { 5{ running_x }} ;
  always @(posedge clk)
      word <= _01_;
  assign _01__x = { 9{ word != _01_ }} ;
  always @( posedge clk )
      word_t 		<= rst ? 0 : | ( _01__t & _01__x );
  always @( posedge clk )
      word_t_flag 	<= rst ? 0 : word_t_flag ? 1 : | ( _01__t & _01__x );
  always @( posedge clk )
      word_r_flag 	<= rst ? 0 : word_r_flag ? 1 : word_t_flag ? 0 : | word_r ;
  always @(posedge clk)
      word_sum <= _02_;
  assign _02__x = { 9{ word_sum != _02_ }} ;
  always @( posedge clk )
      word_sum_t 		<= rst ? 0 : | ( _02__t & _02__x );
  always @( posedge clk )
      word_sum_t_flag 	<= rst ? 0 : word_sum_t_flag ? 1 : | ( _02__t & _02__x );
  always @( posedge clk )
      word_sum_r_flag 	<= rst ? 0 : word_sum_r_flag ? 1 : word_sum_t_flag ? 0 : | word_sum_r ;
  always @(posedge clk)
      counter <= _00_;
  assign _00__x = { 5{ counter != _00_ }} ;
  always @( posedge clk )
      counter_t 		<= rst ? 0 : | ( _00__t & _00__x );
  always @( posedge clk )
      counter_t_flag 	<= rst ? 0 : counter_t_flag ? 1 : | ( _00__t & _00__x );
  always @( posedge clk )
      counter_r_flag 	<= rst ? 0 : counter_r_flag ? 1 : counter_t_flag ? 0 : | counter_r ;
  assign _00_ = rst ? 5'h00 : counter_next;
  wire [1-1:0] rst_c0 ;
  wire [1-1:0] rst_r0 ;
  wire [1-1:0] rst_x0 ;
  wire [5-1:0] rst_r0_tmp ;
  assign rst_c0 = 1;
  assign rst_x0 = | _00__x ;
  assign rst_r0 = | rst_r0_tmp ;
  wire [5-1:0] counter_next_c0 ;
  wire [5-1:0] counter_next_r0 ;
  wire [5-1:0] counter_next_x0 ;
  assign counter_next_c0 = { 5{ !rst }};
  assign counter_next_r0 = { 5{ !rst }} & ( { 5{ rst_t }} | _00__r );
  assign counter_next_x0 = _00__x ;
  assign _00__t = rst ? { 5{ rst_t }} : ( { 5{ rst_t }} | counter_next_t );
  assign rst_r0_tmp = _00__r | ( { 5{ rst }} & counter_next_t );
  assign _02_ = rst ? 9'h000 : word_sum_next;
  wire [1-1:0] rst_c1 ;
  wire [1-1:0] rst_r1 ;
  wire [1-1:0] rst_x1 ;
  wire [9-1:0] rst_r1_tmp ;
  assign rst_c1 = 1;
  assign rst_x1 = | _02__x ;
  assign rst_r1 = | rst_r1_tmp ;
  wire [9-1:0] word_sum_next_c0 ;
  wire [9-1:0] word_sum_next_r0 ;
  wire [9-1:0] word_sum_next_x0 ;
  assign word_sum_next_c0 = { 9{ !rst }};
  assign word_sum_next_r0 = { 9{ !rst }} & ( { 9{ rst_t }} | _02__r );
  assign word_sum_next_x0 = _02__x ;
  assign _02__t = rst ? { 9{ rst_t }} : ( { 9{ rst_t }} | word_sum_next_t );
  assign rst_r1_tmp = _02__r | ( { 9{ rst }} & word_sum_next_t );
  assign _01_ = rst ? 9'h000 : word_next;
  wire [1-1:0] rst_c2 ;
  wire [1-1:0] rst_r2 ;
  wire [1-1:0] rst_x2 ;
  wire [9-1:0] rst_r2_tmp ;
  assign rst_c2 = 1;
  assign rst_x2 = | _01__x ;
  assign rst_r2 = | rst_r2_tmp ;
  wire [9-1:0] word_next_c0 ;
  wire [9-1:0] word_next_r0 ;
  wire [9-1:0] word_next_x0 ;
  assign word_next_c0 = { 9{ !rst }};
  assign word_next_r0 = { 9{ !rst }} & ( { 9{ rst_t }} | _01__r );
  assign word_next_x0 = _01__x ;
  assign _01__t = rst ? { 9{ rst_t }} : ( { 9{ rst_t }} | word_next_t );
  assign rst_r2_tmp = _01__r | ( { 9{ rst }} & word_next_t );
  assign _07_ = word[$signed(_08_) +: 1];
 wire [9-1:0] word_c0 ;
 wire [9-1:0] word_r0 ;
 wire [9-1:0] word_x0 ;
 wire [32-1:0] _08__c0 ;
 wire [32-1:0] _08__r0 ;
 wire [32-1:0] _08__x0 ;
 assign _07__t = word_t | _08__t ;
 assign word_c0 = _07__c ;
 assign word_r0 = _07__r | ( _07__c & _08__t );
 assign word_x0 = _07__x ;
 assign _08__c0 = _07__c ;
 assign _08__r0 = _07__r | ( _07__c & word_t );
 assign _08__x0 = _07__x ;
  assign _08_ = counter - 1'h1;
  wire [5-1:0] counter_c1 ;
  wire [5-1:0] counter_r1 ;
  wire [5-1:0] counter_x1 ;
  assign _08__t = counter_t ;
  assign counter_c1 = _08__c ;
  assign counter_r1 = _08__r ;
  assign counter_x1 = _08__x ;
  assign word_next = _05_ ? inWord : word;
  wire [1-1:0] _05__c0 ;
  wire [1-1:0] _05__r0 ;
  wire [1-1:0] _05__x0 ;
  wire [9-1:0] _05__r0_tmp ;
  assign _05__c0 = 1;
  assign _05__x0 = | word_next_x ;
  assign _05__r0 = | _05__r0_tmp ;
  assign word_next_t = _05_ ? ( { 9{ _05__t }} | inWord_t ) : ( { 9{ _05__t }} | word_t );
  assign _05__r0_tmp = word_next_r | ( { 9{ _05_ }} & inWord_t | { 9{ !_05_ }} & word_t );
  wire [9-1:0] inWord_c0 ;
  wire [9-1:0] inWord_r0 ;
  wire [9-1:0] inWord_x0 ;
  assign inWord_c0 = { 9{ _05_ }};
  assign inWord_r0 = { 9{ _05_ }} & ( { 9{ _05__t }} | word_next_r );
  assign inWord_x0 = word_next_x ;
  wire [9-1:0] word_c1 ;
  wire [9-1:0] word_r1 ;
  wire [9-1:0] word_x1 ;
  assign word_c1 = { 9{ !_05_ }} ;
  assign word_r1 = { 9{ !_05_ }} & ( { 9{ _05__t }} | word_next_r );
  assign word_x1 = word_next_x ;
  assign _04_[4:0] = running ? _08_[4:0] : 5'h00;
  wire [1-1:0] running_c0 ;
  wire [1-1:0] running_r0 ;
  wire [1-1:0] running_x0 ;
  wire [5-1:0] running_r0_tmp ;
  assign running_c0 = 1;
  assign running_x0 = | _04__x [4:0] ;
  assign running_r0 = | running_r0_tmp ;
  wire [32-1:0] _08__c1 ;
  wire [32-1:0] _08__r1 ;
  wire [32-1:0] _08__x1 ;
  assign _08__c1 [4:0] = { 5{ running }} ;
  assign _08__r1 [4:0] = { 5{ running }} & ( { 5{ running_t }} | _04__r [4:0] );
  assign _08__x1 [4:0] = _04__x [4:0] ;
  assign _04__t [4:0] = running ? ( { 5{ running_t }} | _08__t [4:0] ) : { 5{ running_t }};
  assign running_r0_tmp = _04__r [4:0] | ( { 5{ running }} & _08__t [4:0] );
  assign _08__c1[31:5] = 0;
  assign _08__r1[31:5] = 0;
  assign _08__x1[31:5] = 0;
  assign counter_next = _06_ ? 5'h08 : _04_[4:0];
  wire [1-1:0] _06__c0 ;
  wire [1-1:0] _06__r0 ;
  wire [1-1:0] _06__x0 ;
  wire [5-1:0] _06__r0_tmp ;
  assign _06__c0 = 1;
  assign _06__x0 = | counter_next_x ;
  assign _06__r0 = | _06__r0_tmp ;
  wire [32-1:0] _04__c0 ;
  wire [32-1:0] _04__r0 ;
  wire [32-1:0] _04__x0 ;
  assign _04__c0 [4:0] = { 5{ !_06_ }};
  assign _04__r0 [4:0] = { 5{ !_06_ }} & ( { 5{ _06__t }} | counter_next_r );
  assign _04__x0 [4:0] = counter_next_x ;
  assign counter_next_t = _06_ ? { 5{ _06__t }} : ( { 5{ _06__t }} | _04__t [4:0] );
  assign _06__r0_tmp = counter_next_r | ( { 5{ _06_ }} & _04__t [4:0] );
  assign _04__c0[31:5] = 0;
  assign _04__r0[31:5] = 0;
  assign _04__x0[31:5] = 0;
  assign word_sum_next = running ? _03_ : word_sum;
  wire [1-1:0] running_c1 ;
  wire [1-1:0] running_r1 ;
  wire [1-1:0] running_x1 ;
  wire [9-1:0] running_r1_tmp ;
  assign running_c1 = 1;
  assign running_x1 = | word_sum_next_x ;
  assign running_r1 = | running_r1_tmp ;
  assign word_sum_next_t = running ? ( { 9{ running_t }} | _03__t ) : ( { 9{ running_t }} | word_sum_t );
  assign running_r1_tmp = word_sum_next_r | ( { 9{ running }} & _03__t | { 9{ !running }} & word_sum_t );
  wire [9-1:0] _03__c0 ;
  wire [9-1:0] _03__r0 ;
  wire [9-1:0] _03__x0 ;
  assign _03__c0 = { 9{ running }};
  assign _03__r0 = { 9{ running }} & ( { 9{ running_t }} | word_sum_next_r );
  assign _03__x0 = word_sum_next_x ;
  wire [9-1:0] word_sum_c1 ;
  wire [9-1:0] word_sum_r1 ;
  wire [9-1:0] word_sum_x1 ;
  assign word_sum_c1 = { 9{ !running }} ;
  assign word_sum_r1 = { 9{ !running }} & ( { 9{ running_t }} | word_sum_next_r );
  assign word_sum_x1 = word_sum_next_x ;
  assign result = word_sum;
  wire [9-1:0] word_sum_c2 ;
  wire [9-1:0] word_sum_r2 ;
  wire [9-1:0] word_sum_x2 ;
  assign result_t = word_sum_t ;
  assign word_sum_c2 = 0 ;
  assign word_sum_r2 = 0 ;
  assign word_sum_x2 = 511 ;
  assign counter_t_1bit = | counter_t ;
  assign word_t_1bit = | word_t ;
  assign word_sum_t_1bit = | word_sum_t ;
  assign _03__c = ( _03__c0 );
  assign _04__c = ( _04__c0 );
  assign word_sum_next_c = ( word_sum_next_c0 );
  assign _07__c = ( _07__c0 );
  assign word_c = ( word_c0 ) | ( word_c1 );
  assign counter_next_c = ( counter_next_c0 );
  assign running_c = ( running_c0 ) | ( running_c1 );
  assign word_sum_c = ( word_sum_c0 ) | ( word_sum_c1 ) | ( word_sum_c2 );
  assign _05__c = ( _05__c0 );
  assign _06__c = ( _06__c0 );
  assign counter_c = ( counter_c0 ) | ( counter_c1 );
  assign word_next_c = ( word_next_c0 );
  assign _08__c = ( _08__c0 ) | ( _08__c1 );
  assign _03__x = ( _03__x0 );
  assign _04__x = ( _04__x0 );
  assign word_sum_next_x = ( word_sum_next_x0 );
  assign _07__x = ( _07__x0 );
  assign word_x = | (( word_x0 ) | ( word_x1 ));
  assign counter_next_x = ( counter_next_x0 );
  assign running_x = ( running_x0 ) | ( running_x1 );
  assign word_sum_x = | (( word_sum_x0 ) | ( word_sum_x1 ) | ( word_sum_x2 ));
  assign _05__x = ( _05__x0 );
  assign _06__x = ( _06__x0 );
  assign counter_x = | (( counter_x0 ) | ( counter_x1 ));
  assign word_next_x = ( word_next_x0 );
  assign _08__x = ( _08__x0 ) | ( _08__x1 );
  assign _03__r = ( _03__x0 & _03__r0 );
  assign _04__r = ( _04__x0 & _04__r0 );
  assign word_sum_next_r = ( word_sum_next_x0 & word_sum_next_r0 );
  assign _07__r = ( _07__x0 & _07__r0 );
  assign word_r = ( word_x0 & word_r0 ) | ( word_x1 & word_r1 );
  assign counter_next_r = ( counter_next_x0 & counter_next_r0 );
  assign running_r = ( running_x0 & running_r0 ) | ( running_x1 & running_r1 );
  assign word_sum_r = ( word_sum_x0 & word_sum_r0 ) | ( word_sum_x1 & word_sum_r1 ) | ( word_sum_x2 & word_sum_r2 );
  assign _05__r = ( _05__x0 & _05__r0 );
  assign _06__r = ( _06__x0 & _06__r0 );
  assign counter_r = ( counter_x0 & counter_r0 ) | ( counter_x1 & counter_r1 );
  assign word_next_r = ( word_next_x0 & word_next_r0 );
  assign _08__r = ( _08__x0 & _08__r0 ) | ( _08__x1 & _08__r1 );
  assign _00__r = 0;
  assign _00__c = 0;
  assign _01__r = 0;
  assign _01__c = 0;
  assign _02__r = 0;
  assign _02__c = 0;
  assign _00__r = 0;
  assign _00__c = 0;
  assign _01__r = 0;
  assign _01__c = 0;
  assign _02__r = 0;
  assign _02__c = 0;
endmodule
