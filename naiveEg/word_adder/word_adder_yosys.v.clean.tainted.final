module word_adder(clk, func, inWord, rst, func_t, inWord_t, rst_t, counter_r_flag, result, word_r_flag, word_sum_r_flag);
  wire [4:0] _00_;
  wire _00__t;
  wire _00__r;
  wire _00__c;
  wire _01_;
  wire _01__t;
  wire _01__r;
  wire _01__c;
  wire [8:0] _02_;
  wire _02__t;
  wire _02__r;
  wire _02__c;
  wire [8:0] _03_;
  wire _03__t;
  wire _03__r;
  wire _03__c;
  wire [31:0] _04_;
  wire _04__t;
  wire _04__r;
  wire _04__c;
  wire _05_;
  wire _05__t;
  wire _05__r;
  wire _05__c;
  wire _06_;
  wire _06__t;
  wire _06__r;
  wire _06__c;
  wire _07_;
  wire _07__t;
  wire _07__r;
  wire _07__c;
  wire _08_;
  wire _08__t;
  wire _08__r;
  wire _08__c;
  wire _09_;
  wire _09__t;
  wire _09__r;
  wire _09__c;
  wire _10_;
  wire _10__t;
  wire _10__r;
  wire _10__c;
  wire [31:0] _11_;
  wire _11__t;
  wire _11__r;
  wire _11__c;
  input clk;
  reg [4:0] counter;
  reg counter_t;
  reg counter_t_flag;
  output reg counter_r_flag;
  wire counter_r;
  wire counter_x;
  wire [4:0] counter_next;
  wire counter_next_t;
  wire counter_next_r;
  wire counter_next_c;
  input [1:0] func;
  input func_t;
  input [8:0] inWord;
  input inWord_t;
  output [8:0] result;
  input rst;
  input rst_t;
  wire running;
  wire running_t;
  wire running_r;
  wire running_c;
  reg [8:0] word;
  reg word_t;
  reg word_t_flag;
  output reg word_r_flag;
  wire word_r;
  wire word_x;
  wire word_next;
  wire word_next_t;
  wire word_next_r;
  wire word_next_c;
  reg [8:0] word_sum;
  reg word_sum_t;
  reg word_sum_t_flag;
  output reg word_sum_r_flag;
  wire word_sum_r;
  wire word_sum_x;
  wire [8:0] word_sum_next;
  wire word_sum_next_t;
  wire word_sum_next_r;
  wire word_sum_next_c;
  assign _03_ = word_sum + _10_;
  wire word_sum_c0;
  wire word_sum_r0;
  wire word_sum_x0;
  wire _10__c0;
  wire _10__r0;
  wire _10__x0;
  assign _03__t = word_sum_t |_10__t;
  assign word_sum_c0 = _03__c;
  assign word_sum_r0 = _03__r | (_03__c & _10__t);
  assign word_sum_x0 = _03__x;
  assign _10__c0 = _03__c;
  assign _10__r0 = _03__r | (_03__c & word_sum_t);
  assign _10__x0 = _03__x;
  assign _05_ = func == 1'h1;
  wire func_c0;
  wire func_r0;
  wire func_x0;
  assign _05__t = func_t;
  assign func_c0 = _05__c;
  assign func_r0 = _05__r;
  assign func_x0 = _05__x;
  assign _06_ = func == 2'h2;
  wire func_c1;
  wire func_r1;
  wire func_x1;
  assign _06__t = func_t;
  assign func_c1 = _06__c;
  assign func_r1 = _06__r;
  assign func_x1 = _06__x;
  assign running = counter > 1'h0;
  wire counter_c0;
  wire counter_r0;
  wire counter_x0;
  assign running_t = counter_t;
  assign counter_c0 = running_c;
  assign counter_r0 = running_r;
  assign counter_x0 = running_x;
  assign _07_ = _05_ && inWord;
  wire _05__c0;
  wire _05__r0;
  wire _05__x0;
  wire inWord_c0;
  wire inWord_r0;
  wire inWord_x0;
  assign _07__t = _05__t |inWord_t;
  assign _05__c0 = _07__c;
  assign _05__r0 = _07__r | (_07__c & inWord_t);
  assign _05__x0 = _07__x;
  assign inWord_c0 = _07__c;
  assign inWord_r0 = _07__r | (_07__c & _05__t);
  assign inWord_x0 = _07__x;
  assign _08_ = _09_ && word;
  wire _09__c0;
  wire _09__r0;
  wire _09__x0;
  wire word_c0;
  wire word_r0;
  wire word_x0;
  assign _08__t = _09__t |word_t;
  assign _09__c0 = _08__c;
  assign _09__r0 = _08__r | (_08__c & word_t);
  assign _09__x0 = _08__x;
  assign word_c0 = _08__c;
  assign word_r0 = _08__r | (_08__c & _09__t);
  assign word_x0 = _08__x;
  assign _09_ = ! _05_;
  wire _05__c1;
  wire _05__r1;
  wire _05__x1;
  assign _09__t = _05__t;
  assign _05__c1 = _09__c;
  assign _05__r1 = _09__r;
  assign _05__x1 = _09__x;
  assign word_next = _07_ || _08_;
  wire _07__c0;
  wire _07__r0;
  wire _07__x0;
  wire _08__c0;
  wire _08__r0;
  wire _08__x0;
  assign word_next_t = _07__t |_08__t;
  assign _07__c0 = word_next_c;
  assign _07__r0 = word_next_r | (word_next_c & _08__t);
  assign _07__x0 = word_next_x;
  assign _08__c0 = word_next_c;
  assign _08__r0 = word_next_r | (word_next_c & _07__t);
  assign _08__x0 = word_next_x;
  always @(posedge clk)
      word <= { 8'h00, _01_ };
  wire _01__x = word != { 8'h00, _01_ };
  always @(posedge clk)
      word_t 		<= rst ? 0 : _01__t & word_x;
  always @(posedge clk)
      word_t_flag 	<= rst ? 0 : word_t_flag ? 1 : _01__t;
  always @(posedge clk)
      word_r_flag 	<= rst ? 0 : word_r_flag ? 1 : word_t_flag ? 0 : word_r;
  always @(posedge clk)
      word_sum <= _02_;
  wire _02__x = word_sum != _02_;
  always @(posedge clk)
      word_sum_t 		<= rst ? 0 : _02__t & word_sum_x;
  always @(posedge clk)
      word_sum_t_flag 	<= rst ? 0 : word_sum_t_flag ? 1 : _02__t;
  always @(posedge clk)
      word_sum_r_flag 	<= rst ? 0 : word_sum_r_flag ? 1 : word_sum_t_flag ? 0 : word_sum_r;
  always @(posedge clk)
      counter <= _00_;
  wire _00__x = counter != _00_;
  always @(posedge clk)
      counter_t 		<= rst ? 0 : _00__t & counter_x;
  always @(posedge clk)
      counter_t_flag 	<= rst ? 0 : counter_t_flag ? 1 : _00__t;
  always @(posedge clk)
      counter_r_flag 	<= rst ? 0 : counter_r_flag ? 1 : counter_t_flag ? 0 : counter_r;
  assign _00_ = rst ? 5'h00 : counter_next;
  wire rst_c0;
  wire rst_r0;
  wire rst_x0;
  assign rst_c0 = 1;
  assign rst_x0 = _00__x;
  wire counter_next_c0;
  wire counter_next_r0;
  wire counter_next_x0;
  assign counter_next_c0 = !rst;
  assign counter_next_r0 = !rst & (rst_t | _00__r);
  assign counter_next_x0 = _00__x;
  assign _00__t = rst ? rst_t : (rst_t | counter_next_t);
  assign rst_r0 = _00__r | (rst & counter_next_t);
  assign _02_ = rst ? 9'h000 : word_sum_next;
  wire rst_c1;
  wire rst_r1;
  wire rst_x1;
  assign rst_c1 = 1;
  assign rst_x1 = _02__x;
  wire word_sum_next_c0;
  wire word_sum_next_r0;
  wire word_sum_next_x0;
  assign word_sum_next_c0 = !rst;
  assign word_sum_next_r0 = !rst & (rst_t | _02__r);
  assign word_sum_next_x0 = _02__x;
  assign _02__t = rst ? rst_t : (rst_t | word_sum_next_t);
  assign rst_r1 = _02__r | (rst & word_sum_next_t);
  assign _01_ = rst ? 1'h0 : word_next;
  wire rst_c2;
  wire rst_r2;
  wire rst_x2;
  assign rst_c2 = 1;
  assign rst_x2 = _01__x;
  wire word_next_c0;
  wire word_next_r0;
  wire word_next_x0;
  assign word_next_c0 = !rst;
  assign word_next_r0 = !rst & (rst_t | _01__r);
  assign word_next_x0 = _01__x;
  assign _01__t = rst ? rst_t : (rst_t | word_next_t);
  assign rst_r2 = _01__r | (rst & word_next_t);
  assign _10_ = word[$signed(_11_) +: 1];
  wire word_c1;
  wire word_r1;
  wire word_x1;
  wire _11__c0;
  wire _11__r0;
  wire _11__x0;
  assign _10__t = word_t |_11__t;
  assign word_c1 = _10__c;
  assign word_r1 = _10__r | (_10__c & _11__t);
  assign word_x1 = _10__x;
  assign _11__c0 = _10__c;
  assign _11__r0 = _10__r | (_10__c & word_t);
  assign _11__x0 = _10__x;
  assign _11_ = counter - 1'h1;
  wire counter_c1;
  wire counter_r1;
  wire counter_x1;
  assign _11__t = counter_t;
  assign counter_c1 = _11__c;
  assign counter_r1 = _11__r;
  assign counter_x1 = _11__x;
  assign _04_[4:0] = running ? _11_[4:0] : 5'h00;
  wire running_c0;
  wire running_r0;
  wire running_x0;
  assign running_c0 = 1;
  assign running_x0 = _04__x;
  wire _11__c1;
  wire _11__r1;
  wire _11__x1;
  assign _11__c1 = running;
  assign _11__r1 = running & (running_t | _04__r);
  assign _11__x1 = _04__x;
  assign _04__t = running ? (running_t | _11__t) : running_t;
  assign running_r0 = _04__r | (running & _11__t);
  assign counter_next = _06_ ? 5'h08 : _04_[4:0];
  wire _06__c0;
  wire _06__r0;
  wire _06__x0;
  assign _06__c0 = 1;
  assign _06__x0 = counter_next_x;
  wire _04__c0;
  wire _04__r0;
  wire _04__x0;
  assign _04__c0 = !_06_;
  assign _04__r0 = !_06_ & (_06__t | counter_next_r);
  assign _04__x0 = counter_next_x;
  assign counter_next_t = _06_ ? _06__t : (_06__t | _04__t);
  assign _06__r0 = counter_next_r | (_06_ & _04__t);
  assign word_sum_next = running ? _03_ : word_sum;
  wire running_c1;
  wire running_r1;
  wire running_x1;
  assign running_c1 = 1;
  assign running_x1 = word_sum_next_x;
  assign word_sum_next_t = running ? (running_t | _03__t) : (running_t | word_sum_t);
  assign running_r1 = word_sum_next_r | (running & _03__t | !running & word_sum_t);
  wire _03__c0;
  wire _03__r0;
  wire _03__x0;
  assign _03__c0 = running;
  assign _03__r0 = running & (running_t | word_sum_next_r);
  assign _03__x0 = word_sum_next_x;
  assign result = word_sum;
  wire word_sum_c1;
  wire word_sum_r1;
  wire word_sum_x1;
  assign result_t = word_sum_t;
  assign word_sum_c1 = 0;
  assign word_sum_r1 = 0;
  assign word_sum_x1 = 1;
  assign _03__c = (_03__c0);
  assign _04__c = (_04__c0);
  assign word_sum_next_c = (word_sum_next_c0);
  assign func_c = (func_c0) | (func_c1);
  assign running_c = (running_c0) | (running_c1);
  assign _05__c = (_05__c0) | (_05__c1);
  assign word_sum_c = (word_sum_c0) | (word_sum_c1);
  assign counter_next_c = (counter_next_c0);
  assign _10__c = (_10__c0);
  assign inWord_c = (inWord_c0);
  assign _09__c = (_09__c0);
  assign word_c = (word_c0) | (word_c1);
  assign _07__c = (_07__c0);
  assign _06__c = (_06__c0);
  assign word_next_c = (word_next_c0);
  assign counter_c = (counter_c0) | (counter_c1);
  assign _08__c = (_08__c0);
  assign _11__c = (_11__c0) | (_11__c1);
  assign rst_c = (rst_c0) | (rst_c1) | (rst_c2);
  assign _03__x = (_03__x0);
  assign _04__x = (_04__x0);
  assign word_sum_next_x = (word_sum_next_x0);
  assign func_x = (func_x0) | (func_x1);
  assign running_x = (running_x0) | (running_x1);
  assign _05__x = (_05__x0) | (_05__x1);
  assign word_sum_x = (word_sum_x0) | (word_sum_x1);
  assign counter_next_x = (counter_next_x0);
  assign _10__x = (_10__x0);
  assign inWord_x = (inWord_x0);
  assign _09__x = (_09__x0);
  assign word_x = (word_x0) | (word_x1);
  assign _07__x = (_07__x0);
  assign _06__x = (_06__x0);
  assign word_next_x = (word_next_x0);
  assign counter_x = (counter_x0) | (counter_x1);
  assign _08__x = (_08__x0);
  assign _11__x = (_11__x0) | (_11__x1);
  assign rst_x = (rst_x0) | (rst_x1) | (rst_x2);
  assign _03__r = (_03__r0);
  assign _04__r = (_04__r0);
  assign word_sum_next_r = (word_sum_next_r0);
  assign func_r = (func_r0) | (func_r1);
  assign running_r = (running_r0) | (running_r1);
  assign _05__r = (_05__r0) | (_05__r1);
  assign word_sum_r = word_sum_x & ((word_sum_r0) | (word_sum_r1));
  assign counter_next_r = (counter_next_r0);
  assign _10__r = (_10__r0);
  assign inWord_r = (inWord_r0);
  assign _09__r = (_09__r0);
  assign word_r = word_x & ((word_r0) | (word_r1));
  assign _07__r = (_07__r0);
  assign _06__r = (_06__r0);
  assign word_next_r = (word_next_r0);
  assign counter_r = counter_x & ((counter_r0) | (counter_r1));
  assign _08__r = (_08__r0);
  assign _11__r = (_11__r0) | (_11__r1);
  assign rst_r = (rst_r0) | (rst_r1) | (rst_r2);
  assign _00__r = 0;
  assign _01__r = 0;
  assign _02__r = 0;
endmodule
