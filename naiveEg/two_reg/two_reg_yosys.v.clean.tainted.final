module two_reg( clk , clk_t , func , func_t , rst , rst_t , out_wire_r , out_wire , sign , enable_r_flag , out_r_flag , sign_r_flag );
  wire _00_;
  wire _00__t ;
  wire _00__r ;
  wire _00__c ;
  wire _00__x ;
  wire _01_;
  wire _01__t ;
  wire _01__r ;
  wire _01__c ;
  wire _01__x ;
  wire _02_;
  wire _02__t ;
  wire _02__r ;
  wire _02__c ;
  wire _02__x ;
  wire _03_;
  wire _03__t ;
  wire _03__r ;
  wire _03__c ;
  wire _03__x ;
  wire _04_;
  wire _04__t ;
  wire _04__r ;
  wire _04__c ;
  wire _04__x ;
  wire _05_;
  wire _05__t ;
  wire _05__r ;
  wire _05__c ;
  wire _05__x ;
  input clk;
  input clk_t ;
  reg enable;
  reg  enable_t ;
  reg enable_t_1bit ;
  reg enable_t_flag ;
  output reg enable_r_flag ;
  wire  enable_r ;
  wire enable_x ;
  wire  enable_c ;
  wire enable_next;
  wire enable_next_t ;
  wire enable_next_r ;
  wire enable_next_c ;
  wire enable_next_x ;
  input [1:0] func;
  input [1:0] func_t ;
  reg out;
  reg  out_t ;
  reg out_t_1bit ;
  reg out_t_flag ;
  output reg out_r_flag ;
  wire  out_r ;
  wire out_x ;
  wire  out_c ;
  wire out_next;
  wire out_next_t ;
  wire out_next_r ;
  wire out_next_c ;
  wire out_next_x ;
  output out_wire;
  wire out_wire_t ;
  wire out_wire_r ;
  wire out_wire_c ;
  wire out_wire_x ;
  input rst;
  input rst_t ;
  output sign;
  reg sign;
  reg  sign_t ;
  reg sign_t_1bit ;
  reg sign_t_flag ;
  output reg sign_r_flag ;
  wire  sign_r ;
  wire sign_x ;
  wire  sign_c ;
  wire sign_next;
  wire sign_next_t ;
  wire sign_next_r ;
  wire sign_next_c ;
  wire sign_next_x ;
  assign _03_ = func == 1'h1;
  wire [2-1:0] func_c0 ;
  wire [2-1:0] func_r0 ;
  wire [2-1:0] func_x0 ;
  assign _03__t = func_t ;
  assign func_c0 = { 2{ _03__c }} ;
  assign func_r0 = { 2{ _03__r }} ;
  assign func_x0 = { 2{ _03__x }} ;
  assign _04_ = func == 2'h2;
  wire [2-1:0] func_c1 ;
  wire [2-1:0] func_r1 ;
  wire [2-1:0] func_x1 ;
  assign _04__t = func_t ;
  assign func_c1 = { 2{ _04__c }} ;
  assign func_r1 = { 2{ _04__r }} ;
  assign func_x1 = { 2{ _04__x }} ;
  assign _05_ = _04_ && enable;
  wire [1-1:0] _04__c0 ;
  wire [1-1:0] _04__r0 ;
  wire [1-1:0] _04__x0 ;
  wire [1-1:0] enable_c0 ;
  wire [1-1:0] enable_r0 ;
  wire [1-1:0] enable_x0 ;
  assign _05__t = _04__t | enable_t ;
  assign _04__c0 = _05__c ;
  assign _04__r0 = _05__r | ( _05__c & enable_t );
  assign _04__x0 = _05__x ;
  assign enable_c0 = _05__c ;
  assign enable_r0 = _05__r | ( _05__c & _04__t );
  assign enable_x0 = _05__x ;
  always @(posedge clk)
      sign <= _02_;
  assign _02__x = { 1{ sign != _02_ }} ;
  always @( posedge clk )
      sign_t 		<= rst ? 0 : | ( _02__t & _02__x );
  always @( posedge clk )
      sign_t_flag 	<= rst ? 0 : sign_t_flag ? 1 : | ( _02__t & _02__x );
  always @( posedge clk )
      sign_r_flag 	<= rst ? 0 : sign_r_flag ? 1 : sign_t_flag ? 0 : | sign_r ;
  always @(posedge clk)
      enable <= _00_;
  assign _00__x = { 1{ enable != _00_ }} ;
  always @( posedge clk )
      enable_t 		<= rst ? 0 : | ( _00__t & _00__x );
  always @( posedge clk )
      enable_t_flag 	<= rst ? 0 : enable_t_flag ? 1 : | ( _00__t & _00__x );
  always @( posedge clk )
      enable_r_flag 	<= rst ? 0 : enable_r_flag ? 1 : enable_t_flag ? 0 : | enable_r ;
  always @(posedge clk)
      out <= _01_;
  assign _01__x = { 1{ out != _01_ }} ;
  always @( posedge clk )
      out_t 		<= rst ? 0 : | ( _01__t & _01__x );
  always @( posedge clk )
      out_t_flag 	<= rst ? 0 : out_t_flag ? 1 : | ( _01__t & _01__x );
  always @( posedge clk )
      out_r_flag 	<= rst ? 0 : out_r_flag ? 1 : out_t_flag ? 0 : | out_r ;
  assign _01_ = rst ? 1'h0 : out_next;
  wire [1-1:0] rst_c0 ;
  wire [1-1:0] rst_r0 ;
  wire [1-1:0] rst_x0 ;
  wire [1-1:0] rst_r0_tmp ;
  assign rst_c0 = 1;
  assign rst_x0 = | _01__x ;
  assign rst_r0 = | rst_r0_tmp ;
  wire [1-1:0] out_next_c0 ;
  wire [1-1:0] out_next_r0 ;
  wire [1-1:0] out_next_x0 ;
  assign out_next_c0 = { 1{ !rst }};
  assign out_next_r0 = { 1{ !rst }} & ( { 1{ rst_t }} | _01__r );
  assign out_next_x0 = _01__x ;
  assign _01__t = rst ? { 1{ rst_t }} : ( { 1{ rst_t }} | out_next_t );
  assign rst_r0_tmp = _01__r | ( { 1{ rst }} & out_next_t );
  assign _00_ = rst ? 1'h0 : enable_next;
  wire [1-1:0] rst_c1 ;
  wire [1-1:0] rst_r1 ;
  wire [1-1:0] rst_x1 ;
  wire [1-1:0] rst_r1_tmp ;
  assign rst_c1 = 1;
  assign rst_x1 = | _00__x ;
  assign rst_r1 = | rst_r1_tmp ;
  wire [1-1:0] enable_next_c0 ;
  wire [1-1:0] enable_next_r0 ;
  wire [1-1:0] enable_next_x0 ;
  assign enable_next_c0 = { 1{ !rst }};
  assign enable_next_r0 = { 1{ !rst }} & ( { 1{ rst_t }} | _00__r );
  assign enable_next_x0 = _00__x ;
  assign _00__t = rst ? { 1{ rst_t }} : ( { 1{ rst_t }} | enable_next_t );
  assign rst_r1_tmp = _00__r | ( { 1{ rst }} & enable_next_t );
  assign _02_ = rst ? 1'h0 : sign_next;
  wire [1-1:0] rst_c2 ;
  wire [1-1:0] rst_r2 ;
  wire [1-1:0] rst_x2 ;
  wire [1-1:0] rst_r2_tmp ;
  assign rst_c2 = 1;
  assign rst_x2 = | _02__x ;
  assign rst_r2 = | rst_r2_tmp ;
  wire [1-1:0] sign_next_c0 ;
  wire [1-1:0] sign_next_r0 ;
  wire [1-1:0] sign_next_x0 ;
  assign sign_next_c0 = { 1{ !rst }};
  assign sign_next_r0 = { 1{ !rst }} & ( { 1{ rst_t }} | _02__r );
  assign sign_next_x0 = _02__x ;
  assign _02__t = rst ? { 1{ rst_t }} : ( { 1{ rst_t }} | sign_next_t );
  assign rst_r2_tmp = _02__r | ( { 1{ rst }} & sign_next_t );
  assign enable_next = _03_ ? 1'h1 : enable;
  wire [1-1:0] _03__c0 ;
  wire [1-1:0] _03__r0 ;
  wire [1-1:0] _03__x0 ;
  wire [1-1:0] _03__r0_tmp ;
  assign _03__c0 = 1;
  assign _03__x0 = | enable_next_x ;
  assign _03__r0 = | _03__r0_tmp ;
  wire [1-1:0] enable_c1 ;
  wire [1-1:0] enable_r1 ;
  wire [1-1:0] enable_x1 ;
  assign enable_c1 = { 1{ !_03_ }};
  assign enable_r1 = { 1{ !_03_ }} & ( { 1{ _03__t }} | enable_next_r );
  assign enable_x1 = enable_next_x ;
  assign enable_next_t = _03_ ? { 1{ _03__t }} : ( { 1{ _03__t }} | enable_t );
  assign _03__r0_tmp = enable_next_r | ( { 1{ _03_ }} & enable_t );
  assign out_next = _05_ ? 1'h1 : out;
  wire [1-1:0] _05__c0 ;
  wire [1-1:0] _05__r0 ;
  wire [1-1:0] _05__x0 ;
  wire [1-1:0] _05__r0_tmp ;
  assign _05__c0 = 1;
  assign _05__x0 = | out_next_x ;
  assign _05__r0 = | _05__r0_tmp ;
  wire [1-1:0] out_c0 ;
  wire [1-1:0] out_r0 ;
  wire [1-1:0] out_x0 ;
  assign out_c0 = { 1{ !_05_ }};
  assign out_r0 = { 1{ !_05_ }} & ( { 1{ _05__t }} | out_next_r );
  assign out_x0 = out_next_x ;
  assign out_next_t = _05_ ? { 1{ _05__t }} : ( { 1{ _05__t }} | out_t );
  assign _05__r0_tmp = out_next_r | ( { 1{ _05_ }} & out_t );
  assign sign_next = _04_ ? 1'h1 : sign;
  wire [1-1:0] _04__c1 ;
  wire [1-1:0] _04__r1 ;
  wire [1-1:0] _04__x1 ;
  wire [1-1:0] _04__r1_tmp ;
  assign _04__c1 = 1;
  assign _04__x1 = | sign_next_x ;
  assign _04__r1 = | _04__r1_tmp ;
  wire [1-1:0] sign_c0 ;
  wire [1-1:0] sign_r0 ;
  wire [1-1:0] sign_x0 ;
  assign sign_c0 = { 1{ !_04_ }};
  assign sign_r0 = { 1{ !_04_ }} & ( { 1{ _04__t }} | sign_next_r );
  assign sign_x0 = sign_next_x ;
  assign sign_next_t = _04_ ? { 1{ _04__t }} : ( { 1{ _04__t }} | sign_t );
  assign _04__r1_tmp = sign_next_r | ( { 1{ _04_ }} & sign_t );
  assign out_wire = out;
  wire [1-1:0] out_c1 ;
  wire [1-1:0] out_r1 ;
  wire [1-1:0] out_x1 ;
  assign out_wire_t = out_t ;
  assign out_c1 = 0 ;
  assign out_r1 = out_wire_r ;
  assign out_x1 = 1 ;
  assign enable_t_1bit = | enable_t ;
  assign out_t_1bit = | out_t ;
  assign sign_t_1bit = | sign_t ;
  assign _05__c = ( _05__c0 );
  assign _03__c = ( _03__c0 );
  assign sign_c = ( sign_c0 );
  assign enable_next_c = ( enable_next_c0 );
  assign _04__c = ( _04__c0 ) | ( _04__c1 );
  assign out_next_c = ( out_next_c0 );
  assign out_c = ( out_c0 ) | ( out_c1 );
  assign enable_c = ( enable_c0 ) | ( enable_c1 );
  assign sign_next_c = ( sign_next_c0 );
  assign _05__x = ( _05__x0 );
  assign _03__x = ( _03__x0 );
  assign sign_x = | (( sign_x0 ));
  assign enable_next_x = ( enable_next_x0 );
  assign _04__x = ( _04__x0 ) | ( _04__x1 );
  assign out_next_x = ( out_next_x0 );
  assign out_x = | (( out_x0 ) | ( out_x1 ));
  assign enable_x = | (( enable_x0 ) | ( enable_x1 ));
  assign sign_next_x = ( sign_next_x0 );
  assign _05__r = ( _05__x0 & _05__r0 );
  assign _03__r = ( _03__x0 & _03__r0 );
  assign sign_r = ( sign_x0 & sign_r0 );
  assign enable_next_r = ( enable_next_x0 & enable_next_r0 );
  assign _04__r = ( _04__x0 & _04__r0 ) | ( _04__x1 & _04__r1 );
  assign out_next_r = ( out_next_x0 & out_next_r0 );
  assign out_r = ( out_x0 & out_r0 ) | ( out_x1 & out_r1 );
  assign enable_r = ( enable_x0 & enable_r0 ) | ( enable_x1 & enable_r1 );
  assign sign_next_r = ( sign_next_x0 & sign_next_r0 );
  assign _00__r = 0;
  assign _00__c = 0;
  assign _01__r = 0;
  assign _01__c = 0;
  assign _02__r = 0;
  assign _02__c = 0;
  assign _00__r = 0;
  assign _00__c = 0;
  assign _01__r = 0;
  assign _01__c = 0;
  assign _02__r = 0;
  assign _02__c = 0;
  input [0:0] out_wire_r ;
endmodule
