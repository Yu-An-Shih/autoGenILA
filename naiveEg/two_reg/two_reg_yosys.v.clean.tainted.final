module two_reg(clk, func, rst, func_t, rst_t, enable_r_flag, out, out_r_flag, sign, sign_r_flag);
  wire _00_;
  wire _00__t;
  wire _00__r;
  wire _00__c;
  wire _01_;
  wire _01__t;
  wire _01__r;
  wire _01__c;
  wire _02_;
  wire _02__t;
  wire _02__r;
  wire _02__c;
  wire _03_;
  wire _03__t;
  wire _03__r;
  wire _03__c;
  wire _04_;
  wire _04__t;
  wire _04__r;
  wire _04__c;
  wire _05_;
  wire _05__t;
  wire _05__r;
  wire _05__c;
  input clk;
  reg enable;
  reg enable_t;
  reg enable_t_flag;
  output reg enable_r_flag;
  wire enable_r;
  wire enable_x;
  wire enable_next;
  wire enable_next_t;
  wire enable_next_r;
  wire enable_next_c;
  input [1:0] func;
  input func_t;
  output out;
  reg out;
  reg out_t;
  reg out_t_flag;
  output reg out_r_flag;
  wire out_r;
  wire out_x;
  wire out_next;
  wire out_next_t;
  wire out_next_r;
  wire out_next_c;
  input rst;
  input rst_t;
  output sign;
  reg sign;
  reg sign_t;
  reg sign_t_flag;
  output reg sign_r_flag;
  wire sign_r;
  wire sign_x;
  wire sign_next;
  wire sign_next_t;
  wire sign_next_r;
  wire sign_next_c;
  assign _03_ = func == 1'h1;
  wire func_c0;
  wire func_r0;
  wire func_x0;
  assign _03__t = func_t;
  assign func_c0 = _03__c;
  assign func_r0 = _03__r;
  assign func_x0 = _03__x;
  assign _04_ = func == 2'h2;
  wire func_c1;
  wire func_r1;
  wire func_x1;
  assign _04__t = func_t;
  assign func_c1 = _04__c;
  assign func_r1 = _04__r;
  assign func_x1 = _04__x;
  assign _05_ = _04_ && enable;
  wire _04__c0;
  wire _04__r0;
  wire _04__x0;
  wire enable_c0;
  wire enable_r0;
  wire enable_x0;
  assign _05__t = _04__t |enable_t;
  assign _04__c0 = _05__c;
  assign _04__r0 = _05__r | (_05__c & enable_t);
  assign _04__x0 = _05__x;
  assign enable_c0 = _05__c;
  assign enable_r0 = _05__r | (_05__c & _04__t);
  assign enable_x0 = _05__x;
  always @(posedge clk)
      out <= _01_;
  wire _01__x = out != _01_;
  always @(posedge clk)
      out_t 		<= rst ? 0 : _01__t & out_x;
  always @(posedge clk)
      out_t_flag 	<= rst ? 0 : out_t_flag ? 1 : _01__t;
  always @(posedge clk)
      out_r_flag 	<= rst ? 0 : out_r_flag ? 1 : out_t_flag ? 0 : out_r;
  always @(posedge clk)
      sign <= _02_;
  wire _02__x = sign != _02_;
  always @(posedge clk)
      sign_t 		<= rst ? 0 : _02__t & sign_x;
  always @(posedge clk)
      sign_t_flag 	<= rst ? 0 : sign_t_flag ? 1 : _02__t;
  always @(posedge clk)
      sign_r_flag 	<= rst ? 0 : sign_r_flag ? 1 : sign_t_flag ? 0 : sign_r;
  always @(posedge clk)
      enable <= _00_;
  wire _00__x = enable != _00_;
  always @(posedge clk)
      enable_t 		<= rst ? 0 : _00__t & enable_x;
  always @(posedge clk)
      enable_t_flag 	<= rst ? 0 : enable_t_flag ? 1 : _00__t;
  always @(posedge clk)
      enable_r_flag 	<= rst ? 0 : enable_r_flag ? 1 : enable_t_flag ? 0 : enable_r;
  assign _00_ = rst ? 1'h0 : enable_next;
  wire rst_c0;
  wire rst_r0;
  wire rst_x0;
  assign rst_c0 = 1;
  assign rst_x0 = _00__x;
  wire enable_next_c0;
  wire enable_next_r0;
  wire enable_next_x0;
  assign enable_next_c0 = !rst;
  assign enable_next_r0 = !rst & (rst_t | _00__r);
  assign enable_next_x0 = _00__x;
  assign _00__t = rst ? rst_t : (rst_t | enable_next_t);
  assign rst_r0 = _00__r | (rst & enable_next_t);
  assign _02_ = rst ? 1'h0 : sign_next;
  wire rst_c1;
  wire rst_r1;
  wire rst_x1;
  assign rst_c1 = 1;
  assign rst_x1 = _02__x;
  wire sign_next_c0;
  wire sign_next_r0;
  wire sign_next_x0;
  assign sign_next_c0 = !rst;
  assign sign_next_r0 = !rst & (rst_t | _02__r);
  assign sign_next_x0 = _02__x;
  assign _02__t = rst ? rst_t : (rst_t | sign_next_t);
  assign rst_r1 = _02__r | (rst & sign_next_t);
  assign _01_ = rst ? 1'h0 : out_next;
  wire rst_c2;
  wire rst_r2;
  wire rst_x2;
  assign rst_c2 = 1;
  assign rst_x2 = _01__x;
  wire out_next_c0;
  wire out_next_r0;
  wire out_next_x0;
  assign out_next_c0 = !rst;
  assign out_next_r0 = !rst & (rst_t | _01__r);
  assign out_next_x0 = _01__x;
  assign _01__t = rst ? rst_t : (rst_t | out_next_t);
  assign rst_r2 = _01__r | (rst & out_next_t);
  assign enable_next = _03_ ? 1'h1 : enable;
  wire _03__c0;
  wire _03__r0;
  wire _03__x0;
  assign _03__c0 = 1;
  assign _03__x0 = enable_next_x;
  assign enable_next_t = _03_ ? _03__t : (_03__t | enable_t);
  assign _03__r0 = enable_next_r | (_03_ & enable_t);
  assign out_next = _05_ ? 1'h1 : out;
  wire _05__c0;
  wire _05__r0;
  wire _05__x0;
  assign _05__c0 = 1;
  assign _05__x0 = out_next_x;
  assign out_next_t = _05_ ? _05__t : (_05__t | out_t);
  assign _05__r0 = out_next_r | (_05_ & out_t);
  assign sign_next = _04_ ? 1'h1 : sign;
  wire _04__c1;
  wire _04__r1;
  wire _04__x1;
  assign _04__c1 = 1;
  assign _04__x1 = sign_next_x;
  assign sign_next_t = _04_ ? _04__t : (_04__t | sign_t);
  assign _04__r1 = sign_next_r | (_04_ & sign_t);
  assign _05__c = (_05__c0);
  assign _03__c = (_03__c0);
  assign out_next_c = (out_next_c0);
  assign _04__c = (_04__c0) | (_04__c1);
  assign enable_next_c = (enable_next_c0);
  assign func_c = (func_c0) | (func_c1);
  assign enable_c = (enable_c0);
  assign sign_next_c = (sign_next_c0);
  assign rst_c = (rst_c0) | (rst_c1) | (rst_c2);
  assign _05__x = (_05__x0);
  assign _03__x = (_03__x0);
  assign out_next_x = (out_next_x0);
  assign _04__x = (_04__x0) | (_04__x1);
  assign enable_next_x = (enable_next_x0);
  assign func_x = (func_x0) | (func_x1);
  assign enable_x = (enable_x0);
  assign sign_next_x = (sign_next_x0);
  assign rst_x = (rst_x0) | (rst_x1) | (rst_x2);
  assign _05__r = (_05__r0);
  assign _03__r = (_03__r0);
  assign out_next_r = (out_next_r0);
  assign _04__r = (_04__r0) | (_04__r1);
  assign enable_next_r = (enable_next_r0);
  assign func_r = (func_r0) | (func_r1);
  assign enable_r = enable_x & ((enable_r0));
  assign sign_next_r = (sign_next_r0);
  assign rst_r = (rst_r0) | (rst_r1) | (rst_r2);
  assign out_r = 0;
  assign sign_r = 0;
  assign _00__r = 0;
  assign _01__r = 0;
  assign _02__r = 0;
endmodule
