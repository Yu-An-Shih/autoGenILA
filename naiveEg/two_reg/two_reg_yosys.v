/* Generated by Yosys 0.8 (git sha1 UNKNOWN, clang 9.0.0 -fPIC -Os) */

(* top =  1  *)
(* src = "two_reg.v:6" *)
module two_reg(clk, rst, func, out, sign);
  (* src = "two_reg.v:24" *)
  wire _00_;
  (* src = "two_reg.v:24" *)
  wire _01_;
  (* src = "two_reg.v:24" *)
  wire _02_;
  (* src = "two_reg.v:20" *)
  wire _03_;
  (* src = "two_reg.v:21" *)
  wire _04_;
  (* src = "two_reg.v:21" *)
  wire _05_;
  (* src = "two_reg.v:7" *)
  input clk;
  (* src = "two_reg.v:13" *)
  reg enable;
  (* src = "two_reg.v:16" *)
  wire enable_next;
  (* src = "two_reg.v:9" *)
  input [1:0] func;
  (* src = "two_reg.v:10" *)
  output out;
  reg out;
  (* src = "two_reg.v:17" *)
  wire out_next;
  (* src = "two_reg.v:8" *)
  input rst;
  (* src = "two_reg.v:11" *)
  output sign;
  reg sign;
  (* src = "two_reg.v:18" *)
  wire sign_next;
  assign _03_ = func == (* src = "two_reg.v:20" *) 1'h1;
  assign _04_ = func == (* src = "two_reg.v:21" *) 2'h2;
  assign _05_ = _04_ && (* src = "two_reg.v:21" *) enable;
  always @(posedge clk)
      out <= _01_;
  always @(posedge clk)
      sign <= _02_;
  always @(posedge clk)
      enable <= _00_;
  assign _00_ = rst ? (* src = "two_reg.v:25" *) 1'h0 : enable_next;
  assign _02_ = rst ? (* src = "two_reg.v:25" *) 1'h0 : sign_next;
  assign _01_ = rst ? (* src = "two_reg.v:25" *) 1'h0 : out_next;
  assign enable_next = _03_ ? (* src = "two_reg.v:20" *) 1'h1 : enable;
  assign out_next = _05_ ? (* src = "two_reg.v:21" *) 1'h1 : out;
  assign sign_next = _04_ ? (* src = "two_reg.v:22" *) 1'h1 : sign;
endmodule
