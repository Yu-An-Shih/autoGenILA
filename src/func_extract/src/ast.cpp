#include "ast.h"
#include "parse_fill.h"
#include "helper.h"

#define SV std::vector<std::string>
#define PV std::vector<astNode*>
#define toStr(a) std::to_string(a)

std::map<std::string, astNode*> g_visitedNode;

// "line" is verilog line generated by Yosys
void build_ast_tree() {
  for(std::string reg: moduleAs) {
    if(reg2Slices.find(reg) == reg2Slices.end()) {
      build_tree_for_single_as(reg);
    }
    else { // if different slices are assigned differently
      for(std::string regAndSlice: reg2Slices[reg]) {
        build_tree_for_single_as(regAndSlice);
      }
    }
  }
}


void build_tree_for_single_as(std::string regAndSlice) {
  //g_visitedNode.clear();
  toCoutVerb("### Begin build: "+regAndSlice);
  uint32_t regWidth = get_var_slice_width(regAndSlice);
  astNode* root = new astNode;
  add_node(regAndSlice, 0, root, true);
}


void add_node(std::string var, uint32_t timeIdx, astNode* const node, bool varIsDest) {
  if(g_visitedNode.find(var) != g_visitedNode.end())
    return;
  if(var.compare("kp") == 0) {
    toCout("FIND IT!");
  }
  g_varNode.emplace(var, node);  
  if ( isInput(var) ) {
    add_input_node(var, timeIdx, node);
  }
  else if ( isAs(var) && !varIsDest ) {
    add_as_node(var, timeIdx, node);    
  }
  else if( isReg(var) ) {
    add_nb_node(var, timeIdx, node);
  }
  else if( isNum(var) ) {
    add_num_node(var, timeIdx, node);
  }
  else if( is_case_dest(var) ) {
    add_case_node(var, timeIdx, node);
  }
  else { // it is wire
    add_ssa_node(var, timeIdx, node);
  }
}


// varAndSlice is the child variable. node is the parent node
void add_child_node(std::string varAndSlice, uint32_t timeIdx, astNode* const node) {
  toCoutVerb("!! Add child "+varAndSlice+" to "+node->dest);
  std::string var, varSlice;
  split_slice(varAndSlice, var, varSlice);  
  if( reg2Slices.find(var) == reg2Slices.end() ) {
    // TODO: JUN/23 if reg has already been visited, link to that node, instead of making a new node
    if(g_visitedNode.find(var) == g_visitedNode.end()) {
      astNode* nextNode = new astNode;      
      node->childVec.push_back(nextNode);
      add_node(var, timeIdx, nextNode, false);
    }
    else {
      astNode* existedNode = g_visitedNode[var];
      node->childVec.push_back(existedNode);
    }
  }
  else {
    for(std::string slice: reg2Slices[var]) {
      if(g_visitedNode.find(slice) == g_visitedNode.end()) {      
        astNode* nextNode = new astNode;      
        node->childVec.push_back(nextNode);
        add_node(slice, timeIdx, nextNode, false);
      }
      else {
        astNode* existedNode = g_visitedNode[slice];
        node->childVec.push_back(existedNode);
      }
    }
  }
}


// timeIdx is time for dest, not src in the expression
void add_nb_node(std::string regAndSlice, uint32_t timeIdx, astNode* const node) {
  toCoutVerb("Add nb node for :" + regAndSlice);
  g_visitedNode.emplace(regAndSlice, node);
  std::string destAssign = g_nbTable[regAndSlice];
  std::smatch m;
  if(std::regex_match(destAssign, m, pNonblock)) {
    std::string destNext = m.str(3);
    uint32_t destNextWidth = get_var_slice_width(destNext);
    uint32_t destWidth = get_var_slice_width(regAndSlice);

    node->type = NONBLOCK;
    node->dest = regAndSlice;
    node->op = "<=";
    node->srcVec.push_back(destNext);
    node->destTime = timeIdx;
    node->done = false;

    add_child_node(destNext, timeIdx+1, node);
  }
  else if(std::regex_match(destAssign, m, pNonblockConcat)) {
  }
  else if(std::regex_match(destAssign, m, pNonblockIf)) {
  }
  else {
    toCout("Error in add_nb_constraint: "+destAssign);
  }
}


// The var may contain slice
// (1) If varAndSlice is in g_ssaTable, then just build that node
// (2) If not, build nodes for the whole variable
// (3) If no slice, build nodes for the whole variable
void add_ssa_node(std::string varAndSlice, uint32_t timeIdx, astNode* const node) {
  toCoutVerb("Add ssa node for :" + varAndSlice);
  g_visitedNode.emplace(varAndSlice, node);
  std::string var, varSlice;
  split_slice(varAndSlice, var, varSlice);
  assert( g_ssaTable.find(varAndSlice) != g_ssaTable.end() );
  std::string varAssign = g_ssaTable[varAndSlice];
  uint32_t choice = parse_verilog_line(varAssign);
  switch( choice ) {
    case INPUT:
      add_input_node(varAssign, timeIdx, node);
      break;
    case TWO_OP:
      add_two_op_node(varAssign, timeIdx, node);
      break;
    case ONE_OP:
      add_one_op_node(varAssign, timeIdx, node);
      break;
    case REDUCE1:
      add_reduce_op_node(varAssign, timeIdx, node);
      break;
    case SEL:
      add_sel_op_node(varAssign, timeIdx, node);
      break;
    case SRC_CONCAT:
      add_src_concat_op_node(varAssign, timeIdx, node);
      break;
    case ITE:
      add_ite_op_node(varAssign, timeIdx, node);
      break;
    default:
      toCout("Error in add_ssa_node for: "+var);
      break;
  }
}


void add_input_node(std::string input, uint32_t timeIdx, astNode* const node) {
  toCoutVerb("Process input node: "+input);
  node->type = INPUT;
  node->dest = input;
  node->op = "";
  node->destTime = timeIdx;
  node->done = true;
}


void add_num_node(std::string num, uint32_t timeIdx, astNode* const node) {
  toCoutVerb("Process num node: "+num);  
  node->type = NUM;
  node->dest = num;
  node->op = "";
  node->destTime = timeIdx;
  node->done = true;
}


void add_as_node(std::string as, uint32_t timeIdx, astNode* const node) {
  toCoutVerb("Process AS node: "+as);  
  node->type = AS;
  node->dest = as;
  node->op = "";
  node->destTime = timeIdx;
  node->done = true;
}


void add_two_op_node(std::string line, uint32_t timeIdx, astNode* const node) {
  toCoutVerb("Process Two op for :"+line);
  bool isReduceOp;
  std::string op;
  std::string destAndSlice;
  std::string op1AndSlice;
  std::string op2AndSlice;
  if (!check_two_op(line, op, destAndSlice, op1AndSlice, op2AndSlice, isReduceOp))
    return;

  std::string dest, destSlice;
  std::string op1, op1Slice;
  std::string op2, op2Slice;

  split_slice(destAndSlice, dest, destSlice);
  split_slice(op1AndSlice, op1, op1Slice);
  split_slice(op2AndSlice, op2, op2Slice);
  uint32_t destAndSliceWidth = get_var_slice_width(destAndSlice);
  uint32_t op1AndSliceWidth = get_var_slice_width(op1AndSlice);
  uint32_t op2AndSliceWidth = get_var_slice_width(op2AndSlice);

  node->type = TWO_OP;
  node->dest = destAndSlice;
  node->op = op;
  node->srcVec = SV{op1AndSlice, op2AndSlice};
  node->destTime = timeIdx;
  node->isReduceOp = isReduceOp;
  node->done = false;

  add_child_node(op1AndSlice, timeIdx, node);
  add_child_node(op2AndSlice, timeIdx, node);

  if(isReduceOp)
    assert(destAndSliceWidth == 1);

  assert(!isMem(op1));
  assert(!isMem(op2));
}


void add_one_op_node(std::string line, uint32_t timeIdx, astNode* const node) {
  toCoutVerb("Process One op for :"+line); 
  std::string op;
  std::string destAndSlice;
  std::string op1AndSlice;
  if (!check_one_op(line, op, destAndSlice, op1AndSlice))
    return;

  std::string dest, destSlice;
  std::string op1, op1Slice;

  split_slice(destAndSlice, dest, destSlice);
  split_slice(op1AndSlice, op1, op1Slice);

  std::string destAndSliceTimed = destAndSlice + "#" + toStr(timeIdx);

  node->type = ONE_OP;
  node->dest = destAndSlice;
  node->op = op;
  node->srcVec = SV{op1AndSlice};
  node->destTime = timeIdx;
  node->done = false;

  add_child_node(op1AndSlice, timeIdx, node);  
}


void add_ite_op_node(std::string line, uint32_t timeIdx, astNode* const node) {
  toCoutVerb("process Ite line for: "+line);
  std::smatch m;
  if ( !std::regex_match(line, m, pIte) )
    return;
  assert(!m.str(3).empty());
  assert(!m.str(4).empty());
  assert(!m.str(5).empty());

  std::string dest, destSlice;
  std::string cond, condSlice;
  std::string op1, op1Slice;
  std::string op2, op2Slice;
  std::string blank = m.str(1);
  std::string destAndSlice = m.str(2);
  std::string condAndSlice = m.str(3);
  std::string op1AndSlice = m.str(4);
  std::string op2AndSlice = m.str(5);
  split_slice(destAndSlice, dest, destSlice);
  split_slice(condAndSlice, cond, condSlice);
  split_slice(op1AndSlice , op1, op1Slice);
  split_slice(op2AndSlice , op2, op2Slice);

  assert(!isMem(op1));    
  assert(!isMem(op2));

  uint32_t localWidthNum;
  std::string localWidth;
  localWidthNum = get_var_slice_width(destAndSlice);

  localWidth = std::to_string(localWidthNum);

  node->type = ITE;
  node->dest = destAndSlice;
  node->op = "ite";
  node->srcVec = SV{condAndSlice, op1AndSlice, op2AndSlice};
  node->destTime = timeIdx;
  node->done = false;

  add_child_node(condAndSlice, timeIdx, node);  
  add_child_node(op1AndSlice,  timeIdx, node);  
  add_child_node(op2AndSlice,  timeIdx, node);  
}


void add_reduce_op_node(std::string line, uint32_t timeIdx, astNode* const node) {
  return;
}


void add_sel_op_node(std::string line, uint32_t timeIdx, astNode* const node) {
  toCoutVerb("Process Sel op for :"+line);
  bool isReduceOp;
  std::string op;
  std::string destAndSlice;
  std::string op1AndSlice;
  std::string op2AndSlice;
  std::string integer;
  if (!check_sel_op(line, op, destAndSlice, op1AndSlice, op2AndSlice, integer)) {
    return;
  }

  std::string dest, destSlice;
  std::string op1, op1Slice;
  std::string op2, op2Slice;

  split_slice(destAndSlice, dest, destSlice);
  split_slice(op1AndSlice, op1, op1Slice);
  split_slice(op2AndSlice, op2, op2Slice);
  uint32_t destAndSliceWidth = get_var_slice_width(destAndSlice);
  uint32_t op1AndSliceWidth = get_var_slice_width(op1AndSlice);
  uint32_t op2AndSliceWidth = get_var_slice_width(op2AndSlice);

  node->type = SEL;
  node->dest = destAndSlice;
  node->op = op;
  node->srcVec = SV{op1AndSlice, op2AndSlice, integer};
  node->destTime = timeIdx;
  node->isReduceOp = false;
  node->done = false;

  add_child_node(op1AndSlice, timeIdx, node);
  add_child_node(op2AndSlice, timeIdx, node);

  if(isReduceOp)
    assert(destAndSliceWidth == 1);

  assert(!isMem(op1));
  assert(!isMem(op2));

  return;
}


void add_src_concat_op_node(std::string line, uint32_t timeIdx, astNode* const node) {
  return;
}


void add_case_node(std::string var, uint32_t timeIdx, astNode* const node) {
  if(g_caseTable.find(var) == g_caseTable.end()) {
    toCout("Error: not found in g_caseTable: "+var);
    abort();
  }
  auto localPair = g_caseTable[var];
  std::string caseVar = localPair.first;
  auto caseAssignPairs = localPair.second;

  node->type = CASE;
  node->dest = var;
  node->op = "";
  //node->srcVec = SV{op1AndSlice, op2AndSlice, integer};
  // srcVec must follow this format:
  // 1st is the sAndSlice(case variable)
  // then followed are N pairs of (caseValue, assignVariable).
  // So the total number is 2N+1
  node->srcVec.push_back(caseVar);
  add_child_node(caseVar, timeIdx, node);
  add_child_node(caseAssignPairs.front().second, timeIdx, node);
  add_child_node(caseAssignPairs.back().second, timeIdx, node);
  for(std::pair<std::string, std::string> caseAssign : caseAssignPairs) {
    node->srcVec.push_back(caseAssign.first);
    node->srcVec.push_back(caseAssign.second);
  }
  node->destTime = timeIdx;
  node->isReduceOp = false;
  node->done = false;
  return;
}



bool check_two_op(std::string line, std::string &op, std::string &dest, std::string &op1, std::string &op2, bool &isReduceOp) {
  isReduceOp = false;
  std::smatch m;
  if ( std::regex_match(line, m, pAdd)) {
    op = "+";
  }
  else if ( std::regex_match(line, m, pSub)) {
    op = "-";
  }
  else if ( std::regex_match(line, m, pMult)) {
    op = "*";
  }
  else if ( std::regex_match(line, m, pAnd)) {
    op = "&&";
  }
  else if ( std::regex_match(line, m, pOr)) {
    op = "||";
  }
  else if ( std::regex_match(line, m, pBitOr)) {
    op = "|";
  }
  else if ( std::regex_match(line, m, pBitExOr)) {
    op = "^";
  }
  else if ( std::regex_match(line, m, pBitAnd)) {
    op = "&";
  }
  else if ( std::regex_match(line, m, pBitOrRed2) ) {

  } 
  else if ( std::regex_match(line, m, pEq) ) {
    op = "==";
    isReduceOp = true;
  } 
  else if ( std::regex_match(line, m, pEq3) ) {
    op = "===";
    isReduceOp = true;
  }
  else if ( std::regex_match(line, m, pNeq) ) {
    op = "!=";
    isReduceOp = true;
  }
  else if ( std::regex_match(line, m, pLt) ) {
    op = ">";
    isReduceOp = true;
  }
  else if ( std::regex_match(line, m, pLe) ) {
    op = ">=";
    isReduceOp = true;
  }
  else if ( std::regex_match(line, m, pSt) ) {
    op = "<";
    isReduceOp = true;
  }
  else if ( std::regex_match(line, m, pSe) ) {
    op = "<=";
    isReduceOp = true;
  }
  else if ( std::regex_match(line, m, pEq)
              || std::regex_match(line, m, pEq3)
              || std::regex_match(line, m, pNeq)
              || std::regex_match(line, m, pLt)
              || std::regex_match(line, m, pLe)
              || std::regex_match(line, m, pSt)
              || std::regex_match(line, m, pSe) ) {
    isReduceOp = true;
    return true;
  }
  else
    return false;

  dest = m.str(2);
  op1 = m.str(3);
  op2 = m.str(4);  
  return true;
}


bool check_sel_op(std::string line, std::string &op, std::string &dest, std::string &op1, std::string &op2, std::string &integer) {
  std::smatch m;
  if ( std::regex_match(line, m, pSel1)) {
    op = "sel1";
  }
  else if ( std::regex_match(line, m, pSel2)) {
    op = "sel2";
  }
  else if ( std::regex_match(line, m, pSel3)) {
    op = "sel3";
  }
  else if ( std::regex_match(line, m, pSel4)) {
    op = "sel4";
  }
  else {
    return false;
  }
  dest = m.str(2);
  op1 = m.str(3);
  op2 = m.str(5);
  integer = m.str(6);
  return true;
}


bool check_one_op(std::string line, std::string &op, std::string &dest, std::string &op1) {
  std::smatch m;
  if ( std::regex_match(line, m, pNone)) {
    op = "";
  }
  if ( std::regex_match(line, m, pInvert)) {
    op = "~";
  }
  else {
    toCout("Unsupported expressions: "+line);
    abort();
    return false;
  }
  dest = m.str(2);
  op1 = m.str(3);
  return true;
}

