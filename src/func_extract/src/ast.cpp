#include "ast.h"
#include "parse_fill.h"
#include "helper.h"

#define SV std::vector<std::string>
#define PV std::vector<astNode*>
#define toStr(a) std::to_string(a)

// "line" is verilog line generated by Yosys
void build_ast_tree() {
  for(std::string reg: moduleAs) {
    if(reg2Slices.find(reg) == reg2Slices.end()) {
      build_tree_for_single_as(reg);
    }
    else { // if different slices are assigned differently
      for(std::string regAndSlice: reg2Slices[reg]) {
        build_tree_for_single_as(regAndSlice);
      }
    }
  }
}


void build_tree_for_single_as(std::string regAndSlice) {
  toCoutVerb("Begin check: "+regAndSlice);
  uint32_t regWidth = get_var_slice_width(regAndSlice);
  astNode* root = new astNode;
  g_varNode.emplace(regAndSlice, root);
  add_node(regAndSlice, 0, root, true);
}


void add_node(std::string var, uint32_t timeIdx, astNode* const node, bool varIsDest) {
  if ( isInput(var) ) {
    add_input_node(var, timeIdx, node);
  }
  else if ( isAs(var) && !varIsDest ) {
    add_as_node(var, timeIdx, node);    
  }
  else if( isReg(var) ) {
    add_nb_node(var, timeIdx, node);
  }
  else if( isNum(var) ) {
    add_num_node(var, timeIdx, node);
  }
  else { // it is wire
    add_ssa_node(var, timeIdx, node);
  }
}


void add_child_node(std::string varAndSlice, uint32_t timeIdx, astNode* const node) {
  if( g_ssaTable.find(varAndSlice) != g_ssaTable.end() ) { // if assign exists
    astNode* nextNode = new astNode;      
    node->childVec.push_back(nextNode);    
    add_node(varAndSlice, timeIdx, nextNode, false);
  }
  else {
    std::string var, varSlice;
    split_slice(varAndSlice, var, varSlice);
    for(std::string varSlice: reg2Slices[var]) {
      astNode* nextNode = new astNode;      
      node->childVec.push_back(nextNode);
      add_node(varSlice, timeIdx, nextNode, false);
    }
  }
}


// timeIdx is time for dest, not src in the expression
void add_nb_node(std::string regAndSlice, uint32_t timeIdx, astNode* const node) {
  toCoutVerb("Add nb node for :" + regAndSlice);
  std::string destAssign = g_nbTable[regAndSlice];
  std::smatch m;
  if(std::regex_match(destAssign, m, pNonblock)) {
    std::string destNext = m.str(3);
    uint32_t destNextWidth = get_var_slice_width(destNext);
    uint32_t destWidth = get_var_slice_width(regAndSlice);
    std::string regAndSliceTimed = regAndSlice+"#"+toStr(timeIdx);
    std::string destNextTimed = destNext+"#"+toStr(timeIdx+1);

    node->type = NONBLOCK;
    node->dest = regAndSliceTimed;
    node->op = "<=";
    node->srcVec.push_back(destNextTimed);
    node->destTime = timeIdx;
    node->done = false;

    add_child_node(destNext, timeIdx+1, node);
  }
  else if(std::regex_match(destAssign, m, pNonblockConcat)) {
  }
  else if(std::regex_match(destAssign, m, pNonblockIf)) {
  }
  else {
    toCout("Error in add_nb_constraint: "+destAssign);
  }
}


// The var may contain slice
// (1) If varAndSlice is in g_ssaTable, then just build that node
// (2) If not, build nodes for the whole variable
// (3) If no slice, build nodes for the whole variable
void add_ssa_node(std::string varAndSlice, uint32_t timeIdx, astNode* const node) {
  toCoutVerb("Add ssa node for :" + varAndSlice);
  std::string var, varSlice;
  split_slice(varAndSlice, var, varSlice);
  assert( g_ssaTable.find(varAndSlice) != g_ssaTable.end() );
  std::string varAssign = g_ssaTable[varAndSlice];
  uint32_t choice = parse_verilog_line(varAssign);
  switch( choice ) {
    case INPUT:
      add_input_node(varAssign, timeIdx, node);
      break;
    case TWO_OP:
      add_two_op_node(varAssign, timeIdx, node);
      break;
    case ONE_OP:
      add_one_op_node(varAssign, timeIdx, node);
      break;
    case REDUCE1:
      add_reduce_op_node(varAssign, timeIdx, node);
      break;
    case SEL:
      add_sel_op_node(varAssign, timeIdx, node);
      break;
    case SRC_CONCAT:
      add_src_concat_op_node(varAssign, timeIdx, node);
      break;
    case ITE:
      add_ite_op_node(varAssign, timeIdx, node);
      break;
    default:
      toCout("Error in add_ssa_constraint for: "+var);
      break;
  }
}


void add_input_node(std::string input, uint32_t timeIdx, astNode* const node) {
  toCoutVerb("Process input node: "+input);
  node->type = INPUT;
  node->dest = input+"#"+toStr(timeIdx);
  node->op = "";
  node->destTime = timeIdx;
  node->done = true;
}


void add_num_node(std::string num, uint32_t timeIdx, astNode* const node) {
  toCoutVerb("Process num node: "+num);  
  node->type = NUM;
  node->dest = num;
  node->op = "";
  node->destTime = timeIdx;
  node->done = true;
}


void add_as_node(std::string as, uint32_t timeIdx, astNode* const node) {
  toCoutVerb("Process AS node: "+as);  
  node->type = AS;
  node->dest = as+"#"+toStr(timeIdx);
  node->op = "";
  node->destTime = timeIdx;
  node->done = true;
}


void add_two_op_node(std::string line, uint32_t timeIdx, astNode* const node) {
  toCoutVerb("Process Two op for :"+line);
  std::smatch m;  
  bool isReduceOp;
  std::string op;
  if (!check_two_op(line, op, isReduceOp))
    return;

  assert(!m.str(3).empty());
  assert(!m.str(4).empty());
  bool op1IsWire = isWire(m.str(3));
  bool op2IsWire = isWire(m.str(4));
  bool op1IsAs, op2IsAs;
  //bool op1IsNum = isNum(m.str(3));
  //bool op2IsNum = isNum(m.str(4));
  std::string blank = m.str(1);
  std::string dest, destSlice;
  std::string op1, op1Slice;
  std::string op2, op2Slice;
  std::string destAndSlice = m.str(2);
  std::string op1AndSlice = m.str(3);
  std::string op2AndSlice = m.str(4);
  split_slice(destAndSlice, dest, destSlice);
  split_slice(op1AndSlice, op1, op1Slice);
  split_slice(op2AndSlice, op2, op2Slice);
  uint32_t destAndSliceWidth = get_var_slice_width(destAndSlice);
  uint32_t op1AndSliceWidth = get_var_slice_width(op1AndSlice);
  uint32_t op2AndSliceWidth = get_var_slice_width(op2AndSlice);

  node->type = TWO_OP;
  node->dest = destAndSlice+"#"+toStr(timeIdx);
  node->op = op;
  node->srcVec = SV{op1AndSlice+"#"+toStr(timeIdx), op2AndSlice+"#"+toStr(timeIdx)};
  node->destTime = timeIdx;
  node->done = false;

  add_node(op1AndSlice, timeIdx, node, false);
  add_node(op2AndSlice, timeIdx, node, false);

  if(isReduceOp)
    assert(destAndSliceWidth == 1);

  assert(!isMem(op1));
  assert(!isMem(op2));
}


void add_one_op_node(std::string line, uint32_t timeIdx, astNode* const node) {
  toCoutVerb("Process One op for :"+line); 
  std::smatch m;
  std::string op;
  if (!check_one_op(line, op))
    return;
  assert(!m.str(2).empty());
  assert(!m.str(3).empty());
 
  std::string blank = m.str(1);
  std::string dest, destSlice;
  std::string op1, op1Slice;
  std::string destAndSlice = m.str(2);
  std::string op1AndSlice = m.str(3);
  split_slice(destAndSlice, dest, destSlice);
  split_slice(op1AndSlice, op1, op1Slice);

  std::string destAndSliceTimed = destAndSlice + "#" + toStr(timeIdx);

  node->type = ONE_OP;
  node->dest = destAndSlice+"#"+toStr(timeIdx);
  node->op = op;
  node->srcVec = SV{op1AndSlice+"#"+toStr(timeIdx)};
  node->destTime = timeIdx;
  node->done = false;

  add_node(op1AndSlice, timeIdx, node, false);  
}


void add_ite_op_node(std::string line, uint32_t timeIdx, astNode* const node) {
  toCoutVerb("process Ite line for: "+line);
  std::smatch m;
  if ( !std::regex_match(line, m, pIte) )
    return;
  assert(!m.str(3).empty());
  assert(!m.str(4).empty());
  assert(!m.str(5).empty());

  std::string dest, destSlice;
  std::string cond, condSlice;
  std::string op1, op1Slice;
  std::string op2, op2Slice;
  std::string blank = m.str(1);
  std::string destAndSlice = m.str(2);
  std::string condAndSlice = m.str(3);
  std::string op1AndSlice = m.str(4);
  std::string op2AndSlice = m.str(5);
  split_slice(destAndSlice, dest, destSlice);
  split_slice(condAndSlice, cond, condSlice);
  split_slice(op1AndSlice , op1, op1Slice);
  split_slice(op2AndSlice , op2, op2Slice);

  assert(!isMem(op1));    
  assert(!isMem(op2));

  uint32_t localWidthNum;
  std::string localWidth;
  localWidthNum = get_var_slice_width(destAndSlice);

  localWidth = std::to_string(localWidthNum);

  node->type = ITE;
  node->dest = destAndSlice+"#"+toStr(timeIdx);
  node->op = "ite";
  node->srcVec = SV{condAndSlice+"#"+toStr(timeIdx), op1AndSlice+"#"+toStr(timeIdx), op2AndSlice+"#"+toStr(timeIdx)};
  node->destTime = timeIdx;
  node->done = false;

  add_node(condAndSlice, timeIdx, node, false);  
  add_node(op1AndSlice,  timeIdx, node, false);  
  add_node(op2AndSlice,  timeIdx, node, false);  
}


void add_reduce_op_node(std::string line, uint32_t timeIdx, astNode* const node) {
  return;
}


void add_sel_op_node(std::string line, uint32_t timeIdx, astNode* const node) {
  return;
}


void add_src_concat_op_node(std::string line, uint32_t timeIdx, astNode* const node) {
  return;
}
