module top(clk, resetn, trap, mem_valid_fifo, mem_instr_fifo, mem_ready, mem_addr_fifo, mem_wdata_fifo, mem_wstrb_fifo, mem_rdata, irq, eoi, mem_la_read, mem_la_write, mem_la_addr, mem_la_wdata, mem_la_wstrb, pcpi_valid, pcpi_insn, pcpi_rs1, pcpi_rs2, pcpi_wr, pcpi_rd, pcpi_wait, pcpi_ready, trace_valid, trace_data);
  wire [31:0] _0000_;
  wire [31:0] _0001_;
  wire [31:0] _0002_;
  wire [31:0] _0003_;
  wire _0004_;
  wire _0005_;
  wire _0006_;
  wire _0007_;
  wire _0008_;
  wire _0009_;
  wire _0010_;
  wire _0011_;
  wire [31:0] _0012_;
  wire [31:0] _0013_;
  wire [31:0] _0014_;
  wire [31:0] _0015_;
  wire [3:0] _0016_;
  wire [3:0] _0017_;
  wire [3:0] _0018_;
  wire [3:0] _0019_;
  wire [4:0] _0020_;
  wire [31:0] _0021_;
  wire [31:0] _0022_;
  wire _0023_;
  wire [63:0] _0024_;
  wire [63:0] _0025_;
  wire [7:0] _0026_;
  wire [31:0] _0027_;
  wire [31:0] _0028_;
  wire [4:0] _0029_;
  wire [4:0] _0030_;
  wire [4:0] _0031_;
  wire _0032_;
  wire _0033_;
  wire [31:0] _0034_;
  wire _0035_;
  wire _0036_;
  wire _0037_;
  wire _0038_;
  wire _0039_;
  wire _0040_;
  wire _0041_;
  wire _0042_;
  wire _0043_;
  wire _0044_;
  wire _0045_;
  wire _0046_;
  wire _0047_;
  wire _0048_;
  wire _0049_;
  wire _0050_;
  wire _0051_;
  wire _0052_;
  wire _0053_;
  wire _0054_;
  wire _0055_;
  wire _0056_;
  wire _0057_;
  wire _0058_;
  wire _0059_;
  wire _0060_;
  wire _0061_;
  wire _0062_;
  wire _0063_;
  wire _0064_;
  wire _0065_;
  wire _0066_;
  wire _0067_;
  wire _0068_;
  wire _0069_;
  wire _0070_;
  wire _0071_;
  wire _0072_;
  wire _0073_;
  wire _0074_;
  wire _0075_;
  wire _0076_;
  wire _0077_;
  wire _0078_;
  wire _0079_;
  wire _0080_;
  wire _0081_;
  wire _0082_;
  wire _0083_;
  wire _0084_;
  wire _0085_;
  wire _0086_;
  wire _0087_;
  wire _0088_;
  wire _0089_;
  wire _0090_;
  wire _0091_;
  wire _0092_;
  wire _0093_;
  wire _0094_;
  wire _0095_;
  wire [4:0] _0096_;
  wire _0097_;
  wire _0098_;
  wire [31:0] _0099_;
  wire _0100_;
  wire _0101_;
  wire _0102_;
  wire _0103_;
  wire _0104_;
  wire [31:0] _0105_;
  wire [1:0] _0106_;
  wire _0107_;
  wire [31:0] _0108_;
  wire [1:0] _0109_;
  wire [3:0] _0110_;
  wire [31:0] _0111_;
  wire _0112_;
  wire [31:0] _0113_;
  wire [31:0] _0114_;
  wire [31:0] _0115_;
  wire [31:0] _0116_;
  wire [31:0] _0117_;
  wire [4:0] _0118_;
  wire _0119_;
  wire _0120_;
  wire _0121_;
  wire _0122_;
  wire [31:0] _0123_;
  wire _0124_;
  wire [31:0] _0125_;
  wire _0126_;
  wire _0127_;
  wire _0128_;
  wire [31:0] _0129_;
  wire [31:0] _0130_;
  wire _0131_;
  wire _0132_;
  wire _0133_;
  wire _0134_;
  wire _0135_;
  wire _0136_;
  wire [31:0] _0137_;
  wire [31:0] _0138_;
  wire [63:0] _0139_;
  wire [31:0] _0140_;
  wire [63:0] _0141_;
  wire [31:0] _0142_;
  wire [31:0] _0143_;
  wire [31:0] _0144_;
  wire [29:0] _0145_;
  wire [31:0] _0146_;
  wire [31:0] _0147_;
  wire [31:0] _0148_;
  wire [3:0] _0149_;
  wire _0150_;
  wire _0151_;
  wire _0152_;
  wire _0153_;
  wire _0154_;
  wire _0155_;
  wire _0156_;
  wire _0157_;
  wire _0158_;
  wire _0159_;
  wire _0160_;
  wire _0161_;
  wire _0162_;
  wire _0163_;
  wire _0164_;
  wire _0165_;
  wire _0166_;
  wire _0167_;
  wire _0168_;
  wire _0169_;
  wire _0170_;
  wire _0171_;
  wire _0172_;
  wire _0173_;
  wire _0174_;
  wire _0175_;
  wire _0176_;
  wire _0177_;
  wire _0178_;
  wire _0179_;
  wire _0180_;
  wire _0181_;
  wire _0182_;
  wire _0183_;
  wire _0184_;
  wire _0185_;
  wire _0186_;
  wire _0187_;
  wire _0188_;
  wire _0189_;
  wire _0190_;
  wire _0191_;
  wire _0192_;
  wire _0193_;
  wire _0194_;
  wire _0195_;
  wire _0196_;
  wire _0197_;
  wire _0198_;
  wire _0199_;
  wire _0200_;
  wire _0201_;
  wire _0202_;
  wire _0203_;
  wire _0204_;
  wire _0205_;
  wire _0206_;
  wire _0207_;
  wire _0208_;
  wire _0209_;
  wire _0210_;
  wire _0211_;
  wire _0212_;
  wire _0213_;
  wire _0214_;
  wire _0215_;
  wire [7:0] _0216_;
  wire [7:0] _0217_;
  wire [31:0] _0218_;
  wire [31:0] _0219_;
  wire [31:0] _0220_;
  wire _0221_;
  wire _0222_;
  wire _0223_;
  wire _0224_;
  wire _0225_;
  wire _0226_;
  wire _0227_;
  wire _0228_;
  wire _0229_;
  wire _0230_;
  wire _0231_;
  wire _0232_;
  wire _0233_;
  wire _0234_;
  wire _0235_;
  wire _0236_;
  wire _0237_;
  wire _0238_;
  wire _0239_;
  wire _0240_;
  wire _0241_;
  wire _0242_;
  wire _0243_;
  wire _0244_;
  wire _0245_;
  wire _0246_;
  wire _0247_;
  wire _0248_;
  wire _0249_;
  wire _0250_;
  wire _0251_;
  wire _0252_;
  wire _0253_;
  wire _0254_;
  wire _0255_;
  wire _0256_;
  wire _0257_;
  wire _0258_;
  wire _0259_;
  wire _0260_;
  wire _0261_;
  wire _0262_;
  wire _0263_;
  wire _0264_;
  wire _0265_;
  wire _0266_;
  wire _0267_;
  wire _0268_;
  wire _0269_;
  wire _0270_;
  wire _0271_;
  wire _0272_;
  wire _0273_;
  wire _0274_;
  wire _0275_;
  wire _0276_;
  wire _0277_;
  wire _0278_;
  wire _0279_;
  wire _0280_;
  wire _0281_;
  wire _0282_;
  wire _0283_;
  wire _0284_;
  wire _0285_;
  wire _0286_;
  wire _0287_;
  wire _0288_;
  wire _0289_;
  wire _0290_;
  wire _0291_;
  wire _0292_;
  wire _0293_;
  wire _0294_;
  wire _0295_;
  wire _0296_;
  wire _0297_;
  wire _0298_;
  wire _0299_;
  wire _0300_;
  wire _0301_;
  wire _0302_;
  wire _0303_;
  wire _0304_;
  wire _0305_;
  wire _0306_;
  wire _0307_;
  wire _0308_;
  wire _0309_;
  wire _0310_;
  wire _0311_;
  wire _0312_;
  wire _0313_;
  wire _0314_;
  wire _0315_;
  wire _0316_;
  wire _0317_;
  wire _0318_;
  wire _0319_;
  wire _0320_;
  wire _0321_;
  wire _0322_;
  wire _0323_;
  wire _0324_;
  wire _0325_;
  wire _0326_;
  wire _0327_;
  wire _0328_;
  wire _0329_;
  wire _0330_;
  wire _0331_;
  wire _0332_;
  wire _0333_;
  wire _0334_;
  wire _0335_;
  wire _0336_;
  wire _0337_;
  wire _0338_;
  wire _0339_;
  wire _0340_;
  wire _0341_;
  wire _0342_;
  wire _0343_;
  wire _0344_;
  wire _0345_;
  wire _0346_;
  wire _0347_;
  wire _0348_;
  wire _0349_;
  wire _0350_;
  wire _0351_;
  wire _0352_;
  wire _0353_;
  wire _0354_;
  wire _0355_;
  wire _0356_;
  wire _0357_;
  wire _0358_;
  wire _0359_;
  wire _0360_;
  wire [31:0] _0361_;
  wire [31:0] _0362_;
  wire [31:0] _0363_;
  wire [31:0] _0364_;
  wire [31:0] _0365_;
  wire [31:0] _0366_;
  wire [31:0] _0367_;
  wire [31:0] _0368_;
  wire [31:0] _0369_;
  wire [31:0] _0370_;
  wire [31:0] _0371_;
  wire [31:0] _0372_;
  wire [31:0] _0373_;
  wire [31:0] _0374_;
  wire [31:0] _0375_;
  wire [31:0] _0376_;
  wire [31:0] _0377_;
  wire [31:0] _0378_;
  wire [31:0] _0379_;
  wire [31:0] _0380_;
  wire [31:0] _0381_;
  wire [31:0] _0382_;
  wire [31:0] _0383_;
  wire [31:0] _0384_;
  wire [31:0] _0385_;
  wire [31:0] _0386_;
  wire [31:0] _0387_;
  wire [31:0] _0388_;
  wire [31:0] _0389_;
  wire [31:0] _0390_;
  wire _0391_;
  wire _0392_;
  wire _0393_;
  wire _0394_;
  wire _0395_;
  wire _0396_;
  wire _0397_;
  wire _0398_;
  wire _0399_;
  wire _0400_;
  wire _0401_;
  wire _0402_;
  wire _0403_;
  wire _0404_;
  wire _0405_;
  wire _0406_;
  wire _0407_;
  wire _0408_;
  wire _0409_;
  wire _0410_;
  wire _0411_;
  wire _0412_;
  wire _0413_;
  wire _0414_;
  wire _0415_;
  wire _0416_;
  wire _0417_;
  wire _0418_;
  wire _0419_;
  wire _0420_;
  wire _0421_;
  wire _0422_;
  wire [31:0] _0423_;
  wire [31:0] _0424_;
  wire [31:0] _0425_;
  wire [31:0] _0426_;
  wire [31:0] _0427_;
  wire [31:0] _0428_;
  wire [31:0] _0429_;
  wire [31:0] _0430_;
  wire [31:0] _0431_;
  wire [31:0] _0432_;
  wire [31:0] _0433_;
  wire [31:0] _0434_;
  wire [31:0] _0435_;
  wire [31:0] _0436_;
  wire [31:0] _0437_;
  wire [31:0] _0438_;
  wire [31:0] _0439_;
  wire [31:0] _0440_;
  wire [31:0] _0441_;
  wire [31:0] _0442_;
  wire [31:0] _0443_;
  wire [31:0] _0444_;
  wire [31:0] _0445_;
  wire [31:0] _0446_;
  wire [31:0] _0447_;
  wire [31:0] _0448_;
  wire [31:0] _0449_;
  wire [31:0] _0450_;
  wire [31:0] _0451_;
  wire [31:0] _0452_;
  wire [31:0] _0453_;
  wire [31:0] _0454_;
  wire [31:0] _0455_;
  wire [31:0] _0456_;
  wire _0457_;
  wire [31:0] _0458_;
  wire [31:0] _0459_;
  wire _0460_;
  wire _0461_;
  wire _0462_;
  wire _0463_;
  wire _0464_;
  wire _0465_;
  wire _0466_;
  wire _0467_;
  wire _0468_;
  wire _0469_;
  wire _0470_;
  wire _0471_;
  wire _0472_;
  wire [31:0] _0473_;
  wire [31:0] _0474_;
  wire [31:0] _0475_;
  wire [31:0] _0476_;
  wire [31:0] _0477_;
  wire [31:0] _0478_;
  wire [31:0] _0479_;
  wire [4:0] _0480_;
  wire [4:0] _0481_;
  wire [4:0] _0482_;
  wire _0483_;
  wire [4:0] _0484_;
  wire [4:0] _0485_;
  wire _0486_;
  wire _0487_;
  wire _0488_;
  wire _0489_;
  wire _0490_;
  wire _0491_;
  wire _0492_;
  wire _0493_;
  wire _0494_;
  wire _0495_;
  wire _0496_;
  wire _0497_;
  wire _0498_;
  wire _0499_;
  wire _0500_;
  wire _0501_;
  wire _0502_;
  wire _0503_;
  wire _0504_;
  wire [7:0] _0505_;
  wire [7:0] _0506_;
  wire [7:0] _0507_;
  wire [7:0] _0508_;
  wire [7:0] _0509_;
  wire [7:0] _0510_;
  wire _0511_;
  wire [7:0] _0512_;
  wire [7:0] _0513_;
  wire [7:0] _0514_;
  wire _0515_;
  wire _0516_;
  wire _0517_;
  wire _0518_;
  wire _0519_;
  wire _0520_;
  wire _0521_;
  wire _0522_;
  wire _0523_;
  wire _0524_;
  wire _0525_;
  wire _0526_;
  wire _0527_;
  wire [1:0] _0528_;
  wire [1:0] _0529_;
  wire [1:0] _0530_;
  wire [1:0] _0531_;
  wire [1:0] _0532_;
  wire [1:0] _0533_;
  wire [1:0] _0534_;
  wire [31:0] _0535_;
  wire [31:0] _0536_;
  wire [31:0] _0537_;
  wire [31:0] _0538_;
  wire [31:0] _0539_;
  wire [31:0] _0540_;
  wire [31:0] _0541_;
  wire [31:0] _0542_;
  wire [31:0] _0543_;
  wire [31:0] _0544_;
  wire [31:0] _0545_;
  wire [31:0] _0546_;
  wire [29:0] _0547_;
  wire [63:0] _0548_;
  wire [63:0] _0549_;
  wire _0550_;
  wire _0551_;
  wire [31:0] _0552_;
  wire _0553_;
  wire _0554_;
  wire _0555_;
  wire _0556_;
  wire _0557_;
  wire _0558_;
  wire _0559_;
  wire _0560_;
  wire _0561_;
  wire _0562_;
  wire _0563_;
  wire _0564_;
  wire _0565_;
  wire _0566_;
  wire _0567_;
  wire _0568_;
  wire _0569_;
  wire _0570_;
  wire _0571_;
  wire _0572_;
  wire _0573_;
  wire _0574_;
  wire _0575_;
  wire _0576_;
  wire [1:0] _0577_;
  wire [1:0] _0578_;
  wire _0579_;
  wire [1:0] _0580_;
  wire _0581_;
  wire [1:0] _0582_;
  wire [1:0] _0583_;
  wire _0584_;
  wire [1:0] _0585_;
  wire [1:0] _0586_;
  wire [1:0] _0587_;
  wire [3:0] _0588_;
  wire [3:0] _0589_;
  wire [3:0] _0590_;
  wire [31:0] _0591_;
  wire [31:0] _0592_;
  wire _0593_;
  wire _0594_;
  wire _0595_;
  wire _0596_;
  wire _0597_;
  wire _0598_;
  wire _0599_;
  wire _0600_;
  wire _0601_;
  wire _0602_;
  wire _0603_;
  wire _0604_;
  wire _0605_;
  wire _0606_;
  wire _0607_;
  wire _0608_;
  wire [29:0] _0609_;
  wire [29:0] _0610_;
  wire [29:0] _0611_;
  wire _0612_;
  wire _0613_;
  wire _0614_;
  wire _0615_;
  wire _0616_;
  wire _0617_;
  wire _0618_;
  wire [3:0] _0619_;
  wire [31:0] _0620_;
  wire [31:0] _0621_;
  wire _0622_;
  wire [31:0] _0623_;
  wire [31:0] _0624_;
  wire [31:0] _0625_;
  wire [31:0] _0626_;
  wire [3:0] _0627_;
  wire [31:0] _0628_;
  input clk;
  output [31:0] eoi;
  wire \fifo_addr.clk ;
  wire [31:0] \fifo_addr.in ;
  wire [31:0] \fifo_addr.out ;
  reg [31:0] \fifo_addr.r0 ;
  reg [31:0] \fifo_addr.r1 ;
  wire \fifo_addr.rst ;
  wire \fifo_addr.wr ;
  wire \fifo_instr.clk ;
  wire \fifo_instr.in ;
  wire \fifo_instr.out ;
  reg \fifo_instr.r0 ;
  reg \fifo_instr.r1 ;
  wire \fifo_instr.rst ;
  wire \fifo_instr.wr ;
  wire \fifo_valid.clk ;
  wire \fifo_valid.in ;
  wire \fifo_valid.out ;
  reg \fifo_valid.r0 ;
  reg \fifo_valid.r1 ;
  wire \fifo_valid.rst ;
  wire \fifo_valid.wr ;
  wire \fifo_wdata.clk ;
  wire [31:0] \fifo_wdata.in ;
  wire [31:0] \fifo_wdata.out ;
  reg [31:0] \fifo_wdata.r0 ;
  reg [31:0] \fifo_wdata.r1 ;
  wire \fifo_wdata.rst ;
  wire \fifo_wdata.wr ;
  wire \fifo_wstrb.clk ;
  wire [3:0] \fifo_wstrb.in ;
  wire [3:0] \fifo_wstrb.out ;
  reg [3:0] \fifo_wstrb.r0 ;
  reg [3:0] \fifo_wstrb.r1 ;
  wire \fifo_wstrb.rst ;
  wire \fifo_wstrb.wr ;
  input [31:0] irq;
  wire [31:0] mem_addr;
  output [31:0] mem_addr_fifo;
  wire mem_instr;
  output mem_instr_fifo;
  output [31:0] mem_la_addr;
  output mem_la_read;
  output [31:0] mem_la_wdata;
  output mem_la_write;
  output [3:0] mem_la_wstrb;
  input [31:0] mem_rdata;
  input mem_ready;
  wire mem_valid;
  output mem_valid_fifo;
  wire [31:0] mem_wdata;
  output [31:0] mem_wdata_fifo;
  wire [3:0] mem_wstrb;
  output [3:0] mem_wstrb_fifo;
  output [31:0] pcpi_insn;
  input [31:0] pcpi_rd;
  input pcpi_ready;
  output [31:0] pcpi_rs1;
  output [31:0] pcpi_rs2;
  output pcpi_valid;
  input pcpi_wait;
  input pcpi_wr;
  input resetn;
  output [35:0] trace_data;
  output trace_valid;
  output trap;
  wire [31:0] \u0.alu_add_sub ;
  wire \u0.alu_eq ;
  wire \u0.alu_lts ;
  wire \u0.alu_ltu ;
  wire [31:0] \u0.alu_out ;
  wire \u0.alu_out_0 ;
  reg [31:0] \u0.alu_out_q ;
  wire [31:0] \u0.alu_shl ;
  wire [31:0] \u0.alu_shr ;
  wire \u0.clk ;
  reg \u0.compressed_instr ;
  reg [63:0] \u0.count_cycle ;
  reg [63:0] \u0.count_instr ;
  reg [7:0] \u0.cpu_state ;
  reg [31:0] \u0.cpuregs[0] ;
  reg [31:0] \u0.cpuregs[10] ;
  reg [31:0] \u0.cpuregs[11] ;
  reg [31:0] \u0.cpuregs[12] ;
  reg [31:0] \u0.cpuregs[13] ;
  reg [31:0] \u0.cpuregs[14] ;
  reg [31:0] \u0.cpuregs[15] ;
  reg [31:0] \u0.cpuregs[16] ;
  reg [31:0] \u0.cpuregs[17] ;
  reg [31:0] \u0.cpuregs[18] ;
  reg [31:0] \u0.cpuregs[19] ;
  reg [31:0] \u0.cpuregs[1] ;
  reg [31:0] \u0.cpuregs[20] ;
  reg [31:0] \u0.cpuregs[21] ;
  reg [31:0] \u0.cpuregs[22] ;
  reg [31:0] \u0.cpuregs[23] ;
  reg [31:0] \u0.cpuregs[24] ;
  reg [31:0] \u0.cpuregs[25] ;
  reg [31:0] \u0.cpuregs[26] ;
  reg [31:0] \u0.cpuregs[27] ;
  reg [31:0] \u0.cpuregs[28] ;
  reg [31:0] \u0.cpuregs[29] ;
  reg [31:0] \u0.cpuregs[2] ;
  reg [31:0] \u0.cpuregs[30] ;
  reg [31:0] \u0.cpuregs[31] ;
  reg [31:0] \u0.cpuregs[3] ;
  reg [31:0] \u0.cpuregs[4] ;
  reg [31:0] \u0.cpuregs[5] ;
  reg [31:0] \u0.cpuregs[6] ;
  reg [31:0] \u0.cpuregs[7] ;
  reg [31:0] \u0.cpuregs[8] ;
  reg [31:0] \u0.cpuregs[9] ;
  wire [31:0] \u0.cpuregs_rs1 ;
  wire [31:0] \u0.cpuregs_rs2 ;
  wire [31:0] \u0.cpuregs_wrdata ;
  wire \u0.cpuregs_write ;
  wire [31:0] \u0.dbg_mem_addr ;
  wire \u0.dbg_mem_instr ;
  wire [31:0] \u0.dbg_mem_rdata ;
  wire \u0.dbg_mem_ready ;
  wire \u0.dbg_mem_valid ;
  wire [31:0] \u0.dbg_mem_wdata ;
  wire [3:0] \u0.dbg_mem_wstrb ;
  reg [31:0] \u0.decoded_imm ;
  reg [31:0] \u0.decoded_imm_j ;
  reg [4:0] \u0.decoded_rd ;
  wire [4:0] \u0.decoded_rs ;
  reg [4:0] \u0.decoded_rs1 ;
  reg [4:0] \u0.decoded_rs2 ;
  reg \u0.decoder_pseudo_trigger ;
  reg \u0.decoder_pseudo_trigger_q ;
  reg \u0.decoder_trigger ;
  reg \u0.decoder_trigger_q ;
  wire \u0.do_waitirq ;
  reg [31:0] \u0.eoi ;
  reg \u0.instr_add ;
  reg \u0.instr_addi ;
  reg \u0.instr_and ;
  reg \u0.instr_andi ;
  reg \u0.instr_auipc ;
  reg \u0.instr_beq ;
  reg \u0.instr_bge ;
  reg \u0.instr_bgeu ;
  reg \u0.instr_blt ;
  reg \u0.instr_bltu ;
  reg \u0.instr_bne ;
  reg \u0.instr_ecall_ebreak ;
  reg \u0.instr_jal ;
  reg \u0.instr_jalr ;
  reg \u0.instr_lb ;
  reg \u0.instr_lbu ;
  reg \u0.instr_lh ;
  reg \u0.instr_lhu ;
  reg \u0.instr_lui ;
  reg \u0.instr_lw ;
  reg \u0.instr_or ;
  reg \u0.instr_ori ;
  reg \u0.instr_rdcycle ;
  reg \u0.instr_rdcycleh ;
  reg \u0.instr_rdinstr ;
  reg \u0.instr_rdinstrh ;
  reg \u0.instr_retirq ;
  reg \u0.instr_sb ;
  reg \u0.instr_sh ;
  reg \u0.instr_sll ;
  reg \u0.instr_slli ;
  reg \u0.instr_slt ;
  reg \u0.instr_slti ;
  reg \u0.instr_sltiu ;
  reg \u0.instr_sltu ;
  reg \u0.instr_sra ;
  reg \u0.instr_srai ;
  reg \u0.instr_srl ;
  reg \u0.instr_srli ;
  reg \u0.instr_sub ;
  reg \u0.instr_sw ;
  wire \u0.instr_trap ;
  reg \u0.instr_xor ;
  reg \u0.instr_xori ;
  wire [31:0] \u0.irq ;
  reg \u0.is_alu_reg_imm ;
  reg \u0.is_alu_reg_reg ;
  reg \u0.is_beq_bne_blt_bge_bltu_bgeu ;
  reg \u0.is_compare ;
  reg \u0.is_jalr_addi_slti_sltiu_xori_ori_andi ;
  reg \u0.is_lb_lh_lw_lbu_lhu ;
  reg \u0.is_lbu_lhu_lw ;
  reg \u0.is_lui_auipc_jal ;
  reg \u0.is_lui_auipc_jal_jalr_addi_add_sub ;
  wire \u0.is_rdcycle_rdcycleh_rdinstr_rdinstrh ;
  reg \u0.is_sb_sh_sw ;
  reg \u0.is_slli_srli_srai ;
  reg \u0.is_slti_blt_slt ;
  reg \u0.is_sltiu_bltu_sltu ;
  reg \u0.latched_branch ;
  reg \u0.latched_compr ;
  reg \u0.latched_is_lb ;
  reg \u0.latched_is_lh ;
  reg \u0.latched_is_lu ;
  reg [4:0] \u0.latched_rd ;
  reg \u0.latched_stalu ;
  reg \u0.latched_store ;
  reg [31:0] \u0.mem_addr ;
  reg \u0.mem_do_prefetch ;
  reg \u0.mem_do_rdata ;
  reg \u0.mem_do_rinst ;
  reg \u0.mem_do_wdata ;
  wire \u0.mem_done ;
  reg \u0.mem_instr ;
  wire [31:0] \u0.mem_la_addr ;
  wire \u0.mem_la_firstword ;
  wire \u0.mem_la_firstword_xfer ;
  wire \u0.mem_la_read ;
  wire \u0.mem_la_use_prefetched_high_word ;
  wire [31:0] \u0.mem_la_wdata ;
  wire \u0.mem_la_write ;
  wire [3:0] \u0.mem_la_wstrb ;
  wire [31:0] \u0.mem_rdata ;
  wire [31:0] \u0.mem_rdata_latched ;
  wire [31:0] \u0.mem_rdata_latched_noshuffle ;
  reg [31:0] \u0.mem_rdata_q ;
  wire [31:0] \u0.mem_rdata_word ;
  wire \u0.mem_ready ;
  reg [1:0] \u0.mem_state ;
  reg \u0.mem_valid ;
  reg [31:0] \u0.mem_wdata ;
  reg [1:0] \u0.mem_wordsize ;
  reg [3:0] \u0.mem_wstrb ;
  wire \u0.mem_xfer ;
  wire [31:0] \u0.next_pc ;
  wire [31:0] \u0.pcpi_div_rd ;
  wire \u0.pcpi_div_ready ;
  wire \u0.pcpi_div_wait ;
  wire \u0.pcpi_div_wr ;
  reg [31:0] \u0.pcpi_insn ;
  wire \u0.pcpi_int_ready ;
  wire \u0.pcpi_int_wait ;
  wire [31:0] \u0.pcpi_mul_rd ;
  wire \u0.pcpi_mul_ready ;
  wire \u0.pcpi_mul_wait ;
  wire \u0.pcpi_mul_wr ;
  wire [31:0] \u0.pcpi_rd ;
  wire \u0.pcpi_ready ;
  wire [31:0] \u0.pcpi_rs1 ;
  wire [31:0] \u0.pcpi_rs2 ;
  reg \u0.pcpi_valid ;
  wire \u0.pcpi_wait ;
  wire \u0.pcpi_wr ;
  reg [31:0] \u0.reg_next_pc ;
  reg [31:0] \u0.reg_op1 ;
  reg [31:0] \u0.reg_op2 ;
  reg [31:0] \u0.reg_out ;
  reg [31:0] \u0.reg_pc ;
  reg [4:0] \u0.reg_sh ;
  wire \u0.resetn ;
  wire [35:0] \u0.trace_data ;
  wire \u0.trace_valid ;
  reg \u0.trap ;
  always @(posedge clk)
    \fifo_addr.r0 <= _0000_;
  always @(posedge clk)
    \fifo_addr.r1 <= _0001_;
  assign _0002_ = \u0.mem_valid ? \fifo_addr.r0 : \fifo_addr.r1 ;
  assign _0001_ = \fifo_addr.rst ? 32'h00000000 : _0002_;
  assign _0003_ = \u0.mem_valid ? \u0.mem_addr : \fifo_addr.r0 ;
  assign _0000_ = \fifo_addr.rst ? 32'h00000000 : _0003_;
  always @(posedge clk)
    \fifo_instr.r0 <= _0004_;
  always @(posedge clk)
    \fifo_instr.r1 <= _0005_;
  assign _0006_ = \u0.mem_valid ? \fifo_instr.r0 : \fifo_instr.r1 ;
  assign _0005_ = \fifo_addr.rst ? 1'h0 : _0006_;
  assign _0007_ = \u0.mem_valid ? \u0.mem_instr : \fifo_instr.r0 ;
  assign _0004_ = \fifo_addr.rst ? 1'h0 : _0007_;
  always @(posedge clk)
    \fifo_valid.r0 <= _0008_;
  always @(posedge clk)
    \fifo_valid.r1 <= _0009_;
  assign _0010_ = \u0.mem_valid ? \fifo_valid.r0 : \fifo_valid.r1 ;
  assign _0009_ = \fifo_addr.rst ? 1'h0 : _0010_;
  assign _0011_ = \u0.mem_valid ? \u0.mem_valid : \fifo_valid.r0 ;
  assign _0008_ = \fifo_addr.rst ? 1'h0 : _0011_;
  always @(posedge clk)
    \fifo_wdata.r0 <= _0012_;
  always @(posedge clk)
    \fifo_wdata.r1 <= _0013_;
  assign _0014_ = \u0.mem_valid ? \fifo_wdata.r0 : \fifo_wdata.r1 ;
  assign _0013_ = \fifo_addr.rst ? 32'h00000000 : _0014_;
  assign _0015_ = \u0.mem_valid ? \u0.mem_wdata : \fifo_wdata.r0 ;
  assign _0012_ = \fifo_addr.rst ? 32'h00000000 : _0015_;
  always @(posedge clk)
    \fifo_wstrb.r0 <= _0016_;
  always @(posedge clk)
    \fifo_wstrb.r1 <= _0017_;
  assign _0018_ = \u0.mem_valid ? \fifo_wstrb.r0 : \fifo_wstrb.r1 ;
  assign _0017_ = \fifo_addr.rst ? 4'h0 : _0018_;
  assign _0019_ = \u0.mem_valid ? \u0.mem_wstrb : \fifo_wstrb.r0 ;
  assign _0016_ = \fifo_addr.rst ? 4'h0 : _0019_;
  assign _0137_ = \u0.reg_op1 + \u0.reg_op2 ;
  assign _0138_ = \u0.reg_pc + _0219_[2:0];
  assign _0139_ = \u0.count_cycle + 1'h1;
  assign _0140_ = _0129_ + _0220_[2:0];
  assign _0141_ = \u0.count_instr + 1'h1;
  assign _0142_ = _0129_ + \u0.decoded_imm_j ;
  assign _0143_ = \u0.reg_pc + \u0.decoded_imm ;
  assign _0144_ = \u0.reg_op1 + \u0.decoded_imm ;
  assign _0145_ = \u0.next_pc [31:2] + 1'h0;
  assign _0146_ = \u0.reg_out & 32'hfffffffe;
  assign _0147_ = \u0.reg_op1 & \u0.reg_op2 ;
  assign _0148_ = _0623_ & 32'hfffffffe;
  wire [3:0] fangyuan0;
  assign fangyuan0 = { \u0.mem_la_write , \u0.mem_la_write , \u0.mem_la_write , \u0.mem_la_write };
  assign _0149_ = \u0.mem_la_wstrb & fangyuan0;
  assign _0206_ = _0020_[0] == 1'h0;
  assign _0207_ = _0020_[1] == 1'h0;
  assign _0208_ = _0020_[2] == 1'h0;
  assign _0209_ = _0020_[3] == 1'h0;
  assign _0210_ = _0020_[4] == 1'h0;
  assign _0211_ = _0020_[0] == 1'h1;
  assign _0212_ = _0020_[1] == 1'h1;
  assign _0213_ = _0020_[2] == 1'h1;
  assign _0214_ = _0020_[3] == 1'h1;
  assign _0215_ = _0020_[4] == 1'h1;
  assign _0158_ = _0206_ & _0207_;
  assign _0159_ = _0209_ & _0210_;
  assign _0160_ = _0208_ & _0159_;
  assign _0161_ = _0158_ & _0160_;
  assign _0162_ = _0211_ & _0207_;
  assign _0163_ = _0162_ & _0160_;
  assign _0164_ = _0206_ & _0212_;
  assign _0165_ = _0164_ & _0160_;
  assign _0166_ = _0211_ & _0212_;
  assign _0167_ = _0166_ & _0160_;
  assign _0168_ = _0213_ & _0159_;
  assign _0169_ = _0158_ & _0168_;
  assign _0170_ = _0162_ & _0168_;
  assign _0171_ = _0164_ & _0168_;
  assign _0172_ = _0166_ & _0168_;
  assign _0173_ = _0214_ & _0210_;
  assign _0174_ = _0208_ & _0173_;
  assign _0175_ = _0158_ & _0174_;
  assign _0176_ = _0162_ & _0174_;
  assign _0177_ = _0164_ & _0174_;
  assign _0178_ = _0166_ & _0174_;
  assign _0179_ = _0213_ & _0173_;
  assign _0180_ = _0158_ & _0179_;
  assign _0181_ = _0162_ & _0179_;
  assign _0182_ = _0164_ & _0179_;
  assign _0183_ = _0166_ & _0179_;
  assign _0184_ = _0209_ & _0215_;
  assign _0185_ = _0208_ & _0184_;
  assign _0186_ = _0158_ & _0185_;
  assign _0187_ = _0162_ & _0185_;
  assign _0188_ = _0164_ & _0185_;
  assign _0189_ = _0166_ & _0185_;
  assign _0190_ = _0213_ & _0184_;
  assign _0191_ = _0158_ & _0190_;
  assign _0192_ = _0162_ & _0190_;
  assign _0193_ = _0164_ & _0190_;
  assign _0194_ = _0166_ & _0190_;
  assign _0195_ = _0214_ & _0215_;
  assign _0196_ = _0208_ & _0195_;
  assign _0197_ = _0158_ & _0196_;
  assign _0198_ = _0162_ & _0196_;
  assign _0199_ = _0164_ & _0196_;
  assign _0200_ = _0166_ & _0196_;
  assign _0201_ = _0213_ & _0195_;
  assign _0202_ = _0158_ & _0201_;
  assign _0203_ = _0162_ & _0201_;
  assign _0204_ = _0164_ & _0201_;
  assign _0205_ = _0166_ & _0201_;
  wire [6:0] fangyuan1;
  assign fangyuan1 = { _0464_, _0463_, _0462_, _0460_, _0457_, _0239_, _0238_ };
  assign _0150_ = | fangyuan1;
  wire [6:0] fangyuan2;
  assign fangyuan2 = { _0464_, _0463_, _0462_, _0461_, _0457_, _0239_, _0238_ };
  assign _0151_ = | fangyuan2;
  wire [6:0] fangyuan3;
  assign fangyuan3 = { _0464_, _0463_, _0462_, _0461_, _0460_, _0239_, _0238_ };
  assign _0152_ = | fangyuan3;
  wire [1:0] fangyuan4;
  assign fangyuan4 = { _0462_, _0460_ };
  assign _0153_ = | fangyuan4;
  wire [2:0] fangyuan5;
  assign fangyuan5 = { \u0.is_jalr_addi_slti_sltiu_xori_ori_andi , \u0.is_slli_srli_srai , \u0.is_lui_auipc_jal };
  assign _0154_ = | fangyuan5;
  wire [1:0] fangyuan6;
  assign fangyuan6 = { _0314_, \u0.latched_branch };
  assign _0155_ = | fangyuan6;
  wire [1:0] fangyuan7;
  assign fangyuan7 = { _0461_, _0460_ };
  assign _0156_ = | fangyuan7;
  wire [1:0] fangyuan8;
  assign fangyuan8 = { _0584_, _0581_ };
  assign _0157_ = | fangyuan8;
  assign _0221_ = ! \u0.mem_rdata_q [14:12];
  assign _0222_ = \u0.mem_rdata_q [14:12] == 1'h1;
  assign _0223_ = \u0.mem_rdata_q [14:12] == 3'h4;
  assign _0224_ = \u0.mem_rdata_q [14:12] == 3'h5;
  assign _0225_ = \u0.mem_rdata_q [14:12] == 3'h6;
  assign _0226_ = \u0.mem_rdata_q [14:12] == 3'h7;
  assign _0227_ = \u0.mem_rdata_q [14:12] == 2'h2;
  assign _0228_ = \u0.mem_rdata_q [14:12] == 2'h3;
  assign _0229_ = ! \u0.mem_rdata_q [31:25];
  assign _0230_ = \u0.mem_rdata_q [31:25] == 6'h20;
  assign _0231_ = \u0.mem_rdata_q [6:0] == 7'h73;
  assign _0232_ = \u0.mem_rdata_q [31:12] == 20'hc0002;
  assign _0233_ = \u0.mem_rdata_q [31:12] == 20'hc0102;
  assign _0234_ = \u0.mem_rdata_q [31:12] == 20'hc8002;
  assign _0235_ = \u0.mem_rdata_q [31:12] == 20'hc8102;
  assign _0236_ = \u0.mem_rdata_q [31:12] == 20'hc0202;
  assign _0237_ = \u0.mem_rdata_q [31:12] == 20'hc8202;
  assign \u0.alu_eq = \u0.reg_op1 == \u0.reg_op2 ;
  assign _0238_ = \u0.cpu_state == 7'h40;
  assign _0239_ = \u0.cpu_state == 5'h10;
  assign _0240_ = ! \u0.reg_sh ;
  assign _0241_ = \u0.mem_rdata_latched [6:0] == 6'h37;
  assign _0242_ = \u0.mem_rdata_latched [6:0] == 5'h17;
  assign _0243_ = \u0.mem_rdata_latched [6:0] == 7'h6f;
  assign _0244_ = \u0.mem_rdata_latched [6:0] == 7'h67;
  assign _0245_ = ! \u0.mem_rdata_latched [14:12];
  assign _0246_ = \u0.mem_rdata_latched [6:0] == 7'h63;
  assign _0247_ = \u0.mem_rdata_latched [6:0] == 2'h3;
  assign _0248_ = \u0.mem_rdata_latched [6:0] == 6'h23;
  assign _0249_ = \u0.mem_rdata_latched [6:0] == 5'h13;
  assign _0250_ = \u0.mem_rdata_latched [6:0] == 6'h33;
  assign _0251_ = \u0.reg_sh >= 3'h4;
  assign _0252_ = \u0.decoder_trigger && _0330_;
  assign _0253_ = \u0.is_beq_bne_blt_bge_bltu_bgeu && _0221_;
  assign _0254_ = \u0.is_beq_bne_blt_bge_bltu_bgeu && _0222_;
  assign _0255_ = \u0.is_beq_bne_blt_bge_bltu_bgeu && _0223_;
  assign _0256_ = \u0.is_beq_bne_blt_bge_bltu_bgeu && _0224_;
  assign _0257_ = \u0.is_beq_bne_blt_bge_bltu_bgeu && _0225_;
  assign _0258_ = \u0.is_beq_bne_blt_bge_bltu_bgeu && _0226_;
  assign _0259_ = \u0.is_lb_lh_lw_lbu_lhu && _0221_;
  assign _0260_ = \u0.is_lb_lh_lw_lbu_lhu && _0222_;
  assign _0261_ = \u0.is_lb_lh_lw_lbu_lhu && _0227_;
  assign _0262_ = \u0.is_lb_lh_lw_lbu_lhu && _0223_;
  assign _0263_ = \u0.is_lb_lh_lw_lbu_lhu && _0224_;
  assign _0264_ = \u0.is_sb_sh_sw && _0221_;
  assign _0265_ = \u0.is_sb_sh_sw && _0222_;
  assign _0266_ = \u0.is_sb_sh_sw && _0227_;
  assign _0267_ = \u0.is_alu_reg_imm && _0221_;
  assign _0268_ = \u0.is_alu_reg_imm && _0227_;
  assign _0269_ = \u0.is_alu_reg_imm && _0228_;
  assign _0270_ = \u0.is_alu_reg_imm && _0223_;
  assign _0271_ = \u0.is_alu_reg_imm && _0225_;
  assign _0272_ = \u0.is_alu_reg_imm && _0226_;
  assign _0273_ = \u0.is_alu_reg_imm && _0222_;
  assign _0274_ = _0273_ && _0229_;
  assign _0275_ = \u0.is_alu_reg_imm && _0224_;
  assign _0276_ = _0275_ && _0229_;
  assign _0277_ = _0275_ && _0230_;
  assign _0278_ = \u0.is_alu_reg_reg && _0221_;
  assign _0279_ = _0278_ && _0229_;
  assign _0280_ = _0278_ && _0230_;
  assign _0281_ = \u0.is_alu_reg_reg && _0222_;
  assign _0282_ = _0281_ && _0229_;
  assign _0283_ = \u0.is_alu_reg_reg && _0227_;
  assign _0284_ = _0283_ && _0229_;
  assign _0285_ = \u0.is_alu_reg_reg && _0228_;
  assign _0286_ = _0285_ && _0229_;
  assign _0287_ = \u0.is_alu_reg_reg && _0223_;
  assign _0288_ = _0287_ && _0229_;
  assign _0289_ = \u0.is_alu_reg_reg && _0224_;
  assign _0290_ = _0289_ && _0229_;
  assign _0291_ = _0289_ && _0230_;
  assign _0292_ = \u0.is_alu_reg_reg && _0225_;
  assign _0293_ = _0292_ && _0229_;
  assign _0294_ = \u0.is_alu_reg_reg && _0226_;
  assign _0295_ = _0294_ && _0229_;
  assign _0296_ = _0231_ && _0232_;
  assign _0298_ = _0231_ && _0233_;
  assign _0299_ = _0231_ && _0234_;
  assign _0301_ = _0231_ && _0235_;
  assign _0302_ = _0231_ && _0236_;
  assign _0303_ = _0231_ && _0237_;
  assign _0304_ = _0231_ && _0331_;
  assign _0305_ = _0304_ && _0332_;
  assign _0306_ = \u0.is_alu_reg_imm && _0614_;
  assign _0307_ = _0222_ && _0229_;
  assign _0308_ = _0224_ && _0229_;
  assign _0309_ = _0224_ && _0230_;
  assign _0310_ = \u0.is_alu_reg_imm && _0615_;
  assign _0311_ = \u0.latched_store && \u0.latched_branch ;
  assign _0314_ = \u0.latched_store && _0336_;
  assign _0315_ = resetn && \u0.cpuregs_write ;
  assign _0316_ = _0315_ && \u0.latched_rd ;
  assign _0317_ = \u0.mem_do_rinst && \u0.mem_done ;
  assign _0319_ = _0337_ && _0338_;
  assign _0320_ = _0339_ && \u0.mem_done ;
  assign _0321_ = \u0.decoder_trigger_q && _0340_;
  assign _0322_ = _0321_ && \u0.instr_ecall_ebreak ;
  assign \u0.mem_xfer = \u0.mem_valid && mem_ready;
  assign _0323_ = \u0.mem_xfer && _0616_;
  assign _0324_ = _0323_ && _0354_;
  assign _0325_ = _0612_ && \u0.mem_do_rinst ;
  assign \u0.mem_done = resetn && _0355_;
  assign _0326_ = resetn && _0327_;
  assign \u0.mem_la_write = _0326_ && \u0.mem_do_wdata ;
  assign _0328_ = _0327_ && _0357_;
  assign \u0.mem_la_read = resetn && _0328_;
  assign _0329_ = _0244_ && _0245_;
  assign _0330_ = ! \u0.decoder_pseudo_trigger ;
  assign _0331_ = ! \u0.mem_rdata_q [31:21];
  assign _0332_ = ! \u0.mem_rdata_q [19:7];
  assign _0333_ = ! \u0.alu_eq ;
  assign _0334_ = ! \u0.alu_lts ;
  assign _0335_ = ! \u0.alu_ltu ;
  assign _0336_ = ! \u0.latched_branch ;
  assign _0318_ = ! \u0.decoder_trigger ;
  assign _0337_ = ! \u0.instr_jalr ;
  assign _0338_ = ! \u0.instr_retirq ;
  assign _0339_ = ! \u0.mem_do_prefetch ;
  assign _0340_ = ! \u0.decoder_pseudo_trigger_q ;
  assign _0341_ = ! resetn;
  assign _0327_ = ! \u0.mem_state ;
  assign _0297_ = _0296_ || _0298_;
  assign _0300_ = _0299_ || _0301_;
  assign _0342_ = \u0.instr_jalr || _0310_;
  assign _0343_ = \u0.instr_sra || \u0.instr_srai ;
  assign _0344_ = \u0.instr_xori || \u0.instr_xor ;
  assign _0345_ = \u0.instr_ori || \u0.instr_or ;
  assign _0346_ = \u0.instr_andi || \u0.instr_and ;
  assign _0312_ = \u0.instr_sll || \u0.instr_slli ;
  assign _0347_ = \u0.instr_srl || \u0.instr_srli ;
  assign _0348_ = _0347_ || \u0.instr_sra ;
  assign _0313_ = _0348_ || \u0.instr_srai ;
  assign _0349_ = _0339_ || \u0.mem_done ;
  assign _0350_ = \u0.instr_lb || \u0.instr_lbu ;
  assign _0351_ = \u0.instr_lh || \u0.instr_lhu ;
  assign _0352_ = _0341_ || \u0.mem_done ;
  assign _0353_ = \u0.mem_do_rinst || \u0.mem_do_rdata ;
  assign _0354_ = _0353_ || \u0.mem_do_wdata ;
  assign _0355_ = _0324_ || _0325_;
  assign _0356_ = \u0.mem_do_rinst || \u0.mem_do_prefetch ;
  assign _0357_ = _0356_ || \u0.mem_do_rdata ;
  assign _0358_ = _0341_ || \u0.trap ;
  assign _0359_ = _0341_ || mem_ready;
  assign _0360_ = \u0.mem_la_read || \u0.mem_la_write ;
  assign \u0.alu_lts = $signed(\u0.reg_op1 ) < $signed(\u0.reg_op2 );
  assign \u0.alu_ltu = \u0.reg_op1 < \u0.reg_op2 ;
  assign _0455_ = \u0.decoded_rs [4] ? _0362_ : _0361_;
  assign _0361_ = \u0.decoded_rs [3] ? _0364_ : _0363_;
  assign _0362_ = \u0.decoded_rs [3] ? _0366_ : _0365_;
  assign _0363_ = \u0.decoded_rs [2] ? _0368_ : _0367_;
  assign _0364_ = \u0.decoded_rs [2] ? _0370_ : _0369_;
  assign _0365_ = \u0.decoded_rs [2] ? _0372_ : _0371_;
  assign _0366_ = \u0.decoded_rs [2] ? _0374_ : _0373_;
  assign _0367_ = \u0.decoded_rs [1] ? _0376_ : _0375_;
  assign _0368_ = \u0.decoded_rs [1] ? _0378_ : _0377_;
  assign _0369_ = \u0.decoded_rs [1] ? _0380_ : _0379_;
  assign _0370_ = \u0.decoded_rs [1] ? _0382_ : _0381_;
  assign _0371_ = \u0.decoded_rs [1] ? _0384_ : _0383_;
  assign _0372_ = \u0.decoded_rs [1] ? _0386_ : _0385_;
  assign _0373_ = \u0.decoded_rs [1] ? _0388_ : _0387_;
  assign _0374_ = \u0.decoded_rs [1] ? _0390_ : _0389_;
  assign _0375_ = \u0.decoded_rs [0] ? \u0.cpuregs[1] : \u0.cpuregs[0] ;
  assign _0385_ = \u0.decoded_rs [0] ? \u0.cpuregs[21] : \u0.cpuregs[20] ;
  assign _0386_ = \u0.decoded_rs [0] ? \u0.cpuregs[23] : \u0.cpuregs[22] ;
  assign _0387_ = \u0.decoded_rs [0] ? \u0.cpuregs[25] : \u0.cpuregs[24] ;
  assign _0388_ = \u0.decoded_rs [0] ? \u0.cpuregs[27] : \u0.cpuregs[26] ;
  assign _0389_ = \u0.decoded_rs [0] ? \u0.cpuregs[29] : \u0.cpuregs[28] ;
  assign _0390_ = \u0.decoded_rs [0] ? \u0.cpuregs[31] : \u0.cpuregs[30] ;
  assign _0376_ = \u0.decoded_rs [0] ? \u0.cpuregs[3] : \u0.cpuregs[2] ;
  assign _0377_ = \u0.decoded_rs [0] ? \u0.cpuregs[5] : \u0.cpuregs[4] ;
  assign _0378_ = \u0.decoded_rs [0] ? \u0.cpuregs[7] : \u0.cpuregs[6] ;
  assign _0379_ = \u0.decoded_rs [0] ? \u0.cpuregs[9] : \u0.cpuregs[8] ;
  assign _0380_ = \u0.decoded_rs [0] ? \u0.cpuregs[11] : \u0.cpuregs[10] ;
  assign _0381_ = \u0.decoded_rs [0] ? \u0.cpuregs[13] : \u0.cpuregs[12] ;
  assign _0382_ = \u0.decoded_rs [0] ? \u0.cpuregs[15] : \u0.cpuregs[14] ;
  assign _0383_ = \u0.decoded_rs [0] ? \u0.cpuregs[17] : \u0.cpuregs[16] ;
  assign _0384_ = \u0.decoded_rs [0] ? \u0.cpuregs[19] : \u0.cpuregs[18] ;
  assign _0391_ = _0161_ & _0022_[31];
  assign _0392_ = _0177_ & _0022_[31];
  assign _0393_ = _0178_ & _0022_[31];
  assign _0394_ = _0180_ & _0022_[31];
  assign _0395_ = _0181_ & _0022_[31];
  assign _0396_ = _0182_ & _0022_[31];
  assign _0397_ = _0183_ & _0022_[31];
  assign _0398_ = _0186_ & _0022_[31];
  assign _0399_ = _0187_ & _0022_[31];
  assign _0400_ = _0188_ & _0022_[31];
  assign _0401_ = _0189_ & _0022_[31];
  assign _0402_ = _0163_ & _0022_[31];
  assign _0403_ = _0191_ & _0022_[31];
  assign _0404_ = _0192_ & _0022_[31];
  assign _0405_ = _0193_ & _0022_[31];
  assign _0406_ = _0194_ & _0022_[31];
  assign _0407_ = _0197_ & _0022_[31];
  assign _0408_ = _0198_ & _0022_[31];
  assign _0409_ = _0199_ & _0022_[31];
  assign _0410_ = _0200_ & _0022_[31];
  assign _0411_ = _0202_ & _0022_[31];
  assign _0412_ = _0203_ & _0022_[31];
  assign _0413_ = _0165_ & _0022_[31];
  assign _0414_ = _0204_ & _0022_[31];
  assign _0415_ = _0205_ & _0022_[31];
  assign _0416_ = _0167_ & _0022_[31];
  assign _0417_ = _0169_ & _0022_[31];
  assign _0418_ = _0170_ & _0022_[31];
  assign _0419_ = _0171_ & _0022_[31];
  assign _0420_ = _0172_ & _0022_[31];
  assign _0421_ = _0175_ & _0022_[31];
  assign _0422_ = _0176_ & _0022_[31];
  assign _0423_ = _0391_ ? _0021_ : \u0.cpuregs[0] ;
  assign _0424_ = _0392_ ? _0021_ : \u0.cpuregs[10] ;
  assign _0425_ = _0393_ ? _0021_ : \u0.cpuregs[11] ;
  assign _0426_ = _0394_ ? _0021_ : \u0.cpuregs[12] ;
  assign _0427_ = _0395_ ? _0021_ : \u0.cpuregs[13] ;
  assign _0428_ = _0396_ ? _0021_ : \u0.cpuregs[14] ;
  assign _0429_ = _0397_ ? _0021_ : \u0.cpuregs[15] ;
  assign _0430_ = _0398_ ? _0021_ : \u0.cpuregs[16] ;
  assign _0431_ = _0399_ ? _0021_ : \u0.cpuregs[17] ;
  assign _0432_ = _0400_ ? _0021_ : \u0.cpuregs[18] ;
  assign _0433_ = _0401_ ? _0021_ : \u0.cpuregs[19] ;
  assign _0434_ = _0402_ ? _0021_ : \u0.cpuregs[1] ;
  assign _0435_ = _0403_ ? _0021_ : \u0.cpuregs[20] ;
  assign _0436_ = _0404_ ? _0021_ : \u0.cpuregs[21] ;
  assign _0437_ = _0405_ ? _0021_ : \u0.cpuregs[22] ;
  assign _0438_ = _0406_ ? _0021_ : \u0.cpuregs[23] ;
  assign _0439_ = _0407_ ? _0021_ : \u0.cpuregs[24] ;
  assign _0440_ = _0408_ ? _0021_ : \u0.cpuregs[25] ;
  assign _0441_ = _0409_ ? _0021_ : \u0.cpuregs[26] ;
  assign _0442_ = _0410_ ? _0021_ : \u0.cpuregs[27] ;
  assign _0443_ = _0411_ ? _0021_ : \u0.cpuregs[28] ;
  assign _0444_ = _0412_ ? _0021_ : \u0.cpuregs[29] ;
  assign _0445_ = _0413_ ? _0021_ : \u0.cpuregs[2] ;
  assign _0446_ = _0414_ ? _0021_ : \u0.cpuregs[30] ;
  assign _0447_ = _0415_ ? _0021_ : \u0.cpuregs[31] ;
  assign _0448_ = _0416_ ? _0021_ : \u0.cpuregs[3] ;
  assign _0449_ = _0417_ ? _0021_ : \u0.cpuregs[4] ;
  assign _0450_ = _0418_ ? _0021_ : \u0.cpuregs[5] ;
  assign _0451_ = _0419_ ? _0021_ : \u0.cpuregs[6] ;
  assign _0452_ = _0420_ ? _0021_ : \u0.cpuregs[7] ;
  assign _0453_ = _0421_ ? _0021_ : \u0.cpuregs[8] ;
  assign _0454_ = _0422_ ? _0021_ : \u0.cpuregs[9] ;
  always @(posedge clk)
    \u0.cpuregs[0] <= _0423_;
  always @(posedge clk)
    \u0.cpuregs[10] <= _0424_;
  always @(posedge clk)
    \u0.cpuregs[11] <= _0425_;
  always @(posedge clk)
    \u0.cpuregs[12] <= _0426_;
  always @(posedge clk)
    \u0.cpuregs[13] <= _0427_;
  always @(posedge clk)
    \u0.cpuregs[14] <= _0428_;
  always @(posedge clk)
    \u0.cpuregs[15] <= _0429_;
  always @(posedge clk)
    \u0.cpuregs[16] <= _0430_;
  always @(posedge clk)
    \u0.cpuregs[17] <= _0431_;
  always @(posedge clk)
    \u0.cpuregs[18] <= _0432_;
  always @(posedge clk)
    \u0.cpuregs[19] <= _0433_;
  always @(posedge clk)
    \u0.cpuregs[1] <= _0434_;
  always @(posedge clk)
    \u0.cpuregs[20] <= _0435_;
  always @(posedge clk)
    \u0.cpuregs[21] <= _0436_;
  always @(posedge clk)
    \u0.cpuregs[22] <= _0437_;
  always @(posedge clk)
    \u0.cpuregs[23] <= _0438_;
  always @(posedge clk)
    \u0.cpuregs[24] <= _0439_;
  always @(posedge clk)
    \u0.cpuregs[25] <= _0440_;
  always @(posedge clk)
    \u0.cpuregs[26] <= _0441_;
  always @(posedge clk)
    \u0.cpuregs[27] <= _0442_;
  always @(posedge clk)
    \u0.cpuregs[28] <= _0443_;
  always @(posedge clk)
    \u0.cpuregs[29] <= _0444_;
  always @(posedge clk)
    \u0.cpuregs[2] <= _0445_;
  always @(posedge clk)
    \u0.cpuregs[30] <= _0446_;
  always @(posedge clk)
    \u0.cpuregs[31] <= _0447_;
  always @(posedge clk)
    \u0.cpuregs[3] <= _0448_;
  always @(posedge clk)
    \u0.cpuregs[4] <= _0449_;
  always @(posedge clk)
    \u0.cpuregs[5] <= _0450_;
  always @(posedge clk)
    \u0.cpuregs[6] <= _0451_;
  always @(posedge clk)
    \u0.cpuregs[7] <= _0452_;
  always @(posedge clk)
    \u0.cpuregs[8] <= _0453_;
  always @(posedge clk)
    \u0.cpuregs[9] <= _0454_;
  assign _0456_ = \u0.reg_op1 | \u0.reg_op2 ;
  always @(posedge clk)
    \u0.trap <= _0122_;
  always @(posedge clk)
    \u0.pcpi_valid <= _0112_;
  always @(posedge clk)
    \u0.eoi <= _0034_;
  reg \u0.trace_data_reg[0] ;
  always @(posedge clk)
    \u0.trace_data_reg[0] <= 1'hx;
  assign \u0.trace_data [0] = \u0.trace_data_reg[0] ;
  always @(posedge clk)
    \u0.count_cycle <= _0024_;
  always @(posedge clk)
    \u0.count_instr <= _0025_;
  always @(posedge clk)
    \u0.reg_pc <= fangyuan9;
  wire [31:0] fangyuan9;
  assign fangyuan9 = { _0117_[31:2], 2'h0 };
  always @(posedge clk)
    \u0.reg_next_pc <= fangyuan10;
  wire [31:0] fangyuan10;
  assign fangyuan10 = { _0113_[31:2], 2'h0 };
  always @(posedge clk)
    \u0.reg_op1 <= _0114_;
  always @(posedge clk)
    \u0.reg_op2 <= _0115_;
  always @(posedge clk)
    \u0.reg_out <= _0116_;
  always @(posedge clk)
    \u0.reg_sh <= _0118_;
  always @(posedge clk)
    \u0.mem_wordsize <= _0109_;
  always @(posedge clk)
    \u0.mem_do_prefetch <= _0100_;
  always @(posedge clk)
    \u0.mem_do_rinst <= _0102_;
  always @(posedge clk)
    \u0.mem_do_rdata <= _0101_;
  always @(posedge clk)
    \u0.mem_do_wdata <= _0103_;
  always @(posedge clk)
    \u0.decoder_trigger <= _0033_;
  always @(posedge clk)
    \u0.decoder_trigger_q <= \u0.decoder_trigger ;
  always @(posedge clk)
    \u0.decoder_pseudo_trigger <= _0032_;
  always @(posedge clk)
    \u0.decoder_pseudo_trigger_q <= \u0.decoder_pseudo_trigger ;
  always @(posedge clk)
    \u0.cpu_state <= _0026_;
  always @(posedge clk)
    \u0.latched_store <= _0098_;
  always @(posedge clk)
    \u0.latched_stalu <= _0097_;
  always @(posedge clk)
    \u0.latched_branch <= _0091_;
  always @(posedge clk)
    \u0.latched_compr <= _0092_;
  always @(posedge clk)
    \u0.latched_is_lu <= _0095_;
  always @(posedge clk)
    \u0.latched_is_lh <= _0094_;
  always @(posedge clk)
    \u0.latched_is_lb <= _0093_;
  always @(posedge clk)
    \u0.latched_rd <= _0096_;
  always @(posedge clk)
    \u0.alu_out_q <= \u0.alu_out ;
  always @(posedge clk)
    \u0.pcpi_insn <= _0111_;
  always @(posedge clk)
    \u0.instr_lui <= _0053_;
  always @(posedge clk)
    \u0.instr_auipc <= _0039_;
  always @(posedge clk)
    \u0.instr_jal <= _0047_;
  always @(posedge clk)
    \u0.instr_jalr <= _0048_;
  always @(posedge clk)
    \u0.instr_beq <= _0040_;
  always @(posedge clk)
    \u0.instr_bne <= _0045_;
  always @(posedge clk)
    \u0.instr_blt <= _0043_;
  always @(posedge clk)
    \u0.instr_bge <= _0041_;
  always @(posedge clk)
    \u0.instr_bltu <= _0044_;
  always @(posedge clk)
    \u0.instr_bgeu <= _0042_;
  always @(posedge clk)
    \u0.instr_lb <= _0049_;
  always @(posedge clk)
    \u0.instr_lh <= _0051_;
  always @(posedge clk)
    \u0.instr_lw <= _0054_;
  always @(posedge clk)
    \u0.instr_lbu <= _0050_;
  always @(posedge clk)
    \u0.instr_lhu <= _0052_;
  always @(posedge clk)
    \u0.instr_sb <= _0062_;
  always @(posedge clk)
    \u0.instr_sh <= _0063_;
  always @(posedge clk)
    \u0.instr_sw <= _0075_;
  always @(posedge clk)
    \u0.instr_addi <= _0036_;
  always @(posedge clk)
    \u0.instr_slti <= _0067_;
  always @(posedge clk)
    \u0.instr_sltiu <= _0068_;
  always @(posedge clk)
    \u0.instr_xori <= _0077_;
  always @(posedge clk)
    \u0.instr_ori <= _0056_;
  always @(posedge clk)
    \u0.instr_andi <= _0038_;
  always @(posedge clk)
    \u0.instr_slli <= _0065_;
  always @(posedge clk)
    \u0.instr_srli <= _0073_;
  always @(posedge clk)
    \u0.instr_srai <= _0071_;
  always @(posedge clk)
    \u0.instr_add <= _0035_;
  always @(posedge clk)
    \u0.instr_sub <= _0074_;
  always @(posedge clk)
    \u0.instr_sll <= _0064_;
  always @(posedge clk)
    \u0.instr_slt <= _0066_;
  always @(posedge clk)
    \u0.instr_sltu <= _0069_;
  always @(posedge clk)
    \u0.instr_xor <= _0076_;
  always @(posedge clk)
    \u0.instr_srl <= _0072_;
  always @(posedge clk)
    \u0.instr_sra <= _0070_;
  always @(posedge clk)
    \u0.instr_or <= _0055_;
  always @(posedge clk)
    \u0.instr_and <= _0037_;
  always @(posedge clk)
    \u0.instr_rdcycle <= _0057_;
  always @(posedge clk)
    \u0.instr_rdcycleh <= _0058_;
  always @(posedge clk)
    \u0.instr_rdinstr <= _0059_;
  always @(posedge clk)
    \u0.instr_rdinstrh <= _0060_;
  always @(posedge clk)
    \u0.instr_ecall_ebreak <= _0046_;
  always @(posedge clk)
    \u0.instr_retirq <= _0061_;
  always @(posedge clk)
    \u0.decoded_rd <= _0029_;
  always @(posedge clk)
    \u0.decoded_rs1 <= _0030_;
  always @(posedge clk)
    \u0.decoded_rs2 <= _0031_;
  always @(posedge clk)
    \u0.decoded_imm <= _0027_;
  always @(posedge clk)
    \u0.decoded_imm_j <= _0028_;
  always @(posedge clk)
    \u0.compressed_instr <= _0023_;
  always @(posedge clk)
    \u0.is_lui_auipc_jal <= _0085_;
  always @(posedge clk)
    \u0.is_lb_lh_lw_lbu_lhu <= _0083_;
  always @(posedge clk)
    \u0.is_slli_srli_srai <= _0088_;
  always @(posedge clk)
    \u0.is_jalr_addi_slti_sltiu_xori_ori_andi <= _0082_;
  always @(posedge clk)
    \u0.is_sb_sh_sw <= _0087_;
  always @(posedge clk)
    \u0.is_lui_auipc_jal_jalr_addi_add_sub <= _0086_;
  always @(posedge clk)
    \u0.is_slti_blt_slt <= _0089_;
  always @(posedge clk)
    \u0.is_sltiu_bltu_sltu <= _0090_;
  always @(posedge clk)
    \u0.is_beq_bne_blt_bge_bltu_bgeu <= _0080_;
  always @(posedge clk)
    \u0.is_lbu_lhu_lw <= _0084_;
  always @(posedge clk)
    \u0.is_alu_reg_imm <= _0078_;
  always @(posedge clk)
    \u0.is_alu_reg_reg <= _0079_;
  always @(posedge clk)
    \u0.is_compare <= _0081_;
  always @(posedge clk)
    \u0.mem_valid <= _0107_;
  always @(posedge clk)
    \u0.mem_instr <= _0104_;
  always @(posedge clk)
    \u0.mem_addr <= _0099_;
  always @(posedge clk)
    \u0.mem_wdata <= _0108_;
  always @(posedge clk)
    \u0.mem_wstrb <= _0110_;
  always @(posedge clk)
    \u0.mem_state <= _0106_;
  always @(posedge clk)
    \u0.mem_rdata_q <= _0105_;
  assign _0136_ = \u0.alu_out_0 ? 1'h1 : 1'h0;
  assign _0457_ = \u0.cpu_state == 4'h8;
  assign _0458_ = \u0.latched_branch ? _0624_ : \u0.reg_next_pc ;
  assign _0459_ = _0238_ ? _0458_ : 32'hxxxxxxxx;
  assign _0129_ = resetn ? _0459_ : 32'hxxxxxxxx;
  wire [1:0] fangyuan11;
  assign fangyuan11 = { _0133_, 1'h0 };
  wire [1:0] fangyuan12;
  assign fangyuan12 = { _0461_, _0150_ };
  always @(1'hx or fangyuan11 or fangyuan12) begin
    casez (fangyuan12)
      2'b?1 :
        _0128_ = fangyuan11 [0:0] ;
      2'b1? :
        _0128_ = fangyuan11 [1:1] ;
      default:
        _0128_ = 1'hx ;
    endcase
  end
  assign _0460_ = \u0.cpu_state == 1'h1;
  assign _0461_ = \u0.cpu_state == 2'h2;
  assign _0462_ = \u0.cpu_state == 3'h4;
  assign _0463_ = \u0.cpu_state == 6'h20;
  assign _0464_ = \u0.cpu_state == 8'h80;
  wire [1:0] fangyuan13;
  assign fangyuan13 = { 1'h0, _0131_ };
  wire [1:0] fangyuan14;
  assign fangyuan14 = { _0151_, _0460_ };
  always @(1'hx or fangyuan13 or fangyuan14) begin
    casez (fangyuan14)
      2'b?1 :
        _0126_ = fangyuan13 [0:0] ;
      2'b1? :
        _0126_ = fangyuan13 [1:1] ;
      default:
        _0126_ = 1'hx ;
    endcase
  end
  wire [1:0] fangyuan15;
  assign fangyuan15 = { _0132_, 1'h0 };
  wire [1:0] fangyuan16;
  assign fangyuan16 = { _0457_, _0152_ };
  always @(1'hx or fangyuan15 or fangyuan16) begin
    casez (fangyuan16)
      2'b?1 :
        _0127_ = fangyuan15 [0:0] ;
      2'b1? :
        _0127_ = fangyuan15 [1:1] ;
      default:
        _0127_ = 1'hx ;
    endcase
  end
  assign _0121_ = resetn ? _0128_ : 1'h0;
  assign _0119_ = resetn ? _0126_ : 1'h0;
  assign _0120_ = resetn ? _0127_ : 1'h0;
  assign _0465_ = _0320_ ? 1'h1 : 1'h0;
  assign _0466_ = _0349_ ? _0465_ : 1'h0;
  assign _0467_ = _0156_ ? _0466_ : 1'h0;
  assign _0032_ = resetn ? _0467_ : 1'h0;
  assign _0468_ = _0320_ ? 1'h1 : _0317_;
  assign _0469_ = _0349_ ? _0468_ : _0317_;
  wire [1:0] fangyuan17;
  assign fangyuan17 = { _0472_, _0469_ };
  wire [1:0] fangyuan18;
  assign fangyuan18 = { _0457_, _0156_ };
  always @(_0317_ or fangyuan17 or fangyuan18) begin
    casez (fangyuan18)
      2'b?1 :
        _0470_ = fangyuan17 [0:0] ;
      2'b1? :
        _0470_ = fangyuan17 [1:1] ;
      default:
        _0470_ = _0317_ ;
    endcase
  end
  assign _0471_ = \u0.alu_out_0 ? 1'h0 : _0317_;
  assign _0472_ = \u0.is_beq_bne_blt_bge_bltu_bgeu ? _0471_ : _0317_;
  assign _0033_ = resetn ? _0470_ : _0317_;
  wire [95:0] fangyuan19;
  assign fangyuan19 = { \u0.mem_rdata_word , \u0.mem_rdata_word [15], \u0.mem_rdata_word [15], \u0.mem_rdata_word [15], \u0.mem_rdata_word [15], \u0.mem_rdata_word [15], \u0.mem_rdata_word [15], \u0.mem_rdata_word [15], \u0.mem_rdata_word [15], \u0.mem_rdata_word [15], \u0.mem_rdata_word [15], \u0.mem_rdata_word [15], \u0.mem_rdata_word [15], \u0.mem_rdata_word [15], \u0.mem_rdata_word [15], \u0.mem_rdata_word [15], \u0.mem_rdata_word [15], \u0.mem_rdata_word [15:0], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7], \u0.mem_rdata_word [7:0] };
  wire [2:0] fangyuan20;
  assign fangyuan20 = { \u0.latched_is_lu , \u0.latched_is_lh , \u0.latched_is_lb };
  always @(32'hxxxxxxxx or fangyuan19 or fangyuan20) begin
    casez (fangyuan20)
      3'b??1 :
        _0473_ = fangyuan19 [31:0] ;
      3'b?1? :
        _0473_ = fangyuan19 [63:32] ;
      3'b1?? :
        _0473_ = fangyuan19 [95:64] ;
      default:
        _0473_ = 32'hxxxxxxxx ;
    endcase
  end
  assign _0474_ = _0320_ ? _0473_ : 32'hxxxxxxxx;
  assign _0475_ = _0349_ ? _0474_ : 32'hxxxxxxxx;
  wire [127:0] fangyuan21;
  assign fangyuan21 = { _0478_, _0143_, _0477_, _0475_ };
  wire [3:0] fangyuan22;
  assign fangyuan22 = { _0463_, _0457_, _0462_, _0460_ };
  always @(32'hxxxxxxxx or fangyuan21 or fangyuan22) begin
    casez (fangyuan22)
      4'b???1 :
        _0476_ = fangyuan21 [31:0] ;
      4'b??1? :
        _0476_ = fangyuan21 [63:32] ;
      4'b?1?? :
        _0476_ = fangyuan21 [95:64] ;
      4'b1??? :
        _0476_ = fangyuan21 [127:96] ;
      default:
        _0476_ = 32'hxxxxxxxx ;
    endcase
  end
  assign _0477_ = _0240_ ? \u0.reg_op1 : 32'hxxxxxxxx;
  assign _0478_ = \u0.is_rdcycle_rdcycleh_rdinstr_rdinstrh ? _0479_ : 32'hxxxxxxxx;
  wire [127:0] fangyuan23;
  assign fangyuan23 = { \u0.count_cycle [31:0], \u0.count_cycle [63:32], \u0.count_instr [31:0], \u0.count_instr [63:32] };
  wire [3:0] fangyuan24;
  assign fangyuan24 = { \u0.instr_rdcycle , \u0.instr_rdcycleh , \u0.instr_rdinstr , \u0.instr_rdinstrh };
  always @(32'hxxxxxxxx or fangyuan23 or fangyuan24) begin
    casez (fangyuan24)
      4'b???1 :
        _0479_ = fangyuan23 [31:0] ;
      4'b??1? :
        _0479_ = fangyuan23 [63:32] ;
      4'b?1?? :
        _0479_ = fangyuan23 [95:64] ;
      4'b1??? :
        _0479_ = fangyuan23 [127:96] ;
      default:
        _0479_ = 32'hxxxxxxxx ;
    endcase
  end
  assign _0116_ = resetn ? _0476_ : 32'hxxxxxxxx;
  assign _0480_ = _0251_ ? _0218_[4:0] : _0621_[4:0];
  assign _0481_ = _0240_ ? 5'hxx : _0480_;
  wire [9:0] fangyuan25;
  assign fangyuan25 = { \u0.cpuregs_rs1 [4:0], _0481_ };
  wire [1:0] fangyuan26;
  assign fangyuan26 = { _0239_, _0462_ };
  always @(5'hxx or fangyuan25 or fangyuan26) begin
    casez (fangyuan26)
      2'b?1 :
        _0482_ = fangyuan25 [4:0] ;
      2'b1? :
        _0482_ = fangyuan25 [9:5] ;
      default:
        _0482_ = 5'hxx ;
    endcase
  end
  assign _0118_ = resetn ? _0482_ : 5'hxx;
  assign _0483_ = _0464_ ? 1'h1 : 1'h0;
  assign _0122_ = resetn ? _0483_ : 1'h0;
  assign _0484_ = \u0.is_beq_bne_blt_bge_bltu_bgeu ? 5'h00 : \u0.latched_rd ;
  wire [9:0] fangyuan27;
  assign fangyuan27 = { \u0.decoded_rd , _0484_ };
  wire [1:0] fangyuan28;
  assign fangyuan28 = { _0238_, _0457_ };
  always @(\u0.latched_rd or fangyuan27 or fangyuan28) begin
    casez (fangyuan28)
      2'b?1 :
        _0485_ = fangyuan27 [4:0] ;
      2'b1? :
        _0485_ = fangyuan27 [9:5] ;
      default:
        _0485_ = \u0.latched_rd ;
    endcase
  end
  assign _0096_ = resetn ? _0485_ : \u0.latched_rd ;
  assign _0486_ = \u0.mem_do_rdata ? \u0.latched_is_lb : \u0.instr_lb ;
  assign _0487_ = _0349_ ? _0486_ : \u0.latched_is_lb ;
  wire [1:0] fangyuan29;
  assign fangyuan29 = { 1'h0, _0487_ };
  wire [1:0] fangyuan30;
  assign fangyuan30 = { _0238_, _0460_ };
  always @(\u0.latched_is_lb or fangyuan29 or fangyuan30) begin
    casez (fangyuan30)
      2'b?1 :
        _0488_ = fangyuan29 [0:0] ;
      2'b1? :
        _0488_ = fangyuan29 [1:1] ;
      default:
        _0488_ = \u0.latched_is_lb ;
    endcase
  end
  assign _0093_ = resetn ? _0488_ : 1'h0;
  assign _0489_ = \u0.mem_do_rdata ? \u0.latched_is_lh : \u0.instr_lh ;
  assign _0490_ = _0349_ ? _0489_ : \u0.latched_is_lh ;
  wire [1:0] fangyuan31;
  assign fangyuan31 = { 1'h0, _0490_ };
  wire [1:0] fangyuan32;
  assign fangyuan32 = { _0238_, _0460_ };
  always @(\u0.latched_is_lh or fangyuan31 or fangyuan32) begin
    casez (fangyuan32)
      2'b?1 :
        _0491_ = fangyuan31 [0:0] ;
      2'b1? :
        _0491_ = fangyuan31 [1:1] ;
      default:
        _0491_ = \u0.latched_is_lh ;
    endcase
  end
  assign _0094_ = resetn ? _0491_ : 1'h0;
  assign _0492_ = \u0.mem_do_rdata ? \u0.latched_is_lu : \u0.is_lbu_lhu_lw ;
  assign _0493_ = _0349_ ? _0492_ : \u0.latched_is_lu ;
  wire [1:0] fangyuan33;
  assign fangyuan33 = { 1'h0, _0493_ };
  wire [1:0] fangyuan34;
  assign fangyuan34 = { _0238_, _0460_ };
  always @(\u0.latched_is_lu or fangyuan33 or fangyuan34) begin
    casez (fangyuan34)
      2'b?1 :
        _0494_ = fangyuan33 [0:0] ;
      2'b1? :
        _0494_ = fangyuan33 [1:1] ;
      default:
        _0494_ = \u0.latched_is_lu ;
    endcase
  end
  assign _0095_ = resetn ? _0494_ : 1'h0;
  assign _0495_ = _0238_ ? \u0.compressed_instr : \u0.latched_compr ;
  assign _0092_ = resetn ? _0495_ : \u0.latched_compr ;
  assign _0496_ = \u0.is_beq_bne_blt_bge_bltu_bgeu ? \u0.alu_out_0 : \u0.instr_jalr ;
  wire [1:0] fangyuan35;
  assign fangyuan35 = { _0499_, _0496_ };
  wire [1:0] fangyuan36;
  assign fangyuan36 = { _0238_, _0457_ };
  always @(\u0.latched_branch or fangyuan35 or fangyuan36) begin
    casez (fangyuan36)
      2'b?1 :
        _0497_ = fangyuan35 [0:0] ;
      2'b1? :
        _0497_ = fangyuan35 [1:1] ;
      default:
        _0497_ = \u0.latched_branch ;
    endcase
  end
  assign _0498_ = \u0.instr_jal ? 1'h1 : 1'h0;
  assign _0499_ = \u0.decoder_trigger ? _0498_ : 1'h0;
  assign _0091_ = resetn ? _0497_ : 1'h0;
  assign _0500_ = \u0.is_beq_bne_blt_bge_bltu_bgeu ? \u0.latched_stalu : 1'h1;
  wire [1:0] fangyuan37;
  assign fangyuan37 = { 1'h0, _0500_ };
  wire [1:0] fangyuan38;
  assign fangyuan38 = { _0238_, _0457_ };
  always @(\u0.latched_stalu or fangyuan37 or fangyuan38) begin
    casez (fangyuan38)
      2'b?1 :
        _0501_ = fangyuan37 [0:0] ;
      2'b1? :
        _0501_ = fangyuan37 [1:1] ;
      default:
        _0501_ = \u0.latched_stalu ;
    endcase
  end
  assign _0097_ = resetn ? _0501_ : 1'h0;
  wire [3:0] fangyuan39;
  assign fangyuan39 = { 1'h0, _0504_, _0503_, 1'h1 };
  wire [3:0] fangyuan40;
  assign fangyuan40 = { _0238_, _0463_, _0457_, _0153_ };
  always @(\u0.latched_store or fangyuan39 or fangyuan40) begin
    casez (fangyuan40)
      4'b???1 :
        _0502_ = fangyuan39 [0:0] ;
      4'b??1? :
        _0502_ = fangyuan39 [1:1] ;
      4'b?1?? :
        _0502_ = fangyuan39 [2:2] ;
      4'b1??? :
        _0502_ = fangyuan39 [3:3] ;
      default:
        _0502_ = \u0.latched_store ;
    endcase
  end
  assign _0503_ = \u0.is_beq_bne_blt_bge_bltu_bgeu ? \u0.alu_out_0 : 1'h1;
  assign _0504_ = \u0.is_rdcycle_rdcycleh_rdinstr_rdinstrh ? 1'h1 : \u0.latched_store ;
  assign _0098_ = resetn ? _0502_ : 1'h0;
  assign _0505_ = _0320_ ? 8'h40 : \u0.cpu_state ;
  assign _0506_ = _0349_ ? _0505_ : \u0.cpu_state ;
  wire [47:0] fangyuan41;
  assign fangyuan41 = { _0513_, 1'h0, _0217_[6:0], 4'h0, _0216_[3:0], _0510_, _0508_, _0506_ };
  wire [5:0] fangyuan42;
  assign fangyuan42 = { _0238_, _0463_, _0239_, _0457_, _0462_, _0156_ };
  always @(\u0.cpu_state or fangyuan41 or fangyuan42) begin
    casez (fangyuan42)
      6'b?????1 :
        _0507_ = fangyuan41 [7:0] ;
      6'b????1? :
        _0507_ = fangyuan41 [15:8] ;
      6'b???1?? :
        _0507_ = fangyuan41 [23:16] ;
      6'b??1??? :
        _0507_ = fangyuan41 [31:24] ;
      6'b?1???? :
        _0507_ = fangyuan41 [39:32] ;
      6'b1????? :
        _0507_ = fangyuan41 [47:40] ;
      default:
        _0507_ = \u0.cpu_state ;
    endcase
  end
  assign _0508_ = _0240_ ? 8'h40 : \u0.cpu_state ;
  assign _0509_ = \u0.mem_done ? 8'h40 : \u0.cpu_state ;
  assign _0510_ = \u0.is_beq_bne_blt_bge_bltu_bgeu ? _0509_ : 8'h40;
  assign _0216_[3:0] = \u0.is_sb_sh_sw ? 4'h2 : 4'h8;
  wire [2:0] fangyuan43;
  assign fangyuan43 = { \u0.is_rdcycle_rdcycleh_rdinstr_rdinstrh , \u0.is_lb_lh_lw_lbu_lhu , _0154_ };
  always @(7'h10 or fangyuan43) begin
    casez (fangyuan43)
      3'b??1 :
        _0217_[6:0] = 7'b0001000 ;
      3'b?1? :
        _0217_[6:0] = 7'b0000001 ;
      3'b1?? :
        _0217_[6:0] = 7'b1000000 ;
      default:
        _0217_[6:0] = 7'h10 ;
    endcase
  end
  wire [1:0] fangyuan44;
  assign fangyuan44 = { \u0.is_jalr_addi_slti_sltiu_xori_ori_andi , \u0.is_slli_srli_srai };
  assign _0511_ = | fangyuan44;
  assign _0512_ = \u0.instr_jal ? \u0.cpu_state : 8'h20;
  assign _0513_ = \u0.decoder_trigger ? _0512_ : \u0.cpu_state ;
  assign _0514_ = resetn ? _0507_ : 8'h40;
  assign _0026_ = _0322_ ? 8'h80 : _0514_;
  assign _0515_ = _0352_ ? 1'h0 : \u0.mem_do_wdata ;
  assign _0103_ = _0121_ ? 1'h1 : _0515_;
  assign _0516_ = _0352_ ? 1'h0 : \u0.mem_do_rdata ;
  assign _0101_ = _0119_ ? 1'h1 : _0516_;
  assign _0517_ = _0240_ ? \u0.mem_do_prefetch : \u0.mem_do_rinst ;
  wire [3:0] fangyuan45;
  assign fangyuan45 = { _0521_, _0520_, _0519_, _0517_ };
  wire [3:0] fangyuan46;
  assign fangyuan46 = { _0238_, _0463_, _0239_, _0462_ };
  always @(\u0.mem_do_rinst or fangyuan45 or fangyuan46) begin
    casez (fangyuan46)
      4'b???1 :
        _0518_ = fangyuan45 [0:0] ;
      4'b??1? :
        _0518_ = fangyuan45 [1:1] ;
      4'b?1?? :
        _0518_ = fangyuan45 [2:2] ;
      4'b1??? :
        _0518_ = fangyuan45 [3:3] ;
      default:
        _0518_ = \u0.mem_do_rinst ;
    endcase
  end
  assign _0519_ = \u0.is_sb_sh_sw ? 1'h1 : \u0.mem_do_prefetch ;
  wire [1:0] fangyuan47;
  assign fangyuan47 = { 1'h1, \u0.mem_do_prefetch };
  wire [1:0] fangyuan48;
  assign fangyuan48 = { \u0.is_lb_lh_lw_lbu_lhu , _0154_ };
  always @(\u0.mem_do_rinst or fangyuan47 or fangyuan48) begin
    casez (fangyuan48)
      2'b?1 :
        _0520_ = fangyuan47 [0:0] ;
      2'b1? :
        _0520_ = fangyuan47 [1:1] ;
      default:
        _0520_ = \u0.mem_do_rinst ;
    endcase
  end
  assign _0521_ = \u0.decoder_trigger ? _0498_ : _0318_;
  assign _0522_ = resetn ? _0518_ : \u0.mem_do_rinst ;
  assign _0523_ = _0352_ ? 1'h0 : _0522_;
  assign _0102_ = _0120_ ? 1'h1 : _0523_;
  assign _0524_ = \u0.instr_jal ? \u0.mem_do_prefetch : _0319_;
  assign _0525_ = \u0.decoder_trigger ? _0524_ : \u0.mem_do_prefetch ;
  assign _0526_ = _0238_ ? _0525_ : \u0.mem_do_prefetch ;
  assign _0527_ = resetn ? _0526_ : \u0.mem_do_prefetch ;
  assign _0100_ = _0352_ ? 1'h0 : _0527_;
  wire [2:0] fangyuan49;
  assign fangyuan49 = { _0350_, _0351_, \u0.instr_lw };
  always @(2'hx or fangyuan49) begin
    casez (fangyuan49)
      3'b??1 :
        _0528_ = 2'b00 ;
      3'b?1? :
        _0528_ = 2'b01 ;
      3'b1?? :
        _0528_ = 2'b10 ;
      default:
        _0528_ = 2'hx ;
    endcase
  end
  assign _0529_ = \u0.mem_do_rdata ? \u0.mem_wordsize : _0528_;
  assign _0530_ = _0349_ ? _0529_ : \u0.mem_wordsize ;
  wire [5:0] fangyuan50;
  assign fangyuan50 = { 2'h0, _0534_, _0530_ };
  wire [2:0] fangyuan51;
  assign fangyuan51 = { _0238_, _0461_, _0460_ };
  always @(\u0.mem_wordsize or fangyuan50 or fangyuan51) begin
    casez (fangyuan51)
      3'b??1 :
        _0531_ = fangyuan50 [1:0] ;
      3'b?1? :
        _0531_ = fangyuan50 [3:2] ;
      3'b1?? :
        _0531_ = fangyuan50 [5:4] ;
      default:
        _0531_ = \u0.mem_wordsize ;
    endcase
  end
  wire [2:0] fangyuan52;
  assign fangyuan52 = { \u0.instr_sb , \u0.instr_sh , \u0.instr_sw };
  always @(2'hx or fangyuan52) begin
    casez (fangyuan52)
      3'b??1 :
        _0532_ = 2'b00 ;
      3'b?1? :
        _0532_ = 2'b01 ;
      3'b1?? :
        _0532_ = 2'b10 ;
      default:
        _0532_ = 2'hx ;
    endcase
  end
  assign _0533_ = \u0.mem_do_wdata ? \u0.mem_wordsize : _0532_;
  assign _0534_ = _0349_ ? _0533_ : \u0.mem_wordsize ;
  assign _0109_ = resetn ? _0531_ : \u0.mem_wordsize ;
  wire [63:0] fangyuan53;
  assign fangyuan53 = { _0536_, \u0.cpuregs_rs1 };
  wire [1:0] fangyuan54;
  assign fangyuan54 = { _0463_, _0239_ };
  always @(\u0.reg_op2 or fangyuan53 or fangyuan54) begin
    casez (fangyuan54)
      2'b?1 :
        _0535_ = fangyuan53 [31:0] ;
      2'b1? :
        _0535_ = fangyuan53 [63:32] ;
      default:
        _0535_ = \u0.reg_op2 ;
    endcase
  end
  wire [63:0] fangyuan55;
  assign fangyuan55 = { \u0.decoded_imm , _0626_ };
  wire [1:0] fangyuan56;
  assign fangyuan56 = { \u0.is_lui_auipc_jal , _0511_ };
  always @(32'hxxxxxxxx or fangyuan55 or fangyuan56) begin
    casez (fangyuan56)
      2'b?1 :
        _0536_ = fangyuan55 [31:0] ;
      2'b1? :
        _0536_ = fangyuan55 [63:32] ;
      default:
        _0536_ = 32'hxxxxxxxx ;
    endcase
  end
  assign _0115_ = resetn ? _0535_ : \u0.reg_op2 ;
  assign _0537_ = \u0.mem_do_rdata ? \u0.reg_op1 : _0144_;
  assign _0538_ = _0349_ ? _0537_ : \u0.reg_op1 ;
  wire [127:0] fangyuan57;
  assign fangyuan57 = { _0546_, _0545_, _0541_, _0538_ };
  wire [3:0] fangyuan58;
  assign fangyuan58 = { _0463_, _0462_, _0461_, _0460_ };
  always @(\u0.reg_op1 or fangyuan57 or fangyuan58) begin
    casez (fangyuan58)
      4'b???1 :
        _0539_ = fangyuan57 [31:0] ;
      4'b??1? :
        _0539_ = fangyuan57 [63:32] ;
      4'b?1?? :
        _0539_ = fangyuan57 [95:64] ;
      4'b1??? :
        _0539_ = fangyuan57 [127:96] ;
      default:
        _0539_ = \u0.reg_op1 ;
    endcase
  end
  assign _0540_ = \u0.mem_do_wdata ? \u0.reg_op1 : _0144_;
  assign _0541_ = _0349_ ? _0540_ : \u0.reg_op1 ;
  wire [95:0] fangyuan59;
  assign fangyuan59 = { \u0.reg_op1 [30:0], 2'h0, \u0.reg_op1 [31:1], \u0.reg_op1 [31], \u0.reg_op1 [31:1] };
  wire [2:0] fangyuan60;
  assign fangyuan60 = { _0312_, _0347_, _0343_ };
  always @(32'hxxxxxxxx or fangyuan59 or fangyuan60) begin
    casez (fangyuan60)
      3'b??1 :
        _0542_ = fangyuan59 [31:0] ;
      3'b?1? :
        _0542_ = fangyuan59 [63:32] ;
      3'b1?? :
        _0542_ = fangyuan59 [95:64] ;
      default:
        _0542_ = 32'hxxxxxxxx ;
    endcase
  end
  wire [95:0] fangyuan61;
  assign fangyuan61 = { \u0.reg_op1 [27:0], 8'h00, \u0.reg_op1 [31:4], \u0.reg_op1 [31], \u0.reg_op1 [31], \u0.reg_op1 [31], \u0.reg_op1 [31], \u0.reg_op1 [31:4] };
  wire [2:0] fangyuan62;
  assign fangyuan62 = { _0312_, _0347_, _0343_ };
  always @(32'hxxxxxxxx or fangyuan61 or fangyuan62) begin
    casez (fangyuan62)
      3'b??1 :
        _0543_ = fangyuan61 [31:0] ;
      3'b?1? :
        _0543_ = fangyuan61 [63:32] ;
      3'b1?? :
        _0543_ = fangyuan61 [95:64] ;
      default:
        _0543_ = 32'hxxxxxxxx ;
    endcase
  end
  assign _0544_ = _0251_ ? _0543_ : _0542_;
  assign _0545_ = _0240_ ? \u0.reg_op1 : _0544_;
  wire [63:0] fangyuan63;
  assign fangyuan63 = { 16'hxxxx, 16'hxxxx, _0625_ };
  wire [1:0] fangyuan64;
  assign fangyuan64 = { \u0.is_rdcycle_rdcycleh_rdinstr_rdinstrh , \u0.is_lui_auipc_jal };
  always @(\u0.cpuregs_rs1 or fangyuan63 or fangyuan64) begin
    casez (fangyuan64)
      2'b?1 :
        _0546_ = fangyuan63 [31:0] ;
      2'b1? :
        _0546_ = fangyuan63 [63:32] ;
      default:
        _0546_ = \u0.cpuregs_rs1 ;
    endcase
  end
  assign _0114_ = resetn ? _0539_ : \u0.reg_op1 ;
  assign _0547_ = _0238_ ? _0129_[31:2] : \u0.reg_pc [31:2];
  assign _0117_[31:2] = resetn ? _0547_ : 30'h00000000;
  assign _0548_ = \u0.decoder_trigger ? _0141_ : \u0.count_instr ;
  assign _0549_ = _0238_ ? _0548_ : \u0.count_instr ;
  assign _0025_ = resetn ? _0549_ : 64'h0000000000000000;
  assign _0034_ = resetn ? \u0.eoi : 32'h00000000;
  assign _0112_ = resetn ? \u0.pcpi_valid : 1'h0;
  assign _0022_[31] = _0316_ ? 1'h1 : 1'h0;
  assign _0021_ = _0316_ ? \u0.cpuregs_wrdata : 32'hxxxxxxxx;
  assign _0020_ = _0316_ ? \u0.latched_rd : 5'hxx;
  assign _0124_ = _0155_ ? 1'h1 : 1'h0;
  wire [63:0] fangyuan65;
  assign fangyuan65 = { _0138_, _0623_ };
  wire [1:0] fangyuan66;
  assign fangyuan66 = { \u0.latched_branch , _0314_ };
  always @(32'hxxxxxxxx or fangyuan65 or fangyuan66) begin
    casez (fangyuan66)
      2'b?1 :
        _0123_ = fangyuan65 [31:0] ;
      2'b1? :
        _0123_ = fangyuan65 [63:32] ;
      default:
        _0123_ = 32'hxxxxxxxx ;
    endcase
  end
  assign \u0.cpuregs_wrdata = _0238_ ? _0123_ : 32'hxxxxxxxx;
  assign \u0.cpuregs_write = _0238_ ? _0124_ : 1'h0;
  wire [223:0] fangyuan67;
  assign fangyuan67 = { \u0.alu_add_sub , 31'h00000000, \u0.alu_out_0 , _0628_, _0456_, _0147_, \u0.alu_shl , \u0.alu_shr };
  wire [6:0] fangyuan68;
  assign fangyuan68 = { \u0.is_lui_auipc_jal_jalr_addi_add_sub , \u0.is_compare , _0344_, _0345_, _0346_, _0312_, _0313_ };
  always @(32'hxxxxxxxx or fangyuan67 or fangyuan68) begin
    casez (fangyuan68)
      7'b??????1 :
        \u0.alu_out = fangyuan67 [31:0] ;
      7'b?????1? :
        \u0.alu_out = fangyuan67 [63:32] ;
      7'b????1?? :
        \u0.alu_out = fangyuan67 [95:64] ;
      7'b???1??? :
        \u0.alu_out = fangyuan67 [127:96] ;
      7'b??1???? :
        \u0.alu_out = fangyuan67 [159:128] ;
      7'b?1????? :
        \u0.alu_out = fangyuan67 [191:160] ;
      7'b1?????? :
        \u0.alu_out = fangyuan67 [223:192] ;
      default:
        \u0.alu_out = 32'hxxxxxxxx ;
    endcase
  end
  wire [5:0] fangyuan69;
  assign fangyuan69 = { \u0.alu_eq , _0333_, _0334_, _0335_, \u0.alu_lts , \u0.alu_ltu };
  wire [5:0] fangyuan70;
  assign fangyuan70 = { \u0.instr_beq , \u0.instr_bne , \u0.instr_bge , \u0.instr_bgeu , \u0.is_slti_blt_slt , \u0.is_sltiu_bltu_sltu };
  always @(1'hx or fangyuan69 or fangyuan70) begin
    casez (fangyuan70)
      6'b?????1 :
        \u0.alu_out_0 = fangyuan69 [0:0] ;
      6'b????1? :
        \u0.alu_out_0 = fangyuan69 [1:1] ;
      6'b???1?? :
        \u0.alu_out_0 = fangyuan69 [2:2] ;
      6'b??1??? :
        \u0.alu_out_0 = fangyuan69 [3:3] ;
      6'b?1???? :
        \u0.alu_out_0 = fangyuan69 [4:4] ;
      6'b1????? :
        \u0.alu_out_0 = fangyuan69 [5:5] ;
      default:
        \u0.alu_out_0 = 1'hx ;
    endcase
  end
  assign _0030_[4] = _0317_ ? \u0.mem_rdata_latched [19] : \u0.decoded_rs1 [4];
  assign _0028_[10] = _0317_ ? \u0.mem_rdata_latched [30] : \u0.decoded_imm_j [10];
  assign _0028_[7] = _0317_ ? \u0.mem_rdata_latched [27] : \u0.decoded_imm_j [7];
  assign _0028_[6] = _0317_ ? \u0.mem_rdata_latched [26] : \u0.decoded_imm_j [6];
  assign _0028_[3:1] = _0317_ ? \u0.mem_rdata_latched [23:21] : \u0.decoded_imm_j [3:1];
  assign _0028_[5] = _0317_ ? \u0.mem_rdata_latched [25] : \u0.decoded_imm_j [5];
  assign _0028_[9:8] = _0317_ ? \u0.mem_rdata_latched [29:28] : \u0.decoded_imm_j [9:8];
  wire [11:0] fangyuan71;
  assign fangyuan71 = { \u0.mem_rdata_latched [31], \u0.mem_rdata_latched [31], \u0.mem_rdata_latched [31], \u0.mem_rdata_latched [31], \u0.mem_rdata_latched [31], \u0.mem_rdata_latched [31], \u0.mem_rdata_latched [31], \u0.mem_rdata_latched [31], \u0.mem_rdata_latched [31], \u0.mem_rdata_latched [31], \u0.mem_rdata_latched [31], \u0.mem_rdata_latched [31] };
  assign _0028_[31:20] = _0317_ ? fangyuan71 : \u0.decoded_imm_j [31:20];
  assign _0028_[4] = _0317_ ? \u0.mem_rdata_latched [24] : \u0.decoded_imm_j [4];
  assign _0028_[11] = _0317_ ? \u0.mem_rdata_latched [20] : \u0.decoded_imm_j [11];
  assign _0028_[0] = _0317_ ? 1'h0 : \u0.decoded_imm_j [0];
  assign _0030_[3:0] = _0317_ ? \u0.mem_rdata_latched [18:15] : \u0.decoded_rs1 [3:0];
  assign _0086_ = _0252_ ? 1'h0 : _0617_;
  assign _0079_ = _0317_ ? _0250_ : \u0.is_alu_reg_reg ;
  assign _0078_ = _0317_ ? _0249_ : \u0.is_alu_reg_imm ;
  assign _0550_ = _0317_ ? _0246_ : \u0.is_beq_bne_blt_bge_bltu_bgeu ;
  assign _0080_ = resetn ? _0550_ : 1'h0;
  assign _0087_ = _0317_ ? _0248_ : \u0.is_sb_sh_sw ;
  assign _0082_ = _0252_ ? _0342_ : \u0.is_jalr_addi_slti_sltiu_xori_ori_andi ;
  assign _0088_ = _0252_ ? _0306_ : \u0.is_slli_srli_srai ;
  assign _0083_ = _0317_ ? _0247_ : \u0.is_lb_lh_lw_lbu_lhu ;
  assign _0023_ = _0317_ ? 1'h0 : \u0.compressed_instr ;
  assign _0551_ = _0252_ ? 1'h0 : _0618_;
  assign _0081_ = resetn ? _0551_ : 1'h0;
  wire [159:0] fangyuan72;
  assign fangyuan72 = { \u0.decoded_imm_j , \u0.mem_rdata_q [31:12], 12'h000, \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31:20], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [7], \u0.mem_rdata_q [30:25], \u0.mem_rdata_q [11:8], 1'h0, \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31], \u0.mem_rdata_q [31:25], \u0.mem_rdata_q [11:7] };
  wire [4:0] fangyuan73;
  assign fangyuan73 = { \u0.instr_jal , _0554_, _0553_, \u0.is_beq_bne_blt_bge_bltu_bgeu , \u0.is_sb_sh_sw };
  always @(32'b0000000000000000000000000000000x or fangyuan72 or fangyuan73) begin
    casez (fangyuan73)
      5'b????1 :
        _0552_ = fangyuan72 [31:0] ;
      5'b???1? :
        _0552_ = fangyuan72 [63:32] ;
      5'b??1?? :
        _0552_ = fangyuan72 [95:64] ;
      5'b?1??? :
        _0552_ = fangyuan72 [127:96] ;
      5'b1???? :
        _0552_ = fangyuan72 [159:128] ;
      default:
        _0552_ = 32'b0000000000000000000000000000000x ;
    endcase
  end
  assign _0027_ = _0252_ ? _0552_ : \u0.decoded_imm ;
  assign _0031_ = _0317_ ? \u0.mem_rdata_latched [24:20] : \u0.decoded_rs2 ;
  assign _0028_[19:12] = _0317_ ? \u0.mem_rdata_latched [19:12] : \u0.decoded_imm_j [19:12];
  assign _0029_ = _0317_ ? \u0.mem_rdata_latched [11:7] : \u0.decoded_rd ;
  assign _0061_ = _0317_ ? 1'h0 : \u0.instr_retirq ;
  assign _0046_ = _0252_ ? _0305_ : \u0.instr_ecall_ebreak ;
  assign _0060_ = _0252_ ? _0303_ : \u0.instr_rdinstrh ;
  assign _0059_ = _0252_ ? _0302_ : \u0.instr_rdinstr ;
  assign _0058_ = _0252_ ? _0300_ : \u0.instr_rdcycleh ;
  assign _0057_ = _0252_ ? _0297_ : \u0.instr_rdcycle ;
  assign _0555_ = _0252_ ? _0295_ : \u0.instr_and ;
  assign _0037_ = resetn ? _0555_ : 1'h0;
  assign _0556_ = _0252_ ? _0293_ : \u0.instr_or ;
  assign _0055_ = resetn ? _0556_ : 1'h0;
  assign _0557_ = _0252_ ? _0291_ : \u0.instr_sra ;
  assign _0070_ = resetn ? _0557_ : 1'h0;
  assign _0558_ = _0252_ ? _0290_ : \u0.instr_srl ;
  assign _0072_ = resetn ? _0558_ : 1'h0;
  assign _0559_ = _0252_ ? _0288_ : \u0.instr_xor ;
  assign _0076_ = resetn ? _0559_ : 1'h0;
  assign _0560_ = _0252_ ? _0286_ : \u0.instr_sltu ;
  assign _0069_ = resetn ? _0560_ : 1'h0;
  assign _0561_ = _0252_ ? _0284_ : \u0.instr_slt ;
  assign _0066_ = resetn ? _0561_ : 1'h0;
  assign _0562_ = _0252_ ? _0282_ : \u0.instr_sll ;
  assign _0064_ = resetn ? _0562_ : 1'h0;
  assign _0563_ = _0252_ ? _0280_ : \u0.instr_sub ;
  assign _0074_ = resetn ? _0563_ : 1'h0;
  assign _0564_ = _0252_ ? _0279_ : \u0.instr_add ;
  assign _0035_ = resetn ? _0564_ : 1'h0;
  assign _0071_ = _0252_ ? _0277_ : \u0.instr_srai ;
  assign _0073_ = _0252_ ? _0276_ : \u0.instr_srli ;
  assign _0065_ = _0252_ ? _0274_ : \u0.instr_slli ;
  assign _0565_ = _0252_ ? _0272_ : \u0.instr_andi ;
  assign _0038_ = resetn ? _0565_ : 1'h0;
  assign _0566_ = _0252_ ? _0271_ : \u0.instr_ori ;
  assign _0056_ = resetn ? _0566_ : 1'h0;
  assign _0567_ = _0252_ ? _0270_ : \u0.instr_xori ;
  assign _0077_ = resetn ? _0567_ : 1'h0;
  assign _0568_ = _0252_ ? _0269_ : \u0.instr_sltiu ;
  assign _0068_ = resetn ? _0568_ : 1'h0;
  assign _0569_ = _0252_ ? _0268_ : \u0.instr_slti ;
  assign _0067_ = resetn ? _0569_ : 1'h0;
  assign _0570_ = _0252_ ? _0267_ : \u0.instr_addi ;
  assign _0036_ = resetn ? _0570_ : 1'h0;
  assign _0075_ = _0252_ ? _0266_ : \u0.instr_sw ;
  assign _0063_ = _0252_ ? _0265_ : \u0.instr_sh ;
  assign _0062_ = _0252_ ? _0264_ : \u0.instr_sb ;
  assign _0052_ = _0252_ ? _0263_ : \u0.instr_lhu ;
  assign _0050_ = _0252_ ? _0262_ : \u0.instr_lbu ;
  assign _0054_ = _0252_ ? _0261_ : \u0.instr_lw ;
  assign _0051_ = _0252_ ? _0260_ : \u0.instr_lh ;
  assign _0049_ = _0252_ ? _0259_ : \u0.instr_lb ;
  assign _0571_ = _0252_ ? _0258_ : \u0.instr_bgeu ;
  assign _0042_ = resetn ? _0571_ : 1'h0;
  assign _0572_ = _0252_ ? _0257_ : \u0.instr_bltu ;
  assign _0044_ = resetn ? _0572_ : 1'h0;
  assign _0573_ = _0252_ ? _0256_ : \u0.instr_bge ;
  assign _0041_ = resetn ? _0573_ : 1'h0;
  assign _0574_ = _0252_ ? _0255_ : \u0.instr_blt ;
  assign _0043_ = resetn ? _0574_ : 1'h0;
  assign _0575_ = _0252_ ? _0254_ : \u0.instr_bne ;
  assign _0045_ = resetn ? _0575_ : 1'h0;
  assign _0576_ = _0252_ ? _0253_ : \u0.instr_beq ;
  assign _0040_ = resetn ? _0576_ : 1'h0;
  assign _0048_ = _0317_ ? _0329_ : \u0.instr_jalr ;
  assign _0047_ = _0317_ ? _0243_ : \u0.instr_jal ;
  assign _0039_ = _0317_ ? _0242_ : \u0.instr_auipc ;
  assign _0053_ = _0317_ ? _0241_ : \u0.instr_lui ;
  assign _0111_ = _0252_ ? 32'hxxxxxxxx : \u0.pcpi_insn ;
  assign _0577_ = \u0.mem_do_rinst ? 2'h0 : \u0.mem_state ;
  wire [7:0] fangyuan74;
  assign fangyuan74 = { _0586_, _0583_, _0580_, _0577_ };
  wire [3:0] fangyuan75;
  assign fangyuan75 = { _0327_, _0584_, _0581_, _0579_ };
  always @(\u0.mem_state or fangyuan74 or fangyuan75) begin
    casez (fangyuan75)
      4'b???1 :
        _0578_ = fangyuan74 [1:0] ;
      4'b??1? :
        _0578_ = fangyuan74 [3:2] ;
      4'b?1?? :
        _0578_ = fangyuan74 [5:4] ;
      4'b1??? :
        _0578_ = fangyuan74 [7:6] ;
      default:
        _0578_ = \u0.mem_state ;
    endcase
  end
  assign _0579_ = \u0.mem_state == 2'h3;
  assign _0580_ = \u0.mem_xfer ? 2'h0 : \u0.mem_state ;
  assign _0581_ = \u0.mem_state == 2'h2;
  assign _0583_ = \u0.mem_xfer ? _0582_ : \u0.mem_state ;
  assign _0584_ = \u0.mem_state == 1'h1;
  assign _0585_ = _0357_ ? 2'h1 : \u0.mem_state ;
  assign _0586_ = \u0.mem_do_wdata ? 2'h2 : _0585_;
  assign _0587_ = resetn ? \u0.mem_state : 2'h0;
  assign _0106_ = _0358_ ? _0587_ : _0578_;
  assign _0588_ = _0360_ ? _0149_ : \u0.mem_wstrb ;
  assign _0589_ = _0357_ ? 4'h0 : _0588_;
  assign _0590_ = _0327_ ? _0589_ : _0588_;
  assign _0110_ = _0358_ ? \u0.mem_wstrb : _0590_;
  assign _0591_ = \u0.mem_la_write ? \u0.mem_la_wdata : \u0.mem_wdata ;
  assign _0108_ = _0358_ ? \u0.mem_wdata : _0591_;
  assign _0592_ = _0360_ ? \u0.mem_la_addr : \u0.mem_addr ;
  assign _0099_ = _0358_ ? \u0.mem_addr : _0592_;
  assign _0593_ = _0357_ ? _0356_ : \u0.mem_instr ;
  assign _0594_ = \u0.mem_do_wdata ? 1'h0 : _0593_;
  assign _0595_ = _0327_ ? _0594_ : \u0.mem_instr ;
  assign _0104_ = _0358_ ? \u0.mem_instr : _0595_;
  assign _0596_ = \u0.mem_xfer ? 1'h0 : \u0.mem_valid ;
  wire [1:0] fangyuan76;
  assign fangyuan76 = { _0599_, _0596_ };
  wire [1:0] fangyuan77;
  assign fangyuan77 = { _0327_, _0157_ };
  always @(\u0.mem_valid or fangyuan76 or fangyuan77) begin
    casez (fangyuan77)
      2'b?1 :
        _0597_ = fangyuan76 [0:0] ;
      2'b1? :
        _0597_ = fangyuan76 [1:1] ;
      default:
        _0597_ = \u0.mem_valid ;
    endcase
  end
  assign _0598_ = _0357_ ? 1'h1 : \u0.mem_valid ;
  assign _0599_ = \u0.mem_do_wdata ? 1'h1 : _0598_;
  assign _0600_ = _0359_ ? 1'h0 : \u0.mem_valid ;
  assign _0107_ = _0358_ ? _0600_ : _0597_;
  assign _0105_[31] = \u0.mem_xfer ? mem_rdata[31] : \u0.mem_rdata_q [31];
  assign _0105_[7] = \u0.mem_xfer ? mem_rdata[7] : \u0.mem_rdata_q [7];
  assign _0105_[24:20] = \u0.mem_xfer ? mem_rdata[24:20] : \u0.mem_rdata_q [24:20];
  assign _0105_[19:15] = \u0.mem_xfer ? mem_rdata[19:15] : \u0.mem_rdata_q [19:15];
  assign _0105_[6:0] = \u0.mem_xfer ? mem_rdata[6:0] : \u0.mem_rdata_q [6:0];
  assign _0105_[14:12] = \u0.mem_xfer ? mem_rdata[14:12] : \u0.mem_rdata_q [14:12];
  assign _0105_[11:8] = \u0.mem_xfer ? mem_rdata[11:8] : \u0.mem_rdata_q [11:8];
  assign _0105_[30:25] = \u0.mem_xfer ? mem_rdata[30:25] : \u0.mem_rdata_q [30:25];
  wire [127:0] fangyuan78;
  assign fangyuan78 = { 24'h000000, mem_rdata[7:0], 24'h000000, mem_rdata[15:8], 24'h000000, mem_rdata[23:16], 24'h000000, mem_rdata[31:24] };
  wire [3:0] fangyuan79;
  assign fangyuan79 = { _0604_, _0603_, _0602_, _0601_ };
  always @(32'hxxxxxxxx or fangyuan78 or fangyuan79) begin
    casez (fangyuan79)
      4'b???1 :
        _0130_ = fangyuan78 [31:0] ;
      4'b??1? :
        _0130_ = fangyuan78 [63:32] ;
      4'b?1?? :
        _0130_ = fangyuan78 [95:64] ;
      4'b1??? :
        _0130_ = fangyuan78 [127:96] ;
      default:
        _0130_ = 32'hxxxxxxxx ;
    endcase
  end
  assign _0601_ = \u0.reg_op1 [1:0] == 2'h3;
  assign _0602_ = \u0.reg_op1 [1:0] == 2'h2;
  assign _0603_ = \u0.reg_op1 [1:0] == 1'h1;
  assign _0604_ = ! \u0.reg_op1 [1:0];
  assign _0605_ = \u0.mem_wordsize == 2'h2;
  wire [63:0] fangyuan80;
  assign fangyuan80 = { 16'h0000, mem_rdata[15:0], 16'h0000, mem_rdata[31:16] };
  wire [1:0] fangyuan81;
  assign fangyuan81 = { _0606_, \u0.reg_op1 [1] };
  always @(32'hxxxxxxxx or fangyuan80 or fangyuan81) begin
    casez (fangyuan81)
      2'b?1 :
        _0125_ = fangyuan80 [31:0] ;
      2'b1? :
        _0125_ = fangyuan80 [63:32] ;
      default:
        _0125_ = 32'hxxxxxxxx ;
    endcase
  end
  assign _0606_ = ~ \u0.reg_op1 [1];
  assign _0607_ = \u0.mem_wordsize == 1'h1;
  wire [95:0] fangyuan82;
  assign fangyuan82 = { mem_rdata, _0125_, _0130_ };
  wire [2:0] fangyuan83;
  assign fangyuan83 = { _0608_, _0607_, _0605_ };
  always @(32'hxxxxxxxx or fangyuan82 or fangyuan83) begin
    casez (fangyuan83)
      3'b??1 :
        \u0.mem_rdata_word = fangyuan82 [31:0] ;
      3'b?1? :
        \u0.mem_rdata_word = fangyuan82 [63:32] ;
      3'b1?? :
        \u0.mem_rdata_word = fangyuan82 [95:64] ;
      default:
        \u0.mem_rdata_word = 32'hxxxxxxxx ;
    endcase
  end
  assign _0608_ = ! \u0.mem_wordsize ;
  wire [11:0] fangyuan84;
  assign fangyuan84 = { 4'hf, _0627_, _0619_ };
  wire [2:0] fangyuan85;
  assign fangyuan85 = { _0608_, _0607_, _0605_ };
  always @(4'hx or fangyuan84 or fangyuan85) begin
    casez (fangyuan85)
      3'b??1 :
        \u0.mem_la_wstrb = fangyuan84 [3:0] ;
      3'b?1? :
        \u0.mem_la_wstrb = fangyuan84 [7:4] ;
      3'b1?? :
        \u0.mem_la_wstrb = fangyuan84 [11:8] ;
      default:
        \u0.mem_la_wstrb = 4'hx ;
    endcase
  end
  wire [95:0] fangyuan86;
  assign fangyuan86 = { \u0.reg_op2 , \u0.reg_op2 [15:0], \u0.reg_op2 [15:0], \u0.reg_op2 [7:0], \u0.reg_op2 [7:0], \u0.reg_op2 [7:0], \u0.reg_op2 [7:0] };
  wire [2:0] fangyuan87;
  assign fangyuan87 = { _0608_, _0607_, _0605_ };
  always @(32'hxxxxxxxx or fangyuan86 or fangyuan87) begin
    casez (fangyuan87)
      3'b??1 :
        \u0.mem_la_wdata = fangyuan86 [31:0] ;
      3'b?1? :
        \u0.mem_la_wdata = fangyuan86 [63:32] ;
      3'b1?? :
        \u0.mem_la_wdata = fangyuan86 [95:64] ;
      default:
        \u0.mem_la_wdata = 32'hxxxxxxxx ;
    endcase
  end
  assign _0609_ = \u0.instr_jal ? _0142_[31:2] : _0140_[31:2];
  assign _0610_ = \u0.decoder_trigger ? _0609_ : _0129_[31:2];
  assign _0611_ = _0238_ ? _0610_ : \u0.reg_next_pc [31:2];
  assign _0113_[31:2] = resetn ? _0611_ : 30'h00000000;
  assign _0131_ = _0349_ ? _0134_ : 1'h0;
  assign _0133_ = _0349_ ? _0135_ : 1'h0;
  assign _0132_ = \u0.is_beq_bne_blt_bge_bltu_bgeu ? _0136_ : 1'h0;
  assign _0135_ = \u0.mem_do_wdata ? 1'h0 : 1'h1;
  assign _0134_ = \u0.mem_do_rdata ? 1'h0 : 1'h1;
  assign _0612_ = & \u0.mem_state ;
  assign _0613_ = | \u0.decoded_rs ;
  wire [2:0] fangyuan88;
  assign fangyuan88 = { _0307_, _0308_, _0309_ };
  assign _0614_ = | fangyuan88;
  wire [5:0] fangyuan89;
  assign fangyuan89 = { _0228_, _0227_, _0226_, _0225_, _0223_, _0221_ };
  assign _0615_ = | fangyuan89;
  wire [1:0] fangyuan90;
  assign fangyuan90 = { \u0.instr_auipc , \u0.instr_lui };
  assign _0554_ = | fangyuan90;
  wire [2:0] fangyuan91;
  assign fangyuan91 = { \u0.is_alu_reg_imm , \u0.is_lb_lh_lw_lbu_lhu , \u0.instr_jalr };
  assign _0553_ = | fangyuan91;
  assign _0616_ = | \u0.mem_state ;
  wire [3:0] fangyuan92;
  assign fangyuan92 = { \u0.instr_rdinstrh , \u0.instr_rdinstr , \u0.instr_rdcycleh , \u0.instr_rdcycle };
  assign \u0.is_rdcycle_rdcycleh_rdinstr_rdinstrh = | fangyuan92;
  wire [2:0] fangyuan93;
  assign fangyuan93 = { \u0.instr_jal , \u0.instr_auipc , \u0.instr_lui };
  assign _0085_ = | fangyuan93;
  wire [6:0] fangyuan94;
  assign fangyuan94 = { \u0.instr_sub , \u0.instr_add , \u0.instr_addi , \u0.instr_jalr , \u0.instr_jal , \u0.instr_auipc , \u0.instr_lui };
  assign _0617_ = | fangyuan94;
  wire [2:0] fangyuan95;
  assign fangyuan95 = { \u0.instr_slt , \u0.instr_slti , \u0.instr_blt };
  assign _0089_ = | fangyuan95;
  wire [2:0] fangyuan96;
  assign fangyuan96 = { \u0.instr_sltu , \u0.instr_sltiu , \u0.instr_bltu };
  assign _0090_ = | fangyuan96;
  wire [2:0] fangyuan97;
  assign fangyuan97 = { \u0.instr_lhu , \u0.instr_lbu , \u0.instr_lw };
  assign _0084_ = | fangyuan97;
  wire [4:0] fangyuan98;
  assign fangyuan98 = { \u0.is_beq_bne_blt_bge_bltu_bgeu , \u0.instr_sltu , \u0.instr_slt , \u0.instr_sltiu , \u0.instr_slti };
  assign _0618_ = | fangyuan98;
  assign \u0.alu_shl = \u0.reg_op1 << \u0.reg_op2 [4:0];
  assign _0619_ = 1'h1 << \u0.reg_op1 [1:0];
  wire [32:0] fangyuan99;
  assign fangyuan99 = { _0622_, \u0.reg_op1 };
  assign \u0.alu_shr = $signed(fangyuan99) >>> \u0.reg_op2 [4:0];
  assign _0620_ = \u0.reg_op1 - \u0.reg_op2 ;
  assign _0218_[4:0] = \u0.reg_sh - 3'h4;
  assign _0621_[4:0] = \u0.reg_sh - 1'h1;
  assign \u0.next_pc = _0311_ ? _0146_ : \u0.reg_next_pc ;
  assign \u0.alu_add_sub = \u0.instr_sub ? _0620_ : _0137_;
  assign _0622_ = _0343_ ? \u0.reg_op1 [31] : 1'h0;
  assign _0219_[2:0] = \u0.latched_compr ? 3'h2 : 3'h4;
  assign _0623_ = \u0.latched_stalu ? \u0.alu_out_q : \u0.reg_out ;
  assign \u0.decoded_rs = _0239_ ? \u0.decoded_rs2 : \u0.decoded_rs1 ;
  assign \u0.cpuregs_rs1 = _0613_ ? _0455_ : 32'h00000000;
  assign _0024_ = resetn ? _0139_ : 64'h0000000000000000;
  assign _0624_ = \u0.latched_store ? _0148_ : \u0.reg_next_pc ;
  assign _0220_[2:0] = \u0.compressed_instr ? 3'h2 : 3'h4;
  assign _0625_ = \u0.instr_lui ? 32'h00000000 : \u0.reg_pc ;
  wire [31:0] fangyuan100;
  assign fangyuan100 = { 27'h0000000, \u0.decoded_rs2 };
  assign _0626_ = \u0.is_slli_srli_srai ? fangyuan100 : \u0.decoded_imm ;
  wire [31:0] fangyuan101;
  assign fangyuan101 = { _0145_, 2'h0 };
  wire [31:0] fangyuan102;
  assign fangyuan102 = { \u0.reg_op1 [31:2], 2'h0 };
  assign \u0.mem_la_addr = _0356_ ? fangyuan101 : fangyuan102;
  assign \u0.mem_rdata_latched = \u0.mem_xfer ? mem_rdata : \u0.mem_rdata_q ;
  assign _0627_ = \u0.reg_op1 [1] ? 4'hc : 4'h3;
  assign _0582_ = _0353_ ? 2'h0 : 2'h3;
  assign _0628_ = \u0.reg_op1 ^ \u0.reg_op2 ;
  assign \fifo_addr.rst = ! resetn;
  assign \u0.pcpi_wr = pcpi_wr;
  assign \u0.pcpi_wait = pcpi_wait;
  assign \u0.pcpi_rs2 = \u0.reg_op2 ;
  assign \u0.pcpi_rs1 = \u0.reg_op1 ;
  assign \u0.pcpi_ready = pcpi_ready;
  assign \u0.pcpi_rd = pcpi_rd;
  assign \u0.pcpi_mul_wr = 1'h0;
  assign \u0.pcpi_mul_wait = 1'h0;
  assign \u0.pcpi_mul_ready = 1'h0;
  assign \u0.pcpi_mul_rd = 32'hxxxxxxxx;
  assign \u0.pcpi_int_wait = 1'h0;
  assign \u0.pcpi_int_ready = 1'h0;
  assign \u0.pcpi_div_wr = 1'h0;
  assign \u0.pcpi_div_wait = 1'h0;
  assign \u0.pcpi_div_ready = 1'h0;
  assign \u0.pcpi_div_rd = 32'hxxxxxxxx;
  assign \u0.mem_ready = mem_ready;
  assign \u0.mem_rdata_latched_noshuffle = \u0.mem_rdata_latched ;
  assign \u0.mem_rdata = mem_rdata;
  assign \u0.mem_la_use_prefetched_high_word = 1'h0;
  assign \u0.mem_la_firstword_xfer = 1'h0;
  assign \u0.mem_la_firstword = 1'h0;
  assign \u0.irq = irq;
  assign \u0.instr_trap = 1'h0;
  assign \u0.do_waitirq = 1'h0;
  assign \u0.dbg_mem_wstrb = \u0.mem_wstrb ;
  assign \u0.dbg_mem_wdata = \u0.mem_wdata ;
  assign \u0.dbg_mem_valid = \u0.mem_valid ;
  assign \u0.dbg_mem_ready = mem_ready;
  assign \u0.dbg_mem_rdata = mem_rdata;
  assign \u0.dbg_mem_instr = \u0.mem_instr ;
  assign \u0.dbg_mem_addr = \u0.mem_addr ;
  assign \u0.cpuregs_rs2 = \u0.cpuregs_rs1 ;
  assign \u0.clk = clk;
  assign _0220_[31:3] = 29'h00000000;
  assign _0219_[31:3] = 29'h00000000;
  assign _0217_[7] = 1'h0;
  assign _0216_[7:4] = 4'h0;
  assign _0117_[1:0] = 2'h0;
  assign _0113_[1:0] = 2'h0;
  assign _0022_[30:0] = { _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31], _0022_[31] };
  assign \u0.resetn = resetn;
  assign \u0.trace_data [35:1] = { \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0] };
  assign \u0.trace_valid = 1'h0;
  assign \fifo_wstrb.clk = clk;
  assign \fifo_wstrb.in = \u0.mem_wstrb ;
  assign \fifo_wstrb.out = \fifo_wstrb.r1 ;
  assign \fifo_wstrb.rst = \fifo_addr.rst ;
  assign \fifo_wstrb.wr = \u0.mem_valid ;
  assign \fifo_wdata.clk = clk;
  assign \fifo_wdata.in = \u0.mem_wdata ;
  assign \fifo_wdata.out = \fifo_wdata.r1 ;
  assign \fifo_wdata.rst = \fifo_addr.rst ;
  assign \fifo_wdata.wr = \u0.mem_valid ;
  assign \fifo_valid.clk = clk;
  assign \fifo_valid.in = \u0.mem_valid ;
  assign \fifo_valid.out = \fifo_valid.r1 ;
  assign \fifo_valid.rst = \fifo_addr.rst ;
  assign \fifo_valid.wr = \u0.mem_valid ;
  assign \fifo_instr.clk = clk;
  assign \fifo_instr.in = \u0.mem_instr ;
  assign \fifo_instr.out = \fifo_instr.r1 ;
  assign \fifo_instr.rst = \fifo_addr.rst ;
  assign \fifo_instr.wr = \u0.mem_valid ;
  assign \fifo_addr.clk = clk;
  assign \fifo_addr.in = \u0.mem_addr ;
  assign \fifo_addr.out = \fifo_addr.r1 ;
  assign \fifo_addr.wr = \u0.mem_valid ;
  assign eoi = \u0.eoi ;
  assign mem_addr = \u0.mem_addr ;
  assign mem_addr_fifo = \fifo_addr.r1 ;
  assign mem_instr = \u0.mem_instr ;
  assign mem_instr_fifo = \fifo_instr.r1 ;
  assign mem_la_addr = \u0.mem_la_addr ;
  assign mem_la_read = \u0.mem_la_read ;
  assign mem_la_wdata = \u0.mem_la_wdata ;
  assign mem_la_write = \u0.mem_la_write ;
  assign mem_la_wstrb = \u0.mem_la_wstrb ;
  assign mem_valid = \u0.mem_valid ;
  assign mem_valid_fifo = \fifo_valid.r1 ;
  assign mem_wdata = \u0.mem_wdata ;
  assign mem_wdata_fifo = \fifo_wdata.r1 ;
  assign mem_wstrb = \u0.mem_wstrb ;
  assign mem_wstrb_fifo = \fifo_wstrb.r1 ;
  assign pcpi_insn = \u0.pcpi_insn ;
  assign pcpi_rs1 = \u0.reg_op1 ;
  assign pcpi_rs2 = \u0.reg_op2 ;
  assign pcpi_valid = \u0.pcpi_valid ;
  assign trace_data = { \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0], \u0.trace_data [0] };
  assign trace_valid = 1'h0;
  assign trap = \u0.trap ;
endmodule
