/* Generated by Yosys 0.8 (git sha1 UNKNOWN, clang 9.0.0 -fPIC -Os) */

(* src = "word_adder_module.v:1" *)
module adder(clk, rst, enable0, word0, result0);
  (* src = "word_adder_module.v:16" *)
  wire [4:0] _00_;
  (* src = "word_adder_module.v:16" *)
  wire [8:0] _01_;
  (* src = "word_adder_module.v:14" *)
  wire [8:0] _02_;
  (* src = "word_adder_module.v:13" *)
  wire [31:0] _03_;
  (* src = "word_adder_module.v:14" *)
  wire _04_;
  (* src = "word_adder_module.v:13" *)
  wire [31:0] _05_;
  (* src = "word_adder_module.v:2" *)
  input clk;
  (* src = "word_adder_module.v:8" *)
  reg [4:0] counter;
  (* src = "word_adder_module.v:12" *)
  wire [4:0] counter_next;
  (* src = "word_adder_module.v:4" *)
  input enable0;
  (* src = "word_adder_module.v:6" *)
  output [8:0] result0;
  (* src = "word_adder_module.v:3" *)
  input rst;
  (* src = "word_adder_module.v:11" *)
  wire running;
  (* src = "word_adder_module.v:5" *)
  input [8:0] word0;
  (* src = "word_adder_module.v:9" *)
  reg [8:0] word_sum;
  (* src = "word_adder_module.v:14" *)
  wire [8:0] word_sum_next;
  assign _02_ = word_sum + (* src = "word_adder_module.v:14" *) _04_;
  assign running = counter > (* src = "word_adder_module.v:11" *) 1'h0;
  always @(posedge clk)
      counter <= _00_;
  always @(posedge clk)
      word_sum <= _01_;
  assign _01_ = rst ? (* src = "word_adder_module.v:17" *) 9'h000 : word_sum_next;
  assign _00_ = rst ? (* src = "word_adder_module.v:17" *) 5'h00 : counter_next;
  assign _04_ = word0[$signed(_05_) +: 1];
  assign _05_ = counter - (* src = "word_adder_module.v:13" *) 1'h1;
  assign _03_[4:0] = running ? (* src = "word_adder_module.v:13" *) _05_[4:0] : 5'h00;
  assign counter_next = enable0 ? (* src = "word_adder_module.v:13" *) 5'h08 : _03_[4:0];
  assign word_sum_next = running ? (* src = "word_adder_module.v:14" *) _02_ : word_sum;
  assign result0 = word_sum;
endmodule

(* top =  1  *)
(* src = "word_adder_module.v:30" *)
module word_adder(clk, rst, func, inWord, result);
  (* src = "word_adder_module.v:31" *)
  wire [8:0] _0_;
  (* src = "word_adder_module.v:32" *)
  wire _1_;
  (* src = "word_adder_module.v:41" *)
  wire [8:0] _2_;
  (* src = "word_adder_module.v:33" *)
  input clk;
  (* src = "word_adder_module.v:34" *)
  wire enable;
  (* src = "word_adder_module.v:35" *)
  input [1:0] func;
  (* src = "word_adder_module.v:36" *)
  input [8:0] inWord;
  (* src = "word_adder_module.v:37" *)
  output [8:0] result;
  (* src = "word_adder_module.v:38" *)
  input rst;
  (* src = "word_adder_module.v:39" *)
  reg [8:0] word;
  (* src = "word_adder_module.v:40" *)
  wire [8:0] word_next;
  assign _1_ = func == (* src = "word_adder_module.v:42" *) 1'h1;
  assign enable = func == (* src = "word_adder_module.v:43" *) 2'h2;
  always @(posedge clk)
      word <= _0_;
  assign _0_ = rst ? (* src = "word_adder_module.v:46" *) 9'h000 : word_next;
  assign word_next = _1_ ? (* src = "word_adder_module.v:47" *) inWord : word;
  (* src = "word_adder_module.v:48" *)
  adder u0 (
    .clk(clk),
    .enable0(enable),
    .result0(_2_),
    .rst(rst),
    .word0(word)
  );
  (* src = "word_adder_module.v:56" *)
  adder u1 (
    .clk(clk),
    .enable0(enable),
    .result0(result),
    .rst(rst),
    .word0(_2_)
  );
endmodule

