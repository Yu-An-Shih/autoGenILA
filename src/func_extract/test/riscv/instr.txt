// add
#1:add
(1)
//mem_rdata = 7'b0+5'bx+5'bx+3'h0+5'bx+5'hc+2'h3
mem_rdata = 7'b0+5'h2+5'h3+3'h0+5'b1+5'hc+2'h3
resetn = 1
mem_ready = 1
pcpi_wr = 0
pcpi_rd = 0
pcpi_wait = 0
pcpi_ready = 0
irq = 0
(2)
//mem_rdata = 7'b0+5'bx+5'bx+3'h0+5'bx+5'hc+2'h3
mem_rdata = 7'b0+5'h2+5'h3+3'h0+5'b1+5'hc+2'h3
resetn = 1
mem_ready = 1
pcpi_wr = 0
pcpi_rd = 0
pcpi_wait = 0
pcpi_ready = 0
irq = 0
(3)
//mem_rdata = 7'b0+5'bx+5'bx+3'h0+5'bx+5'hc+2'h3
mem_rdata = 7'b0+5'h2+5'h3+3'h0+5'b1+5'hc+2'h3
resetn = 1
mem_ready = 1
pcpi_wr = 0
pcpi_rd = 0
pcpi_wait = 0
pcpi_ready = 0
irq = 0

#delay:7

W:
//\cpuregs[1](skip) 8
// this delay must be 7 because add instruction takes 4 cycles.
// if delay is 8, then the reg_next_pc is 9 cycles later, and 
// it will be added by 8 instead of 4
reg_next_pc(skip) 7



// jal
#10:jal
(1)
mem_rdata = 20'bx+5'bx+5'h1b+2'h3
//mem_rdata = 20'bx+5'b1+5'h1b+2'h3
resetn = 1
mem_ready = 1
pcpi_wr = 0
pcpi_rd = 0
pcpi_wait = 0
pcpi_ready = 0
irq = 0
(2)
mem_rdata = 20'bx+5'bx+5'h1b+2'h3
resetn = 1
mem_ready = 1
pcpi_wr = 0
pcpi_rd = 0
pcpi_wait = 0
pcpi_ready = 0
irq = 0
(3)
mem_rdata = 20'bx+5'bx+5'h1b+2'h3
resetn = 1
mem_ready = 1
pcpi_wr = 0
pcpi_rd = 0
pcpi_wait = 0
pcpi_ready = 0
irq = 0

#delay: 5

W:
\cpuregs[10](skip) 5
reg_next_pc(skip) 5
mem_addr(skip) 5



// beq
#2:beq
(1)
// for brevity
mem_rdata = 7'hx+5'hx+5'hx+3'h0+5'hx+5'h18+2'h3
//mem_rdata = 7'hx+5'h1+5'h2+3'h0+5'hx+5'h18+2'h3
resetn = 1
mem_ready = 1
pcpi_wr = 0
pcpi_rd = 0
pcpi_wait = 0
pcpi_ready = 0
irq = 0
(2)
mem_rdata = 7'hx+5'hx+5'hx+3'h0+5'hx+5'h18+2'h3
resetn = 1
mem_ready = 1
pcpi_wr = 0
pcpi_rd = 0
pcpi_wait = 0
pcpi_ready = 0
irq = 0
(3)
mem_rdata = 7'hx+5'hx+5'hx+3'h0+5'hx+5'h18+2'h3
resetn = 1
mem_ready = 1
pcpi_wr = 0
pcpi_rd = 0
pcpi_wait = 0
pcpi_ready = 0
irq = 0

#delay:8

W:
reg_next_pc(skip) 8 



//// jal
//#3:jal
//(1)
//mem_rdata = 20'bx+5'bx+5'h1b+2'h3
////mem_rdata = 20'bx+5'b1+5'h1b+2'h3
//resetn = 1
//mem_ready = 1
//pcpi_wr = 0
//pcpi_rd = 0
//pcpi_wait = 0
//pcpi_ready = 0
//irq = 0
//(2)
//mem_rdata = 20'bx+5'bx+5'h1b+2'h3
//resetn = 1
//mem_ready = 1
//pcpi_wr = 0
//pcpi_rd = 0
//pcpi_wait = 0
//pcpi_ready = 0
//irq = 0
//(3)
//mem_rdata = 20'bx+5'bx+5'h1b+2'h3
//resetn = 1
//mem_ready = 1
//pcpi_wr = 0
//pcpi_rd = 0
//pcpi_wait = 0
//pcpi_ready = 0
//irq = 0
//
//#delay: 8
//
//W:
//reg_next_pc(skip) 8 
//reg_next_pc(skip) 4 


// sw
#12:sw
(1)
mem_rdata = 7'hx+5'bx+5'bx+3'h2+5'bx+5'h8+2'b11
resetn = 1
mem_ready = 1
pcpi_wr = 0
pcpi_rd = 0
pcpi_wait = 0
pcpi_ready = 0
irq = 0
(2)
mem_rdata = 7'hx+5'bx+5'bx+3'h2+5'bx+5'h8+2'b11
resetn = 1
mem_ready = 1
pcpi_wr = 0
pcpi_rd = 0
pcpi_wait = 0
pcpi_ready = 0
irq = 0
(3)
mem_rdata = 7'hx+5'bx+5'bx+3'h2+5'bx+5'h8+2'b11
resetn = 1
mem_ready = 1
pcpi_wr = 0
pcpi_rd = 0
pcpi_wait = 0
pcpi_ready = 0
irq = 0

#delay:8
// insert additional NOPs
#extraDelay:3

W:
mem_wdata(skip) 8


// universal information

$TOP:
picorv32

$INVAR:
pcpi_valid
decoder_pseudo_trigger
decoder_pseudo_trigger_q
decoder_trigger
eoi
latched_is_lh
latched_stalu
trap
compressed_instr
cpu_state
\cpuregs[0]
decoder_trigger_q
instr_add
instr_and
instr_beq
instr_bgeu
instr_blt
instr_bne
instr_ecall_ebreak
instr_jal
instr_jalr
instr_lb
instr_lbu
instr_lhu
instr_lw
instr_rdcycle
instr_rdcycleh
instr_rdinstr
instr_rdinstrh
instr_retirq
instr_sh
instr_sll
instr_slt
instr_sltu
instr_sra
instr_srl
instr_sub
instr_xor
is_alu_reg_reg
is_beq_bne_blt_bge_bltu_bgeu
is_lb_lh_lw_lbu_lhu
is_lbu_lhu_lw
is_sb_sh_sw
latched_branch
latched_compr
latched_is_lu
latched_store
mem_do_rdata
mem_do_rinst
mem_do_wdata
mem_instr
mem_state
mem_valid
mem_wstrb
mem_do_prefetch
mem_wordsize
instr_bge
instr_bltu
instr_lh
instr_or
instr_sb

$NOP:
mem_rdata = 25'b0+5'b00100+2'b11
resetn = 1
mem_ready = 1
pcpi_wr = 0
pcpi_rd = 0
pcpi_wait = 0
pcpi_ready = 0
irq = 0

#CLK:clk
#RST:resetn

//$issue:
//mem_valid = 1
//mem_instr = 1
//
//$display:
//cpu_state = 8'h40
//decoder_trigger = 1
