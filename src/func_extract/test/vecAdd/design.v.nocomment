module vecAdd(clk, rst, func, in, out);
  wire [3:0] _00_;
  wire _01_;
  wire [31:0] _02_;
  wire [31:0] _03_;
  wire [31:0] _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire running_nxt;
  wire [3:0] len_nxt;
  wire [3:0] len_nxt2;
  wire [3:0] out_nxt;
  wire [3:0] out_nxt2;
  input clk;
  input [1:0] func;
  input [3:0] in;
  reg [3:0] len;
  output [3:0] out;
  reg [3:0] out;
  input rst;
  reg running;
  assign _00_ = in + 2'b10;
  wire [1:0] fangyuan0;
  assign fangyuan0 = { _06_, running };
  assign _01_ = | fangyuan0;
  assign running_nxt = rst ? 1'b0 : _02_[0];
  assign len_nxt = rst ? 4'b0000 : len_nxt2;
  assign len_nxt2 = _01_ ? _04_[3:0] : len;
  assign out_nxt = rst ? 4'b0000 : out_nxt2;
  assign out_nxt2 = running ? _00_ : out;
  always @(posedge clk)
    running <= running_nxt;
  always @(posedge clk)
    len <= len_nxt;
  always @(posedge clk)
    out <= out_nxt;
  assign _05_ = func == 2'b10;
  assign _06_ = func == 1'b1;
  assign _07_ = len > 1'b1;
  assign _02_[0] = _08_ && _07_;
  assign _08_ = _05_ || running;
  assign _03_[3:0] = len - 1'b1;
  assign _04_[3:0] = _06_ ? in : _03_[3:0];
  assign _02_[31:1] = 31'b0000000000000000000000000000000;
  assign _03_[30:4] = { _03_[31], _03_[31], _03_[31], _03_[31], _03_[31], _03_[31], _03_[31], _03_[31], _03_[31], _03_[31], _03_[31], _03_[31], _03_[31], _03_[31], _03_[31], _03_[31], _03_[31], _03_[31], _03_[31], _03_[31], _03_[31], _03_[31], _03_[31], _03_[31], _03_[31], _03_[31], _03_[31] };
  assign _04_[31:4] = 28'bxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
endmodule
