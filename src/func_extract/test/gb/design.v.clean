module \$paramod$103d63d62f9584218bc6cc9bfaa9c73176e8ef51\hls_target_mac_muladd_13ns_8ns_22ns_23_1 (din0, din1, din2, dout);
  input [12:0] din0;
  input [7:0] din1;
  input [21:0] din2;
  output [22:0] dout;
  hls_target_mac_muladd_13ns_8ns_22ns_23_1_DSP48_8 hls_target_mac_muladd_13ns_8ns_22ns_23_1_DSP48_8_U (
    .dout(dout),
    .in0(din0),
    .in1(din1),
    .in2(din2)
  );
endmodule
module \$paramod$1484826b42b67c3cc1706012bb51191a6713c3e2\hls_target_mac_muladd_13ns_8ns_21ns_22_1 (din0, din1, din2, dout);
  input [12:0] din0;
  input [7:0] din1;
  input [20:0] din2;
  output [21:0] dout;
  hls_target_mac_muladd_13ns_8ns_21ns_22_1_DSP48_5 hls_target_mac_muladd_13ns_8ns_21ns_22_1_DSP48_5_U (
    .dout(dout),
    .in0(din0),
    .in1(din1),
    .in2(din2)
  );
endmodule
module \$paramod$2198655e572d5804e74405a8a301970797977575\hls_target_am_addmul_8ns_8ns_7ns_15_1 (din0, din1, din2, dout);
  input [7:0] din0;
  input [7:0] din1;
  input [6:0] din2;
  output [14:0] dout;
  hls_target_am_addmul_8ns_8ns_7ns_15_1_DSP48_10 hls_target_am_addmul_8ns_8ns_7ns_15_1_DSP48_10_U (
    .dout(dout),
    .in0(din0),
    .in1(din1),
    .in2(din2)
  );
endmodule
module \$paramod$27e5966cb62baf34f57646996b682952cf5a5c67\hls_target_mac_muladd_12ns_8ns_20ns_21_1 (din0, din1, din2, dout);
  input [11:0] din0;
  input [7:0] din1;
  input [19:0] din2;
  output [20:0] dout;
  hls_target_mac_muladd_12ns_8ns_20ns_21_1_DSP48_2 hls_target_mac_muladd_12ns_8ns_20ns_21_1_DSP48_2_U (
    .dout(dout),
    .in0(din0),
    .in1(din1),
    .in2(din2)
  );
endmodule
module \$paramod$355e994556db88dc7e68bef3ec3aee4db6a027ca\hls_target_mac_muladd_12ns_8ns_21ns_21_1 (din0, din1, din2, dout);
  input [11:0] din0;
  input [7:0] din1;
  input [20:0] din2;
  output [20:0] dout;
  hls_target_mac_muladd_12ns_8ns_21ns_21_1_DSP48_7 hls_target_mac_muladd_12ns_8ns_21ns_21_1_DSP48_7_U (
    .dout(dout),
    .in0(din0),
    .in1(din1),
    .in2(din2)
  );
endmodule
module \$paramod$5513bb70403d25cd12b58ee992f86db3ee5f73ce\hls_target_mux_8to1_sel3_8_1 (din1, din2, din3, din4, din5, din6, din7, din8, din9, dout);
  input [7:0] din1;
  input [7:0] din2;
  input [7:0] din3;
  input [7:0] din4;
  input [7:0] din5;
  input [7:0] din6;
  input [7:0] din7;
  input [7:0] din8;
  input [2:0] din9;
  output [7:0] dout;
  wire [7:0] mux_1_0;
  wire [7:0] mux_1_1;
  wire [7:0] mux_1_2;
  wire [7:0] mux_1_3;
  wire [7:0] mux_2_0;
  wire [7:0] mux_2_1;
  wire [7:0] mux_3_0;
  wire [2:0] sel;
  assign mux_1_0 = din9[0] ? din2 : din1;
  assign mux_1_1 = din9[0] ? din4 : din3;
  assign mux_1_2 = din9[0] ? din6 : din5;
  assign mux_1_3 = din9[0] ? din8 : din7;
  assign mux_2_0 = din9[1] ? mux_1_1 : mux_1_0;
  assign mux_2_1 = din9[1] ? mux_1_3 : mux_1_2;
  assign dout = din9[2] ? mux_2_1 : mux_2_0;
  assign mux_3_0 = dout;
  assign sel = din9;
endmodule
module \$paramod$5c01e9124acc7a341c0495d3aa185d5e4de5ba1e\hls_target_am_addmul_8ns_8ns_11ns_19_1 (din0, din1, din2, dout);
  input [7:0] din0;
  input [7:0] din1;
  input [10:0] din2;
  output [18:0] dout;
  hls_target_am_addmul_8ns_8ns_11ns_19_1_DSP48_14 hls_target_am_addmul_8ns_8ns_11ns_19_1_DSP48_14_U (
    .dout(dout),
    .in0(din0),
    .in1(din1),
    .in2(din2)
  );
endmodule
module \$paramod$670997d915a1bc356393009f52014139224d7de7\hls_target_mac_muladd_13ns_8ns_21ns_21_1 (din0, din1, din2, dout);
  input [12:0] din0;
  input [7:0] din1;
  input [20:0] din2;
  output [20:0] dout;
  hls_target_mac_muladd_13ns_8ns_21ns_21_1_DSP48_6 hls_target_mac_muladd_13ns_8ns_21ns_21_1_DSP48_6_U (
    .dout(dout),
    .in0(din0),
    .in1(din1),
    .in2(din2)
  );
endmodule
module \$paramod$83dd66ca6e39253b28213f46779855fd190b8af7\hls_target_am_addmul_8ns_8ns_9ns_17_1 (din0, din1, din2, dout);
  input [7:0] din0;
  input [7:0] din1;
  input [8:0] din2;
  output [16:0] dout;
  hls_target_am_addmul_8ns_8ns_9ns_17_1_DSP48_11 hls_target_am_addmul_8ns_8ns_9ns_17_1_DSP48_11_U (
    .dout(dout),
    .in0(din0),
    .in1(din1),
    .in2(din2)
  );
endmodule
module \$paramod$88f5ca1b4f336adb0ffa77876a4369405c2c3c03\hls_target_am_addmul_8ns_8ns_6ns_14_1 (din0, din1, din2, dout);
  input [7:0] din0;
  input [7:0] din1;
  input [5:0] din2;
  output [13:0] dout;
  hls_target_am_addmul_8ns_8ns_6ns_14_1_DSP48_9 hls_target_am_addmul_8ns_8ns_6ns_14_1_DSP48_9_U (
    .dout(dout),
    .in0(din0),
    .in1(din1),
    .in2(din2)
  );
endmodule
module \$paramod$a19423b4b9be5de3b35e4ac8ee96fe67fc1eac41\hls_target_am_addmul_8ns_8ns_10ns_18_1 (din0, din1, din2, dout);
  input [7:0] din0;
  input [7:0] din1;
  input [9:0] din2;
  output [17:0] dout;
  hls_target_am_addmul_8ns_8ns_10ns_18_1_DSP48_12 hls_target_am_addmul_8ns_8ns_10ns_18_1_DSP48_12_U (
    .dout(dout),
    .in0(din0),
    .in1(din1),
    .in2(din2)
  );
endmodule
module \$paramod$a3764642caa8681a8502b0ce31d8da58f8f303ec\hls_target_ama_addmuladd_8ns_8ns_12ns_20ns_21_1 (din0, din1, din2, din3, dout);
  input [7:0] din0;
  input [7:0] din1;
  input [11:0] din2;
  input [19:0] din3;
  output [20:0] dout;
  hls_target_ama_addmuladd_8ns_8ns_12ns_20ns_21_1_DSP48_13 hls_target_ama_addmuladd_8ns_8ns_12ns_20ns_21_1_DSP48_13_U (
    .dout(dout),
    .in0(din0),
    .in1(din1),
    .in2(din2),
    .in3(din3)
  );
endmodule
module \$paramod$a4e7845fd68d0c9773b7c19b2317e709a020a4f9\hls_target_mac_muladd_12ns_8ns_20ns_20_1 (din0, din1, din2, dout);
  input [11:0] din0;
  input [7:0] din1;
  input [19:0] din2;
  output [19:0] dout;
  hls_target_mac_muladd_12ns_8ns_20ns_20_1_DSP48_0 hls_target_mac_muladd_12ns_8ns_20ns_20_1_DSP48_0_U (
    .dout(dout),
    .in0(din0),
    .in1(din1),
    .in2(din2)
  );
endmodule
module \$paramod$ff86e9d3cfae25d803e0cd487d0ca8b0dc12c184\hls_target_mac_muladd_14ns_8ns_23ns_24_1 (din0, din1, din2, dout);
  input [13:0] din0;
  input [7:0] din1;
  input [22:0] din2;
  output [23:0] dout;
  hls_target_mac_muladd_14ns_8ns_23ns_24_1_DSP48_1 hls_target_mac_muladd_14ns_8ns_23ns_24_1_DSP48_1_U (
    .dout(dout),
    .in0(din0),
    .in1(din1),
    .in2(din2)
  );
endmodule
module \$paramod\FIFO_hls_target_call_slice_stream_V_value_V_shiftReg\DATA_WIDTH=72\ADDR_WIDTH=1\DEPTH=2 (clk, data, ce, a, q);
  wire [71:0] _0_;
  wire [71:0] _1_;
  reg [71:0] \SRL_SIG[0] ;
  reg [71:0] \SRL_SIG[1] ;
  input a;
  input ce;
  input clk;
  input [71:0] data;
  output [71:0] q;
  assign q = a ? \SRL_SIG[1] : \SRL_SIG[0] ;
  assign _0_ = ce ? data : \SRL_SIG[0] ;
  assign _1_ = ce ? \SRL_SIG[0] : \SRL_SIG[1] ;
  always @(posedge clk)
      \SRL_SIG[0] <= _0_;
  always @(posedge clk)
      \SRL_SIG[1] <= _1_;
endmodule
module \$paramod\FIFO_hls_target_linebuffer_1_in_stream_V_value_V_shiftReg\DATA_WIDTH=8\ADDR_WIDTH=1\DEPTH=2 (clk, data, ce, a, q);
  wire [7:0] _0_;
  wire [7:0] _1_;
  reg [7:0] \SRL_SIG[0] ;
  reg [7:0] \SRL_SIG[1] ;
  input a;
  input ce;
  input clk;
  input [7:0] data;
  output [7:0] q;
  assign q = a ? \SRL_SIG[1] : \SRL_SIG[0] ;
  assign _0_ = ce ? data : \SRL_SIG[0] ;
  assign _1_ = ce ? \SRL_SIG[0] : \SRL_SIG[1] ;
  always @(posedge clk)
      \SRL_SIG[0] <= _0_;
  always @(posedge clk)
      \SRL_SIG[1] <= _1_;
endmodule
module \$paramod\FIFO_hls_target_p_p2_in_bounded_stencil_stream_s_shiftReg\DATA_WIDTH=648\ADDR_WIDTH=1\DEPTH=2 (clk, data, ce, a, q);
  wire [647:0] _0_;
  wire [647:0] _1_;
  reg [647:0] \SRL_SIG[0] ;
  reg [647:0] \SRL_SIG[1] ;
  input a;
  input ce;
  input clk;
  input [647:0] data;
  output [647:0] q;
  assign q = a ? \SRL_SIG[1] : \SRL_SIG[0] ;
  assign _0_ = ce ? data : \SRL_SIG[0] ;
  assign _1_ = ce ? \SRL_SIG[0] : \SRL_SIG[1] ;
  always @(posedge clk)
      \SRL_SIG[0] <= _0_;
  always @(posedge clk)
      \SRL_SIG[1] <= _1_;
endmodule
module \$paramod\hls_target_call_Loop_LB2D_buf_proc_buffer_0_value_V\DataWidth=8\AddressRange=488\AddressWidth=9 (reset, clk, address0, ce0, q0, address1, ce1, we1, d1);
  input [8:0] address0;
  input [8:0] address1;
  input ce0;
  input ce1;
  input clk;
  input [7:0] d1;
  output [7:0] q0;
  input reset;
  input we1;
  hls_target_call_Loop_LB2D_buf_proc_buffer_0_value_V_ram hls_target_call_Loop_LB2D_buf_proc_buffer_0_value_V_ram_U (
    .addr0(address0),
    .addr1(address1),
    .ce0(ce0),
    .ce1(ce1),
    .clk(clk),
    .d1(d1),
    .q0(q0),
    .we1(we1)
  );
endmodule
module \$paramod\hls_target_mul_mul_12ns_8ns_20_1\ID=1\NUM_STAGE=1\din0_WIDTH=12\din1_WIDTH=8\dout_WIDTH=20 (din0, din1, dout);
  input [11:0] din0;
  input [7:0] din1;
  output [19:0] dout;
  hls_target_mul_mul_12ns_8ns_20_1_DSP48_3 hls_target_mul_mul_12ns_8ns_20_1_DSP48_3_U (
    .a(din0),
    .b(din1),
    .p(dout)
  );
endmodule
module \$paramod\hls_target_mul_mul_13ns_8ns_21_1\ID=1\NUM_STAGE=1\din0_WIDTH=13\din1_WIDTH=8\dout_WIDTH=21 (din0, din1, dout);
  input [12:0] din0;
  input [7:0] din1;
  output [20:0] dout;
  hls_target_mul_mul_13ns_8ns_21_1_DSP48_4 hls_target_mul_mul_13ns_8ns_21_1_DSP48_4_U (
    .a(din0),
    .b(din1),
    .p(dout)
  );
endmodule
module FIFO_hls_target_call_slice_stream_V_value_V(clk, reset, if_empty_n, if_read_ce, if_read, if_dout, if_full_n, if_write_ce, if_write, if_din);
  wire _00_;
  wire _01_;
  wire [1:0] _02_;
  wire [1:0] _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire [31:0] _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire [1:0] _23_;
  wire [1:0] _24_;
  input clk;
  input [71:0] if_din;
  output [71:0] if_dout;
  output if_empty_n;
  output if_full_n;
  input if_read;
  input if_read_ce;
  input if_write;
  input if_write_ce;
  reg internal_empty_n = 1'b0;
  reg internal_full_n = 1'b1;
  reg [1:0] mOutPtr = 2'b11;
  input reset;
  wire shiftReg_addr;
  wire shiftReg_ce;
  wire [71:0] shiftReg_data;
  wire [71:0] shiftReg_q;
  assign _03_ = mOutPtr + 1'b1;
  assign _04_ = if_write & if_write_ce;
  assign shiftReg_ce = _04_ & internal_full_n;
  assign _05_ = if_read & if_read_ce;
  assign _06_ = _05_ & internal_empty_n;
  assign _08_ = ! mOutPtr;
  wire [31:0] fangyuan0;
  assign fangyuan0 = { 16'b0000000000000000, 15'b000000000000000, _04_ };
  assign _09_ = ! fangyuan0;
  assign _10_ = ~ internal_full_n;
  wire [31:0] fangyuan1;
  assign fangyuan1 = { 16'b0000000000000000, 15'b000000000000000, _05_ };
  assign _11_ = ! fangyuan1;
  assign _12_ = ~ internal_empty_n;
  assign _13_ = _16_ && shiftReg_ce;
  assign _14_ = _06_ && _15_;
  assign _15_ = _09_ | _10_;
  assign _16_ = _11_ | _12_;
  always @(posedge clk)
      mOutPtr <= _02_;
  always @(posedge clk)
      internal_empty_n <= _00_;
  always @(posedge clk)
      internal_full_n <= _01_;
  assign _17_ = _08_ ? 1'b0 : internal_full_n;
  assign _18_ = _13_ ? _17_ : internal_full_n;
  assign _19_ = _14_ ? 1'b1 : _18_;
  assign _01_ = reset ? 1'b1 : _19_;
  assign _20_ = _13_ ? 1'b1 : internal_empty_n;
  assign _21_ = _08_ ? 1'b0 : internal_empty_n;
  assign _22_ = _14_ ? _21_ : _20_;
  assign _00_ = reset ? 1'b0 : _22_;
  assign _23_ = _13_ ? _03_ : mOutPtr;
  assign _24_ = _14_ ? _07_[1:0] : _23_;
  assign _02_ = reset ? 2'b11 : _24_;
  assign _07_[1:0] = mOutPtr - 1'b1;
  assign shiftReg_addr = mOutPtr[1] ? 1'b0 : mOutPtr[0];
  \$paramod\FIFO_hls_target_call_slice_stream_V_value_V_shiftReg\DATA_WIDTH=72\ADDR_WIDTH=1\DEPTH=2 U_FIFO_hls_target_call_slice_stream_V_value_V_ram (
    .a(shiftReg_addr),
    .ce(shiftReg_ce),
    .clk(clk),
    .data(if_din),
    .q(shiftReg_q)
  );
  assign if_dout = shiftReg_q;
  assign if_empty_n = internal_empty_n;
  assign if_full_n = internal_full_n;
  assign shiftReg_data = if_din;
endmodule
module FIFO_hls_target_linebuffer_1_in_stream_V_value_V(clk, reset, if_empty_n, if_read_ce, if_read, if_dout, if_full_n, if_write_ce, if_write, if_din);
  wire _00_;
  wire _01_;
  wire [1:0] _02_;
  wire [1:0] _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire [31:0] _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire [1:0] _23_;
  wire [1:0] _24_;
  input clk;
  input [7:0] if_din;
  output [7:0] if_dout;
  output if_empty_n;
  output if_full_n;
  input if_read;
  input if_read_ce;
  input if_write;
  input if_write_ce;
  reg internal_empty_n = 1'b0;
  reg internal_full_n = 1'b1;
  reg [1:0] mOutPtr = 2'b11;
  input reset;
  wire shiftReg_addr;
  wire shiftReg_ce;
  wire [7:0] shiftReg_data;
  wire [7:0] shiftReg_q;
  assign _03_ = mOutPtr + 1'b1;
  assign _04_ = if_write & if_write_ce;
  assign shiftReg_ce = _04_ & internal_full_n;
  assign _05_ = if_read & if_read_ce;
  assign _06_ = _05_ & internal_empty_n;
  assign _08_ = ! mOutPtr;
  wire [31:0] fangyuan2;
  assign fangyuan2 = { 16'b0000000000000000, 15'b000000000000000, _04_ };
  assign _09_ = ! fangyuan2;
  assign _10_ = ~ internal_full_n;
  wire [31:0] fangyuan3;
  assign fangyuan3 = { 16'b0000000000000000, 15'b000000000000000, _05_ };
  assign _11_ = ! fangyuan3;
  assign _12_ = ~ internal_empty_n;
  assign _13_ = _16_ && shiftReg_ce;
  assign _14_ = _06_ && _15_;
  assign _15_ = _09_ | _10_;
  assign _16_ = _11_ | _12_;
  always @(posedge clk)
      mOutPtr <= _02_;
  always @(posedge clk)
      internal_empty_n <= _00_;
  always @(posedge clk)
      internal_full_n <= _01_;
  assign _17_ = _08_ ? 1'b0 : internal_full_n;
  assign _18_ = _13_ ? _17_ : internal_full_n;
  assign _19_ = _14_ ? 1'b1 : _18_;
  assign _01_ = reset ? 1'b1 : _19_;
  assign _20_ = _13_ ? 1'b1 : internal_empty_n;
  assign _21_ = _08_ ? 1'b0 : internal_empty_n;
  assign _22_ = _14_ ? _21_ : _20_;
  assign _00_ = reset ? 1'b0 : _22_;
  assign _23_ = _13_ ? _03_ : mOutPtr;
  assign _24_ = _14_ ? _07_[1:0] : _23_;
  assign _02_ = reset ? 2'b11 : _24_;
  assign _07_[1:0] = mOutPtr - 1'b1;
  assign shiftReg_addr = mOutPtr[1] ? 1'b0 : mOutPtr[0];
  \$paramod\FIFO_hls_target_linebuffer_1_in_stream_V_value_V_shiftReg\DATA_WIDTH=8\ADDR_WIDTH=1\DEPTH=2 U_FIFO_hls_target_linebuffer_1_in_stream_V_value_V_ram (
    .a(shiftReg_addr),
    .ce(shiftReg_ce),
    .clk(clk),
    .data(if_din),
    .q(shiftReg_q)
  );
  assign if_dout = shiftReg_q;
  assign if_empty_n = internal_empty_n;
  assign if_full_n = internal_full_n;
  assign shiftReg_data = if_din;
endmodule
module FIFO_hls_target_p_p2_in_bounded_stencil_stream_s(clk, reset, if_empty_n, if_read_ce, if_read, if_dout, if_full_n, if_write_ce, if_write, if_din);
  wire _00_;
  wire _01_;
  wire [1:0] _02_;
  wire [1:0] _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire [31:0] _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire [1:0] _23_;
  wire [1:0] _24_;
  input clk;
  input [647:0] if_din;
  output [647:0] if_dout;
  output if_empty_n;
  output if_full_n;
  input if_read;
  input if_read_ce;
  input if_write;
  input if_write_ce;
  reg internal_empty_n = 1'b0;
  reg internal_full_n = 1'b1;
  reg [1:0] mOutPtr = 2'b11;
  input reset;
  wire shiftReg_addr;
  wire shiftReg_ce;
  wire [647:0] shiftReg_data;
  wire [647:0] shiftReg_q;
  assign _03_ = mOutPtr + 1'b1;
  assign _04_ = if_write & if_write_ce;
  assign shiftReg_ce = _04_ & internal_full_n;
  assign _05_ = if_read & if_read_ce;
  assign _06_ = _05_ & internal_empty_n;
  assign _08_ = ! mOutPtr;
  wire [31:0] fangyuan4;
  assign fangyuan4 = { 16'b0000000000000000, 15'b000000000000000, _04_ };
  assign _09_ = ! fangyuan4;
  assign _10_ = ~ internal_full_n;
  wire [31:0] fangyuan5;
  assign fangyuan5 = { 16'b0000000000000000, 15'b000000000000000, _05_ };
  assign _11_ = ! fangyuan5;
  assign _12_ = ~ internal_empty_n;
  assign _13_ = _16_ && shiftReg_ce;
  assign _14_ = _06_ && _15_;
  assign _15_ = _09_ | _10_;
  assign _16_ = _11_ | _12_;
  always @(posedge clk)
      mOutPtr <= _02_;
  always @(posedge clk)
      internal_empty_n <= _00_;
  always @(posedge clk)
      internal_full_n <= _01_;
  assign _17_ = _08_ ? 1'b0 : internal_full_n;
  assign _18_ = _13_ ? _17_ : internal_full_n;
  assign _19_ = _14_ ? 1'b1 : _18_;
  assign _01_ = reset ? 1'b1 : _19_;
  assign _20_ = _13_ ? 1'b1 : internal_empty_n;
  assign _21_ = _08_ ? 1'b0 : internal_empty_n;
  assign _22_ = _14_ ? _21_ : _20_;
  assign _00_ = reset ? 1'b0 : _22_;
  assign _23_ = _13_ ? _03_ : mOutPtr;
  assign _24_ = _14_ ? _07_[1:0] : _23_;
  assign _02_ = reset ? 2'b11 : _24_;
  assign _07_[1:0] = mOutPtr - 1'b1;
  assign shiftReg_addr = mOutPtr[1] ? 1'b0 : mOutPtr[0];
  \$paramod\FIFO_hls_target_p_p2_in_bounded_stencil_stream_s_shiftReg\DATA_WIDTH=648\ADDR_WIDTH=1\DEPTH=2 U_FIFO_hls_target_p_p2_in_bounded_stencil_stream_s_ram (
    .a(shiftReg_addr),
    .ce(shiftReg_ce),
    .clk(clk),
    .data(if_din),
    .q(shiftReg_q)
  );
  assign if_dout = shiftReg_q;
  assign if_empty_n = internal_empty_n;
  assign if_full_n = internal_full_n;
  assign shiftReg_data = if_din;
endmodule
module hls_target(ap_start, ap_done, ap_ready, ap_idle, ap_clk, ap_rst_n_inv, arg_0_TDATA, arg_0_TLAST, arg_1_TDATA, arg_1_TLAST, arg_1_TVALID, arg_1_TREADY, arg_0_TVALID, arg_0_TREADY);
  wire _0_;
  input ap_clk;
  output ap_done;
  output ap_idle;
  output ap_ready;
  input ap_rst_n_inv;
  wire ap_sig_hs_done;
  wire ap_sig_top_allready;
  input ap_start;
  output [7:0] arg_0_TDATA;
  output arg_0_TLAST;
  input arg_0_TREADY;
  output arg_0_TVALID;
  input [7:0] arg_1_TDATA;
  input arg_1_TLAST;
  output arg_1_TREADY;
  input arg_1_TVALID;
  wire hls_target_Loop_1_proc_U0_ap_done;
  wire hls_target_Loop_1_proc_U0_ap_idle;
  wire hls_target_Loop_1_proc_U0_ap_ready;
  reg hls_target_Loop_1_proc_U0_ap_start = 1'b0;
  wire [7:0] hls_target_Loop_1_proc_U0_arg_0_TDATA;
  wire hls_target_Loop_1_proc_U0_arg_0_TLAST;
  wire hls_target_Loop_1_proc_U0_arg_0_TREADY;
  wire hls_target_Loop_1_proc_U0_arg_0_TVALID;
  wire [647:0] hls_target_Loop_1_proc_U0_p_p2_in_bounded_stencil_stream_V_value_V_dout;
  wire hls_target_Loop_1_proc_U0_p_p2_in_bounded_stencil_stream_V_value_V_empty_n;
  wire hls_target_Loop_1_proc_U0_p_p2_in_bounded_stencil_stream_V_value_V_read;
  wire hls_target_linebuffer_1_U0_ap_done;
  wire hls_target_linebuffer_1_U0_ap_idle;
  wire hls_target_linebuffer_1_U0_ap_ready;
  wire hls_target_linebuffer_1_U0_ap_start;
  wire [7:0] hls_target_linebuffer_1_U0_arg_1_TDATA;
  wire hls_target_linebuffer_1_U0_arg_1_TLAST;
  wire hls_target_linebuffer_1_U0_arg_1_TREADY;
  wire hls_target_linebuffer_1_U0_arg_1_TVALID;
  wire [647:0] hls_target_linebuffer_1_U0_out_stream_V_value_V_din;
  wire hls_target_linebuffer_1_U0_out_stream_V_value_V_full_n;
  wire hls_target_linebuffer_1_U0_out_stream_V_value_V_write;
  wire [647:0] p_p2_in_bounded_stencil_stream_s_din;
  wire [647:0] p_p2_in_bounded_stencil_stream_s_dout;
  wire p_p2_in_bounded_stencil_stream_s_empty_n;
  wire p_p2_in_bounded_stencil_stream_s_full_n;
  wire p_p2_in_bounded_stencil_stream_s_read;
  wire p_p2_in_bounded_stencil_stream_s_write;
  assign ap_idle = hls_target_linebuffer_1_U0_ap_idle & hls_target_Loop_1_proc_U0_ap_idle;
  always @(posedge ap_clk)
      hls_target_Loop_1_proc_U0_ap_start <= _0_;
  assign _0_ = ap_rst_n_inv ? 1'b0 : 1'b1;
  hls_target_Loop_1_proc hls_target_Loop_1_proc_U0 (
    .ap_clk(ap_clk),
    .ap_continue(1'b1),
    .ap_done(hls_target_Loop_1_proc_U0_ap_done),
    .ap_idle(hls_target_Loop_1_proc_U0_ap_idle),
    .ap_ready(hls_target_Loop_1_proc_U0_ap_ready),
    .ap_rst(ap_rst_n_inv),
    .ap_start(hls_target_Loop_1_proc_U0_ap_start),
    .arg_0_TDATA(hls_target_Loop_1_proc_U0_arg_0_TDATA),
    .arg_0_TLAST(hls_target_Loop_1_proc_U0_arg_0_TLAST),
    .arg_0_TREADY(arg_0_TREADY),
    .arg_0_TVALID(hls_target_Loop_1_proc_U0_arg_0_TVALID),
    .p_p2_in_bounded_stencil_stream_V_value_V_dout(hls_target_Loop_1_proc_U0_p_p2_in_bounded_stencil_stream_V_value_V_dout),
    .p_p2_in_bounded_stencil_stream_V_value_V_empty_n(hls_target_Loop_1_proc_U0_p_p2_in_bounded_stencil_stream_V_value_V_empty_n),
    .p_p2_in_bounded_stencil_stream_V_value_V_read(hls_target_Loop_1_proc_U0_p_p2_in_bounded_stencil_stream_V_value_V_read)
  );
  hls_target_linebuffer_1 hls_target_linebuffer_1_U0 (
    .ap_clk(ap_clk),
    .ap_continue(1'b1),
    .ap_done(hls_target_linebuffer_1_U0_ap_done),
    .ap_idle(hls_target_linebuffer_1_U0_ap_idle),
    .ap_ready(hls_target_linebuffer_1_U0_ap_ready),
    .ap_rst(ap_rst_n_inv),
    .ap_start(ap_start),
    .arg_1_TDATA(arg_1_TDATA),
    .arg_1_TLAST(arg_1_TLAST),
    .arg_1_TREADY(hls_target_linebuffer_1_U0_arg_1_TREADY),
    .arg_1_TVALID(arg_1_TVALID),
    .out_stream_V_value_V_din(hls_target_linebuffer_1_U0_out_stream_V_value_V_din),
    .out_stream_V_value_V_full_n(hls_target_linebuffer_1_U0_out_stream_V_value_V_full_n),
    .out_stream_V_value_V_write(hls_target_linebuffer_1_U0_out_stream_V_value_V_write)
  );
  FIFO_hls_target_p_p2_in_bounded_stencil_stream_s p_p2_in_bounded_stencil_stream_s_U (
    .clk(ap_clk),
    .if_din(hls_target_linebuffer_1_U0_out_stream_V_value_V_din),
    .if_dout(hls_target_Loop_1_proc_U0_p_p2_in_bounded_stencil_stream_V_value_V_dout),
    .if_empty_n(hls_target_Loop_1_proc_U0_p_p2_in_bounded_stencil_stream_V_value_V_empty_n),
    .if_full_n(hls_target_linebuffer_1_U0_out_stream_V_value_V_full_n),
    .if_read(hls_target_Loop_1_proc_U0_p_p2_in_bounded_stencil_stream_V_value_V_read),
    .if_read_ce(1'b1),
    .if_write(hls_target_linebuffer_1_U0_out_stream_V_value_V_write),
    .if_write_ce(1'b1),
    .reset(ap_rst_n_inv)
  );
  assign ap_done = hls_target_Loop_1_proc_U0_ap_done;
  assign ap_ready = hls_target_linebuffer_1_U0_ap_ready;
  assign ap_sig_hs_done = hls_target_Loop_1_proc_U0_ap_done;
  assign ap_sig_top_allready = hls_target_linebuffer_1_U0_ap_ready;
  assign arg_0_TDATA = hls_target_Loop_1_proc_U0_arg_0_TDATA;
  assign arg_0_TLAST = hls_target_Loop_1_proc_U0_arg_0_TLAST;
  assign arg_0_TVALID = hls_target_Loop_1_proc_U0_arg_0_TVALID;
  assign arg_1_TREADY = hls_target_linebuffer_1_U0_arg_1_TREADY;
  assign hls_target_Loop_1_proc_U0_arg_0_TREADY = arg_0_TREADY;
  assign hls_target_linebuffer_1_U0_ap_start = ap_start;
  assign hls_target_linebuffer_1_U0_arg_1_TDATA = arg_1_TDATA;
  assign hls_target_linebuffer_1_U0_arg_1_TLAST = arg_1_TLAST;
  assign hls_target_linebuffer_1_U0_arg_1_TVALID = arg_1_TVALID;
  assign p_p2_in_bounded_stencil_stream_s_din = hls_target_linebuffer_1_U0_out_stream_V_value_V_din;
  assign p_p2_in_bounded_stencil_stream_s_dout = hls_target_Loop_1_proc_U0_p_p2_in_bounded_stencil_stream_V_value_V_dout;
  assign p_p2_in_bounded_stencil_stream_s_empty_n = hls_target_Loop_1_proc_U0_p_p2_in_bounded_stencil_stream_V_value_V_empty_n;
  assign p_p2_in_bounded_stencil_stream_s_full_n = hls_target_linebuffer_1_U0_out_stream_V_value_V_full_n;
  assign p_p2_in_bounded_stencil_stream_s_read = hls_target_Loop_1_proc_U0_p_p2_in_bounded_stencil_stream_V_value_V_read;
  assign p_p2_in_bounded_stencil_stream_s_write = hls_target_linebuffer_1_U0_out_stream_V_value_V_write;
endmodule
module hls_target_Loop_1_proc(ap_clk, ap_rst, ap_start, ap_done, ap_continue, ap_idle, ap_ready, p_p2_in_bounded_stencil_stream_V_value_V_dout, p_p2_in_bounded_stencil_stream_V_value_V_empty_n, p_p2_in_bounded_stencil_stream_V_value_V_read, arg_0_TDATA, arg_0_TVALID, arg_0_TREADY, arg_0_TLAST);
  wire [2:0] _0000_;
  wire _0001_;
  wire _0002_;
  wire _0003_;
  wire _0004_;
  wire _0005_;
  wire _0006_;
  wire _0007_;
  wire _0008_;
  wire _0009_;
  wire _0010_;
  wire _0011_;
  wire _0012_;
  wire _0013_;
  wire _0014_;
  wire _0015_;
  wire _0016_;
  wire _0017_;
  wire _0018_;
  wire _0019_;
  wire [7:0] _0020_;
  wire [7:0] _0021_;
  wire [7:0] _0022_;
  wire [7:0] _0023_;
  wire [7:0] _0024_;
  wire [7:0] _0025_;
  wire [7:0] _0026_;
  wire [7:0] _0027_;
  wire [7:0] _0028_;
  wire [7:0] _0029_;
  wire [7:0] _0030_;
  wire [7:0] _0031_;
  wire [7:0] _0032_;
  wire [7:0] _0033_;
  wire [7:0] _0034_;
  wire [7:0] _0035_;
  wire [7:0] _0036_;
  wire [7:0] _0037_;
  wire [7:0] _0038_;
  wire [7:0] _0039_;
  wire [7:0] _0040_;
  wire [7:0] _0041_;
  wire [7:0] _0042_;
  wire [7:0] _0043_;
  wire [7:0] _0044_;
  wire [7:0] _0045_;
  wire [7:0] _0046_;
  wire [7:0] _0047_;
  wire [7:0] _0048_;
  wire [7:0] _0049_;
  wire [7:0] _0050_;
  wire [7:0] _0051_;
  wire [7:0] _0052_;
  wire [7:0] _0053_;
  wire [7:0] _0054_;
  wire [7:0] _0055_;
  wire [7:0] _0056_;
  wire [7:0] _0057_;
  wire [7:0] _0058_;
  wire [16:0] _0059_;
  wire [17:0] _0060_;
  wire [17:0] _0061_;
  wire [17:0] _0062_;
  wire [20:0] _0063_;
  wire [20:0] _0064_;
  wire [20:0] _0065_;
  wire [19:0] _0066_;
  wire [19:0] _0067_;
  wire [19:0] _0068_;
  wire [21:0] _0069_;
  wire [21:0] _0070_;
  wire [21:0] _0071_;
  wire [21:0] _0072_;
  wire [21:0] _0073_;
  wire [21:0] _0074_;
  wire [21:0] _0075_;
  wire [21:0] _0076_;
  wire [20:0] _0077_;
  wire [20:0] _0078_;
  wire [20:0] _0079_;
  wire [20:0] _0080_;
  wire [18:0] _0081_;
  wire [18:0] _0082_;
  wire [18:0] _0083_;
  wire [18:0] _0084_;
  wire [7:0] _0085_;
  wire [7:0] _0086_;
  wire _0087_;
  wire _0088_;
  wire _0089_;
  wire _0090_;
  wire _0091_;
  wire _0092_;
  wire _0093_;
  wire _0094_;
  wire _0095_;
  wire [7:0] _0096_;
  wire _0097_;
  wire _0098_;
  wire [18:0] _0099_;
  wire [11:0] _0100_;
  wire [7:0] _0101_;
  wire [7:0] _0102_;
  wire [14:0] _0103_;
  wire [7:0] _0104_;
  wire [15:0] _0105_;
  wire [7:0] _0106_;
  wire [14:0] _0107_;
  wire [7:0] _0108_;
  wire [7:0] _0109_;
  wire [7:0] _0110_;
  wire [7:0] _0111_;
  wire [17:0] _0112_;
  wire [7:0] _0113_;
  wire [17:0] _0114_;
  wire [7:0] _0115_;
  wire [18:0] _0116_;
  wire [7:0] _0117_;
  wire [7:0] _0118_;
  wire [7:0] _0119_;
  wire [7:0] _0120_;
  wire [7:0] _0121_;
  wire [7:0] _0122_;
  wire [7:0] _0123_;
  wire [18:0] _0124_;
  wire [19:0] _0125_;
  wire [7:0] _0126_;
  wire [7:0] _0127_;
  wire [7:0] _0128_;
  wire [19:0] _0129_;
  wire [7:0] _0130_;
  wire [7:0] _0131_;
  wire [7:0] _0132_;
  wire [7:0] _0133_;
  wire [7:0] _0134_;
  wire [7:0] _0135_;
  wire [7:0] _0136_;
  wire [7:0] _0137_;
  wire [7:0] _0138_;
  wire [7:0] _0139_;
  wire [7:0] _0140_;
  wire [17:0] _0141_;
  wire [7:0] _0142_;
  wire [7:0] _0143_;
  wire [7:0] _0144_;
  wire [7:0] _0145_;
  wire [19:0] _0146_;
  wire [7:0] _0147_;
  wire [20:0] _0148_;
  wire [7:0] _0149_;
  wire [7:0] _0150_;
  wire [7:0] _0151_;
  wire [7:0] _0152_;
  wire [7:0] _0153_;
  wire [7:0] _0154_;
  wire [7:0] _0155_;
  wire [19:0] _0156_;
  wire [7:0] _0157_;
  wire [7:0] _0158_;
  wire [20:0] _0159_;
  wire [7:0] _0160_;
  wire [20:0] _0161_;
  wire [7:0] _0162_;
  wire [7:0] _0163_;
  wire [7:0] _0164_;
  wire [7:0] _0165_;
  wire [19:0] _0166_;
  wire [7:0] _0167_;
  wire [7:0] _0168_;
  wire [7:0] _0169_;
  wire [7:0] _0170_;
  wire [17:0] _0171_;
  wire [7:0] _0172_;
  wire [7:0] _0173_;
  wire [7:0] _0174_;
  wire [16:0] _0175_;
  wire [7:0] _0176_;
  wire [7:0] _0177_;
  wire [7:0] _0178_;
  wire [7:0] _0179_;
  wire [7:0] _0180_;
  wire [8:0] _0181_;
  wire [9:0] _0182_;
  wire [9:0] _0183_;
  wire [17:0] _0184_;
  wire [16:0] _0185_;
  wire [21:0] _0186_;
  wire [19:0] _0187_;
  wire [17:0] _0188_;
  wire [22:0] _0189_;
  wire [20:0] _0190_;
  wire [19:0] _0191_;
  wire [14:0] _0192_;
  wire [23:0] _0193_;
  wire [21:0] _0194_;
  wire [21:0] _0195_;
  wire [20:0] _0196_;
  wire [19:0] _0197_;
  wire [18:0] _0198_;
  wire [17:0] _0199_;
  wire [13:0] _0200_;
  wire [18:0] _0201_;
  wire [16:0] _0202_;
  wire [15:0] _0203_;
  wire [15:0] _0204_;
  wire [15:0] _0205_;
  wire [11:0] _0206_;
  wire [14:0] _0207_;
  wire [14:0] _0208_;
  wire [13:0] _0209_;
  wire [11:0] _0210_;
  wire [14:0] _0211_;
  wire [7:0] _0212_;
  wire [7:0] _0213_;
  wire [7:0] _0214_;
  wire [7:0] _0215_;
  wire [7:0] _0216_;
  wire [7:0] _0217_;
  wire [7:0] _0218_;
  wire [7:0] _0219_;
  wire [7:0] _0220_;
  wire [7:0] _0221_;
  wire [7:0] _0222_;
  wire [7:0] _0223_;
  wire _0224_;
  wire [1:0] _0225_;
  wire [2:0] _0226_;
  wire [2:0] _0227_;
  wire [2:0] _0228_;
  wire _0229_;
  wire _0230_;
  wire _0231_;
  wire _0232_;
  wire _0233_;
  wire _0234_;
  wire _0235_;
  wire _0236_;
  wire _0237_;
  wire _0238_;
  wire _0239_;
  wire _0240_;
  wire _0241_;
  wire _0242_;
  wire _0243_;
  wire _0244_;
  wire _0245_;
  wire _0246_;
  wire _0247_;
  wire _0248_;
  wire _0249_;
  wire _0250_;
  wire _0251_;
  wire _0252_;
  wire _0253_;
  wire _0254_;
  wire _0255_;
  wire _0256_;
  wire _0257_;
  wire _0258_;
  wire _0259_;
  wire _0260_;
  wire _0261_;
  wire _0262_;
  wire _0263_;
  wire _0264_;
  wire _0265_;
  wire _0266_;
  wire [17:0] _0267_;
  wire [16:0] _0268_;
  wire [16:0] _0269_;
  wire [16:0] _0270_;
  wire _0271_;
  wire _0272_;
  wire _0273_;
  wire _0274_;
  wire _0275_;
  wire _0276_;
  wire _0277_;
  wire _0278_;
  wire _0279_;
  wire _0280_;
  wire _0281_;
  wire _0282_;
  wire _0283_;
  wire _0284_;
  wire _0285_;
  wire _0286_;
  wire _0287_;
  wire _0288_;
  wire _0289_;
  wire _0290_;
  wire _0291_;
  wire _0292_;
  wire _0293_;
  wire _0294_;
  wire _0295_;
  wire _0296_;
  wire _0297_;
  wire _0298_;
  wire _0299_;
  wire _0300_;
  wire _0301_;
  wire _0302_;
  wire _0303_;
  wire [9:0] _0304_;
  wire [8:0] _0305_;
  wire [18:0] _0306_;
  wire _0307_;
  wire _0308_;
  wire _0309_;
  wire _0310_;
  wire _0311_;
  wire _0312_;
  wire _0313_;
  wire _0314_;
  wire _0315_;
  wire _0316_;
  wire _0317_;
  wire _0318_;
  wire _0319_;
  wire _0320_;
  wire _0321_;
  wire _0322_;
  wire _0323_;
  wire _0324_;
  wire _0325_;
  reg [2:0] ap_CS_fsm = 3'b001;
  wire [2:0] ap_NS_fsm;
  input ap_clk;
  input ap_continue;
  output ap_done;
  reg ap_done_reg = 1'b0;
  output ap_idle;
  output ap_ready;
  reg ap_reg_ppiten_pp0_it0 = 1'b0;
  reg ap_reg_ppiten_pp0_it1 = 1'b0;
  reg ap_reg_ppiten_pp0_it2 = 1'b0;
  reg ap_reg_ppiten_pp0_it3 = 1'b0;
  reg ap_reg_ppiten_pp0_it4 = 1'b0;
  reg ap_reg_ppiten_pp0_it5 = 1'b0;
  reg ap_reg_ppiten_pp0_it6 = 1'b0;
  reg ap_reg_ppiten_pp0_it7 = 1'b0;
  reg ap_reg_ppiten_pp0_it8 = 1'b0;
  reg ap_reg_ppiten_pp0_it9 = 1'b0;
  reg ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it1;
  reg ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it2;
  reg ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it3;
  reg ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it4;
  reg ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it5;
  reg ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it6;
  reg ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it7;
  reg ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it8;
  reg [7:0] ap_reg_ppstg_p_262_reg_2850_pp0_it2;
  reg [7:0] ap_reg_ppstg_p_268_reg_2855_pp0_it2;
  reg [7:0] ap_reg_ppstg_p_274_reg_2860_pp0_it2;
  reg [7:0] ap_reg_ppstg_p_280_reg_2865_pp0_it2;
  reg [7:0] ap_reg_ppstg_p_286_reg_2870_pp0_it2;
  reg [7:0] ap_reg_ppstg_p_316_reg_2896_pp0_it2;
  reg [7:0] ap_reg_ppstg_p_322_reg_2901_pp0_it2;
  reg [7:0] ap_reg_ppstg_p_322_reg_2901_pp0_it3;
  reg [7:0] ap_reg_ppstg_p_322_reg_2901_pp0_it4;
  reg [7:0] ap_reg_ppstg_p_328_reg_2906_pp0_it2;
  reg [7:0] ap_reg_ppstg_p_328_reg_2906_pp0_it3;
  reg [7:0] ap_reg_ppstg_p_328_reg_2906_pp0_it4;
  reg [7:0] ap_reg_ppstg_p_334_reg_2911_pp0_it2;
  reg [7:0] ap_reg_ppstg_p_334_reg_2911_pp0_it3;
  reg [7:0] ap_reg_ppstg_p_340_reg_2916_pp0_it2;
  reg [7:0] ap_reg_ppstg_p_340_reg_2916_pp0_it3;
  reg [7:0] ap_reg_ppstg_p_340_reg_2916_pp0_it4;
  reg [7:0] ap_reg_ppstg_p_370_reg_2941_pp0_it2;
  reg [7:0] ap_reg_ppstg_p_370_reg_2941_pp0_it3;
  reg [7:0] ap_reg_ppstg_p_370_reg_2941_pp0_it4;
  reg [7:0] ap_reg_ppstg_p_376_reg_2946_pp0_it2;
  reg [7:0] ap_reg_ppstg_p_376_reg_2946_pp0_it3;
  reg [7:0] ap_reg_ppstg_p_376_reg_2946_pp0_it4;
  reg [7:0] ap_reg_ppstg_p_382_reg_2951_pp0_it2;
  reg [7:0] ap_reg_ppstg_p_382_reg_2951_pp0_it3;
  reg [7:0] ap_reg_ppstg_p_382_reg_2951_pp0_it4;
  reg [7:0] ap_reg_ppstg_p_382_reg_2951_pp0_it5;
  reg [7:0] ap_reg_ppstg_p_388_reg_2956_pp0_it2;
  reg [7:0] ap_reg_ppstg_p_394_reg_2961_pp0_it2;
  reg [7:0] ap_reg_ppstg_p_418_reg_2981_pp0_it2;
  reg [7:0] ap_reg_ppstg_p_436_reg_2996_pp0_it2;
  reg [7:0] ap_reg_ppstg_p_436_reg_2996_pp0_it3;
  reg [7:0] ap_reg_ppstg_p_436_reg_2996_pp0_it4;
  reg [7:0] ap_reg_ppstg_p_436_reg_2996_pp0_it5;
  reg [7:0] ap_reg_ppstg_p_436_reg_2996_pp0_it6;
  reg [7:0] ap_reg_ppstg_p_442_reg_3001_pp0_it2;
  reg [7:0] ap_reg_ppstg_p_448_reg_3006_pp0_it2;
  reg [7:0] ap_reg_ppstg_p_484_reg_3036_pp0_it2;
  reg [7:0] ap_reg_ppstg_p_544_reg_3086_pp0_it2;
  reg [16:0] ap_reg_ppstg_tmp11_reg_3229_pp0_it3;
  reg [17:0] ap_reg_ppstg_tmp19_reg_3234_pp0_it3;
  reg [17:0] ap_reg_ppstg_tmp19_reg_3234_pp0_it4;
  reg [17:0] ap_reg_ppstg_tmp19_reg_3234_pp0_it5;
  reg [20:0] ap_reg_ppstg_tmp24_reg_3364_pp0_it4;
  reg [20:0] ap_reg_ppstg_tmp24_reg_3364_pp0_it5;
  reg [20:0] ap_reg_ppstg_tmp24_reg_3364_pp0_it6;
  reg [19:0] ap_reg_ppstg_tmp26_reg_3369_pp0_it4;
  reg [19:0] ap_reg_ppstg_tmp26_reg_3369_pp0_it5;
  reg [19:0] ap_reg_ppstg_tmp26_reg_3369_pp0_it6;
  reg [21:0] ap_reg_ppstg_tmp34_reg_3374_pp0_it4;
  reg [21:0] ap_reg_ppstg_tmp34_reg_3374_pp0_it5;
  reg [21:0] ap_reg_ppstg_tmp34_reg_3374_pp0_it6;
  reg [21:0] ap_reg_ppstg_tmp34_reg_3374_pp0_it7;
  reg [21:0] ap_reg_ppstg_tmp36_reg_3379_pp0_it4;
  reg [21:0] ap_reg_ppstg_tmp36_reg_3379_pp0_it5;
  reg [21:0] ap_reg_ppstg_tmp36_reg_3379_pp0_it6;
  reg [21:0] ap_reg_ppstg_tmp36_reg_3379_pp0_it7;
  reg [20:0] ap_reg_ppstg_tmp40_reg_3384_pp0_it4;
  reg [20:0] ap_reg_ppstg_tmp40_reg_3384_pp0_it5;
  reg [20:0] ap_reg_ppstg_tmp40_reg_3384_pp0_it6;
  reg [20:0] ap_reg_ppstg_tmp40_reg_3384_pp0_it7;
  reg [18:0] ap_reg_ppstg_tmp50_reg_3389_pp0_it4;
  reg [18:0] ap_reg_ppstg_tmp50_reg_3389_pp0_it5;
  reg [18:0] ap_reg_ppstg_tmp50_reg_3389_pp0_it6;
  reg [18:0] ap_reg_ppstg_tmp50_reg_3389_pp0_it7;
  reg [7:0] ap_reg_ppstg_tmp_16_reg_3051_pp0_it2;
  reg [7:0] ap_reg_ppstg_tmp_20_reg_3081_pp0_it2;
  reg ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it1;
  reg ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it2;
  reg ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it3;
  reg ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it4;
  reg ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it5;
  reg ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it6;
  reg ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it7;
  input ap_rst;
  wire ap_sig_bdd_2182;
  wire ap_sig_bdd_2187;
  wire ap_sig_bdd_22;
  wire ap_sig_bdd_527;
  wire ap_sig_bdd_90;
  wire ap_sig_bdd_98;
  wire ap_sig_cseq_ST_pp0_stg0_fsm_1;
  wire ap_sig_cseq_ST_st12_fsm_2;
  wire ap_sig_cseq_ST_st1_fsm_0;
  input ap_start;
  output [7:0] arg_0_TDATA;
  output arg_0_TLAST;
  input arg_0_TREADY;
  output arg_0_TVALID;
  wire arg_0_V_last_V_1_ack_out;
  wire arg_0_V_last_V_1_areset_d;
  reg arg_0_V_last_V_1_data_reg;
  reg arg_0_V_last_V_1_mVld = 1'b0;
  wire arg_0_V_last_V_1_sRdy;
  wire arg_0_V_last_V_1_vld_in;
  wire arg_0_V_value_V_1_ack_in;
  wire arg_0_V_value_V_1_ack_out;
  reg arg_0_V_value_V_1_areset_d;
  reg [7:0] arg_0_V_value_V_1_data_reg;
  reg arg_0_V_value_V_1_mVld = 1'b0;
  wire arg_0_V_value_V_1_sRdy;
  wire arg_0_V_value_V_1_vld_in;
  wire exitcond3_fu_485_p2;
  wire exitcond_flatten_fu_467_p2;
  reg exitcond_flatten_reg_2790;
  wire [7:0] grp_fu_2598_p1;
  wire [19:0] grp_fu_2598_p10;
  wire [19:0] grp_fu_2598_p3;
  wire [7:0] grp_fu_2606_p1;
  wire [21:0] grp_fu_2606_p10;
  wire [22:0] grp_fu_2606_p2;
  wire [23:0] grp_fu_2606_p20;
  wire [23:0] grp_fu_2606_p3;
  wire [7:0] grp_fu_2614_p1;
  wire [19:0] grp_fu_2614_p10;
  wire [19:0] grp_fu_2614_p2;
  wire [20:0] grp_fu_2614_p20;
  wire [20:0] grp_fu_2614_p3;
  wire [7:0] grp_fu_2653_p1;
  wire [20:0] grp_fu_2653_p10;
  wire [20:0] grp_fu_2653_p2;
  wire [21:0] grp_fu_2653_p20;
  wire [21:0] grp_fu_2653_p3;
  wire [7:0] grp_fu_2674_p1;
  wire [20:0] grp_fu_2674_p10;
  wire [20:0] grp_fu_2674_p3;
  wire [7:0] grp_fu_2681_p1;
  wire [19:0] grp_fu_2681_p10;
  wire [20:0] grp_fu_2681_p3;
  wire [7:0] grp_fu_2689_p1;
  wire [20:0] grp_fu_2689_p10;
  wire [21:0] grp_fu_2689_p2;
  wire [22:0] grp_fu_2689_p20;
  wire [22:0] grp_fu_2689_p3;
  wire [7:0] grp_fu_2703_p0;
  wire [8:0] grp_fu_2703_p00;
  wire [7:0] grp_fu_2703_p1;
  wire [8:0] grp_fu_2703_p10;
  wire [13:0] grp_fu_2703_p3;
  wire [7:0] grp_fu_2712_p0;
  wire [8:0] grp_fu_2712_p00;
  wire [7:0] grp_fu_2712_p1;
  wire [8:0] grp_fu_2712_p10;
  wire [14:0] grp_fu_2712_p3;
  wire [7:0] grp_fu_2721_p0;
  wire [8:0] grp_fu_2721_p00;
  wire [7:0] grp_fu_2721_p1;
  wire [8:0] grp_fu_2721_p10;
  wire [16:0] grp_fu_2721_p3;
  wire [7:0] grp_fu_2729_p0;
  wire [8:0] grp_fu_2729_p00;
  wire [7:0] grp_fu_2729_p1;
  wire [8:0] grp_fu_2729_p10;
  wire [17:0] grp_fu_2729_p3;
  wire [7:0] grp_fu_2738_p1;
  wire [19:0] grp_fu_2738_p10;
  wire [19:0] grp_fu_2738_p3;
  wire [7:0] grp_fu_2746_p0;
  wire [8:0] grp_fu_2746_p00;
  wire [7:0] grp_fu_2746_p1;
  wire [8:0] grp_fu_2746_p10;
  wire [19:0] grp_fu_2746_p3;
  wire [20:0] grp_fu_2746_p30;
  wire [20:0] grp_fu_2746_p4;
  wire [7:0] grp_fu_2757_p1;
  wire [19:0] grp_fu_2757_p10;
  wire [20:0] grp_fu_2757_p3;
  wire [7:0] grp_fu_2765_p1;
  wire [20:0] grp_fu_2765_p10;
  wire [20:0] grp_fu_2765_p2;
  wire [21:0] grp_fu_2765_p20;
  wire [21:0] grp_fu_2765_p3;
  wire [7:0] grp_fu_2773_p1;
  wire [20:0] grp_fu_2773_p10;
  wire [20:0] grp_fu_2773_p3;
  wire [7:0] grp_fu_2781_p0;
  wire [8:0] grp_fu_2781_p00;
  wire [7:0] grp_fu_2781_p1;
  wire [8:0] grp_fu_2781_p10;
  wire [18:0] grp_fu_2781_p3;
  wire [18:0] indvar_flatten_next_fu_473_p2;
  reg [18:0] indvar_flatten_reg_434;
  wire [7:0] p_111_fu_1824_p1;
  wire [14:0] p_111_fu_1824_p10;
  wire [14:0] p_111_fu_1824_p2;
  wire [7:0] p_200_fu_531_p1;
  wire [8:0] p_201_cast_cast_fu_535_p1;
  wire [7:0] p_204_fu_539_p4;
  wire [8:0] p_205_cast1_cast_fu_549_p1;
  wire [13:0] p_208_cast_fu_1602_p1;
  wire [11:0] p_208_fu_1385_p2;
  reg [11:0] p_208_reg_3189;
  reg [7:0] p_210_reg_2814;
  wire [7:0] p_213_fu_1605_p1;
  wire [13:0] p_213_fu_1605_p10;
  wire [12:0] p_213_fu_1605_p2;
  wire [14:0] p_214_cast_fu_1617_p1;
  wire [13:0] p_214_fu_1611_p2;
  reg [7:0] p_216_reg_2819;
  wire [7:0] p_219_fu_1621_p1;
  wire [14:0] p_219_fu_1621_p10;
  wire [13:0] p_219_fu_1621_p2;
  wire [15:0] p_220_cast_fu_2133_p1;
  wire [14:0] p_220_fu_1627_p2;
  reg [14:0] p_220_reg_3204;
  reg [7:0] p_222_reg_2824;
  wire [7:0] p_225_fu_1633_p1;
  wire [15:0] p_225_fu_1633_p10;
  wire [14:0] p_225_fu_1633_p2;
  reg [15:0] p_225_reg_3209;
  reg [7:0] p_228_reg_2829;
  wire [15:0] p_231_cast_fu_2136_p1;
  wire [7:0] p_231_fu_1639_p1;
  wire [14:0] p_231_fu_1639_p10;
  wire [13:0] p_231_fu_1639_p2;
  reg [14:0] p_231_reg_3214;
  reg [7:0] p_234_reg_2834;
  wire [7:0] p_237_fu_1645_p1;
  wire [13:0] p_237_fu_1645_p10;
  wire [12:0] p_237_fu_1645_p2;
  wire [7:0] p_240_fu_603_p4;
  wire [11:0] p_241_cast1_fu_613_p1;
  wire [11:0] p_243_fu_1403_p2;
  wire [7:0] p_246_fu_617_p4;
  wire [11:0] p_247_cast_cast_fu_627_p1;
  wire [16:0] p_248_cast_fu_2159_p1;
  wire [15:0] p_248_fu_2153_p2;
  reg [7:0] p_250_reg_2839;
  wire [11:0] p_251_cast1_fu_1464_p1;
  wire [14:0] p_253_cast_cast_fu_1677_p1;
  wire [11:0] p_253_fu_1671_p2;
  reg [7:0] p_256_reg_2845;
  wire [17:0] p_260_cast_fu_2172_p1;
  wire [16:0] p_260_fu_2166_p2;
  reg [7:0] p_262_reg_2850;
  wire [15:0] p_265_cast_fu_2182_p1;
  wire [7:0] p_265_fu_2176_p1;
  wire [16:0] p_265_fu_2176_p10;
  wire [15:0] p_265_fu_2176_p2;
  wire [18:0] p_266_cast_fu_2411_p1;
  wire [17:0] p_266_fu_2186_p2;
  reg [17:0] p_266_reg_3339;
  reg [7:0] p_268_reg_2855;
  wire [18:0] p_271_cast_fu_2414_p1;
  wire [7:0] p_271_fu_2192_p1;
  wire [17:0] p_271_fu_2192_p10;
  wire [16:0] p_271_fu_2192_p2;
  reg [17:0] p_271_reg_3344;
  reg [7:0] p_274_reg_2860;
  wire [7:0] p_277_fu_2198_p1;
  wire [18:0] p_277_fu_2198_p10;
  wire [17:0] p_277_fu_2198_p2;
  reg [18:0] p_277_reg_3349;
  wire [19:0] p_278_cast_fu_2428_p1;
  wire [18:0] p_278_fu_2423_p2;
  reg [7:0] p_280_reg_2865;
  wire [7:0] p_283_fu_2204_p1;
  wire [17:0] p_283_fu_2204_p10;
  wire [16:0] p_283_fu_2204_p2;
  reg [7:0] p_286_reg_2870;
  wire [8:0] p_289_cast_cast_fu_2216_p1;
  wire [7:0] p_289_fu_2210_p1;
  wire [16:0] p_289_fu_2210_p10;
  wire [1:0] p_289_fu_2210_p2;
  reg [7:0] p_292_reg_2875;
  wire [14:0] p_295_cast_cast_fu_1699_p1;
  wire [7:0] p_295_fu_1693_p1;
  wire [15:0] p_295_fu_1693_p10;
  wire [14:0] p_295_fu_1693_p2;
  reg [7:0] p_298_reg_2880;
  wire [11:0] p_299_cast1_fu_1473_p1;
  wire [13:0] p_301_cast_cast_fu_1720_p1;
  wire [11:0] p_301_fu_1714_p2;
  reg [7:0] p_304_reg_2886;
  wire [7:0] p_307_fu_1724_p1;
  wire [13:0] p_307_fu_1724_p10;
  wire [12:0] p_307_fu_1724_p2;
  reg [7:0] p_310_reg_2891;
  wire [7:0] p_313_fu_1730_p1;
  wire [16:0] p_313_fu_1730_p10;
  wire [10:0] p_313_fu_1730_p2;
  reg [7:0] p_316_reg_2896;
  wire [19:0] p_319_cast_fu_2432_p1;
  wire [7:0] p_319_fu_2220_p1;
  wire [18:0] p_319_fu_2220_p10;
  wire [17:0] p_319_fu_2220_p2;
  reg [18:0] p_319_reg_3354;
  wire [19:0] p_320_fu_2453_p2;
  reg [19:0] p_320_reg_3394;
  reg [7:0] p_322_reg_2901;
  reg [7:0] p_328_reg_2906;
  reg [7:0] p_334_reg_2911;
  wire [7:0] p_337_fu_2697_p1;
  wire [19:0] p_337_fu_2697_p10;
  wire [19:0] p_337_fu_2697_p2;
  reg [19:0] p_337_reg_3399;
  wire [20:0] p_338_fu_2480_p2;
  reg [7:0] p_340_reg_2916;
  wire [17:0] p_343_cast_cast_fu_2495_p1;
  wire [7:0] p_343_fu_2489_p1;
  wire [18:0] p_343_fu_2489_p10;
  wire [17:0] p_343_fu_2489_p2;
  reg [7:0] p_346_reg_2921;
  wire [15:0] p_349_cast_cast_fu_1764_p1;
  wire [7:0] p_349_fu_1758_p1;
  wire [16:0] p_349_fu_1758_p10;
  wire [15:0] p_349_fu_1758_p2;
  reg [7:0] p_352_reg_2926;
  wire [12:0] p_355_cast_cast_fu_1774_p1;
  wire [7:0] p_355_fu_1768_p1;
  wire [13:0] p_355_fu_1768_p10;
  wire [12:0] p_355_fu_1768_p2;
  reg [7:0] p_358_reg_2931;
  wire [7:0] p_361_fu_1778_p1;
  wire [14:0] p_361_fu_1778_p10;
  wire [13:0] p_361_fu_1778_p2;
  reg [7:0] p_364_reg_2936;
  wire [7:0] p_367_fu_1784_p1;
  wire [17:0] p_367_fu_1784_p10;
  wire [16:0] p_367_fu_1784_p2;
  reg [7:0] p_370_reg_2941;
  wire [7:0] p_373_fu_2661_p1;
  wire [19:0] p_373_fu_2661_p10;
  wire [19:0] p_373_fu_2661_p2;
  reg [7:0] p_376_reg_2946;
  wire [21:0] p_380_fu_2518_p2;
  reg [7:0] p_382_reg_2951;
  reg [7:0] p_388_reg_2956;
  reg [7:0] p_394_reg_2961;
  reg [7:0] p_400_reg_2966;
  wire [7:0] p_403_fu_1812_p1;
  wire [17:0] p_403_fu_1812_p10;
  wire [16:0] p_403_fu_1812_p2;
  reg [17:0] p_403_reg_3239;
  reg [7:0] p_406_reg_2971;
  wire [7:0] p_409_fu_1818_p1;
  wire [14:0] p_409_fu_1818_p10;
  wire [13:0] p_409_fu_1818_p2;
  reg [7:0] p_412_reg_2976;
  reg [7:0] p_418_reg_2981;
  wire [17:0] p_421_cast_cast_fu_2238_p1;
  wire [7:0] p_421_fu_2232_p1;
  wire [18:0] p_421_fu_2232_p10;
  wire [17:0] p_421_fu_2232_p2;
  reg [7:0] p_424_reg_2986;
  wire [7:0] p_427_fu_2647_p1;
  wire [19:0] p_427_fu_2647_p10;
  wire [19:0] p_427_fu_2647_p2;
  reg [19:0] p_427_reg_3244;
  reg [7:0] p_430_reg_2991;
  wire [7:0] p_433_fu_2635_p1;
  wire [20:0] p_433_fu_2635_p10;
  wire [20:0] p_433_fu_2635_p2;
  reg [20:0] p_433_reg_3249;
  wire [22:0] p_434_fu_2542_p2;
  reg [7:0] p_436_reg_2996;
  reg [7:0] p_442_reg_3001;
  reg [7:0] p_448_reg_3006;
  reg [7:0] p_454_reg_3011;
  wire [17:0] p_457_cast_cast_fu_1842_p1;
  wire [7:0] p_457_fu_1836_p1;
  wire [18:0] p_457_fu_1836_p10;
  wire [17:0] p_457_fu_1836_p2;
  reg [7:0] p_460_reg_3016;
  wire [7:0] p_463_fu_1846_p1;
  wire [15:0] p_463_fu_1846_p10;
  wire [14:0] p_463_fu_1846_p2;
  reg [7:0] p_466_reg_3021;
  wire [13:0] p_469_cast_cast_fu_1858_p1;
  wire [7:0] p_469_fu_1852_p1;
  wire [14:0] p_469_fu_1852_p10;
  wire [13:0] p_469_fu_1852_p2;
  reg [7:0] p_478_reg_3031;
  wire [7:0] p_481_fu_2623_p1;
  wire [19:0] p_481_fu_2623_p10;
  wire [19:0] p_481_fu_2623_p2;
  reg [19:0] p_481_reg_3259;
  reg [7:0] p_484_reg_3036;
  reg [7:0] p_490_reg_3041;
  wire [7:0] p_493_fu_2629_p1;
  wire [20:0] p_493_fu_2629_p10;
  wire [20:0] p_493_fu_2629_p2;
  reg [20:0] p_493_reg_3264;
  reg [7:0] p_496_reg_3046;
  wire [7:0] p_499_fu_2641_p1;
  wire [20:0] p_499_fu_2641_p10;
  wire [20:0] p_499_fu_2641_p2;
  reg [20:0] p_499_reg_3269;
  reg [7:0] p_520_reg_3066;
  wire [12:0] p_523_cast_cast_fu_1868_p1;
  wire [7:0] p_523_fu_1862_p1;
  wire [13:0] p_523_fu_1862_p10;
  wire [12:0] p_523_fu_1862_p2;
  reg [7:0] p_526_reg_3071;
  wire [15:0] p_529_cast_cast_fu_1878_p1;
  wire [7:0] p_529_fu_1872_p1;
  wire [16:0] p_529_fu_1872_p10;
  wire [15:0] p_529_fu_1872_p2;
  reg [7:0] p_544_reg_3086;
  reg [7:0] p_550_reg_3091;
  wire [7:0] p_553_fu_2668_p1;
  wire [19:0] p_553_fu_2668_p10;
  wire [19:0] p_553_fu_2668_p2;
  reg [19:0] p_553_reg_3274;
  reg [7:0] p_568_reg_3106;
  wire [12:0] p_571_cast_cast_fu_1888_p1;
  wire [7:0] p_571_fu_1882_p1;
  wire [13:0] p_571_fu_1882_p10;
  wire [12:0] p_571_fu_1882_p2;
  reg [7:0] p_574_reg_3111;
  wire [11:0] p_575_cast1_fu_1557_p1;
  wire [12:0] p_577_cast_cast_fu_1909_p1;
  wire [11:0] p_577_fu_1903_p2;
  reg [7:0] p_580_reg_3117;
  wire [7:0] p_583_fu_1913_p1;
  wire [15:0] p_583_fu_1913_p10;
  wire [14:0] p_583_fu_1913_p2;
  reg [7:0] p_592_reg_3127;
  wire [18:0] p_595_cast_cast_fu_2268_p1;
  wire [7:0] p_595_fu_1919_p1;
  wire [17:0] p_595_fu_1919_p10;
  wire [16:0] p_595_fu_1919_p2;
  reg [17:0] p_595_reg_3279;
  reg [7:0] p_598_reg_3132;
  wire [7:0] p_601_fu_1925_p1;
  wire [18:0] p_601_fu_1925_p10;
  wire [17:0] p_601_fu_1925_p2;
  reg [7:0] p_604_reg_3137;
  wire [7:0] p_607_fu_1931_p1;
  wire [17:0] p_607_fu_1931_p10;
  wire [16:0] p_607_fu_1931_p2;
  reg [7:0] p_610_reg_3142;
  wire [7:0] p_613_fu_1937_p1;
  wire [16:0] p_613_fu_1937_p10;
  wire [15:0] p_613_fu_1937_p2;
  reg [16:0] p_613_reg_3284;
  reg [7:0] p_616_reg_3147;
  wire [7:0] p_619_fu_1943_p1;
  wire [15:0] p_619_fu_1943_p10;
  wire [14:0] p_619_fu_1943_p2;
  reg [7:0] p_622_reg_3152;
  wire [11:0] p_623_cast1_fu_1581_p1;
  wire [12:0] p_625_cast_cast_fu_1966_p1;
  wire [11:0] p_625_fu_1960_p2;
  wire [7:0] p_628_fu_1261_p4;
  wire [8:0] p_629_cast_cast_fu_1271_p1;
  reg [7:0] p_632_reg_3158;
  wire [11:0] p_633_cast1_fu_1584_p1;
  wire [12:0] p_635_cast_cast_fu_1987_p1;
  wire [11:0] p_635_fu_1981_p2;
  reg [7:0] p_650_reg_3174;
  wire [7:0] p_653_fu_1991_p1;
  wire [15:0] p_653_fu_1991_p10;
  wire [14:0] p_653_fu_1991_p2;
  reg [7:0] p_656_reg_3179;
  wire [7:0] p_659_fu_1997_p1;
  wire [14:0] p_659_fu_1997_p10;
  wire [13:0] p_659_fu_1997_p2;
  wire [7:0] p_668_fu_1335_p4;
  wire [11:0] p_669_cast1_fu_1345_p1;
  wire [11:0] p_671_fu_1427_p2;
  wire [7:0] p_674_fu_1349_p4;
  wire [8:0] p_675_cast_cast_fu_1359_p1;
  wire [23:0] p_676_fu_2581_p2;
  wire [8:0] p_hw_output_1_x_scan_dim_0_1_fu_525_p2;
  wire [8:0] p_hw_output_1_x_scan_dim_0_mi_fu_491_p3;
  reg [8:0] p_hw_output_1_x_scan_dim_0_reg_456;
  wire [9:0] p_hw_output_1_y_scan_dim_1_1_fu_479_p2;
  wire [9:0] p_hw_output_1_y_scan_dim_1_mi_fu_499_p3;
  reg [9:0] p_hw_output_1_y_scan_dim_1_mi_reg_2799;
  wire [9:0] p_hw_output_1_y_scan_dim_1_phi_fu_449_p4;
  reg [9:0] p_hw_output_1_y_scan_dim_1_reg_445;
  input [647:0] p_p2_in_bounded_stencil_stream_V_value_V_dout;
  input p_p2_in_bounded_stencil_stream_V_value_V_empty_n;
  output p_p2_in_bounded_stencil_stream_V_value_V_read;
  wire [7:0] p_s_fu_1681_p1;
  wire [14:0] p_s_fu_1681_p10;
  wire [14:0] p_s_fu_1681_p2;
  wire [11:0] p_shl1_cast_fu_1399_p1;
  wire [10:0] p_shl1_fu_1391_p3;
  wire [11:0] p_shl4_cast_fu_1423_p1;
  wire [10:0] p_shl4_fu_1415_p3;
  wire [11:0] p_shl5_cast_fu_1977_p1;
  wire [10:0] p_shl5_fu_1970_p3;
  wire [11:0] p_shl6_cast_fu_1956_p1;
  wire [10:0] p_shl6_fu_1949_p3;
  wire [11:0] p_shl7_cast_fu_1899_p1;
  wire [10:0] p_shl7_fu_1892_p3;
  wire [11:0] p_shl8_cast_fu_1710_p1;
  wire [10:0] p_shl8_fu_1703_p3;
  wire [11:0] p_shl9_cast_fu_1667_p1;
  wire [10:0] p_shl9_fu_1660_p3;
  wire [11:0] p_shl_cast_fu_1371_p1;
  wire [10:0] p_shl_fu_1363_p3;
  wire [19:0] tmp10_cast_fu_2441_p1;
  wire [17:0] tmp10_fu_2226_p2;
  reg [17:0] tmp10_reg_3359;
  wire [19:0] tmp11_cast_fu_2450_p1;
  wire [16:0] tmp11_fu_1752_p2;
  reg [16:0] tmp11_reg_3229;
  wire [10:0] tmp12_fu_1736_p2;
  wire [10:0] tmp13_cast_fu_1748_p1;
  wire [3:0] tmp13_fu_1742_p2;
  wire [20:0] tmp15_cast_fu_2477_p1;
  wire [21:0] tmp16_fu_2510_p2;
  reg [21:0] tmp17_reg_3404;
  wire [21:0] tmp18_cast_fu_2507_p1;
  wire [19:0] tmp18_fu_2499_p2;
  reg [19:0] tmp18_reg_3409;
  wire [13:0] tmp19_cast_fu_2515_p1;
  wire [17:0] tmp19_fu_1806_p2;
  reg [17:0] tmp19_reg_3234;
  wire [11:0] tmp1_cast_fu_1381_p1;
  wire [8:0] tmp1_fu_1375_p2;
  wire [17:0] tmp20_fu_1790_p2;
  wire [17:0] tmp21_cast_fu_1802_p1;
  wire [14:0] tmp21_fu_1796_p2;
  wire [22:0] tmp22_fu_2534_p2;
  reg [22:0] tmp23_reg_3414;
  wire [22:0] tmp24_cast_fu_2531_p1;
  reg [20:0] tmp24_reg_3364;
  wire [22:0] tmp26_cast_fu_2539_p1;
  wire [19:0] tmp26_fu_2259_p2;
  reg [19:0] tmp26_reg_3369;
  wire [19:0] tmp27_fu_2242_p2;
  wire [19:0] tmp28_cast_fu_2255_p1;
  wire [17:0] tmp28_fu_2250_p2;
  wire [17:0] tmp29_cast_fu_2247_p1;
  wire [14:0] tmp29_fu_1830_p2;
  reg [14:0] tmp29_reg_3254;
  wire [15:0] tmp2_fu_2145_p2;
  wire [23:0] tmp30_fu_2572_p2;
  wire [23:0] tmp31_fu_2563_p2;
  wire [23:0] tmp32_fu_2555_p2;
  reg [23:0] tmp33_reg_3419;
  wire [23:0] tmp34_cast_fu_2552_p1;
  reg [21:0] tmp34_reg_3374;
  wire [23:0] tmp36_cast_fu_2560_p1;
  wire [21:0] tmp36_fu_2280_p2;
  reg [21:0] tmp36_reg_3379;
  wire [21:0] tmp37_cast_fu_2274_p1;
  wire [21:0] tmp38_cast_fu_2277_p1;
  wire [15:0] tmp3_fu_2139_p2;
  wire [23:0] tmp40_cast_fu_2569_p1;
  wire [20:0] tmp40_fu_2324_p2;
  reg [20:0] tmp40_reg_3384;
  wire [20:0] tmp41_fu_2292_p2;
  wire [20:0] tmp42_cast_fu_2286_p1;
  wire [20:0] tmp43_cast_fu_2289_p1;
  wire [19:0] tmp43_fu_2006_p2;
  reg [19:0] tmp43_reg_3289;
  wire [19:0] tmp44_cast_fu_2003_p1;
  wire [20:0] tmp45_cast_fu_2320_p1;
  wire [19:0] tmp45_fu_2314_p2;
  wire [19:0] tmp46_cast_fu_2298_p1;
  wire [18:0] tmp46_fu_2015_p2;
  reg [18:0] tmp46_reg_3294;
  wire [11:0] tmp47_cast_fu_2012_p1;
  wire [19:0] tmp48_cast_fu_2310_p1;
  wire [18:0] tmp48_fu_2304_p2;
  wire [18:0] tmp49_cast_fu_2301_p1;
  wire [17:0] tmp49_fu_2021_p2;
  reg [17:0] tmp49_reg_3299;
  wire [15:0] tmp4_cast_fu_2150_p1;
  wire [13:0] tmp4_fu_1654_p2;
  reg [13:0] tmp4_reg_3219;
  wire [23:0] tmp50_cast_fu_2578_p1;
  wire [18:0] tmp50_fu_2402_p2;
  reg [18:0] tmp50_reg_3389;
  wire [18:0] tmp51_fu_2371_p2;
  wire [18:0] tmp52_cast_fu_2351_p1;
  wire [17:0] tmp52_fu_2345_p2;
  wire [17:0] tmp53_cast_fu_2330_p1;
  reg [16:0] tmp53_reg_3304;
  wire [17:0] tmp54_cast_fu_2341_p1;
  wire [16:0] tmp54_fu_2336_p2;
  wire [16:0] tmp55_cast_fu_2333_p1;
  wire [15:0] tmp55_fu_2027_p2;
  reg [15:0] tmp55_reg_3309;
  wire [18:0] tmp56_cast_fu_2367_p1;
  wire [16:0] tmp56_fu_2361_p2;
  wire [16:0] tmp57_cast_fu_2355_p1;
  wire [15:0] tmp57_fu_2033_p2;
  reg [15:0] tmp57_reg_3314;
  wire [16:0] tmp58_cast_fu_2358_p1;
  wire [15:0] tmp58_fu_2042_p2;
  reg [15:0] tmp58_reg_3319;
  wire [15:0] tmp59_cast_fu_2039_p1;
  wire [13:0] tmp5_cast_fu_1651_p1;
  wire [11:0] tmp5_fu_1409_p2;
  reg [11:0] tmp5_reg_3194;
  wire [18:0] tmp60_cast_fu_2398_p1;
  wire [15:0] tmp60_fu_2392_p2;
  wire [15:0] tmp61_fu_2383_p2;
  wire [15:0] tmp62_cast_fu_2377_p1;
  wire [14:0] tmp62_fu_2048_p2;
  reg [14:0] tmp62_reg_3324;
  wire [15:0] tmp63_cast_fu_2380_p1;
  wire [14:0] tmp63_fu_2057_p2;
  reg [14:0] tmp63_reg_3329;
  wire [14:0] tmp64_cast_fu_2054_p1;
  wire [15:0] tmp65_cast_fu_2389_p1;
  wire [13:0] tmp65_fu_2082_p2;
  reg [13:0] tmp65_reg_3334;
  wire [13:0] tmp66_cast_fu_2075_p1;
  wire [12:0] tmp66_fu_2069_p2;
  wire [12:0] tmp67_fu_2063_p2;
  wire [13:0] tmp68_cast_fu_2079_p1;
  wire [11:0] tmp68_fu_1443_p2;
  reg [11:0] tmp68_reg_3199;
  wire [11:0] tmp69_cast_fu_1439_p1;
  wire [8:0] tmp69_fu_1433_p2;
  wire [16:0] tmp6_cast_fu_2163_p1;
  wire [14:0] tmp6_fu_1687_p2;
  reg [14:0] tmp6_reg_3224;
  wire [18:0] tmp7_fu_2417_p2;
  wire [19:0] tmp8_fu_2444_p2;
  wire [19:0] tmp9_fu_2435_p2;
  reg [7:0] tmp_15_reg_3026;
  reg [7:0] tmp_16_reg_3051;
  reg [7:0] tmp_17_reg_3056;
  reg [7:0] tmp_18_reg_3061;
  reg [7:0] tmp_19_reg_3076;
  reg [7:0] tmp_20_reg_3081;
  reg [7:0] tmp_21_reg_3096;
  reg [7:0] tmp_22_reg_3101;
  reg [7:0] tmp_23_reg_3122;
  reg [7:0] tmp_24_reg_3164;
  reg [7:0] tmp_25_reg_3169;
  reg [7:0] tmp_26_reg_3184;
  wire tmp_5_fu_513_p2;
  wire tmp_fu_507_p2;
  wire tmp_last_V_fu_519_p2;
  reg tmp_last_V_reg_2804;
  assign indvar_flatten_next_fu_473_p2 = indvar_flatten_reg_434 + 1'b1;
  wire [10:0] fangyuan6;
  assign fangyuan6 = { p_p2_in_bounded_stencil_stream_V_value_V_dout[15:8], 3'b000 };
  assign p_208_fu_1385_p2 = fangyuan6 + tmp1_fu_1375_p2;
  assign p_214_fu_1611_p2 = p_208_reg_3189 + p_213_fu_1605_p2;
  assign p_220_fu_1627_p2 = p_214_fu_1611_p2 + p_219_fu_1621_p2;
  wire [10:0] fangyuan7;
  assign fangyuan7 = { p_p2_in_bounded_stencil_stream_V_value_V_dout[63:56], 3'b000 };
  assign p_243_fu_1403_p2 = p_p2_in_bounded_stencil_stream_V_value_V_dout[63:56] + fangyuan7;
  assign p_248_fu_2153_p2 = tmp2_fu_2145_p2 + tmp4_reg_3219;
  wire [10:0] fangyuan8;
  assign fangyuan8 = { p_250_reg_2839, 3'b000 };
  assign p_253_fu_1671_p2 = p_250_reg_2839 + fangyuan8;
  assign p_260_fu_2166_p2 = p_248_fu_2153_p2 + tmp6_reg_3224;
  assign p_266_fu_2186_p2 = p_260_fu_2166_p2 + p_265_cast_fu_2182_p1;
  assign p_278_fu_2423_p2 = p_277_reg_3349 + tmp7_fu_2417_p2;
  wire [10:0] fangyuan9;
  assign fangyuan9 = { p_298_reg_2880, 3'b000 };
  assign p_301_fu_1714_p2 = p_298_reg_2880 + fangyuan9;
  assign p_320_fu_2453_p2 = tmp8_fu_2444_p2 + ap_reg_ppstg_tmp11_reg_3229_pp0_it3;
  assign grp_fu_2653_p2 = grp_fu_2614_p3 + grp_fu_2598_p3;
  assign grp_fu_2689_p2 = tmp16_fu_2510_p2 + ap_reg_ppstg_tmp19_reg_3234_pp0_it5;
  assign grp_fu_2606_p2 = tmp22_fu_2534_p2 + ap_reg_ppstg_tmp26_reg_3369_pp0_it6;
  wire [10:0] fangyuan10;
  assign fangyuan10 = { p_574_reg_3111, 3'b000 };
  assign p_577_fu_1903_p2 = p_574_reg_3111 + fangyuan10;
  wire [10:0] fangyuan11;
  assign fangyuan11 = { p_622_reg_3152, 3'b000 };
  assign p_625_fu_1960_p2 = p_622_reg_3152 + fangyuan11;
  wire [10:0] fangyuan12;
  assign fangyuan12 = { p_632_reg_3158, 3'b000 };
  assign p_635_fu_1981_p2 = p_632_reg_3158 + fangyuan12;
  wire [10:0] fangyuan13;
  assign fangyuan13 = { p_p2_in_bounded_stencil_stream_V_value_V_dout[639:632], 3'b000 };
  assign p_671_fu_1427_p2 = p_p2_in_bounded_stencil_stream_V_value_V_dout[639:632] + fangyuan13;
  assign p_676_fu_2581_p2 = tmp30_fu_2572_p2 + ap_reg_ppstg_tmp50_reg_3389_pp0_it7;
  assign p_hw_output_1_x_scan_dim_0_1_fu_525_p2 = 1'b1 + p_hw_output_1_x_scan_dim_0_mi_fu_491_p3;
  assign p_hw_output_1_y_scan_dim_1_1_fu_479_p2 = 1'b1 + p_hw_output_1_y_scan_dim_1_phi_fu_449_p4;
  wire [15:0] fangyuan14;
  assign fangyuan14 = { _0267_[15:9], p_289_cast_cast_fu_2216_p1 };
  assign tmp10_fu_2226_p2 = fangyuan14 + p_283_fu_2204_p2;
  wire [16:0] fangyuan15;
  assign fangyuan15 = { _0269_[16:11], tmp12_fu_1736_p2 };
  wire [13:0] fangyuan16;
  assign fangyuan16 = { _0270_[13:11], tmp13_cast_fu_1748_p1 };
  assign tmp11_fu_1752_p2 = fangyuan15 + fangyuan16;
  wire [16:0] fangyuan17;
  assign { _0269_[16:11], tmp12_fu_1736_p2 } = fangyuan17;
  wire [15:0] fangyuan18;
  assign fangyuan18 = { _0268_[15:11], p_313_fu_1730_p2 };
  assign fangyuan17 = p_295_cast_cast_fu_1699_p1 + fangyuan18;
  wire [13:0] fangyuan19;
  assign { _0270_[13:11], tmp13_cast_fu_1748_p1 } = fangyuan19;
  assign fangyuan19 = p_301_fu_1714_p2 + p_307_fu_1724_p2;
  assign tmp16_fu_2510_p2 = tmp17_reg_3404 + tmp18_reg_3409;
  assign tmp18_fu_2499_p2 = p_343_cast_cast_fu_2495_p1 + p_373_fu_2661_p2;
  assign tmp19_fu_1806_p2 = tmp20_fu_1790_p2 + tmp21_fu_1796_p2;
  assign tmp1_fu_1375_p2 = p_p2_in_bounded_stencil_stream_V_value_V_dout[7:0] + p_p2_in_bounded_stencil_stream_V_value_V_dout[15:8];
  assign tmp20_fu_1790_p2 = p_349_cast_cast_fu_1764_p1 + p_367_fu_1784_p2;
  assign tmp21_fu_1796_p2 = p_355_cast_cast_fu_1774_p1 + p_361_fu_1778_p2;
  assign tmp22_fu_2534_p2 = tmp23_reg_3414 + ap_reg_ppstg_tmp24_reg_3364_pp0_it6;
  assign tmp26_fu_2259_p2 = tmp27_fu_2242_p2 + tmp28_fu_2250_p2;
  assign tmp27_fu_2242_p2 = p_421_cast_cast_fu_2238_p1 + p_427_reg_3244;
  assign tmp28_fu_2250_p2 = p_403_reg_3239 + tmp29_reg_3254;
  assign tmp29_fu_1830_p2 = p_409_fu_1818_p2 + p_111_fu_1824_p2;
  assign tmp2_fu_2145_p2 = p_225_reg_3209 + tmp3_fu_2139_p2;
  assign tmp30_fu_2572_p2 = tmp31_fu_2563_p2 + ap_reg_ppstg_tmp40_reg_3384_pp0_it7;
  assign tmp31_fu_2563_p2 = tmp32_fu_2555_p2 + ap_reg_ppstg_tmp36_reg_3379_pp0_it7;
  assign tmp32_fu_2555_p2 = tmp33_reg_3419 + ap_reg_ppstg_tmp34_reg_3374_pp0_it7;
  assign tmp36_fu_2280_p2 = grp_fu_2757_p3 + grp_fu_2746_p4;
  assign tmp3_fu_2139_p2 = p_231_reg_3214 + p_220_reg_3204;
  assign tmp40_fu_2324_p2 = tmp41_fu_2292_p2 + tmp45_fu_2314_p2;
  assign tmp41_fu_2292_p2 = grp_fu_2738_p3 + tmp43_reg_3289;
  assign tmp43_fu_2006_p2 = p_457_cast_cast_fu_1842_p1 + grp_fu_2781_p3;
  assign tmp45_fu_2314_p2 = tmp46_reg_3294 + tmp48_fu_2304_p2;
  assign tmp46_fu_2015_p2 = p_601_fu_1925_p2 + grp_fu_2729_p3;
  assign tmp48_fu_2304_p2 = p_595_reg_3279 + tmp49_reg_3299;
  assign tmp49_fu_2021_p2 = p_529_cast_cast_fu_1878_p1 + p_607_fu_1931_p2;
  assign tmp4_fu_1654_p2 = p_237_fu_1645_p2 + tmp5_reg_3194;
  assign tmp50_fu_2402_p2 = tmp51_fu_2371_p2 + tmp60_fu_2392_p2;
  assign tmp51_fu_2371_p2 = tmp52_fu_2345_p2 + tmp56_fu_2361_p2;
  assign tmp52_fu_2345_p2 = tmp53_reg_3304 + tmp54_fu_2336_p2;
  assign tmp54_fu_2336_p2 = p_613_reg_3284 + tmp55_reg_3309;
  assign tmp55_fu_2027_p2 = p_583_fu_1913_p2 + p_463_fu_1846_p2;
  assign tmp56_fu_2361_p2 = tmp57_reg_3314 + tmp58_reg_3319;
  assign tmp57_fu_2033_p2 = p_653_fu_1991_p2 + p_619_fu_1943_p2;
  assign tmp58_fu_2042_p2 = p_469_cast_cast_fu_1858_p1 + grp_fu_2712_p3;
  assign tmp5_fu_1409_p2 = p_p2_in_bounded_stencil_stream_V_value_V_dout[71:64] + p_243_fu_1403_p2;
  assign tmp60_fu_2392_p2 = tmp61_fu_2383_p2 + tmp65_reg_3334;
  assign tmp61_fu_2383_p2 = tmp62_reg_3324 + tmp63_reg_3329;
  assign tmp62_fu_2048_p2 = p_523_cast_cast_fu_1868_p1 + p_659_fu_1997_p2;
  assign tmp63_fu_2057_p2 = p_571_cast_cast_fu_1888_p1 + grp_fu_2703_p3;
  assign tmp65_fu_2082_p2 = tmp66_fu_2069_p2 + tmp68_reg_3199;
  assign tmp66_fu_2069_p2 = p_577_fu_1903_p2 + tmp67_fu_2063_p2;
  assign tmp67_fu_2063_p2 = p_635_fu_1981_p2 + p_625_fu_1960_p2;
  assign tmp68_fu_1443_p2 = p_671_fu_1427_p2 + tmp69_fu_1433_p2;
  assign tmp69_fu_1433_p2 = p_p2_in_bounded_stencil_stream_V_value_V_dout[647:640] + p_p2_in_bounded_stencil_stream_V_value_V_dout[583:576];
  assign tmp6_fu_1687_p2 = p_253_fu_1671_p2 + p_s_fu_1681_p2;
  assign tmp7_fu_2417_p2 = p_266_reg_3339 + p_271_reg_3344;
  assign tmp8_fu_2444_p2 = tmp9_fu_2435_p2 + tmp10_reg_3359;
  assign tmp9_fu_2435_p2 = p_319_reg_3354 + p_278_fu_2423_p2;
  assign _0229_ = ap_sig_bdd_98 & ap_reg_ppiten_pp0_it1;
  assign _0235_ = _0234_ & exitcond_flatten_fu_467_p2;
  assign _0236_ = ap_CS_fsm[0] & _0288_;
  assign _0238_ = ap_CS_fsm[1] & ap_reg_ppiten_pp0_it0;
  assign _0240_ = _0239_ & _0274_;
  assign p_p2_in_bounded_stencil_stream_V_value_V_read = _0242_ & _0287_;
  assign _0234_ = ap_CS_fsm[1] & _0287_;
  assign _0243_ = arg_0_V_last_V_1_vld_in & arg_0_V_last_V_1_sRdy;
  assign _0244_ = arg_0_V_last_V_1_vld_in & arg_0_V_value_V_1_ack_in;
  assign _0245_ = _0241_ & _0287_;
  assign _0246_ = _0287_ & _0276_;
  assign _0247_ = _0287_ & _0277_;
  assign _0248_ = _0287_ & _0278_;
  assign _0230_ = _0271_ & _0272_;
  assign _0231_ = _0230_ & ap_reg_ppiten_pp0_it8;
  assign _0232_ = _0272_ & _0273_;
  assign _0233_ = _0232_ & ap_reg_ppiten_pp0_it9;
  assign _0239_ = _0238_ & _0287_;
  assign _0249_ = ap_reg_ppiten_pp0_it5 & _0287_;
  assign _0250_ = _0249_ & _0279_;
  assign _0251_ = _0287_ & _0279_;
  assign _0252_ = ap_reg_ppiten_pp0_it6 & _0287_;
  assign _0253_ = _0252_ & _0280_;
  assign _0254_ = ap_reg_ppiten_pp0_it3 & _0287_;
  assign _0255_ = _0254_ & _0277_;
  assign _0256_ = ap_reg_ppiten_pp0_it7 & _0287_;
  assign _0257_ = _0256_ & _0281_;
  assign _0258_ = ap_reg_ppiten_pp0_it2 & _0287_;
  assign _0259_ = _0258_ & _0276_;
  assign _0237_ = _0234_ & _0274_;
  assign ap_ready = ap_CS_fsm[2] & _0286_;
  assign ap_idle = _0283_ & ap_CS_fsm[0];
  assign _0260_ = _0271_ & ap_reg_ppiten_pp0_it8;
  assign arg_0_V_last_V_1_vld_in = _0260_ & _0287_;
  assign _0241_ = ap_CS_fsm[1] & _0275_;
  assign _0242_ = _0241_ & ap_reg_ppiten_pp0_it1;
  assign _0266_ = _0290_ & _0292_;
  assign _0261_ = ap_reg_ppiten_pp0_it9 & _0287_;
  assign _0262_ = _0261_ & _0289_;
  assign _0263_ = ap_reg_ppiten_pp0_it0 & _0287_;
  assign _0264_ = _0263_ & exitcond_flatten_fu_467_p2;
  assign _0265_ = _0264_ & _0291_;
  assign ap_sig_bdd_98 = _0284_ & _0275_;
  assign arg_0_V_last_V_1_sRdy = _0293_ & _0300_;
  assign arg_0_V_value_V_1_ack_in = _0293_ & _0301_;
  assign tmp_last_V_fu_519_p2 = tmp_5_fu_513_p2 & tmp_fu_507_p2;
  assign _0271_ = ~ ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it7;
  assign _0272_ = ~ arg_0_V_value_V_1_ack_in;
  assign _0273_ = ~ ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it8;
  assign _0274_ = ~ exitcond_flatten_fu_467_p2;
  assign _0275_ = ~ exitcond_flatten_reg_2790;
  assign _0276_ = ~ ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it1;
  assign _0277_ = ~ ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it2;
  assign _0278_ = ~ ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it3;
  assign _0279_ = ~ ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it4;
  assign _0280_ = ~ ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it5;
  assign _0281_ = ~ ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it6;
  assign _0282_ = ~ arg_0_V_last_V_1_sRdy;
  assign _0283_ = ~ ap_start;
  assign _0284_ = ~ p_p2_in_bounded_stencil_stream_V_value_V_empty_n;
  assign exitcond3_fu_485_p2 = p_hw_output_1_x_scan_dim_0_reg_456 == 9'b111100000;
  assign exitcond_flatten_fu_467_p2 = indvar_flatten_reg_434 == 19'b1001011000000000000;
  assign tmp_5_fu_513_p2 = p_hw_output_1_x_scan_dim_0_mi_fu_491_p3 == 9'b111011111;
  assign tmp_fu_507_p2 = p_hw_output_1_y_scan_dim_1_mi_fu_499_p3 == 10'b1001111111;
  assign _0285_ = exitcond3_fu_485_p2 === 1'b1;
  assign p_111_fu_1824_p2 = 7'b1000011 * p_412_reg_2976;
  assign p_213_fu_1605_p2 = 5'b11011 * p_210_reg_2814;
  assign p_219_fu_1621_p2 = 6'b110110 * p_216_reg_2819;
  assign p_225_fu_1633_p2 = 7'b1000011 * p_222_reg_2824;
  assign p_231_fu_1639_p2 = 6'b110110 * p_228_reg_2829;
  assign p_237_fu_1645_p2 = 5'b11011 * p_234_reg_2834;
  assign p_265_cast_fu_2182_p1 = 8'b11110011 * ap_reg_ppstg_p_262_reg_2850_pp0_it2;
  assign p_271_fu_2192_p2 = 9'b111100110 * ap_reg_ppstg_p_268_reg_2855_pp0_it2;
  assign p_277_fu_2198_p2 = 10'b1001011011 * ap_reg_ppstg_p_274_reg_2860_pp0_it2;
  assign p_283_fu_2204_p2 = 9'b111100110 * ap_reg_ppstg_p_280_reg_2865_pp0_it2;
  wire [15:0] fangyuan20;
  assign { _0267_[15:9], p_289_cast_cast_fu_2216_p1 } = fangyuan20;
  assign fangyuan20 = 8'b11110011 * ap_reg_ppstg_p_286_reg_2870_pp0_it2;
  assign p_295_cast_cast_fu_1699_p1 = 7'b1010001 * p_292_reg_2875;
  assign p_307_fu_1724_p2 = 5'b11011 * p_304_reg_2886;
  wire [15:0] fangyuan21;
  assign { _0268_[15:11], p_313_fu_1730_p2 } = fangyuan21;
  assign fangyuan21 = 8'b11110011 * p_310_reg_2891;
  assign p_319_fu_2220_p2 = 10'b1011011001 * ap_reg_ppstg_p_316_reg_2896_pp0_it2;
  assign p_343_cast_cast_fu_2495_p1 = 10'b1011011001 * ap_reg_ppstg_p_340_reg_2916_pp0_it4;
  assign p_349_cast_cast_fu_1764_p1 = 8'b11110011 * p_346_reg_2921;
  assign p_355_cast_cast_fu_1774_p1 = 5'b11011 * p_352_reg_2926;
  assign p_361_fu_1778_p2 = 6'b110110 * p_358_reg_2931;
  assign p_367_fu_1784_p2 = 9'b111100110 * p_364_reg_2936;
  assign p_403_fu_1812_p2 = 9'b111100110 * p_400_reg_2966;
  assign p_409_fu_1818_p2 = 6'b110110 * p_406_reg_2971;
  assign p_421_cast_cast_fu_2238_p1 = 10'b1001011011 * ap_reg_ppstg_p_418_reg_2981_pp0_it2;
  assign p_457_cast_cast_fu_1842_p1 = 10'b1001011011 * p_454_reg_3011;
  assign p_463_fu_1846_p2 = 7'b1000011 * p_460_reg_3016;
  assign p_469_cast_cast_fu_1858_p1 = 6'b110110 * p_466_reg_3021;
  assign p_523_cast_cast_fu_1868_p1 = 5'b11011 * p_520_reg_3066;
  assign p_529_cast_cast_fu_1878_p1 = 8'b11110011 * p_526_reg_3071;
  assign p_571_cast_cast_fu_1888_p1 = 5'b11011 * p_568_reg_3106;
  assign p_583_fu_1913_p2 = 7'b1010001 * p_580_reg_3117;
  assign p_595_fu_1919_p2 = 9'b111100110 * p_592_reg_3127;
  assign p_601_fu_1925_p2 = 10'b1001011011 * p_598_reg_3132;
  assign p_607_fu_1931_p2 = 9'b111100110 * p_604_reg_3137;
  assign p_613_fu_1937_p2 = 8'b11110011 * p_610_reg_3142;
  assign p_619_fu_1943_p2 = 7'b1010001 * p_616_reg_3147;
  assign p_653_fu_1991_p2 = 7'b1000011 * p_650_reg_3174;
  assign p_659_fu_1997_p2 = 6'b110110 * p_656_reg_3179;
  assign p_s_fu_1681_p2 = 7'b1010001 * p_256_reg_2845;
  assign _0286_ = ~ ap_sig_bdd_2187;
  assign _0287_ = ~ _0297_;
  assign _0288_ = ~ ap_sig_bdd_527;
  assign _0289_ = ~ ap_reg_ppiten_pp0_it8;
  assign _0290_ = ~ _0262_;
  assign _0291_ = ~ ap_reg_ppiten_pp0_it1;
  assign _0292_ = ~ _0265_;
  assign _0293_ = ~ arg_0_V_value_V_1_areset_d;
  assign _0294_ = ~ arg_0_V_last_V_1_mVld;
  assign _0295_ = ~ arg_0_V_value_V_1_mVld;
  assign _0296_ = _0229_ | _0231_;
  assign _0297_ = _0296_ | _0233_;
  assign _0298_ = _0236_ | _0235_;
  assign ap_done = ap_done_reg | ap_ready;
  assign _0299_ = _0262_ | _0265_;
  assign ap_sig_bdd_2187 = _0272_ | _0282_;
  assign ap_sig_bdd_527 = _0283_ | ap_done_reg;
  assign _0300_ = arg_0_TREADY | _0294_;
  assign _0301_ = arg_0_TREADY | _0295_;
  always @(posedge ap_clk)
      tmp_last_V_reg_2804 <= _0224_;
  always @(posedge ap_clk)
      tmp53_reg_3304 <= _0202_;
  always @(posedge ap_clk)
      tmp33_reg_3419 <= _0193_;
  always @(posedge ap_clk)
      tmp24_reg_3364 <= _0190_;
  always @(posedge ap_clk)
      tmp34_reg_3374 <= _0194_;
  always @(posedge ap_clk)
      tmp23_reg_3414 <= _0189_;
  always @(posedge ap_clk)
      tmp18_reg_3409 <= _0187_;
  always @(posedge ap_clk)
      tmp17_reg_3404 <= _0186_;
  always @(posedge ap_clk)
      p_hw_output_1_y_scan_dim_1_mi_reg_2799 <= _0182_;
  always @(posedge ap_clk)
      p_320_reg_3394 <= _0125_;
  always @(posedge ap_clk)
      p_337_reg_3399 <= _0129_;
  always @(posedge ap_clk)
      p_266_reg_3339 <= _0112_;
  always @(posedge ap_clk)
      p_271_reg_3344 <= _0114_;
  always @(posedge ap_clk)
      p_277_reg_3349 <= _0116_;
  always @(posedge ap_clk)
      p_319_reg_3354 <= _0124_;
  always @(posedge ap_clk)
      tmp10_reg_3359 <= _0184_;
  always @(posedge ap_clk)
      tmp26_reg_3369 <= _0191_;
  always @(posedge ap_clk)
      tmp36_reg_3379 <= _0195_;
  always @(posedge ap_clk)
      tmp40_reg_3384 <= _0196_;
  always @(posedge ap_clk)
      tmp50_reg_3389 <= _0201_;
  always @(posedge ap_clk)
      p_220_reg_3204 <= _0103_;
  always @(posedge ap_clk)
      p_225_reg_3209 <= _0105_;
  always @(posedge ap_clk)
      p_231_reg_3214 <= _0107_;
  always @(posedge ap_clk)
      tmp4_reg_3219 <= _0200_;
  always @(posedge ap_clk)
      tmp6_reg_3224 <= _0211_;
  always @(posedge ap_clk)
      tmp11_reg_3229 <= _0185_;
  always @(posedge ap_clk)
      tmp19_reg_3234 <= _0188_;
  always @(posedge ap_clk)
      p_403_reg_3239 <= _0141_;
  always @(posedge ap_clk)
      p_427_reg_3244 <= _0146_;
  always @(posedge ap_clk)
      p_433_reg_3249 <= _0148_;
  always @(posedge ap_clk)
      tmp29_reg_3254 <= _0192_;
  always @(posedge ap_clk)
      p_481_reg_3259 <= _0156_;
  always @(posedge ap_clk)
      p_493_reg_3264 <= _0159_;
  always @(posedge ap_clk)
      p_499_reg_3269 <= _0161_;
  always @(posedge ap_clk)
      p_553_reg_3274 <= _0166_;
  always @(posedge ap_clk)
      p_595_reg_3279 <= _0171_;
  always @(posedge ap_clk)
      p_613_reg_3284 <= _0175_;
  always @(posedge ap_clk)
      tmp43_reg_3289 <= _0197_;
  always @(posedge ap_clk)
      tmp46_reg_3294 <= _0198_;
  always @(posedge ap_clk)
      tmp49_reg_3299 <= _0199_;
  always @(posedge ap_clk)
      tmp55_reg_3309 <= _0203_;
  always @(posedge ap_clk)
      tmp57_reg_3314 <= _0204_;
  always @(posedge ap_clk)
      tmp58_reg_3319 <= _0205_;
  always @(posedge ap_clk)
      tmp62_reg_3324 <= _0207_;
  always @(posedge ap_clk)
      tmp63_reg_3329 <= _0208_;
  always @(posedge ap_clk)
      tmp65_reg_3334 <= _0209_;
  always @(posedge ap_clk)
      p_210_reg_2814 <= _0101_;
  always @(posedge ap_clk)
      p_216_reg_2819 <= _0102_;
  always @(posedge ap_clk)
      p_222_reg_2824 <= _0104_;
  always @(posedge ap_clk)
      p_228_reg_2829 <= _0106_;
  always @(posedge ap_clk)
      p_234_reg_2834 <= _0108_;
  always @(posedge ap_clk)
      p_250_reg_2839 <= _0109_;
  always @(posedge ap_clk)
      p_256_reg_2845 <= _0110_;
  always @(posedge ap_clk)
      p_262_reg_2850 <= _0111_;
  always @(posedge ap_clk)
      p_268_reg_2855 <= _0113_;
  always @(posedge ap_clk)
      p_274_reg_2860 <= _0115_;
  always @(posedge ap_clk)
      p_280_reg_2865 <= _0117_;
  always @(posedge ap_clk)
      p_286_reg_2870 <= _0118_;
  always @(posedge ap_clk)
      p_292_reg_2875 <= _0119_;
  always @(posedge ap_clk)
      p_298_reg_2880 <= _0120_;
  always @(posedge ap_clk)
      p_304_reg_2886 <= _0121_;
  always @(posedge ap_clk)
      p_310_reg_2891 <= _0122_;
  always @(posedge ap_clk)
      p_316_reg_2896 <= _0123_;
  always @(posedge ap_clk)
      p_322_reg_2901 <= _0126_;
  always @(posedge ap_clk)
      p_328_reg_2906 <= _0127_;
  always @(posedge ap_clk)
      p_334_reg_2911 <= _0128_;
  always @(posedge ap_clk)
      p_340_reg_2916 <= _0130_;
  always @(posedge ap_clk)
      p_346_reg_2921 <= _0131_;
  always @(posedge ap_clk)
      p_352_reg_2926 <= _0132_;
  always @(posedge ap_clk)
      p_358_reg_2931 <= _0133_;
  always @(posedge ap_clk)
      p_364_reg_2936 <= _0134_;
  always @(posedge ap_clk)
      p_370_reg_2941 <= _0135_;
  always @(posedge ap_clk)
      p_376_reg_2946 <= _0136_;
  always @(posedge ap_clk)
      p_382_reg_2951 <= _0137_;
  always @(posedge ap_clk)
      p_388_reg_2956 <= _0138_;
  always @(posedge ap_clk)
      p_394_reg_2961 <= _0139_;
  always @(posedge ap_clk)
      p_400_reg_2966 <= _0140_;
  always @(posedge ap_clk)
      p_406_reg_2971 <= _0142_;
  always @(posedge ap_clk)
      p_412_reg_2976 <= _0143_;
  always @(posedge ap_clk)
      p_418_reg_2981 <= _0144_;
  always @(posedge ap_clk)
      p_424_reg_2986 <= _0145_;
  always @(posedge ap_clk)
      p_430_reg_2991 <= _0147_;
  always @(posedge ap_clk)
      p_436_reg_2996 <= _0149_;
  always @(posedge ap_clk)
      p_442_reg_3001 <= _0150_;
  always @(posedge ap_clk)
      p_448_reg_3006 <= _0151_;
  always @(posedge ap_clk)
      p_454_reg_3011 <= _0152_;
  always @(posedge ap_clk)
      p_460_reg_3016 <= _0153_;
  always @(posedge ap_clk)
      p_466_reg_3021 <= _0154_;
  always @(posedge ap_clk)
      tmp_15_reg_3026 <= _0212_;
  always @(posedge ap_clk)
      p_478_reg_3031 <= _0155_;
  always @(posedge ap_clk)
      p_484_reg_3036 <= _0157_;
  always @(posedge ap_clk)
      p_490_reg_3041 <= _0158_;
  always @(posedge ap_clk)
      p_496_reg_3046 <= _0160_;
  always @(posedge ap_clk)
      tmp_16_reg_3051 <= _0213_;
  always @(posedge ap_clk)
      tmp_17_reg_3056 <= _0214_;
  always @(posedge ap_clk)
      tmp_18_reg_3061 <= _0215_;
  always @(posedge ap_clk)
      p_520_reg_3066 <= _0162_;
  always @(posedge ap_clk)
      p_526_reg_3071 <= _0163_;
  always @(posedge ap_clk)
      tmp_19_reg_3076 <= _0216_;
  always @(posedge ap_clk)
      tmp_20_reg_3081 <= _0217_;
  always @(posedge ap_clk)
      p_544_reg_3086 <= _0164_;
  always @(posedge ap_clk)
      p_550_reg_3091 <= _0165_;
  always @(posedge ap_clk)
      tmp_21_reg_3096 <= _0218_;
  always @(posedge ap_clk)
      tmp_22_reg_3101 <= _0219_;
  always @(posedge ap_clk)
      p_568_reg_3106 <= _0167_;
  always @(posedge ap_clk)
      p_574_reg_3111 <= _0168_;
  always @(posedge ap_clk)
      p_580_reg_3117 <= _0169_;
  always @(posedge ap_clk)
      tmp_23_reg_3122 <= _0220_;
  always @(posedge ap_clk)
      p_592_reg_3127 <= _0170_;
  always @(posedge ap_clk)
      p_598_reg_3132 <= _0172_;
  always @(posedge ap_clk)
      p_604_reg_3137 <= _0173_;
  always @(posedge ap_clk)
      p_610_reg_3142 <= _0174_;
  always @(posedge ap_clk)
      p_616_reg_3147 <= _0176_;
  always @(posedge ap_clk)
      p_622_reg_3152 <= _0177_;
  always @(posedge ap_clk)
      p_632_reg_3158 <= _0178_;
  always @(posedge ap_clk)
      tmp_24_reg_3164 <= _0221_;
  always @(posedge ap_clk)
      tmp_25_reg_3169 <= _0222_;
  always @(posedge ap_clk)
      p_650_reg_3174 <= _0179_;
  always @(posedge ap_clk)
      p_656_reg_3179 <= _0180_;
  always @(posedge ap_clk)
      tmp_26_reg_3184 <= _0223_;
  always @(posedge ap_clk)
      p_208_reg_3189 <= _0100_;
  always @(posedge ap_clk)
      tmp5_reg_3194 <= _0206_;
  always @(posedge ap_clk)
      tmp68_reg_3199 <= _0210_;
  always @(posedge ap_clk)
      arg_0_V_value_V_1_data_reg <= _0096_;
  always @(posedge ap_clk)
      arg_0_V_last_V_1_data_reg <= _0094_;
  always @(posedge ap_clk)
      arg_0_V_value_V_1_areset_d <= ap_rst;
  always @(posedge ap_clk)
      ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it7 <= _0018_;
  always @(posedge ap_clk)
      ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it8 <= _0019_;
  always @(posedge ap_clk)
      ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it2 <= _0013_;
  always @(posedge ap_clk)
      ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it3 <= _0014_;
  always @(posedge ap_clk)
      ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it4 <= _0015_;
  always @(posedge ap_clk)
      ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it5 <= _0016_;
  always @(posedge ap_clk)
      ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it6 <= _0017_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it2 <= _0088_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it3 <= _0089_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it4 <= _0090_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it5 <= _0091_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it6 <= _0092_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it7 <= _0093_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_262_reg_2850_pp0_it2 <= _0020_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_268_reg_2855_pp0_it2 <= _0021_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_274_reg_2860_pp0_it2 <= _0022_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_280_reg_2865_pp0_it2 <= _0023_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_286_reg_2870_pp0_it2 <= _0024_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_316_reg_2896_pp0_it2 <= _0025_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_322_reg_2901_pp0_it2 <= _0026_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_322_reg_2901_pp0_it3 <= _0027_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_322_reg_2901_pp0_it4 <= _0028_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_328_reg_2906_pp0_it2 <= _0029_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_328_reg_2906_pp0_it3 <= _0030_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_328_reg_2906_pp0_it4 <= _0031_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_334_reg_2911_pp0_it2 <= _0032_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_334_reg_2911_pp0_it3 <= _0033_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_340_reg_2916_pp0_it2 <= _0034_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_340_reg_2916_pp0_it3 <= _0035_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_340_reg_2916_pp0_it4 <= _0036_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_370_reg_2941_pp0_it2 <= _0037_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_370_reg_2941_pp0_it3 <= _0038_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_370_reg_2941_pp0_it4 <= _0039_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_376_reg_2946_pp0_it2 <= _0040_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_376_reg_2946_pp0_it3 <= _0041_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_376_reg_2946_pp0_it4 <= _0042_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_382_reg_2951_pp0_it2 <= _0043_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_382_reg_2951_pp0_it3 <= _0044_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_382_reg_2951_pp0_it4 <= _0045_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_382_reg_2951_pp0_it5 <= _0046_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_388_reg_2956_pp0_it2 <= _0047_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_394_reg_2961_pp0_it2 <= _0048_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_418_reg_2981_pp0_it2 <= _0049_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_436_reg_2996_pp0_it2 <= _0050_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_436_reg_2996_pp0_it3 <= _0051_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_436_reg_2996_pp0_it4 <= _0052_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_436_reg_2996_pp0_it5 <= _0053_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_436_reg_2996_pp0_it6 <= _0054_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_442_reg_3001_pp0_it2 <= _0055_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_448_reg_3006_pp0_it2 <= _0056_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_484_reg_3036_pp0_it2 <= _0057_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp_16_reg_3051_pp0_it2 <= _0085_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp_20_reg_3081_pp0_it2 <= _0086_;
  always @(posedge ap_clk)
      ap_reg_ppstg_p_544_reg_3086_pp0_it2 <= _0058_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp11_reg_3229_pp0_it3 <= _0059_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp19_reg_3234_pp0_it3 <= _0060_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp19_reg_3234_pp0_it4 <= _0061_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp19_reg_3234_pp0_it5 <= _0062_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp24_reg_3364_pp0_it4 <= _0063_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp24_reg_3364_pp0_it5 <= _0064_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp24_reg_3364_pp0_it6 <= _0065_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp26_reg_3369_pp0_it4 <= _0066_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp26_reg_3369_pp0_it5 <= _0067_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp26_reg_3369_pp0_it6 <= _0068_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp34_reg_3374_pp0_it4 <= _0069_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp34_reg_3374_pp0_it5 <= _0070_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp34_reg_3374_pp0_it6 <= _0071_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp34_reg_3374_pp0_it7 <= _0072_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp36_reg_3379_pp0_it4 <= _0073_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp36_reg_3379_pp0_it5 <= _0074_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp36_reg_3379_pp0_it6 <= _0075_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp36_reg_3379_pp0_it7 <= _0076_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp40_reg_3384_pp0_it4 <= _0077_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp40_reg_3384_pp0_it5 <= _0078_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp40_reg_3384_pp0_it6 <= _0079_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp40_reg_3384_pp0_it7 <= _0080_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp50_reg_3389_pp0_it4 <= _0081_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp50_reg_3389_pp0_it5 <= _0082_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp50_reg_3389_pp0_it6 <= _0083_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp50_reg_3389_pp0_it7 <= _0084_;
  always @(posedge ap_clk)
      exitcond_flatten_reg_2790 <= _0098_;
  always @(posedge ap_clk)
      ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it1 <= _0012_;
  always @(posedge ap_clk)
      ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it1 <= _0087_;
  always @(posedge ap_clk)
      p_hw_output_1_y_scan_dim_1_reg_445 <= _0183_;
  always @(posedge ap_clk)
      p_hw_output_1_x_scan_dim_0_reg_456 <= _0181_;
  always @(posedge ap_clk)
      indvar_flatten_reg_434 <= _0099_;
  always @(posedge ap_clk)
      arg_0_V_value_V_1_mVld <= _0097_;
  always @(posedge ap_clk)
      arg_0_V_last_V_1_mVld <= _0095_;
  always @(posedge ap_clk)
      ap_reg_ppiten_pp0_it9 <= _0011_;
  always @(posedge ap_clk)
      ap_reg_ppiten_pp0_it8 <= _0010_;
  always @(posedge ap_clk)
      ap_reg_ppiten_pp0_it7 <= _0009_;
  always @(posedge ap_clk)
      ap_reg_ppiten_pp0_it6 <= _0008_;
  always @(posedge ap_clk)
      ap_reg_ppiten_pp0_it5 <= _0007_;
  always @(posedge ap_clk)
      ap_reg_ppiten_pp0_it4 <= _0006_;
  always @(posedge ap_clk)
      ap_reg_ppiten_pp0_it3 <= _0005_;
  always @(posedge ap_clk)
      ap_reg_ppiten_pp0_it2 <= _0004_;
  always @(posedge ap_clk)
      ap_reg_ppiten_pp0_it1 <= _0003_;
  always @(posedge ap_clk)
      ap_reg_ppiten_pp0_it0 <= _0002_;
  always @(posedge ap_clk)
      ap_done_reg <= _0001_;
  always @(posedge ap_clk)
      ap_CS_fsm <= _0000_;
  assign _0228_ = ap_sig_bdd_2187 ? 3'b100 : 3'b001;
  assign _0302_ = ap_CS_fsm == 3'b100;
  assign _0227_ = _0299_ ? 3'b100 : 3'b010;
  assign _0303_ = ap_CS_fsm == 2'b10;
  assign _0226_ = _0266_ ? 3'b010 : _0227_;
  assign _0225_ = ap_sig_bdd_527 ? 2'b01 : 2'b10;
  wire [2:0] fangyuan22;
  assign fangyuan22 = { 1'b0, _0225_ };
  wire [5:0] fangyuan23;
  assign fangyuan23 = { _0226_, _0228_ };
  wire [1:0] fangyuan24;
  assign fangyuan24 = { _0303_, _0302_ };
  always @(fangyuan22 or fangyuan23 or fangyuan24) begin
    casez (fangyuan24)
      2'b?1 :
        ap_NS_fsm = fangyuan23 [2:0] ;
      2'b1? :
        ap_NS_fsm = fangyuan23 [5:3] ;
      default:
        ap_NS_fsm = fangyuan22 ;
    endcase
  end
  assign p_hw_output_1_y_scan_dim_1_phi_fu_449_p4 = _0242_ ? p_hw_output_1_y_scan_dim_1_mi_reg_2799 : p_hw_output_1_y_scan_dim_1_reg_445;
  assign _0224_ = _0237_ ? tmp_last_V_fu_519_p2 : tmp_last_V_reg_2804;
  assign _0202_ = _0259_ ? grp_fu_2721_p3 : tmp53_reg_3304;
  assign _0193_ = _0257_ ? grp_fu_2606_p3 : tmp33_reg_3419;
  assign _0194_ = _0255_ ? grp_fu_2765_p3 : tmp34_reg_3374;
  assign _0190_ = _0255_ ? grp_fu_2674_p3 : tmp24_reg_3364;
  assign _0189_ = _0253_ ? grp_fu_2689_p3 : tmp23_reg_3414;
  assign _0187_ = _0251_ ? tmp18_fu_2499_p2 : tmp18_reg_3409;
  assign _0186_ = _0250_ ? grp_fu_2653_p3 : tmp17_reg_3404;
  assign _0182_ = _0240_ ? p_hw_output_1_y_scan_dim_1_mi_fu_499_p3 : p_hw_output_1_y_scan_dim_1_mi_reg_2799;
  assign _0129_ = _0248_ ? p_337_fu_2697_p2 : p_337_reg_3399;
  assign _0125_ = _0248_ ? p_320_fu_2453_p2 : p_320_reg_3394;
  assign _0201_ = _0247_ ? tmp50_fu_2402_p2 : tmp50_reg_3389;
  assign _0196_ = _0247_ ? tmp40_fu_2324_p2 : tmp40_reg_3384;
  assign _0195_ = _0247_ ? tmp36_fu_2280_p2 : tmp36_reg_3379;
  assign _0191_ = _0247_ ? tmp26_fu_2259_p2 : tmp26_reg_3369;
  assign _0184_ = _0247_ ? tmp10_fu_2226_p2 : tmp10_reg_3359;
  wire [18:0] fangyuan25;
  assign fangyuan25 = { 1'b0, p_319_fu_2220_p2 };
  assign _0124_ = _0247_ ? fangyuan25 : p_319_reg_3354;
  wire [18:0] fangyuan26;
  assign fangyuan26 = { 1'b0, p_277_fu_2198_p2 };
  assign _0116_ = _0247_ ? fangyuan26 : p_277_reg_3349;
  wire [17:0] fangyuan27;
  assign fangyuan27 = { 1'b0, p_271_fu_2192_p2 };
  assign _0114_ = _0247_ ? fangyuan27 : p_271_reg_3344;
  assign _0112_ = _0247_ ? p_266_fu_2186_p2 : p_266_reg_3339;
  assign _0209_ = _0246_ ? tmp65_fu_2082_p2 : tmp65_reg_3334;
  assign _0208_ = _0246_ ? tmp63_fu_2057_p2 : tmp63_reg_3329;
  assign _0207_ = _0246_ ? tmp62_fu_2048_p2 : tmp62_reg_3324;
  assign _0205_ = _0246_ ? tmp58_fu_2042_p2 : tmp58_reg_3319;
  assign _0204_ = _0246_ ? tmp57_fu_2033_p2 : tmp57_reg_3314;
  assign _0203_ = _0246_ ? tmp55_fu_2027_p2 : tmp55_reg_3309;
  assign _0199_ = _0246_ ? tmp49_fu_2021_p2 : tmp49_reg_3299;
  assign _0198_ = _0246_ ? tmp46_fu_2015_p2 : tmp46_reg_3294;
  assign _0197_ = _0246_ ? tmp43_fu_2006_p2 : tmp43_reg_3289;
  wire [16:0] fangyuan28;
  assign fangyuan28 = { 1'b0, p_613_fu_1937_p2 };
  assign _0175_ = _0246_ ? fangyuan28 : p_613_reg_3284;
  wire [17:0] fangyuan29;
  assign fangyuan29 = { 1'b0, p_595_fu_1919_p2 };
  assign _0171_ = _0246_ ? fangyuan29 : p_595_reg_3279;
  assign _0166_ = _0246_ ? p_553_fu_2668_p2 : p_553_reg_3274;
  assign _0161_ = _0246_ ? p_499_fu_2641_p2 : p_499_reg_3269;
  assign _0159_ = _0246_ ? p_493_fu_2629_p2 : p_493_reg_3264;
  assign _0156_ = _0246_ ? p_481_fu_2623_p2 : p_481_reg_3259;
  assign _0192_ = _0246_ ? tmp29_fu_1830_p2 : tmp29_reg_3254;
  assign _0148_ = _0246_ ? p_433_fu_2635_p2 : p_433_reg_3249;
  assign _0146_ = _0246_ ? p_427_fu_2647_p2 : p_427_reg_3244;
  wire [17:0] fangyuan30;
  assign fangyuan30 = { 1'b0, p_403_fu_1812_p2 };
  assign _0141_ = _0246_ ? fangyuan30 : p_403_reg_3239;
  assign _0188_ = _0246_ ? tmp19_fu_1806_p2 : tmp19_reg_3234;
  assign _0185_ = _0246_ ? tmp11_fu_1752_p2 : tmp11_reg_3229;
  assign _0211_ = _0246_ ? tmp6_fu_1687_p2 : tmp6_reg_3224;
  assign _0200_ = _0246_ ? tmp4_fu_1654_p2 : tmp4_reg_3219;
  wire [14:0] fangyuan31;
  assign fangyuan31 = { 1'b0, p_231_fu_1639_p2 };
  assign _0107_ = _0246_ ? fangyuan31 : p_231_reg_3214;
  wire [15:0] fangyuan32;
  assign fangyuan32 = { 1'b0, p_225_fu_1633_p2 };
  assign _0105_ = _0246_ ? fangyuan32 : p_225_reg_3209;
  assign _0103_ = _0246_ ? p_220_fu_1627_p2 : p_220_reg_3204;
  assign _0210_ = _0245_ ? tmp68_fu_1443_p2 : tmp68_reg_3199;
  assign _0206_ = _0245_ ? tmp5_fu_1409_p2 : tmp5_reg_3194;
  assign _0100_ = _0245_ ? p_208_fu_1385_p2 : p_208_reg_3189;
  assign _0223_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[631:624] : tmp_26_reg_3184;
  assign _0180_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[623:616] : p_656_reg_3179;
  assign _0179_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[615:608] : p_650_reg_3174;
  assign _0222_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[607:600] : tmp_25_reg_3169;
  assign _0221_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[599:592] : tmp_24_reg_3164;
  assign _0178_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[591:584] : p_632_reg_3158;
  assign _0177_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[575:568] : p_622_reg_3152;
  assign _0176_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[567:560] : p_616_reg_3147;
  assign _0174_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[559:552] : p_610_reg_3142;
  assign _0173_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[551:544] : p_604_reg_3137;
  assign _0172_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[543:536] : p_598_reg_3132;
  assign _0170_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[535:528] : p_592_reg_3127;
  assign _0220_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[527:520] : tmp_23_reg_3122;
  assign _0169_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[519:512] : p_580_reg_3117;
  assign _0168_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[511:504] : p_574_reg_3111;
  assign _0167_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[503:496] : p_568_reg_3106;
  assign _0219_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[495:488] : tmp_22_reg_3101;
  assign _0218_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[487:480] : tmp_21_reg_3096;
  assign _0165_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[479:472] : p_550_reg_3091;
  assign _0164_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[471:464] : p_544_reg_3086;
  assign _0217_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[463:456] : tmp_20_reg_3081;
  assign _0216_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[455:448] : tmp_19_reg_3076;
  assign _0163_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[447:440] : p_526_reg_3071;
  assign _0162_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[439:432] : p_520_reg_3066;
  assign _0215_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[431:424] : tmp_18_reg_3061;
  assign _0214_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[423:416] : tmp_17_reg_3056;
  assign _0213_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[415:408] : tmp_16_reg_3051;
  assign _0160_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[407:400] : p_496_reg_3046;
  assign _0158_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[399:392] : p_490_reg_3041;
  assign _0157_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[391:384] : p_484_reg_3036;
  assign _0155_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[383:376] : p_478_reg_3031;
  assign _0212_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[375:368] : tmp_15_reg_3026;
  assign _0154_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[367:360] : p_466_reg_3021;
  assign _0153_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[359:352] : p_460_reg_3016;
  assign _0152_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[351:344] : p_454_reg_3011;
  assign _0151_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[343:336] : p_448_reg_3006;
  assign _0150_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[335:328] : p_442_reg_3001;
  assign _0149_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[327:320] : p_436_reg_2996;
  assign _0147_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[319:312] : p_430_reg_2991;
  assign _0145_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[311:304] : p_424_reg_2986;
  assign _0144_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[303:296] : p_418_reg_2981;
  assign _0143_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[295:288] : p_412_reg_2976;
  assign _0142_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[287:280] : p_406_reg_2971;
  assign _0140_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[279:272] : p_400_reg_2966;
  assign _0139_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[271:264] : p_394_reg_2961;
  assign _0138_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[263:256] : p_388_reg_2956;
  assign _0137_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[255:248] : p_382_reg_2951;
  assign _0136_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[247:240] : p_376_reg_2946;
  assign _0135_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[239:232] : p_370_reg_2941;
  assign _0134_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[231:224] : p_364_reg_2936;
  assign _0133_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[223:216] : p_358_reg_2931;
  assign _0132_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[215:208] : p_352_reg_2926;
  assign _0131_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[207:200] : p_346_reg_2921;
  assign _0130_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[199:192] : p_340_reg_2916;
  assign _0128_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[191:184] : p_334_reg_2911;
  assign _0127_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[183:176] : p_328_reg_2906;
  assign _0126_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[175:168] : p_322_reg_2901;
  assign _0123_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[167:160] : p_316_reg_2896;
  assign _0122_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[159:152] : p_310_reg_2891;
  assign _0121_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[151:144] : p_304_reg_2886;
  assign _0120_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[143:136] : p_298_reg_2880;
  assign _0119_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[135:128] : p_292_reg_2875;
  assign _0118_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[127:120] : p_286_reg_2870;
  assign _0117_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[119:112] : p_280_reg_2865;
  assign _0115_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[111:104] : p_274_reg_2860;
  assign _0113_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[103:96] : p_268_reg_2855;
  assign _0111_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[95:88] : p_262_reg_2850;
  assign _0110_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[87:80] : p_256_reg_2845;
  assign _0109_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[79:72] : p_250_reg_2839;
  assign _0108_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[55:48] : p_234_reg_2834;
  assign _0106_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[47:40] : p_228_reg_2829;
  assign _0104_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[39:32] : p_222_reg_2824;
  assign _0102_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[31:24] : p_216_reg_2819;
  assign _0101_ = _0245_ ? p_p2_in_bounded_stencil_stream_V_value_V_dout[23:16] : p_210_reg_2814;
  assign _0096_ = _0244_ ? p_676_fu_2581_p2[23:16] : arg_0_V_value_V_1_data_reg;
  assign _0094_ = _0243_ ? ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it7 : arg_0_V_last_V_1_data_reg;
  assign _0084_ = _0297_ ? ap_reg_ppstg_tmp50_reg_3389_pp0_it7 : ap_reg_ppstg_tmp50_reg_3389_pp0_it6;
  assign _0083_ = _0297_ ? ap_reg_ppstg_tmp50_reg_3389_pp0_it6 : ap_reg_ppstg_tmp50_reg_3389_pp0_it5;
  assign _0082_ = _0297_ ? ap_reg_ppstg_tmp50_reg_3389_pp0_it5 : ap_reg_ppstg_tmp50_reg_3389_pp0_it4;
  assign _0081_ = _0297_ ? ap_reg_ppstg_tmp50_reg_3389_pp0_it4 : tmp50_reg_3389;
  assign _0080_ = _0297_ ? ap_reg_ppstg_tmp40_reg_3384_pp0_it7 : ap_reg_ppstg_tmp40_reg_3384_pp0_it6;
  assign _0079_ = _0297_ ? ap_reg_ppstg_tmp40_reg_3384_pp0_it6 : ap_reg_ppstg_tmp40_reg_3384_pp0_it5;
  assign _0078_ = _0297_ ? ap_reg_ppstg_tmp40_reg_3384_pp0_it5 : ap_reg_ppstg_tmp40_reg_3384_pp0_it4;
  assign _0077_ = _0297_ ? ap_reg_ppstg_tmp40_reg_3384_pp0_it4 : tmp40_reg_3384;
  assign _0076_ = _0297_ ? ap_reg_ppstg_tmp36_reg_3379_pp0_it7 : ap_reg_ppstg_tmp36_reg_3379_pp0_it6;
  assign _0075_ = _0297_ ? ap_reg_ppstg_tmp36_reg_3379_pp0_it6 : ap_reg_ppstg_tmp36_reg_3379_pp0_it5;
  assign _0074_ = _0297_ ? ap_reg_ppstg_tmp36_reg_3379_pp0_it5 : ap_reg_ppstg_tmp36_reg_3379_pp0_it4;
  assign _0073_ = _0297_ ? ap_reg_ppstg_tmp36_reg_3379_pp0_it4 : tmp36_reg_3379;
  assign _0072_ = _0297_ ? ap_reg_ppstg_tmp34_reg_3374_pp0_it7 : ap_reg_ppstg_tmp34_reg_3374_pp0_it6;
  assign _0071_ = _0297_ ? ap_reg_ppstg_tmp34_reg_3374_pp0_it6 : ap_reg_ppstg_tmp34_reg_3374_pp0_it5;
  assign _0070_ = _0297_ ? ap_reg_ppstg_tmp34_reg_3374_pp0_it5 : ap_reg_ppstg_tmp34_reg_3374_pp0_it4;
  assign _0069_ = _0297_ ? ap_reg_ppstg_tmp34_reg_3374_pp0_it4 : tmp34_reg_3374;
  assign _0068_ = _0297_ ? ap_reg_ppstg_tmp26_reg_3369_pp0_it6 : ap_reg_ppstg_tmp26_reg_3369_pp0_it5;
  assign _0067_ = _0297_ ? ap_reg_ppstg_tmp26_reg_3369_pp0_it5 : ap_reg_ppstg_tmp26_reg_3369_pp0_it4;
  assign _0066_ = _0297_ ? ap_reg_ppstg_tmp26_reg_3369_pp0_it4 : tmp26_reg_3369;
  assign _0065_ = _0297_ ? ap_reg_ppstg_tmp24_reg_3364_pp0_it6 : ap_reg_ppstg_tmp24_reg_3364_pp0_it5;
  assign _0064_ = _0297_ ? ap_reg_ppstg_tmp24_reg_3364_pp0_it5 : ap_reg_ppstg_tmp24_reg_3364_pp0_it4;
  assign _0063_ = _0297_ ? ap_reg_ppstg_tmp24_reg_3364_pp0_it4 : tmp24_reg_3364;
  assign _0062_ = _0297_ ? ap_reg_ppstg_tmp19_reg_3234_pp0_it5 : ap_reg_ppstg_tmp19_reg_3234_pp0_it4;
  assign _0061_ = _0297_ ? ap_reg_ppstg_tmp19_reg_3234_pp0_it4 : ap_reg_ppstg_tmp19_reg_3234_pp0_it3;
  assign _0060_ = _0297_ ? ap_reg_ppstg_tmp19_reg_3234_pp0_it3 : tmp19_reg_3234;
  assign _0059_ = _0297_ ? ap_reg_ppstg_tmp11_reg_3229_pp0_it3 : tmp11_reg_3229;
  assign _0058_ = _0297_ ? ap_reg_ppstg_p_544_reg_3086_pp0_it2 : p_544_reg_3086;
  assign _0086_ = _0297_ ? ap_reg_ppstg_tmp_20_reg_3081_pp0_it2 : tmp_20_reg_3081;
  assign _0085_ = _0297_ ? ap_reg_ppstg_tmp_16_reg_3051_pp0_it2 : tmp_16_reg_3051;
  assign _0057_ = _0297_ ? ap_reg_ppstg_p_484_reg_3036_pp0_it2 : p_484_reg_3036;
  assign _0056_ = _0297_ ? ap_reg_ppstg_p_448_reg_3006_pp0_it2 : p_448_reg_3006;
  assign _0055_ = _0297_ ? ap_reg_ppstg_p_442_reg_3001_pp0_it2 : p_442_reg_3001;
  assign _0054_ = _0297_ ? ap_reg_ppstg_p_436_reg_2996_pp0_it6 : ap_reg_ppstg_p_436_reg_2996_pp0_it5;
  assign _0053_ = _0297_ ? ap_reg_ppstg_p_436_reg_2996_pp0_it5 : ap_reg_ppstg_p_436_reg_2996_pp0_it4;
  assign _0052_ = _0297_ ? ap_reg_ppstg_p_436_reg_2996_pp0_it4 : ap_reg_ppstg_p_436_reg_2996_pp0_it3;
  assign _0051_ = _0297_ ? ap_reg_ppstg_p_436_reg_2996_pp0_it3 : ap_reg_ppstg_p_436_reg_2996_pp0_it2;
  assign _0050_ = _0297_ ? ap_reg_ppstg_p_436_reg_2996_pp0_it2 : p_436_reg_2996;
  assign _0049_ = _0297_ ? ap_reg_ppstg_p_418_reg_2981_pp0_it2 : p_418_reg_2981;
  assign _0048_ = _0297_ ? ap_reg_ppstg_p_394_reg_2961_pp0_it2 : p_394_reg_2961;
  assign _0047_ = _0297_ ? ap_reg_ppstg_p_388_reg_2956_pp0_it2 : p_388_reg_2956;
  assign _0046_ = _0297_ ? ap_reg_ppstg_p_382_reg_2951_pp0_it5 : ap_reg_ppstg_p_382_reg_2951_pp0_it4;
  assign _0045_ = _0297_ ? ap_reg_ppstg_p_382_reg_2951_pp0_it4 : ap_reg_ppstg_p_382_reg_2951_pp0_it3;
  assign _0044_ = _0297_ ? ap_reg_ppstg_p_382_reg_2951_pp0_it3 : ap_reg_ppstg_p_382_reg_2951_pp0_it2;
  assign _0043_ = _0297_ ? ap_reg_ppstg_p_382_reg_2951_pp0_it2 : p_382_reg_2951;
  assign _0042_ = _0297_ ? ap_reg_ppstg_p_376_reg_2946_pp0_it4 : ap_reg_ppstg_p_376_reg_2946_pp0_it3;
  assign _0041_ = _0297_ ? ap_reg_ppstg_p_376_reg_2946_pp0_it3 : ap_reg_ppstg_p_376_reg_2946_pp0_it2;
  assign _0040_ = _0297_ ? ap_reg_ppstg_p_376_reg_2946_pp0_it2 : p_376_reg_2946;
  assign _0039_ = _0297_ ? ap_reg_ppstg_p_370_reg_2941_pp0_it4 : ap_reg_ppstg_p_370_reg_2941_pp0_it3;
  assign _0038_ = _0297_ ? ap_reg_ppstg_p_370_reg_2941_pp0_it3 : ap_reg_ppstg_p_370_reg_2941_pp0_it2;
  assign _0037_ = _0297_ ? ap_reg_ppstg_p_370_reg_2941_pp0_it2 : p_370_reg_2941;
  assign _0036_ = _0297_ ? ap_reg_ppstg_p_340_reg_2916_pp0_it4 : ap_reg_ppstg_p_340_reg_2916_pp0_it3;
  assign _0035_ = _0297_ ? ap_reg_ppstg_p_340_reg_2916_pp0_it3 : ap_reg_ppstg_p_340_reg_2916_pp0_it2;
  assign _0034_ = _0297_ ? ap_reg_ppstg_p_340_reg_2916_pp0_it2 : p_340_reg_2916;
  assign _0033_ = _0297_ ? ap_reg_ppstg_p_334_reg_2911_pp0_it3 : ap_reg_ppstg_p_334_reg_2911_pp0_it2;
  assign _0032_ = _0297_ ? ap_reg_ppstg_p_334_reg_2911_pp0_it2 : p_334_reg_2911;
  assign _0031_ = _0297_ ? ap_reg_ppstg_p_328_reg_2906_pp0_it4 : ap_reg_ppstg_p_328_reg_2906_pp0_it3;
  assign _0030_ = _0297_ ? ap_reg_ppstg_p_328_reg_2906_pp0_it3 : ap_reg_ppstg_p_328_reg_2906_pp0_it2;
  assign _0029_ = _0297_ ? ap_reg_ppstg_p_328_reg_2906_pp0_it2 : p_328_reg_2906;
  assign _0028_ = _0297_ ? ap_reg_ppstg_p_322_reg_2901_pp0_it4 : ap_reg_ppstg_p_322_reg_2901_pp0_it3;
  assign _0027_ = _0297_ ? ap_reg_ppstg_p_322_reg_2901_pp0_it3 : ap_reg_ppstg_p_322_reg_2901_pp0_it2;
  assign _0026_ = _0297_ ? ap_reg_ppstg_p_322_reg_2901_pp0_it2 : p_322_reg_2901;
  assign _0025_ = _0297_ ? ap_reg_ppstg_p_316_reg_2896_pp0_it2 : p_316_reg_2896;
  assign _0024_ = _0297_ ? ap_reg_ppstg_p_286_reg_2870_pp0_it2 : p_286_reg_2870;
  assign _0023_ = _0297_ ? ap_reg_ppstg_p_280_reg_2865_pp0_it2 : p_280_reg_2865;
  assign _0022_ = _0297_ ? ap_reg_ppstg_p_274_reg_2860_pp0_it2 : p_274_reg_2860;
  assign _0021_ = _0297_ ? ap_reg_ppstg_p_268_reg_2855_pp0_it2 : p_268_reg_2855;
  assign _0020_ = _0297_ ? ap_reg_ppstg_p_262_reg_2850_pp0_it2 : p_262_reg_2850;
  assign _0093_ = _0297_ ? ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it7 : ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it6;
  assign _0092_ = _0297_ ? ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it6 : ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it5;
  assign _0091_ = _0297_ ? ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it5 : ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it4;
  assign _0090_ = _0297_ ? ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it4 : ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it3;
  assign _0089_ = _0297_ ? ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it3 : ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it2;
  assign _0088_ = _0297_ ? ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it2 : ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it1;
  assign _0017_ = _0297_ ? ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it6 : ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it5;
  assign _0016_ = _0297_ ? ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it5 : ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it4;
  assign _0015_ = _0297_ ? ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it4 : ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it3;
  assign _0014_ = _0297_ ? ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it3 : ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it2;
  assign _0013_ = _0297_ ? ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it2 : ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it1;
  assign _0019_ = _0297_ ? ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it8 : ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it7;
  assign _0018_ = _0297_ ? ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it7 : ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it6;
  assign _0087_ = _0234_ ? tmp_last_V_reg_2804 : ap_reg_ppstg_tmp_last_V_reg_2804_pp0_it1;
  assign _0012_ = _0234_ ? exitcond_flatten_reg_2790 : ap_reg_ppstg_exitcond_flatten_reg_2790_pp0_it1;
  assign _0098_ = _0234_ ? exitcond_flatten_fu_467_p2 : exitcond_flatten_reg_2790;
  assign _0304_ = _0236_ ? 10'b0000000000 : p_hw_output_1_y_scan_dim_1_reg_445;
  assign _0183_ = p_p2_in_bounded_stencil_stream_V_value_V_read ? p_hw_output_1_y_scan_dim_1_mi_reg_2799 : _0304_;
  assign _0305_ = _0236_ ? 9'b000000000 : p_hw_output_1_x_scan_dim_0_reg_456;
  assign _0181_ = _0240_ ? p_hw_output_1_x_scan_dim_0_1_fu_525_p2 : _0305_;
  assign _0306_ = _0236_ ? 19'b0000000000000000000 : indvar_flatten_reg_434;
  assign _0099_ = _0240_ ? indvar_flatten_next_fu_473_p2 : _0306_;
  assign _0307_ = arg_0_TREADY ? 1'b0 : arg_0_V_value_V_1_mVld;
  assign _0308_ = arg_0_V_last_V_1_vld_in ? 1'b1 : _0307_;
  assign _0097_ = ap_rst ? 1'b0 : _0308_;
  assign _0309_ = arg_0_TREADY ? 1'b0 : arg_0_V_last_V_1_mVld;
  assign _0310_ = arg_0_V_last_V_1_vld_in ? 1'b1 : _0309_;
  assign _0095_ = ap_rst ? 1'b0 : _0310_;
  assign _0311_ = _0236_ ? 1'b0 : ap_reg_ppiten_pp0_it9;
  assign _0312_ = _0297_ ? _0311_ : ap_reg_ppiten_pp0_it8;
  assign _0011_ = ap_rst ? 1'b0 : _0312_;
  assign _0313_ = _0297_ ? ap_reg_ppiten_pp0_it8 : ap_reg_ppiten_pp0_it7;
  assign _0010_ = ap_rst ? 1'b0 : _0313_;
  assign _0314_ = _0297_ ? ap_reg_ppiten_pp0_it7 : ap_reg_ppiten_pp0_it6;
  assign _0009_ = ap_rst ? 1'b0 : _0314_;
  assign _0315_ = _0297_ ? ap_reg_ppiten_pp0_it6 : ap_reg_ppiten_pp0_it5;
  assign _0008_ = ap_rst ? 1'b0 : _0315_;
  assign _0316_ = _0297_ ? ap_reg_ppiten_pp0_it5 : ap_reg_ppiten_pp0_it4;
  assign _0007_ = ap_rst ? 1'b0 : _0316_;
  assign _0317_ = _0297_ ? ap_reg_ppiten_pp0_it4 : ap_reg_ppiten_pp0_it3;
  assign _0006_ = ap_rst ? 1'b0 : _0317_;
  assign _0318_ = _0297_ ? ap_reg_ppiten_pp0_it3 : ap_reg_ppiten_pp0_it2;
  assign _0005_ = ap_rst ? 1'b0 : _0318_;
  assign _0319_ = _0297_ ? ap_reg_ppiten_pp0_it2 : ap_reg_ppiten_pp0_it1;
  assign _0004_ = ap_rst ? 1'b0 : _0319_;
  assign _0320_ = _0298_ ? 1'b0 : ap_reg_ppiten_pp0_it1;
  assign _0321_ = _0237_ ? 1'b1 : _0320_;
  assign _0003_ = ap_rst ? 1'b0 : _0321_;
  assign _0322_ = _0236_ ? 1'b1 : ap_reg_ppiten_pp0_it0;
  assign _0323_ = _0235_ ? 1'b0 : _0322_;
  assign _0002_ = ap_rst ? 1'b0 : _0323_;
  assign _0324_ = ap_ready ? 1'b1 : ap_done_reg;
  assign _0325_ = ap_continue ? 1'b0 : _0324_;
  assign _0001_ = ap_rst ? 1'b0 : _0325_;
  assign _0000_ = ap_rst ? 3'b001 : ap_NS_fsm;
  assign p_hw_output_1_x_scan_dim_0_mi_fu_491_p3 = _0285_ ? 9'b000000000 : p_hw_output_1_x_scan_dim_0_reg_456;
  assign p_hw_output_1_y_scan_dim_1_mi_fu_499_p3 = _0285_ ? p_hw_output_1_y_scan_dim_1_1_fu_479_p2 : p_hw_output_1_y_scan_dim_1_phi_fu_449_p4;
  \$paramod$a19423b4b9be5de3b35e4ac8ee96fe67fc1eac41\hls_target_am_addmul_8ns_8ns_10ns_18_1 hls_target_am_addmul_8ns_8ns_10ns_18_1_U43 (
    .din0(tmp_17_reg_3056),
    .din1(tmp_15_reg_3026),
    .din2(10'b0111100110),
    .dout(grp_fu_2729_p3)
  );
  \$paramod$5c01e9124acc7a341c0495d3aa185d5e4de5ba1e\hls_target_am_addmul_8ns_8ns_11ns_19_1 hls_target_am_addmul_8ns_8ns_11ns_19_1_U49 (
    .din0(tmp_21_reg_3096),
    .din1(tmp_19_reg_3076),
    .din2(11'b01011011001),
    .dout(grp_fu_2781_p3)
  );
  \$paramod$88f5ca1b4f336adb0ffa77876a4369405c2c3c03\hls_target_am_addmul_8ns_8ns_6ns_14_1 hls_target_am_addmul_8ns_8ns_6ns_14_1_U40 (
    .din0(tmp_26_reg_3184),
    .din1(tmp_24_reg_3164),
    .din2(6'b011011),
    .dout(grp_fu_2703_p3)
  );
  \$paramod$2198655e572d5804e74405a8a301970797977575\hls_target_am_addmul_8ns_8ns_7ns_15_1 hls_target_am_addmul_8ns_8ns_7ns_15_1_U41 (
    .din0(tmp_25_reg_3169),
    .din1(tmp_18_reg_3061),
    .din2(7'b0110110),
    .dout(grp_fu_2712_p3)
  );
  \$paramod$83dd66ca6e39253b28213f46779855fd190b8af7\hls_target_am_addmul_8ns_8ns_9ns_17_1 hls_target_am_addmul_8ns_8ns_9ns_17_1_U42 (
    .din0(tmp_23_reg_3122),
    .din1(tmp_22_reg_3101),
    .din2(9'b011110011),
    .dout(grp_fu_2721_p3)
  );
  \$paramod$a3764642caa8681a8502b0ce31d8da58f8f303ec\hls_target_ama_addmuladd_8ns_8ns_12ns_20ns_21_1 hls_target_ama_addmuladd_8ns_8ns_12ns_20ns_21_1_U45 (
    .din0(ap_reg_ppstg_tmp_20_reg_3081_pp0_it2),
    .din1(ap_reg_ppstg_tmp_16_reg_3051_pp0_it2),
    .din2(12'b010110110010),
    .din3(p_481_reg_3259),
    .dout(grp_fu_2746_p4)
  );
  \$paramod$a4e7845fd68d0c9773b7c19b2317e709a020a4f9\hls_target_mac_muladd_12ns_8ns_20ns_20_1 hls_target_mac_muladd_12ns_8ns_20ns_20_1_U25 (
    .din0(12'b011100010001),
    .din1(ap_reg_ppstg_p_328_reg_2906_pp0_it4),
    .din2(p_337_reg_3399),
    .dout(grp_fu_2598_p3)
  );
  \$paramod$a4e7845fd68d0c9773b7c19b2317e709a020a4f9\hls_target_mac_muladd_12ns_8ns_20ns_20_1 hls_target_mac_muladd_12ns_8ns_20ns_20_1_U44 (
    .din0(12'b011100010001),
    .din1(ap_reg_ppstg_p_544_reg_3086_pp0_it2),
    .din2(p_553_reg_3274),
    .dout(grp_fu_2738_p3)
  );
  \$paramod$27e5966cb62baf34f57646996b682952cf5a5c67\hls_target_mac_muladd_12ns_8ns_20ns_21_1 hls_target_mac_muladd_12ns_8ns_20ns_21_1_U27 (
    .din0(12'b010110110010),
    .din1(ap_reg_ppstg_p_322_reg_2901_pp0_it4),
    .din2(p_320_reg_3394),
    .dout(grp_fu_2614_p3)
  );
  \$paramod$355e994556db88dc7e68bef3ec3aee4db6a027ca\hls_target_mac_muladd_12ns_8ns_21ns_21_1 hls_target_mac_muladd_12ns_8ns_21ns_21_1_U37 (
    .din0(12'b010110110010),
    .din1(ap_reg_ppstg_p_394_reg_2961_pp0_it2),
    .din2(p_433_reg_3249),
    .dout(grp_fu_2681_p3)
  );
  \$paramod$355e994556db88dc7e68bef3ec3aee4db6a027ca\hls_target_mac_muladd_12ns_8ns_21ns_21_1 hls_target_mac_muladd_12ns_8ns_21ns_21_1_U46 (
    .din0(12'b011100010001),
    .din1(ap_reg_ppstg_p_448_reg_3006_pp0_it2),
    .din2(p_499_reg_3269),
    .dout(grp_fu_2757_p3)
  );
  \$paramod$670997d915a1bc356393009f52014139224d7de7\hls_target_mac_muladd_13ns_8ns_21ns_21_1 hls_target_mac_muladd_13ns_8ns_21ns_21_1_U36 (
    .din0(13'b0101101100100),
    .din1(ap_reg_ppstg_p_388_reg_2956_pp0_it2),
    .din2(grp_fu_2681_p3),
    .dout(grp_fu_2674_p3)
  );
  \$paramod$670997d915a1bc356393009f52014139224d7de7\hls_target_mac_muladd_13ns_8ns_21ns_21_1 hls_target_mac_muladd_13ns_8ns_21ns_21_1_U48 (
    .din0(13'b0101101100100),
    .din1(ap_reg_ppstg_p_484_reg_3036_pp0_it2),
    .din2(p_493_reg_3264),
    .dout(grp_fu_2765_p2)
  );
  \$paramod$1484826b42b67c3cc1706012bb51191a6713c3e2\hls_target_mac_muladd_13ns_8ns_21ns_22_1 hls_target_mac_muladd_13ns_8ns_21ns_22_1_U33 (
    .din0(13'b0101101100100),
    .din1(ap_reg_ppstg_p_376_reg_2946_pp0_it4),
    .din2(grp_fu_2653_p2),
    .dout(grp_fu_2653_p3)
  );
  \$paramod$1484826b42b67c3cc1706012bb51191a6713c3e2\hls_target_mac_muladd_13ns_8ns_21ns_22_1 hls_target_mac_muladd_13ns_8ns_21ns_22_1_U47 (
    .din0(13'b0111000100010),
    .din1(ap_reg_ppstg_p_442_reg_3001_pp0_it2),
    .din2(grp_fu_2765_p2),
    .dout(grp_fu_2765_p3)
  );
  \$paramod$103d63d62f9584218bc6cc9bfaa9c73176e8ef51\hls_target_mac_muladd_13ns_8ns_22ns_23_1 hls_target_mac_muladd_13ns_8ns_22ns_23_1_U38 (
    .din0(13'b0111000100010),
    .din1(ap_reg_ppstg_p_382_reg_2951_pp0_it5),
    .din2(grp_fu_2689_p2),
    .dout(grp_fu_2689_p3)
  );
  \$paramod$ff86e9d3cfae25d803e0cd487d0ca8b0dc12c184\hls_target_mac_muladd_14ns_8ns_23ns_24_1 hls_target_mac_muladd_14ns_8ns_23ns_24_1_U26 (
    .din0(14'b01000110001001),
    .din1(ap_reg_ppstg_p_436_reg_2996_pp0_it6),
    .din2(grp_fu_2606_p2),
    .dout(grp_fu_2606_p3)
  );
  \$paramod\hls_target_mul_mul_12ns_8ns_20_1\ID=1\NUM_STAGE=1\din0_WIDTH=12\din1_WIDTH=8\dout_WIDTH=20 hls_target_mul_mul_12ns_8ns_20_1_U28 (
    .din0(12'b010110110010),
    .din1(p_478_reg_3031),
    .dout(p_481_fu_2623_p2)
  );
  \$paramod\hls_target_mul_mul_12ns_8ns_20_1\ID=1\NUM_STAGE=1\din0_WIDTH=12\din1_WIDTH=8\dout_WIDTH=20 hls_target_mul_mul_12ns_8ns_20_1_U32 (
    .din0(12'b011100010001),
    .din1(p_424_reg_2986),
    .dout(p_427_fu_2647_p2)
  );
  \$paramod\hls_target_mul_mul_12ns_8ns_20_1\ID=1\NUM_STAGE=1\din0_WIDTH=12\din1_WIDTH=8\dout_WIDTH=20 hls_target_mul_mul_12ns_8ns_20_1_U34 (
    .din0(12'b010110110010),
    .din1(ap_reg_ppstg_p_370_reg_2941_pp0_it4),
    .dout(p_373_fu_2661_p2)
  );
  \$paramod\hls_target_mul_mul_12ns_8ns_20_1\ID=1\NUM_STAGE=1\din0_WIDTH=12\din1_WIDTH=8\dout_WIDTH=20 hls_target_mul_mul_12ns_8ns_20_1_U35 (
    .din0(12'b010110110010),
    .din1(p_550_reg_3091),
    .dout(p_553_fu_2668_p2)
  );
  \$paramod\hls_target_mul_mul_12ns_8ns_20_1\ID=1\NUM_STAGE=1\din0_WIDTH=12\din1_WIDTH=8\dout_WIDTH=20 hls_target_mul_mul_12ns_8ns_20_1_U39 (
    .din0(12'b010110110010),
    .din1(ap_reg_ppstg_p_334_reg_2911_pp0_it3),
    .dout(p_337_fu_2697_p2)
  );
  \$paramod\hls_target_mul_mul_13ns_8ns_21_1\ID=1\NUM_STAGE=1\din0_WIDTH=13\din1_WIDTH=8\dout_WIDTH=21 hls_target_mul_mul_13ns_8ns_21_1_U29 (
    .din0(13'b0111000100010),
    .din1(p_490_reg_3041),
    .dout(p_493_fu_2629_p2)
  );
  \$paramod\hls_target_mul_mul_13ns_8ns_21_1\ID=1\NUM_STAGE=1\din0_WIDTH=13\din1_WIDTH=8\dout_WIDTH=21 hls_target_mul_mul_13ns_8ns_21_1_U30 (
    .din0(13'b0111000100010),
    .din1(p_430_reg_2991),
    .dout(p_433_fu_2635_p2)
  );
  \$paramod\hls_target_mul_mul_13ns_8ns_21_1\ID=1\NUM_STAGE=1\din0_WIDTH=13\din1_WIDTH=8\dout_WIDTH=21 hls_target_mul_mul_13ns_8ns_21_1_U31 (
    .din0(13'b0101101100100),
    .din1(p_496_reg_3046),
    .dout(p_499_fu_2641_p2)
  );
  assign ap_sig_bdd_2182 = ap_CS_fsm[2];
  assign ap_sig_bdd_22 = ap_CS_fsm[0];
  assign ap_sig_bdd_90 = ap_CS_fsm[1];
  assign ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_CS_fsm[1];
  assign ap_sig_cseq_ST_st12_fsm_2 = ap_CS_fsm[2];
  assign ap_sig_cseq_ST_st1_fsm_0 = ap_CS_fsm[0];
  assign arg_0_TDATA = arg_0_V_value_V_1_data_reg;
  assign arg_0_TLAST = arg_0_V_last_V_1_data_reg;
  assign arg_0_TVALID = arg_0_V_last_V_1_mVld;
  assign arg_0_V_last_V_1_ack_out = arg_0_TREADY;
  assign arg_0_V_last_V_1_areset_d = arg_0_V_value_V_1_areset_d;
  assign arg_0_V_value_V_1_ack_out = arg_0_TREADY;
  assign arg_0_V_value_V_1_sRdy = arg_0_V_value_V_1_ack_in;
  assign arg_0_V_value_V_1_vld_in = arg_0_V_last_V_1_vld_in;
  assign grp_fu_2598_p1 = ap_reg_ppstg_p_328_reg_2906_pp0_it4;
  assign grp_fu_2598_p10 = { 12'b000000000000, ap_reg_ppstg_p_328_reg_2906_pp0_it4 };
  assign grp_fu_2606_p1 = ap_reg_ppstg_p_436_reg_2996_pp0_it6;
  assign grp_fu_2606_p10 = { 14'b00000000000000, ap_reg_ppstg_p_436_reg_2996_pp0_it6 };
  assign grp_fu_2606_p20 = { 1'b0, grp_fu_2606_p2 };
  assign grp_fu_2614_p1 = ap_reg_ppstg_p_322_reg_2901_pp0_it4;
  assign grp_fu_2614_p10 = { 12'b000000000000, ap_reg_ppstg_p_322_reg_2901_pp0_it4 };
  assign grp_fu_2614_p2 = p_320_reg_3394;
  assign grp_fu_2614_p20 = { 1'b0, p_320_reg_3394 };
  assign grp_fu_2653_p1 = ap_reg_ppstg_p_376_reg_2946_pp0_it4;
  assign grp_fu_2653_p10 = { 13'b0000000000000, ap_reg_ppstg_p_376_reg_2946_pp0_it4 };
  assign grp_fu_2653_p20 = { 1'b0, grp_fu_2653_p2 };
  assign grp_fu_2674_p1 = ap_reg_ppstg_p_388_reg_2956_pp0_it2;
  assign grp_fu_2674_p10 = { 13'b0000000000000, ap_reg_ppstg_p_388_reg_2956_pp0_it2 };
  assign grp_fu_2681_p1 = ap_reg_ppstg_p_394_reg_2961_pp0_it2;
  assign grp_fu_2681_p10 = { 12'b000000000000, ap_reg_ppstg_p_394_reg_2961_pp0_it2 };
  assign grp_fu_2689_p1 = ap_reg_ppstg_p_382_reg_2951_pp0_it5;
  assign grp_fu_2689_p10 = { 13'b0000000000000, ap_reg_ppstg_p_382_reg_2951_pp0_it5 };
  assign grp_fu_2689_p20 = { 1'b0, grp_fu_2689_p2 };
  assign grp_fu_2703_p0 = tmp_26_reg_3184;
  assign grp_fu_2703_p00 = { 1'b0, tmp_26_reg_3184 };
  assign grp_fu_2703_p1 = tmp_24_reg_3164;
  assign grp_fu_2703_p10 = { 1'b0, tmp_24_reg_3164 };
  assign grp_fu_2712_p0 = tmp_25_reg_3169;
  assign grp_fu_2712_p00 = { 1'b0, tmp_25_reg_3169 };
  assign grp_fu_2712_p1 = tmp_18_reg_3061;
  assign grp_fu_2712_p10 = { 1'b0, tmp_18_reg_3061 };
  assign grp_fu_2721_p0 = tmp_23_reg_3122;
  assign grp_fu_2721_p00 = { 1'b0, tmp_23_reg_3122 };
  assign grp_fu_2721_p1 = tmp_22_reg_3101;
  assign grp_fu_2721_p10 = { 1'b0, tmp_22_reg_3101 };
  assign grp_fu_2729_p0 = tmp_17_reg_3056;
  assign grp_fu_2729_p00 = { 1'b0, tmp_17_reg_3056 };
  assign grp_fu_2729_p1 = tmp_15_reg_3026;
  assign grp_fu_2729_p10 = { 1'b0, tmp_15_reg_3026 };
  assign grp_fu_2738_p1 = ap_reg_ppstg_p_544_reg_3086_pp0_it2;
  assign grp_fu_2738_p10 = { 12'b000000000000, ap_reg_ppstg_p_544_reg_3086_pp0_it2 };
  assign grp_fu_2746_p0 = ap_reg_ppstg_tmp_20_reg_3081_pp0_it2;
  assign grp_fu_2746_p00 = { 1'b0, ap_reg_ppstg_tmp_20_reg_3081_pp0_it2 };
  assign grp_fu_2746_p1 = ap_reg_ppstg_tmp_16_reg_3051_pp0_it2;
  assign grp_fu_2746_p10 = { 1'b0, ap_reg_ppstg_tmp_16_reg_3051_pp0_it2 };
  assign grp_fu_2746_p3 = p_481_reg_3259;
  assign grp_fu_2746_p30 = { 1'b0, p_481_reg_3259 };
  assign grp_fu_2757_p1 = ap_reg_ppstg_p_448_reg_3006_pp0_it2;
  assign grp_fu_2757_p10 = { 12'b000000000000, ap_reg_ppstg_p_448_reg_3006_pp0_it2 };
  assign grp_fu_2765_p1 = ap_reg_ppstg_p_442_reg_3001_pp0_it2;
  assign grp_fu_2765_p10 = { 13'b0000000000000, ap_reg_ppstg_p_442_reg_3001_pp0_it2 };
  assign grp_fu_2765_p20 = { 1'b0, grp_fu_2765_p2 };
  assign grp_fu_2773_p1 = ap_reg_ppstg_p_484_reg_3036_pp0_it2;
  assign grp_fu_2773_p10 = { 13'b0000000000000, ap_reg_ppstg_p_484_reg_3036_pp0_it2 };
  assign grp_fu_2773_p3 = grp_fu_2765_p2;
  assign grp_fu_2781_p0 = tmp_21_reg_3096;
  assign grp_fu_2781_p00 = { 1'b0, tmp_21_reg_3096 };
  assign grp_fu_2781_p1 = tmp_19_reg_3076;
  assign grp_fu_2781_p10 = { 1'b0, tmp_19_reg_3076 };
  assign p_111_fu_1824_p1 = p_412_reg_2976;
  assign p_111_fu_1824_p10 = { 7'b0000000, p_412_reg_2976 };
  assign p_200_fu_531_p1 = p_p2_in_bounded_stencil_stream_V_value_V_dout[7:0];
  assign p_201_cast_cast_fu_535_p1 = { 1'b0, p_p2_in_bounded_stencil_stream_V_value_V_dout[7:0] };
  assign p_204_fu_539_p4 = p_p2_in_bounded_stencil_stream_V_value_V_dout[15:8];
  assign p_205_cast1_cast_fu_549_p1 = { 1'b0, p_p2_in_bounded_stencil_stream_V_value_V_dout[15:8] };
  assign p_208_cast_fu_1602_p1 = { 2'b00, p_208_reg_3189 };
  assign p_213_fu_1605_p1 = p_210_reg_2814;
  assign p_213_fu_1605_p10 = { 6'b000000, p_210_reg_2814 };
  assign p_214_cast_fu_1617_p1 = { 1'b0, p_214_fu_1611_p2 };
  assign p_219_fu_1621_p1 = p_216_reg_2819;
  assign p_219_fu_1621_p10 = { 7'b0000000, p_216_reg_2819 };
  assign p_220_cast_fu_2133_p1 = { 1'b0, p_220_reg_3204 };
  assign p_225_fu_1633_p1 = p_222_reg_2824;
  assign p_225_fu_1633_p10 = { 8'b00000000, p_222_reg_2824 };
  assign p_231_cast_fu_2136_p1 = { 1'b0, p_231_reg_3214 };
  assign p_231_fu_1639_p1 = p_228_reg_2829;
  assign p_231_fu_1639_p10 = { 7'b0000000, p_228_reg_2829 };
  assign p_237_fu_1645_p1 = p_234_reg_2834;
  assign p_237_fu_1645_p10 = { 6'b000000, p_234_reg_2834 };
  assign p_240_fu_603_p4 = p_p2_in_bounded_stencil_stream_V_value_V_dout[63:56];
  assign p_241_cast1_fu_613_p1 = { 4'b0000, p_p2_in_bounded_stencil_stream_V_value_V_dout[63:56] };
  assign p_246_fu_617_p4 = p_p2_in_bounded_stencil_stream_V_value_V_dout[71:64];
  assign p_247_cast_cast_fu_627_p1 = { 4'b0000, p_p2_in_bounded_stencil_stream_V_value_V_dout[71:64] };
  assign p_248_cast_fu_2159_p1 = { 1'b0, p_248_fu_2153_p2 };
  assign p_251_cast1_fu_1464_p1 = { 4'b0000, p_250_reg_2839 };
  assign p_253_cast_cast_fu_1677_p1 = { 3'b000, p_253_fu_1671_p2 };
  assign p_260_cast_fu_2172_p1 = { 1'b0, p_260_fu_2166_p2 };
  assign p_265_fu_2176_p1 = ap_reg_ppstg_p_262_reg_2850_pp0_it2;
  assign p_265_fu_2176_p10 = { 9'b000000000, ap_reg_ppstg_p_262_reg_2850_pp0_it2 };
  assign p_265_fu_2176_p2 = p_265_cast_fu_2182_p1;
  assign p_266_cast_fu_2411_p1 = { 1'b0, p_266_reg_3339 };
  assign p_271_cast_fu_2414_p1 = { 1'b0, p_271_reg_3344 };
  assign p_271_fu_2192_p1 = ap_reg_ppstg_p_268_reg_2855_pp0_it2;
  assign p_271_fu_2192_p10 = { 10'b0000000000, ap_reg_ppstg_p_268_reg_2855_pp0_it2 };
  assign p_277_fu_2198_p1 = ap_reg_ppstg_p_274_reg_2860_pp0_it2;
  assign p_277_fu_2198_p10 = { 11'b00000000000, ap_reg_ppstg_p_274_reg_2860_pp0_it2 };
  assign p_278_cast_fu_2428_p1 = { 1'b0, p_278_fu_2423_p2 };
  assign p_283_fu_2204_p1 = ap_reg_ppstg_p_280_reg_2865_pp0_it2;
  assign p_283_fu_2204_p10 = { 10'b0000000000, ap_reg_ppstg_p_280_reg_2865_pp0_it2 };
  assign p_289_fu_2210_p1 = ap_reg_ppstg_p_286_reg_2870_pp0_it2;
  assign p_289_fu_2210_p10 = { 9'b000000000, ap_reg_ppstg_p_286_reg_2870_pp0_it2 };
  assign p_289_fu_2210_p2 = p_289_cast_cast_fu_2216_p1[1:0];
  assign p_295_fu_1693_p1 = p_292_reg_2875;
  assign p_295_fu_1693_p10 = { 8'b00000000, p_292_reg_2875 };
  assign p_295_fu_1693_p2 = p_295_cast_cast_fu_1699_p1;
  assign p_299_cast1_fu_1473_p1 = { 4'b0000, p_298_reg_2880 };
  assign p_301_cast_cast_fu_1720_p1 = { 2'b00, p_301_fu_1714_p2 };
  assign p_307_fu_1724_p1 = p_304_reg_2886;
  assign p_307_fu_1724_p10 = { 6'b000000, p_304_reg_2886 };
  assign p_313_fu_1730_p1 = p_310_reg_2891;
  assign p_313_fu_1730_p10 = { 9'b000000000, p_310_reg_2891 };
  assign p_319_cast_fu_2432_p1 = { 1'b0, p_319_reg_3354 };
  assign p_319_fu_2220_p1 = ap_reg_ppstg_p_316_reg_2896_pp0_it2;
  assign p_319_fu_2220_p10 = { 11'b00000000000, ap_reg_ppstg_p_316_reg_2896_pp0_it2 };
  assign p_337_fu_2697_p1 = ap_reg_ppstg_p_334_reg_2911_pp0_it3;
  assign p_337_fu_2697_p10 = { 12'b000000000000, ap_reg_ppstg_p_334_reg_2911_pp0_it3 };
  assign p_338_fu_2480_p2 = grp_fu_2653_p2;
  assign p_343_fu_2489_p1 = ap_reg_ppstg_p_340_reg_2916_pp0_it4;
  assign p_343_fu_2489_p10 = { 11'b00000000000, ap_reg_ppstg_p_340_reg_2916_pp0_it4 };
  assign p_343_fu_2489_p2 = p_343_cast_cast_fu_2495_p1;
  assign p_349_fu_1758_p1 = p_346_reg_2921;
  assign p_349_fu_1758_p10 = { 9'b000000000, p_346_reg_2921 };
  assign p_349_fu_1758_p2 = p_349_cast_cast_fu_1764_p1;
  assign p_355_fu_1768_p1 = p_352_reg_2926;
  assign p_355_fu_1768_p10 = { 6'b000000, p_352_reg_2926 };
  assign p_355_fu_1768_p2 = p_355_cast_cast_fu_1774_p1;
  assign p_361_fu_1778_p1 = p_358_reg_2931;
  assign p_361_fu_1778_p10 = { 7'b0000000, p_358_reg_2931 };
  assign p_367_fu_1784_p1 = p_364_reg_2936;
  assign p_367_fu_1784_p10 = { 10'b0000000000, p_364_reg_2936 };
  assign p_373_fu_2661_p1 = ap_reg_ppstg_p_370_reg_2941_pp0_it4;
  assign p_373_fu_2661_p10 = { 12'b000000000000, ap_reg_ppstg_p_370_reg_2941_pp0_it4 };
  assign p_380_fu_2518_p2 = grp_fu_2689_p2;
  assign p_403_fu_1812_p1 = p_400_reg_2966;
  assign p_403_fu_1812_p10 = { 10'b0000000000, p_400_reg_2966 };
  assign p_409_fu_1818_p1 = p_406_reg_2971;
  assign p_409_fu_1818_p10 = { 7'b0000000, p_406_reg_2971 };
  assign p_421_fu_2232_p1 = ap_reg_ppstg_p_418_reg_2981_pp0_it2;
  assign p_421_fu_2232_p10 = { 11'b00000000000, ap_reg_ppstg_p_418_reg_2981_pp0_it2 };
  assign p_421_fu_2232_p2 = p_421_cast_cast_fu_2238_p1;
  assign p_427_fu_2647_p1 = p_424_reg_2986;
  assign p_427_fu_2647_p10 = { 12'b000000000000, p_424_reg_2986 };
  assign p_433_fu_2635_p1 = p_430_reg_2991;
  assign p_433_fu_2635_p10 = { 13'b0000000000000, p_430_reg_2991 };
  assign p_434_fu_2542_p2 = grp_fu_2606_p2;
  assign p_457_fu_1836_p1 = p_454_reg_3011;
  assign p_457_fu_1836_p10 = { 11'b00000000000, p_454_reg_3011 };
  assign p_457_fu_1836_p2 = p_457_cast_cast_fu_1842_p1;
  assign p_463_fu_1846_p1 = p_460_reg_3016;
  assign p_463_fu_1846_p10 = { 8'b00000000, p_460_reg_3016 };
  assign p_469_fu_1852_p1 = p_466_reg_3021;
  assign p_469_fu_1852_p10 = { 7'b0000000, p_466_reg_3021 };
  assign p_469_fu_1852_p2 = p_469_cast_cast_fu_1858_p1;
  assign p_481_fu_2623_p1 = p_478_reg_3031;
  assign p_481_fu_2623_p10 = { 12'b000000000000, p_478_reg_3031 };
  assign p_493_fu_2629_p1 = p_490_reg_3041;
  assign p_493_fu_2629_p10 = { 13'b0000000000000, p_490_reg_3041 };
  assign p_499_fu_2641_p1 = p_496_reg_3046;
  assign p_499_fu_2641_p10 = { 13'b0000000000000, p_496_reg_3046 };
  assign p_523_fu_1862_p1 = p_520_reg_3066;
  assign p_523_fu_1862_p10 = { 6'b000000, p_520_reg_3066 };
  assign p_523_fu_1862_p2 = p_523_cast_cast_fu_1868_p1;
  assign p_529_fu_1872_p1 = p_526_reg_3071;
  assign p_529_fu_1872_p10 = { 9'b000000000, p_526_reg_3071 };
  assign p_529_fu_1872_p2 = p_529_cast_cast_fu_1878_p1;
  assign p_553_fu_2668_p1 = p_550_reg_3091;
  assign p_553_fu_2668_p10 = { 12'b000000000000, p_550_reg_3091 };
  assign p_571_fu_1882_p1 = p_568_reg_3106;
  assign p_571_fu_1882_p10 = { 6'b000000, p_568_reg_3106 };
  assign p_571_fu_1882_p2 = p_571_cast_cast_fu_1888_p1;
  assign p_575_cast1_fu_1557_p1 = { 4'b0000, p_574_reg_3111 };
  assign p_577_cast_cast_fu_1909_p1 = { 1'b0, p_577_fu_1903_p2 };
  assign p_583_fu_1913_p1 = p_580_reg_3117;
  assign p_583_fu_1913_p10 = { 8'b00000000, p_580_reg_3117 };
  assign p_595_cast_cast_fu_2268_p1 = { 1'b0, p_595_reg_3279 };
  assign p_595_fu_1919_p1 = p_592_reg_3127;
  assign p_595_fu_1919_p10 = { 10'b0000000000, p_592_reg_3127 };
  assign p_601_fu_1925_p1 = p_598_reg_3132;
  assign p_601_fu_1925_p10 = { 11'b00000000000, p_598_reg_3132 };
  assign p_607_fu_1931_p1 = p_604_reg_3137;
  assign p_607_fu_1931_p10 = { 10'b0000000000, p_604_reg_3137 };
  assign p_613_fu_1937_p1 = p_610_reg_3142;
  assign p_613_fu_1937_p10 = { 9'b000000000, p_610_reg_3142 };
  assign p_619_fu_1943_p1 = p_616_reg_3147;
  assign p_619_fu_1943_p10 = { 8'b00000000, p_616_reg_3147 };
  assign p_623_cast1_fu_1581_p1 = { 4'b0000, p_622_reg_3152 };
  assign p_625_cast_cast_fu_1966_p1 = { 1'b0, p_625_fu_1960_p2 };
  assign p_628_fu_1261_p4 = p_p2_in_bounded_stencil_stream_V_value_V_dout[583:576];
  assign p_629_cast_cast_fu_1271_p1 = { 1'b0, p_p2_in_bounded_stencil_stream_V_value_V_dout[583:576] };
  assign p_633_cast1_fu_1584_p1 = { 4'b0000, p_632_reg_3158 };
  assign p_635_cast_cast_fu_1987_p1 = { 1'b0, p_635_fu_1981_p2 };
  assign p_653_fu_1991_p1 = p_650_reg_3174;
  assign p_653_fu_1991_p10 = { 8'b00000000, p_650_reg_3174 };
  assign p_659_fu_1997_p1 = p_656_reg_3179;
  assign p_659_fu_1997_p10 = { 7'b0000000, p_656_reg_3179 };
  assign p_668_fu_1335_p4 = p_p2_in_bounded_stencil_stream_V_value_V_dout[639:632];
  assign p_669_cast1_fu_1345_p1 = { 4'b0000, p_p2_in_bounded_stencil_stream_V_value_V_dout[639:632] };
  assign p_674_fu_1349_p4 = p_p2_in_bounded_stencil_stream_V_value_V_dout[647:640];
  assign p_675_cast_cast_fu_1359_p1 = { 1'b0, p_p2_in_bounded_stencil_stream_V_value_V_dout[647:640] };
  assign p_s_fu_1681_p1 = p_256_reg_2845;
  assign p_s_fu_1681_p10 = { 7'b0000000, p_256_reg_2845 };
  assign p_shl1_cast_fu_1399_p1 = { 1'b0, p_p2_in_bounded_stencil_stream_V_value_V_dout[63:56], 3'b000 };
  assign p_shl1_fu_1391_p3 = { p_p2_in_bounded_stencil_stream_V_value_V_dout[63:56], 3'b000 };
  assign p_shl4_cast_fu_1423_p1 = { 1'b0, p_p2_in_bounded_stencil_stream_V_value_V_dout[639:632], 3'b000 };
  assign p_shl4_fu_1415_p3 = { p_p2_in_bounded_stencil_stream_V_value_V_dout[639:632], 3'b000 };
  assign p_shl5_cast_fu_1977_p1 = { 1'b0, p_632_reg_3158, 3'b000 };
  assign p_shl5_fu_1970_p3 = { p_632_reg_3158, 3'b000 };
  assign p_shl6_cast_fu_1956_p1 = { 1'b0, p_622_reg_3152, 3'b000 };
  assign p_shl6_fu_1949_p3 = { p_622_reg_3152, 3'b000 };
  assign p_shl7_cast_fu_1899_p1 = { 1'b0, p_574_reg_3111, 3'b000 };
  assign p_shl7_fu_1892_p3 = { p_574_reg_3111, 3'b000 };
  assign p_shl8_cast_fu_1710_p1 = { 1'b0, p_298_reg_2880, 3'b000 };
  assign p_shl8_fu_1703_p3 = { p_298_reg_2880, 3'b000 };
  assign p_shl9_cast_fu_1667_p1 = { 1'b0, p_250_reg_2839, 3'b000 };
  assign p_shl9_fu_1660_p3 = { p_250_reg_2839, 3'b000 };
  assign p_shl_cast_fu_1371_p1 = { 1'b0, p_p2_in_bounded_stencil_stream_V_value_V_dout[15:8], 3'b000 };
  assign p_shl_fu_1363_p3 = { p_p2_in_bounded_stencil_stream_V_value_V_dout[15:8], 3'b000 };
  assign tmp10_cast_fu_2441_p1 = { 2'b00, tmp10_reg_3359 };
  assign tmp11_cast_fu_2450_p1 = { 3'b000, ap_reg_ppstg_tmp11_reg_3229_pp0_it3 };
  assign tmp13_fu_1742_p2 = tmp13_cast_fu_1748_p1[3:0];
  assign tmp15_cast_fu_2477_p1 = { 1'b0, grp_fu_2598_p3 };
  assign tmp18_cast_fu_2507_p1 = { 2'b00, tmp18_reg_3409 };
  assign tmp19_cast_fu_2515_p1 = ap_reg_ppstg_tmp19_reg_3234_pp0_it5[13:0];
  assign tmp1_cast_fu_1381_p1 = { 3'b000, tmp1_fu_1375_p2 };
  assign tmp21_cast_fu_1802_p1 = { 3'b000, tmp21_fu_1796_p2 };
  assign tmp24_cast_fu_2531_p1 = { 2'b00, ap_reg_ppstg_tmp24_reg_3364_pp0_it6 };
  assign tmp26_cast_fu_2539_p1 = { 3'b000, ap_reg_ppstg_tmp26_reg_3369_pp0_it6 };
  assign tmp28_cast_fu_2255_p1 = { 2'b00, tmp28_fu_2250_p2 };
  assign tmp29_cast_fu_2247_p1 = { 3'b000, tmp29_reg_3254 };
  assign tmp34_cast_fu_2552_p1 = { 2'b00, ap_reg_ppstg_tmp34_reg_3374_pp0_it7 };
  assign tmp36_cast_fu_2560_p1 = { 2'b00, ap_reg_ppstg_tmp36_reg_3379_pp0_it7 };
  assign tmp37_cast_fu_2274_p1 = { 1'b0, grp_fu_2757_p3 };
  assign tmp38_cast_fu_2277_p1 = { 1'b0, grp_fu_2746_p4 };
  assign tmp40_cast_fu_2569_p1 = { 3'b000, ap_reg_ppstg_tmp40_reg_3384_pp0_it7 };
  assign tmp42_cast_fu_2286_p1 = { 1'b0, grp_fu_2738_p3 };
  assign tmp43_cast_fu_2289_p1 = { 1'b0, tmp43_reg_3289 };
  assign tmp44_cast_fu_2003_p1 = { 1'b0, grp_fu_2781_p3 };
  assign tmp45_cast_fu_2320_p1 = { 1'b0, tmp45_fu_2314_p2 };
  assign tmp46_cast_fu_2298_p1 = { 1'b0, tmp46_reg_3294 };
  assign tmp47_cast_fu_2012_p1 = grp_fu_2729_p3[11:0];
  assign tmp48_cast_fu_2310_p1 = { 1'b0, tmp48_fu_2304_p2 };
  assign tmp49_cast_fu_2301_p1 = { 1'b0, tmp49_reg_3299 };
  assign tmp4_cast_fu_2150_p1 = { 2'b00, tmp4_reg_3219 };
  assign tmp50_cast_fu_2578_p1 = { 5'b00000, ap_reg_ppstg_tmp50_reg_3389_pp0_it7 };
  assign tmp52_cast_fu_2351_p1 = { 1'b0, tmp52_fu_2345_p2 };
  assign tmp53_cast_fu_2330_p1 = { 1'b0, tmp53_reg_3304 };
  assign tmp54_cast_fu_2341_p1 = { 1'b0, tmp54_fu_2336_p2 };
  assign tmp55_cast_fu_2333_p1 = { 1'b0, tmp55_reg_3309 };
  assign tmp56_cast_fu_2367_p1 = { 2'b00, tmp56_fu_2361_p2 };
  assign tmp57_cast_fu_2355_p1 = { 1'b0, tmp57_reg_3314 };
  assign tmp58_cast_fu_2358_p1 = { 1'b0, tmp58_reg_3319 };
  assign tmp59_cast_fu_2039_p1 = { 1'b0, grp_fu_2712_p3 };
  assign tmp5_cast_fu_1651_p1 = { 2'b00, tmp5_reg_3194 };
  assign tmp60_cast_fu_2398_p1 = { 3'b000, tmp60_fu_2392_p2 };
  assign tmp62_cast_fu_2377_p1 = { 1'b0, tmp62_reg_3324 };
  assign tmp63_cast_fu_2380_p1 = { 1'b0, tmp63_reg_3329 };
  assign tmp64_cast_fu_2054_p1 = { 1'b0, grp_fu_2703_p3 };
  assign tmp65_cast_fu_2389_p1 = { 2'b00, tmp65_reg_3334 };
  assign tmp66_cast_fu_2075_p1 = { 1'b0, tmp66_fu_2069_p2 };
  assign tmp68_cast_fu_2079_p1 = { 2'b00, tmp68_reg_3199 };
  assign tmp69_cast_fu_1439_p1 = { 3'b000, tmp69_fu_1433_p2 };
  assign tmp6_cast_fu_2163_p1 = { 2'b00, tmp6_reg_3224 };
endmodule
module hls_target_am_addmul_8ns_8ns_10ns_18_1_DSP48_12(in0, in1, in2, dout);
  wire [24:0] a;
  wire [8:0] ad;
  wire [17:0] b;
  wire [24:0] d;
  output [17:0] dout;
  input [7:0] in0;
  input [7:0] in1;
  input [9:0] in2;
  wire [42:0] m;
  assign ad = in0 + in1;
  assign dout = ad * in2;
  assign a = { 17'b00000000000000000, in0 };
  assign b = { 8'b00000000, in2 };
  assign d = { 17'b00000000000000000, in1 };
  assign m[17:0] = dout;
endmodule
module hls_target_am_addmul_8ns_8ns_11ns_19_1_DSP48_14(in0, in1, in2, dout);
  wire [24:0] a;
  wire [8:0] ad;
  wire [17:0] b;
  wire [24:0] d;
  output [18:0] dout;
  input [7:0] in0;
  input [7:0] in1;
  input [10:0] in2;
  wire [42:0] m;
  assign ad = in0 + in1;
  assign dout = ad * in2;
  assign a = { 17'b00000000000000000, in0 };
  assign b = { 7'b0000000, in2 };
  assign d = { 17'b00000000000000000, in1 };
  assign m[18:0] = dout;
endmodule
module hls_target_am_addmul_8ns_8ns_6ns_14_1_DSP48_9(in0, in1, in2, dout);
  wire [24:0] a;
  wire [8:0] ad;
  wire [17:0] b;
  wire [24:0] d;
  output [13:0] dout;
  input [7:0] in0;
  input [7:0] in1;
  input [5:0] in2;
  wire [42:0] m;
  assign ad = in0 + in1;
  assign dout = ad * in2;
  assign a = { 17'b00000000000000000, in0 };
  assign b = { 12'b000000000000, in2 };
  assign d = { 17'b00000000000000000, in1 };
  assign m[13:0] = dout;
endmodule
module hls_target_am_addmul_8ns_8ns_7ns_15_1_DSP48_10(in0, in1, in2, dout);
  wire [24:0] a;
  wire [8:0] ad;
  wire [17:0] b;
  wire [24:0] d;
  output [14:0] dout;
  input [7:0] in0;
  input [7:0] in1;
  input [6:0] in2;
  wire [42:0] m;
  assign ad = in0 + in1;
  assign dout = ad * in2;
  assign a = { 17'b00000000000000000, in0 };
  assign b = { 11'b00000000000, in2 };
  assign d = { 17'b00000000000000000, in1 };
  assign m[14:0] = dout;
endmodule
module hls_target_am_addmul_8ns_8ns_9ns_17_1_DSP48_11(in0, in1, in2, dout);
  wire [24:0] a;
  wire [8:0] ad;
  wire [17:0] b;
  wire [24:0] d;
  output [16:0] dout;
  input [7:0] in0;
  input [7:0] in1;
  input [8:0] in2;
  wire [42:0] m;
  assign ad = in0 + in1;
  assign dout = ad * in2;
  assign a = { 17'b00000000000000000, in0 };
  assign b = { 9'b000000000, in2 };
  assign d = { 17'b00000000000000000, in1 };
  assign m[16:0] = dout;
endmodule
module hls_target_ama_addmuladd_8ns_8ns_12ns_20ns_21_1_DSP48_13(in0, in1, in2, in3, dout);
  wire [24:0] a;
  wire [8:0] ad;
  wire [17:0] b;
  wire [47:0] c;
  wire [24:0] d;
  output [20:0] dout;
  input [7:0] in0;
  input [7:0] in1;
  input [11:0] in2;
  input [19:0] in3;
  wire [20:0] m;
  wire [47:0] p;
  assign ad = in0 + in1;
  assign dout = m + in3;
  assign m = ad * in2;
  assign a = { 17'b00000000000000000, in0 };
  assign b = { 6'b000000, in2 };
  assign c = { 28'b0000000000000000000000000000, in3 };
  assign d = { 17'b00000000000000000, in1 };
  assign p[20:0] = dout;
endmodule
module hls_target_call(in_stream_V_value_V_dout, in_stream_V_value_V_empty_n, in_stream_V_value_V_read, out_stream_V_value_V_din, out_stream_V_value_V_full_n, out_stream_V_value_V_write, ap_clk, ap_rst, ap_continue, ap_done, ap_start, ap_idle, ap_ready);
  wire _0_;
  input ap_clk;
  input ap_continue;
  output ap_done;
  output ap_idle;
  output ap_ready;
  input ap_rst;
  wire ap_sig_hs_continue;
  wire ap_sig_hs_done;
  wire ap_sig_top_allready;
  input ap_start;
  wire hls_target_call_Loop_LB2D_buf_proc_U0_ap_done;
  wire hls_target_call_Loop_LB2D_buf_proc_U0_ap_idle;
  wire hls_target_call_Loop_LB2D_buf_proc_U0_ap_ready;
  wire hls_target_call_Loop_LB2D_buf_proc_U0_ap_start;
  wire [7:0] hls_target_call_Loop_LB2D_buf_proc_U0_in_stream_V_value_V_dout;
  wire hls_target_call_Loop_LB2D_buf_proc_U0_in_stream_V_value_V_empty_n;
  wire hls_target_call_Loop_LB2D_buf_proc_U0_in_stream_V_value_V_read;
  wire [71:0] hls_target_call_Loop_LB2D_buf_proc_U0_slice_stream_V_value_V_din;
  wire hls_target_call_Loop_LB2D_buf_proc_U0_slice_stream_V_value_V_full_n;
  wire hls_target_call_Loop_LB2D_buf_proc_U0_slice_stream_V_value_V_write;
  wire hls_target_call_Loop_LB2D_shift_proc_U0_ap_continue;
  wire hls_target_call_Loop_LB2D_shift_proc_U0_ap_done;
  wire hls_target_call_Loop_LB2D_shift_proc_U0_ap_idle;
  wire hls_target_call_Loop_LB2D_shift_proc_U0_ap_ready;
  reg hls_target_call_Loop_LB2D_shift_proc_U0_ap_start = 1'b0;
  wire [647:0] hls_target_call_Loop_LB2D_shift_proc_U0_out_stream_V_value_V_din;
  wire hls_target_call_Loop_LB2D_shift_proc_U0_out_stream_V_value_V_full_n;
  wire hls_target_call_Loop_LB2D_shift_proc_U0_out_stream_V_value_V_write;
  wire [71:0] hls_target_call_Loop_LB2D_shift_proc_U0_slice_stream_V_value_V_dout;
  wire hls_target_call_Loop_LB2D_shift_proc_U0_slice_stream_V_value_V_empty_n;
  wire hls_target_call_Loop_LB2D_shift_proc_U0_slice_stream_V_value_V_read;
  input [7:0] in_stream_V_value_V_dout;
  input in_stream_V_value_V_empty_n;
  output in_stream_V_value_V_read;
  output [647:0] out_stream_V_value_V_din;
  input out_stream_V_value_V_full_n;
  output out_stream_V_value_V_write;
  wire [71:0] slice_stream_V_value_V_din;
  wire [71:0] slice_stream_V_value_V_dout;
  wire slice_stream_V_value_V_empty_n;
  wire slice_stream_V_value_V_full_n;
  wire slice_stream_V_value_V_read;
  wire slice_stream_V_value_V_write;
  assign ap_idle = hls_target_call_Loop_LB2D_buf_proc_U0_ap_idle & hls_target_call_Loop_LB2D_shift_proc_U0_ap_idle;
  always @(posedge ap_clk)
      hls_target_call_Loop_LB2D_shift_proc_U0_ap_start <= _0_;
  assign _0_ = ap_rst ? 1'b0 : 1'b1;
  hls_target_call_Loop_LB2D_buf_proc hls_target_call_Loop_LB2D_buf_proc_U0 (
    .ap_clk(ap_clk),
    .ap_continue(1'b1),
    .ap_done(hls_target_call_Loop_LB2D_buf_proc_U0_ap_done),
    .ap_idle(hls_target_call_Loop_LB2D_buf_proc_U0_ap_idle),
    .ap_ready(hls_target_call_Loop_LB2D_buf_proc_U0_ap_ready),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .in_stream_V_value_V_dout(in_stream_V_value_V_dout),
    .in_stream_V_value_V_empty_n(in_stream_V_value_V_empty_n),
    .in_stream_V_value_V_read(hls_target_call_Loop_LB2D_buf_proc_U0_in_stream_V_value_V_read),
    .slice_stream_V_value_V_din(hls_target_call_Loop_LB2D_buf_proc_U0_slice_stream_V_value_V_din),
    .slice_stream_V_value_V_full_n(hls_target_call_Loop_LB2D_buf_proc_U0_slice_stream_V_value_V_full_n),
    .slice_stream_V_value_V_write(hls_target_call_Loop_LB2D_buf_proc_U0_slice_stream_V_value_V_write)
  );
  hls_target_call_Loop_LB2D_shift_proc hls_target_call_Loop_LB2D_shift_proc_U0 (
    .ap_clk(ap_clk),
    .ap_continue(ap_continue),
    .ap_done(hls_target_call_Loop_LB2D_shift_proc_U0_ap_done),
    .ap_idle(hls_target_call_Loop_LB2D_shift_proc_U0_ap_idle),
    .ap_ready(hls_target_call_Loop_LB2D_shift_proc_U0_ap_ready),
    .ap_rst(ap_rst),
    .ap_start(hls_target_call_Loop_LB2D_shift_proc_U0_ap_start),
    .out_stream_V_value_V_din(hls_target_call_Loop_LB2D_shift_proc_U0_out_stream_V_value_V_din),
    .out_stream_V_value_V_full_n(out_stream_V_value_V_full_n),
    .out_stream_V_value_V_write(hls_target_call_Loop_LB2D_shift_proc_U0_out_stream_V_value_V_write),
    .slice_stream_V_value_V_dout(hls_target_call_Loop_LB2D_shift_proc_U0_slice_stream_V_value_V_dout),
    .slice_stream_V_value_V_empty_n(hls_target_call_Loop_LB2D_shift_proc_U0_slice_stream_V_value_V_empty_n),
    .slice_stream_V_value_V_read(hls_target_call_Loop_LB2D_shift_proc_U0_slice_stream_V_value_V_read)
  );
  FIFO_hls_target_call_slice_stream_V_value_V slice_stream_V_value_V_U (
    .clk(ap_clk),
    .if_din(hls_target_call_Loop_LB2D_buf_proc_U0_slice_stream_V_value_V_din),
    .if_dout(hls_target_call_Loop_LB2D_shift_proc_U0_slice_stream_V_value_V_dout),
    .if_empty_n(hls_target_call_Loop_LB2D_shift_proc_U0_slice_stream_V_value_V_empty_n),
    .if_full_n(hls_target_call_Loop_LB2D_buf_proc_U0_slice_stream_V_value_V_full_n),
    .if_read(hls_target_call_Loop_LB2D_shift_proc_U0_slice_stream_V_value_V_read),
    .if_read_ce(1'b1),
    .if_write(hls_target_call_Loop_LB2D_buf_proc_U0_slice_stream_V_value_V_write),
    .if_write_ce(1'b1),
    .reset(ap_rst)
  );
  assign ap_done = hls_target_call_Loop_LB2D_shift_proc_U0_ap_done;
  assign ap_ready = hls_target_call_Loop_LB2D_buf_proc_U0_ap_ready;
  assign ap_sig_hs_continue = ap_continue;
  assign ap_sig_hs_done = hls_target_call_Loop_LB2D_shift_proc_U0_ap_done;
  assign ap_sig_top_allready = hls_target_call_Loop_LB2D_buf_proc_U0_ap_ready;
  assign hls_target_call_Loop_LB2D_buf_proc_U0_ap_start = ap_start;
  assign hls_target_call_Loop_LB2D_buf_proc_U0_in_stream_V_value_V_dout = in_stream_V_value_V_dout;
  assign hls_target_call_Loop_LB2D_buf_proc_U0_in_stream_V_value_V_empty_n = in_stream_V_value_V_empty_n;
  assign hls_target_call_Loop_LB2D_shift_proc_U0_ap_continue = ap_continue;
  assign hls_target_call_Loop_LB2D_shift_proc_U0_out_stream_V_value_V_full_n = out_stream_V_value_V_full_n;
  assign in_stream_V_value_V_read = hls_target_call_Loop_LB2D_buf_proc_U0_in_stream_V_value_V_read;
  assign out_stream_V_value_V_din = hls_target_call_Loop_LB2D_shift_proc_U0_out_stream_V_value_V_din;
  assign out_stream_V_value_V_write = hls_target_call_Loop_LB2D_shift_proc_U0_out_stream_V_value_V_write;
  assign slice_stream_V_value_V_din = hls_target_call_Loop_LB2D_buf_proc_U0_slice_stream_V_value_V_din;
  assign slice_stream_V_value_V_dout = hls_target_call_Loop_LB2D_shift_proc_U0_slice_stream_V_value_V_dout;
  assign slice_stream_V_value_V_empty_n = hls_target_call_Loop_LB2D_shift_proc_U0_slice_stream_V_value_V_empty_n;
  assign slice_stream_V_value_V_full_n = hls_target_call_Loop_LB2D_buf_proc_U0_slice_stream_V_value_V_full_n;
  assign slice_stream_V_value_V_read = hls_target_call_Loop_LB2D_shift_proc_U0_slice_stream_V_value_V_read;
  assign slice_stream_V_value_V_write = hls_target_call_Loop_LB2D_buf_proc_U0_slice_stream_V_value_V_write;
endmodule
module hls_target_call_Loop_LB2D_buf_proc(ap_clk, ap_rst, ap_start, ap_done, ap_continue, ap_idle, ap_ready, in_stream_V_value_V_dout, in_stream_V_value_V_empty_n, in_stream_V_value_V_read, slice_stream_V_value_V_din, slice_stream_V_value_V_full_n, slice_stream_V_value_V_write);
  wire [3:0] _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire [8:0] _004_;
  wire [8:0] _005_;
  wire _006_;
  wire _007_;
  wire [63:0] _008_;
  wire [9:0] _009_;
  wire [9:0] _010_;
  wire [2:0] _011_;
  wire [2:0] _012_;
  wire [63:0] _013_;
  wire [63:0] _014_;
  wire [1:0] _015_;
  wire [2:0] _016_;
  wire [3:0] _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire [63:0] _071_;
  wire [63:0] _072_;
  wire [9:0] _073_;
  wire [8:0] _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  reg [3:0] ap_CS_fsm = 4'b0001;
  wire [3:0] ap_NS_fsm;
  input ap_clk;
  input ap_continue;
  output ap_done;
  reg ap_done_reg = 1'b0;
  output ap_idle;
  output ap_ready;
  reg ap_reg_ppiten_pp0_it0 = 1'b0;
  reg ap_reg_ppiten_pp0_it1 = 1'b0;
  input ap_rst;
  wire ap_sig_bdd_122;
  wire ap_sig_bdd_222;
  wire ap_sig_bdd_23;
  wire ap_sig_bdd_49;
  wire ap_sig_bdd_65;
  wire ap_sig_bdd_76;
  wire ap_sig_cseq_ST_pp0_stg0_fsm_2;
  wire ap_sig_cseq_ST_st1_fsm_0;
  wire ap_sig_cseq_ST_st2_fsm_1;
  wire ap_sig_cseq_ST_st5_fsm_3;
  input ap_start;
  wire [8:0] buffer_0_value_V_address0;
  wire [8:0] buffer_0_value_V_address1;
  wire buffer_0_value_V_ce0;
  wire buffer_0_value_V_ce1;
  wire [7:0] buffer_0_value_V_d1;
  wire [7:0] buffer_0_value_V_q0;
  wire buffer_0_value_V_we1;
  wire [8:0] buffer_1_value_V_address0;
  wire [8:0] buffer_1_value_V_address1;
  wire buffer_1_value_V_ce0;
  wire buffer_1_value_V_ce1;
  wire [7:0] buffer_1_value_V_d1;
  wire [7:0] buffer_1_value_V_q0;
  wire buffer_1_value_V_we1;
  wire [8:0] buffer_2_value_V_address0;
  wire [8:0] buffer_2_value_V_address1;
  wire buffer_2_value_V_ce0;
  wire buffer_2_value_V_ce1;
  wire [7:0] buffer_2_value_V_d1;
  wire [7:0] buffer_2_value_V_q0;
  wire buffer_2_value_V_we1;
  wire [8:0] buffer_3_value_V_address0;
  wire [8:0] buffer_3_value_V_address1;
  wire buffer_3_value_V_ce0;
  wire buffer_3_value_V_ce1;
  wire [7:0] buffer_3_value_V_d1;
  wire [7:0] buffer_3_value_V_q0;
  wire buffer_3_value_V_we1;
  wire [8:0] buffer_4_value_V_address0;
  wire [8:0] buffer_4_value_V_address1;
  wire buffer_4_value_V_ce0;
  wire buffer_4_value_V_ce1;
  wire [7:0] buffer_4_value_V_d1;
  wire [7:0] buffer_4_value_V_q0;
  wire buffer_4_value_V_we1;
  wire [8:0] buffer_5_value_V_address0;
  wire [8:0] buffer_5_value_V_address1;
  wire buffer_5_value_V_ce0;
  wire buffer_5_value_V_ce1;
  wire [7:0] buffer_5_value_V_d1;
  wire [7:0] buffer_5_value_V_q0;
  wire buffer_5_value_V_we1;
  wire [8:0] buffer_6_value_V_address0;
  wire [8:0] buffer_6_value_V_address1;
  wire buffer_6_value_V_ce0;
  wire buffer_6_value_V_ce1;
  wire [7:0] buffer_6_value_V_d1;
  wire [7:0] buffer_6_value_V_q0;
  wire buffer_6_value_V_we1;
  wire [8:0] buffer_7_value_V_address0;
  wire [8:0] buffer_7_value_V_address1;
  wire buffer_7_value_V_ce0;
  wire buffer_7_value_V_ce1;
  wire [7:0] buffer_7_value_V_d1;
  wire [7:0] buffer_7_value_V_q0;
  wire buffer_7_value_V_we1;
  wire [8:0] col_1_fu_394_p2;
  wire [63:0] col_cast_fu_400_p1;
  wire [63:0] col_cast_reg_711;
  reg [8:0] col_reg_349;
  wire exitcond2_fu_360_p2;
  wire exitcond3_fu_388_p2;
  reg exitcond3_reg_702;
  wire icmp1_fu_422_p2;
  wire icmp_fu_382_p2;
  reg icmp_reg_698;
  input [7:0] in_stream_V_value_V_dout;
  input in_stream_V_value_V_empty_n;
  output in_stream_V_value_V_read;
  wire [63:0] p_write_idx_1_1_fu_434_p3;
  reg [63:0] p_write_idx_1_1_reg_723;
  wire [9:0] row_1_fu_366_p2;
  reg [9:0] row_1_reg_693;
  reg [9:0] row_reg_327;
  output [71:0] slice_stream_V_value_V_din;
  input slice_stream_V_value_V_full_n;
  output slice_stream_V_value_V_write;
  wire [60:0] tmp_11_fu_412_p4;
  wire [2:0] tmp_12_fu_442_p1;
  reg [2:0] tmp_12_reg_728;
  wire [2:0] tmp_13_fu_446_p1;
  reg [2:0] tmp_13_reg_780;
  wire [7:0] tmp_1_fu_450_p10;
  wire [7:0] tmp_4_fu_476_p10;
  wire [2:0] tmp_4_fu_476_p9;
  wire [7:0] tmp_5_fu_503_p10;
  wire [2:0] tmp_5_fu_503_p9;
  wire [7:0] tmp_6_fu_530_p10;
  wire [2:0] tmp_6_fu_530_p9;
  wire [7:0] tmp_7_fu_557_p10;
  wire [2:0] tmp_7_fu_557_p9;
  wire [7:0] tmp_8_fu_584_p10;
  wire [2:0] tmp_8_fu_584_p9;
  wire [7:0] tmp_9_fu_611_p10;
  wire [2:0] tmp_9_fu_611_p9;
  wire [6:0] tmp_fu_372_p4;
  wire [7:0] tmp_s_fu_638_p10;
  wire [2:0] tmp_s_fu_638_p9;
  wire [63:0] write_idx_1_1_phi_fu_341_p4;
  reg [63:0] write_idx_1_1_reg_338;
  wire [63:0] write_idx_1_2_fu_683_p2;
  wire [63:0] write_idx_1_3_fu_428_p2;
  reg [63:0] write_idx_1_reg_315;
  assign col_1_fu_394_p2 = col_reg_349 + 1'b1;
  assign row_1_fu_366_p2 = row_reg_327 + 1'b1;
  assign tmp_4_fu_476_p9 = 1'b1 + tmp_12_reg_728;
  assign tmp_5_fu_503_p9 = 2'b10 + tmp_12_reg_728;
  assign tmp_6_fu_530_p9 = 2'b11 + tmp_12_reg_728;
  assign tmp_8_fu_584_p9 = $signed(3'b101) + $signed(tmp_12_reg_728);
  assign tmp_9_fu_611_p9 = $signed(2'b10) + $signed(tmp_12_reg_728);
  assign tmp_s_fu_638_p9 = $signed(1'b1) + $signed(tmp_12_reg_728);
  assign write_idx_1_2_fu_683_p2 = write_idx_1_1_reg_338 + 1'b1;
  assign write_idx_1_3_fu_428_p2 = $signed(write_idx_1_1_phi_fu_341_p4) + $signed(4'b1000);
  assign _018_ = _044_ & _045_;
  assign _019_ = _046_ & _047_;
  assign ap_ready = ap_CS_fsm[1] & exitcond2_fu_360_p2;
  assign _020_ = ap_sig_bdd_76 & ap_reg_ppiten_pp0_it1;
  assign _021_ = ap_CS_fsm[2] & _058_;
  assign _022_ = _021_ & exitcond3_fu_388_p2;
  assign _023_ = ap_CS_fsm[1] & _048_;
  assign _024_ = _021_ & _049_;
  assign _025_ = ap_CS_fsm[2] & ap_reg_ppiten_pp0_it0;
  assign _026_ = buffer_0_value_V_ce0 & _049_;
  assign _027_ = ap_CS_fsm[0] & _059_;
  assign _031_ = _030_ & _058_;
  assign _032_ = _031_ & _049_;
  assign ap_idle = _043_ & ap_CS_fsm[0];
  assign _033_ = ap_CS_fsm[2] & ap_reg_ppiten_pp0_it1;
  assign buffer_0_value_V_we1 = buffer_0_value_V_ce1 & _050_;
  assign buffer_1_value_V_we1 = buffer_0_value_V_ce1 & _051_;
  assign buffer_2_value_V_we1 = buffer_0_value_V_ce1 & _052_;
  assign buffer_3_value_V_we1 = buffer_0_value_V_ce1 & _053_;
  assign buffer_4_value_V_we1 = buffer_0_value_V_ce1 & _054_;
  assign buffer_5_value_V_we1 = buffer_0_value_V_ce1 & _055_;
  assign buffer_6_value_V_we1 = buffer_0_value_V_ce1 & _056_;
  assign buffer_0_value_V_ce0 = _025_ & _058_;
  assign buffer_0_value_V_ce1 = _033_ & _058_;
  assign _034_ = buffer_0_value_V_ce1 & _060_;
  assign _035_ = _034_ & _061_;
  assign _036_ = _035_ & _062_;
  assign _037_ = _036_ & _063_;
  assign _038_ = _037_ & _064_;
  assign _039_ = _038_ & _065_;
  assign buffer_7_value_V_we1 = _039_ & _066_;
  assign _028_ = ap_CS_fsm[2] & _045_;
  assign _029_ = _028_ & ap_reg_ppiten_pp0_it1;
  assign in_stream_V_value_V_read = _029_ & _058_;
  assign _030_ = ap_CS_fsm[2] & _047_;
  assign _040_ = _030_ & ap_reg_ppiten_pp0_it1;
  assign slice_stream_V_value_V_write = _040_ & _058_;
  assign _041_ = ap_reg_ppiten_pp0_it0 & _058_;
  assign _042_ = _041_ & exitcond3_fu_388_p2;
  assign _043_ = ~ ap_start;
  assign _044_ = ~ in_stream_V_value_V_empty_n;
  assign _045_ = ~ exitcond3_reg_702;
  assign _046_ = ~ slice_stream_V_value_V_full_n;
  assign _047_ = ~ icmp_reg_698;
  assign exitcond2_fu_360_p2 = row_reg_327 == 10'b1010001000;
  assign exitcond3_fu_388_p2 = col_reg_349 == 9'b111101000;
  assign icmp_fu_382_p2 = ! row_reg_327[9:3];
  assign _048_ = ~ exitcond2_fu_360_p2;
  assign _049_ = ~ exitcond3_fu_388_p2;
  assign _050_ = ! tmp_13_reg_780;
  assign _051_ = tmp_13_reg_780 == 1'b1;
  assign _052_ = tmp_13_reg_780 == 2'b10;
  assign _053_ = tmp_13_reg_780 == 2'b11;
  assign _054_ = tmp_13_reg_780 == 3'b100;
  assign _055_ = tmp_13_reg_780 == 3'b101;
  assign _056_ = tmp_13_reg_780 == 3'b110;
  assign _057_ = icmp1_fu_422_p2 === 1'b1;
  assign icmp1_fu_422_p2 = | write_idx_1_1_phi_fu_341_p4[63:3];
  assign _058_ = ~ _020_;
  assign _059_ = ~ ap_sig_bdd_222;
  assign _060_ = ~ _056_;
  assign _061_ = ~ _055_;
  assign _062_ = ~ _054_;
  assign _063_ = ~ _053_;
  assign _064_ = ~ _052_;
  assign _065_ = ~ _051_;
  assign _066_ = ~ _050_;
  assign ap_sig_bdd_222 = _043_ | ap_done_reg;
  assign ap_sig_bdd_76 = _018_ | _019_;
  assign _067_ = _023_ | _022_;
  assign ap_done = ap_done_reg | ap_ready;
  always @(posedge ap_clk)
      tmp_12_reg_728 <= _011_;
  always @(posedge ap_clk)
      row_1_reg_693 <= _009_;
  always @(posedge ap_clk)
      p_write_idx_1_1_reg_723 <= _008_;
  always @(posedge ap_clk)
      icmp_reg_698 <= _007_;
  always @(posedge ap_clk)
      exitcond3_reg_702 <= _006_;
  reg [8:0] _167_;
  always @(posedge ap_clk)
      _167_ <= _004_;
  assign col_cast_reg_711[8:0] = _167_;
  always @(posedge ap_clk)
      tmp_13_reg_780 <= _012_;
  always @(posedge ap_clk)
      write_idx_1_reg_315 <= _014_;
  always @(posedge ap_clk)
      write_idx_1_1_reg_338 <= _013_;
  always @(posedge ap_clk)
      row_reg_327 <= _010_;
  always @(posedge ap_clk)
      col_reg_349 <= _005_;
  always @(posedge ap_clk)
      ap_reg_ppiten_pp0_it1 <= _003_;
  always @(posedge ap_clk)
      ap_reg_ppiten_pp0_it0 <= _002_;
  always @(posedge ap_clk)
      ap_done_reg <= _001_;
  always @(posedge ap_clk)
      ap_CS_fsm <= _000_;
  assign _068_ = ap_CS_fsm == 3'b100;
  assign _017_ = _042_ ? 4'b1000 : 4'b0100;
  assign _016_ = exitcond2_fu_360_p2 ? 3'b001 : 3'b100;
  assign _069_ = ap_CS_fsm == 2'b10;
  assign _015_ = ap_sig_bdd_222 ? 2'b01 : 2'b10;
  wire [3:0] fangyuan33;
  assign fangyuan33 = { 2'b00, _015_ };
  wire [11:0] fangyuan34;
  assign fangyuan34 = { 1'b0, _016_, _017_, 4'b0010 };
  wire [2:0] fangyuan35;
  assign fangyuan35 = { _069_, _068_, _070_ };
  always @(fangyuan33 or fangyuan34 or fangyuan35) begin
    casez (fangyuan35)
      3'b??1 :
        ap_NS_fsm = fangyuan34 [3:0] ;
      3'b?1? :
        ap_NS_fsm = fangyuan34 [7:4] ;
      3'b1?? :
        ap_NS_fsm = fangyuan34 [11:8] ;
      default:
        ap_NS_fsm = fangyuan33 ;
    endcase
  end
  assign _070_ = ap_CS_fsm == 4'b1000;
  assign write_idx_1_1_phi_fu_341_p4 = _029_ ? p_write_idx_1_1_reg_723 : write_idx_1_1_reg_338;
  assign _011_ = _032_ ? p_write_idx_1_1_fu_434_p3[2:0] : tmp_12_reg_728;
  assign _009_ = ap_CS_fsm[1] ? row_1_fu_366_p2 : row_1_reg_693;
  assign _008_ = _026_ ? p_write_idx_1_1_fu_434_p3 : p_write_idx_1_1_reg_723;
  assign _007_ = _023_ ? icmp_fu_382_p2 : icmp_reg_698;
  assign _006_ = _021_ ? exitcond3_fu_388_p2 : exitcond3_reg_702;
  assign _012_ = _024_ ? p_write_idx_1_1_fu_434_p3[2:0] : tmp_13_reg_780;
  assign _004_ = _024_ ? col_reg_349 : col_cast_reg_711[8:0];
  assign _071_ = _027_ ? 64'b0000000000000000000000000000000000000000000000000000000000000000 : write_idx_1_reg_315;
  assign _014_ = ap_CS_fsm[3] ? write_idx_1_2_fu_683_p2 : _071_;
  assign _072_ = _023_ ? write_idx_1_reg_315 : write_idx_1_1_reg_338;
  assign _013_ = in_stream_V_value_V_read ? p_write_idx_1_1_reg_723 : _072_;
  assign _073_ = _027_ ? 10'b0000000000 : row_reg_327;
  assign _010_ = ap_CS_fsm[3] ? row_1_reg_693 : _073_;
  assign _074_ = _023_ ? 9'b000000000 : col_reg_349;
  assign _005_ = _026_ ? col_1_fu_394_p2 : _074_;
  assign _075_ = _067_ ? 1'b0 : ap_reg_ppiten_pp0_it1;
  assign _076_ = _024_ ? 1'b1 : _075_;
  assign _003_ = ap_rst ? 1'b0 : _076_;
  assign _077_ = _023_ ? 1'b1 : ap_reg_ppiten_pp0_it0;
  assign _078_ = _022_ ? 1'b0 : _077_;
  assign _002_ = ap_rst ? 1'b0 : _078_;
  assign _079_ = ap_ready ? 1'b1 : ap_done_reg;
  assign _080_ = ap_continue ? 1'b0 : _079_;
  assign _001_ = ap_rst ? 1'b0 : _080_;
  assign _000_ = ap_rst ? 4'b0001 : ap_NS_fsm;
  assign p_write_idx_1_1_fu_434_p3 = _057_ ? write_idx_1_3_fu_428_p2 : write_idx_1_1_phi_fu_341_p4;
  assign tmp_7_fu_557_p9 = tmp_12_reg_728 ^ 3'b100;
  \$paramod\hls_target_call_Loop_LB2D_buf_proc_buffer_0_value_V\DataWidth=8\AddressRange=488\AddressWidth=9 buffer_0_value_V_U (
    .address0(col_reg_349),
    .address1(col_cast_reg_711[8:0]),
    .ce0(buffer_0_value_V_ce0),
    .ce1(buffer_0_value_V_ce1),
    .clk(ap_clk),
    .d1(in_stream_V_value_V_dout),
    .q0(buffer_0_value_V_q0),
    .reset(ap_rst),
    .we1(buffer_0_value_V_we1)
  );
  \$paramod\hls_target_call_Loop_LB2D_buf_proc_buffer_0_value_V\DataWidth=8\AddressRange=488\AddressWidth=9 buffer_1_value_V_U (
    .address0(col_reg_349),
    .address1(col_cast_reg_711[8:0]),
    .ce0(buffer_0_value_V_ce0),
    .ce1(buffer_0_value_V_ce1),
    .clk(ap_clk),
    .d1(in_stream_V_value_V_dout),
    .q0(buffer_1_value_V_q0),
    .reset(ap_rst),
    .we1(buffer_1_value_V_we1)
  );
  \$paramod\hls_target_call_Loop_LB2D_buf_proc_buffer_0_value_V\DataWidth=8\AddressRange=488\AddressWidth=9 buffer_2_value_V_U (
    .address0(col_reg_349),
    .address1(col_cast_reg_711[8:0]),
    .ce0(buffer_0_value_V_ce0),
    .ce1(buffer_0_value_V_ce1),
    .clk(ap_clk),
    .d1(in_stream_V_value_V_dout),
    .q0(buffer_2_value_V_q0),
    .reset(ap_rst),
    .we1(buffer_2_value_V_we1)
  );
  \$paramod\hls_target_call_Loop_LB2D_buf_proc_buffer_0_value_V\DataWidth=8\AddressRange=488\AddressWidth=9 buffer_3_value_V_U (
    .address0(col_reg_349),
    .address1(col_cast_reg_711[8:0]),
    .ce0(buffer_0_value_V_ce0),
    .ce1(buffer_0_value_V_ce1),
    .clk(ap_clk),
    .d1(in_stream_V_value_V_dout),
    .q0(buffer_3_value_V_q0),
    .reset(ap_rst),
    .we1(buffer_3_value_V_we1)
  );
  \$paramod\hls_target_call_Loop_LB2D_buf_proc_buffer_0_value_V\DataWidth=8\AddressRange=488\AddressWidth=9 buffer_4_value_V_U (
    .address0(col_reg_349),
    .address1(col_cast_reg_711[8:0]),
    .ce0(buffer_0_value_V_ce0),
    .ce1(buffer_0_value_V_ce1),
    .clk(ap_clk),
    .d1(in_stream_V_value_V_dout),
    .q0(buffer_4_value_V_q0),
    .reset(ap_rst),
    .we1(buffer_4_value_V_we1)
  );
  \$paramod\hls_target_call_Loop_LB2D_buf_proc_buffer_0_value_V\DataWidth=8\AddressRange=488\AddressWidth=9 buffer_5_value_V_U (
    .address0(col_reg_349),
    .address1(col_cast_reg_711[8:0]),
    .ce0(buffer_0_value_V_ce0),
    .ce1(buffer_0_value_V_ce1),
    .clk(ap_clk),
    .d1(in_stream_V_value_V_dout),
    .q0(buffer_5_value_V_q0),
    .reset(ap_rst),
    .we1(buffer_5_value_V_we1)
  );
  \$paramod\hls_target_call_Loop_LB2D_buf_proc_buffer_0_value_V\DataWidth=8\AddressRange=488\AddressWidth=9 buffer_6_value_V_U (
    .address0(col_reg_349),
    .address1(col_cast_reg_711[8:0]),
    .ce0(buffer_0_value_V_ce0),
    .ce1(buffer_0_value_V_ce1),
    .clk(ap_clk),
    .d1(in_stream_V_value_V_dout),
    .q0(buffer_6_value_V_q0),
    .reset(ap_rst),
    .we1(buffer_6_value_V_we1)
  );
  \$paramod\hls_target_call_Loop_LB2D_buf_proc_buffer_0_value_V\DataWidth=8\AddressRange=488\AddressWidth=9 buffer_7_value_V_U (
    .address0(col_reg_349),
    .address1(col_cast_reg_711[8:0]),
    .ce0(buffer_0_value_V_ce0),
    .ce1(buffer_0_value_V_ce1),
    .clk(ap_clk),
    .d1(in_stream_V_value_V_dout),
    .q0(buffer_7_value_V_q0),
    .reset(ap_rst),
    .we1(buffer_7_value_V_we1)
  );
  \$paramod$5513bb70403d25cd12b58ee992f86db3ee5f73ce\hls_target_mux_8to1_sel3_8_1 hls_target_mux_8to1_sel3_8_1_U10 (
    .din1(buffer_0_value_V_q0),
    .din2(buffer_1_value_V_q0),
    .din3(buffer_2_value_V_q0),
    .din4(buffer_3_value_V_q0),
    .din5(buffer_4_value_V_q0),
    .din6(buffer_5_value_V_q0),
    .din7(buffer_6_value_V_q0),
    .din8(buffer_7_value_V_q0),
    .din9(tmp_s_fu_638_p9),
    .dout(tmp_s_fu_638_p10)
  );
  \$paramod$5513bb70403d25cd12b58ee992f86db3ee5f73ce\hls_target_mux_8to1_sel3_8_1 hls_target_mux_8to1_sel3_8_1_U3 (
    .din1(buffer_0_value_V_q0),
    .din2(buffer_1_value_V_q0),
    .din3(buffer_2_value_V_q0),
    .din4(buffer_3_value_V_q0),
    .din5(buffer_4_value_V_q0),
    .din6(buffer_5_value_V_q0),
    .din7(buffer_6_value_V_q0),
    .din8(buffer_7_value_V_q0),
    .din9(tmp_12_reg_728),
    .dout(tmp_1_fu_450_p10)
  );
  \$paramod$5513bb70403d25cd12b58ee992f86db3ee5f73ce\hls_target_mux_8to1_sel3_8_1 hls_target_mux_8to1_sel3_8_1_U4 (
    .din1(buffer_0_value_V_q0),
    .din2(buffer_1_value_V_q0),
    .din3(buffer_2_value_V_q0),
    .din4(buffer_3_value_V_q0),
    .din5(buffer_4_value_V_q0),
    .din6(buffer_5_value_V_q0),
    .din7(buffer_6_value_V_q0),
    .din8(buffer_7_value_V_q0),
    .din9(tmp_4_fu_476_p9),
    .dout(tmp_4_fu_476_p10)
  );
  \$paramod$5513bb70403d25cd12b58ee992f86db3ee5f73ce\hls_target_mux_8to1_sel3_8_1 hls_target_mux_8to1_sel3_8_1_U5 (
    .din1(buffer_0_value_V_q0),
    .din2(buffer_1_value_V_q0),
    .din3(buffer_2_value_V_q0),
    .din4(buffer_3_value_V_q0),
    .din5(buffer_4_value_V_q0),
    .din6(buffer_5_value_V_q0),
    .din7(buffer_6_value_V_q0),
    .din8(buffer_7_value_V_q0),
    .din9(tmp_5_fu_503_p9),
    .dout(tmp_5_fu_503_p10)
  );
  \$paramod$5513bb70403d25cd12b58ee992f86db3ee5f73ce\hls_target_mux_8to1_sel3_8_1 hls_target_mux_8to1_sel3_8_1_U6 (
    .din1(buffer_0_value_V_q0),
    .din2(buffer_1_value_V_q0),
    .din3(buffer_2_value_V_q0),
    .din4(buffer_3_value_V_q0),
    .din5(buffer_4_value_V_q0),
    .din6(buffer_5_value_V_q0),
    .din7(buffer_6_value_V_q0),
    .din8(buffer_7_value_V_q0),
    .din9(tmp_6_fu_530_p9),
    .dout(tmp_6_fu_530_p10)
  );
  \$paramod$5513bb70403d25cd12b58ee992f86db3ee5f73ce\hls_target_mux_8to1_sel3_8_1 hls_target_mux_8to1_sel3_8_1_U7 (
    .din1(buffer_0_value_V_q0),
    .din2(buffer_1_value_V_q0),
    .din3(buffer_2_value_V_q0),
    .din4(buffer_3_value_V_q0),
    .din5(buffer_4_value_V_q0),
    .din6(buffer_5_value_V_q0),
    .din7(buffer_6_value_V_q0),
    .din8(buffer_7_value_V_q0),
    .din9(tmp_7_fu_557_p9),
    .dout(tmp_7_fu_557_p10)
  );
  \$paramod$5513bb70403d25cd12b58ee992f86db3ee5f73ce\hls_target_mux_8to1_sel3_8_1 hls_target_mux_8to1_sel3_8_1_U8 (
    .din1(buffer_0_value_V_q0),
    .din2(buffer_1_value_V_q0),
    .din3(buffer_2_value_V_q0),
    .din4(buffer_3_value_V_q0),
    .din5(buffer_4_value_V_q0),
    .din6(buffer_5_value_V_q0),
    .din7(buffer_6_value_V_q0),
    .din8(buffer_7_value_V_q0),
    .din9(tmp_8_fu_584_p9),
    .dout(tmp_8_fu_584_p10)
  );
  \$paramod$5513bb70403d25cd12b58ee992f86db3ee5f73ce\hls_target_mux_8to1_sel3_8_1 hls_target_mux_8to1_sel3_8_1_U9 (
    .din1(buffer_0_value_V_q0),
    .din2(buffer_1_value_V_q0),
    .din3(buffer_2_value_V_q0),
    .din4(buffer_3_value_V_q0),
    .din5(buffer_4_value_V_q0),
    .din6(buffer_5_value_V_q0),
    .din7(buffer_6_value_V_q0),
    .din8(buffer_7_value_V_q0),
    .din9(tmp_9_fu_611_p9),
    .dout(tmp_9_fu_611_p10)
  );
  assign ap_sig_bdd_122 = ap_CS_fsm[3];
  assign ap_sig_bdd_23 = ap_CS_fsm[0];
  assign ap_sig_bdd_49 = ap_CS_fsm[1];
  assign ap_sig_bdd_65 = ap_CS_fsm[2];
  assign ap_sig_cseq_ST_pp0_stg0_fsm_2 = ap_CS_fsm[2];
  assign ap_sig_cseq_ST_st1_fsm_0 = ap_CS_fsm[0];
  assign ap_sig_cseq_ST_st2_fsm_1 = ap_CS_fsm[1];
  assign ap_sig_cseq_ST_st5_fsm_3 = ap_CS_fsm[3];
  assign buffer_0_value_V_address0 = col_reg_349;
  assign buffer_0_value_V_address1 = col_cast_reg_711[8:0];
  assign buffer_0_value_V_d1 = in_stream_V_value_V_dout;
  assign buffer_1_value_V_address0 = col_reg_349;
  assign buffer_1_value_V_address1 = col_cast_reg_711[8:0];
  assign buffer_1_value_V_ce0 = buffer_0_value_V_ce0;
  assign buffer_1_value_V_ce1 = buffer_0_value_V_ce1;
  assign buffer_1_value_V_d1 = in_stream_V_value_V_dout;
  assign buffer_2_value_V_address0 = col_reg_349;
  assign buffer_2_value_V_address1 = col_cast_reg_711[8:0];
  assign buffer_2_value_V_ce0 = buffer_0_value_V_ce0;
  assign buffer_2_value_V_ce1 = buffer_0_value_V_ce1;
  assign buffer_2_value_V_d1 = in_stream_V_value_V_dout;
  assign buffer_3_value_V_address0 = col_reg_349;
  assign buffer_3_value_V_address1 = col_cast_reg_711[8:0];
  assign buffer_3_value_V_ce0 = buffer_0_value_V_ce0;
  assign buffer_3_value_V_ce1 = buffer_0_value_V_ce1;
  assign buffer_3_value_V_d1 = in_stream_V_value_V_dout;
  assign buffer_4_value_V_address0 = col_reg_349;
  assign buffer_4_value_V_address1 = col_cast_reg_711[8:0];
  assign buffer_4_value_V_ce0 = buffer_0_value_V_ce0;
  assign buffer_4_value_V_ce1 = buffer_0_value_V_ce1;
  assign buffer_4_value_V_d1 = in_stream_V_value_V_dout;
  assign buffer_5_value_V_address0 = col_reg_349;
  assign buffer_5_value_V_address1 = col_cast_reg_711[8:0];
  assign buffer_5_value_V_ce0 = buffer_0_value_V_ce0;
  assign buffer_5_value_V_ce1 = buffer_0_value_V_ce1;
  assign buffer_5_value_V_d1 = in_stream_V_value_V_dout;
  assign buffer_6_value_V_address0 = col_reg_349;
  assign buffer_6_value_V_address1 = col_cast_reg_711[8:0];
  assign buffer_6_value_V_ce0 = buffer_0_value_V_ce0;
  assign buffer_6_value_V_ce1 = buffer_0_value_V_ce1;
  assign buffer_6_value_V_d1 = in_stream_V_value_V_dout;
  assign buffer_7_value_V_address0 = col_reg_349;
  assign buffer_7_value_V_address1 = col_cast_reg_711[8:0];
  assign buffer_7_value_V_ce0 = buffer_0_value_V_ce0;
  assign buffer_7_value_V_ce1 = buffer_0_value_V_ce1;
  assign buffer_7_value_V_d1 = in_stream_V_value_V_dout;
  assign col_cast_fu_400_p1 = { 55'b0000000000000000000000000000000000000000000000000000000, col_reg_349 };
  assign slice_stream_V_value_V_din = { in_stream_V_value_V_dout, tmp_s_fu_638_p10, tmp_9_fu_611_p10, tmp_8_fu_584_p10, tmp_7_fu_557_p10, tmp_6_fu_530_p10, tmp_5_fu_503_p10, tmp_4_fu_476_p10, tmp_1_fu_450_p10 };
  assign tmp_11_fu_412_p4 = write_idx_1_1_phi_fu_341_p4[63:3];
  assign tmp_12_fu_442_p1 = p_write_idx_1_1_fu_434_p3[2:0];
  assign tmp_13_fu_446_p1 = p_write_idx_1_1_fu_434_p3[2:0];
  assign tmp_fu_372_p4 = row_reg_327[9:3];
endmodule
module hls_target_call_Loop_LB2D_buf_proc_buffer_0_value_V_ram(addr0, ce0, q0, addr1, ce1, d1, we1, clk);
  wire [7:0] _00_;
  wire [7:0] _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire [7:0] _05_;
  wire [7:0] _06_;
  wire [7:0] _07_;
  wire ad0;
  wire ad1;
  input [8:0] addr0;
  input [8:0] addr1;
  input ce0;
  input ce1;
  input clk;
  input [7:0] d1;
  output [7:0] q0;
  reg [7:0] q0;
  reg [7:0] \ram[0] ;
  reg [7:0] \ram[1] ;
  input we1;
  assign _02_ = ~ ad1;
  assign _07_ = ad0 ? \ram[1] : \ram[0] ;
  assign _03_ = _02_ & _00_[7];
  assign _04_ = ad1 & _00_[7];
  assign _05_ = _03_ ? d1 : \ram[0] ;
  assign _06_ = _04_ ? d1 : \ram[1] ;
  always @(posedge clk)
      \ram[0] <= _05_;
  always @(posedge clk)
      \ram[1] <= _06_;
  assign ad0 = | addr0;
  assign ad1 = | addr1;
  always @(posedge clk)
      q0 <= _01_;
  assign _00_[7] = ce1 ? we1 : 1'b0;
  assign _01_ = ce0 ? _07_ : q0;
endmodule
module hls_target_call_Loop_LB2D_shift_proc(ap_clk, ap_rst, ap_start, ap_done, ap_continue, ap_idle, ap_ready, slice_stream_V_value_V_dout, slice_stream_V_value_V_empty_n, slice_stream_V_value_V_read, out_stream_V_value_V_din, out_stream_V_value_V_full_n, out_stream_V_value_V_write);
  wire [3:0] _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire [71:0] _004_;
  wire [71:0] _005_;
  wire [71:0] _006_;
  wire [71:0] _007_;
  wire [71:0] _008_;
  wire [71:0] _009_;
  wire [71:0] _010_;
  wire [71:0] _011_;
  wire _012_;
  wire [8:0] _013_;
  wire _014_;
  wire [9:0] _015_;
  wire [9:0] _016_;
  wire [1:0] _017_;
  wire [2:0] _018_;
  wire [3:0] _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire [9:0] _052_;
  wire [8:0] _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  reg [3:0] ap_CS_fsm = 4'b0001;
  wire [3:0] ap_NS_fsm;
  input ap_clk;
  input ap_continue;
  output ap_done;
  reg ap_done_reg = 1'b0;
  output ap_idle;
  output ap_ready;
  reg ap_reg_ppiten_pp0_it0 = 1'b0;
  reg ap_reg_ppiten_pp0_it1 = 1'b0;
  input ap_rst;
  wire ap_sig_bdd_102;
  wire ap_sig_bdd_23;
  wire ap_sig_bdd_47;
  wire ap_sig_bdd_58;
  wire ap_sig_bdd_72;
  wire ap_sig_bdd_96;
  wire ap_sig_cseq_ST_pp0_stg0_fsm_2;
  wire ap_sig_cseq_ST_st1_fsm_0;
  wire ap_sig_cseq_ST_st2_fsm_1;
  wire ap_sig_cseq_ST_st5_fsm_3;
  input ap_start;
  reg [71:0] buffer_0_value_V_fu_100;
  reg [71:0] buffer_1_value_V_fu_104;
  reg [71:0] buffer_2_value_V_fu_108;
  reg [71:0] buffer_3_value_V_fu_112;
  reg [71:0] buffer_4_value_V_fu_116;
  reg [71:0] buffer_5_value_V_fu_120;
  reg [71:0] buffer_6_value_V_fu_124;
  reg [71:0] buffer_7_value_V_fu_96;
  wire exitcond21_i_i_fu_175_p2;
  reg exitcond21_i_i_reg_1251;
  wire exitcond_fu_163_p2;
  reg [8:0] i_0_i_i_reg_152;
  wire [8:0] i_fu_181_p2;
  wire icmp_fu_197_p2;
  reg icmp_reg_1260;
  wire [9:0] n1_1_fu_169_p2;
  reg [9:0] n1_1_reg_1246;
  reg [9:0] n1_reg_141;
  output [647:0] out_stream_V_value_V_din;
  input out_stream_V_value_V_full_n;
  output out_stream_V_value_V_write;
  wire [7:0] p_Result_5_1_1_fu_273_p4;
  wire [7:0] p_Result_5_1_2_fu_283_p4;
  wire [7:0] p_Result_5_1_3_fu_293_p4;
  wire [7:0] p_Result_5_1_4_fu_303_p4;
  wire [7:0] p_Result_5_1_5_fu_313_p4;
  wire [7:0] p_Result_5_1_6_fu_323_p4;
  wire [7:0] p_Result_5_1_7_fu_333_p4;
  wire [7:0] p_Result_5_1_8_fu_343_p4;
  wire [7:0] p_Result_5_1_fu_263_p4;
  wire [7:0] p_Result_5_2_1_fu_363_p4;
  wire [7:0] p_Result_5_2_2_fu_373_p4;
  wire [7:0] p_Result_5_2_3_fu_383_p4;
  wire [7:0] p_Result_5_2_4_fu_393_p4;
  wire [7:0] p_Result_5_2_5_fu_403_p4;
  wire [7:0] p_Result_5_2_6_fu_413_p4;
  wire [7:0] p_Result_5_2_7_fu_423_p4;
  wire [7:0] p_Result_5_2_8_fu_433_p4;
  wire [7:0] p_Result_5_2_fu_353_p4;
  wire [7:0] p_Result_5_3_1_fu_453_p4;
  wire [7:0] p_Result_5_3_2_fu_463_p4;
  wire [7:0] p_Result_5_3_3_fu_473_p4;
  wire [7:0] p_Result_5_3_4_fu_483_p4;
  wire [7:0] p_Result_5_3_5_fu_493_p4;
  wire [7:0] p_Result_5_3_6_fu_503_p4;
  wire [7:0] p_Result_5_3_7_fu_513_p4;
  wire [7:0] p_Result_5_3_8_fu_523_p4;
  wire [7:0] p_Result_5_3_fu_443_p4;
  wire [7:0] p_Result_5_4_1_fu_543_p4;
  wire [7:0] p_Result_5_4_2_fu_553_p4;
  wire [7:0] p_Result_5_4_3_fu_563_p4;
  wire [7:0] p_Result_5_4_4_fu_573_p4;
  wire [7:0] p_Result_5_4_5_fu_583_p4;
  wire [7:0] p_Result_5_4_6_fu_593_p4;
  wire [7:0] p_Result_5_4_7_fu_603_p4;
  wire [7:0] p_Result_5_4_8_fu_613_p4;
  wire [7:0] p_Result_5_4_fu_533_p4;
  wire [7:0] p_Result_5_5_1_fu_633_p4;
  wire [7:0] p_Result_5_5_2_fu_643_p4;
  wire [7:0] p_Result_5_5_3_fu_653_p4;
  wire [7:0] p_Result_5_5_4_fu_663_p4;
  wire [7:0] p_Result_5_5_5_fu_673_p4;
  wire [7:0] p_Result_5_5_6_fu_683_p4;
  wire [7:0] p_Result_5_5_7_fu_693_p4;
  wire [7:0] p_Result_5_5_8_fu_703_p4;
  wire [7:0] p_Result_5_5_fu_623_p4;
  wire [7:0] p_Result_5_6_1_fu_723_p4;
  wire [7:0] p_Result_5_6_2_fu_733_p4;
  wire [7:0] p_Result_5_6_3_fu_743_p4;
  wire [7:0] p_Result_5_6_4_fu_753_p4;
  wire [7:0] p_Result_5_6_5_fu_763_p4;
  wire [7:0] p_Result_5_6_6_fu_773_p4;
  wire [7:0] p_Result_5_6_7_fu_783_p4;
  wire [7:0] p_Result_5_6_8_fu_793_p4;
  wire [7:0] p_Result_5_6_fu_713_p4;
  wire [7:0] p_Result_5_7_1_fu_813_p4;
  wire [7:0] p_Result_5_7_2_fu_823_p4;
  wire [7:0] p_Result_5_7_3_fu_833_p4;
  wire [7:0] p_Result_5_7_4_fu_843_p4;
  wire [7:0] p_Result_5_7_5_fu_853_p4;
  wire [7:0] p_Result_5_7_6_fu_863_p4;
  wire [7:0] p_Result_5_7_7_fu_873_p4;
  wire [7:0] p_Result_5_7_8_fu_883_p4;
  wire [7:0] p_Result_5_7_fu_803_p4;
  wire [7:0] p_Result_5_8_1_fu_903_p4;
  wire [7:0] p_Result_5_8_2_fu_913_p4;
  wire [7:0] p_Result_5_8_3_fu_923_p4;
  wire [7:0] p_Result_5_8_4_fu_933_p4;
  wire [7:0] p_Result_5_8_5_fu_943_p4;
  wire [7:0] p_Result_5_8_6_fu_953_p4;
  wire [7:0] p_Result_5_8_7_fu_963_p4;
  wire [7:0] p_Result_5_8_8_fu_973_p4;
  wire [7:0] p_Result_5_8_fu_893_p4;
  input [71:0] slice_stream_V_value_V_dout;
  input slice_stream_V_value_V_empty_n;
  output slice_stream_V_value_V_read;
  wire [7:0] tmp_10_fu_259_p1;
  wire [7:0] tmp_2_fu_227_p1;
  wire [7:0] tmp_3_fu_231_p1;
  wire [7:0] tmp_4_fu_235_p1;
  wire [7:0] tmp_5_fu_239_p1;
  wire [7:0] tmp_6_fu_243_p1;
  wire [7:0] tmp_7_fu_247_p1;
  wire [7:0] tmp_8_fu_251_p1;
  wire [7:0] tmp_9_fu_255_p1;
  wire [5:0] tmp_fu_187_p4;
  assign i_fu_181_p2 = i_0_i_i_reg_152 + 1'b1;
  assign n1_1_fu_169_p2 = n1_reg_141 + 1'b1;
  assign ap_ready = ap_CS_fsm[1] & exitcond_fu_163_p2;
  assign _020_ = ap_sig_bdd_72 & ap_reg_ppiten_pp0_it1;
  assign _022_ = _021_ & exitcond21_i_i_fu_175_p2;
  assign _021_ = ap_CS_fsm[2] & _046_;
  assign _023_ = ap_CS_fsm[1] & _039_;
  assign _024_ = ap_CS_fsm[2] & ap_reg_ppiten_pp0_it0;
  assign _025_ = _024_ & _046_;
  assign _026_ = _025_ & _040_;
  assign _027_ = ap_CS_fsm[0] & _047_;
  assign _028_ = ap_CS_fsm[2] & _041_;
  assign _029_ = _028_ & ap_reg_ppiten_pp0_it1;
  assign slice_stream_V_value_V_read = _029_ & _046_;
  assign _030_ = _021_ & _040_;
  assign ap_idle = _043_ & ap_CS_fsm[0];
  assign _031_ = _028_ & _042_;
  assign _032_ = _031_ & ap_reg_ppiten_pp0_it1;
  assign out_stream_V_value_V_write = _032_ & _046_;
  assign _033_ = ap_CS_fsm[2] & ap_reg_ppiten_pp0_it1;
  assign _034_ = _033_ & _046_;
  assign _035_ = _034_ & _048_;
  assign _036_ = _044_ & _041_;
  assign _037_ = _041_ & _045_;
  assign _038_ = _037_ & _042_;
  assign _039_ = ~ exitcond_fu_163_p2;
  assign _040_ = ~ exitcond21_i_i_fu_175_p2;
  assign _041_ = ~ exitcond21_i_i_reg_1251;
  assign _042_ = ~ icmp_reg_1260;
  assign _043_ = ~ ap_start;
  assign _044_ = ~ slice_stream_V_value_V_empty_n;
  assign _045_ = ~ out_stream_V_value_V_full_n;
  assign exitcond21_i_i_fu_175_p2 = i_0_i_i_reg_152 == 9'b111101000;
  assign exitcond_fu_163_p2 = n1_reg_141 == 10'b1010000000;
  assign icmp_fu_197_p2 = ! i_0_i_i_reg_152[8:3];
  assign _046_ = ~ _020_;
  assign _047_ = ~ ap_sig_bdd_102;
  assign _048_ = ~ ap_reg_ppiten_pp0_it0;
  assign ap_done = ap_done_reg | ap_ready;
  assign ap_sig_bdd_102 = _043_ | ap_done_reg;
  assign ap_sig_bdd_72 = _036_ | _038_;
  always @(posedge ap_clk)
      n1_1_reg_1246 <= _015_;
  always @(posedge ap_clk)
      icmp_reg_1260 <= _014_;
  always @(posedge ap_clk)
      exitcond21_i_i_reg_1251 <= _012_;
  always @(posedge ap_clk)
      buffer_7_value_V_fu_96 <= _011_;
  always @(posedge ap_clk)
      buffer_0_value_V_fu_100 <= _004_;
  always @(posedge ap_clk)
      buffer_1_value_V_fu_104 <= _005_;
  always @(posedge ap_clk)
      buffer_2_value_V_fu_108 <= _006_;
  always @(posedge ap_clk)
      buffer_3_value_V_fu_112 <= _007_;
  always @(posedge ap_clk)
      buffer_4_value_V_fu_116 <= _008_;
  always @(posedge ap_clk)
      buffer_5_value_V_fu_120 <= _009_;
  always @(posedge ap_clk)
      buffer_6_value_V_fu_124 <= _010_;
  always @(posedge ap_clk)
      n1_reg_141 <= _016_;
  always @(posedge ap_clk)
      i_0_i_i_reg_152 <= _013_;
  always @(posedge ap_clk)
      ap_reg_ppiten_pp0_it1 <= _003_;
  always @(posedge ap_clk)
      ap_reg_ppiten_pp0_it0 <= _002_;
  always @(posedge ap_clk)
      ap_done_reg <= _001_;
  always @(posedge ap_clk)
      ap_CS_fsm <= _000_;
  assign _049_ = ap_CS_fsm == 3'b100;
  assign _019_ = _035_ ? 4'b1000 : 4'b0100;
  assign _018_ = exitcond_fu_163_p2 ? 3'b001 : 3'b100;
  assign _050_ = ap_CS_fsm == 2'b10;
  assign _017_ = ap_sig_bdd_102 ? 2'b01 : 2'b10;
  wire [3:0] fangyuan36;
  assign fangyuan36 = { 2'b00, _017_ };
  wire [6:0] fangyuan37;
  assign fangyuan37 = { 1'b0, _018_, _019_, 4'b0010 };
  wire [2:0] fangyuan38;
  assign fangyuan38 = { _050_, _049_, _051_ };
  always @(fangyuan36 or fangyuan37 or fangyuan38) begin
    casez (fangyuan38)
      3'b??1 :
        ap_NS_fsm = fangyuan37 [3:0] ;
      3'b?1? :
        ap_NS_fsm = fangyuan37 [7:4] ;
      3'b1?? :
        ap_NS_fsm = fangyuan37 [11:8] ;
      default:
        ap_NS_fsm = fangyuan36 ;
    endcase
  end
  assign _051_ = ap_CS_fsm == 4'b1000;
  assign _015_ = ap_CS_fsm[1] ? n1_1_fu_169_p2 : n1_1_reg_1246;
  assign _014_ = _030_ ? icmp_fu_197_p2 : icmp_reg_1260;
  assign _012_ = _021_ ? exitcond21_i_i_fu_175_p2 : exitcond21_i_i_reg_1251;
  assign _010_ = slice_stream_V_value_V_read ? buffer_7_value_V_fu_96 : buffer_6_value_V_fu_124;
  assign _009_ = slice_stream_V_value_V_read ? buffer_6_value_V_fu_124 : buffer_5_value_V_fu_120;
  assign _008_ = slice_stream_V_value_V_read ? buffer_5_value_V_fu_120 : buffer_4_value_V_fu_116;
  assign _007_ = slice_stream_V_value_V_read ? buffer_4_value_V_fu_116 : buffer_3_value_V_fu_112;
  assign _006_ = slice_stream_V_value_V_read ? buffer_3_value_V_fu_112 : buffer_2_value_V_fu_108;
  assign _005_ = slice_stream_V_value_V_read ? buffer_2_value_V_fu_108 : buffer_1_value_V_fu_104;
  assign _004_ = slice_stream_V_value_V_read ? buffer_1_value_V_fu_104 : buffer_0_value_V_fu_100;
  assign _011_ = slice_stream_V_value_V_read ? slice_stream_V_value_V_dout : buffer_7_value_V_fu_96;
  assign _052_ = ap_CS_fsm[3] ? n1_1_reg_1246 : n1_reg_141;
  assign _016_ = _027_ ? 10'b0000000000 : _052_;
  assign _053_ = _023_ ? 9'b000000000 : i_0_i_i_reg_152;
  assign _013_ = _026_ ? i_fu_181_p2 : _053_;
  assign _054_ = _023_ ? 1'b0 : ap_reg_ppiten_pp0_it1;
  assign _055_ = _021_ ? ap_reg_ppiten_pp0_it0 : _054_;
  assign _003_ = ap_rst ? 1'b0 : _055_;
  assign _056_ = _023_ ? 1'b1 : ap_reg_ppiten_pp0_it0;
  assign _057_ = _022_ ? 1'b0 : _056_;
  assign _002_ = ap_rst ? 1'b0 : _057_;
  assign _058_ = ap_ready ? 1'b1 : ap_done_reg;
  assign _059_ = ap_continue ? 1'b0 : _058_;
  assign _001_ = ap_rst ? 1'b0 : _059_;
  assign _000_ = ap_rst ? 4'b0001 : ap_NS_fsm;
  assign ap_sig_bdd_23 = ap_CS_fsm[0];
  assign ap_sig_bdd_47 = ap_CS_fsm[1];
  assign ap_sig_bdd_58 = ap_CS_fsm[2];
  assign ap_sig_bdd_96 = ap_CS_fsm[3];
  assign ap_sig_cseq_ST_pp0_stg0_fsm_2 = ap_CS_fsm[2];
  assign ap_sig_cseq_ST_st1_fsm_0 = ap_CS_fsm[0];
  assign ap_sig_cseq_ST_st2_fsm_1 = ap_CS_fsm[1];
  assign ap_sig_cseq_ST_st5_fsm_3 = ap_CS_fsm[3];
  assign out_stream_V_value_V_din = { slice_stream_V_value_V_dout[71:64], buffer_7_value_V_fu_96[71:64], buffer_6_value_V_fu_124[71:64], buffer_5_value_V_fu_120[71:64], buffer_4_value_V_fu_116[71:64], buffer_3_value_V_fu_112[71:64], buffer_2_value_V_fu_108[71:64], buffer_1_value_V_fu_104[71:64], buffer_0_value_V_fu_100[71:64], slice_stream_V_value_V_dout[63:56], buffer_7_value_V_fu_96[63:56], buffer_6_value_V_fu_124[63:56], buffer_5_value_V_fu_120[63:56], buffer_4_value_V_fu_116[63:56], buffer_3_value_V_fu_112[63:56], buffer_2_value_V_fu_108[63:56], buffer_1_value_V_fu_104[63:56], buffer_0_value_V_fu_100[63:56], slice_stream_V_value_V_dout[55:48], buffer_7_value_V_fu_96[55:48], buffer_6_value_V_fu_124[55:48], buffer_5_value_V_fu_120[55:48], buffer_4_value_V_fu_116[55:48], buffer_3_value_V_fu_112[55:48], buffer_2_value_V_fu_108[55:48], buffer_1_value_V_fu_104[55:48], buffer_0_value_V_fu_100[55:48], slice_stream_V_value_V_dout[47:40], buffer_7_value_V_fu_96[47:40], buffer_6_value_V_fu_124[47:40], buffer_5_value_V_fu_120[47:40], buffer_4_value_V_fu_116[47:40], buffer_3_value_V_fu_112[47:40], buffer_2_value_V_fu_108[47:40], buffer_1_value_V_fu_104[47:40], buffer_0_value_V_fu_100[47:40], slice_stream_V_value_V_dout[39:32], buffer_7_value_V_fu_96[39:32], buffer_6_value_V_fu_124[39:32], buffer_5_value_V_fu_120[39:32], buffer_4_value_V_fu_116[39:32], buffer_3_value_V_fu_112[39:32], buffer_2_value_V_fu_108[39:32], buffer_1_value_V_fu_104[39:32], buffer_0_value_V_fu_100[39:32], slice_stream_V_value_V_dout[31:24], buffer_7_value_V_fu_96[31:24], buffer_6_value_V_fu_124[31:24], buffer_5_value_V_fu_120[31:24], buffer_4_value_V_fu_116[31:24], buffer_3_value_V_fu_112[31:24], buffer_2_value_V_fu_108[31:24], buffer_1_value_V_fu_104[31:24], buffer_0_value_V_fu_100[31:24], slice_stream_V_value_V_dout[23:16], buffer_7_value_V_fu_96[23:16], buffer_6_value_V_fu_124[23:16], buffer_5_value_V_fu_120[23:16], buffer_4_value_V_fu_116[23:16], buffer_3_value_V_fu_112[23:16], buffer_2_value_V_fu_108[23:16], buffer_1_value_V_fu_104[23:16], buffer_0_value_V_fu_100[23:16], slice_stream_V_value_V_dout[15:8], buffer_7_value_V_fu_96[15:8], buffer_6_value_V_fu_124[15:8], buffer_5_value_V_fu_120[15:8], buffer_4_value_V_fu_116[15:8], buffer_3_value_V_fu_112[15:8], buffer_2_value_V_fu_108[15:8], buffer_1_value_V_fu_104[15:8], buffer_0_value_V_fu_100[15:8], slice_stream_V_value_V_dout[7:0], buffer_7_value_V_fu_96[7:0], buffer_6_value_V_fu_124[7:0], buffer_5_value_V_fu_120[7:0], buffer_4_value_V_fu_116[7:0], buffer_3_value_V_fu_112[7:0], buffer_2_value_V_fu_108[7:0], buffer_1_value_V_fu_104[7:0], buffer_0_value_V_fu_100[7:0] };
  assign p_Result_5_1_1_fu_273_p4 = buffer_1_value_V_fu_104[15:8];
  assign p_Result_5_1_2_fu_283_p4 = buffer_2_value_V_fu_108[15:8];
  assign p_Result_5_1_3_fu_293_p4 = buffer_3_value_V_fu_112[15:8];
  assign p_Result_5_1_4_fu_303_p4 = buffer_4_value_V_fu_116[15:8];
  assign p_Result_5_1_5_fu_313_p4 = buffer_5_value_V_fu_120[15:8];
  assign p_Result_5_1_6_fu_323_p4 = buffer_6_value_V_fu_124[15:8];
  assign p_Result_5_1_7_fu_333_p4 = buffer_7_value_V_fu_96[15:8];
  assign p_Result_5_1_8_fu_343_p4 = slice_stream_V_value_V_dout[15:8];
  assign p_Result_5_1_fu_263_p4 = buffer_0_value_V_fu_100[15:8];
  assign p_Result_5_2_1_fu_363_p4 = buffer_1_value_V_fu_104[23:16];
  assign p_Result_5_2_2_fu_373_p4 = buffer_2_value_V_fu_108[23:16];
  assign p_Result_5_2_3_fu_383_p4 = buffer_3_value_V_fu_112[23:16];
  assign p_Result_5_2_4_fu_393_p4 = buffer_4_value_V_fu_116[23:16];
  assign p_Result_5_2_5_fu_403_p4 = buffer_5_value_V_fu_120[23:16];
  assign p_Result_5_2_6_fu_413_p4 = buffer_6_value_V_fu_124[23:16];
  assign p_Result_5_2_7_fu_423_p4 = buffer_7_value_V_fu_96[23:16];
  assign p_Result_5_2_8_fu_433_p4 = slice_stream_V_value_V_dout[23:16];
  assign p_Result_5_2_fu_353_p4 = buffer_0_value_V_fu_100[23:16];
  assign p_Result_5_3_1_fu_453_p4 = buffer_1_value_V_fu_104[31:24];
  assign p_Result_5_3_2_fu_463_p4 = buffer_2_value_V_fu_108[31:24];
  assign p_Result_5_3_3_fu_473_p4 = buffer_3_value_V_fu_112[31:24];
  assign p_Result_5_3_4_fu_483_p4 = buffer_4_value_V_fu_116[31:24];
  assign p_Result_5_3_5_fu_493_p4 = buffer_5_value_V_fu_120[31:24];
  assign p_Result_5_3_6_fu_503_p4 = buffer_6_value_V_fu_124[31:24];
  assign p_Result_5_3_7_fu_513_p4 = buffer_7_value_V_fu_96[31:24];
  assign p_Result_5_3_8_fu_523_p4 = slice_stream_V_value_V_dout[31:24];
  assign p_Result_5_3_fu_443_p4 = buffer_0_value_V_fu_100[31:24];
  assign p_Result_5_4_1_fu_543_p4 = buffer_1_value_V_fu_104[39:32];
  assign p_Result_5_4_2_fu_553_p4 = buffer_2_value_V_fu_108[39:32];
  assign p_Result_5_4_3_fu_563_p4 = buffer_3_value_V_fu_112[39:32];
  assign p_Result_5_4_4_fu_573_p4 = buffer_4_value_V_fu_116[39:32];
  assign p_Result_5_4_5_fu_583_p4 = buffer_5_value_V_fu_120[39:32];
  assign p_Result_5_4_6_fu_593_p4 = buffer_6_value_V_fu_124[39:32];
  assign p_Result_5_4_7_fu_603_p4 = buffer_7_value_V_fu_96[39:32];
  assign p_Result_5_4_8_fu_613_p4 = slice_stream_V_value_V_dout[39:32];
  assign p_Result_5_4_fu_533_p4 = buffer_0_value_V_fu_100[39:32];
  assign p_Result_5_5_1_fu_633_p4 = buffer_1_value_V_fu_104[47:40];
  assign p_Result_5_5_2_fu_643_p4 = buffer_2_value_V_fu_108[47:40];
  assign p_Result_5_5_3_fu_653_p4 = buffer_3_value_V_fu_112[47:40];
  assign p_Result_5_5_4_fu_663_p4 = buffer_4_value_V_fu_116[47:40];
  assign p_Result_5_5_5_fu_673_p4 = buffer_5_value_V_fu_120[47:40];
  assign p_Result_5_5_6_fu_683_p4 = buffer_6_value_V_fu_124[47:40];
  assign p_Result_5_5_7_fu_693_p4 = buffer_7_value_V_fu_96[47:40];
  assign p_Result_5_5_8_fu_703_p4 = slice_stream_V_value_V_dout[47:40];
  assign p_Result_5_5_fu_623_p4 = buffer_0_value_V_fu_100[47:40];
  assign p_Result_5_6_1_fu_723_p4 = buffer_1_value_V_fu_104[55:48];
  assign p_Result_5_6_2_fu_733_p4 = buffer_2_value_V_fu_108[55:48];
  assign p_Result_5_6_3_fu_743_p4 = buffer_3_value_V_fu_112[55:48];
  assign p_Result_5_6_4_fu_753_p4 = buffer_4_value_V_fu_116[55:48];
  assign p_Result_5_6_5_fu_763_p4 = buffer_5_value_V_fu_120[55:48];
  assign p_Result_5_6_6_fu_773_p4 = buffer_6_value_V_fu_124[55:48];
  assign p_Result_5_6_7_fu_783_p4 = buffer_7_value_V_fu_96[55:48];
  assign p_Result_5_6_8_fu_793_p4 = slice_stream_V_value_V_dout[55:48];
  assign p_Result_5_6_fu_713_p4 = buffer_0_value_V_fu_100[55:48];
  assign p_Result_5_7_1_fu_813_p4 = buffer_1_value_V_fu_104[63:56];
  assign p_Result_5_7_2_fu_823_p4 = buffer_2_value_V_fu_108[63:56];
  assign p_Result_5_7_3_fu_833_p4 = buffer_3_value_V_fu_112[63:56];
  assign p_Result_5_7_4_fu_843_p4 = buffer_4_value_V_fu_116[63:56];
  assign p_Result_5_7_5_fu_853_p4 = buffer_5_value_V_fu_120[63:56];
  assign p_Result_5_7_6_fu_863_p4 = buffer_6_value_V_fu_124[63:56];
  assign p_Result_5_7_7_fu_873_p4 = buffer_7_value_V_fu_96[63:56];
  assign p_Result_5_7_8_fu_883_p4 = slice_stream_V_value_V_dout[63:56];
  assign p_Result_5_7_fu_803_p4 = buffer_0_value_V_fu_100[63:56];
  assign p_Result_5_8_1_fu_903_p4 = buffer_1_value_V_fu_104[71:64];
  assign p_Result_5_8_2_fu_913_p4 = buffer_2_value_V_fu_108[71:64];
  assign p_Result_5_8_3_fu_923_p4 = buffer_3_value_V_fu_112[71:64];
  assign p_Result_5_8_4_fu_933_p4 = buffer_4_value_V_fu_116[71:64];
  assign p_Result_5_8_5_fu_943_p4 = buffer_5_value_V_fu_120[71:64];
  assign p_Result_5_8_6_fu_953_p4 = buffer_6_value_V_fu_124[71:64];
  assign p_Result_5_8_7_fu_963_p4 = buffer_7_value_V_fu_96[71:64];
  assign p_Result_5_8_8_fu_973_p4 = slice_stream_V_value_V_dout[71:64];
  assign p_Result_5_8_fu_893_p4 = buffer_0_value_V_fu_100[71:64];
  assign tmp_10_fu_259_p1 = slice_stream_V_value_V_dout[7:0];
  assign tmp_2_fu_227_p1 = buffer_0_value_V_fu_100[7:0];
  assign tmp_3_fu_231_p1 = buffer_1_value_V_fu_104[7:0];
  assign tmp_4_fu_235_p1 = buffer_2_value_V_fu_108[7:0];
  assign tmp_5_fu_239_p1 = buffer_3_value_V_fu_112[7:0];
  assign tmp_6_fu_243_p1 = buffer_4_value_V_fu_116[7:0];
  assign tmp_7_fu_247_p1 = buffer_5_value_V_fu_120[7:0];
  assign tmp_8_fu_251_p1 = buffer_6_value_V_fu_124[7:0];
  assign tmp_9_fu_255_p1 = buffer_7_value_V_fu_96[7:0];
  assign tmp_fu_187_p4 = i_0_i_i_reg_152[8:3];
endmodule
module hls_target_linebuffer(in_stream_V_value_V_dout, in_stream_V_value_V_empty_n, in_stream_V_value_V_read, out_stream_V_value_V_din, out_stream_V_value_V_full_n, out_stream_V_value_V_write, ap_clk, ap_rst, ap_continue, ap_done, ap_start, ap_idle, ap_ready);
  input ap_clk;
  input ap_continue;
  output ap_done;
  output ap_idle;
  output ap_ready;
  input ap_rst;
  wire ap_sig_hs_continue;
  wire ap_sig_hs_done;
  wire ap_sig_top_allready;
  input ap_start;
  wire hls_target_call_U0_ap_continue;
  wire hls_target_call_U0_ap_done;
  wire hls_target_call_U0_ap_idle;
  wire hls_target_call_U0_ap_ready;
  wire hls_target_call_U0_ap_start;
  wire [7:0] hls_target_call_U0_in_stream_V_value_V_dout;
  wire hls_target_call_U0_in_stream_V_value_V_empty_n;
  wire hls_target_call_U0_in_stream_V_value_V_read;
  wire [647:0] hls_target_call_U0_out_stream_V_value_V_din;
  wire hls_target_call_U0_out_stream_V_value_V_full_n;
  wire hls_target_call_U0_out_stream_V_value_V_write;
  input [7:0] in_stream_V_value_V_dout;
  input in_stream_V_value_V_empty_n;
  output in_stream_V_value_V_read;
  output [647:0] out_stream_V_value_V_din;
  input out_stream_V_value_V_full_n;
  output out_stream_V_value_V_write;
  hls_target_call hls_target_call_U0 (
    .ap_clk(ap_clk),
    .ap_continue(ap_continue),
    .ap_done(hls_target_call_U0_ap_done),
    .ap_idle(hls_target_call_U0_ap_idle),
    .ap_ready(hls_target_call_U0_ap_ready),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .in_stream_V_value_V_dout(in_stream_V_value_V_dout),
    .in_stream_V_value_V_empty_n(in_stream_V_value_V_empty_n),
    .in_stream_V_value_V_read(hls_target_call_U0_in_stream_V_value_V_read),
    .out_stream_V_value_V_din(hls_target_call_U0_out_stream_V_value_V_din),
    .out_stream_V_value_V_full_n(out_stream_V_value_V_full_n),
    .out_stream_V_value_V_write(hls_target_call_U0_out_stream_V_value_V_write)
  );
  assign ap_done = hls_target_call_U0_ap_done;
  assign ap_idle = hls_target_call_U0_ap_idle;
  assign ap_ready = hls_target_call_U0_ap_ready;
  assign ap_sig_hs_continue = ap_continue;
  assign ap_sig_hs_done = hls_target_call_U0_ap_done;
  assign ap_sig_top_allready = hls_target_call_U0_ap_ready;
  assign hls_target_call_U0_ap_continue = ap_continue;
  assign hls_target_call_U0_ap_start = ap_start;
  assign hls_target_call_U0_in_stream_V_value_V_dout = in_stream_V_value_V_dout;
  assign hls_target_call_U0_in_stream_V_value_V_empty_n = in_stream_V_value_V_empty_n;
  assign hls_target_call_U0_out_stream_V_value_V_full_n = out_stream_V_value_V_full_n;
  assign in_stream_V_value_V_read = hls_target_call_U0_in_stream_V_value_V_read;
  assign out_stream_V_value_V_din = hls_target_call_U0_out_stream_V_value_V_din;
  assign out_stream_V_value_V_write = hls_target_call_U0_out_stream_V_value_V_write;
endmodule
module hls_target_linebuffer_1(arg_1_TDATA, arg_1_TLAST, out_stream_V_value_V_din, out_stream_V_value_V_full_n, out_stream_V_value_V_write, ap_clk, ap_rst, arg_1_TVALID, arg_1_TREADY, ap_continue, ap_done, ap_start, ap_idle, ap_ready);
  wire _0_;
  input ap_clk;
  input ap_continue;
  output ap_done;
  output ap_idle;
  output ap_ready;
  input ap_rst;
  wire ap_sig_hs_continue;
  wire ap_sig_hs_done;
  wire ap_sig_top_allready;
  input ap_start;
  input [7:0] arg_1_TDATA;
  input arg_1_TLAST;
  output arg_1_TREADY;
  input arg_1_TVALID;
  wire hls_target_linebuffer_Loop_1_proc_U0_ap_done;
  wire hls_target_linebuffer_Loop_1_proc_U0_ap_idle;
  wire hls_target_linebuffer_Loop_1_proc_U0_ap_ready;
  wire hls_target_linebuffer_Loop_1_proc_U0_ap_start;
  wire [7:0] hls_target_linebuffer_Loop_1_proc_U0_arg_1_TDATA;
  wire hls_target_linebuffer_Loop_1_proc_U0_arg_1_TLAST;
  wire hls_target_linebuffer_Loop_1_proc_U0_arg_1_TREADY;
  wire hls_target_linebuffer_Loop_1_proc_U0_arg_1_TVALID;
  wire [7:0] hls_target_linebuffer_Loop_1_proc_U0_in_stream_V_value_V_din;
  wire hls_target_linebuffer_Loop_1_proc_U0_in_stream_V_value_V_full_n;
  wire hls_target_linebuffer_Loop_1_proc_U0_in_stream_V_value_V_write;
  wire hls_target_linebuffer_U0_ap_continue;
  wire hls_target_linebuffer_U0_ap_done;
  wire hls_target_linebuffer_U0_ap_idle;
  wire hls_target_linebuffer_U0_ap_ready;
  reg hls_target_linebuffer_U0_ap_start = 1'b0;
  wire [7:0] hls_target_linebuffer_U0_in_stream_V_value_V_dout;
  wire hls_target_linebuffer_U0_in_stream_V_value_V_empty_n;
  wire hls_target_linebuffer_U0_in_stream_V_value_V_read;
  wire [647:0] hls_target_linebuffer_U0_out_stream_V_value_V_din;
  wire hls_target_linebuffer_U0_out_stream_V_value_V_full_n;
  wire hls_target_linebuffer_U0_out_stream_V_value_V_write;
  wire [7:0] in_stream_V_value_V_din;
  wire [7:0] in_stream_V_value_V_dout;
  wire in_stream_V_value_V_empty_n;
  wire in_stream_V_value_V_full_n;
  wire in_stream_V_value_V_read;
  wire in_stream_V_value_V_write;
  output [647:0] out_stream_V_value_V_din;
  input out_stream_V_value_V_full_n;
  output out_stream_V_value_V_write;
  assign ap_idle = hls_target_linebuffer_Loop_1_proc_U0_ap_idle & hls_target_linebuffer_U0_ap_idle;
  always @(posedge ap_clk)
      hls_target_linebuffer_U0_ap_start <= _0_;
  assign _0_ = ap_rst ? 1'b0 : 1'b1;
  hls_target_linebuffer_Loop_1_proc hls_target_linebuffer_Loop_1_proc_U0 (
    .ap_clk(ap_clk),
    .ap_continue(1'b1),
    .ap_done(hls_target_linebuffer_Loop_1_proc_U0_ap_done),
    .ap_idle(hls_target_linebuffer_Loop_1_proc_U0_ap_idle),
    .ap_ready(hls_target_linebuffer_Loop_1_proc_U0_ap_ready),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .arg_1_TDATA(arg_1_TDATA),
    .arg_1_TLAST(arg_1_TLAST),
    .arg_1_TREADY(hls_target_linebuffer_Loop_1_proc_U0_arg_1_TREADY),
    .arg_1_TVALID(arg_1_TVALID),
    .in_stream_V_value_V_din(hls_target_linebuffer_Loop_1_proc_U0_in_stream_V_value_V_din),
    .in_stream_V_value_V_full_n(hls_target_linebuffer_Loop_1_proc_U0_in_stream_V_value_V_full_n),
    .in_stream_V_value_V_write(hls_target_linebuffer_Loop_1_proc_U0_in_stream_V_value_V_write)
  );
  hls_target_linebuffer hls_target_linebuffer_U0 (
    .ap_clk(ap_clk),
    .ap_continue(ap_continue),
    .ap_done(hls_target_linebuffer_U0_ap_done),
    .ap_idle(hls_target_linebuffer_U0_ap_idle),
    .ap_ready(hls_target_linebuffer_U0_ap_ready),
    .ap_rst(ap_rst),
    .ap_start(hls_target_linebuffer_U0_ap_start),
    .in_stream_V_value_V_dout(hls_target_linebuffer_U0_in_stream_V_value_V_dout),
    .in_stream_V_value_V_empty_n(hls_target_linebuffer_U0_in_stream_V_value_V_empty_n),
    .in_stream_V_value_V_read(hls_target_linebuffer_U0_in_stream_V_value_V_read),
    .out_stream_V_value_V_din(hls_target_linebuffer_U0_out_stream_V_value_V_din),
    .out_stream_V_value_V_full_n(out_stream_V_value_V_full_n),
    .out_stream_V_value_V_write(hls_target_linebuffer_U0_out_stream_V_value_V_write)
  );
  FIFO_hls_target_linebuffer_1_in_stream_V_value_V in_stream_V_value_V_U (
    .clk(ap_clk),
    .if_din(hls_target_linebuffer_Loop_1_proc_U0_in_stream_V_value_V_din),
    .if_dout(hls_target_linebuffer_U0_in_stream_V_value_V_dout),
    .if_empty_n(hls_target_linebuffer_U0_in_stream_V_value_V_empty_n),
    .if_full_n(hls_target_linebuffer_Loop_1_proc_U0_in_stream_V_value_V_full_n),
    .if_read(hls_target_linebuffer_U0_in_stream_V_value_V_read),
    .if_read_ce(1'b1),
    .if_write(hls_target_linebuffer_Loop_1_proc_U0_in_stream_V_value_V_write),
    .if_write_ce(1'b1),
    .reset(ap_rst)
  );
  assign ap_done = hls_target_linebuffer_U0_ap_done;
  assign ap_ready = hls_target_linebuffer_Loop_1_proc_U0_ap_ready;
  assign ap_sig_hs_continue = ap_continue;
  assign ap_sig_hs_done = hls_target_linebuffer_U0_ap_done;
  assign ap_sig_top_allready = hls_target_linebuffer_Loop_1_proc_U0_ap_ready;
  assign arg_1_TREADY = hls_target_linebuffer_Loop_1_proc_U0_arg_1_TREADY;
  assign hls_target_linebuffer_Loop_1_proc_U0_ap_start = ap_start;
  assign hls_target_linebuffer_Loop_1_proc_U0_arg_1_TDATA = arg_1_TDATA;
  assign hls_target_linebuffer_Loop_1_proc_U0_arg_1_TLAST = arg_1_TLAST;
  assign hls_target_linebuffer_Loop_1_proc_U0_arg_1_TVALID = arg_1_TVALID;
  assign hls_target_linebuffer_U0_ap_continue = ap_continue;
  assign hls_target_linebuffer_U0_out_stream_V_value_V_full_n = out_stream_V_value_V_full_n;
  assign in_stream_V_value_V_din = hls_target_linebuffer_Loop_1_proc_U0_in_stream_V_value_V_din;
  assign in_stream_V_value_V_dout = hls_target_linebuffer_U0_in_stream_V_value_V_dout;
  assign in_stream_V_value_V_empty_n = hls_target_linebuffer_U0_in_stream_V_value_V_empty_n;
  assign in_stream_V_value_V_full_n = hls_target_linebuffer_Loop_1_proc_U0_in_stream_V_value_V_full_n;
  assign in_stream_V_value_V_read = hls_target_linebuffer_U0_in_stream_V_value_V_read;
  assign in_stream_V_value_V_write = hls_target_linebuffer_Loop_1_proc_U0_in_stream_V_value_V_write;
  assign out_stream_V_value_V_din = hls_target_linebuffer_U0_out_stream_V_value_V_din;
  assign out_stream_V_value_V_write = hls_target_linebuffer_U0_out_stream_V_value_V_write;
endmodule
module hls_target_linebuffer_Loop_1_proc(ap_clk, ap_rst, ap_start, ap_done, ap_continue, ap_idle, ap_ready, arg_1_TDATA, arg_1_TVALID, arg_1_TREADY, arg_1_TLAST, in_stream_V_value_V_din, in_stream_V_value_V_full_n, in_stream_V_value_V_write);
  wire [2:0] _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire [7:0] _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire [7:0] _008_;
  wire _009_;
  wire _010_;
  wire [18:0] _011_;
  wire [1:0] _012_;
  wire _013_;
  wire _014_;
  wire [2:0] _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire [18:0] _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  reg [2:0] ap_CS_fsm = 3'b001;
  wire [2:0] ap_NS_fsm;
  input ap_clk;
  input ap_continue;
  output ap_done;
  reg ap_done_reg = 1'b0;
  output ap_idle;
  output ap_ready;
  reg ap_reg_ppiten_pp0_it0 = 1'b0;
  reg ap_reg_ppiten_pp0_it1 = 1'b0;
  input ap_rst;
  wire ap_sig_bdd_108;
  wire ap_sig_bdd_114;
  wire ap_sig_bdd_121;
  wire ap_sig_bdd_142;
  wire ap_sig_bdd_172;
  wire ap_sig_bdd_22;
  wire ap_sig_cseq_ST_pp0_stg0_fsm_1;
  wire ap_sig_cseq_ST_st1_fsm_0;
  wire ap_sig_cseq_ST_st4_fsm_2;
  input ap_start;
  input [7:0] arg_1_TDATA;
  input arg_1_TLAST;
  output arg_1_TREADY;
  input arg_1_TVALID;
  reg [7:0] empty_18_reg_97_0;
  wire exitcond_flatten_fu_72_p2;
  reg exitcond_flatten_reg_88;
  wire in_axi_stream_V_last_V_0_ack_out;
  reg in_axi_stream_V_last_V_0_has_vld_data_reg = 1'b0;
  wire in_axi_stream_V_last_V_0_has_vld_data_reg_i;
  reg in_axi_stream_V_last_V_0_in_rdy = 1'b0;
  wire in_axi_stream_V_last_V_0_vld_in;
  wire in_axi_stream_V_value_V_0_ack_out;
  reg in_axi_stream_V_value_V_0_areset_d;
  wire [7:0] in_axi_stream_V_value_V_0_data_out;
  reg [7:0] in_axi_stream_V_value_V_0_data_reg;
  reg in_axi_stream_V_value_V_0_has_vld_data_reg = 1'b0;
  wire in_axi_stream_V_value_V_0_has_vld_data_reg_i;
  reg in_axi_stream_V_value_V_0_in_rdy = 1'b0;
  wire in_axi_stream_V_value_V_0_vld_in;
  wire in_axi_stream_V_value_V_0_vld_out;
  output [7:0] in_stream_V_value_V_din;
  input in_stream_V_value_V_full_n;
  output in_stream_V_value_V_write;
  wire [18:0] indvar_flatten_next_fu_78_p2;
  reg [18:0] indvar_flatten_reg_61;
  assign indvar_flatten_next_fu_78_p2 = indvar_flatten_reg_61 + 1'b1;
  assign _016_ = ap_sig_bdd_114 & ap_reg_ppiten_pp0_it0;
  assign _017_ = ap_sig_bdd_121 & ap_reg_ppiten_pp0_it1;
  assign _020_ = ap_CS_fsm[0] & _046_;
  assign _019_ = _018_ & exitcond_flatten_fu_72_p2;
  assign _021_ = ap_CS_fsm[1] & _036_;
  assign _023_ = _021_ & ap_reg_ppiten_pp0_it0;
  assign _022_ = _021_ & _045_;
  assign _018_ = ap_CS_fsm[1] & _045_;
  assign _024_ = arg_1_TVALID & in_axi_stream_V_value_V_0_in_rdy;
  assign ap_idle = _044_ & ap_CS_fsm[0];
  assign _025_ = arg_1_TVALID & _037_;
  assign _026_ = _025_ & in_axi_stream_V_last_V_0_in_rdy;
  assign _027_ = in_axi_stream_V_last_V_0_ack_out & in_axi_stream_V_last_V_0_has_vld_data_reg;
  assign _028_ = _027_ & _054_;
  assign in_axi_stream_V_last_V_0_ack_out = _023_ & _045_;
  assign _029_ = _025_ & in_axi_stream_V_value_V_0_in_rdy;
  assign _030_ = in_axi_stream_V_last_V_0_ack_out & in_axi_stream_V_value_V_0_has_vld_data_reg;
  assign _031_ = _030_ & _055_;
  assign in_stream_V_value_V_write = _033_ & _045_;
  assign _032_ = ap_CS_fsm[1] & _041_;
  assign _033_ = _032_ & ap_reg_ppiten_pp0_it1;
  assign _034_ = ap_reg_ppiten_pp0_it0 & _045_;
  assign _035_ = _034_ & exitcond_flatten_fu_72_p2;
  assign ap_sig_bdd_114 = _042_ & _036_;
  assign ap_sig_bdd_121 = _043_ & _041_;
  assign in_axi_stream_V_value_V_0_vld_out = _056_ & _049_;
  assign _036_ = ~ exitcond_flatten_fu_72_p2;
  assign _038_ = ~ arg_1_TVALID;
  assign _039_ = ~ in_axi_stream_V_last_V_0_in_rdy;
  assign _037_ = ~ in_axi_stream_V_last_V_0_ack_out;
  assign _040_ = ~ in_axi_stream_V_value_V_0_in_rdy;
  assign _041_ = ~ exitcond_flatten_reg_88;
  assign _042_ = ~ in_axi_stream_V_value_V_0_vld_out;
  assign _043_ = ~ in_stream_V_value_V_full_n;
  assign _044_ = ~ ap_start;
  assign exitcond_flatten_fu_72_p2 = indvar_flatten_reg_61 == 19'b1001101001101000000;
  assign _045_ = ~ _050_;
  assign _046_ = ~ ap_sig_bdd_142;
  assign _047_ = ~ in_axi_stream_V_last_V_0_has_vld_data_reg_i;
  assign _048_ = ~ in_axi_stream_V_value_V_0_has_vld_data_reg_i;
  assign _049_ = ~ in_axi_stream_V_value_V_0_areset_d;
  assign _050_ = _016_ | _017_;
  assign _051_ = _020_ | _019_;
  assign _052_ = in_axi_stream_V_last_V_0_ack_out | _047_;
  assign _053_ = in_axi_stream_V_last_V_0_ack_out | _048_;
  assign ap_done = ap_done_reg | ap_CS_fsm[2];
  assign _054_ = _038_ | _039_;
  assign _055_ = _038_ | _040_;
  assign ap_sig_bdd_142 = _044_ | ap_done_reg;
  assign _056_ = arg_1_TVALID | in_axi_stream_V_value_V_0_has_vld_data_reg;
  always @(posedge ap_clk)
      in_axi_stream_V_value_V_0_data_reg <= _008_;
  always @(posedge ap_clk)
      in_axi_stream_V_value_V_0_areset_d <= ap_rst;
  always @(posedge ap_clk)
      exitcond_flatten_reg_88 <= _005_;
  always @(posedge ap_clk)
      empty_18_reg_97_0 <= _004_;
  always @(posedge ap_clk)
      indvar_flatten_reg_61 <= _011_;
  always @(posedge ap_clk)
      in_axi_stream_V_value_V_0_in_rdy <= _010_;
  always @(posedge ap_clk)
      in_axi_stream_V_value_V_0_has_vld_data_reg <= _009_;
  always @(posedge ap_clk)
      in_axi_stream_V_last_V_0_in_rdy <= _007_;
  always @(posedge ap_clk)
      in_axi_stream_V_last_V_0_has_vld_data_reg <= _006_;
  always @(posedge ap_clk)
      ap_reg_ppiten_pp0_it1 <= _003_;
  always @(posedge ap_clk)
      ap_reg_ppiten_pp0_it0 <= _002_;
  always @(posedge ap_clk)
      ap_done_reg <= _001_;
  always @(posedge ap_clk)
      ap_CS_fsm <= _000_;
  assign _057_ = ap_CS_fsm == 2'b10;
  assign _015_ = _035_ ? 3'b100 : 3'b010;
  assign _012_ = ap_sig_bdd_142 ? 2'b01 : 2'b10;
  wire [2:0] fangyuan39;
  assign fangyuan39 = { 1'b0, _012_ };
  wire [4:0] fangyuan40;
  assign fangyuan40 = { _015_, 3'b001 };
  wire [1:0] fangyuan41;
  assign fangyuan41 = { _057_, _058_ };
  always @(fangyuan39 or fangyuan40 or fangyuan41) begin
    casez (fangyuan41)
      2'b?1 :
        ap_NS_fsm = fangyuan40 [2:0] ;
      2'b1? :
        ap_NS_fsm = fangyuan40 [5:3] ;
      default:
        ap_NS_fsm = fangyuan39 ;
    endcase
  end
  assign _058_ = ap_CS_fsm == 3'b100;
  assign _014_ = _031_ ? 1'b0 : in_axi_stream_V_value_V_0_has_vld_data_reg;
  assign in_axi_stream_V_value_V_0_has_vld_data_reg_i = _029_ ? 1'b1 : _014_;
  assign in_axi_stream_V_value_V_0_data_out = in_axi_stream_V_value_V_0_has_vld_data_reg ? in_axi_stream_V_value_V_0_data_reg : arg_1_TDATA;
  assign _013_ = _028_ ? 1'b0 : in_axi_stream_V_last_V_0_has_vld_data_reg;
  assign in_axi_stream_V_last_V_0_has_vld_data_reg_i = _026_ ? 1'b1 : _013_;
  assign _008_ = _024_ ? arg_1_TDATA : in_axi_stream_V_value_V_0_data_reg;
  assign _005_ = _018_ ? exitcond_flatten_fu_72_p2 : exitcond_flatten_reg_88;
  assign _004_ = _022_ ? in_axi_stream_V_value_V_0_data_out : empty_18_reg_97_0;
  assign _059_ = _020_ ? 19'b0000000000000000000 : indvar_flatten_reg_61;
  assign _011_ = in_axi_stream_V_last_V_0_ack_out ? indvar_flatten_next_fu_78_p2 : _059_;
  assign _010_ = ap_rst ? 1'b0 : _053_;
  assign _009_ = ap_rst ? 1'b0 : in_axi_stream_V_value_V_0_has_vld_data_reg_i;
  assign _007_ = ap_rst ? 1'b0 : _052_;
  assign _006_ = ap_rst ? 1'b0 : in_axi_stream_V_last_V_0_has_vld_data_reg_i;
  assign _060_ = _051_ ? 1'b0 : ap_reg_ppiten_pp0_it1;
  assign _061_ = _022_ ? 1'b1 : _060_;
  assign _003_ = ap_rst ? 1'b0 : _061_;
  assign _062_ = _020_ ? 1'b1 : ap_reg_ppiten_pp0_it0;
  assign _063_ = _019_ ? 1'b0 : _062_;
  assign _002_ = ap_rst ? 1'b0 : _063_;
  assign _064_ = ap_CS_fsm[2] ? 1'b1 : ap_done_reg;
  assign _065_ = ap_continue ? 1'b0 : _064_;
  assign _001_ = ap_rst ? 1'b0 : _065_;
  assign _000_ = ap_rst ? 3'b001 : ap_NS_fsm;
  assign ap_ready = ap_CS_fsm[2];
  assign ap_sig_bdd_108 = ap_CS_fsm[1];
  assign ap_sig_bdd_172 = ap_CS_fsm[2];
  assign ap_sig_bdd_22 = ap_CS_fsm[0];
  assign ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_CS_fsm[1];
  assign ap_sig_cseq_ST_st1_fsm_0 = ap_CS_fsm[0];
  assign ap_sig_cseq_ST_st4_fsm_2 = ap_CS_fsm[2];
  assign arg_1_TREADY = in_axi_stream_V_last_V_0_in_rdy;
  assign in_axi_stream_V_last_V_0_vld_in = arg_1_TVALID;
  assign in_axi_stream_V_value_V_0_ack_out = in_axi_stream_V_last_V_0_ack_out;
  assign in_axi_stream_V_value_V_0_vld_in = arg_1_TVALID;
  assign in_stream_V_value_V_din = empty_18_reg_97_0;
endmodule
module hls_target_mac_muladd_12ns_8ns_20ns_20_1_DSP48_0(in0, in1, in2, dout);
  wire [24:0] a;
  wire [17:0] b;
  wire [47:0] c;
  output [19:0] dout;
  input [11:0] in0;
  input [7:0] in1;
  input [19:0] in2;
  wire [19:0] m;
  wire [47:0] p;
  assign dout = m + in2;
  assign m = in0 * in1;
  assign a = { 13'b0000000000000, in0 };
  assign b = { 10'b0000000000, in1 };
  assign c = { 28'b0000000000000000000000000000, in2 };
  assign p[19:0] = dout;
endmodule
module hls_target_mac_muladd_12ns_8ns_20ns_21_1_DSP48_2(in0, in1, in2, dout);
  wire [24:0] a;
  wire [17:0] b;
  wire [47:0] c;
  output [20:0] dout;
  input [11:0] in0;
  input [7:0] in1;
  input [19:0] in2;
  wire [19:0] m;
  wire [47:0] p;
  assign dout = m + in2;
  assign m = in0 * in1;
  assign a = { 13'b0000000000000, in0 };
  assign b = { 10'b0000000000, in1 };
  assign c = { 28'b0000000000000000000000000000, in2 };
  assign p[20:0] = dout;
endmodule
module hls_target_mac_muladd_12ns_8ns_21ns_21_1_DSP48_7(in0, in1, in2, dout);
  wire [24:0] a;
  wire [17:0] b;
  wire [47:0] c;
  output [20:0] dout;
  input [11:0] in0;
  input [7:0] in1;
  input [20:0] in2;
  wire [19:0] m;
  wire [47:0] p;
  assign dout = m + in2;
  assign m = in0 * in1;
  assign a = { 13'b0000000000000, in0 };
  assign b = { 10'b0000000000, in1 };
  assign c = { 27'b000000000000000000000000000, in2 };
  assign p[20:0] = dout;
endmodule
module hls_target_mac_muladd_13ns_8ns_21ns_21_1_DSP48_6(in0, in1, in2, dout);
  wire [24:0] a;
  wire [17:0] b;
  wire [47:0] c;
  output [20:0] dout;
  input [12:0] in0;
  input [7:0] in1;
  input [20:0] in2;
  wire [20:0] m;
  wire [47:0] p;
  assign dout = m + in2;
  assign m = in0 * in1;
  assign a = { 12'b000000000000, in0 };
  assign b = { 10'b0000000000, in1 };
  assign c = { 27'b000000000000000000000000000, in2 };
  assign p[20:0] = dout;
endmodule
module hls_target_mac_muladd_13ns_8ns_21ns_22_1_DSP48_5(in0, in1, in2, dout);
  wire [24:0] a;
  wire [17:0] b;
  wire [47:0] c;
  output [21:0] dout;
  input [12:0] in0;
  input [7:0] in1;
  input [20:0] in2;
  wire [20:0] m;
  wire [47:0] p;
  assign dout = m + in2;
  assign m = in0 * in1;
  assign a = { 12'b000000000000, in0 };
  assign b = { 10'b0000000000, in1 };
  assign c = { 27'b000000000000000000000000000, in2 };
  assign p[21:0] = dout;
endmodule
module hls_target_mac_muladd_13ns_8ns_22ns_23_1_DSP48_8(in0, in1, in2, dout);
  wire [24:0] a;
  wire [17:0] b;
  wire [47:0] c;
  output [22:0] dout;
  input [12:0] in0;
  input [7:0] in1;
  input [21:0] in2;
  wire [20:0] m;
  wire [47:0] p;
  assign dout = m + in2;
  assign m = in0 * in1;
  assign a = { 12'b000000000000, in0 };
  assign b = { 10'b0000000000, in1 };
  assign c = { 26'b00000000000000000000000000, in2 };
  assign p[22:0] = dout;
endmodule
module hls_target_mac_muladd_14ns_8ns_23ns_24_1_DSP48_1(in0, in1, in2, dout);
  wire [24:0] a;
  wire [17:0] b;
  wire [47:0] c;
  output [23:0] dout;
  input [13:0] in0;
  input [7:0] in1;
  input [22:0] in2;
  wire [21:0] m;
  wire [47:0] p;
  assign dout = m + in2;
  assign m = in0 * in1;
  assign a = { 11'b00000000000, in0 };
  assign b = { 10'b0000000000, in1 };
  assign c = { 25'b0000000000000000000000000, in2 };
  assign p[23:0] = dout;
endmodule
module hls_target_mul_mul_12ns_8ns_20_1_DSP48_3(a, b, p);
  input [11:0] a;
  input [7:0] b;
  output [19:0] p;
  assign p = a * b;
endmodule
module hls_target_mul_mul_13ns_8ns_21_1_DSP48_4(a, b, p);
  input [12:0] a;
  input [7:0] b;
  output [20:0] p;
  assign p = a * b;
endmodule
