module adder(clk, rst, enable0, word0, result0);
  wire [4:0] _00_;
  wire [8:0] _01_;
  wire [8:0] _02_;
  wire [31:0] _03_;
  wire _04_;
  wire [31:0] _05_;
  input clk;
  reg [4:0] counter;
  wire [4:0] counter_next;
  input enable0;
  output [8:0] result0;
  input rst;
  wire running;
  input [8:0] word0;
  reg [8:0] word_sum;
  wire [8:0] word_sum_next;
  assign _02_ = word_sum + _04_;
  assign running = counter > 1'h0;
  always @(posedge clk)
      counter <= _00_;
  always @(posedge clk)
      word_sum <= _01_;
  assign _01_ = rst ? 9'h000 : word_sum_next;
  assign _00_ = rst ? 5'h00 : counter_next;
  assign _04_ = word0[$signed(_05_) +: 1];
  assign _05_ = counter - 1'h1;
  assign _03_[4:0] = running ? _05_[4:0] : 5'h00;
  assign counter_next = enable0 ? 5'h08 : _03_[4:0];
  assign word_sum_next = running ? _02_ : word_sum;
  assign result0 = word_sum;
endmodule
module word_adder(clk, rst, func, inWord, result);
  wire [8:0] _0_;
  wire _1_;
  wire [8:0] _2_;
  input clk;
  wire enable;
  input [1:0] func;
  input [8:0] inWord;
  output [8:0] result;
  input rst;
  reg [8:0] word;
  wire [8:0] word_next;
  assign _1_ = func == 1'h1;
  assign enable = func == 2'h2;
  always @(posedge clk)
      word <= _0_;
  assign _0_ = rst ? 9'h000 : word_next;
  assign word_next = _1_ ? inWord : word;
  adder u0 (
    .clk(clk),
    .enable0(enable),
    .result0(_2_),
    .rst(rst),
    .word0(word)
  );
  adder u1 (
    .clk(clk),
    .enable0(enable),
    .result0(result),
    .rst(rst),
    .word0(_2_)
  );
endmodule
