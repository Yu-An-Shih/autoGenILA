module adder(clk, rst, enable0, word0, result0);
  wire [4:0] _00_;
  wire [8:0] _01_;
  wire [8:0] _02_;
  wire [31:0] _03_;
  wire _04_;
  wire [31:0] _05_;
  input clk;
  reg [4:0] counter;
  wire [4:0] counter_next;
  input enable0;
  output [8:0] result0;
  input rst;
  wire running;
  input [8:0] word0;
  reg [8:0] word_sum;
  wire [8:0] word_sum_next;
  assign _02_ = word_sum + _04_;
  assign running = counter > 1'h0;
  always @(posedge clk)
      counter <= _00_;
  always @(posedge clk)
      word_sum <= _01_;
  assign _01_ = rst ? 9'h000 : word_sum_next;
  assign _00_ = rst ? 5'h00 : counter_next;
  assign _04_ = word0[$signed(_05_) +: 1];
  assign _05_ = counter - 1'h1;
  assign _03_[4:0] = running ? _05_[4:0] : 5'h00;
  assign counter_next = enable0 ? 5'h05 : _03_[4:0];
  assign word_sum_next = running ? _02_ : word_sum;
  assign result0 = word_sum;
endmodule
