/* Generated by Yosys 0.8 (git sha1 UNKNOWN, clang 9.0.0 -fPIC -Os) */

module adder(clk, rst, enable, word, result);
  wire [4:0] _00_;
  wire [8:0] _01_;
  wire [8:0] _02_;
  wire [31:0] _03_;
  wire [31:0] _04_;
  wire _05_;
  wire [31:0] _06_;
  input clk;
  reg [4:0] counter;
  wire [4:0] counter_next;
  input enable;
  output [8:0] result;
  reg [8:0] result;
  input rst;
  wire running;
  input [8:0] word;
  wire [8:0] word_sum_next;
  assign _02_ = result + _05_;
  assign running = counter > 1'h0;
  always @(posedge clk)
      result <= _01_;
  always @(posedge clk)
      counter <= _00_;
  assign _00_ = rst ? 5'h00 : counter_next;
  assign _01_ = rst ? 9'h000 : word_sum_next;
  assign _05_ = word[$signed(_06_) +: 1];
  assign _06_ = counter - 1'h1;
  assign _03_[4:0] = running ? _06_[4:0] : 5'h00;
  assign counter_next = enable ? 5'h03 : _03_[4:0];
  assign _04_[8:0] = running ? _02_ : result;
  assign word_sum_next = enable ? 9'h000 : _04_[8:0];
endmodule

module word_adder(clk, rst, func, inWord, result);
  wire [8:0] _0_;
  wire _1_;
  input clk;
  wire enable;
  input [1:0] func;
  input [8:0] inWord;
  output [8:0] result;
  input rst;
  reg [8:0] word;
  wire [8:0] word_next;
  assign _1_ = func == 1'h1;
  assign enable = func == 2'h2;
  always @(posedge clk)
      word <= _0_;
  assign _0_ = rst ? 9'h000 : word_next;
  assign word_next = _1_ ? inWord : word;
  adder u0 (
    .clk(clk),
    .enable(enable),
    .result(result),
    .rst(rst),
    .word(word)
  );
endmodule
