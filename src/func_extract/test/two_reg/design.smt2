; SMT-LIBv2 description generated by Yosys 0.9+1706 (git sha1 ffd6f54, clang 9.0.0 -fPIC -Os)
; yosys-smt2-module two_reg
(declare-sort |two_reg_s| 0)
(declare-fun |two_reg_is| (|two_reg_s|) Bool)
; yosys-smt2-input clk 1
; yosys-smt2-clock clk posedge
(declare-fun |two_reg#0| (|two_reg_s|) Bool) ; \clk
(define-fun |two_reg_n clk| ((state |two_reg_s|)) Bool (|two_reg#0| state))
; yosys-smt2-register enable 1
(declare-fun |two_reg#1| (|two_reg_s|) (_ BitVec 1)) ; \enable
(define-fun |two_reg_n enable| ((state |two_reg_s|)) Bool (= ((_ extract 0 0) (|two_reg#1| state)) #b1))
; yosys-smt2-input func 2
(declare-fun |two_reg#2| (|two_reg_s|) (_ BitVec 2)) ; \func
(define-fun |two_reg_n func| ((state |two_reg_s|)) (_ BitVec 2) (|two_reg#2| state))
; yosys-smt2-register out 1
(declare-fun |two_reg#3| (|two_reg_s|) (_ BitVec 1)) ; \out
(define-fun |two_reg_n out| ((state |two_reg_s|)) Bool (= ((_ extract 0 0) (|two_reg#3| state)) #b1))
; yosys-smt2-output out_wire 1
(define-fun |two_reg_n out_wire| ((state |two_reg_s|)) Bool (= ((_ extract 0 0) (|two_reg#3| state)) #b1))
; yosys-smt2-input rst 1
(declare-fun |two_reg#4| (|two_reg_s|) Bool) ; \rst
(define-fun |two_reg_n rst| ((state |two_reg_s|)) Bool (|two_reg#4| state))
; yosys-smt2-output sign 1
; yosys-smt2-register sign 1
(declare-fun |two_reg#5| (|two_reg_s|) (_ BitVec 1)) ; \sign
(define-fun |two_reg_n sign| ((state |two_reg_s|)) Bool (= ((_ extract 0 0) (|two_reg#5| state)) #b1))
(define-fun |two_reg#6| ((state |two_reg_s|)) Bool (= (|two_reg#2| state) #b10)) ; \_04_
(define-fun |two_reg#7| ((state |two_reg_s|)) (_ BitVec 1) (ite (|two_reg#6| state) #b1 (|two_reg#5| state))) ; \sign_next
(define-fun |two_reg#8| ((state |two_reg_s|)) (_ BitVec 1) (ite (|two_reg#4| state) #b0 (|two_reg#7| state))) ; \_02_
(define-fun |two_reg#9| ((state |two_reg_s|)) Bool (and (or  (|two_reg#6| state) false) (or  (= ((_ extract 0 0) (|two_reg#1| state)) #b1) false))) ; \_05_
(define-fun |two_reg#10| ((state |two_reg_s|)) (_ BitVec 1) (ite (|two_reg#9| state) #b1 (|two_reg#3| state))) ; \out_next
(define-fun |two_reg#11| ((state |two_reg_s|)) (_ BitVec 1) (ite (|two_reg#4| state) #b0 (|two_reg#10| state))) ; \_01_
(define-fun |two_reg#12| ((state |two_reg_s|)) Bool (= (|two_reg#2| state) #b01)) ; \_03_
(define-fun |two_reg#13| ((state |two_reg_s|)) (_ BitVec 1) (ite (|two_reg#12| state) #b1 (|two_reg#1| state))) ; \enable_next
(define-fun |two_reg#14| ((state |two_reg_s|)) (_ BitVec 1) (ite (|two_reg#4| state) #b0 (|two_reg#13| state))) ; \_00_
(define-fun |two_reg_a| ((state |two_reg_s|)) Bool true)
(define-fun |two_reg_u| ((state |two_reg_s|)) Bool true)
(define-fun |two_reg_i| ((state |two_reg_s|)) Bool true)
(define-fun |two_reg_h| ((state |two_reg_s|)) Bool true)
(define-fun |two_reg_t| ((state |two_reg_s|) (next_state |two_reg_s|)) Bool (and
  (= (|two_reg#8| state) (|two_reg#5| next_state)) ; $procdff$15 \sign
  (= (|two_reg#11| state) (|two_reg#3| next_state)) ; $procdff$13 \out
  (= (|two_reg#14| state) (|two_reg#1| next_state)) ; $procdff$14 \enable
)) ; end of module two_reg
; yosys-smt2-topmod two_reg
; end of yosys output
(define-fun |zy| ((state |two_reg_s|)) Bool (= (|two_reg#3| state) #b0) )
(define-fun |zy| ((state |two_reg_s|)) Bool true)
