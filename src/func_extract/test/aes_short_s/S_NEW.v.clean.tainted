  logic [7:0] _00_;
  logic [7:0] _00__T ;
  logic [7:0] _00__R ;
  logic [7:0] _00__C ;
  logic [7:0] _00__X ;
  logic [1:0] _00__S ;
  logic _01_;
  logic _01__T ;
  logic _01__R ;
  logic _01__C ;
  logic _01__X ;
  logic [1:0] _01__S ;
  logic _02_;
  logic _02__T ;
  logic _02__R ;
  logic _02__C ;
  logic _02__X ;
  logic [1:0] _02__S ;
  logic _03_;
  logic _03__T ;
  logic _03__R ;
  logic _03__C ;
  logic _03__X ;
  logic [1:0] _03__S ;
  logic _04_;
  logic _04__T ;
  logic _04__R ;
  logic _04__C ;
  logic _04__X ;
  logic [1:0] _04__S ;
  logic _05_;
  logic _05__T ;
  logic _05__R ;
  logic _05__C ;
  logic _05__X ;
  logic [1:0] _05__S ;
  logic _06_;
  logic _06__T ;
  logic _06__R ;
  logic _06__C ;
  logic _06__X ;
  logic [1:0] _06__S ;
  input clk;
  input clk_T ;
  wire [1:0] clk_S ;
  output clk_R ;
  output clk_X ;
  output clk_C ;
  assign clk_S = 0 ;
  input [7:0] in;
  input [7:0] in_T ;
  wire [1:0] in_S ;
  output [7:0] in_R ;
  output [7:0] in_X ;
  output [7:0] in_C ;
  assign in_S = 0 ;
  output [7:0] out;
  logic [7:0] out ;
  output [7:0] out_T ;
  logic [7:0] out_T ;
  logic [7:0] out_R ;
  logic [7:0] out_C ;
  logic [7:0] out_X ;
  logic [1:0] out_S ;
  input [7:0] out_R0 ;
  input [7:0] out_C0 ;
  wire [7:0] out_X0 ;
  assign out_X0 = out_R0 ;
  logic [7:0] out;
  logic [7:0]  out_T ;
  logic [7:0]  out_PREV_VAL1 ;
  logic [7:0]  out_PREV_VAL2 ;
  logic out_t_flag ;
  logic out_r_flag ;
  assign out_S = 3 ;
  always @(posedge clk)
      out <= _00_;
  logic [7:0] _00__X0 ;
  logic [7:0] _00__R0 ;
  logic [7:0] _00__C0 ;
  assign _00__X0 = { 8{ out_S != _00__S }} ;
  assign _00__R0 = 0 ;
  assign _00__C0 = 0 ;
  always @( posedge clk )
      out_T 		<= rst_zy ? 0 : ( _00__T & _00__X0 );
  always @( posedge clk )
      out_t_flag 	<= rst_zy ? 0 : out_t_flag ? 1 : | _00__T & ( | _00__X0 );
  always @( posedge clk )
      out_r_flag 	<= rst_zy ? 0 : out_r_flag ? 1 : out_t_flag ? 0 : ( | out_R ) ;
  logic [5:0] fangyuan0;
  logic [5:0] fangyuan0_T ;
  logic [5:0] fangyuan0_R ;
  logic [5:0] fangyuan0_C ;
  logic [5:0] fangyuan0_X ;
  assign fangyuan0 = { _06_, _05_, _04_, _03_, _02_, _01_ };
  assign fangyuan0_T = {  _06__T , _05__T , _04__T , _03__T , _02__T , _01__T  };
  logic [1:0] fangyuan0_S ;
  assign fangyuan0_S = 0 ;
  logic [0:0] _06__R0 ;
  logic [0:0] _06__X0 ;
  logic [0:0] _06__C0 ;
  assign _06__R0 = fangyuan0_R [5:5] ;
  assign _06__X0 = fangyuan0_X [5:5] ;
  assign _06__C0 = fangyuan0_C [5:5] ;
  logic [0:0] _05__R0 ;
  logic [0:0] _05__X0 ;
  logic [0:0] _05__C0 ;
  assign _05__R0 = fangyuan0_R [4:4] ;
  assign _05__X0 = fangyuan0_X [4:4] ;
  assign _05__C0 = fangyuan0_C [4:4] ;
  logic [0:0] _04__R0 ;
  logic [0:0] _04__X0 ;
  logic [0:0] _04__C0 ;
  assign _04__R0 = fangyuan0_R [3:3] ;
  assign _04__X0 = fangyuan0_X [3:3] ;
  assign _04__C0 = fangyuan0_C [3:3] ;
  logic [0:0] _03__R0 ;
  logic [0:0] _03__X0 ;
  logic [0:0] _03__C0 ;
  assign _03__R0 = fangyuan0_R [2:2] ;
  assign _03__X0 = fangyuan0_X [2:2] ;
  assign _03__C0 = fangyuan0_C [2:2] ;
  logic [0:0] _02__R0 ;
  logic [0:0] _02__X0 ;
  logic [0:0] _02__C0 ;
  assign _02__R0 = fangyuan0_R [1:1] ;
  assign _02__X0 = fangyuan0_X [1:1] ;
  assign _02__C0 = fangyuan0_C [1:1] ;
  logic [0:0] _01__R0 ;
  logic [0:0] _01__X0 ;
  logic [0:0] _01__C0 ;
  assign _01__R0 = fangyuan0_R [0:0] ;
  assign _01__X0 = fangyuan0_X [0:0] ;
  assign _01__C0 = fangyuan0_C [0:0] ;

  always @(out or fangyuan0) begin
    casez (fangyuan0)
      6'b?????1 :
        _00_ = 8'b10101010 ;
      6'b????1? :
        _00_ = 8'b11110010 ;
      6'b???1?? :
        _00_ = 8'b01111011 ;
      6'b??1??? :
        _00_ = 8'b01110111 ;
      6'b?1???? :
        _00_ = 8'b01111100 ;
      6'b1????? :
        _00_ = 8'b01100011 ;
      default:
        _00_ = out ;
    endcase
  end
    always @( out_T or fangyuan0_T or fangyuan0 ) begin
      casez (fangyuan0)
        6'b?????1 :
          _00__T = { 8{ | fangyuan0_T }} ;
        6'b????1? :
          _00__T = { 8{ | fangyuan0_T }} ;
        6'b???1?? :
          _00__T = { 8{ | fangyuan0_T }} ;
        6'b??1??? :
          _00__T = { 8{ | fangyuan0_T }} ;
        6'b?1???? :
          _00__T = { 8{ | fangyuan0_T }} ;
        6'b1????? :
          _00__T = { 8{ | fangyuan0_T }} ;
        default:
          _00__T = out_T  | { 8{ | fangyuan0_T }} ;
      endcase
    end
    always @( out_S or fangyuan0 ) begin
      casez (fangyuan0)
        6'b?????1 :
          _00__S = 2'b1 ;
        6'b????1? :
          _00__S = 2'b1 ;
        6'b???1?? :
          _00__S = 2'b1 ;
        6'b??1??? :
          _00__S = 2'b1 ;
        6'b?1???? :
          _00__S = 2'b1 ;
        6'b1????? :
          _00__S = 2'b1 ;
        default:
          _00__S = out_S ;
      endcase
    end
    reg [6-1:0] fangyuan0_R0 ;
    reg [6-1:0] fangyuan0_X0 ;
    reg [6-1:0] fangyuan0_C0 ;
    reg [8-1:0] out_R1 ;
    reg [8-1:0] out_X1 ;
    reg [8-1:0] out_C1 ;
    always @( _00__R or fangyuan0 ) begin
      fangyuan0_R0 = { 6{ | _00__R }} ;
      out_R1 = 0 ;
      if (fangyuan0 == 0 )
        out_R1 = _00__R | { 8{ | fangyuan0_T }} ;
    end
    always @( _00__X or fangyuan0 ) begin
      fangyuan0_X0 = { 6{ | _00__X }} ;
      out_X1 = 0 ;
      if (fangyuan0 == 0 )
        out_X1 = _00__X ;
    end
    always @( _00__C or fangyuan0 ) begin
      fangyuan0_C0 = { 6{ | _00__C }} ;
      out_C1 = 0 ;
      if (fangyuan0 == 0 )
        out_C1 = { 8{ 1'b1 }} ;
    end
  assign _01_ = in == 3'h5;
  assign _01__S = 0 ;
  logic [7:0] in_C0 ;
  logic [7:0] in_R0 ;
  logic [7:0] in_X0 ;
  assign _01__T = | in_T ;
  assign in_C0 = { 8{ _01__C }} ;
  assign in_R0 = { 8{ _01__R }} ;
  assign in_X0 = { 8{ _01__X }} ;
  assign _02_ = in == 3'h4;
  assign _02__S = 0 ;
  logic [7:0] in_C1 ;
  logic [7:0] in_R1 ;
  logic [7:0] in_X1 ;
  assign _02__T = | in_T ;
  assign in_C1 = { 8{ _02__C }} ;
  assign in_R1 = { 8{ _02__R }} ;
  assign in_X1 = { 8{ _02__X }} ;
  assign _03_ = in == 2'h3;
  assign _03__S = 0 ;
  logic [7:0] in_C2 ;
  logic [7:0] in_R2 ;
  logic [7:0] in_X2 ;
  assign _03__T = | in_T ;
  assign in_C2 = { 8{ _03__C }} ;
  assign in_R2 = { 8{ _03__R }} ;
  assign in_X2 = { 8{ _03__X }} ;
  assign _04_ = in == 2'h2;
  assign _04__S = 0 ;
  logic [7:0] in_C3 ;
  logic [7:0] in_R3 ;
  logic [7:0] in_X3 ;
  assign _04__T = | in_T ;
  assign in_C3 = { 8{ _04__C }} ;
  assign in_R3 = { 8{ _04__R }} ;
  assign in_X3 = { 8{ _04__X }} ;
  assign _05_ = in == 1'h1;
  assign _05__S = 0 ;
  logic [7:0] in_C4 ;
  logic [7:0] in_R4 ;
  logic [7:0] in_X4 ;
  assign _05__T = | in_T ;
  assign in_C4 = { 8{ _05__C }} ;
  assign in_R4 = { 8{ _05__R }} ;
  assign in_X4 = { 8{ _05__X }} ;
  assign _06_ = ! in;
  logic [7:0] in_C5 ;
  logic [7:0] in_R5 ;
  logic [7:0] in_X5 ;
  assign _06__T = | in_T ;
  assign in_C5 = { 8{ _06__C }} ;
  assign in_X5 = { 8{ _06__X }} ;
  assign in_R5 = { 8{ _06__R }} ;
  assign _06__S = 0 ;
  assign in_C = ( in_C0 ) | ( in_C1 ) | ( in_C2 ) | ( in_C3 ) | ( in_C4 ) | ( in_C5 );
  assign fangyuan0_C = ( fangyuan0_C0 );
  assign _02__C = ( _02__C0 );
  assign _03__C = ( _03__C0 );
  assign _00__C = ( _00__C0 );
  assign _05__C = ( _05__C0 );
  assign _01__C = ( _01__C0 );
  assign out_C = ( out_C0 ) | ( out_C1 );
  assign _06__C = ( _06__C0 );
  assign _04__C = ( _04__C0 );
  assign in_X = ( in_X0 ) | ( in_X1 ) | ( in_X2 ) | ( in_X3 ) | ( in_X4 ) | ( in_X5 );
  assign fangyuan0_X = ( fangyuan0_X0 );
  assign _02__X = ( _02__X0 );
  assign _03__X = ( _03__X0 );
  assign _00__X = ( _00__X0 );
  assign _05__X = ( _05__X0 );
  assign _01__X = ( _01__X0 );
  assign out_X = ( out_X0 ) | ( out_X1 );
  assign _06__X = ( _06__X0 );
  assign _04__X = ( _04__X0 );
  assign in_R = ( in_X0 & in_R0 ) | ( in_X1 & in_R1 ) | ( in_X2 & in_R2 ) | ( in_X3 & in_R3 ) | ( in_X4 & in_R4 ) | ( in_X5 & in_R5 );
  assign fangyuan0_R = ( fangyuan0_X0 & fangyuan0_R0 );
  assign _02__R = ( _02__X0 & _02__R0 );
  assign _03__R = ( _03__X0 & _03__R0 );
  assign _00__R = ( _00__X0 & _00__R0 );
  assign _05__R = ( _05__X0 & _05__R0 );
  assign _01__R = ( _01__X0 & _01__R0 );
  assign out_R = ( out_X0 & out_R0 ) | ( out_X1 & out_R1 );
  assign _06__R = ( _06__X0 & _06__R0 );
  assign _04__R = ( _04__X0 & _04__R0 );
 // ground taints for floating regs
 // ground taints for unused wires
  always @( posedge clk ) begin
    if( rst_zy ) out_PREV_VAL1 <= 0 ;
    if( rst_zy ) out_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) out_PREV_VAL1 <= out ;
    if( INSTR_IN_ZY ) out_PREV_VAL2 <= out_PREV_VAL1 ;
  end
 // ground taints for unused wire slices
  assert property( out_r_flag == 0 || out_PREV_VAL1 == out_PREV_VAL2 );
endmodule
