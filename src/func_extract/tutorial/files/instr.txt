// instruction encoding: use "x" to represent arbitrary values, and if the instruction takes multiple cycles to inject into hardware, specify the encoding for each of the cycles. In the case of Pico-RISCV, sometimes it cannot read in the instruction at the input immediately, so we let the input be persistent for three cycles
// add
#1:add
(1)
//mem_rdata = 7'b0+5'bx+5'bx+3'h0+5'bx+5'hc+2'h3
mem_rdata = 7'b0+5'h2+5'h3+3'h0+5'b1+5'hc+2'h3
resetn = 1
mem_ready = 1
pcpi_wr = 0
pcpi_rd = 0
pcpi_wait = 0
pcpi_ready = 0
irq = 0
(2)
//mem_rdata = 7'b0+5'bx+5'bx+3'h0+5'bx+5'hc+2'h3
mem_rdata = 7'b0+5'h2+5'h3+3'h0+5'b1+5'hc+2'h3
resetn = 1
mem_ready = 1
pcpi_wr = 0
pcpi_rd = 0
pcpi_wait = 0
pcpi_ready = 0
irq = 0
(3)
//mem_rdata = 7'b0+5'bx+5'bx+3'h0+5'bx+5'hc+2'h3
mem_rdata = 7'b0+5'h2+5'h3+3'h0+5'b1+5'hc+2'h3
resetn = 1
mem_ready = 1
pcpi_wr = 0
pcpi_rd = 0
pcpi_wait = 0
pcpi_ready = 0
irq = 0


// delay of instruction. If it is already specified in allowed_target, the value here will be ignored.
#delay:8


// registers that may be read by this instruction
// must start with "R:"
R:
\cpuregs[1]
\cpuregs[2]
\cpuregs[3]
\cpuregs[4]
\cpuregs[5]
\cpuregs[6]
\cpuregs[7]
\cpuregs[8]
\cpuregs[9]
\cpuregs[10]
\cpuregs[11]
\cpuregs[12]
\cpuregs[13]
\cpuregs[14]
\cpuregs[15]
\cpuregs[16]
\cpuregs[17]
\cpuregs[18]
\cpuregs[19]
\cpuregs[20]
\cpuregs[21]
\cpuregs[22]
\cpuregs[23]
\cpuregs[24]
\cpuregs[25]
\cpuregs[26]
\cpuregs[27]
\cpuregs[28]
\cpuregs[29]
\cpuregs[30]
\cpuregs[31]
reg_pc
//reg_next_pc


// top module name
$TOP:
picorv32


// encoding for the NOP instruction
$NOP:
mem_rdata = 25'b0+5'b00100+2'b11
resetn = 1
mem_ready = 1
pcpi_wr = 0
pcpi_rd = 0
pcpi_wait = 0
pcpi_ready = 0
irq = 0

// clock signal name
#CLK:clk

// reset signal name
#RST:resetn
