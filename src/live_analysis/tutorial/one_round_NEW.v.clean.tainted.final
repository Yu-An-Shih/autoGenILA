module one_round ( clk , key , state_in , INSTR_IN_ZY , zy_end_sig , rst_zy , key_T , key_S , state_in_T , state_in_S , state_out_R0 , state_out , key_R , state_in_R , state_out_T , state_out_S );
  input rst_zy;
  input zy_end_sig;
  integer i;
  input INSTR_IN_ZY;
  wire [31:0] _00_;
  logic [31:0] _00__T ;
  logic [31:0] _00__R ;
  logic [4:0] _00__S ;
  wire [31:0] _01_;
  logic [31:0] _01__T ;
  logic [31:0] _01__R ;
  logic [4:0] _01__S ;
  wire [31:0] _02_;
  logic [31:0] _02__T ;
  logic [31:0] _02__R ;
  logic [4:0] _02__S ;
  wire [31:0] _03_;
  logic [31:0] _03__T ;
  logic [31:0] _03__R ;
  logic [4:0] _03__S ;
  wire [31:0] _04_;
  logic [31:0] _04__T ;
  logic [31:0] _04__R ;
  logic [4:0] _04__S ;
  wire [31:0] _05_;
  logic [31:0] _05__T ;
  logic [31:0] _05__R ;
  logic [4:0] _05__S ;
  wire [31:0] _06_;
  logic [31:0] _06__T ;
  logic [31:0] _06__R ;
  logic [4:0] _06__S ;
  wire [31:0] _07_;
  logic [31:0] _07__T ;
  logic [31:0] _07__R ;
  logic [4:0] _07__S ;
  wire [31:0] _08_;
  logic [31:0] _08__T ;
  logic [31:0] _08__R ;
  logic [4:0] _08__S ;
  wire [31:0] _09_;
  logic [31:0] _09__T ;
  logic [31:0] _09__R ;
  logic [4:0] _09__S ;
  wire [31:0] _10_;
  logic [31:0] _10__T ;
  logic [31:0] _10__R ;
  logic [4:0] _10__S ;
  wire [31:0] _11_;
  logic [31:0] _11__T ;
  logic [31:0] _11__R ;
  logic [4:0] _11__S ;
  input clk;
  wire [31:0] k0;
  logic [31:0] k0_T ;
  logic [31:0] k0_R ;
  logic [4:0] k0_S ;
  wire [31:0] k1;
  logic [31:0] k1_T ;
  logic [31:0] k1_R ;
  logic [4:0] k1_S ;
  wire [31:0] k2;
  logic [31:0] k2_T ;
  logic [31:0] k2_R ;
  logic [4:0] k2_S ;
  wire [31:0] k3;
  logic [31:0] k3_T ;
  logic [31:0] k3_R ;
  logic [4:0] k3_S ;
  input [127:0] key;
  input [127:0] key_T ;
  output [127:0] key_R ;
  input [4:0] key_S ;
  wire [31:0] p00;
  logic [31:0] p00_T ;
  logic [31:0] p00_R ;
  logic [4:0] p00_S ;
  wire [31:0] p01;
  logic [31:0] p01_T ;
  logic [31:0] p01_R ;
  logic [4:0] p01_S ;
  wire [31:0] p02;
  logic [31:0] p02_T ;
  logic [31:0] p02_R ;
  logic [4:0] p02_S ;
  wire [31:0] p03;
  logic [31:0] p03_T ;
  logic [31:0] p03_R ;
  logic [4:0] p03_S ;
  wire [31:0] p10;
  logic [31:0] p10_T ;
  logic [31:0] p10_R ;
  logic [4:0] p10_S ;
  wire [31:0] p11;
  logic [31:0] p11_T ;
  logic [31:0] p11_R ;
  logic [4:0] p11_S ;
  wire [31:0] p12;
  logic [31:0] p12_T ;
  logic [31:0] p12_R ;
  logic [4:0] p12_S ;
  wire [31:0] p13;
  logic [31:0] p13_T ;
  logic [31:0] p13_R ;
  logic [4:0] p13_S ;
  wire [31:0] p20;
  logic [31:0] p20_T ;
  logic [31:0] p20_R ;
  logic [4:0] p20_S ;
  wire [31:0] p21;
  logic [31:0] p21_T ;
  logic [31:0] p21_R ;
  logic [4:0] p21_S ;
  wire [31:0] p22;
  logic [31:0] p22_T ;
  logic [31:0] p22_R ;
  logic [4:0] p22_S ;
  wire [31:0] p23;
  logic [31:0] p23_T ;
  logic [31:0] p23_R ;
  logic [4:0] p23_S ;
  wire [31:0] p30;
  logic [31:0] p30_T ;
  logic [31:0] p30_R ;
  logic [4:0] p30_S ;
  wire [31:0] p31;
  logic [31:0] p31_T ;
  logic [31:0] p31_R ;
  logic [4:0] p31_S ;
  wire [31:0] p32;
  logic [31:0] p32_T ;
  logic [31:0] p32_R ;
  logic [4:0] p32_S ;
  wire [31:0] p33;
  logic [31:0] p33_T ;
  logic [31:0] p33_R ;
  logic [4:0] p33_S ;
  wire [31:0] s0;
  logic [31:0] s0_T ;
  logic [31:0] s0_R ;
  logic [4:0] s0_S ;
  wire [31:0] s1;
  logic [31:0] s1_T ;
  logic [31:0] s1_R ;
  logic [4:0] s1_S ;
  wire [31:0] s2;
  logic [31:0] s2_T ;
  logic [31:0] s2_R ;
  logic [4:0] s2_S ;
  wire [31:0] s3;
  logic [31:0] s3_T ;
  logic [31:0] s3_R ;
  logic [4:0] s3_S ;
  input [127:0] state_in;
  input [127:0] state_in_T ;
  output [127:0] state_in_R ;
  input [4:0] state_in_S ;
  output [127:0] state_out;
  output [127:0] state_out_T ;
  logic [127:0] state_out_T ;
  logic [127:0] state_out_R ;
  logic [4:0] state_out_S ;
  input [127:0] state_out_R0 ;
  output [4:0] state_out_S ;
  reg [127:0] state_out;
  logic [127:0]  state_out_T ;
  logic state_out_t_flag ;
  logic state_out_r_flag ;
  assign state_out_S = 10 ;
  wire [31:0] z0;
  logic [31:0] z0_T ;
  logic [31:0] z0_R ;
  logic [4:0] z0_S ;
  wire [31:0] z1;
  logic [31:0] z1_T ;
  logic [31:0] z1_R ;
  logic [4:0] z1_S ;
  wire [31:0] z2;
  logic [31:0] z2_T ;
  logic [31:0] z2_R ;
  logic [4:0] z2_S ;
  wire [31:0] z3;
  logic [31:0] z3_T ;
  logic [31:0] z3_R ;
  logic [4:0] z3_S ;
  always @(posedge clk)
    state_out <= addedVar0;
logic [127:0] addedVar0_R0 ;
assign addedVar0_R0 = 0 ;
always @( posedge clk )
    state_out_T 		<= rst_zy ? 0 : ( addedVar0_T & ( { 128{ state_out_S != addedVar0_S }} ));
always @( posedge clk )
    state_out_t_flag 	<= rst_zy ? 0 : state_out_t_flag ? 1 : | addedVar0_T & ( state_out_S != addedVar0_S );
always @( posedge clk )
    state_out_r_flag 	<= rst_zy ? 0 : state_out_r_flag ? 1 : state_out_t_flag ? 0 : ( | state_out_R ) ;
  wire [127:0] addedVar0;
  logic [127:0] addedVar0_T ;
  logic [127:0] addedVar0_R ;
  assign addedVar0 = { z0, z1, z2, z3 };
  assign addedVar0_T = {  z0_T , z1_T , z2_T , z3_T  };
  logic [4:0] addedVar0_S ;
  assign addedVar0_S = 0 ;
  logic [31:0] z0_R0 ;
  assign z0_R0 = addedVar0_R [127:96] ;
  logic [31:0] z1_R0 ;
  assign z1_R0 = addedVar0_R [95:64] ;
  logic [31:0] z2_R0 ;
  assign z2_R0 = addedVar0_R [63:32] ;
  logic [31:0] z3_R0 ;
  assign z3_R0 = addedVar0_R [31:0] ;
  assign _00_ = p00 ^ p11;
  assign _00__S = 0 ;
  logic [31:0] p00_R0 ;
  logic [31:0] p11_R0 ;
  assign _00__T = p00_T | p11_T ;
  assign p00_R0 = _00__R ;
  assign p11_R0 = _00__R ;
  assign _01_ = _00_ ^ p22;
  assign _01__S = 0 ;
  logic [31:0] _00__R0 ;
  logic [31:0] p22_R0 ;
  assign _01__T = _00__T | p22_T ;
  assign _00__R0 = _01__R ;
  assign p22_R0 = _01__R ;
  assign _02_ = _01_ ^ p33;
  assign _02__S = 0 ;
  logic [31:0] _01__R0 ;
  logic [31:0] p33_R0 ;
  assign _02__T = _01__T | p33_T ;
  assign _01__R0 = _02__R ;
  assign p33_R0 = _02__R ;
  assign z0 = _02_ ^ key[127:96];
  assign z0_S = 0 ;
  logic [31:0] _02__R0 ;
  logic [127:0] key_R0 ;
  assign z0_T = _02__T | key_T [127:96] ;
  assign _02__R0 = z0_R ;
  assign key_R0 [127:96] = z0_R ;
  assign _03_ = p03 ^ p10;
  assign _03__S = 0 ;
  logic [31:0] p03_R0 ;
  logic [31:0] p10_R0 ;
  assign _03__T = p03_T | p10_T ;
  assign p03_R0 = _03__R ;
  assign p10_R0 = _03__R ;
  assign _04_ = _03_ ^ p21;
  assign _04__S = 0 ;
  logic [31:0] _03__R0 ;
  logic [31:0] p21_R0 ;
  assign _04__T = _03__T | p21_T ;
  assign _03__R0 = _04__R ;
  assign p21_R0 = _04__R ;
  assign _05_ = _04_ ^ p32;
  assign _05__S = 0 ;
  logic [31:0] _04__R0 ;
  logic [31:0] p32_R0 ;
  assign _05__T = _04__T | p32_T ;
  assign _04__R0 = _05__R ;
  assign p32_R0 = _05__R ;
  assign z1 = _05_ ^ key[95:64];
  assign z1_S = 0 ;
  logic [31:0] _05__R0 ;
  assign z1_T = _05__T | key_T [95:64] ;
  assign _05__R0 = z1_R ;
  assign key_R0 [95:64] = z1_R ;
  assign _06_ = p02 ^ p13;
  assign _06__S = 0 ;
  logic [31:0] p02_R0 ;
  logic [31:0] p13_R0 ;
  assign _06__T = p02_T | p13_T ;
  assign p02_R0 = _06__R ;
  assign p13_R0 = _06__R ;
  assign _07_ = _06_ ^ p20;
  assign _07__S = 0 ;
  logic [31:0] _06__R0 ;
  logic [31:0] p20_R0 ;
  assign _07__T = _06__T | p20_T ;
  assign _06__R0 = _07__R ;
  assign p20_R0 = _07__R ;
  assign _08_ = _07_ ^ p31;
  assign _08__S = 0 ;
  logic [31:0] _07__R0 ;
  logic [31:0] p31_R0 ;
  assign _08__T = _07__T | p31_T ;
  assign _07__R0 = _08__R ;
  assign p31_R0 = _08__R ;
  assign z2 = _08_ ^ key[63:32];
  assign z2_S = 0 ;
  logic [31:0] _08__R0 ;
  assign z2_T = _08__T | key_T [63:32] ;
  assign _08__R0 = z2_R ;
  assign key_R0 [63:32] = z2_R ;
  assign _09_ = p01 ^ p12;
  assign _09__S = 0 ;
  logic [31:0] p01_R0 ;
  logic [31:0] p12_R0 ;
  assign _09__T = p01_T | p12_T ;
  assign p01_R0 = _09__R ;
  assign p12_R0 = _09__R ;
  assign _10_ = _09_ ^ p23;
  assign _10__S = 0 ;
  logic [31:0] _09__R0 ;
  logic [31:0] p23_R0 ;
  assign _10__T = _09__T | p23_T ;
  assign _09__R0 = _10__R ;
  assign p23_R0 = _10__R ;
  assign _11_ = _10_ ^ p30;
  assign _11__S = 0 ;
  logic [31:0] _10__R0 ;
  logic [31:0] p30_R0 ;
  assign _11__T = _10__T | p30_T ;
  assign _10__R0 = _11__R ;
  assign p30_R0 = _11__R ;
  assign z3 = _11_ ^ key[31:0];
  assign z3_S = 0 ;
  logic [31:0] _11__R0 ;
  assign z3_T = _11__T | key_T [31:0] ;
  assign _11__R0 = z3_R ;
  assign key_R0 [31:0] = z3_R ;
  logic [127:0] state_in_R0 ;
// module: table_lookup
  table_lookup t0 (
    .state_T (  state_in_T [127:96]  ),
    .state_R (  state_in_R0 [127:96]  ),
    .state_S (  state_in_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .zy_end_sig(zy_end_sig),
    .rst_zy(rst_zy),
    .p0_T (  p00_T  ),
    .p0_R0 (  p00_R  ),
    .p0_S (  p00_S  ),
    .p1_T (  p01_T  ),
    .p1_R0 (  p01_R  ),
    .p1_S (  p01_S  ),
    .p2_T (  p02_T  ),
    .p2_R0 (  p02_R  ),
    .p2_S (  p02_S  ),
    .p3_T (  p03_T  ),
    .p3_R0 (  p03_R  ),
    .p3_S (  p03_S  ),
    .p3 ( p03 ),
    .p2 ( p02 ),
    .state ( state_in[127:96] ),
    .p1 ( p01 ),
    .p0 ( p00 ),
    .clk ( clk )
  );
// module: table_lookup
  table_lookup t1 (
    .state_T (  state_in_T [95:64]  ),
    .state_R (  state_in_R0 [95:64]  ),
    .state_S (  state_in_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .zy_end_sig(zy_end_sig),
    .rst_zy(rst_zy),
    .p0_T (  p10_T  ),
    .p0_R0 (  p10_R  ),
    .p0_S (  p10_S  ),
    .p1_T (  p11_T  ),
    .p1_R0 (  p11_R  ),
    .p1_S (  p11_S  ),
    .p2_T (  p12_T  ),
    .p2_R0 (  p12_R  ),
    .p2_S (  p12_S  ),
    .p3_T (  p13_T  ),
    .p3_R0 (  p13_R  ),
    .p3_S (  p13_S  ),
    .p3 ( p13 ),
    .p2 ( p12 ),
    .state ( state_in[95:64] ),
    .p1 ( p11 ),
    .p0 ( p10 ),
    .clk ( clk )
  );
// module: table_lookup
  table_lookup t2 (
    .state_T (  state_in_T [63:32]  ),
    .state_R (  state_in_R0 [63:32]  ),
    .state_S (  state_in_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .zy_end_sig(zy_end_sig),
    .rst_zy(rst_zy),
    .p0_T (  p20_T  ),
    .p0_R0 (  p20_R  ),
    .p0_S (  p20_S  ),
    .p1_T (  p21_T  ),
    .p1_R0 (  p21_R  ),
    .p1_S (  p21_S  ),
    .p2_T (  p22_T  ),
    .p2_R0 (  p22_R  ),
    .p2_S (  p22_S  ),
    .p3_T (  p23_T  ),
    .p3_R0 (  p23_R  ),
    .p3_S (  p23_S  ),
    .p3 ( p23 ),
    .p2 ( p22 ),
    .state ( state_in[63:32] ),
    .p1 ( p21 ),
    .p0 ( p20 ),
    .clk ( clk )
  );
// module: table_lookup
  table_lookup t3 (
    .state_T (  state_in_T [31:0]  ),
    .state_R (  state_in_R0 [31:0]  ),
    .state_S (  state_in_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .zy_end_sig(zy_end_sig),
    .rst_zy(rst_zy),
    .p0_T (  p30_T  ),
    .p0_R0 (  p30_R  ),
    .p0_S (  p30_S  ),
    .p1_T (  p31_T  ),
    .p1_R0 (  p31_R  ),
    .p1_S (  p31_S  ),
    .p2_T (  p32_T  ),
    .p2_R0 (  p32_R  ),
    .p2_S (  p32_S  ),
    .p3_T (  p33_T  ),
    .p3_R0 (  p33_R  ),
    .p3_S (  p33_S  ),
    .p3 ( p33 ),
    .p2 ( p32 ),
    .state ( state_in[31:0] ),
    .p1 ( p31 ),
    .p0 ( p30 ),
    .clk ( clk )
  );
  assign k0 = key[127:96];
  logic [127:0] key_R1 ;
  assign k0_T = key_T [127:96] ;
  assign key_R1 [127:96] = k0_R ;
  assign k0_S = key_S ;
  assign k1 = key[95:64];
  assign k1_T = key_T [95:64] ;
  assign key_R1 [95:64] = k1_R ;
  assign k1_S = key_S ;
  assign k2 = key[63:32];
  assign k2_T = key_T [63:32] ;
  assign key_R1 [63:32] = k2_R ;
  assign k2_S = key_S ;
  assign k3 = key[31:0];
  assign k3_T = key_T [31:0] ;
  assign key_R1 [31:0] = k3_R ;
  assign k3_S = key_S ;
  assign s0 = state_in[127:96];
  logic [127:0] state_in_R1 ;
  assign s0_T = state_in_T [127:96] ;
  assign state_in_R1 [127:96] = s0_R ;
  assign s0_S = state_in_S ;
  assign s1 = state_in[95:64];
  assign s1_T = state_in_T [95:64] ;
  assign state_in_R1 [95:64] = s1_R ;
  assign s1_S = state_in_S ;
  assign s2 = state_in[63:32];
  assign s2_T = state_in_T [63:32] ;
  assign state_in_R1 [63:32] = s2_R ;
  assign s2_S = state_in_S ;
  assign s3 = state_in[31:0];
  assign s3_T = state_in_T [31:0] ;
  assign state_in_R1 [31:0] = s3_R ;
  assign s3_S = state_in_S ;
  assign state_in_R = ( state_in_R0 ) | ( state_in_R1 );
  assign _11__R = ( _11__R0 );
  assign p30_R = ( p30_R0 );
  assign _10__R = ( _10__R0 );
  assign p23_R = ( p23_R0 );
  assign _09__R = ( _09__R0 );
  assign p12_R = ( p12_R0 );
  assign p01_R = ( p01_R0 );
  assign _08__R = ( _08__R0 );
  assign p31_R = ( p31_R0 );
  assign _07__R = ( _07__R0 );
  assign p20_R = ( p20_R0 );
  assign _06__R = ( _06__R0 );
  assign p13_R = ( p13_R0 );
  assign p02_R = ( p02_R0 );
  assign p32_R = ( p32_R0 );
  assign _04__R = ( _04__R0 );
  assign p21_R = ( p21_R0 );
  assign _05__R = ( _05__R0 );
  assign _03__R = ( _03__R0 );
  assign p10_R = ( p10_R0 );
  assign p03_R = ( p03_R0 );
  assign key_R = ( key_R0 ) | ( key_R1 );
  assign _02__R = ( _02__R0 );
  assign p33_R = ( p33_R0 );
  assign _01__R = ( _01__R0 );
  assign p22_R = ( p22_R0 );
  assign _00__R = ( _00__R0 );
  assign p11_R = ( p11_R0 );
  assign p00_R = ( p00_R0 );
  assign z3_R = ( z3_R0 );
  assign z2_R = ( z2_R0 );
  assign z1_R = ( z1_R0 );
  assign z0_R = ( z0_R0 );
  assign addedVar0_R = ( addedVar0_R0 );
  assign state_out_R = ( state_out_R0 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { k0_R , k1_R , k2_R , k3_R , s0_R , s1_R , s2_R , s3_R , clk_R  } = 0;
 // ground taints for unused wire slices
  wire zy_assert7 = ( state_out_r_flag == 0 )  || zy_end_sig ;
  assert state_out_asst (
    .clk( clk ),
    .test( zy_assert7 )
  );
endmodule

