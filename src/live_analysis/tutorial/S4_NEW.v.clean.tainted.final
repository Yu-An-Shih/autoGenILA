module S4 ( clk , in , INSTR_IN_ZY , zy_end_sig , rst_zy , in_T , in_S , out_R0 , out , in_R , out_T , out_S );
  input rst_zy;
  input zy_end_sig;
  integer i;
  input INSTR_IN_ZY;
  input clk;
  input [31:0] in;
  input [31:0] in_T ;
  output [31:0] in_R ;
  input [4:0] in_S ;
  output [31:0] out;
  output [31:0] out_T ;
  logic [31:0] out_T ;
  logic [31:0] out_R ;
  logic [4:0] out_S ;
  input [31:0] out_R0 ;
  output [4:0] out_S ;
  logic [31:0] in_R0 ;
// module: S
  S S_0 (
    .in_T (  in_T [31:24]  ),
    .in_R (  in_R0 [31:24]  ),
    .in_S (  in_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .zy_end_sig(zy_end_sig),
    .rst_zy(rst_zy),
    .out_T (  out_T [31:24]  ),
    .out_R0 (  out_R [31:24]  ),
    .out_S (  out_S  ),
    .out ( out[31:24] ),
    .in ( in[31:24] ),
    .clk ( clk )
  );
// module: S
  S S_1 (
    .in_T (  in_T [23:16]  ),
    .in_R (  in_R0 [23:16]  ),
    .in_S (  in_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .zy_end_sig(zy_end_sig),
    .rst_zy(rst_zy),
    .out_T (  out_T [23:16]  ),
    .out_R0 (  out_R [23:16]  ),
    .out_S (  out_S  ),
    .out ( out[23:16] ),
    .in ( in[23:16] ),
    .clk ( clk )
  );
// module: S
  S S_2 (
    .in_T (  in_T [15:8]  ),
    .in_R (  in_R0 [15:8]  ),
    .in_S (  in_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .zy_end_sig(zy_end_sig),
    .rst_zy(rst_zy),
    .out_T (  out_T [15:8]  ),
    .out_R0 (  out_R [15:8]  ),
    .out_S (  out_S  ),
    .out ( out[15:8] ),
    .in ( in[15:8] ),
    .clk ( clk )
  );
// module: S
  S S_3 (
    .in_T (  in_T [7:0]  ),
    .in_R (  in_R0 [7:0]  ),
    .in_S (  in_S  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .zy_end_sig(zy_end_sig),
    .rst_zy(rst_zy),
    .out_T (  out_T [7:0]  ),
    .out_R0 (  out_R [7:0]  ),
    .out_S (  out_S  ),
    .out ( out[7:0] ),
    .in ( in[7:0] ),
    .clk ( clk )
  );
  assign in_R = ( in_R0 );
  assign out_R = ( out_R0 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { clk_R  } = 0;
 // ground taints for unused wire slices
endmodule

