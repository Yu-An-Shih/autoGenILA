module expand_key_128 ( clk , in , rcon , INSTR_IN_ZY , zy_end_sig , rst_zy , out_1 , out_2 , rcon_R );
  input rst_zy;
  input zy_end_sig;
  integer i;
  input INSTR_IN_ZY;
  input clk;
  input [127:0] in;
  logic [31:0] k0;
  logic [31:0] k0a;
  logic [31:0]  k0a_PREV_VAL1 ;
  logic [31:0] k0b;
  logic [31:0] k1;
  logic [31:0] k1a;
  logic [31:0]  k1a_PREV_VAL1 ;
  logic [31:0] k1b;
  logic [31:0] k2;
  logic [31:0] k2a;
  logic [31:0]  k2a_PREV_VAL1 ;
  logic [31:0] k2b;
  logic [31:0] k3;
  logic [31:0] k3a;
  logic [31:0]  k3a_PREV_VAL1 ;
  logic [31:0] k3b;
  logic [31:0] k4a;
  output [127:0] out_1;
  logic [127:0] out_1 ;
  logic [127:0] out_1;
  logic [127:0]  out_1_PREV_VAL1 ;
  output [127:0] out_2;
  logic [127:0] out_2 ;
  input [7:0] rcon;
  logic [31:0] v0;
  logic [31:0] v1;
  logic [31:0] v2;
  logic [31:0] v3;
  always @(posedge clk)
      out_1 <= fangyuan0;
  logic [127:0] fangyuan0;
  assign fangyuan0 = { k0b, k1b, k2b, k3b };
  always @(posedge clk)
      k0a <= fangyuan1;
  logic [31:0] fangyuan1;
  assign fangyuan1 = { v0[31:24], in[119:96] };
  always @(posedge clk)
      k1a <= v1;
  always @(posedge clk)
      k2a <= v2;
  always @(posedge clk)
      k3a <= v3;
  assign v0[31:24] = in[127:120] ^ rcon;
  logic [31:0] fangyuan2;
  assign fangyuan2 = { v0[31:24], in[119:96] };
  assign v1 = fangyuan2 ^ in[95:64];
  assign v2 = v1 ^ in[63:32];
  assign v3 = v2 ^ in[31:0];
  assign k0b = k0a ^ k4a;
  assign k1b = k1a ^ k4a;
  assign k2b = k2a ^ k4a;
  assign k3b = k3a ^ k4a;
  logic [127:0] in_R0 ;
// module: S4
  S4 S4_0 (
    .in_T ( {  in_T [23:0] , in_T [31:24]  } ),
    .in_R ( {  in_R0 [23:0] , in_R0 [31:24]  } ),
    .in_S ( 0 ),
    .out_T (  k4a_T  ),
    .out_R0 (  k4a_R  ),
    .out_S (  k4a_S  ),
    .out ( k4a ),
    .clk ( clk ),
    .in ( { in[23:0], in[31:24] } )
  );
  assign k0 = in[127:96];
  assign k1 = in[95:64];
  assign k2 = in[63:32];
  assign k3 = in[31:0];
  assign out_2 = { k0b, k1b, k2b, k3b };
  assign v0[23:0] = in[119:96];
  assign in_R = ( in_R0 );
 // ground taints for floating regs
  assign k0a_R = 0;
  assign k1a_R = 0;
  assign k2a_R = 0;
  assign k3a_R = 0;
  assign out_1_R = 0;
 // ground taints for unused wires
  assign { fangyuan0_R , fangyuan1_R , fangyuan2_R , k0_R , k0b_R , k1_R , k1b_R , k2_R , k2b_R , k3_R , k3b_R , k4a_R , v0_R , v1_R , v2_R , v3_R , clk_R , rcon_R  } = 0;
  always @( posedge clk ) begin
    if( rst_zy ) out_1_PREV_VAL1 <= 0 ;
    if( INSTR_IN_ZY ) out_1_PREV_VAL1 <= out_1 ;
  end
  always @( posedge clk ) begin
    if( rst_zy ) k0a_PREV_VAL1 <= 0 ;
    if( INSTR_IN_ZY ) k0a_PREV_VAL1 <= k0a ;
  end
  always @( posedge clk ) begin
    if( rst_zy ) k1a_PREV_VAL1 <= 0 ;
    if( INSTR_IN_ZY ) k1a_PREV_VAL1 <= k1a ;
  end
  always @( posedge clk ) begin
    if( rst_zy ) k2a_PREV_VAL1 <= 0 ;
    if( INSTR_IN_ZY ) k2a_PREV_VAL1 <= k2a ;
  end
  always @( posedge clk ) begin
    if( rst_zy ) k3a_PREV_VAL1 <= 0 ;
    if( INSTR_IN_ZY ) k3a_PREV_VAL1 <= k3a ;
  end
 // ground taints for unused wire slices
  assign { in_R0 [127:32] } = 0;
  assert property( !INSTR_IN_ZY  || k0a_PREV_VAL1 == 0 );
  assert property( !INSTR_IN_ZY  || k1a_PREV_VAL1 == 0 );
  assert property( !INSTR_IN_ZY  || k2a_PREV_VAL1 == 0 );
  assert property( !INSTR_IN_ZY  || k3a_PREV_VAL1 == 0 );
  assert property( !INSTR_IN_ZY  || out_1_PREV_VAL1 == 0 );
endmodule
