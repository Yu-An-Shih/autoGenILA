module T ( clk , in , INSTR_IN_ZY , zy_end_sig , rst_zy , out , in_R );
  input rst_zy;
  input zy_end_sig;
  integer i;
  input INSTR_IN_ZY;
  input clk;
  input [7:0] in;
  output [31:0] out;
  logic [31:0] out ;
  assign out[15:8] = out[31:24] ^ out[7:0];
  logic [7:0] in_R0 ;
// module: S
  S s0 (
    .in_T (  in_T  ),
    .in_R (  in_R0  ),
    .in_S (  in_S  ),
    .out_T (  out_T [31:24]  ),
    .out_R0 (  out_R [31:24]  ),
    .out_S (  out_S  ),
    .out ( out[31:24] ),
    .clk ( clk ),
    .in ( in )
  );
  logic [7:0] in_R1 ;
// module: xS
  xS s4 (
    .in_T (  in_T  ),
    .in_R (  in_R1  ),
    .in_S (  in_S  ),
    .out_T (  out_T [7:0]  ),
    .out_R0 (  out_R [7:0]  ),
    .out_S (  out_S  ),
    .out ( out[7:0] ),
    .clk ( clk ),
    .in ( in )
  );
  assign out[23:16] = out[31:24];
  assign in_R = ( in_R0 ) | ( in_R1 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { clk_R  } = 0;
 // ground taints for unused wire slices
endmodule
