module XRAM ( addr_in , clk , data_in , rst , stb , wr , INSTR_IN_ZY , zy_end_sig , rst_zy , ack_R0 , addr_in_T , addr_in_S , data_in_T , data_in_S , data_out_R0 , rst_T , rst_S , stb_T , stb_S , wr_T , wr_S , ack , data_out , ack_T , ack_S , addr_in_R , data_in_R , data_out_T , data_out_S , rst_R , stb_R , wr_R );
  input rst_zy;
  input zy_end_sig;
  integer i;
  input INSTR_IN_ZY;
  logic [7:0] _000_;
  logic [7:0] _000__T ;
  logic [7:0] _000__R ;
  logic [4:0] _000__S ;
  logic [1:0] _001_;
  logic [1:0] _001__T ;
  logic [1:0] _001__R ;
  logic [4:0] _001__S ;
  logic [1:0] _002_;
  logic [1:0] _002__T ;
  logic [1:0] _002__R ;
  logic [4:0] _002__S ;
  logic [1:0] _003_;
  logic [1:0] _003__T ;
  logic [1:0] _003__R ;
  logic [4:0] _003__S ;
  logic [1:0] _004_;
  logic [1:0] _004__T ;
  logic [1:0] _004__R ;
  logic [4:0] _004__S ;
  logic [1:0] _005_;
  logic [1:0] _005__T ;
  logic [1:0] _005__R ;
  logic [4:0] _005__S ;
  logic [1:0] _006_;
  logic [1:0] _006__T ;
  logic [1:0] _006__R ;
  logic [4:0] _006__S ;
  logic [1:0] _007_;
  logic [1:0] _007__T ;
  logic [1:0] _007__R ;
  logic [4:0] _007__S ;
  logic [1:0] _008_;
  logic [1:0] _008__T ;
  logic [1:0] _008__R ;
  logic [4:0] _008__S ;
  logic _009_;
  logic _009__T ;
  logic _009__R ;
  logic [4:0] _009__S ;
  logic _010_;
  logic _010__T ;
  logic _010__R ;
  logic [4:0] _010__S ;
  logic _011_;
  logic _011__T ;
  logic _011__R ;
  logic [4:0] _011__S ;
  logic _012_;
  logic _012__T ;
  logic _012__R ;
  logic [4:0] _012__S ;
  logic _013_;
  logic _013__T ;
  logic _013__R ;
  logic [4:0] _013__S ;
  logic _014_;
  logic _014__T ;
  logic _014__R ;
  logic [4:0] _014__S ;
  logic _015_;
  logic _015__T ;
  logic _015__R ;
  logic [4:0] _015__S ;
  logic _016_;
  logic _016__T ;
  logic _016__R ;
  logic [4:0] _016__S ;
  logic _017_;
  logic _017__T ;
  logic _017__R ;
  logic [4:0] _017__S ;
  logic _018_;
  logic _018__T ;
  logic _018__R ;
  logic [4:0] _018__S ;
  logic _019_;
  logic _019__T ;
  logic _019__R ;
  logic [4:0] _019__S ;
  logic _020_;
  logic _020__T ;
  logic _020__R ;
  logic [4:0] _020__S ;
  logic _021_;
  logic _021__T ;
  logic _021__R ;
  logic [4:0] _021__S ;
  logic _022_;
  logic _022__T ;
  logic _022__R ;
  logic [4:0] _022__S ;
  logic _023_;
  logic _023__T ;
  logic _023__R ;
  logic [4:0] _023__S ;
  logic _024_;
  logic _024__T ;
  logic _024__R ;
  logic [4:0] _024__S ;
  logic _025_;
  logic _025__T ;
  logic _025__R ;
  logic [4:0] _025__S ;
  logic _026_;
  logic _026__T ;
  logic _026__R ;
  logic [4:0] _026__S ;
  logic _027_;
  logic _027__T ;
  logic _027__R ;
  logic [4:0] _027__S ;
  logic _028_;
  logic _028__T ;
  logic _028__R ;
  logic [4:0] _028__S ;
  logic _029_;
  logic _029__T ;
  logic _029__R ;
  logic [4:0] _029__S ;
  logic _030_;
  logic _030__T ;
  logic _030__R ;
  logic [4:0] _030__S ;
  logic _031_;
  logic _031__T ;
  logic _031__R ;
  logic [4:0] _031__S ;
  logic _032_;
  logic _032__T ;
  logic _032__R ;
  logic [4:0] _032__S ;
  logic _033_;
  logic _033__T ;
  logic _033__R ;
  logic [4:0] _033__S ;
  logic _034_;
  logic _034__T ;
  logic _034__R ;
  logic [4:0] _034__S ;
  logic _035_;
  logic _035__T ;
  logic _035__R ;
  logic [4:0] _035__S ;
  logic _036_;
  logic _036__T ;
  logic _036__R ;
  logic [4:0] _036__S ;
  logic _037_;
  logic _037__T ;
  logic _037__R ;
  logic [4:0] _037__S ;
  logic _038_;
  logic _038__T ;
  logic _038__R ;
  logic [4:0] _038__S ;
  logic _039_;
  logic _039__T ;
  logic _039__R ;
  logic [4:0] _039__S ;
  logic _040_;
  logic _040__T ;
  logic _040__R ;
  logic [4:0] _040__S ;
  logic _041_;
  logic _041__T ;
  logic _041__R ;
  logic [4:0] _041__S ;
  logic _042_;
  logic _042__T ;
  logic _042__R ;
  logic [4:0] _042__S ;
  logic _043_;
  logic _043__T ;
  logic _043__R ;
  logic [4:0] _043__S ;
  logic _044_;
  logic _044__T ;
  logic _044__R ;
  logic [4:0] _044__S ;
  logic _045_;
  logic _045__T ;
  logic _045__R ;
  logic [4:0] _045__S ;
  logic _046_;
  logic _046__T ;
  logic _046__R ;
  logic [4:0] _046__S ;
  logic _047_;
  logic _047__T ;
  logic _047__R ;
  logic [4:0] _047__S ;
  logic _048_;
  logic _048__T ;
  logic _048__R ;
  logic [4:0] _048__S ;
  logic _049_;
  logic _049__T ;
  logic _049__R ;
  logic [4:0] _049__S ;
  logic _050_;
  logic _050__T ;
  logic _050__R ;
  logic [4:0] _050__S ;
  logic _051_;
  logic _051__T ;
  logic _051__R ;
  logic [4:0] _051__S ;
  logic _052_;
  logic _052__T ;
  logic _052__R ;
  logic [4:0] _052__S ;
  logic _053_;
  logic _053__T ;
  logic _053__R ;
  logic [4:0] _053__S ;
  logic _054_;
  logic _054__T ;
  logic _054__R ;
  logic [4:0] _054__S ;
  logic _055_;
  logic _055__T ;
  logic _055__R ;
  logic [4:0] _055__S ;
  logic _056_;
  logic _056__T ;
  logic _056__R ;
  logic [4:0] _056__S ;
  logic _057_;
  logic _057__T ;
  logic _057__R ;
  logic [4:0] _057__S ;
  logic _058_;
  logic _058__T ;
  logic _058__R ;
  logic [4:0] _058__S ;
  logic _059_;
  logic _059__T ;
  logic _059__R ;
  logic [4:0] _059__S ;
  logic _060_;
  logic _060__T ;
  logic _060__R ;
  logic [4:0] _060__S ;
  logic _061_;
  logic _061__T ;
  logic _061__R ;
  logic [4:0] _061__S ;
  logic _062_;
  logic _062__T ;
  logic _062__R ;
  logic [4:0] _062__S ;
  logic _063_;
  logic _063__T ;
  logic _063__R ;
  logic [4:0] _063__S ;
  logic _064_;
  logic _064__T ;
  logic _064__R ;
  logic [4:0] _064__S ;
  logic _065_;
  logic _065__T ;
  logic _065__R ;
  logic [4:0] _065__S ;
  logic _066_;
  logic _066__T ;
  logic _066__R ;
  logic [4:0] _066__S ;
  logic _067_;
  logic _067__T ;
  logic _067__R ;
  logic [4:0] _067__S ;
  logic _068_;
  logic _068__T ;
  logic _068__R ;
  logic [4:0] _068__S ;
  logic _069_;
  logic _069__T ;
  logic _069__R ;
  logic [4:0] _069__S ;
  logic _070_;
  logic _070__T ;
  logic _070__R ;
  logic [4:0] _070__S ;
  logic _071_;
  logic _071__T ;
  logic _071__R ;
  logic [4:0] _071__S ;
  logic _072_;
  logic _072__T ;
  logic _072__R ;
  logic [4:0] _072__S ;
  logic _073_;
  logic _073__T ;
  logic _073__R ;
  logic [4:0] _073__S ;
  logic _074_;
  logic _074__T ;
  logic _074__R ;
  logic [4:0] _074__S ;
  logic _075_;
  logic _075__T ;
  logic _075__R ;
  logic [4:0] _075__S ;
  logic _076_;
  logic _076__T ;
  logic _076__R ;
  logic [4:0] _076__S ;
  logic _077_;
  logic _077__T ;
  logic _077__R ;
  logic [4:0] _077__S ;
  logic _078_;
  logic _078__T ;
  logic _078__R ;
  logic [4:0] _078__S ;
  logic _079_;
  logic _079__T ;
  logic _079__R ;
  logic [4:0] _079__S ;
  logic _080_;
  logic _080__T ;
  logic _080__R ;
  logic [4:0] _080__S ;
  output ack;
  logic ack ;
  output ack_T ;
  logic ack_T ;
  logic ack_R ;
  logic [4:0] ack_S ;
  input ack_R0 ;
  output [4:0] ack_S ;
  input [15:0] addr_in;
  input [15:0] addr_in_T ;
  output [15:0] addr_in_R ;
  input [4:0] addr_in_S ;
  input clk;
  input [7:0] data_in;
  input [7:0] data_in_T ;
  output [7:0] data_in_R ;
  input [4:0] data_in_S ;
  output [7:0] data_out;
  logic [7:0] data_out ;
  output [7:0] data_out_T ;
  logic [7:0] data_out_T ;
  logic [7:0] data_out_R ;
  logic [4:0] data_out_S ;
  input [7:0] data_out_R0 ;
  output [4:0] data_out_S ;
  logic [7:0] data_out;
  logic [7:0]  data_out_T ;
  logic [7:0]  data_out_DOES_KEEP = 0 ;
  logic data_out_t_flag ;
  logic data_out_r_flag ;
  assign data_out_S = 5 ;
  logic [1:0] mem0;
  logic [1:0]  mem0_T ;
  logic [1:0]  mem0_DOES_KEEP = 0 ;
  logic [1:0]  mem0_R ;
  logic [4:0] mem0_S ;
  logic mem0_t_flag ;
  logic mem0_r_flag ;
  assign mem0_S = 6 ;
  logic [1:0] mem1;
  logic [1:0]  mem1_T ;
  logic [1:0]  mem1_DOES_KEEP = 0 ;
  logic [1:0]  mem1_R ;
  logic [4:0] mem1_S ;
  logic mem1_t_flag ;
  logic mem1_r_flag ;
  assign mem1_S = 7 ;
  logic [1:0] mem2;
  logic [1:0]  mem2_T ;
  logic [1:0]  mem2_DOES_KEEP = 0 ;
  logic [1:0]  mem2_R ;
  logic [4:0] mem2_S ;
  logic mem2_t_flag ;
  logic mem2_r_flag ;
  assign mem2_S = 8 ;
  logic [1:0] mem3;
  logic [1:0]  mem3_T ;
  logic [1:0]  mem3_DOES_KEEP = 0 ;
  logic [1:0]  mem3_R ;
  logic [4:0] mem3_S ;
  logic mem3_t_flag ;
  logic mem3_r_flag ;
  assign mem3_S = 9 ;
  logic [1:0] mem4;
  logic [1:0]  mem4_T ;
  logic [1:0]  mem4_DOES_KEEP = 0 ;
  logic [1:0]  mem4_R ;
  logic [4:0] mem4_S ;
  logic mem4_t_flag ;
  logic mem4_r_flag ;
  assign mem4_S = 10 ;
  logic [1:0] mem5;
  logic [1:0]  mem5_T ;
  logic [1:0]  mem5_DOES_KEEP = 0 ;
  logic [1:0]  mem5_R ;
  logic [4:0] mem5_S ;
  logic mem5_t_flag ;
  logic mem5_r_flag ;
  assign mem5_S = 11 ;
  logic [1:0] mem6;
  logic [1:0]  mem6_T ;
  logic [1:0]  mem6_DOES_KEEP = 0 ;
  logic [1:0]  mem6_R ;
  logic [4:0] mem6_S ;
  logic mem6_t_flag ;
  logic mem6_r_flag ;
  assign mem6_S = 12 ;
  logic [1:0] mem7;
  logic [1:0]  mem7_T ;
  logic [1:0]  mem7_DOES_KEEP = 0 ;
  logic [1:0]  mem7_R ;
  logic [4:0] mem7_S ;
  logic mem7_t_flag ;
  logic mem7_r_flag ;
  assign mem7_S = 13 ;
  input rst;
  input rst_T ;
  output rst_R ;
  input [4:0] rst_S ;
  input stb;
  input stb_T ;
  output stb_R ;
  input [4:0] stb_S ;
  input wr;
  input wr_T ;
  output wr_R ;
  input [4:0] wr_S ;
  always @(posedge clk)
      data_out <= _000_;
  logic [7:0] _000__R0 ;
  assign _000__R0 = _000__T & { 8{ data_out_S != _000__S }} ;
  always @( posedge clk )
      data_out_T 		<= rst_zy ? 0 : ( _000__T & ( { 8{ data_out_S != _000__S }} ));
  always @( posedge clk )
      data_out_t_flag 	<= rst_zy ? 0 : data_out_t_flag ? 1 : | _000__T & ( data_out_S != _000__S );
  always @( posedge clk )
      data_out_r_flag 	<= rst_zy ? 0 : data_out_r_flag ? 1 : data_out_t_flag ? 0 : ( | data_out_R ) ;
  always @(posedge clk)
    data_out_DOES_KEEP <= rst_zy ? 0 : data_out_DOES_KEEP || (INSTR_IN_ZY && data_out_S == _000__S) ;
  always @(posedge clk)
      mem0 <= _001_;
  logic [1:0] _001__R0 ;
  assign _001__R0 = _001__T & { 2{ mem0_S != _001__S }} ;
  always @( posedge clk )
      mem0_T 		<= rst_zy ? 0 : ( _001__T & ( { 2{ mem0_S != _001__S }} ));
  always @( posedge clk )
      mem0_t_flag 	<= rst_zy ? 0 : mem0_t_flag ? 1 : | _001__T & ( mem0_S != _001__S );
  always @( posedge clk )
      mem0_r_flag 	<= rst_zy ? 0 : mem0_r_flag ? 1 : mem0_t_flag ? 0 : ( | mem0_R ) ;
  always @(posedge clk)
    mem0_DOES_KEEP <= rst_zy ? 0 : mem0_DOES_KEEP || (INSTR_IN_ZY && mem0_S == _001__S) ;
  always @(posedge clk)
      mem1 <= _002_;
  logic [1:0] _002__R0 ;
  assign _002__R0 = _002__T & { 2{ mem1_S != _002__S }} ;
  always @( posedge clk )
      mem1_T 		<= rst_zy ? 0 : ( _002__T & ( { 2{ mem1_S != _002__S }} ));
  always @( posedge clk )
      mem1_t_flag 	<= rst_zy ? 0 : mem1_t_flag ? 1 : | _002__T & ( mem1_S != _002__S );
  always @( posedge clk )
      mem1_r_flag 	<= rst_zy ? 0 : mem1_r_flag ? 1 : mem1_t_flag ? 0 : ( | mem1_R ) ;
  always @(posedge clk)
    mem1_DOES_KEEP <= rst_zy ? 0 : mem1_DOES_KEEP || (INSTR_IN_ZY && mem1_S == _002__S) ;
  always @(posedge clk)
      mem2 <= _003_;
  logic [1:0] _003__R0 ;
  assign _003__R0 = _003__T & { 2{ mem2_S != _003__S }} ;
  always @( posedge clk )
      mem2_T 		<= rst_zy ? 0 : ( _003__T & ( { 2{ mem2_S != _003__S }} ));
  always @( posedge clk )
      mem2_t_flag 	<= rst_zy ? 0 : mem2_t_flag ? 1 : | _003__T & ( mem2_S != _003__S );
  always @( posedge clk )
      mem2_r_flag 	<= rst_zy ? 0 : mem2_r_flag ? 1 : mem2_t_flag ? 0 : ( | mem2_R ) ;
  always @(posedge clk)
    mem2_DOES_KEEP <= rst_zy ? 0 : mem2_DOES_KEEP || (INSTR_IN_ZY && mem2_S == _003__S) ;
  always @(posedge clk)
      mem3 <= _004_;
  logic [1:0] _004__R0 ;
  assign _004__R0 = _004__T & { 2{ mem3_S != _004__S }} ;
  always @( posedge clk )
      mem3_T 		<= rst_zy ? 0 : ( _004__T & ( { 2{ mem3_S != _004__S }} ));
  always @( posedge clk )
      mem3_t_flag 	<= rst_zy ? 0 : mem3_t_flag ? 1 : | _004__T & ( mem3_S != _004__S );
  always @( posedge clk )
      mem3_r_flag 	<= rst_zy ? 0 : mem3_r_flag ? 1 : mem3_t_flag ? 0 : ( | mem3_R ) ;
  always @(posedge clk)
    mem3_DOES_KEEP <= rst_zy ? 0 : mem3_DOES_KEEP || (INSTR_IN_ZY && mem3_S == _004__S) ;
  always @(posedge clk)
      mem4 <= _005_;
  logic [1:0] _005__R0 ;
  assign _005__R0 = _005__T & { 2{ mem4_S != _005__S }} ;
  always @( posedge clk )
      mem4_T 		<= rst_zy ? 0 : ( _005__T & ( { 2{ mem4_S != _005__S }} ));
  always @( posedge clk )
      mem4_t_flag 	<= rst_zy ? 0 : mem4_t_flag ? 1 : | _005__T & ( mem4_S != _005__S );
  always @( posedge clk )
      mem4_r_flag 	<= rst_zy ? 0 : mem4_r_flag ? 1 : mem4_t_flag ? 0 : ( | mem4_R ) ;
  always @(posedge clk)
    mem4_DOES_KEEP <= rst_zy ? 0 : mem4_DOES_KEEP || (INSTR_IN_ZY && mem4_S == _005__S) ;
  always @(posedge clk)
      mem5 <= _006_;
  logic [1:0] _006__R0 ;
  assign _006__R0 = _006__T & { 2{ mem5_S != _006__S }} ;
  always @( posedge clk )
      mem5_T 		<= rst_zy ? 0 : ( _006__T & ( { 2{ mem5_S != _006__S }} ));
  always @( posedge clk )
      mem5_t_flag 	<= rst_zy ? 0 : mem5_t_flag ? 1 : | _006__T & ( mem5_S != _006__S );
  always @( posedge clk )
      mem5_r_flag 	<= rst_zy ? 0 : mem5_r_flag ? 1 : mem5_t_flag ? 0 : ( | mem5_R ) ;
  always @(posedge clk)
    mem5_DOES_KEEP <= rst_zy ? 0 : mem5_DOES_KEEP || (INSTR_IN_ZY && mem5_S == _006__S) ;
  always @(posedge clk)
      mem6 <= _007_;
  logic [1:0] _007__R0 ;
  assign _007__R0 = _007__T & { 2{ mem6_S != _007__S }} ;
  always @( posedge clk )
      mem6_T 		<= rst_zy ? 0 : ( _007__T & ( { 2{ mem6_S != _007__S }} ));
  always @( posedge clk )
      mem6_t_flag 	<= rst_zy ? 0 : mem6_t_flag ? 1 : | _007__T & ( mem6_S != _007__S );
  always @( posedge clk )
      mem6_r_flag 	<= rst_zy ? 0 : mem6_r_flag ? 1 : mem6_t_flag ? 0 : ( | mem6_R ) ;
  always @(posedge clk)
    mem6_DOES_KEEP <= rst_zy ? 0 : mem6_DOES_KEEP || (INSTR_IN_ZY && mem6_S == _007__S) ;
  always @(posedge clk)
      mem7 <= _008_;
  logic [1:0] _008__R0 ;
  assign _008__R0 = _008__T & { 2{ mem7_S != _008__S }} ;
  always @( posedge clk )
      mem7_T 		<= rst_zy ? 0 : ( _008__T & ( { 2{ mem7_S != _008__S }} ));
  always @( posedge clk )
      mem7_t_flag 	<= rst_zy ? 0 : mem7_t_flag ? 1 : | _008__T & ( mem7_S != _008__S );
  always @( posedge clk )
      mem7_r_flag 	<= rst_zy ? 0 : mem7_r_flag ? 1 : mem7_t_flag ? 0 : ( | mem7_R ) ;
  always @(posedge clk)
    mem7_DOES_KEEP <= rst_zy ? 0 : mem7_DOES_KEEP || (INSTR_IN_ZY && mem7_S == _008__S) ;
  assign _009_ = wr ? data_out[7] : _080_;
  logic [0:0] wr_R0 ;
  assign wr_R0 = ( | _009__R ) && data_out[7] != _080_ ;
  assign _009__T = wr ? ( { 1{ wr_T  }} | data_out_T [7] ) : ( { 1{ wr_T  }} | _080__T );
  assign _009__S = wr ? data_out_S : _080__S ;
  logic [7:0] data_out_R1 ;
  assign data_out_R1 [7] = { 1{ wr }} & ( _009__R );
  logic [0:0] _080__R0 ;
  assign _080__R0 = { 1{ !wr }} & ( _009__R );
  assign _010_ = stb ? _009_ : data_out[7];
  logic [0:0] stb_R0 ;
  assign stb_R0 = ( | _010__R ) && _009_ != data_out[7] ;
  assign _010__T = stb ? ( { 1{ stb_T  }} | _009__T ) : ( { 1{ stb_T  }} | data_out_T [7] );
  assign _010__S = stb ? _009__S : data_out_S ;
  assign { data_out_R1 [0], data_out_R1 [1], data_out_R1 [2], data_out_R1 [3], data_out_R1 [4], data_out_R1 [5], data_out_R1 [6] } = 0;
  logic [0:0] _009__R0 ;
  assign _009__R0 = { 1{ stb }} & ( _010__R );
  logic [7:0] data_out_R2 ;
  assign data_out_R2 [7] = { 1{ !stb }} & ( _010__R );
  assign _000_[7] = rst ? data_out[7] : _010_;
  logic [0:0] rst_R0 ;
  assign rst_R0 = ( | _000__R [7] ) && data_out[7] != _010_ ;
  assign _000__T [7] = rst ? ( { 1{ rst_T  }} | data_out_T [7] ) : ( { 1{ rst_T  }} | _010__T );
  assign _000__S = rst ? data_out_S : _010__S ;
  assign { data_out_R2 [0], data_out_R2 [1], data_out_R2 [2], data_out_R2 [3], data_out_R2 [4], data_out_R2 [5], data_out_R2 [6] } = 0;
  logic [7:0] data_out_R3 ;
  assign data_out_R3 [7] = { 1{ rst }} & ( _000__R [7] );
  logic [0:0] _010__R0 ;
  assign _010__R0 = { 1{ !rst }} & ( _000__R [7] );
  assign _011_ = wr ? data_out[6] : _079_;
  logic [0:0] wr_R1 ;
  assign wr_R1 = ( | _011__R ) && data_out[6] != _079_ ;
  assign _011__T = wr ? ( { 1{ wr_T  }} | data_out_T [6] ) : ( { 1{ wr_T  }} | _079__T );
  assign _011__S = wr ? data_out_S : _079__S ;
  assign data_out_R3 [6] = { 1{ wr }} & ( _011__R );
  logic [0:0] _079__R0 ;
  assign _079__R0 = { 1{ !wr }} & ( _011__R );
  assign _012_ = stb ? _011_ : data_out[6];
  logic [0:0] stb_R1 ;
  assign stb_R1 = ( | _012__R ) && _011_ != data_out[6] ;
  assign _012__T = stb ? ( { 1{ stb_T  }} | _011__T ) : ( { 1{ stb_T  }} | data_out_T [6] );
  assign _012__S = stb ? _011__S : data_out_S ;
  assign { data_out_R3 [0], data_out_R3 [1], data_out_R3 [2], data_out_R3 [3], data_out_R3 [4], data_out_R3 [5] } = 0;
  logic [0:0] _011__R0 ;
  assign _011__R0 = { 1{ stb }} & ( _012__R );
  logic [7:0] data_out_R4 ;
  assign data_out_R4 [6] = { 1{ !stb }} & ( _012__R );
  assign _000_[6] = rst ? data_out[6] : _012_;
  logic [0:0] rst_R1 ;
  assign rst_R1 = ( | _000__R [6] ) && data_out[6] != _012_ ;
  assign _000__T [6] = rst ? ( { 1{ rst_T  }} | data_out_T [6] ) : ( { 1{ rst_T  }} | _012__T );
  assign _000__S = rst ? data_out_S : _012__S ;
  assign { data_out_R4 [0], data_out_R4 [1], data_out_R4 [2], data_out_R4 [3], data_out_R4 [4], data_out_R4 [5], data_out_R4 [7:7] } = 0;
  logic [7:0] data_out_R5 ;
  assign data_out_R5 [6] = { 1{ rst }} & ( _000__R [6] );
  logic [0:0] _012__R0 ;
  assign _012__R0 = { 1{ !rst }} & ( _000__R [6] );
  assign _013_ = wr ? data_out[5] : _078_;
  logic [0:0] wr_R2 ;
  assign wr_R2 = ( | _013__R ) && data_out[5] != _078_ ;
  assign _013__T = wr ? ( { 1{ wr_T  }} | data_out_T [5] ) : ( { 1{ wr_T  }} | _078__T );
  assign _013__S = wr ? data_out_S : _078__S ;
  assign data_out_R5 [5] = { 1{ wr }} & ( _013__R );
  logic [0:0] _078__R0 ;
  assign _078__R0 = { 1{ !wr }} & ( _013__R );
  assign _014_ = stb ? _013_ : data_out[5];
  logic [0:0] stb_R2 ;
  assign stb_R2 = ( | _014__R ) && _013_ != data_out[5] ;
  assign _014__T = stb ? ( { 1{ stb_T  }} | _013__T ) : ( { 1{ stb_T  }} | data_out_T [5] );
  assign _014__S = stb ? _013__S : data_out_S ;
  assign { data_out_R5 [0], data_out_R5 [1], data_out_R5 [2], data_out_R5 [3], data_out_R5 [4], data_out_R5 [7:7] } = 0;
  logic [0:0] _013__R0 ;
  assign _013__R0 = { 1{ stb }} & ( _014__R );
  logic [7:0] data_out_R6 ;
  assign data_out_R6 [5] = { 1{ !stb }} & ( _014__R );
  assign _000_[5] = rst ? data_out[5] : _014_;
  logic [0:0] rst_R2 ;
  assign rst_R2 = ( | _000__R [5] ) && data_out[5] != _014_ ;
  assign _000__T [5] = rst ? ( { 1{ rst_T  }} | data_out_T [5] ) : ( { 1{ rst_T  }} | _014__T );
  assign _000__S = rst ? data_out_S : _014__S ;
  assign { data_out_R6 [0], data_out_R6 [1], data_out_R6 [2], data_out_R6 [3], data_out_R6 [4], data_out_R6 [7:6] } = 0;
  logic [7:0] data_out_R7 ;
  assign data_out_R7 [5] = { 1{ rst }} & ( _000__R [5] );
  logic [0:0] _014__R0 ;
  assign _014__R0 = { 1{ !rst }} & ( _000__R [5] );
  assign _015_ = wr ? data_out[4] : _077_;
  logic [0:0] wr_R3 ;
  assign wr_R3 = ( | _015__R ) && data_out[4] != _077_ ;
  assign _015__T = wr ? ( { 1{ wr_T  }} | data_out_T [4] ) : ( { 1{ wr_T  }} | _077__T );
  assign _015__S = wr ? data_out_S : _077__S ;
  assign data_out_R7 [4] = { 1{ wr }} & ( _015__R );
  logic [0:0] _077__R0 ;
  assign _077__R0 = { 1{ !wr }} & ( _015__R );
  assign _016_ = stb ? _015_ : data_out[4];
  logic [0:0] stb_R3 ;
  assign stb_R3 = ( | _016__R ) && _015_ != data_out[4] ;
  assign _016__T = stb ? ( { 1{ stb_T  }} | _015__T ) : ( { 1{ stb_T  }} | data_out_T [4] );
  assign _016__S = stb ? _015__S : data_out_S ;
  assign { data_out_R7 [0], data_out_R7 [1], data_out_R7 [2], data_out_R7 [3], data_out_R7 [7:6] } = 0;
  logic [0:0] _015__R0 ;
  assign _015__R0 = { 1{ stb }} & ( _016__R );
  logic [7:0] data_out_R8 ;
  assign data_out_R8 [4] = { 1{ !stb }} & ( _016__R );
  assign _000_[4] = rst ? data_out[4] : _016_;
  logic [0:0] rst_R3 ;
  assign rst_R3 = ( | _000__R [4] ) && data_out[4] != _016_ ;
  assign _000__T [4] = rst ? ( { 1{ rst_T  }} | data_out_T [4] ) : ( { 1{ rst_T  }} | _016__T );
  assign _000__S = rst ? data_out_S : _016__S ;
  assign { data_out_R8 [0], data_out_R8 [1], data_out_R8 [2], data_out_R8 [3], data_out_R8 [7:5] } = 0;
  logic [7:0] data_out_R9 ;
  assign data_out_R9 [4] = { 1{ rst }} & ( _000__R [4] );
  logic [0:0] _016__R0 ;
  assign _016__R0 = { 1{ !rst }} & ( _000__R [4] );
  assign _017_ = wr ? data_out[3] : _076_;
  logic [0:0] wr_R4 ;
  assign wr_R4 = ( | _017__R ) && data_out[3] != _076_ ;
  assign _017__T = wr ? ( { 1{ wr_T  }} | data_out_T [3] ) : ( { 1{ wr_T  }} | _076__T );
  assign _017__S = wr ? data_out_S : _076__S ;
  assign data_out_R9 [3] = { 1{ wr }} & ( _017__R );
  logic [0:0] _076__R0 ;
  assign _076__R0 = { 1{ !wr }} & ( _017__R );
  assign _018_ = stb ? _017_ : data_out[3];
  logic [0:0] stb_R4 ;
  assign stb_R4 = ( | _018__R ) && _017_ != data_out[3] ;
  assign _018__T = stb ? ( { 1{ stb_T  }} | _017__T ) : ( { 1{ stb_T  }} | data_out_T [3] );
  assign _018__S = stb ? _017__S : data_out_S ;
  assign { data_out_R9 [0], data_out_R9 [1], data_out_R9 [2], data_out_R9 [7:5] } = 0;
  logic [0:0] _017__R0 ;
  assign _017__R0 = { 1{ stb }} & ( _018__R );
  logic [7:0] data_out_R10 ;
  assign data_out_R10 [3] = { 1{ !stb }} & ( _018__R );
  assign _000_[3] = rst ? data_out[3] : _018_;
  logic [0:0] rst_R4 ;
  assign rst_R4 = ( | _000__R [3] ) && data_out[3] != _018_ ;
  assign _000__T [3] = rst ? ( { 1{ rst_T  }} | data_out_T [3] ) : ( { 1{ rst_T  }} | _018__T );
  assign _000__S = rst ? data_out_S : _018__S ;
  assign { data_out_R10 [0], data_out_R10 [1], data_out_R10 [2], data_out_R10 [7:4] } = 0;
  logic [7:0] data_out_R11 ;
  assign data_out_R11 [3] = { 1{ rst }} & ( _000__R [3] );
  logic [0:0] _018__R0 ;
  assign _018__R0 = { 1{ !rst }} & ( _000__R [3] );
  assign _019_ = wr ? data_out[2] : _075_;
  logic [0:0] wr_R5 ;
  assign wr_R5 = ( | _019__R ) && data_out[2] != _075_ ;
  assign _019__T = wr ? ( { 1{ wr_T  }} | data_out_T [2] ) : ( { 1{ wr_T  }} | _075__T );
  assign _019__S = wr ? data_out_S : _075__S ;
  assign data_out_R11 [2] = { 1{ wr }} & ( _019__R );
  logic [0:0] _075__R0 ;
  assign _075__R0 = { 1{ !wr }} & ( _019__R );
  assign _020_ = stb ? _019_ : data_out[2];
  logic [0:0] stb_R5 ;
  assign stb_R5 = ( | _020__R ) && _019_ != data_out[2] ;
  assign _020__T = stb ? ( { 1{ stb_T  }} | _019__T ) : ( { 1{ stb_T  }} | data_out_T [2] );
  assign _020__S = stb ? _019__S : data_out_S ;
  assign { data_out_R11 [0], data_out_R11 [1], data_out_R11 [7:4] } = 0;
  logic [0:0] _019__R0 ;
  assign _019__R0 = { 1{ stb }} & ( _020__R );
  logic [7:0] data_out_R12 ;
  assign data_out_R12 [2] = { 1{ !stb }} & ( _020__R );
  assign _000_[2] = rst ? data_out[2] : _020_;
  logic [0:0] rst_R5 ;
  assign rst_R5 = ( | _000__R [2] ) && data_out[2] != _020_ ;
  assign _000__T [2] = rst ? ( { 1{ rst_T  }} | data_out_T [2] ) : ( { 1{ rst_T  }} | _020__T );
  assign _000__S = rst ? data_out_S : _020__S ;
  assign { data_out_R12 [0], data_out_R12 [1], data_out_R12 [7:3] } = 0;
  logic [7:0] data_out_R13 ;
  assign data_out_R13 [2] = { 1{ rst }} & ( _000__R [2] );
  logic [0:0] _020__R0 ;
  assign _020__R0 = { 1{ !rst }} & ( _000__R [2] );
  assign _021_ = wr ? data_out[1] : _074_;
  logic [0:0] wr_R6 ;
  assign wr_R6 = ( | _021__R ) && data_out[1] != _074_ ;
  assign _021__T = wr ? ( { 1{ wr_T  }} | data_out_T [1] ) : ( { 1{ wr_T  }} | _074__T );
  assign _021__S = wr ? data_out_S : _074__S ;
  assign data_out_R13 [1] = { 1{ wr }} & ( _021__R );
  logic [0:0] _074__R0 ;
  assign _074__R0 = { 1{ !wr }} & ( _021__R );
  assign _022_ = stb ? _021_ : data_out[1];
  logic [0:0] stb_R6 ;
  assign stb_R6 = ( | _022__R ) && _021_ != data_out[1] ;
  assign _022__T = stb ? ( { 1{ stb_T  }} | _021__T ) : ( { 1{ stb_T  }} | data_out_T [1] );
  assign _022__S = stb ? _021__S : data_out_S ;
  assign { data_out_R13 [0], data_out_R13 [7:3] } = 0;
  logic [0:0] _021__R0 ;
  assign _021__R0 = { 1{ stb }} & ( _022__R );
  logic [7:0] data_out_R14 ;
  assign data_out_R14 [1] = { 1{ !stb }} & ( _022__R );
  assign _000_[1] = rst ? data_out[1] : _022_;
  logic [0:0] rst_R6 ;
  assign rst_R6 = ( | _000__R [1] ) && data_out[1] != _022_ ;
  assign _000__T [1] = rst ? ( { 1{ rst_T  }} | data_out_T [1] ) : ( { 1{ rst_T  }} | _022__T );
  assign _000__S = rst ? data_out_S : _022__S ;
  assign { data_out_R14 [0], data_out_R14 [7:2] } = 0;
  logic [7:0] data_out_R15 ;
  assign data_out_R15 [1] = { 1{ rst }} & ( _000__R [1] );
  logic [0:0] _022__R0 ;
  assign _022__R0 = { 1{ !rst }} & ( _000__R [1] );
  assign _023_ = wr ? data_out[0] : _073_;
  logic [0:0] wr_R7 ;
  assign wr_R7 = ( | _023__R ) && data_out[0] != _073_ ;
  assign _023__T = wr ? ( { 1{ wr_T  }} | data_out_T [0] ) : ( { 1{ wr_T  }} | _073__T );
  assign _023__S = wr ? data_out_S : _073__S ;
  assign data_out_R15 [0] = { 1{ wr }} & ( _023__R );
  logic [0:0] _073__R0 ;
  assign _073__R0 = { 1{ !wr }} & ( _023__R );
  assign _024_ = stb ? _023_ : data_out[0];
  logic [0:0] stb_R7 ;
  assign stb_R7 = ( | _024__R ) && _023_ != data_out[0] ;
  assign _024__T = stb ? ( { 1{ stb_T  }} | _023__T ) : ( { 1{ stb_T  }} | data_out_T [0] );
  assign _024__S = stb ? _023__S : data_out_S ;
  assign { data_out_R15 [7:2] } = 0;
  logic [0:0] _023__R0 ;
  assign _023__R0 = { 1{ stb }} & ( _024__R );
  logic [7:0] data_out_R16 ;
  assign data_out_R16 [0] = { 1{ !stb }} & ( _024__R );
  assign _000_[0] = rst ? data_out[0] : _024_;
  logic [0:0] rst_R7 ;
  assign rst_R7 = ( | _000__R [0] ) && data_out[0] != _024_ ;
  assign _000__T [0] = rst ? ( { 1{ rst_T  }} | data_out_T [0] ) : ( { 1{ rst_T  }} | _024__T );
  assign _000__S = rst ? data_out_S : _024__S ;
  assign { data_out_R16 [7:1] } = 0;
  logic [7:0] data_out_R17 ;
  assign data_out_R17 [0] = { 1{ rst }} & ( _000__R [0] );
  logic [0:0] _024__R0 ;
  assign _024__R0 = { 1{ !rst }} & ( _000__R [0] );
  assign _025_ = addr_in[0] ? mem7[0] : data_in[7];
  logic [15:0] addr_in_R0 ;
  assign addr_in_R0 [0] = ( | _025__R ) && mem7[0] != data_in[7] ;
  assign _025__T = addr_in[0] ? ( { 1{ addr_in_T  [0] }} | mem7_T [0] ) : ( { 1{ addr_in_T  [0] }} | data_in_T [7] );
  assign _025__S = addr_in[0] ? mem7_S : data_in_S ;
  logic [1:0] mem7_R0 ;
  assign mem7_R0 [0] = { 1{ addr_in[0] }} & ( _025__R );
  logic [7:0] data_in_R0 ;
  assign data_in_R0 [7] = { 1{ !addr_in[0] }} & ( _025__R );
  assign _026_ = wr ? _025_ : mem7[0];
  logic [0:0] wr_R8 ;
  assign wr_R8 = ( | _026__R ) && _025_ != mem7[0] ;
  assign _026__T = wr ? ( { 1{ wr_T  }} | _025__T ) : ( { 1{ wr_T  }} | mem7_T [0] );
  assign _026__S = wr ? _025__S : mem7_S ;
  assign { mem7_R0 [1:1] } = 0;
  logic [0:0] _025__R0 ;
  assign _025__R0 = { 1{ wr }} & ( _026__R );
  logic [1:0] mem7_R1 ;
  assign mem7_R1 [0] = { 1{ !wr }} & ( _026__R );
  assign _027_ = stb ? _026_ : mem7[0];
  logic [0:0] stb_R8 ;
  assign stb_R8 = ( | _027__R ) && _026_ != mem7[0] ;
  assign _027__T = stb ? ( { 1{ stb_T  }} | _026__T ) : ( { 1{ stb_T  }} | mem7_T [0] );
  assign _027__S = stb ? _026__S : mem7_S ;
  assign { mem7_R1 [1:1] } = 0;
  logic [0:0] _026__R0 ;
  assign _026__R0 = { 1{ stb }} & ( _027__R );
  logic [1:0] mem7_R2 ;
  assign mem7_R2 [0] = { 1{ !stb }} & ( _027__R );
  assign _008_[0] = rst ? 1'b0 : _027_;
  logic [0:0] rst_R8 ;
  assign rst_R8 = ( | _008__R [0] ) && 1'b0 != _027_ ;
  logic [0:0] _027__R0 ;
  assign _027__R0 = { 1{ !rst }} & ( _008__R [0] );
  assign _008__T [0] = rst ? { 1{ | rst_T  }} : ( { 1{ | rst_T  }} | _027__T );
  assign _008__S = rst ? rst_S : _027__S ;
  assign _028_ = addr_in[0] ? mem6[0] : data_in[6];
  assign { addr_in_R0 [15:1] } = 0;
  logic [15:0] addr_in_R1 ;
  assign addr_in_R1 [0] = ( | _028__R ) && mem6[0] != data_in[6] ;
  assign _028__T = addr_in[0] ? ( { 1{ addr_in_T  [0] }} | mem6_T [0] ) : ( { 1{ addr_in_T  [0] }} | data_in_T [6] );
  assign _028__S = addr_in[0] ? mem6_S : data_in_S ;
  logic [1:0] mem6_R0 ;
  assign mem6_R0 [0] = { 1{ addr_in[0] }} & ( _028__R );
  assign data_in_R0 [6] = { 1{ !addr_in[0] }} & ( _028__R );
  assign _029_ = wr ? _028_ : mem6[0];
  logic [0:0] wr_R9 ;
  assign wr_R9 = ( | _029__R ) && _028_ != mem6[0] ;
  assign _029__T = wr ? ( { 1{ wr_T  }} | _028__T ) : ( { 1{ wr_T  }} | mem6_T [0] );
  assign _029__S = wr ? _028__S : mem6_S ;
  assign { mem6_R0 [1:1] } = 0;
  logic [0:0] _028__R0 ;
  assign _028__R0 = { 1{ wr }} & ( _029__R );
  logic [1:0] mem6_R1 ;
  assign mem6_R1 [0] = { 1{ !wr }} & ( _029__R );
  assign _030_ = stb ? _029_ : mem6[0];
  logic [0:0] stb_R9 ;
  assign stb_R9 = ( | _030__R ) && _029_ != mem6[0] ;
  assign _030__T = stb ? ( { 1{ stb_T  }} | _029__T ) : ( { 1{ stb_T  }} | mem6_T [0] );
  assign _030__S = stb ? _029__S : mem6_S ;
  assign { mem6_R1 [1:1] } = 0;
  logic [0:0] _029__R0 ;
  assign _029__R0 = { 1{ stb }} & ( _030__R );
  logic [1:0] mem6_R2 ;
  assign mem6_R2 [0] = { 1{ !stb }} & ( _030__R );
  assign _007_[0] = rst ? 1'b0 : _030_;
  logic [0:0] rst_R9 ;
  assign rst_R9 = ( | _007__R [0] ) && 1'b0 != _030_ ;
  logic [0:0] _030__R0 ;
  assign _030__R0 = { 1{ !rst }} & ( _007__R [0] );
  assign _007__T [0] = rst ? { 1{ | rst_T  }} : ( { 1{ | rst_T  }} | _030__T );
  assign _007__S = rst ? rst_S : _030__S ;
  assign _031_ = addr_in[0] ? mem5[0] : data_in[5];
  assign { addr_in_R1 [15:1] } = 0;
  logic [15:0] addr_in_R2 ;
  assign addr_in_R2 [0] = ( | _031__R ) && mem5[0] != data_in[5] ;
  assign _031__T = addr_in[0] ? ( { 1{ addr_in_T  [0] }} | mem5_T [0] ) : ( { 1{ addr_in_T  [0] }} | data_in_T [5] );
  assign _031__S = addr_in[0] ? mem5_S : data_in_S ;
  logic [1:0] mem5_R0 ;
  assign mem5_R0 [0] = { 1{ addr_in[0] }} & ( _031__R );
  assign data_in_R0 [5] = { 1{ !addr_in[0] }} & ( _031__R );
  assign _032_ = wr ? _031_ : mem5[0];
  logic [0:0] wr_R10 ;
  assign wr_R10 = ( | _032__R ) && _031_ != mem5[0] ;
  assign _032__T = wr ? ( { 1{ wr_T  }} | _031__T ) : ( { 1{ wr_T  }} | mem5_T [0] );
  assign _032__S = wr ? _031__S : mem5_S ;
  assign { mem5_R0 [1:1] } = 0;
  logic [0:0] _031__R0 ;
  assign _031__R0 = { 1{ wr }} & ( _032__R );
  logic [1:0] mem5_R1 ;
  assign mem5_R1 [0] = { 1{ !wr }} & ( _032__R );
  assign _033_ = stb ? _032_ : mem5[0];
  logic [0:0] stb_R10 ;
  assign stb_R10 = ( | _033__R ) && _032_ != mem5[0] ;
  assign _033__T = stb ? ( { 1{ stb_T  }} | _032__T ) : ( { 1{ stb_T  }} | mem5_T [0] );
  assign _033__S = stb ? _032__S : mem5_S ;
  assign { mem5_R1 [1:1] } = 0;
  logic [0:0] _032__R0 ;
  assign _032__R0 = { 1{ stb }} & ( _033__R );
  logic [1:0] mem5_R2 ;
  assign mem5_R2 [0] = { 1{ !stb }} & ( _033__R );
  assign _006_[0] = rst ? 1'b0 : _033_;
  logic [0:0] rst_R10 ;
  assign rst_R10 = ( | _006__R [0] ) && 1'b0 != _033_ ;
  logic [0:0] _033__R0 ;
  assign _033__R0 = { 1{ !rst }} & ( _006__R [0] );
  assign _006__T [0] = rst ? { 1{ | rst_T  }} : ( { 1{ | rst_T  }} | _033__T );
  assign _006__S = rst ? rst_S : _033__S ;
  assign _034_ = addr_in[0] ? mem4[0] : data_in[4];
  assign { addr_in_R2 [15:1] } = 0;
  logic [15:0] addr_in_R3 ;
  assign addr_in_R3 [0] = ( | _034__R ) && mem4[0] != data_in[4] ;
  assign _034__T = addr_in[0] ? ( { 1{ addr_in_T  [0] }} | mem4_T [0] ) : ( { 1{ addr_in_T  [0] }} | data_in_T [4] );
  assign _034__S = addr_in[0] ? mem4_S : data_in_S ;
  logic [1:0] mem4_R0 ;
  assign mem4_R0 [0] = { 1{ addr_in[0] }} & ( _034__R );
  assign data_in_R0 [4] = { 1{ !addr_in[0] }} & ( _034__R );
  assign _035_ = wr ? _034_ : mem4[0];
  logic [0:0] wr_R11 ;
  assign wr_R11 = ( | _035__R ) && _034_ != mem4[0] ;
  assign _035__T = wr ? ( { 1{ wr_T  }} | _034__T ) : ( { 1{ wr_T  }} | mem4_T [0] );
  assign _035__S = wr ? _034__S : mem4_S ;
  assign { mem4_R0 [1:1] } = 0;
  logic [0:0] _034__R0 ;
  assign _034__R0 = { 1{ wr }} & ( _035__R );
  logic [1:0] mem4_R1 ;
  assign mem4_R1 [0] = { 1{ !wr }} & ( _035__R );
  assign _036_ = stb ? _035_ : mem4[0];
  logic [0:0] stb_R11 ;
  assign stb_R11 = ( | _036__R ) && _035_ != mem4[0] ;
  assign _036__T = stb ? ( { 1{ stb_T  }} | _035__T ) : ( { 1{ stb_T  }} | mem4_T [0] );
  assign _036__S = stb ? _035__S : mem4_S ;
  assign { mem4_R1 [1:1] } = 0;
  logic [0:0] _035__R0 ;
  assign _035__R0 = { 1{ stb }} & ( _036__R );
  logic [1:0] mem4_R2 ;
  assign mem4_R2 [0] = { 1{ !stb }} & ( _036__R );
  assign _005_[0] = rst ? 1'b0 : _036_;
  logic [0:0] rst_R11 ;
  assign rst_R11 = ( | _005__R [0] ) && 1'b0 != _036_ ;
  logic [0:0] _036__R0 ;
  assign _036__R0 = { 1{ !rst }} & ( _005__R [0] );
  assign _005__T [0] = rst ? { 1{ | rst_T  }} : ( { 1{ | rst_T  }} | _036__T );
  assign _005__S = rst ? rst_S : _036__S ;
  assign _037_ = addr_in[0] ? mem3[0] : data_in[3];
  assign { addr_in_R3 [15:1] } = 0;
  logic [15:0] addr_in_R4 ;
  assign addr_in_R4 [0] = ( | _037__R ) && mem3[0] != data_in[3] ;
  assign _037__T = addr_in[0] ? ( { 1{ addr_in_T  [0] }} | mem3_T [0] ) : ( { 1{ addr_in_T  [0] }} | data_in_T [3] );
  assign _037__S = addr_in[0] ? mem3_S : data_in_S ;
  logic [1:0] mem3_R0 ;
  assign mem3_R0 [0] = { 1{ addr_in[0] }} & ( _037__R );
  assign data_in_R0 [3] = { 1{ !addr_in[0] }} & ( _037__R );
  assign _038_ = wr ? _037_ : mem3[0];
  logic [0:0] wr_R12 ;
  assign wr_R12 = ( | _038__R ) && _037_ != mem3[0] ;
  assign _038__T = wr ? ( { 1{ wr_T  }} | _037__T ) : ( { 1{ wr_T  }} | mem3_T [0] );
  assign _038__S = wr ? _037__S : mem3_S ;
  assign { mem3_R0 [1:1] } = 0;
  logic [0:0] _037__R0 ;
  assign _037__R0 = { 1{ wr }} & ( _038__R );
  logic [1:0] mem3_R1 ;
  assign mem3_R1 [0] = { 1{ !wr }} & ( _038__R );
  assign _039_ = stb ? _038_ : mem3[0];
  logic [0:0] stb_R12 ;
  assign stb_R12 = ( | _039__R ) && _038_ != mem3[0] ;
  assign _039__T = stb ? ( { 1{ stb_T  }} | _038__T ) : ( { 1{ stb_T  }} | mem3_T [0] );
  assign _039__S = stb ? _038__S : mem3_S ;
  assign { mem3_R1 [1:1] } = 0;
  logic [0:0] _038__R0 ;
  assign _038__R0 = { 1{ stb }} & ( _039__R );
  logic [1:0] mem3_R2 ;
  assign mem3_R2 [0] = { 1{ !stb }} & ( _039__R );
  assign _004_[0] = rst ? 1'b0 : _039_;
  logic [0:0] rst_R12 ;
  assign rst_R12 = ( | _004__R [0] ) && 1'b0 != _039_ ;
  logic [0:0] _039__R0 ;
  assign _039__R0 = { 1{ !rst }} & ( _004__R [0] );
  assign _004__T [0] = rst ? { 1{ | rst_T  }} : ( { 1{ | rst_T  }} | _039__T );
  assign _004__S = rst ? rst_S : _039__S ;
  assign _040_ = addr_in[0] ? mem2[0] : data_in[2];
  assign { addr_in_R4 [15:1] } = 0;
  logic [15:0] addr_in_R5 ;
  assign addr_in_R5 [0] = ( | _040__R ) && mem2[0] != data_in[2] ;
  assign _040__T = addr_in[0] ? ( { 1{ addr_in_T  [0] }} | mem2_T [0] ) : ( { 1{ addr_in_T  [0] }} | data_in_T [2] );
  assign _040__S = addr_in[0] ? mem2_S : data_in_S ;
  logic [1:0] mem2_R0 ;
  assign mem2_R0 [0] = { 1{ addr_in[0] }} & ( _040__R );
  assign data_in_R0 [2] = { 1{ !addr_in[0] }} & ( _040__R );
  assign _041_ = wr ? _040_ : mem2[0];
  logic [0:0] wr_R13 ;
  assign wr_R13 = ( | _041__R ) && _040_ != mem2[0] ;
  assign _041__T = wr ? ( { 1{ wr_T  }} | _040__T ) : ( { 1{ wr_T  }} | mem2_T [0] );
  assign _041__S = wr ? _040__S : mem2_S ;
  assign { mem2_R0 [1:1] } = 0;
  logic [0:0] _040__R0 ;
  assign _040__R0 = { 1{ wr }} & ( _041__R );
  logic [1:0] mem2_R1 ;
  assign mem2_R1 [0] = { 1{ !wr }} & ( _041__R );
  assign _042_ = stb ? _041_ : mem2[0];
  logic [0:0] stb_R13 ;
  assign stb_R13 = ( | _042__R ) && _041_ != mem2[0] ;
  assign _042__T = stb ? ( { 1{ stb_T  }} | _041__T ) : ( { 1{ stb_T  }} | mem2_T [0] );
  assign _042__S = stb ? _041__S : mem2_S ;
  assign { mem2_R1 [1:1] } = 0;
  logic [0:0] _041__R0 ;
  assign _041__R0 = { 1{ stb }} & ( _042__R );
  logic [1:0] mem2_R2 ;
  assign mem2_R2 [0] = { 1{ !stb }} & ( _042__R );
  assign _003_[0] = rst ? 1'b0 : _042_;
  logic [0:0] rst_R13 ;
  assign rst_R13 = ( | _003__R [0] ) && 1'b0 != _042_ ;
  logic [0:0] _042__R0 ;
  assign _042__R0 = { 1{ !rst }} & ( _003__R [0] );
  assign _003__T [0] = rst ? { 1{ | rst_T  }} : ( { 1{ | rst_T  }} | _042__T );
  assign _003__S = rst ? rst_S : _042__S ;
  assign _043_ = addr_in[0] ? mem1[0] : data_in[1];
  assign { addr_in_R5 [15:1] } = 0;
  logic [15:0] addr_in_R6 ;
  assign addr_in_R6 [0] = ( | _043__R ) && mem1[0] != data_in[1] ;
  assign _043__T = addr_in[0] ? ( { 1{ addr_in_T  [0] }} | mem1_T [0] ) : ( { 1{ addr_in_T  [0] }} | data_in_T [1] );
  assign _043__S = addr_in[0] ? mem1_S : data_in_S ;
  logic [1:0] mem1_R0 ;
  assign mem1_R0 [0] = { 1{ addr_in[0] }} & ( _043__R );
  assign data_in_R0 [1] = { 1{ !addr_in[0] }} & ( _043__R );
  assign _044_ = wr ? _043_ : mem1[0];
  logic [0:0] wr_R14 ;
  assign wr_R14 = ( | _044__R ) && _043_ != mem1[0] ;
  assign _044__T = wr ? ( { 1{ wr_T  }} | _043__T ) : ( { 1{ wr_T  }} | mem1_T [0] );
  assign _044__S = wr ? _043__S : mem1_S ;
  assign { mem1_R0 [1:1] } = 0;
  logic [0:0] _043__R0 ;
  assign _043__R0 = { 1{ wr }} & ( _044__R );
  logic [1:0] mem1_R1 ;
  assign mem1_R1 [0] = { 1{ !wr }} & ( _044__R );
  assign _045_ = stb ? _044_ : mem1[0];
  logic [0:0] stb_R14 ;
  assign stb_R14 = ( | _045__R ) && _044_ != mem1[0] ;
  assign _045__T = stb ? ( { 1{ stb_T  }} | _044__T ) : ( { 1{ stb_T  }} | mem1_T [0] );
  assign _045__S = stb ? _044__S : mem1_S ;
  assign { mem1_R1 [1:1] } = 0;
  logic [0:0] _044__R0 ;
  assign _044__R0 = { 1{ stb }} & ( _045__R );
  logic [1:0] mem1_R2 ;
  assign mem1_R2 [0] = { 1{ !stb }} & ( _045__R );
  assign _002_[0] = rst ? 1'b0 : _045_;
  logic [0:0] rst_R14 ;
  assign rst_R14 = ( | _002__R [0] ) && 1'b0 != _045_ ;
  logic [0:0] _045__R0 ;
  assign _045__R0 = { 1{ !rst }} & ( _002__R [0] );
  assign _002__T [0] = rst ? { 1{ | rst_T  }} : ( { 1{ | rst_T  }} | _045__T );
  assign _002__S = rst ? rst_S : _045__S ;
  assign _046_ = addr_in[0] ? mem0[0] : data_in[0];
  assign { addr_in_R6 [15:1] } = 0;
  logic [15:0] addr_in_R7 ;
  assign addr_in_R7 [0] = ( | _046__R ) && mem0[0] != data_in[0] ;
  assign _046__T = addr_in[0] ? ( { 1{ addr_in_T  [0] }} | mem0_T [0] ) : ( { 1{ addr_in_T  [0] }} | data_in_T [0] );
  assign _046__S = addr_in[0] ? mem0_S : data_in_S ;
  logic [1:0] mem0_R0 ;
  assign mem0_R0 [0] = { 1{ addr_in[0] }} & ( _046__R );
  assign data_in_R0 [0] = { 1{ !addr_in[0] }} & ( _046__R );
  assign _047_ = wr ? _046_ : mem0[0];
  logic [0:0] wr_R15 ;
  assign wr_R15 = ( | _047__R ) && _046_ != mem0[0] ;
  assign _047__T = wr ? ( { 1{ wr_T  }} | _046__T ) : ( { 1{ wr_T  }} | mem0_T [0] );
  assign _047__S = wr ? _046__S : mem0_S ;
  assign { mem0_R0 [1:1] } = 0;
  logic [0:0] _046__R0 ;
  assign _046__R0 = { 1{ wr }} & ( _047__R );
  logic [1:0] mem0_R1 ;
  assign mem0_R1 [0] = { 1{ !wr }} & ( _047__R );
  assign _048_ = stb ? _047_ : mem0[0];
  logic [0:0] stb_R15 ;
  assign stb_R15 = ( | _048__R ) && _047_ != mem0[0] ;
  assign _048__T = stb ? ( { 1{ stb_T  }} | _047__T ) : ( { 1{ stb_T  }} | mem0_T [0] );
  assign _048__S = stb ? _047__S : mem0_S ;
  assign { mem0_R1 [1:1] } = 0;
  logic [0:0] _047__R0 ;
  assign _047__R0 = { 1{ stb }} & ( _048__R );
  logic [1:0] mem0_R2 ;
  assign mem0_R2 [0] = { 1{ !stb }} & ( _048__R );
  assign _001_[0] = rst ? 1'b0 : _048_;
  logic [0:0] rst_R15 ;
  assign rst_R15 = ( | _001__R [0] ) && 1'b0 != _048_ ;
  logic [0:0] _048__R0 ;
  assign _048__R0 = { 1{ !rst }} & ( _001__R [0] );
  assign _001__T [0] = rst ? { 1{ | rst_T  }} : ( { 1{ | rst_T  }} | _048__T );
  assign _001__S = rst ? rst_S : _048__S ;
  assign _049_ = addr_in[0] ? data_in[5] : mem5[1];
  assign { addr_in_R7 [15:1] } = 0;
  logic [15:0] addr_in_R8 ;
  assign addr_in_R8 [0] = ( | _049__R ) && data_in[5] != mem5[1] ;
  assign _049__T = addr_in[0] ? ( { 1{ addr_in_T  [0] }} | data_in_T [5] ) : ( { 1{ addr_in_T  [0] }} | mem5_T [1] );
  assign _049__S = addr_in[0] ? data_in_S : mem5_S ;
  logic [7:0] data_in_R1 ;
  assign data_in_R1 [5] = { 1{ addr_in[0] }} & ( _049__R );
  assign mem5_R2 [1] = { 1{ !addr_in[0] }} & ( _049__R );
  assign _050_ = wr ? _049_ : mem5[1];
  logic [0:0] wr_R16 ;
  assign wr_R16 = ( | _050__R ) && _049_ != mem5[1] ;
  assign _050__T = wr ? ( { 1{ wr_T  }} | _049__T ) : ( { 1{ wr_T  }} | mem5_T [1] );
  assign _050__S = wr ? _049__S : mem5_S ;
  logic [0:0] _049__R0 ;
  assign _049__R0 = { 1{ wr }} & ( _050__R );
  logic [1:0] mem5_R3 ;
  assign mem5_R3 [1] = { 1{ !wr }} & ( _050__R );
  assign _051_ = stb ? _050_ : mem5[1];
  logic [0:0] stb_R16 ;
  assign stb_R16 = ( | _051__R ) && _050_ != mem5[1] ;
  assign _051__T = stb ? ( { 1{ stb_T  }} | _050__T ) : ( { 1{ stb_T  }} | mem5_T [1] );
  assign _051__S = stb ? _050__S : mem5_S ;
  assign { mem5_R3 [0] } = 0;
  logic [0:0] _050__R0 ;
  assign _050__R0 = { 1{ stb }} & ( _051__R );
  logic [1:0] mem5_R4 ;
  assign mem5_R4 [1] = { 1{ !stb }} & ( _051__R );
  assign _006_[1] = rst ? 1'b0 : _051_;
  logic [0:0] rst_R16 ;
  assign rst_R16 = ( | _006__R [1] ) && 1'b0 != _051_ ;
  logic [0:0] _051__R0 ;
  assign _051__R0 = { 1{ !rst }} & ( _006__R [1] );
  assign _006__T [1] = rst ? { 1{ | rst_T  }} : ( { 1{ | rst_T  }} | _051__T );
  assign _006__S = rst ? rst_S : _051__S ;
  assign _052_ = addr_in[0] ? data_in[4] : mem4[1];
  assign { addr_in_R8 [15:1] } = 0;
  logic [15:0] addr_in_R9 ;
  assign addr_in_R9 [0] = ( | _052__R ) && data_in[4] != mem4[1] ;
  assign _052__T = addr_in[0] ? ( { 1{ addr_in_T  [0] }} | data_in_T [4] ) : ( { 1{ addr_in_T  [0] }} | mem4_T [1] );
  assign _052__S = addr_in[0] ? data_in_S : mem4_S ;
  assign data_in_R1 [4] = { 1{ addr_in[0] }} & ( _052__R );
  assign mem4_R2 [1] = { 1{ !addr_in[0] }} & ( _052__R );
  assign _053_ = wr ? _052_ : mem4[1];
  logic [0:0] wr_R17 ;
  assign wr_R17 = ( | _053__R ) && _052_ != mem4[1] ;
  assign _053__T = wr ? ( { 1{ wr_T  }} | _052__T ) : ( { 1{ wr_T  }} | mem4_T [1] );
  assign _053__S = wr ? _052__S : mem4_S ;
  logic [0:0] _052__R0 ;
  assign _052__R0 = { 1{ wr }} & ( _053__R );
  logic [1:0] mem4_R3 ;
  assign mem4_R3 [1] = { 1{ !wr }} & ( _053__R );
  assign _054_ = stb ? _053_ : mem4[1];
  logic [0:0] stb_R17 ;
  assign stb_R17 = ( | _054__R ) && _053_ != mem4[1] ;
  assign _054__T = stb ? ( { 1{ stb_T  }} | _053__T ) : ( { 1{ stb_T  }} | mem4_T [1] );
  assign _054__S = stb ? _053__S : mem4_S ;
  assign { mem4_R3 [0] } = 0;
  logic [0:0] _053__R0 ;
  assign _053__R0 = { 1{ stb }} & ( _054__R );
  logic [1:0] mem4_R4 ;
  assign mem4_R4 [1] = { 1{ !stb }} & ( _054__R );
  assign _005_[1] = rst ? 1'b0 : _054_;
  logic [0:0] rst_R17 ;
  assign rst_R17 = ( | _005__R [1] ) && 1'b0 != _054_ ;
  logic [0:0] _054__R0 ;
  assign _054__R0 = { 1{ !rst }} & ( _005__R [1] );
  assign _005__T [1] = rst ? { 1{ | rst_T  }} : ( { 1{ | rst_T  }} | _054__T );
  assign _005__S = rst ? rst_S : _054__S ;
  assign _055_ = addr_in[0] ? data_in[3] : mem3[1];
  assign { addr_in_R9 [15:1] } = 0;
  logic [15:0] addr_in_R10 ;
  assign addr_in_R10 [0] = ( | _055__R ) && data_in[3] != mem3[1] ;
  assign _055__T = addr_in[0] ? ( { 1{ addr_in_T  [0] }} | data_in_T [3] ) : ( { 1{ addr_in_T  [0] }} | mem3_T [1] );
  assign _055__S = addr_in[0] ? data_in_S : mem3_S ;
  assign data_in_R1 [3] = { 1{ addr_in[0] }} & ( _055__R );
  assign mem3_R2 [1] = { 1{ !addr_in[0] }} & ( _055__R );
  assign _056_ = wr ? _055_ : mem3[1];
  logic [0:0] wr_R18 ;
  assign wr_R18 = ( | _056__R ) && _055_ != mem3[1] ;
  assign _056__T = wr ? ( { 1{ wr_T  }} | _055__T ) : ( { 1{ wr_T  }} | mem3_T [1] );
  assign _056__S = wr ? _055__S : mem3_S ;
  logic [0:0] _055__R0 ;
  assign _055__R0 = { 1{ wr }} & ( _056__R );
  logic [1:0] mem3_R3 ;
  assign mem3_R3 [1] = { 1{ !wr }} & ( _056__R );
  assign _057_ = stb ? _056_ : mem3[1];
  logic [0:0] stb_R18 ;
  assign stb_R18 = ( | _057__R ) && _056_ != mem3[1] ;
  assign _057__T = stb ? ( { 1{ stb_T  }} | _056__T ) : ( { 1{ stb_T  }} | mem3_T [1] );
  assign _057__S = stb ? _056__S : mem3_S ;
  assign { mem3_R3 [0] } = 0;
  logic [0:0] _056__R0 ;
  assign _056__R0 = { 1{ stb }} & ( _057__R );
  logic [1:0] mem3_R4 ;
  assign mem3_R4 [1] = { 1{ !stb }} & ( _057__R );
  assign _004_[1] = rst ? 1'b0 : _057_;
  logic [0:0] rst_R18 ;
  assign rst_R18 = ( | _004__R [1] ) && 1'b0 != _057_ ;
  logic [0:0] _057__R0 ;
  assign _057__R0 = { 1{ !rst }} & ( _004__R [1] );
  assign _004__T [1] = rst ? { 1{ | rst_T  }} : ( { 1{ | rst_T  }} | _057__T );
  assign _004__S = rst ? rst_S : _057__S ;
  assign _058_ = addr_in[0] ? data_in[2] : mem2[1];
  assign { addr_in_R10 [15:1] } = 0;
  logic [15:0] addr_in_R11 ;
  assign addr_in_R11 [0] = ( | _058__R ) && data_in[2] != mem2[1] ;
  assign _058__T = addr_in[0] ? ( { 1{ addr_in_T  [0] }} | data_in_T [2] ) : ( { 1{ addr_in_T  [0] }} | mem2_T [1] );
  assign _058__S = addr_in[0] ? data_in_S : mem2_S ;
  assign data_in_R1 [2] = { 1{ addr_in[0] }} & ( _058__R );
  assign mem2_R2 [1] = { 1{ !addr_in[0] }} & ( _058__R );
  assign _059_ = wr ? _058_ : mem2[1];
  logic [0:0] wr_R19 ;
  assign wr_R19 = ( | _059__R ) && _058_ != mem2[1] ;
  assign _059__T = wr ? ( { 1{ wr_T  }} | _058__T ) : ( { 1{ wr_T  }} | mem2_T [1] );
  assign _059__S = wr ? _058__S : mem2_S ;
  logic [0:0] _058__R0 ;
  assign _058__R0 = { 1{ wr }} & ( _059__R );
  logic [1:0] mem2_R3 ;
  assign mem2_R3 [1] = { 1{ !wr }} & ( _059__R );
  assign _060_ = stb ? _059_ : mem2[1];
  logic [0:0] stb_R19 ;
  assign stb_R19 = ( | _060__R ) && _059_ != mem2[1] ;
  assign _060__T = stb ? ( { 1{ stb_T  }} | _059__T ) : ( { 1{ stb_T  }} | mem2_T [1] );
  assign _060__S = stb ? _059__S : mem2_S ;
  assign { mem2_R3 [0] } = 0;
  logic [0:0] _059__R0 ;
  assign _059__R0 = { 1{ stb }} & ( _060__R );
  logic [1:0] mem2_R4 ;
  assign mem2_R4 [1] = { 1{ !stb }} & ( _060__R );
  assign _003_[1] = rst ? 1'b0 : _060_;
  logic [0:0] rst_R19 ;
  assign rst_R19 = ( | _003__R [1] ) && 1'b0 != _060_ ;
  logic [0:0] _060__R0 ;
  assign _060__R0 = { 1{ !rst }} & ( _003__R [1] );
  assign _003__T [1] = rst ? { 1{ | rst_T  }} : ( { 1{ | rst_T  }} | _060__T );
  assign _003__S = rst ? rst_S : _060__S ;
  assign _061_ = addr_in[0] ? data_in[1] : mem1[1];
  assign { addr_in_R11 [15:1] } = 0;
  logic [15:0] addr_in_R12 ;
  assign addr_in_R12 [0] = ( | _061__R ) && data_in[1] != mem1[1] ;
  assign _061__T = addr_in[0] ? ( { 1{ addr_in_T  [0] }} | data_in_T [1] ) : ( { 1{ addr_in_T  [0] }} | mem1_T [1] );
  assign _061__S = addr_in[0] ? data_in_S : mem1_S ;
  assign data_in_R1 [1] = { 1{ addr_in[0] }} & ( _061__R );
  assign mem1_R2 [1] = { 1{ !addr_in[0] }} & ( _061__R );
  assign _062_ = wr ? _061_ : mem1[1];
  logic [0:0] wr_R20 ;
  assign wr_R20 = ( | _062__R ) && _061_ != mem1[1] ;
  assign _062__T = wr ? ( { 1{ wr_T  }} | _061__T ) : ( { 1{ wr_T  }} | mem1_T [1] );
  assign _062__S = wr ? _061__S : mem1_S ;
  logic [0:0] _061__R0 ;
  assign _061__R0 = { 1{ wr }} & ( _062__R );
  logic [1:0] mem1_R3 ;
  assign mem1_R3 [1] = { 1{ !wr }} & ( _062__R );
  assign _063_ = stb ? _062_ : mem1[1];
  logic [0:0] stb_R20 ;
  assign stb_R20 = ( | _063__R ) && _062_ != mem1[1] ;
  assign _063__T = stb ? ( { 1{ stb_T  }} | _062__T ) : ( { 1{ stb_T  }} | mem1_T [1] );
  assign _063__S = stb ? _062__S : mem1_S ;
  assign { mem1_R3 [0] } = 0;
  logic [0:0] _062__R0 ;
  assign _062__R0 = { 1{ stb }} & ( _063__R );
  logic [1:0] mem1_R4 ;
  assign mem1_R4 [1] = { 1{ !stb }} & ( _063__R );
  assign _002_[1] = rst ? 1'b0 : _063_;
  logic [0:0] rst_R20 ;
  assign rst_R20 = ( | _002__R [1] ) && 1'b0 != _063_ ;
  logic [0:0] _063__R0 ;
  assign _063__R0 = { 1{ !rst }} & ( _002__R [1] );
  assign _002__T [1] = rst ? { 1{ | rst_T  }} : ( { 1{ | rst_T  }} | _063__T );
  assign _002__S = rst ? rst_S : _063__S ;
  assign _064_ = addr_in[0] ? data_in[0] : mem0[1];
  assign { addr_in_R12 [15:1] } = 0;
  logic [15:0] addr_in_R13 ;
  assign addr_in_R13 [0] = ( | _064__R ) && data_in[0] != mem0[1] ;
  assign _064__T = addr_in[0] ? ( { 1{ addr_in_T  [0] }} | data_in_T [0] ) : ( { 1{ addr_in_T  [0] }} | mem0_T [1] );
  assign _064__S = addr_in[0] ? data_in_S : mem0_S ;
  assign data_in_R1 [0] = { 1{ addr_in[0] }} & ( _064__R );
  assign mem0_R2 [1] = { 1{ !addr_in[0] }} & ( _064__R );
  assign _065_ = wr ? _064_ : mem0[1];
  logic [0:0] wr_R21 ;
  assign wr_R21 = ( | _065__R ) && _064_ != mem0[1] ;
  assign _065__T = wr ? ( { 1{ wr_T  }} | _064__T ) : ( { 1{ wr_T  }} | mem0_T [1] );
  assign _065__S = wr ? _064__S : mem0_S ;
  logic [0:0] _064__R0 ;
  assign _064__R0 = { 1{ wr }} & ( _065__R );
  logic [1:0] mem0_R3 ;
  assign mem0_R3 [1] = { 1{ !wr }} & ( _065__R );
  assign _066_ = stb ? _065_ : mem0[1];
  logic [0:0] stb_R21 ;
  assign stb_R21 = ( | _066__R ) && _065_ != mem0[1] ;
  assign _066__T = stb ? ( { 1{ stb_T  }} | _065__T ) : ( { 1{ stb_T  }} | mem0_T [1] );
  assign _066__S = stb ? _065__S : mem0_S ;
  assign { mem0_R3 [0] } = 0;
  logic [0:0] _065__R0 ;
  assign _065__R0 = { 1{ stb }} & ( _066__R );
  logic [1:0] mem0_R4 ;
  assign mem0_R4 [1] = { 1{ !stb }} & ( _066__R );
  assign _001_[1] = rst ? 1'b0 : _066_;
  logic [0:0] rst_R21 ;
  assign rst_R21 = ( | _001__R [1] ) && 1'b0 != _066_ ;
  logic [0:0] _066__R0 ;
  assign _066__R0 = { 1{ !rst }} & ( _001__R [1] );
  assign _001__T [1] = rst ? { 1{ | rst_T  }} : ( { 1{ | rst_T  }} | _066__T );
  assign _001__S = rst ? rst_S : _066__S ;
  assign _067_ = addr_in[0] ? data_in[6] : mem6[1];
  assign { addr_in_R13 [15:1] } = 0;
  logic [15:0] addr_in_R14 ;
  assign addr_in_R14 [0] = ( | _067__R ) && data_in[6] != mem6[1] ;
  assign _067__T = addr_in[0] ? ( { 1{ addr_in_T  [0] }} | data_in_T [6] ) : ( { 1{ addr_in_T  [0] }} | mem6_T [1] );
  assign _067__S = addr_in[0] ? data_in_S : mem6_S ;
  assign data_in_R1 [6] = { 1{ addr_in[0] }} & ( _067__R );
  assign mem6_R2 [1] = { 1{ !addr_in[0] }} & ( _067__R );
  assign _068_ = wr ? _067_ : mem6[1];
  logic [0:0] wr_R22 ;
  assign wr_R22 = ( | _068__R ) && _067_ != mem6[1] ;
  assign _068__T = wr ? ( { 1{ wr_T  }} | _067__T ) : ( { 1{ wr_T  }} | mem6_T [1] );
  assign _068__S = wr ? _067__S : mem6_S ;
  logic [0:0] _067__R0 ;
  assign _067__R0 = { 1{ wr }} & ( _068__R );
  logic [1:0] mem6_R3 ;
  assign mem6_R3 [1] = { 1{ !wr }} & ( _068__R );
  assign _069_ = stb ? _068_ : mem6[1];
  logic [0:0] stb_R22 ;
  assign stb_R22 = ( | _069__R ) && _068_ != mem6[1] ;
  assign _069__T = stb ? ( { 1{ stb_T  }} | _068__T ) : ( { 1{ stb_T  }} | mem6_T [1] );
  assign _069__S = stb ? _068__S : mem6_S ;
  assign { mem6_R3 [0] } = 0;
  logic [0:0] _068__R0 ;
  assign _068__R0 = { 1{ stb }} & ( _069__R );
  logic [1:0] mem6_R4 ;
  assign mem6_R4 [1] = { 1{ !stb }} & ( _069__R );
  assign _007_[1] = rst ? 1'b0 : _069_;
  logic [0:0] rst_R22 ;
  assign rst_R22 = ( | _007__R [1] ) && 1'b0 != _069_ ;
  logic [0:0] _069__R0 ;
  assign _069__R0 = { 1{ !rst }} & ( _007__R [1] );
  assign _007__T [1] = rst ? { 1{ | rst_T  }} : ( { 1{ | rst_T  }} | _069__T );
  assign _007__S = rst ? rst_S : _069__S ;
  assign _070_ = addr_in[0] ? data_in[7] : mem7[1];
  assign { addr_in_R14 [15:1] } = 0;
  logic [15:0] addr_in_R15 ;
  assign addr_in_R15 [0] = ( | _070__R ) && data_in[7] != mem7[1] ;
  assign _070__T = addr_in[0] ? ( { 1{ addr_in_T  [0] }} | data_in_T [7] ) : ( { 1{ addr_in_T  [0] }} | mem7_T [1] );
  assign _070__S = addr_in[0] ? data_in_S : mem7_S ;
  assign data_in_R1 [7] = { 1{ addr_in[0] }} & ( _070__R );
  assign mem7_R2 [1] = { 1{ !addr_in[0] }} & ( _070__R );
  assign _071_ = wr ? _070_ : mem7[1];
  logic [0:0] wr_R23 ;
  assign wr_R23 = ( | _071__R ) && _070_ != mem7[1] ;
  assign _071__T = wr ? ( { 1{ wr_T  }} | _070__T ) : ( { 1{ wr_T  }} | mem7_T [1] );
  assign _071__S = wr ? _070__S : mem7_S ;
  logic [0:0] _070__R0 ;
  assign _070__R0 = { 1{ wr }} & ( _071__R );
  logic [1:0] mem7_R3 ;
  assign mem7_R3 [1] = { 1{ !wr }} & ( _071__R );
  assign _072_ = stb ? _071_ : mem7[1];
  logic [0:0] stb_R23 ;
  assign stb_R23 = ( | _072__R ) && _071_ != mem7[1] ;
  assign _072__T = stb ? ( { 1{ stb_T  }} | _071__T ) : ( { 1{ stb_T  }} | mem7_T [1] );
  assign _072__S = stb ? _071__S : mem7_S ;
  assign { mem7_R3 [0] } = 0;
  logic [0:0] _071__R0 ;
  assign _071__R0 = { 1{ stb }} & ( _072__R );
  logic [1:0] mem7_R4 ;
  assign mem7_R4 [1] = { 1{ !stb }} & ( _072__R );
  assign _008_[1] = rst ? 1'b0 : _072_;
  logic [0:0] rst_R23 ;
  assign rst_R23 = ( | _008__R [1] ) && 1'b0 != _072_ ;
  logic [0:0] _072__R0 ;
  assign _072__R0 = { 1{ !rst }} & ( _008__R [1] );
  assign _008__T [1] = rst ? { 1{ | rst_T  }} : ( { 1{ | rst_T  }} | _072__T );
  assign _008__S = rst ? rst_S : _072__S ;
  assign _073_ = mem0 [addr_in[0] +: 1];
  assign { mem0_R4 [0] } = 0;
  logic [1:0] mem0_R5 ;
  assign _073__S = 0 ;
  assign { addr_in_R15 [15:1] } = 0;
  logic [15:0] addr_in_R16 ;
  assign _073__T = mem0_T[addr_in[0] +: 1] | { 1{ | addr_in_T [0] }} ;
  always @(*) begin
    mem0_R5 = 0 ;
    mem0_R5[addr_in[0] +: 1] = _073__R ;
    addr_in_R16 [0] = { 1{ | _073__R }} ;
  end
  assign _074_ = mem1 [addr_in[0] +: 1];
  assign { mem1_R4 [0] } = 0;
  logic [1:0] mem1_R5 ;
  assign _074__S = 0 ;
  assign { addr_in_R16 [15:1] } = 0;
  logic [15:0] addr_in_R17 ;
  assign _074__T = mem1_T[addr_in[0] +: 1] | { 1{ | addr_in_T [0] }} ;
  always @(*) begin
    mem1_R5 = 0 ;
    mem1_R5[addr_in[0] +: 1] = _074__R ;
    addr_in_R17 [0] = { 1{ | _074__R }} ;
  end
  assign _075_ = mem2 [addr_in[0] +: 1];
  assign { mem2_R4 [0] } = 0;
  logic [1:0] mem2_R5 ;
  assign _075__S = 0 ;
  assign { addr_in_R17 [15:1] } = 0;
  logic [15:0] addr_in_R18 ;
  assign _075__T = mem2_T[addr_in[0] +: 1] | { 1{ | addr_in_T [0] }} ;
  always @(*) begin
    mem2_R5 = 0 ;
    mem2_R5[addr_in[0] +: 1] = _075__R ;
    addr_in_R18 [0] = { 1{ | _075__R }} ;
  end
  assign _076_ = mem3 [addr_in[0] +: 1];
  assign { mem3_R4 [0] } = 0;
  logic [1:0] mem3_R5 ;
  assign _076__S = 0 ;
  assign { addr_in_R18 [15:1] } = 0;
  logic [15:0] addr_in_R19 ;
  assign _076__T = mem3_T[addr_in[0] +: 1] | { 1{ | addr_in_T [0] }} ;
  always @(*) begin
    mem3_R5 = 0 ;
    mem3_R5[addr_in[0] +: 1] = _076__R ;
    addr_in_R19 [0] = { 1{ | _076__R }} ;
  end
  assign _077_ = mem4 [addr_in[0] +: 1];
  assign { mem4_R4 [0] } = 0;
  logic [1:0] mem4_R5 ;
  assign _077__S = 0 ;
  assign { addr_in_R19 [15:1] } = 0;
  logic [15:0] addr_in_R20 ;
  assign _077__T = mem4_T[addr_in[0] +: 1] | { 1{ | addr_in_T [0] }} ;
  always @(*) begin
    mem4_R5 = 0 ;
    mem4_R5[addr_in[0] +: 1] = _077__R ;
    addr_in_R20 [0] = { 1{ | _077__R }} ;
  end
  assign _078_ = mem5 [addr_in[0] +: 1];
  assign { mem5_R4 [0] } = 0;
  logic [1:0] mem5_R5 ;
  assign _078__S = 0 ;
  assign { addr_in_R20 [15:1] } = 0;
  logic [15:0] addr_in_R21 ;
  assign _078__T = mem5_T[addr_in[0] +: 1] | { 1{ | addr_in_T [0] }} ;
  always @(*) begin
    mem5_R5 = 0 ;
    mem5_R5[addr_in[0] +: 1] = _078__R ;
    addr_in_R21 [0] = { 1{ | _078__R }} ;
  end
  assign _079_ = mem6 [addr_in[0] +: 1];
  assign { mem6_R4 [0] } = 0;
  logic [1:0] mem6_R5 ;
  assign _079__S = 0 ;
  assign { addr_in_R21 [15:1] } = 0;
  logic [15:0] addr_in_R22 ;
  assign _079__T = mem6_T[addr_in[0] +: 1] | { 1{ | addr_in_T [0] }} ;
  always @(*) begin
    mem6_R5 = 0 ;
    mem6_R5[addr_in[0] +: 1] = _079__R ;
    addr_in_R22 [0] = { 1{ | _079__R }} ;
  end
  assign _080_ = mem7 [addr_in[0] +: 1];
  assign { mem7_R4 [0] } = 0;
  logic [1:0] mem7_R5 ;
  assign _080__S = 0 ;
  assign { addr_in_R22 [15:1] } = 0;
  logic [15:0] addr_in_R23 ;
  assign _080__T = mem7_T[addr_in[0] +: 1] | { 1{ | addr_in_T [0] }} ;
  always @(*) begin
    mem7_R5 = 0 ;
    mem7_R5[addr_in[0] +: 1] = _080__R ;
    addr_in_R23 [0] = { 1{ | _080__R }} ;
  end
  assign ack = stb;
  logic [0:0] stb_R24 ;
  assign ack_T = stb_T ;
  assign stb_R24 = ack_R ;
  assign ack_S = stb_S ;
  assign _072__R = ( _072__R0 );
  assign _071__R = ( _071__R0 );
  assign _070__R = ( _070__R0 );
  assign _067__R = ( _067__R0 );
  assign _066__R = ( _066__R0 );
  assign _065__R = ( _065__R0 );
  assign _064__R = ( _064__R0 );
  assign _063__R = ( _063__R0 );
  assign _062__R = ( _062__R0 );
  assign _061__R = ( _061__R0 );
  assign _068__R = ( _068__R0 );
  assign _060__R = ( _060__R0 );
  assign _059__R = ( _059__R0 );
  assign _056__R = ( _056__R0 );
  assign _055__R = ( _055__R0 );
  assign _053__R = ( _053__R0 );
  assign _052__R = ( _052__R0 );
  assign _054__R = ( _054__R0 );
  assign _051__R = ( _051__R0 );
  assign _050__R = ( _050__R0 );
  assign _049__R = ( _049__R0 );
  assign _048__R = ( _048__R0 );
  assign _047__R = ( _047__R0 );
  assign _046__R = ( _046__R0 );
  assign mem0_R = ( mem0_R0 ) | ( mem0_R1 ) | ( mem0_R2 ) | ( mem0_R3 ) | ( mem0_R4 ) | ( mem0_R5 );
  assign _045__R = ( _045__R0 );
  assign _044__R = ( _044__R0 );
  assign _043__R = ( _043__R0 );
  assign mem1_R = ( mem1_R0 ) | ( mem1_R1 ) | ( mem1_R2 ) | ( mem1_R3 ) | ( mem1_R4 ) | ( mem1_R5 );
  assign _042__R = ( _042__R0 );
  assign _041__R = ( _041__R0 );
  assign _040__R = ( _040__R0 );
  assign mem2_R = ( mem2_R0 ) | ( mem2_R1 ) | ( mem2_R2 ) | ( mem2_R3 ) | ( mem2_R4 ) | ( mem2_R5 );
  assign _039__R = ( _039__R0 );
  assign _038__R = ( _038__R0 );
  assign _037__R = ( _037__R0 );
  assign mem3_R = ( mem3_R0 ) | ( mem3_R1 ) | ( mem3_R2 ) | ( mem3_R3 ) | ( mem3_R4 ) | ( mem3_R5 );
  assign _036__R = ( _036__R0 );
  assign _035__R = ( _035__R0 );
  assign _034__R = ( _034__R0 );
  assign mem4_R = ( mem4_R0 ) | ( mem4_R1 ) | ( mem4_R2 ) | ( mem4_R3 ) | ( mem4_R4 ) | ( mem4_R5 );
  assign _032__R = ( _032__R0 );
  assign _031__R = ( _031__R0 );
  assign mem5_R = ( mem5_R0 ) | ( mem5_R1 ) | ( mem5_R2 ) | ( mem5_R3 ) | ( mem5_R4 ) | ( mem5_R5 );
  assign _030__R = ( _030__R0 );
  assign _029__R = ( _029__R0 );
  assign _028__R = ( _028__R0 );
  assign _057__R = ( _057__R0 );
  assign mem6_R = ( mem6_R0 ) | ( mem6_R1 ) | ( mem6_R2 ) | ( mem6_R3 ) | ( mem6_R4 ) | ( mem6_R5 );
  assign _027__R = ( _027__R0 );
  assign _025__R = ( _025__R0 );
  assign data_in_R = ( data_in_R0 ) | ( data_in_R1 );
  assign addr_in_R = ( addr_in_R0 ) | ( addr_in_R1 ) | ( addr_in_R2 ) | ( addr_in_R3 ) | ( addr_in_R4 ) | ( addr_in_R5 ) | ( addr_in_R6 ) | ( addr_in_R7 ) | ( addr_in_R8 ) | ( addr_in_R9 ) | ( addr_in_R10 ) | ( addr_in_R11 ) | ( addr_in_R12 ) | ( addr_in_R13 ) | ( addr_in_R14 ) | ( addr_in_R15 ) | ( addr_in_R16 ) | ( addr_in_R17 ) | ( addr_in_R18 ) | ( addr_in_R19 ) | ( addr_in_R20 ) | ( addr_in_R21 ) | ( addr_in_R22 ) | ( addr_in_R23 );
  assign _024__R = ( _024__R0 );
  assign _023__R = ( _023__R0 );
  assign _073__R = ( _073__R0 );
  assign mem7_R = ( mem7_R0 ) | ( mem7_R1 ) | ( mem7_R2 ) | ( mem7_R3 ) | ( mem7_R4 ) | ( mem7_R5 );
  assign _022__R = ( _022__R0 );
  assign _074__R = ( _074__R0 );
  assign _020__R = ( _020__R0 );
  assign _019__R = ( _019__R0 );
  assign _075__R = ( _075__R0 );
  assign _018__R = ( _018__R0 );
  assign _017__R = ( _017__R0 );
  assign _058__R = ( _058__R0 );
  assign _076__R = ( _076__R0 );
  assign _016__R = ( _016__R0 );
  assign _021__R = ( _021__R0 );
  assign _015__R = ( _015__R0 );
  assign _077__R = ( _077__R0 );
  assign _014__R = ( _014__R0 );
  assign _013__R = ( _013__R0 );
  assign _078__R = ( _078__R0 );
  assign _012__R = ( _012__R0 );
  assign _069__R = ( _069__R0 );
  assign _033__R = ( _033__R0 );
  assign _011__R = ( _011__R0 );
  assign _079__R = ( _079__R0 );
  assign _010__R = ( _010__R0 );
  assign rst_R = ( rst_R0 ) | ( rst_R1 ) | ( rst_R2 ) | ( rst_R3 ) | ( rst_R4 ) | ( rst_R5 ) | ( rst_R6 ) | ( rst_R7 ) | ( rst_R8 ) | ( rst_R9 ) | ( rst_R10 ) | ( rst_R11 ) | ( rst_R12 ) | ( rst_R13 ) | ( rst_R14 ) | ( rst_R15 ) | ( rst_R16 ) | ( rst_R17 ) | ( rst_R18 ) | ( rst_R19 ) | ( rst_R20 ) | ( rst_R21 ) | ( rst_R22 ) | ( rst_R23 );
  assign _009__R = ( _009__R0 );
  assign stb_R = ( stb_R0 ) | ( stb_R1 ) | ( stb_R2 ) | ( stb_R3 ) | ( stb_R4 ) | ( stb_R5 ) | ( stb_R6 ) | ( stb_R7 ) | ( stb_R8 ) | ( stb_R9 ) | ( stb_R10 ) | ( stb_R11 ) | ( stb_R12 ) | ( stb_R13 ) | ( stb_R14 ) | ( stb_R15 ) | ( stb_R16 ) | ( stb_R17 ) | ( stb_R18 ) | ( stb_R19 ) | ( stb_R20 ) | ( stb_R21 ) | ( stb_R22 ) | ( stb_R23 ) | ( stb_R24 );
  assign _080__R = ( _080__R0 );
  assign wr_R = ( wr_R0 ) | ( wr_R1 ) | ( wr_R2 ) | ( wr_R3 ) | ( wr_R4 ) | ( wr_R5 ) | ( wr_R6 ) | ( wr_R7 ) | ( wr_R8 ) | ( wr_R9 ) | ( wr_R10 ) | ( wr_R11 ) | ( wr_R12 ) | ( wr_R13 ) | ( wr_R14 ) | ( wr_R15 ) | ( wr_R16 ) | ( wr_R17 ) | ( wr_R18 ) | ( wr_R19 ) | ( wr_R20 ) | ( wr_R21 ) | ( wr_R22 ) | ( wr_R23 );
  assign _008__R = ( _008__R0 );
  assign _007__R = ( _007__R0 );
  assign _006__R = ( _006__R0 );
  assign _005__R = ( _005__R0 );
  assign _004__R = ( _004__R0 );
  assign _003__R = ( _003__R0 );
  assign _002__R = ( _002__R0 );
  assign _001__R = ( _001__R0 );
  assign _026__R = ( _026__R0 );
  assign _000__R = ( _000__R0 );
  assign data_out_R = ( data_out_R0 ) | ( data_out_R1 ) | ( data_out_R2 ) | ( data_out_R3 ) | ( data_out_R4 ) | ( data_out_R5 ) | ( data_out_R6 ) | ( data_out_R7 ) | ( data_out_R8 ) | ( data_out_R9 ) | ( data_out_R10 ) | ( data_out_R11 ) | ( data_out_R12 ) | ( data_out_R13 ) | ( data_out_R14 ) | ( data_out_R15 ) | ( data_out_R16 ) | ( data_out_R17 );
  assign ack_R = ( ack_R0 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { clk_R  } = 0;
 // ground taints for unused wire slices
  assign { addr_in_R23 [15:1] } = 0;
  assign { data_out_R17 [7:1] } = 0;
  assert property( data_out_r_flag == 0 || zy_end_sig || data_out_DOES_KEEP == 0);
  assert property( mem0_r_flag == 0 || zy_end_sig || mem0_DOES_KEEP == 0);
  assert property( mem1_r_flag == 0 || zy_end_sig || mem1_DOES_KEEP == 0);
  assert property( mem2_r_flag == 0 || zy_end_sig || mem2_DOES_KEEP == 0);
  assert property( mem3_r_flag == 0 || zy_end_sig || mem3_DOES_KEEP == 0);
  assert property( mem4_r_flag == 0 || zy_end_sig || mem4_DOES_KEEP == 0);
  assert property( mem5_r_flag == 0 || zy_end_sig || mem5_DOES_KEEP == 0);
  assert property( mem6_r_flag == 0 || zy_end_sig || mem6_DOES_KEEP == 0);
  assert property( mem7_r_flag == 0 || zy_end_sig || mem7_DOES_KEEP == 0);
endmodule
