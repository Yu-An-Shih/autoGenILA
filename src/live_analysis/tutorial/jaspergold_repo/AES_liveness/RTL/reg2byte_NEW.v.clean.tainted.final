module reg2byte ( addr , clk , data_in , en , rst , wr , INSTR_IN_ZY , zy_end_sig , rst_zy , data_out , reg_out , wr_R );
  input rst_zy;
  input zy_end_sig;
  integer i;
  input INSTR_IN_ZY;
  logic [15:0] _00_;
  logic _01_;
  logic _02_;
  input addr;
  input clk;
  input [7:0] data_in;
  output [7:0] data_out;
  logic [7:0] data_out ;
  logic [7:0] data_out_mux;
  input en;
  logic [7:0] reg0_next;
  logic [7:0] reg1_next;
  output [15:0] reg_out;
  logic [15:0] reg_out ;
  logic [15:0] reg_out;
  logic [15:0]  reg_out_PREV_VAL1 ;
  input rst;
  input wr;
  logic wr0;
  logic wr1;
  assign _01_ = ~ addr;
  assign _02_ = en && wr;
  assign wr0 = _02_ && _01_;
  assign wr1 = _02_ && addr;
  always @(posedge clk)
      reg_out <= _00_;
  assign _00_[15:8] = rst ? 8'b00000000 : reg1_next;
  assign _00_[7:0] = rst ? 8'b00000000 : reg0_next;
  assign reg0_next = wr0 ? data_in : reg_out[7:0];
  assign reg1_next = wr1 ? data_in : reg_out[15:8];
  assign data_out = addr ? reg_out[15:8] : reg_out[7:0];
  assign data_out_mux = data_out;
 // ground taints for floating regs
  assign reg_out_R = 0;
 // ground taints for unused wires
  assign { _00__R , _01__R , _02__R , data_out_mux_R , reg0_next_R , reg1_next_R , wr0_R , wr1_R , addr_R , clk_R , data_in_R , en_R , rst_R , wr_R  } = 0;
  always @( posedge clk ) begin
    if( rst_zy ) reg_out_PREV_VAL1 <= 0 ;
    if( INSTR_IN_ZY ) reg_out_PREV_VAL1 <= reg_out ;
  end
 // ground taints for unused wire slices
  assert property( !INSTR_IN_ZY  || reg_out_PREV_VAL1 == 0 );
endmodule
