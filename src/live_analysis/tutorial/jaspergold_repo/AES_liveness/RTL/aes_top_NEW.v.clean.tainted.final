module aes_top ( addr , clk , data_in , rst , stb , wr , xram_ack , xram_data_in , zy_end_sig , ack , aes_addr , aes_ctr , aes_key0 , aes_len , aes_state , aes_step , data_out , xram_addr , xram_data_out , xram_stb , xram_wr , xram_data_in_R );
  logic rst_zy;
  input zy_end_sig;
  integer i;
  logic INSTR_IN_ZY;
  assign INSTR_IN_ZY = addr_T > 0 || data_in_T > 0 || stb_T > 0 || wr_T > 0 || xram_ack_T > 0 || xram_data_in_T > 0 || 0 ;
  logic [1:0] _000_;
  logic [4:0] _001_;
  logic [15:0] _002_;
  logic [3:0] _003_;
  logic [127:0] _004_;
  logic [127:0] _005_;
  logic [15:0] _006_;
  logic [127:0] _007_;
  logic [15:0] _008_;
  logic [15:0] _009_;
  logic [3:0] _010_;
  logic [15:0] _011_;
  logic [127:0] _012_;
  logic [4:0] _013_;
  logic [31:0] _014_;
  logic [31:0] _015_;
  logic [31:0] _016_;
  logic _017_;
  logic _018_;
  logic _019_;
  logic _020_;
  logic _021_;
  logic _022_;
  logic _023_;
  logic _024_;
  logic _025_;
  logic _026_;
  logic _027_;
  logic _028_;
  logic _029_;
  logic _030_;
  logic _031_;
  logic _032_;
  logic _033_;
  logic _034_;
  logic _035_;
  logic _036_;
  logic _037_;
  logic _038_;
  logic _039_;
  logic _040_;
  logic _041_;
  logic _042_;
  logic _043_;
  logic _044_;
  logic _045_;
  logic _046_;
  logic _047_;
  logic _048_;
  logic _049_;
  logic _050_;
  logic _051_;
  logic _052_;
  logic _053_;
  logic _054_;
  logic _055_;
  logic _056_;
  logic _057_;
  logic _058_;
  logic _059_;
  logic [7:0] _060_;
  logic [7:0] _061_;
  logic [7:0] _062_;
  logic [7:0] _063_;
  logic [1:0] _064_;
  logic [1:0] _065_;
  logic [1:0] _066_;
  logic [1:0] _067_;
  logic [127:0] _068_;
  logic [4:0] _069_;
  logic [7:0] _070_;
  logic [7:0] _071_;
  logic [7:0] _072_;
  logic [7:0] _073_;
  logic [7:0] _074_;
  logic [7:0] _075_;
  logic [7:0] _076_;
  logic [7:0] _077_;
  logic [7:0] _078_;
  logic [7:0] _079_;
  logic [7:0] _080_;
  logic [7:0] _081_;
  logic [7:0] _082_;
  logic [7:0] _083_;
  output ack;
  logic ack ;
  input [15:0] addr;
  output [15:0] aes_addr;
  logic [15:0] aes_addr ;
  logic [7:0] aes_addr_dataout;
  output [127:0] aes_ctr;
  logic [127:0] aes_ctr ;
  logic [7:0] aes_ctr_dataout;
  logic [127:0] aes_curr_key;
  output [127:0] aes_key0;
  logic [127:0] aes_key0 ;
  logic [7:0] aes_key0_dataout;
  output [15:0] aes_len;
  logic [15:0] aes_len ;
  logic [7:0] aes_len_dataout;
  logic [127:0] aes_out;
  logic [127:0] aes_reg_ctr;
  logic [127:0] aes_reg_key0;
  logic [15:0] aes_reg_opaddr;
  logic [15:0] aes_reg_oplen;
  logic [1:0] aes_reg_state;
  logic [1:0]  aes_reg_state_PREV_VAL1 ;
  logic [1:0] aes_reg_state_next;
  logic aes_reg_state_next_idle;
  logic aes_reg_state_next_operate;
  logic [1:0] aes_reg_state_next_read_data;
  logic [1:0] aes_reg_state_next_write_data;
  output [1:0] aes_state;
  logic [1:0] aes_state ;
  logic aes_state_idle;
  logic aes_state_operate;
  logic aes_state_read_data;
  logic aes_state_write_data;
  output aes_step;
  logic aes_step ;
  logic [4:0] aes_time_counter;
  logic [4:0]  aes_time_counter_PREV_VAL1 ;
  logic [4:0] aes_time_counter_next;
  logic aes_time_enough;
  logic [15:0] block_counter;
  logic [15:0]  block_counter_PREV_VAL1 ;
  logic [15:0] block_counter_next;
  logic [3:0] byte_counter;
  logic [3:0]  byte_counter_PREV_VAL1 ;
  logic [3:0] byte_counter_next;
  input clk;
  input [7:0] data_in;
  output [7:0] data_out;
  logic [7:0] data_out ;
  logic [127:0] encrypted_data;
  logic [127:0] encrypted_data_buf;
  logic [127:0]  encrypted_data_buf_PREV_VAL1 ;
  logic [127:0] encrypted_data_buf_next;
  logic in_addr_range;
  logic incr_byte_counter;
  logic last_byte_acked;
  logic [127:0] mem_data_buf;
  logic [127:0]  mem_data_buf_PREV_VAL1 ;
  logic [127:0] mem_data_buf_next;
  logic more_blocks;
  logic [15:0] operated_bytes_count;
  logic [15:0]  operated_bytes_count_PREV_VAL1 ;
  logic [15:0] operated_bytes_count_next;
  logic reset_byte_counter;
  input rst;
  logic sel_reg_addr;
  logic sel_reg_ctr;
  logic sel_reg_key0;
  logic sel_reg_len;
  logic sel_reg_start;
  logic sel_reg_state;
  logic start_op;
  input stb;
  logic [127:0] uaes_ctr;
  logic [127:0]  uaes_ctr_PREV_VAL1 ;
  logic [127:0] uaes_ctr_nxt;
  input wr;
  logic wren;
  input xram_ack;
  output [15:0] xram_addr;
  logic [15:0] xram_addr ;
  input [7:0] xram_data_in;
  output [7:0] xram_data_out;
  logic [7:0] xram_data_out ;
  output xram_stb;
  logic xram_stb ;
  output xram_wr;
  logic xram_wr ;
  assign _008_ = operated_bytes_count + 5'b10000;
  assign _009_ = block_counter + 5'b10000;
  assign _010_ = byte_counter + 1'b1;
  assign _011_ = aes_reg_opaddr + block_counter;
  assign xram_addr = _011_ + byte_counter;
  assign _012_ = uaes_ctr + 5'b10000;
  assign _013_ = aes_time_counter + 1'b1;
  assign sel_reg_start = addr == 16'b1111111100000000;
  assign sel_reg_state = addr == 16'b1111111100000001;
  assign sel_reg_addr = addr[15:1] == 15'b111111110000001;
  assign sel_reg_len = addr[15:1] == 15'b111111110000010;
  assign sel_reg_ctr = addr[15:4] == 12'b111111110010;
  assign sel_reg_key0 = addr[15:4] == 12'b111111110001;
  assign aes_state_idle = ! aes_reg_state;
  assign aes_state_read_data = aes_reg_state == 1'b1;
  assign aes_state_operate = aes_reg_state == 2'b10;
  assign aes_state_write_data = aes_reg_state == 2'b11;
  assign _017_ = byte_counter == 4'b1111;
  assign _018_ = ! byte_counter;
  assign _019_ = byte_counter == 1'b1;
  assign _020_ = byte_counter == 2'b10;
  assign _021_ = byte_counter == 2'b11;
  assign _022_ = byte_counter == 3'b100;
  assign _023_ = byte_counter == 3'b101;
  assign _024_ = byte_counter == 3'b110;
  assign _025_ = byte_counter == 3'b111;
  assign _026_ = byte_counter == 4'b1000;
  assign _027_ = byte_counter == 4'b1001;
  assign _028_ = byte_counter == 4'b1010;
  assign _029_ = byte_counter == 4'b1011;
  assign _030_ = byte_counter == 4'b1100;
  assign _031_ = byte_counter == 4'b1101;
  assign _032_ = byte_counter == 4'b1110;
  assign _033_ = addr >= 16'b1111111100000000;
  assign aes_time_enough = aes_time_counter >= 5'b10101;
  assign in_addr_range = _033_ && _057_;
  assign ack = stb && in_addr_range;
  assign wren = wr && aes_state_idle;
  assign _034_ = sel_reg_start && data_in[0];
  assign reset_byte_counter = _034_ && wren;
  assign _035_ = sel_reg_addr && wren;
  assign _036_ = sel_reg_len && wren;
  assign _037_ = sel_reg_ctr && wren;
  assign _038_ = sel_reg_key0 && wren;
  assign _039_ = last_byte_acked && aes_state_write_data;
  assign last_byte_acked = _017_ && xram_ack;
  assign more_blocks = _039_ && _058_;
  assign _040_ = last_byte_acked && more_blocks;
  assign _041_ = xram_ack && _018_;
  assign _042_ = xram_ack && _019_;
  assign _043_ = xram_ack && _020_;
  assign _044_ = xram_ack && _021_;
  assign _045_ = xram_ack && _022_;
  assign _046_ = xram_ack && _023_;
  assign _047_ = xram_ack && _024_;
  assign _048_ = xram_ack && _025_;
  assign _049_ = xram_ack && _026_;
  assign _050_ = xram_ack && _027_;
  assign _051_ = xram_ack && _028_;
  assign _052_ = xram_ack && _029_;
  assign _053_ = xram_ack && _030_;
  assign _054_ = xram_ack && _031_;
  assign _055_ = xram_ack && _032_;
  assign xram_stb = aes_state_read_data || aes_state_write_data;
  assign _056_ = more_blocks || reset_byte_counter;
  assign _057_ = addr < 16'b1111111100110000;
  assign _058_ = operated_bytes_count_next < aes_reg_oplen;
  assign _059_ = aes_time_counter < 5'b11111;
  assign aes_step = aes_reg_state != aes_reg_state_next;
  always @(posedge clk)
      aes_reg_state <= _000_;
  always @(posedge clk)
      operated_bytes_count <= _006_;
  always @(posedge clk)
      block_counter <= _002_;
  always @(posedge clk)
      byte_counter <= _003_;
  always @(posedge clk)
      mem_data_buf <= _005_;
  always @(posedge clk)
      encrypted_data_buf <= _004_;
  always @(posedge clk)
      aes_time_counter <= _001_;
  always @(posedge clk)
      uaes_ctr <= _007_;
  assign _004_ = rst ? encrypted_data_buf : encrypted_data_buf_next;
  assign _005_ = rst ? mem_data_buf : mem_data_buf_next;
  assign _003_ = rst ? 4'b0000 : byte_counter_next;
  assign _002_ = rst ? 16'b0000000000000000 : block_counter_next;
  assign _006_ = rst ? 16'b0000000000000000 : operated_bytes_count_next;
  assign _000_ = rst ? 2'b00 : aes_reg_state_next;
  assign _001_ = rst ? 5'b00000 : aes_time_counter_next;
  assign _007_ = rst ? 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : uaes_ctr_nxt;
  assign _060_ = sel_reg_key0 ? aes_key0_dataout : 8'b00000000;
  assign _061_ = sel_reg_ctr ? aes_ctr_dataout : _060_;
  assign _062_ = sel_reg_len ? aes_len_dataout : _061_;
  assign _063_ = sel_reg_addr ? aes_addr_dataout : _062_;
  logic [7:0] fangyuan0;
  assign fangyuan0 = { 6'b000000, aes_reg_state };
  assign data_out = sel_reg_state ? fangyuan0 : _063_;
  assign _014_[15:0] = _039_ ? _008_ : operated_bytes_count;
  assign operated_bytes_count_next = reset_byte_counter ? 16'b0000000000000000 : _014_[15:0];
  assign _015_[15:0] = more_blocks ? _009_ : block_counter;
  assign block_counter_next = reset_byte_counter ? 16'b0000000000000000 : _015_[15:0];
  assign _016_[3:0] = xram_ack ? _010_ : byte_counter;
  assign byte_counter_next = reset_byte_counter ? 4'b0000 : _016_[3:0];
  assign aes_reg_state_next_read_data = last_byte_acked ? 2'b10 : 2'b01;
  assign _064_ = last_byte_acked ? 2'b00 : 2'b11;
  assign aes_reg_state_next_write_data = _040_ ? 2'b01 : _064_;
  assign _065_ = aes_state_write_data ? aes_reg_state_next_write_data : 2'b00;
  logic [1:0] fangyuan1;
  assign fangyuan1 = { 1'b1, aes_time_enough };
  assign _066_ = aes_state_operate ? fangyuan1 : _065_;
  assign _067_ = aes_state_read_data ? aes_reg_state_next_read_data : _066_;
  logic [1:0] fangyuan2;
  assign fangyuan2 = { 1'b0, reset_byte_counter };
  assign aes_reg_state_next = aes_state_idle ? fangyuan2 : _067_;
  assign mem_data_buf_next[7:0] = _041_ ? xram_data_in : mem_data_buf[7:0];
  assign mem_data_buf_next[15:8] = _042_ ? xram_data_in : mem_data_buf[15:8];
  assign mem_data_buf_next[23:16] = _043_ ? xram_data_in : mem_data_buf[23:16];
  assign mem_data_buf_next[31:24] = _044_ ? xram_data_in : mem_data_buf[31:24];
  assign mem_data_buf_next[39:32] = _045_ ? xram_data_in : mem_data_buf[39:32];
  assign mem_data_buf_next[47:40] = _046_ ? xram_data_in : mem_data_buf[47:40];
  assign mem_data_buf_next[55:48] = _047_ ? xram_data_in : mem_data_buf[55:48];
  assign mem_data_buf_next[63:56] = _048_ ? xram_data_in : mem_data_buf[63:56];
  assign mem_data_buf_next[71:64] = _049_ ? xram_data_in : mem_data_buf[71:64];
  assign mem_data_buf_next[79:72] = _050_ ? xram_data_in : mem_data_buf[79:72];
  assign mem_data_buf_next[87:80] = _051_ ? xram_data_in : mem_data_buf[87:80];
  assign mem_data_buf_next[95:88] = _052_ ? xram_data_in : mem_data_buf[95:88];
  assign mem_data_buf_next[103:96] = _053_ ? xram_data_in : mem_data_buf[103:96];
  assign mem_data_buf_next[111:104] = _054_ ? xram_data_in : mem_data_buf[111:104];
  assign mem_data_buf_next[119:112] = _055_ ? xram_data_in : mem_data_buf[119:112];
  assign mem_data_buf_next[127:120] = last_byte_acked ? xram_data_in : mem_data_buf[127:120];
  assign _068_ = more_blocks ? _012_ : uaes_ctr;
  assign uaes_ctr_nxt = reset_byte_counter ? aes_reg_ctr : _068_;
  assign _069_ = _059_ ? _013_ : aes_time_counter;
  assign aes_time_counter_next = _056_ ? 5'b00000 : _069_;
  assign encrypted_data_buf_next = aes_state_operate ? encrypted_data : encrypted_data_buf;
  assign _070_ = _032_ ? encrypted_data_buf[119:112] : encrypted_data_buf[127:120];
  assign _071_ = _031_ ? encrypted_data_buf[111:104] : _070_;
  assign _072_ = _030_ ? encrypted_data_buf[103:96] : _071_;
  assign _073_ = _029_ ? encrypted_data_buf[95:88] : _072_;
  assign _074_ = _028_ ? encrypted_data_buf[87:80] : _073_;
  assign _075_ = _027_ ? encrypted_data_buf[79:72] : _074_;
  assign _076_ = _026_ ? encrypted_data_buf[71:64] : _075_;
  assign _077_ = _025_ ? encrypted_data_buf[63:56] : _076_;
  assign _078_ = _024_ ? encrypted_data_buf[55:48] : _077_;
  assign _079_ = _023_ ? encrypted_data_buf[47:40] : _078_;
  assign _080_ = _022_ ? encrypted_data_buf[39:32] : _079_;
  assign _081_ = _021_ ? encrypted_data_buf[31:24] : _080_;
  assign _082_ = _020_ ? encrypted_data_buf[23:16] : _081_;
  assign _083_ = _019_ ? encrypted_data_buf[15:8] : _082_;
  assign xram_data_out = _018_ ? encrypted_data_buf[7:0] : _083_;
  assign encrypted_data = aes_out ^ mem_data_buf;
  logic [127:0] aes_curr_key_R0 ;
  logic [127:0] uaes_ctr_R0 ;
// module: aes_128
  aes_128 aes_128_i (
    .key_T (  aes_curr_key_T  ),
    .key_R (  aes_curr_key_R0  ),
    .key_S (  aes_curr_key_S  ),
    .state_T (  uaes_ctr_T  ),
    .state_R (  uaes_ctr_R0  ),
    .state_S (  uaes_ctr_S  ),
    .out_T (  aes_out_T  ),
    .out_R0 (  aes_out_R  ),
    .out_S (  aes_out_S  ),
    .out ( aes_out ),
    .state ( uaes_ctr ),
    .clk ( clk ),
    .key ( aes_curr_key )
  );
  logic [15:0] addr_R0 ;
  logic [7:0] data_in_R0 ;
  logic [0:0] sel_reg_ctr_R0 ;
  logic [0:0] rst_R0 ;
  logic [0:0] _037__R0 ;
// module: reg16byte
  reg16byte aes_reg_ctr_i (
    .addr_T (  addr_T [3:0]  ),
    .addr_R (  addr_R0 [3:0]  ),
    .addr_S (  addr_S  ),
    .data_in_T (  data_in_T  ),
    .data_in_R (  data_in_R0  ),
    .data_in_S (  data_in_S  ),
    .en_T (  sel_reg_ctr_T  ),
    .en_R (  sel_reg_ctr_R0  ),
    .en_S (  sel_reg_ctr_S  ),
    .rst_T (  rst_T  ),
    .rst_R (  rst_R0  ),
    .rst_S (  rst_S  ),
    .wr_T (  _037__T  ),
    .wr_R (  _037__R0  ),
    .wr_S (  _037__S  ),
    .data_out_T (  aes_ctr_dataout_T  ),
    .data_out_R0 (  aes_ctr_dataout_R  ),
    .data_out_S (  aes_ctr_dataout_S  ),
    .reg_out_T (  aes_reg_ctr_T  ),
    .reg_out_R0 (  aes_reg_ctr_R  ),
    .reg_out_S (  aes_reg_ctr_S  ),
    .rst ( rst ),
    .reg_out ( aes_reg_ctr ),
    .wr ( _037_ ),
    .clk ( clk ),
    .addr ( addr[3:0] ),
    .en ( sel_reg_ctr ),
    .data_in ( data_in ),
    .data_out ( aes_ctr_dataout )
  );
  assign { addr_R0 [15:4] } = 0;
  logic [15:0] addr_R1 ;
  logic [7:0] data_in_R1 ;
  logic [0:0] sel_reg_key0_R0 ;
  logic [0:0] rst_R1 ;
  logic [0:0] _038__R0 ;
// module: reg16byte
  reg16byte aes_reg_key0_i (
    .addr_T (  addr_T [3:0]  ),
    .addr_R (  addr_R1 [3:0]  ),
    .addr_S (  addr_S  ),
    .data_in_T (  data_in_T  ),
    .data_in_R (  data_in_R1  ),
    .data_in_S (  data_in_S  ),
    .en_T (  sel_reg_key0_T  ),
    .en_R (  sel_reg_key0_R0  ),
    .en_S (  sel_reg_key0_S  ),
    .rst_T (  rst_T  ),
    .rst_R (  rst_R1  ),
    .rst_S (  rst_S  ),
    .wr_T (  _038__T  ),
    .wr_R (  _038__R0  ),
    .wr_S (  _038__S  ),
    .data_out_T (  aes_key0_dataout_T  ),
    .data_out_R0 (  aes_key0_dataout_R  ),
    .data_out_S (  aes_key0_dataout_S  ),
    .reg_out_T (  aes_curr_key_T  ),
    .reg_out_R0 (  aes_curr_key_R  ),
    .reg_out_S (  aes_curr_key_S  ),
    .rst ( rst ),
    .reg_out ( aes_curr_key ),
    .wr ( _038_ ),
    .clk ( clk ),
    .addr ( addr[3:0] ),
    .en ( sel_reg_key0 ),
    .data_in ( data_in ),
    .data_out ( aes_key0_dataout )
  );
  assign { addr_R1 [15:4] } = 0;
  logic [15:0] addr_R2 ;
  logic [7:0] data_in_R2 ;
  logic [0:0] sel_reg_addr_R0 ;
  logic [0:0] rst_R2 ;
  logic [0:0] _035__R0 ;
// module: reg2byte
  reg2byte aes_reg_opaddr_i (
    .addr_T (  addr_T [0]  ),
    .addr_R (  addr_R2 [0]  ),
    .addr_S (  addr_S  ),
    .data_in_T (  data_in_T  ),
    .data_in_R (  data_in_R2  ),
    .data_in_S (  data_in_S  ),
    .en_T (  sel_reg_addr_T  ),
    .en_R (  sel_reg_addr_R0  ),
    .en_S (  sel_reg_addr_S  ),
    .rst_T (  rst_T  ),
    .rst_R (  rst_R2  ),
    .rst_S (  rst_S  ),
    .wr_T (  _035__T  ),
    .wr_R (  _035__R0  ),
    .wr_S (  _035__S  ),
    .data_out_T (  aes_addr_dataout_T  ),
    .data_out_R0 (  aes_addr_dataout_R  ),
    .data_out_S (  aes_addr_dataout_S  ),
    .reg_out_T (  aes_reg_opaddr_T  ),
    .reg_out_R0 (  aes_reg_opaddr_R  ),
    .reg_out_S (  aes_reg_opaddr_S  ),
    .rst ( rst ),
    .reg_out ( aes_reg_opaddr ),
    .wr ( _035_ ),
    .clk ( clk ),
    .addr ( addr[0] ),
    .en ( sel_reg_addr ),
    .data_in ( data_in ),
    .data_out ( aes_addr_dataout )
  );
  assign { addr_R2 [15:1] } = 0;
  logic [15:0] addr_R3 ;
  logic [7:0] data_in_R3 ;
  logic [0:0] sel_reg_len_R0 ;
  logic [0:0] rst_R3 ;
  logic [0:0] _036__R0 ;
// module: reg2byte
  reg2byte aes_reg_oplen_i (
    .addr_T (  addr_T [0]  ),
    .addr_R (  addr_R3 [0]  ),
    .addr_S (  addr_S  ),
    .data_in_T (  data_in_T  ),
    .data_in_R (  data_in_R3  ),
    .data_in_S (  data_in_S  ),
    .en_T (  sel_reg_len_T  ),
    .en_R (  sel_reg_len_R0  ),
    .en_S (  sel_reg_len_S  ),
    .rst_T (  rst_T  ),
    .rst_R (  rst_R3  ),
    .rst_S (  rst_S  ),
    .wr_T (  _036__T  ),
    .wr_R (  _036__R0  ),
    .wr_S (  _036__S  ),
    .data_out_T (  aes_len_dataout_T  ),
    .data_out_R0 (  aes_len_dataout_R  ),
    .data_out_S (  aes_len_dataout_S  ),
    .reg_out_T (  aes_reg_oplen_T  ),
    .reg_out_R0 (  aes_reg_oplen_R  ),
    .reg_out_S (  aes_reg_oplen_S  ),
    .rst ( rst ),
    .reg_out ( aes_reg_oplen ),
    .wr ( _036_ ),
    .clk ( clk ),
    .addr ( addr[0] ),
    .en ( sel_reg_len ),
    .data_in ( data_in ),
    .data_out ( aes_len_dataout )
  );
  assign aes_addr = aes_reg_opaddr;
  assign aes_ctr = aes_reg_ctr;
  assign aes_key0 = aes_curr_key;
  assign aes_len = aes_reg_oplen;
  assign aes_reg_key0 = aes_curr_key;
  assign aes_reg_state_next_idle = reset_byte_counter;
  assign aes_reg_state_next_operate = aes_time_enough;
  assign aes_state = aes_reg_state;
  assign incr_byte_counter = xram_ack;
  assign start_op = reset_byte_counter;
  assign xram_wr = aes_state_write_data;
  assign _036__R = ( _036__R0 );
  assign sel_reg_len_R = ( sel_reg_len_R0 );
  assign _035__R = ( _035__R0 );
  assign sel_reg_addr_R = ( sel_reg_addr_R0 );
  assign _038__R = ( _038__R0 );
  assign sel_reg_key0_R = ( sel_reg_key0_R0 );
  assign _037__R = ( _037__R0 );
  assign rst_R = ( rst_R0 ) | ( rst_R1 ) | ( rst_R2 ) | ( rst_R3 );
  assign sel_reg_ctr_R = ( sel_reg_ctr_R0 );
  assign data_in_R = ( data_in_R0 ) | ( data_in_R1 ) | ( data_in_R2 ) | ( data_in_R3 );
  assign addr_R = ( addr_R0 ) | ( addr_R1 ) | ( addr_R2 ) | ( addr_R3 );
  assign uaes_ctr_R = ( uaes_ctr_R0 );
  assign aes_curr_key_R = ( aes_curr_key_R0 );
 // ground taints for floating regs
  assign aes_reg_state_R = 0;
  assign aes_time_counter_R = 0;
  assign block_counter_R = 0;
  assign byte_counter_R = 0;
  assign encrypted_data_buf_R = 0;
  assign mem_data_buf_R = 0;
  assign operated_bytes_count_R = 0;
 // ground taints for unused wires
  assign { _000__R , _001__R , _002__R , _003__R , _004__R , _005__R , _006__R , _007__R , _008__R , _009__R , _010__R , _011__R , _012__R , _013__R , _014__R , _015__R , _016__R , _017__R , _018__R , _019__R , _020__R , _021__R , _022__R , _023__R , _024__R , _025__R , _026__R , _027__R , _028__R , _029__R , _030__R , _031__R , _032__R , _033__R , _034__R , _039__R , _040__R , _041__R , _042__R , _043__R , _044__R , _045__R , _046__R , _047__R , _048__R , _049__R , _050__R , _051__R , _052__R , _053__R , _054__R , _055__R , _056__R , _057__R , _058__R , _059__R , _060__R , _061__R , _062__R , _063__R , _064__R , _065__R , _066__R , _067__R , _068__R , _069__R , _070__R , _071__R , _072__R , _073__R , _074__R , _075__R , _076__R , _077__R , _078__R , _079__R , _080__R , _081__R , _082__R , _083__R , aes_addr_dataout_R , aes_ctr_dataout_R , aes_key0_dataout_R , aes_len_dataout_R , aes_out_R , aes_reg_ctr_R , aes_reg_key0_R , aes_reg_opaddr_R , aes_reg_oplen_R , aes_reg_state_next_R , aes_reg_state_next_idle_R , aes_reg_state_next_operate_R , aes_reg_state_next_read_data_R , aes_reg_state_next_write_data_R , aes_state_idle_R , aes_state_operate_R , aes_state_read_data_R , aes_state_write_data_R , aes_time_counter_next_R , aes_time_enough_R , block_counter_next_R , byte_counter_next_R , encrypted_data_R , encrypted_data_buf_next_R , fangyuan0_R , fangyuan1_R , fangyuan2_R , in_addr_range_R , incr_byte_counter_R , last_byte_acked_R , mem_data_buf_next_R , more_blocks_R , operated_bytes_count_next_R , reset_byte_counter_R , sel_reg_start_R , sel_reg_state_R , start_op_R , uaes_ctr_nxt_R , wren_R , clk_R , stb_R , wr_R , xram_ack_R , xram_data_in_R  } = 0;
  always @( posedge clk ) begin
    if( rst_zy ) aes_reg_state_PREV_VAL1 <= 0 ;
    if( INSTR_IN_ZY ) aes_reg_state_PREV_VAL1 <= aes_reg_state ;
  end
  always @( posedge clk ) begin
    if( rst_zy ) operated_bytes_count_PREV_VAL1 <= 0 ;
    if( INSTR_IN_ZY ) operated_bytes_count_PREV_VAL1 <= operated_bytes_count ;
  end
  always @( posedge clk ) begin
    if( rst_zy ) block_counter_PREV_VAL1 <= 0 ;
    if( INSTR_IN_ZY ) block_counter_PREV_VAL1 <= block_counter ;
  end
  always @( posedge clk ) begin
    if( rst_zy ) byte_counter_PREV_VAL1 <= 0 ;
    if( INSTR_IN_ZY ) byte_counter_PREV_VAL1 <= byte_counter ;
  end
  always @( posedge clk ) begin
    if( rst_zy ) mem_data_buf_PREV_VAL1 <= 0 ;
    if( INSTR_IN_ZY ) mem_data_buf_PREV_VAL1 <= mem_data_buf ;
  end
  always @( posedge clk ) begin
    if( rst_zy ) encrypted_data_buf_PREV_VAL1 <= 0 ;
    if( INSTR_IN_ZY ) encrypted_data_buf_PREV_VAL1 <= encrypted_data_buf ;
  end
  always @( posedge clk ) begin
    if( rst_zy ) aes_time_counter_PREV_VAL1 <= 0 ;
    if( INSTR_IN_ZY ) aes_time_counter_PREV_VAL1 <= aes_time_counter ;
  end
  always @( posedge clk ) begin
    if( rst_zy ) uaes_ctr_PREV_VAL1 <= 0 ;
    if( INSTR_IN_ZY ) uaes_ctr_PREV_VAL1 <= uaes_ctr ;
  end
 // ground taints for unused wire slices
  assign { addr_R3 [15:1] } = 0;
  assert property( !INSTR_IN_ZY  || aes_reg_state_PREV_VAL1 == 0 );
  assert property( !INSTR_IN_ZY  || aes_time_counter_PREV_VAL1 == 0 );
  assert property( !INSTR_IN_ZY  || block_counter_PREV_VAL1 == 0 );
  assert property( !INSTR_IN_ZY  || byte_counter_PREV_VAL1 == 0 );
  assert property( !INSTR_IN_ZY  || encrypted_data_buf_PREV_VAL1 == 0 );
  assert property( !INSTR_IN_ZY  || mem_data_buf_PREV_VAL1 == 0 );
  assert property( !INSTR_IN_ZY  || operated_bytes_count_PREV_VAL1 == 0 );
  assert property( !INSTR_IN_ZY  || uaes_ctr_PREV_VAL1 == 0 );
  assign rst_zy = rst ;
endmodule
