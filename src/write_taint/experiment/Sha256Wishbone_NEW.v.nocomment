module Sha256Wishbone(clock, reset, io_bus_cyc, io_bus_stb, io_bus_we, io_bus_sel, io_bus_addr, io_bus_data_wr, io_bus_ack, io_bus_data_rd);
  wire _000_;
  wire [31:0] _001_;
  wire [31:0] _002_;
  wire [31:0] _003_;
  wire [31:0] _004_;
  wire [31:0] _005_;
  wire [31:0] _006_;
  wire [31:0] _007_;
  wire [31:0] _008_;
  wire [31:0] _009_;
  wire [31:0] _010_;
  wire [31:0] _011_;
  wire [31:0] _012_;
  wire [31:0] _013_;
  wire [31:0] _014_;
  wire [31:0] _015_;
  wire [31:0] _016_;
  wire [31:0] _017_;
  wire [31:0] _018_;
  wire [31:0] _019_;
  wire [31:0] _020_;
  wire [31:0] _021_;
  wire [31:0] _022_;
  wire [31:0] _023_;
  wire [31:0] _024_;
  wire [31:0] _025_;
  wire [31:0] _026_;
  wire [31:0] _027_;
  wire [31:0] _028_;
  wire [31:0] _029_;
  wire [31:0] _030_;
  wire [31:0] _031_;
  wire [31:0] _032_;
  wire _GEN_25;
  wire _GEN_26;
  wire _GEN_27;
  wire _GEN_28;
  wire _GEN_29;
  wire _GEN_30;
  wire _GEN_31;
  wire _GEN_32;
  wire _GEN_34;
  wire _T;
  wire _T_1;
  wire _T_10;
  wire _T_13;
  wire _T_16;
  wire _T_19;
  wire _T_2;
  wire _T_22;
  wire _T_25;
  wire _T_28;
  wire _T_31;
  wire _T_35;
  wire _T_37;
  wire _T_39;
  wire _T_4;
  wire _T_41;
  wire _T_43;
  wire _T_45;
  wire _T_47;
  wire _T_49;
  wire _T_5;
  wire _T_51;
  wire _T_53;
  wire _T_55;
  wire _T_57;
  wire _T_59;
  wire _T_6;
  wire _T_61;
  wire _T_66;
  wire _T_67;
  wire [2:0] _T_9;
  wire accel_clock;
  wire accel_io_first;
  wire [31:0] accel_io_inputData;
  wire accel_io_inputReady;
  wire accel_io_inputValid;
  wire [31:0] accel_io_outputData_0;
  wire [31:0] accel_io_outputData_1;
  wire [31:0] accel_io_outputData_2;
  wire [31:0] accel_io_outputData_3;
  wire [31:0] accel_io_outputData_4;
  wire [31:0] accel_io_outputData_5;
  wire [31:0] accel_io_outputData_6;
  wire [31:0] accel_io_outputData_7;
  wire accel_io_outputValid;
  wire accel_reset;
  reg ack;
  input clock;
  reg [31:0] data_rd;
  output io_bus_ack;
  input [31:0] io_bus_addr;
  input io_bus_cyc;
  output [31:0] io_bus_data_rd;
  input [31:0] io_bus_data_wr;
  input [3:0] io_bus_sel;
  input io_bus_stb;
  input io_bus_we;
  input reset;
  assign _T = io_bus_cyc & io_bus_stb;
  assign _T_2 = _T & _T_1;
  assign _T_66 = io_bus_sel[0] & io_bus_data_wr[0];
  assign _GEN_25 = _T_67 & _T_6;
  assign _GEN_27 = _T_4 & _T_66;
  assign _GEN_30 = io_bus_we & _GEN_27;
  assign _GEN_31 = io_bus_we & _GEN_28;
  assign _GEN_34 = _T_2 & _GEN_32;
  assign accel_io_first = _T_2 & _GEN_30;
  assign accel_io_inputValid = _T_2 & _GEN_31;
  assign _T_4 = ! io_bus_addr[31:2];
  assign _T_10 = 3'b100 == io_bus_addr[31:2];
  assign _T_13 = 3'b101 == io_bus_addr[31:2];
  assign _T_16 = 3'b110 == io_bus_addr[31:2];
  assign _T_19 = 3'b111 == io_bus_addr[31:2];
  assign _T_22 = 4'b1000 == io_bus_addr[31:2];
  assign _T_25 = 4'b1001 == io_bus_addr[31:2];
  assign _T_28 = 4'b1010 == io_bus_addr[31:2];
  assign _T_31 = 4'b1011 == io_bus_addr[31:2];
  assign _T_35 = io_bus_addr[31:2] == 5'b10100;
  assign _T_37 = io_bus_addr[31:2] == 5'b10101;
  assign _T_39 = io_bus_addr[31:2] == 5'b10110;
  assign _T_41 = io_bus_addr[31:2] == 5'b10111;
  assign _T_43 = io_bus_addr[31:2] == 5'b11000;
  assign _T_45 = io_bus_addr[31:2] == 5'b11001;
  assign _T_47 = io_bus_addr[31:2] == 5'b11010;
  assign _T_49 = io_bus_addr[31:2] == 5'b11011;
  assign _T_51 = io_bus_addr[31:2] == 5'b11100;
  assign _T_53 = io_bus_addr[31:2] == 5'b11101;
  assign _T_55 = io_bus_addr[31:2] == 5'b11110;
  assign _T_57 = io_bus_addr[31:2] == 5'b11111;
  assign _T_59 = io_bus_addr[31:2] == 6'b100000;
  assign _T_61 = io_bus_addr[31:2] == 6'b100001;
  assign _T_67 = 1'b1 == io_bus_addr[31:2];
  assign _T_1 = ~ ack;
  assign _GEN_29 = _T_4 | _GEN_26;
  always @(posedge clock)
      data_rd <= _001_;
  always @(posedge clock)
      ack <= _000_;
  assign _000_ = reset ? 1'b0 : _GEN_34;
  assign _002_ = accel_io_outputValid ? accel_io_outputData_7 : 32'd0;
  assign _003_ = _T_31 ? _002_ : 32'd0;
  assign _004_ = accel_io_outputValid ? accel_io_outputData_6 : 32'd0;
  assign _005_ = _T_28 ? _004_ : _003_;
  assign _006_ = accel_io_outputValid ? accel_io_outputData_5 : 32'd0;
  assign _007_ = _T_25 ? _006_ : _005_;
  assign _008_ = accel_io_outputValid ? accel_io_outputData_4 : 32'd0;
  assign _009_ = _T_22 ? _008_ : _007_;
  assign _010_ = accel_io_outputValid ? accel_io_outputData_3 : 32'd0;
  assign _011_ = _T_19 ? _010_ : _009_;
  assign _012_ = accel_io_outputValid ? accel_io_outputData_2 : 32'd0;
  assign _013_ = _T_16 ? _012_ : _011_;
  assign _014_ = accel_io_outputValid ? accel_io_outputData_1 : 32'd0;
  assign _015_ = _T_13 ? _014_ : _013_;
  assign _016_ = accel_io_outputValid ? accel_io_outputData_0 : 32'd0;
  assign _017_ = _T_10 ? _016_ : _015_;
  wire [31:0] addedVar0;
  assign addedVar0 = { 29'b00000000000000000000000000000, accel_io_outputValid, _T_6, 1'b0 };
  assign _018_ = _T_4 ? addedVar0 : _017_;
  assign _019_ = _T_35 ? 32'd843139155 : _018_;
  assign _020_ = _T_37 ? 32'd1126184501 : _019_;
  assign _021_ = _T_39 ? 32'd543519343 : _020_;
  assign _022_ = _T_41 ? 32'd1092647266 : _021_;
  assign _023_ = _T_43 ? 32'd1752394094 : _022_;
  assign _024_ = _T_45 ? 32'd1852396320 : _023_;
  assign _025_ = _T_47 ? 32'd1851877479 : _024_;
  assign _026_ = _T_49 ? 32'd824713321 : _025_;
  assign _027_ = _T_51 ? 32'd892415794 : _026_;
  assign _028_ = _T_53 ? 32'd842019375 : _027_;
  assign _029_ = _T_55 ? 32'd942743600 : _028_;
  assign _030_ = _T_57 ? 32'd540226106 : _029_;
  assign _031_ = _T_59 ? 32'd693392208 : _030_;
  assign _032_ = _T_61 ? 32'd2105376 : _031_;
  assign _001_ = _T_2 ? _032_ : data_rd;
  assign _GEN_26 = _T_67 ? _T_6 : 1'b1;
  assign _GEN_28 = _T_4 ? 1'b0 : _GEN_25;
  assign _GEN_32 = io_bus_we ? _GEN_29 : 1'b1;
  Sha256Accel accel (
    .clock(clock),
    .io_first(accel_io_first),
    .io_inputData(io_bus_data_wr),
    .io_inputReady(_T_6),
    .io_inputValid(accel_io_inputValid),
    .io_outputData_0(accel_io_outputData_0),
    .io_outputData_1(accel_io_outputData_1),
    .io_outputData_2(accel_io_outputData_2),
    .io_outputData_3(accel_io_outputData_3),
    .io_outputData_4(accel_io_outputData_4),
    .io_outputData_5(accel_io_outputData_5),
    .io_outputData_6(accel_io_outputData_6),
    .io_outputData_7(accel_io_outputData_7),
    .io_outputValid(accel_io_outputValid),
    .reset(reset)
  );
  assign _T_5 = accel_io_outputValid;
  assign _T_9 = { accel_io_outputValid, _T_6, 1'b0 };
  assign accel_clock = clock;
  assign accel_io_inputData = io_bus_data_wr;
  assign accel_io_inputReady = _T_6;
  assign accel_reset = reset;
  assign io_bus_ack = ack;
  assign io_bus_data_rd = data_rd;
endmodule
