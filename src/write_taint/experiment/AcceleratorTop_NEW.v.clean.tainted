  logic _T_2;
  logic _T_2_T ;
  logic _T_6;
  logic _T_6_T ;
  logic aes_clock;
  logic aes_clock_T ;
  logic aes_io_bus_ack;
  logic aes_io_bus_ack_T ;
  logic [15:0] aes_io_bus_addr;
  logic [15:0] aes_io_bus_addr_T ;
  logic aes_io_bus_cyc;
  logic aes_io_bus_cyc_T ;
  logic [31:0] aes_io_bus_data_rd;
  logic [31:0] aes_io_bus_data_rd_T ;
  logic [31:0] aes_io_bus_data_wr;
  logic [31:0] aes_io_bus_data_wr_T ;
  logic [3:0] aes_io_bus_sel;
  logic [3:0] aes_io_bus_sel_T ;
  logic aes_io_bus_stb;
  logic aes_io_bus_stb_T ;
  logic aes_io_bus_we;
  logic aes_io_bus_we_T ;
  logic aes_reset;
  logic aes_reset_T ;
  input clock;
  output io_bus_ack;
  logic io_bus_ack ;
  output io_bus_ack_T ;
  logic io_bus_ack_T ;
  input [31:0] io_bus_addr;
  input [31:0] io_bus_addr_T ;
  input io_bus_cyc;
  input io_bus_cyc_T ;
  output [31:0] io_bus_data_rd;
  logic [31:0] io_bus_data_rd ;
  output [31:0] io_bus_data_rd_T ;
  logic [31:0] io_bus_data_rd_T ;
  input [31:0] io_bus_data_wr;
  input [31:0] io_bus_data_wr_T ;
  output io_bus_err;
  logic io_bus_err ;
  output io_bus_err_T ;
  logic io_bus_err_T ;
  input [3:0] io_bus_sel;
  input [3:0] io_bus_sel_T ;
  input io_bus_stb;
  input io_bus_stb_T ;
  input io_bus_we;
  input io_bus_we_T ;
  input reset;
  input reset_T ;
  logic sha256_clock;
  logic sha256_clock_T ;
  logic sha256_io_bus_ack;
  logic sha256_io_bus_ack_T ;
  logic [15:0] sha256_io_bus_addr;
  logic [15:0] sha256_io_bus_addr_T ;
  logic sha256_io_bus_cyc;
  logic sha256_io_bus_cyc_T ;
  logic [31:0] sha256_io_bus_data_rd;
  logic [31:0] sha256_io_bus_data_rd_T ;
  logic [31:0] sha256_io_bus_data_wr;
  logic [31:0] sha256_io_bus_data_wr_T ;
  logic [3:0] sha256_io_bus_sel;
  logic [3:0] sha256_io_bus_sel_T ;
  logic sha256_io_bus_stb;
  logic sha256_io_bus_stb_T ;
  logic sha256_io_bus_we;
  logic sha256_io_bus_we_T ;
  logic sha256_reset;
  logic sha256_reset_T ;
  assign aes_io_bus_cyc = io_bus_cyc & _T_2;
  assign aes_io_bus_cyc_T = ( io_bus_cyc_T & _T_2 ) | ( _T_2_T & io_bus_cyc ) ;
  assign sha256_io_bus_cyc = io_bus_cyc & _T_6;
  assign sha256_io_bus_cyc_T = ( io_bus_cyc_T & _T_6 ) | ( _T_6_T & io_bus_cyc ) ;
  assign _T_2 = ! io_bus_addr[19:16];
  assign _T_2_T = | io_bus_addr_T [19:16] ;
  assign _T_6 = io_bus_addr[19:16] == 1'b1;
  assign _T_6_T = | io_bus_addr_T [19:16] ;
  assign io_bus_ack = _T_2 ? aes_io_bus_ack : sha256_io_bus_ack;
  assign io_bus_ack_T = _T_2 ? ( { 1{ _T_2_T  }} | aes_io_bus_ack_T ) : ( { 1{ _T_2_T  }} | sha256_io_bus_ack_T );
  assign io_bus_data_rd = _T_2 ? aes_io_bus_data_rd : sha256_io_bus_data_rd;
  assign io_bus_data_rd_T = _T_2 ? ( { 32{ _T_2_T  }} | aes_io_bus_data_rd_T ) : ( { 32{ _T_2_T  }} | sha256_io_bus_data_rd_T );
// module: AesWishbone
  AesWishbone aes (
    .YZC(YZC[64:0]),
    .io_bus_addr_T ( {  16'h0 , io_bus_addr_T [15:0]  } ),
    .io_bus_cyc_T (  aes_io_bus_cyc_T  ),
    .io_bus_data_wr_T (  io_bus_data_wr_T  ),
    .io_bus_sel_T (  io_bus_sel_T  ),
    .io_bus_stb_T (  io_bus_stb_T  ),
    .io_bus_we_T (  io_bus_we_T  ),
    .reset_T (  reset_T  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .io_bus_ack_T (  aes_io_bus_ack_T  ),
    .io_bus_data_rd_T (  aes_io_bus_data_rd_T  ),
    .reset ( reset ),
    .io_bus_we ( io_bus_we ),
    .io_bus_data_wr ( io_bus_data_wr ),
    .io_bus_stb ( io_bus_stb ),
    .io_bus_sel ( io_bus_sel ),
    .io_bus_data_rd ( aes_io_bus_data_rd ),
    .io_bus_addr ( { 16'b0000000000000000, io_bus_addr[15:0] } ),
    .io_bus_cyc ( aes_io_bus_cyc ),
    .io_bus_ack ( aes_io_bus_ack ),
    .clock ( clock )
  );
// module: Sha256Wishbone
  Sha256Wishbone sha256 (
    .YZC(YZC[106:65]),
    .io_bus_addr_T ( {  16'h0 , io_bus_addr_T [15:0]  } ),
    .io_bus_cyc_T (  sha256_io_bus_cyc_T  ),
    .io_bus_data_wr_T (  io_bus_data_wr_T  ),
    .io_bus_sel_T (  io_bus_sel_T  ),
    .io_bus_stb_T (  io_bus_stb_T  ),
    .io_bus_we_T (  io_bus_we_T  ),
    .reset_T (  reset_T  ),
    .INSTR_IN_ZY(INSTR_IN_ZY),
    .rst_zy(rst_zy),
    .io_bus_ack_T (  sha256_io_bus_ack_T  ),
    .io_bus_data_rd_T (  sha256_io_bus_data_rd_T  ),
    .reset ( reset ),
    .io_bus_we ( io_bus_we ),
    .io_bus_data_wr ( io_bus_data_wr ),
    .io_bus_stb ( io_bus_stb ),
    .io_bus_sel ( io_bus_sel ),
    .io_bus_data_rd ( sha256_io_bus_data_rd ),
    .io_bus_addr ( { 16'b0000000000000000, io_bus_addr[15:0] } ),
    .io_bus_cyc ( sha256_io_bus_cyc ),
    .io_bus_ack ( sha256_io_bus_ack ),
    .clock ( clock )
  );
  assign aes_clock = clock;
  assign aes_clock_T = clock_T ;
  assign aes_io_bus_addr = io_bus_addr[15:0];
  assign aes_io_bus_addr_T = io_bus_addr_T [15:0] ;
  assign aes_io_bus_data_wr = io_bus_data_wr;
  assign aes_io_bus_data_wr_T = io_bus_data_wr_T ;
  assign aes_io_bus_sel = io_bus_sel;
  assign aes_io_bus_sel_T = io_bus_sel_T ;
  assign aes_io_bus_stb = io_bus_stb;
  assign aes_io_bus_stb_T = io_bus_stb_T ;
  assign aes_io_bus_we = io_bus_we;
  assign aes_io_bus_we_T = io_bus_we_T ;
  assign aes_reset = reset;
  assign aes_reset_T = reset_T ;
  assign io_bus_err = 1'b0;
  assign io_bus_err_T = 0 ;
  assign sha256_clock = clock;
  assign sha256_clock_T = clock_T ;
  assign sha256_io_bus_addr = io_bus_addr[15:0];
  assign sha256_io_bus_addr_T = io_bus_addr_T [15:0] ;
  assign sha256_io_bus_data_wr = io_bus_data_wr;
  assign sha256_io_bus_data_wr_T = io_bus_data_wr_T ;
  assign sha256_io_bus_sel = io_bus_sel;
  assign sha256_io_bus_sel_T = io_bus_sel_T ;
  assign sha256_io_bus_stb = io_bus_stb;
  assign sha256_io_bus_stb_T = io_bus_stb_T ;
  assign sha256_io_bus_we = io_bus_we;
  assign sha256_io_bus_we_T = io_bus_we_T ;
  assign sha256_reset = reset;
  assign sha256_reset_T = reset_T ;
  assign rst_zy = reset ;
endmodule
