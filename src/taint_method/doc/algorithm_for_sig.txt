The goal is two deal with combine-split cases.
0. separate the operators into two groups: pass and non-pass(arithmetic, relation, logic, )
1. find out all src_concat and both_concat expressions
2. split the dest in the above two kinds of expressions. then the different parts of dest can have different sig
3. if dest is used only in non-pass, dest_sig = 0;
4. if dest is used somewhere in ite, split that whole expression(new dest and the other operand)
5. if used in 


//////

1. for each register, go backward and iteratively check its RHS, until RHS is another register.
2. if sees a non-pass function, terminate that branch, since the sig of non-pass function is definitely 0, and cannot be the reg_sig.
3. if sees an expression where destSlice is not empty, split the register accordingly, and all the variables along that path, because different parts need different sigs.
4. if sees an src_concat, split the register accordingly, and all the variables along that path, because different parts need different sigs.
5. if sees an both_concat, .....
6. After the register is splitted, 


///////

1. for each concat operator, going forward to see which registers(slices) are affected, and going backward to see which registers/slices it come from(Of course, in both forward and backward, we look at paths that only have pass operators). Thus we get two sets. If some register appear in both sets, then we need to go to step 2. For other registers, the concat does not have an effect.
2. For those interesting registers, we need to find out, which slices are affected and is it possible that register(slices) repeat itself. If so, I need to check what is the condition for repeating itself. That condtion is used to replace sig. And then, reg_sig is set to 0 constantly. (So actually we do not need to split variables)
3. Because I need to going forward and backward, I need to have a good data structure:
(1) because we only care about pass operators, we only need to store information of those.  
4. When should we do this kind of tran
