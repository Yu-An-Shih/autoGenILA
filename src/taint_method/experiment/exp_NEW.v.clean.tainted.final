module exp( clk , rst , in , clk_t , rst_t , in_t , out_r0 , out_c0 , out , clk_r , clk_x , clk_c , rst_r , rst_x , rst_c , in_r , in_x , in_c , out_t );
  logic rst_zy;
  integer i;
  logic out;
  logic  out_t ;
  logic  out_r ;
  logic  out_x ;
  logic  out_c ;
  logic [1:0] out_S ;
  logic out_t_flag ;
  logic out_r_flag ;
  input clk;
  input clk_t ;
  wire [1:0] clk_S ;
  output clk_r ;
  output clk_x ;
  output clk_c ;
  assign clk_S = rst_zy ? 2 : 0 ;
  input rst;
  input rst_t ;
  wire [1:0] rst_S ;
  output rst_r ;
  output rst_x ;
  output rst_c ;
  assign rst_S = rst ? 2 : 0 ;
  input in;
  input in_t ;
  wire [1:0] in_S ;
  output in_r ;
  output in_x ;
  output in_c ;
  assign in_S = rst ? 2 : 0 ;
  output out;
  output out_t ;
  input out_r0 ;
  input out_c0 ;
  wire out_x0 ;
  assign out_x0 = out_r0 ;
  assign out_c = ( out_c0 );
  assign out_x = ( out_x0 );
  assign out_r = ( out_x0 & out_r0 );
 // ground taints for floating regs
 // ground taints for used wires
 // ground taints for unused wire slices
  assert property(out_r_flag == 0 );
  assign rst_zy = rst ;
endmodule
