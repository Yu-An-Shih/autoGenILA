module exp ( clk , in , valid , rst_zy , clk_T , in_T , out_R0 , out_C0 , valid_T , out , clk_R , clk_X , clk_C , in_R , in_X , in_C , out_T , valid_R , valid_X , valid_C );
  input rst_zy;
  integer i;
  logic INSTR_IN_ZY;
  assign INSTR_IN_ZY = in_T > 0 || valid_T > 0 || 0 ;
  logic [4:0] _00_;
  logic [4:0] _00__T ;
  logic [4:0] _00__R ;
  logic [4:0] _00__C ;
  logic [4:0] _00__X ;
  logic [2:0] _00__S ;
  logic [4:0] _01_;
  logic [4:0] _01__T ;
  logic [4:0] _01__R ;
  logic [4:0] _01__C ;
  logic [4:0] _01__X ;
  logic [2:0] _01__S ;
  logic [4:0] _02_;
  logic [4:0] _02__T ;
  logic [4:0] _02__R ;
  logic [4:0] _02__C ;
  logic [4:0] _02__X ;
  logic [2:0] _02__S ;
  logic [4:0] _03_;
  logic [4:0] _03__T ;
  logic [4:0] _03__R ;
  logic [4:0] _03__C ;
  logic [4:0] _03__X ;
  logic [2:0] _03__S ;
  logic [4:0] _04_;
  logic [4:0] _04__T ;
  logic [4:0] _04__R ;
  logic [4:0] _04__C ;
  logic [4:0] _04__X ;
  logic [2:0] _04__S ;
  logic [8:0] _05_;
  logic [8:0] _05__T ;
  logic [8:0] _05__R ;
  logic [8:0] _05__C ;
  logic [8:0] _05__X ;
  logic [2:0] _05__S ;
  logic [5:0] _06_;
  logic [5:0] _06__T ;
  logic [5:0] _06__R ;
  logic [5:0] _06__C ;
  logic [5:0] _06__X ;
  logic [2:0] _06__S ;
  logic [6:0] _07_;
  logic [6:0] _07__T ;
  logic [6:0] _07__R ;
  logic [6:0] _07__C ;
  logic [6:0] _07__X ;
  logic [2:0] _07__S ;
  logic [4:0] _08_;
  logic [4:0] _08__T ;
  logic [4:0] _08__R ;
  logic [4:0] _08__C ;
  logic [4:0] _08__X ;
  logic [2:0] _08__S ;
  logic [31:0] _09_;
  logic [31:0] _09__T ;
  logic [31:0] _09__R ;
  logic [31:0] _09__C ;
  logic [31:0] _09__X ;
  logic [2:0] _09__S ;
  logic [31:0] _10_;
  logic [31:0] _10__T ;
  logic [31:0] _10__R ;
  logic [31:0] _10__C ;
  logic [31:0] _10__X ;
  logic [2:0] _10__S ;
  input clk;
  input clk_T ;
  wire [2:0] clk_S ;
  output clk_R ;
  output clk_X ;
  output clk_C ;
  assign clk_S = 0 ;
  input [4:0] in;
  input [4:0] in_T ;
  wire [2:0] in_S ;
  output [4:0] in_R ;
  output [4:0] in_X ;
  output [4:0] in_C ;
  assign in_S = 0 ;
  output [4:0] out;
  logic [4:0] out ;
  output [4:0] out_T ;
  logic [4:0] out_T ;
  logic [4:0] out_R ;
  logic [4:0] out_C ;
  logic [4:0] out_X ;
  logic [2:0] out_S ;
  input [4:0] out_R0 ;
  input [4:0] out_C0 ;
  wire [4:0] out_X0 ;
  assign out_X0 = out_R0 ;
  logic [4:0] reg1;
  logic [4:0]  reg1_T ;
  logic [4:0]  reg1_PREV_VAL1 ;
  logic [4:0]  reg1_PREV_VAL2 ;
  logic [4:0]  reg1_R ;
  logic [4:0]  reg1_X ;
  logic [4:0]  reg1_C ;
  logic [2:0] reg1_S ;
  logic reg1_t_flag ;
  logic reg1_r_flag ;
  assign reg1_S = 3 ;
  logic [4:0] reg2;
  logic [4:0]  reg2_T ;
  logic [4:0]  reg2_PREV_VAL1 ;
  logic [4:0]  reg2_PREV_VAL2 ;
  logic [4:0]  reg2_R ;
  logic [4:0]  reg2_X ;
  logic [4:0]  reg2_C ;
  logic [2:0] reg2_S ;
  logic reg2_t_flag ;
  logic reg2_r_flag ;
  assign reg2_S = 4 ;
  logic [4:0] reg3;
  logic [4:0]  reg3_T ;
  logic [4:0]  reg3_PREV_VAL1 ;
  logic [4:0]  reg3_PREV_VAL2 ;
  logic [4:0]  reg3_R ;
  logic [4:0]  reg3_X ;
  logic [4:0]  reg3_C ;
  logic [2:0] reg3_S ;
  logic reg3_t_flag ;
  logic reg3_r_flag ;
  assign reg3_S = 5 ;
  logic [4:0] reg4;
  logic [4:0]  reg4_T ;
  logic [4:0]  reg4_PREV_VAL1 ;
  logic [4:0]  reg4_PREV_VAL2 ;
  logic [4:0]  reg4_R ;
  logic [4:0]  reg4_X ;
  logic [4:0]  reg4_C ;
  logic [2:0] reg4_S ;
  logic reg4_t_flag ;
  logic reg4_r_flag ;
  assign reg4_S = 6 ;
  logic [4:0] reg5;
  logic [4:0]  reg5_T ;
  logic [4:0]  reg5_PREV_VAL1 ;
  logic [4:0]  reg5_PREV_VAL2 ;
  logic [4:0]  reg5_R ;
  logic [4:0]  reg5_X ;
  logic [4:0]  reg5_C ;
  logic [2:0] reg5_S ;
  logic reg5_t_flag ;
  logic reg5_r_flag ;
  assign reg5_S = 7 ;
  input valid;
  input valid_T ;
  wire [2:0] valid_S ;
  output valid_R ;
  output valid_X ;
  output valid_C ;
  assign valid_S = 0 ;
  logic [7:0] fangyuan0;
  logic [7:0] fangyuan0_T ;
  logic [7:0] fangyuan0_R ;
  logic [7:0] fangyuan0_C ;
  logic [7:0] fangyuan0_X ;
  assign fangyuan0 = { _09_[7:5], _08_ };
  assign fangyuan0_T = {  _09__T [7:5] , _08__T  };
  logic [2:0] fangyuan0_S ;
  assign fangyuan0_S = 0 ;
  logic [31:0] _09__R0 ;
  logic [31:0] _09__X0 ;
  logic [31:0] _09__C0 ;
  assign _09__R0 [7:5] = fangyuan0_R [7:5] ;
  assign _09__X0 [7:5] = fangyuan0_X [7:5] ;
  assign _09__C0 [7:5] = fangyuan0_C [7:5] ;
  logic [4:0] _08__R0 ;
  logic [4:0] _08__X0 ;
  logic [4:0] _08__C0 ;
  assign _08__R0 = fangyuan0_R [4:0] ;
  assign _08__X0 = fangyuan0_X [4:0] ;
  assign _08__C0 = fangyuan0_C [4:0] ;

  assign _05_ = fangyuan0 + reg5;
  assign _05__S = 0 ;
  logic [7:0] fangyuan0_C0 ;
  logic [7:0] fangyuan0_R0 ;
  logic [7:0] fangyuan0_X0 ;
  logic [4:0] reg5_C0 ;
  logic [4:0] reg5_R0 ;
  logic [4:0] reg5_X0 ;
  assign _05__T = fangyuan0_T | reg5_T ;
  assign fangyuan0_C0 = _05__C ;
  assign fangyuan0_X0 = _05__X ;
  assign reg5_C0 = _05__C ;
  assign reg5_X0 = _05__X ;
  assign fangyuan0_R0 = _05__R | ( _05__C & reg5_T );
  assign reg5_R0 = _05__R | ( _05__C & fangyuan0_T );
  assign _06_ = reg1 + reg2;
  assign _06__S = 0 ;
  logic [4:0] reg1_C0 ;
  logic [4:0] reg1_R0 ;
  logic [4:0] reg1_X0 ;
  logic [4:0] reg2_C0 ;
  logic [4:0] reg2_R0 ;
  logic [4:0] reg2_X0 ;
  assign _06__T = reg1_T | reg2_T ;
  assign reg1_C0 = _06__C ;
  assign reg1_X0 = _06__X ;
  assign reg2_C0 = _06__C ;
  assign reg2_X0 = _06__X ;
  assign reg1_R0 = _06__R | ( _06__C & reg2_T );
  assign reg2_R0 = _06__R | ( _06__C & reg1_T );
  assign _07_ = _06_ + reg3;
  assign _07__S = 0 ;
  logic [5:0] _06__C0 ;
  logic [5:0] _06__R0 ;
  logic [5:0] _06__X0 ;
  logic [4:0] reg3_C0 ;
  logic [4:0] reg3_R0 ;
  logic [4:0] reg3_X0 ;
  assign _07__T = _06__T | reg3_T ;
  assign _06__C0 = _07__C ;
  assign _06__X0 = _07__X ;
  assign reg3_C0 = _07__C ;
  assign reg3_X0 = _07__X ;
  assign _06__R0 = _07__R | ( _07__C & reg3_T );
  assign reg3_R0 = _07__R | ( _07__C & _06__T );
  logic [7:0] fangyuan1;
  logic [7:0] fangyuan1_T ;
  logic [7:0] fangyuan1_R ;
  logic [7:0] fangyuan1_C ;
  logic [7:0] fangyuan1_X ;
  assign { _09_[7:5], _08_ } = fangyuan1;
  assign {  _09__T [7:5] , _08__T  } = fangyuan1_T ;
  assign {  _09__S , _08__S  } = 0;
  assign fangyuan1_R = {  _09__R [7:5] , _08__R  };
  assign fangyuan1_X = {  _09__X [7:5] , _08__X  };
  assign fangyuan1_C = {  _09__C [7:5] , _08__C  };

  assign fangyuan1 = _07_ + reg4;
  assign fangyuan1_S = 0 ;
  logic [6:0] _07__C0 ;
  logic [6:0] _07__R0 ;
  logic [6:0] _07__X0 ;
  logic [4:0] reg4_C0 ;
  logic [4:0] reg4_R0 ;
  logic [4:0] reg4_X0 ;
  assign fangyuan1_T = _07__T | reg4_T ;
  assign _07__C0 = fangyuan1_C ;
  assign _07__X0 = fangyuan1_X ;
  assign reg4_C0 = fangyuan1_C ;
  assign reg4_X0 = fangyuan1_X ;
  assign _07__R0 = fangyuan1_R | ( fangyuan1_C & reg4_T );
  assign reg4_R0 = fangyuan1_R | ( fangyuan1_C & _07__T );
  logic [31:0] fangyuan2;
  logic [31:0] fangyuan2_T ;
  logic [31:0] fangyuan2_R ;
  logic [31:0] fangyuan2_C ;
  logic [31:0] fangyuan2_X ;
  assign { _10_[31:5], out } = fangyuan2;
  assign {  _10__T [31:5] , out_T  } = fangyuan2_T ;
  assign {  _10__S , out_S  } = 0;
  assign fangyuan2_R = {  _10__R [31:5] , out_R  };
  assign fangyuan2_X = {  _10__X [31:5] , out_X  };
  assign fangyuan2_C = {  _10__C [31:5] , out_C  };
  logic [31:0] fangyuan3;
  logic [31:0] fangyuan3_T ;
  logic [31:0] fangyuan3_R ;
  logic [31:0] fangyuan3_C ;
  logic [31:0] fangyuan3_X ;
  assign fangyuan3 = { 23'b00000000000000000000000, _05_ };
  assign fangyuan3_T = {  23'h0 , _05__T  };
  logic [2:0] fangyuan3_S ;
  assign fangyuan3_S = 0 ;
  logic [8:0] _05__R0 ;
  logic [8:0] _05__X0 ;
  logic [8:0] _05__C0 ;
  assign _05__R0 = fangyuan3_R [8:0] ;
  assign _05__X0 = fangyuan3_X [8:0] ;
  assign _05__C0 = fangyuan3_C [8:0] ;

  assign fangyuan2 = fangyuan3 / 32'd5;
  assign fangyuan2_S = 0 ;
  logic [31:0] fangyuan3_C0 ;
  logic [31:0] fangyuan3_R0 ;
  logic [31:0] fangyuan3_X0 ;
  assign fangyuan2_T = fangyuan3_T ;
  assign fangyuan3_C0 = fangyuan2_C ;
  assign fangyuan3_R0 = fangyuan2_R ;
  assign fangyuan3_X0 = fangyuan2_X ;
  always @(posedge clk)
      reg1 <= _00_;
  logic [4:0] _00__X0 ;
  logic [4:0] _00__R0 ;
  logic [4:0] _00__C0 ;
  assign _00__X0 = { 5{ reg1_S != _00__S }} ;
  assign _00__R0 = 0 ;
  assign _00__C0 = 0 ;
  always @( posedge clk )
      reg1_T 		<= rst_zy ? 0 : ( _00__T & _00__X0 );
  always @( posedge clk )
      reg1_t_flag 	<= rst_zy ? 0 : reg1_t_flag ? 1 : | _00__T & ( | _00__X0 );
  always @( posedge clk )
      reg1_r_flag 	<= rst_zy ? 0 : reg1_r_flag ? 1 : reg1_t_flag ? 0 : ( | reg1_R ) ;
  always @(posedge clk)
      reg2 <= _01_;
  logic [4:0] _01__X0 ;
  logic [4:0] _01__R0 ;
  logic [4:0] _01__C0 ;
  assign _01__X0 = { 5{ reg2_S != _01__S }} ;
  assign _01__R0 = 0 ;
  assign _01__C0 = 0 ;
  always @( posedge clk )
      reg2_T 		<= rst_zy ? 0 : ( _01__T & _01__X0 );
  always @( posedge clk )
      reg2_t_flag 	<= rst_zy ? 0 : reg2_t_flag ? 1 : | _01__T & ( | _01__X0 );
  always @( posedge clk )
      reg2_r_flag 	<= rst_zy ? 0 : reg2_r_flag ? 1 : reg2_t_flag ? 0 : ( | reg2_R ) ;
  always @(posedge clk)
      reg3 <= _02_;
  logic [4:0] _02__X0 ;
  logic [4:0] _02__R0 ;
  logic [4:0] _02__C0 ;
  assign _02__X0 = { 5{ reg3_S != _02__S }} ;
  assign _02__R0 = 0 ;
  assign _02__C0 = 0 ;
  always @( posedge clk )
      reg3_T 		<= rst_zy ? 0 : ( _02__T & _02__X0 );
  always @( posedge clk )
      reg3_t_flag 	<= rst_zy ? 0 : reg3_t_flag ? 1 : | _02__T & ( | _02__X0 );
  always @( posedge clk )
      reg3_r_flag 	<= rst_zy ? 0 : reg3_r_flag ? 1 : reg3_t_flag ? 0 : ( | reg3_R ) ;
  always @(posedge clk)
      reg4 <= _03_;
  logic [4:0] _03__X0 ;
  logic [4:0] _03__R0 ;
  logic [4:0] _03__C0 ;
  assign _03__X0 = { 5{ reg4_S != _03__S }} ;
  assign _03__R0 = 0 ;
  assign _03__C0 = 0 ;
  always @( posedge clk )
      reg4_T 		<= rst_zy ? 0 : ( _03__T & _03__X0 );
  always @( posedge clk )
      reg4_t_flag 	<= rst_zy ? 0 : reg4_t_flag ? 1 : | _03__T & ( | _03__X0 );
  always @( posedge clk )
      reg4_r_flag 	<= rst_zy ? 0 : reg4_r_flag ? 1 : reg4_t_flag ? 0 : ( | reg4_R ) ;
  always @(posedge clk)
      reg5 <= _04_;
  logic [4:0] _04__X0 ;
  logic [4:0] _04__R0 ;
  logic [4:0] _04__C0 ;
  assign _04__X0 = { 5{ reg5_S != _04__S }} ;
  assign _04__R0 = 0 ;
  assign _04__C0 = 0 ;
  always @( posedge clk )
      reg5_T 		<= rst_zy ? 0 : ( _04__T & _04__X0 );
  always @( posedge clk )
      reg5_t_flag 	<= rst_zy ? 0 : reg5_t_flag ? 1 : | _04__T & ( | _04__X0 );
  always @( posedge clk )
      reg5_r_flag 	<= rst_zy ? 0 : reg5_r_flag ? 1 : reg5_t_flag ? 0 : ( | reg5_R ) ;
  assign _00_ = valid ? in : reg1;
  logic [0:0] valid_C0 ;
  logic [0:0] valid_R0 ;
  logic [0:0] valid_X0 ;
  assign valid_C0 = | _00__C ;
  assign valid_X0 = | _00__X ;
  assign _00__T = valid ? ( { 5{ valid_T  }} | in_T ) : ( { 5{ valid_T  }} | reg1_T );
  assign _00__S = valid ? in_S : reg1_S ;
  assign valid_R0 = ( | (_00__R | ( _00__C & ( { 5{ valid }} & in_T | { 5{ !valid }} & reg1_T )))) && in != reg1 ;
  logic [4:0] in_C0 ;
  logic [4:0] in_R0 ;
  logic [4:0] in_X0 ;
  assign in_C0 = { 5{ valid }} ;
  assign in_R0 = { 5{ valid }} & ( _00__R | ( { 5{ valid_T  }} & _00__C ));
  assign in_X0 = { 5{ valid }} & _00__X ;
  logic [4:0] reg1_C1 ;
  logic [4:0] reg1_R1 ;
  logic [4:0] reg1_X1 ;
  assign reg1_C1 = { 5{ !valid }} ;
  assign reg1_R1 = { 5{ !valid }} & ( _00__R | ( { 5{ valid_T  }} & _00__C ));
  assign reg1_X1 = { 5{ !valid }} & _00__X ;
  assign _01_ = valid ? reg1 : reg2;
  logic [0:0] valid_C1 ;
  logic [0:0] valid_R1 ;
  logic [0:0] valid_X1 ;
  assign valid_C1 = | _01__C ;
  assign valid_X1 = | _01__X ;
  assign _01__T = valid ? ( { 5{ valid_T  }} | reg1_T ) : ( { 5{ valid_T  }} | reg2_T );
  assign _01__S = valid ? reg1_S : reg2_S ;
  assign valid_R1 = ( | (_01__R | ( _01__C & ( { 5{ valid }} & reg1_T | { 5{ !valid }} & reg2_T )))) && reg1 != reg2 ;
  logic [4:0] reg1_C2 ;
  logic [4:0] reg1_R2 ;
  logic [4:0] reg1_X2 ;
  assign reg1_C2 = { 5{ valid }} ;
  assign reg1_R2 = { 5{ valid }} & ( _01__R | ( { 5{ valid_T  }} & _01__C ));
  assign reg1_X2 = { 5{ valid }} & _01__X ;
  logic [4:0] reg2_C1 ;
  logic [4:0] reg2_R1 ;
  logic [4:0] reg2_X1 ;
  assign reg2_C1 = { 5{ !valid }} ;
  assign reg2_R1 = { 5{ !valid }} & ( _01__R | ( { 5{ valid_T  }} & _01__C ));
  assign reg2_X1 = { 5{ !valid }} & _01__X ;
  assign _02_ = valid ? reg2 : reg3;
  logic [0:0] valid_C2 ;
  logic [0:0] valid_R2 ;
  logic [0:0] valid_X2 ;
  assign valid_C2 = | _02__C ;
  assign valid_X2 = | _02__X ;
  assign _02__T = valid ? ( { 5{ valid_T  }} | reg2_T ) : ( { 5{ valid_T  }} | reg3_T );
  assign _02__S = valid ? reg2_S : reg3_S ;
  assign valid_R2 = ( | (_02__R | ( _02__C & ( { 5{ valid }} & reg2_T | { 5{ !valid }} & reg3_T )))) && reg2 != reg3 ;
  logic [4:0] reg2_C2 ;
  logic [4:0] reg2_R2 ;
  logic [4:0] reg2_X2 ;
  assign reg2_C2 = { 5{ valid }} ;
  assign reg2_R2 = { 5{ valid }} & ( _02__R | ( { 5{ valid_T  }} & _02__C ));
  assign reg2_X2 = { 5{ valid }} & _02__X ;
  logic [4:0] reg3_C1 ;
  logic [4:0] reg3_R1 ;
  logic [4:0] reg3_X1 ;
  assign reg3_C1 = { 5{ !valid }} ;
  assign reg3_R1 = { 5{ !valid }} & ( _02__R | ( { 5{ valid_T  }} & _02__C ));
  assign reg3_X1 = { 5{ !valid }} & _02__X ;
  assign _03_ = valid ? reg3 : reg4;
  logic [0:0] valid_C3 ;
  logic [0:0] valid_R3 ;
  logic [0:0] valid_X3 ;
  assign valid_C3 = | _03__C ;
  assign valid_X3 = | _03__X ;
  assign _03__T = valid ? ( { 5{ valid_T  }} | reg3_T ) : ( { 5{ valid_T  }} | reg4_T );
  assign _03__S = valid ? reg3_S : reg4_S ;
  assign valid_R3 = ( | (_03__R | ( _03__C & ( { 5{ valid }} & reg3_T | { 5{ !valid }} & reg4_T )))) && reg3 != reg4 ;
  logic [4:0] reg3_C2 ;
  logic [4:0] reg3_R2 ;
  logic [4:0] reg3_X2 ;
  assign reg3_C2 = { 5{ valid }} ;
  assign reg3_R2 = { 5{ valid }} & ( _03__R | ( { 5{ valid_T  }} & _03__C ));
  assign reg3_X2 = { 5{ valid }} & _03__X ;
  logic [4:0] reg4_C1 ;
  logic [4:0] reg4_R1 ;
  logic [4:0] reg4_X1 ;
  assign reg4_C1 = { 5{ !valid }} ;
  assign reg4_R1 = { 5{ !valid }} & ( _03__R | ( { 5{ valid_T  }} & _03__C ));
  assign reg4_X1 = { 5{ !valid }} & _03__X ;
  assign _04_ = valid ? reg4 : reg5;
  logic [0:0] valid_C4 ;
  logic [0:0] valid_R4 ;
  logic [0:0] valid_X4 ;
  assign valid_C4 = | _04__C ;
  assign valid_X4 = | _04__X ;
  assign _04__T = valid ? ( { 5{ valid_T  }} | reg4_T ) : ( { 5{ valid_T  }} | reg5_T );
  assign _04__S = valid ? reg4_S : reg5_S ;
  assign valid_R4 = ( | (_04__R | ( _04__C & ( { 5{ valid }} & reg4_T | { 5{ !valid }} & reg5_T )))) && reg4 != reg5 ;
  logic [4:0] reg4_C2 ;
  logic [4:0] reg4_R2 ;
  logic [4:0] reg4_X2 ;
  assign reg4_C2 = { 5{ valid }} ;
  assign reg4_R2 = { 5{ valid }} & ( _04__R | ( { 5{ valid_T  }} & _04__C ));
  assign reg4_X2 = { 5{ valid }} & _04__X ;
  logic [4:0] reg5_C1 ;
  logic [4:0] reg5_R1 ;
  logic [4:0] reg5_X1 ;
  assign reg5_C1 = { 5{ !valid }} ;
  assign reg5_R1 = { 5{ !valid }} & ( _04__R | ( { 5{ valid_T  }} & _04__C ));
  assign reg5_X1 = { 5{ !valid }} & _04__X ;
  assign in_C = ( in_C0 );
  assign valid_C = ( valid_C0 ) | ( valid_C1 ) | ( valid_C2 ) | ( valid_C3 ) | ( valid_C4 );
  assign _04__C = ( _04__C0 );
  assign _03__C = ( _03__C0 );
  assign _01__C = ( _01__C0 );
  assign _00__C = ( _00__C0 );
  assign fangyuan3_C = ( fangyuan3_C0 );
  assign fangyuan0_C = ( fangyuan0_C0 );
  assign out_C = ( out_C0 );
  assign _02__C = ( _02__C0 );
  assign reg5_C = ( reg5_C0 ) | ( reg5_C1 );
  assign _08__C = ( _08__C0 );
  assign _06__C = ( _06__C0 );
  assign _09__C = ( _09__C0 );
  assign _07__C = ( _07__C0 );
  assign reg1_C = ( reg1_C0 ) | ( reg1_C1 ) | ( reg1_C2 );
  assign reg3_C = ( reg3_C0 ) | ( reg3_C1 ) | ( reg3_C2 );
  assign _05__C = ( _05__C0 );
  assign reg2_C = ( reg2_C0 ) | ( reg2_C1 ) | ( reg2_C2 );
  assign reg4_C = ( reg4_C0 ) | ( reg4_C1 ) | ( reg4_C2 );
  assign in_X = ( in_X0 );
  assign valid_X = ( valid_X0 ) | ( valid_X1 ) | ( valid_X2 ) | ( valid_X3 ) | ( valid_X4 );
  assign _04__X = ( _04__X0 );
  assign _03__X = ( _03__X0 );
  assign _01__X = ( _01__X0 );
  assign _00__X = ( _00__X0 );
  assign fangyuan3_X = ( fangyuan3_X0 );
  assign fangyuan0_X = ( fangyuan0_X0 );
  assign out_X = ( out_X0 );
  assign _02__X = ( _02__X0 );
  assign reg5_X = ( reg5_X0 ) | ( reg5_X1 );
  assign _08__X = ( _08__X0 );
  assign _06__X = ( _06__X0 );
  assign _09__X = ( _09__X0 );
  assign _07__X = ( _07__X0 );
  assign reg1_X = ( reg1_X0 ) | ( reg1_X1 ) | ( reg1_X2 );
  assign reg3_X = ( reg3_X0 ) | ( reg3_X1 ) | ( reg3_X2 );
  assign _05__X = ( _05__X0 );
  assign reg2_X = ( reg2_X0 ) | ( reg2_X1 ) | ( reg2_X2 );
  assign reg4_X = ( reg4_X0 ) | ( reg4_X1 ) | ( reg4_X2 );
  assign in_R = ( in_X0 & in_R0 );
  assign valid_R = ( valid_X0 & valid_R0 ) | ( valid_X1 & valid_R1 ) | ( valid_X2 & valid_R2 ) | ( valid_X3 & valid_R3 ) | ( valid_X4 & valid_R4 );
  assign _04__R = ( _04__X0 & _04__R0 );
  assign _03__R = ( _03__X0 & _03__R0 );
  assign _01__R = ( _01__X0 & _01__R0 );
  assign _00__R = ( _00__X0 & _00__R0 );
  assign fangyuan3_R = ( fangyuan3_X0 & fangyuan3_R0 );
  assign fangyuan0_R = ( fangyuan0_X0 & fangyuan0_R0 );
  assign out_R = ( out_X0 & out_R0 );
  assign _02__R = ( _02__X0 & _02__R0 );
  assign reg5_R = ( reg5_X0 & reg5_R0 ) | ( reg5_X1 & reg5_R1 );
  assign _08__R = ( _08__X0 & _08__R0 );
  assign _06__R = ( _06__X0 & _06__R0 );
  assign _09__R = ( _09__X0 & _09__R0 );
  assign _07__R = ( _07__X0 & _07__R0 );
  assign reg1_R = ( reg1_X0 & reg1_R0 ) | ( reg1_X1 & reg1_R1 ) | ( reg1_X2 & reg1_R2 );
  assign reg3_R = ( reg3_X0 & reg3_R0 ) | ( reg3_X1 & reg3_R1 ) | ( reg3_X2 & reg3_R2 );
  assign _05__R = ( _05__X0 & _05__R0 );
  assign reg2_R = ( reg2_X0 & reg2_R0 ) | ( reg2_X1 & reg2_R1 ) | ( reg2_X2 & reg2_R2 );
  assign reg4_R = ( reg4_X0 & reg4_R0 ) | ( reg4_X1 & reg4_R1 ) | ( reg4_X2 & reg4_R2 );
 // ground taints for floating regs
 // ground taints for unused wires
  assign { _10__R , _10__C , _10__X , fangyuan1_R , fangyuan1_C , fangyuan1_X , fangyuan2_R , fangyuan2_C , fangyuan2_X  } = 0;
  always @( posedge clk ) begin
    if( rst_zy ) reg1_PREV_VAL1 <= 0 ;
    if( rst_zy ) reg1_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) reg1_PREV_VAL1 <= reg1 ;
    if( INSTR_IN_ZY ) reg1_PREV_VAL2 <= reg1_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( rst_zy ) reg2_PREV_VAL1 <= 0 ;
    if( rst_zy ) reg2_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) reg2_PREV_VAL1 <= reg2 ;
    if( INSTR_IN_ZY ) reg2_PREV_VAL2 <= reg2_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( rst_zy ) reg3_PREV_VAL1 <= 0 ;
    if( rst_zy ) reg3_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) reg3_PREV_VAL1 <= reg3 ;
    if( INSTR_IN_ZY ) reg3_PREV_VAL2 <= reg3_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( rst_zy ) reg4_PREV_VAL1 <= 0 ;
    if( rst_zy ) reg4_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) reg4_PREV_VAL1 <= reg4 ;
    if( INSTR_IN_ZY ) reg4_PREV_VAL2 <= reg4_PREV_VAL1 ;
  end
  always @( posedge clk ) begin
    if( rst_zy ) reg5_PREV_VAL1 <= 0 ;
    if( rst_zy ) reg5_PREV_VAL2 <= 0 ;
    if( INSTR_IN_ZY ) reg5_PREV_VAL1 <= reg5 ;
    if( INSTR_IN_ZY ) reg5_PREV_VAL2 <= reg5_PREV_VAL1 ;
  end
 // ground taints for unused wire slices
  assign { _09__R0 [0], _09__R0 [1], _09__R0 [2], _09__R0 [3], _09__R0 [4], _09__R0 [31:8] } = 0;
  assign { _09__X0 [0], _09__X0 [1], _09__X0 [2], _09__X0 [3], _09__X0 [4], _09__X0 [31:8] } = 0;
  assign { _09__C0 [0], _09__C0 [1], _09__C0 [2], _09__C0 [3], _09__C0 [4], _09__C0 [31:8] } = 0;
  assert property( reg1_r_flag == 0 || reg1_PREV_VAL1 == reg1_PREV_VAL2 );
  assert property( reg2_r_flag == 0 || reg2_PREV_VAL1 == reg2_PREV_VAL2 );
  assert property( reg3_r_flag == 0 || reg3_PREV_VAL1 == reg3_PREV_VAL2 );
  assert property( reg4_r_flag == 0 || reg4_PREV_VAL1 == reg4_PREV_VAL2 );
  assert property( reg5_r_flag == 0 || reg5_PREV_VAL1 == reg5_PREV_VAL2 );
endmodule
