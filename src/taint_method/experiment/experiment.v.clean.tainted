  input clk;
  input clk_t;
  wire \aes_128_i.r8.z0;
  wire \aes_128_i.r8.z0_t;
  wire \aes_128_i.r8.z0_r;
  wire \aes_128_i.r8.z0_c;
  wire \aes_128_i.r8.z0_x;
  wire \aes_128_i.r8.z1;
  wire \aes_128_i.r8.z1_t;
  wire \aes_128_i.r8.z1_r;
  wire \aes_128_i.r8.z1_c;
  wire \aes_128_i.r8.z1_x;
  wire \aes_128_i.r8.z2;
  wire \aes_128_i.r8.z2_t;
  wire \aes_128_i.r8.z2_r;
  wire \aes_128_i.r8.z2_c;
  wire \aes_128_i.r8.z2_x;
  wire [1:0] \aes_128_i.r8.z3;
  wire [1:0] \aes_128_i.r8.z3_t;
  wire [1:0] \aes_128_i.r8.z3_r;
  wire [1:0] \aes_128_i.r8.z3_c;
  wire [1:0] \aes_128_i.r8.z3_x;
  wire [4:0] \aes_128_i.r8.state_out;
  wire [4:0] \aes_128_i.r8.state_out_t;
  wire [4:0] \aes_128_i.r8.state_out_r;
  wire [4:0] \aes_128_i.r8.state_out_c;
  wire [4:0] \aes_128_i.r8.state_out_x;
  always @(posedge clk)
      \aes_128_i.r8.state_out <= { \aes_128_i.r8.z0 , \aes_128_i.r8.z1 , \aes_128_i.r8.z2 , \aes_128_i.r8.z3[1:0] };

  assign { \aes_128_i.r8.z0_x, \aes_128_i.r8.z1_x, \aes_128_i.r8.z2_x, \aes_128_i.r8.z3_x[1:0] } = {5{\aes_128_i.r8.state_out != { \aes_128_i.r8.z0 , \aes_128_i.r8.z1 , \aes_128_i.r8.z2 , \aes_128_i.r8.z3[1:0] }}};

  always @(posedge clk)
      \aes_128_i.r8.state_out_t 		<= rst ? 0 : | ({ \aes_128_i.r8.z0_t, \aes_128_i.r8.z1_t, \aes_128_i.r8.z2_t, \aes_128_i.r8.z3_t[1:0] } & { \aes_128_i.r8.z0_x, \aes_128_i.r8.z1_x, \aes_128_i.r8.z2_x, \aes_128_i.r8.z3_x[1:0] });

  always @(posedge clk)
      \aes_128_i.r8.state_out_t_flag 	<= rst ? 0 : \aes_128_i.r8.state_out_t_flag ? 1 : | ({ \aes_128_i.r8.z0_t, \aes_128_i.r8.z1_t, \aes_128_i.r8.z2_t, \aes_128_i.r8.z3_t[1:0] } & { \aes_128_i.r8.z0_x, \aes_128_i.r8.z1_x, \aes_128_i.r8.z2_x, \aes_128_i.r8.z3_x[1:0] });

  always @(posedge clk)
      \aes_128_i.r8.state_out_r_flag 	<= rst ? 0 : \aes_128_i.r8.state_out_r_flag ? 1 : \aes_128_i.r8.state_out_t_flag ? 0 : | \aes_128_i.r8.state_out_r;
  assign \aes_128_i.r8.z3_r[1:0] = 0;
  assign \aes_128_i.r8.z0_r = 0;
  assign \aes_128_i.r8.z2_r = 0;
  assign \aes_128_i.r8.z1_r = 0;
endmodule
