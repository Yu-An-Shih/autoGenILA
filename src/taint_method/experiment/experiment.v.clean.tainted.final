module ( i_clk , i_rst , i_clk_t , i_rst_t , RS_r_flag );
  input i_clk;
  input i_clk_t ;
  input i_rst;
  input i_rst_t ;
  reg RS;
  reg  RS_t ;
  reg RS_t_1bit ;
  reg RS_t_flag ;
  output reg RS_r_flag ;
  wire RS_r ;
  wire RS_x ;
  wire RS_c ;
  wire _0001_;
  wire _0001__t ;
  wire _0001__r ;
  wire _0001__c ;
  wire _0001__x ;
  always @(posedge i_clk or posedge i_rst)
    if (i_rst)
      RS <= 1'h0;
    else
      RS <= _0001_;
  assign _0001__x = { 1{ RS != _0001_ }} ;
  always @( posedge clk )
      RS_t 		<= rst ? 0 : | ( _0001__t & _0001__x );
  always @( posedge clk )
      RS_t_flag 	<= rst ? 0 : RS_t_flag ? 1 : | ( _0001__t & _0001__x );
  always @( posedge clk )
      RS_r_flag 	<= rst ? 0 : RS_r_flag ? 1 : RS_t_flag ? 0 : | RS_r ;
  assign RS_t_1bit = | RS_t ;
  assign RS_r = 0;
  assign _0001__r = 0;
endmodule
