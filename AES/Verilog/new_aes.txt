/* Generated by Yosys 0.8 (git sha1 UNKNOWN, clang 9.0.0 -fPIC -Os) */

(* src = "aes_top.v:27" *)
module aes_top(clk, rst, wr, addr, data_in, data_out, ack, stb, xram_addr, xram_data_out, xram_data_in, xram_ack, xram_stb, xram_wr, aes_state, aes_addr, aes_len, aes_ctr, aes_key0, aes_step);
  (* src = "aes_top.v:345" *)
  reg [1:0] _000_;
  (* src = "aes_top.v:297" *)
  reg [4:0] _001_;
  (* src = "aes_top.v:345" *)
  reg [15:0] _002_;
  (* src = "aes_top.v:345" *)
  reg [3:0] _003_;
  (* src = "aes_top.v:345" *)
  reg [127:0] _004_;
  (* src = "aes_top.v:345" *)
  reg [127:0] _005_;
  (* src = "aes_top.v:345" *)
  reg [15:0] _006_;
  (* src = "aes_top.v:281" *)
  reg [127:0] _007_;
  (* src = "aes_top.v:210" *)
  wire [31:0] _008_;
  (* src = "aes_top.v:216" *)
  wire [31:0] _009_;
  (* src = "aes_top.v:224" *)
  wire [31:0] _010_;
  (* src = "aes_top.v:233" *)
  wire [15:0] _011_;
  (* src = "aes_top.v:233" *)
  wire [15:0] _012_;
  (* src = "aes_top.v:279" *)
  wire [127:0] _013_;
  (* src = "aes_top.v:294" *)
  wire [4:0] _014_;
  (* src = "aes_top.v:113" *)
  wire _015_;
  (* src = "aes_top.v:114" *)
  wire _016_;
  (* src = "aes_top.v:115" *)
  wire _017_;
  (* src = "aes_top.v:116" *)
  wire _018_;
  (* src = "aes_top.v:117" *)
  wire _019_;
  (* src = "aes_top.v:118" *)
  wire _020_;
  (* src = "aes_top.v:133" *)
  wire _021_;
  (* src = "aes_top.v:134" *)
  wire _022_;
  (* src = "aes_top.v:135" *)
  wire _023_;
  (* src = "aes_top.v:136" *)
  wire _024_;
  (* src = "aes_top.v:227" *)
  wire _025_;
  (* src = "aes_top.v:259" *)
  wire _026_;
  (* src = "aes_top.v:260" *)
  wire _027_;
  (* src = "aes_top.v:261" *)
  wire _028_;
  (* src = "aes_top.v:262" *)
  wire _029_;
  (* src = "aes_top.v:263" *)
  wire _030_;
  (* src = "aes_top.v:264" *)
  wire _031_;
  (* src = "aes_top.v:265" *)
  wire _032_;
  (* src = "aes_top.v:266" *)
  wire _033_;
  (* src = "aes_top.v:267" *)
  wire _034_;
  (* src = "aes_top.v:268" *)
  wire _035_;
  (* src = "aes_top.v:269" *)
  wire _036_;
  (* src = "aes_top.v:270" *)
  wire _037_;
  (* src = "aes_top.v:271" *)
  wire _038_;
  (* src = "aes_top.v:272" *)
  wire _039_;
  (* src = "aes_top.v:273" *)
  wire _040_;
  (* src = "aes_top.v:274" *)
  wire _041_;
  (* src = "aes_top.v:327" *)
  wire _042_;
  (* src = "aes_top.v:328" *)
  wire _043_;
  (* src = "aes_top.v:329" *)
  wire _044_;
  (* src = "aes_top.v:330" *)
  wire _045_;
  (* src = "aes_top.v:331" *)
  wire _046_;
  (* src = "aes_top.v:332" *)
  wire _047_;
  (* src = "aes_top.v:333" *)
  wire _048_;
  (* src = "aes_top.v:334" *)
  wire _049_;
  (* src = "aes_top.v:335" *)
  wire _050_;
  (* src = "aes_top.v:336" *)
  wire _051_;
  (* src = "aes_top.v:337" *)
  wire _052_;
  (* src = "aes_top.v:338" *)
  wire _053_;
  (* src = "aes_top.v:339" *)
  wire _054_;
  (* src = "aes_top.v:340" *)
  wire _055_;
  (* src = "aes_top.v:341" *)
  wire _056_;
  (* src = "aes_top.v:211" *)
  wire [31:0] _057_;
  (* src = "aes_top.v:217" *)
  wire [31:0] _058_;
  (* src = "aes_top.v:225" *)
  wire [31:0] _059_;
  (* src = "aes_top.v:110" *)
  wire _060_;
  (* src = "aes_top.v:305" *)
  wire _061_;
  (* src = "aes_top.v:110" *)
  wire _062_;
  (* src = "aes_top.v:111" *)
  wire _063_;
  (* src = "aes_top.v:139" *)
  wire _064_;
  (* src = "aes_top.v:140" *)
  wire _065_;
  (* src = "aes_top.v:140" *)
  wire _066_;
  (* src = "aes_top.v:150" *)
  wire _067_;
  (* src = "aes_top.v:164" *)
  wire _068_;
  (* src = "aes_top.v:181" *)
  wire _069_;
  (* src = "aes_top.v:195" *)
  wire _070_;
  (* src = "aes_top.v:210" *)
  wire _071_;
  (* src = "aes_top.v:227" *)
  wire _072_;
  (* src = "aes_top.v:229" *)
  wire _073_;
  (* src = "aes_top.v:230" *)
  wire _074_;
  (* src = "aes_top.v:243" *)
  wire _075_;
  (* src = "aes_top.v:259" *)
  wire _076_;
  (* src = "aes_top.v:260" *)
  wire _077_;
  (* src = "aes_top.v:261" *)
  wire _078_;
  (* src = "aes_top.v:262" *)
  wire _079_;
  (* src = "aes_top.v:263" *)
  wire _080_;
  (* src = "aes_top.v:264" *)
  wire _081_;
  (* src = "aes_top.v:265" *)
  wire _082_;
  (* src = "aes_top.v:266" *)
  wire _083_;
  (* src = "aes_top.v:267" *)
  wire _084_;
  (* src = "aes_top.v:268" *)
  wire _085_;
  (* src = "aes_top.v:269" *)
  wire _086_;
  (* src = "aes_top.v:270" *)
  wire _087_;
  (* src = "aes_top.v:271" *)
  wire _088_;
  (* src = "aes_top.v:272" *)
  wire _089_;
  (* src = "aes_top.v:273" *)
  wire _090_;
  (* src = "aes_top.v:274" *)
  wire _091_;
  (* src = "aes_top.v:234" *)
  wire _092_;
  (* src = "aes_top.v:293" *)
  wire _093_;
  (* src = "aes_top.v:110" *)
  wire _094_;
  (* src = "aes_top.v:230" *)
  wire _095_;
  (* src = "aes_top.v:294" *)
  wire _096_;
  (* src = "aes_top.v:254" *)
  wire _097_;
  (* src = "aes_top.v:130" *)
  wire [7:0] _098_;
  (* src = "aes_top.v:130" *)
  wire [7:0] _099_;
  (* src = "aes_top.v:130" *)
  wire [7:0] _100_;
  (* src = "aes_top.v:130" *)
  wire [7:0] _101_;
  (* src = "aes_top.v:130" *)
  wire [7:0] _102_;
  (* src = "aes_top.v:211" *)
  wire [31:0] _103_;
  (* src = "aes_top.v:211" *)
  wire [31:0] _104_;
  (* src = "aes_top.v:217" *)
  wire [31:0] _105_;
  (* src = "aes_top.v:217" *)
  wire [31:0] _106_;
  (* src = "aes_top.v:225" *)
  wire [31:0] _107_;
  (* src = "aes_top.v:225" *)
  wire [31:0] _108_;
  (* src = "aes_top.v:238" *)
  wire [1:0] _109_;
  (* src = "aes_top.v:239" *)
  wire [1:0] _110_;
  (* src = "aes_top.v:240" *)
  wire [1:0] _111_;
  (* src = "aes_top.v:245" *)
  wire [1:0] _112_;
  (* src = "aes_top.v:245" *)
  wire [1:0] _113_;
  (* src = "aes_top.v:252" *)
  wire [1:0] _114_;
  (* src = "aes_top.v:252" *)
  wire [1:0] _115_;
  (* src = "aes_top.v:252" *)
  wire [1:0] _116_;
  (* src = "aes_top.v:252" *)
  wire [1:0] _117_;
  (* src = "aes_top.v:259" *)
  wire [7:0] _118_;
  (* src = "aes_top.v:260" *)
  wire [7:0] _119_;
  (* src = "aes_top.v:261" *)
  wire [7:0] _120_;
  (* src = "aes_top.v:262" *)
  wire [7:0] _121_;
  (* src = "aes_top.v:263" *)
  wire [7:0] _122_;
  (* src = "aes_top.v:264" *)
  wire [7:0] _123_;
  (* src = "aes_top.v:265" *)
  wire [7:0] _124_;
  (* src = "aes_top.v:266" *)
  wire [7:0] _125_;
  (* src = "aes_top.v:267" *)
  wire [7:0] _126_;
  (* src = "aes_top.v:268" *)
  wire [7:0] _127_;
  (* src = "aes_top.v:269" *)
  wire [7:0] _128_;
  (* src = "aes_top.v:270" *)
  wire [7:0] _129_;
  (* src = "aes_top.v:271" *)
  wire [7:0] _130_;
  (* src = "aes_top.v:272" *)
  wire [7:0] _131_;
  (* src = "aes_top.v:273" *)
  wire [7:0] _132_;
  (* src = "aes_top.v:274" *)
  wire [7:0] _133_;
  (* src = "aes_top.v:280" *)
  wire [127:0] _134_;
  (* src = "aes_top.v:280" *)
  wire [127:0] _135_;
  (* src = "aes_top.v:295" *)
  wire [4:0] _136_;
  (* src = "aes_top.v:295" *)
  wire [4:0] _137_;
  (* src = "aes_top.v:324" *)
  wire [127:0] _138_;
  (* src = "aes_top.v:342" *)
  wire [7:0] _139_;
  (* src = "aes_top.v:342" *)
  wire [7:0] _140_;
  (* src = "aes_top.v:342" *)
  wire [7:0] _141_;
  (* src = "aes_top.v:342" *)
  wire [7:0] _142_;
  (* src = "aes_top.v:342" *)
  wire [7:0] _143_;
  (* src = "aes_top.v:342" *)
  wire [7:0] _144_;
  (* src = "aes_top.v:342" *)
  wire [7:0] _145_;
  (* src = "aes_top.v:342" *)
  wire [7:0] _146_;
  (* src = "aes_top.v:342" *)
  wire [7:0] _147_;
  (* src = "aes_top.v:342" *)
  wire [7:0] _148_;
  (* src = "aes_top.v:342" *)
  wire [7:0] _149_;
  (* src = "aes_top.v:342" *)
  wire [7:0] _150_;
  (* src = "aes_top.v:342" *)
  wire [7:0] _151_;
  (* src = "aes_top.v:342" *)
  wire [7:0] _152_;
  (* src = "aes_top.v:342" *)
  wire [7:0] _153_;
  (* src = "aes_top.v:311" *)
  wire [127:0] _154_;
  (* src = "aes_top.v:72" *)
  output ack;
  (* src = "aes_top.v:70" *)
  input [15:0] addr;
  (* src = "aes_top.v:83" *)
  output [15:0] aes_addr;
  (* src = "aes_top.v:145" *)
  wire [7:0] aes_addr_dataout;
  (* src = "aes_top.v:84" *)
  output [127:0] aes_ctr;
  (* src = "aes_top.v:176" *)
  wire [7:0] aes_ctr_dataout;
  (* src = "aes_top.v:312" *)
  wire [127:0] aes_curr_key;
  (* src = "aes_top.v:84" *)
  output [127:0] aes_key0;
  (* src = "aes_top.v:190" *)
  wire [7:0] aes_key0_dataout;
  (* src = "aes_top.v:83" *)
  output [15:0] aes_len;
  (* src = "aes_top.v:159" *)
  wire [7:0] aes_len_dataout;
  (* src = "aes_top.v:310" *)
  wire [127:0] aes_out;
  (* src = "aes_top.v:175" *)
  wire [127:0] aes_reg_ctr;
  (* src = "aes_top.v:189" *)
  wire [127:0] aes_reg_key0;
  (* src = "aes_top.v:144" *)
  wire [15:0] aes_reg_opaddr;
  (* src = "aes_top.v:158" *)
  wire [15:0] aes_reg_oplen;
  (* src = "aes_top.v:122" *)
  reg [1:0] aes_reg_state;
  (* src = "aes_top.v:247" *)
  wire [1:0] aes_reg_state_next;
  (* src = "aes_top.v:238" *)
  wire [1:0] aes_reg_state_next_idle;
  (* src = "aes_top.v:240" *)
  wire [1:0] aes_reg_state_next_operate;
  (* src = "aes_top.v:239" *)
  wire [1:0] aes_reg_state_next_read_data;
  (* src = "aes_top.v:241" *)
  wire [1:0] aes_reg_state_next_write_data;
  (* src = "aes_top.v:82" *)
  output [1:0] aes_state;
  (* src = "aes_top.v:133" *)
  wire aes_state_idle;
  (* src = "aes_top.v:135" *)
  wire aes_state_operate;
  (* src = "aes_top.v:134" *)
  wire aes_state_read_data;
  (* src = "aes_top.v:136" *)
  wire aes_state_write_data;
  (* src = "aes_top.v:85" *)
  output aes_step;
  (* src = "aes_top.v:289" *)
  reg [4:0] aes_time_counter;
  (* src = "aes_top.v:290" *)
  wire [4:0] aes_time_counter_next;
  (* src = "aes_top.v:291" *)
  wire aes_time_enough;
  (* src = "aes_top.v:214" *)
  reg [15:0] block_counter;
  (* src = "aes_top.v:215" *)
  wire [15:0] block_counter_next;
  (* src = "aes_top.v:220" *)
  reg [3:0] byte_counter;
  (* src = "aes_top.v:223" *)
  wire [3:0] byte_counter_next;
  (* src = "aes_top.v:68" *)
  input clk;
  (* src = "aes_top.v:69" *)
  input [7:0] data_in;
  (* src = "aes_top.v:71" *)
  output [7:0] data_out;
  (* src = "aes_top.v:311" *)
  wire [127:0] encrypted_data;
  (* src = "aes_top.v:322" *)
  reg [127:0] encrypted_data_buf;
  (* src = "aes_top.v:323" *)
  wire [127:0] encrypted_data_buf_next;
  (* src = "aes_top.v:110" *)
  wire in_addr_range;
  (* src = "aes_top.v:222" *)
  wire incr_byte_counter;
  (* src = "aes_top.v:227" *)
  wire last_byte_acked;
  (* src = "aes_top.v:257" *)
  reg [127:0] mem_data_buf;
  (* src = "aes_top.v:258" *)
  wire [127:0] mem_data_buf_next;
  (* src = "aes_top.v:229" *)
  wire more_blocks;
  (* src = "aes_top.v:207" *)
  reg [15:0] operated_bytes_count;
  (* src = "aes_top.v:208" *)
  wire [15:0] operated_bytes_count_next;
  (* src = "aes_top.v:221" *)
  wire reset_byte_counter;
  (* src = "aes_top.v:68" *)
  input rst;
  (* src = "aes_top.v:115" *)
  wire sel_reg_addr;
  (* src = "aes_top.v:117" *)
  wire sel_reg_ctr;
  (* src = "aes_top.v:118" *)
  wire sel_reg_key0;
  (* src = "aes_top.v:116" *)
  wire sel_reg_len;
  (* src = "aes_top.v:113" *)
  wire sel_reg_start;
  (* src = "aes_top.v:114" *)
  wire sel_reg_state;
  (* src = "aes_top.v:140" *)
  wire start_op;
  (* src = "aes_top.v:68" *)
  input stb;
  (* src = "aes_top.v:276" *)
  reg [127:0] uaes_ctr;
  (* src = "aes_top.v:277" *)
  wire [127:0] uaes_ctr_nxt;
  (* src = "aes_top.v:68" *)
  input wr;
  (* src = "aes_top.v:139" *)
  wire wren;
  (* src = "aes_top.v:78" *)
  input xram_ack;
  (* src = "aes_top.v:75" *)
  output [15:0] xram_addr;
  (* src = "aes_top.v:77" *)
  input [7:0] xram_data_in;
  (* src = "aes_top.v:76" *)
  output [7:0] xram_data_out;
  (* src = "aes_top.v:79" *)
  output xram_stb;
  (* src = "aes_top.v:80" *)
  output xram_wr;
  assign _008_ = operated_bytes_count + (* src = "aes_top.v:210" *) 32'd16;
  assign _009_ = block_counter + (* src = "aes_top.v:216" *) 32'd16;
  assign _010_ = byte_counter + (* src = "aes_top.v:224" *) 32'd1;
  assign _011_ = aes_reg_opaddr + (* src = "aes_top.v:233" *) block_counter;
  assign _012_ = _011_ + (* src = "aes_top.v:233" *) { 12'h000, byte_counter };
  assign _013_ = uaes_ctr + (* src = "aes_top.v:279" *) 128'h00000000000000000000000000000010;
  assign _014_ = aes_time_counter + (* src = "aes_top.v:294" *) 5'h01;
  assign _015_ = addr == (* src = "aes_top.v:113" *) 16'hff00;
  assign _016_ = addr == (* src = "aes_top.v:114" *) 16'hff01;
  assign _017_ = addr[15:1] == (* src = "aes_top.v:115" *) 15'h7f81;
  assign _018_ = addr[15:1] == (* src = "aes_top.v:116" *) 15'h7f82;
  assign _019_ = addr[15:4] == (* src = "aes_top.v:117" *) 12'hff2;
  assign _020_ = addr[15:4] == (* src = "aes_top.v:118" *) 12'hff1;
  assign _021_ = ! (* src = "aes_top.v:133" *) aes_reg_state;
  assign _022_ = aes_reg_state == (* src = "aes_top.v:134" *) 2'h1;
  assign _023_ = aes_reg_state == (* src = "aes_top.v:135" *) 2'h2;
  assign _024_ = aes_reg_state == (* src = "aes_top.v:136" *) 2'h3;
  assign _041_ = byte_counter == (* src = "aes_top.v:274" *) 4'hf;
  assign _042_ = ! (* src = "aes_top.v:327" *) byte_counter;
  assign _043_ = byte_counter == (* src = "aes_top.v:328" *) 4'h1;
  assign _044_ = byte_counter == (* src = "aes_top.v:329" *) 4'h2;
  assign _045_ = byte_counter == (* src = "aes_top.v:330" *) 4'h3;
  assign _046_ = byte_counter == (* src = "aes_top.v:331" *) 4'h4;
  assign _047_ = byte_counter == (* src = "aes_top.v:332" *) 4'h5;
  assign _048_ = byte_counter == (* src = "aes_top.v:333" *) 4'h6;
  assign _049_ = byte_counter == (* src = "aes_top.v:334" *) 4'h7;
  assign _050_ = byte_counter == (* src = "aes_top.v:335" *) 4'h8;
  assign _051_ = byte_counter == (* src = "aes_top.v:336" *) 4'h9;
  assign _052_ = byte_counter == (* src = "aes_top.v:337" *) 4'ha;
  assign _053_ = byte_counter == (* src = "aes_top.v:338" *) 4'hb;
  assign _054_ = byte_counter == (* src = "aes_top.v:339" *) 4'hc;
  assign _055_ = byte_counter == (* src = "aes_top.v:340" *) 4'hd;
  assign _056_ = byte_counter == (* src = "aes_top.v:341" *) 4'he;
  assign _057_ = + (* src = "aes_top.v:211" *) operated_bytes_count;
  assign _058_ = + (* src = "aes_top.v:217" *) block_counter;
  assign _059_ = + (* src = "aes_top.v:225" *) byte_counter;
  assign _060_ = addr >= (* src = "aes_top.v:110" *) 16'hff00;
  assign _061_ = aes_time_counter >= (* src = "aes_top.v:305" *) 5'h0a;
  assign _062_ = _060_ && (* src = "aes_top.v:110" *) _094_;
  assign _063_ = stb && (* src = "aes_top.v:111" *) in_addr_range;
  assign _064_ = wr && (* src = "aes_top.v:139" *) aes_state_idle;
  assign _065_ = sel_reg_start && (* src = "aes_top.v:140" *) data_in[0];
  assign _066_ = _065_ && (* src = "aes_top.v:140" *) wren;
  assign _067_ = sel_reg_addr && (* src = "aes_top.v:150" *) wren;
  assign _068_ = sel_reg_len && (* src = "aes_top.v:164" *) wren;
  assign _069_ = sel_reg_ctr && (* src = "aes_top.v:181" *) wren;
  assign _070_ = sel_reg_key0 && (* src = "aes_top.v:195" *) wren;
  assign _073_ = last_byte_acked && (* src = "aes_top.v:229" *) aes_state_write_data;
  assign _074_ = _073_ && (* src = "aes_top.v:230" *) _095_;
  assign _075_ = last_byte_acked && (* src = "aes_top.v:243" *) more_blocks;
  assign _076_ = xram_ack && (* src = "aes_top.v:259" *) _026_;
  assign _077_ = xram_ack && (* src = "aes_top.v:260" *) _027_;
  assign _078_ = xram_ack && (* src = "aes_top.v:261" *) _028_;
  assign _079_ = xram_ack && (* src = "aes_top.v:262" *) _029_;
  assign _080_ = xram_ack && (* src = "aes_top.v:263" *) _030_;
  assign _081_ = xram_ack && (* src = "aes_top.v:264" *) _031_;
  assign _082_ = xram_ack && (* src = "aes_top.v:265" *) _032_;
  assign _083_ = xram_ack && (* src = "aes_top.v:266" *) _033_;
  assign _084_ = xram_ack && (* src = "aes_top.v:267" *) _034_;
  assign _085_ = xram_ack && (* src = "aes_top.v:268" *) _035_;
  assign _086_ = xram_ack && (* src = "aes_top.v:269" *) _036_;
  assign _087_ = xram_ack && (* src = "aes_top.v:270" *) _037_;
  assign _088_ = xram_ack && (* src = "aes_top.v:271" *) _038_;
  assign _089_ = xram_ack && (* src = "aes_top.v:272" *) _039_;
  assign _090_ = xram_ack && (* src = "aes_top.v:273" *) _040_;
  assign _091_ = xram_ack && (* src = "aes_top.v:274" *) _041_;
  assign _092_ = aes_state_read_data || (* src = "aes_top.v:234" *) aes_state_write_data;
  assign _093_ = more_blocks || (* src = "aes_top.v:293" *) start_op;
  assign _094_ = addr < (* src = "aes_top.v:110" *) 16'hff30;
  assign _095_ = operated_bytes_count_next < (* src = "aes_top.v:230" *) aes_reg_oplen;
  assign _096_ = aes_time_counter < (* src = "aes_top.v:294" *) 5'h1f;
  assign _097_ = aes_reg_state != (* src = "aes_top.v:254" *) aes_reg_state_next;
  assign _098_ = _020_ ? (* src = "aes_top.v:130" *) aes_key0_dataout : 8'h00;
  assign _099_ = _019_ ? (* src = "aes_top.v:130" *) aes_ctr_dataout : _098_;
  assign _100_ = _018_ ? (* src = "aes_top.v:130" *) aes_len_dataout : _099_;
  assign _101_ = _017_ ? (* src = "aes_top.v:130" *) aes_addr_dataout : _100_;
  assign _102_ = _016_ ? (* src = "aes_top.v:130" *) { 6'h00, aes_reg_state } : _101_;
  assign _103_ = _073_ ? (* src = "aes_top.v:211" *) _008_ : _057_;
  assign _104_ = _066_ ? (* src = "aes_top.v:211" *) 32'd0 : _103_;
  assign _105_ = _074_ ? (* src = "aes_top.v:217" *) _009_ : _058_;
  assign _106_ = _066_ ? (* src = "aes_top.v:217" *) 32'd0 : _105_;
  assign _107_ = xram_ack ? (* src = "aes_top.v:225" *) _010_ : _059_;
  assign _108_ = _066_ ? (* src = "aes_top.v:225" *) 32'd0 : _107_;
  assign _109_ = _066_ ? (* src = "aes_top.v:238" *) 2'h1 : 2'h0;
  assign _110_ = _091_ ? (* src = "aes_top.v:239" *) 2'h2 : 2'h1;
  assign _111_ = _061_ ? (* src = "aes_top.v:240" *) 2'h3 : 2'h2;
  assign _112_ = _091_ ? (* src = "aes_top.v:245" *) 2'h0 : 2'h3;
  assign _113_ = _075_ ? (* src = "aes_top.v:245" *) 2'h1 : _112_;
  assign _114_ = _024_ ? (* src = "aes_top.v:252" *) _113_ : 2'h0;
  assign _115_ = _023_ ? (* src = "aes_top.v:252" *) _111_ : _114_;
  assign _116_ = _022_ ? (* src = "aes_top.v:252" *) _110_ : _115_;
  assign _117_ = _021_ ? (* src = "aes_top.v:252" *) _109_ : _116_;
  assign _118_ = _076_ ? (* src = "aes_top.v:259" *) xram_data_in : mem_data_buf[7:0];
  assign _119_ = _077_ ? (* src = "aes_top.v:260" *) xram_data_in : mem_data_buf[15:8];
  assign _120_ = _078_ ? (* src = "aes_top.v:261" *) xram_data_in : mem_data_buf[23:16];
  assign _121_ = _079_ ? (* src = "aes_top.v:262" *) xram_data_in : mem_data_buf[31:24];
  assign _122_ = _080_ ? (* src = "aes_top.v:263" *) xram_data_in : mem_data_buf[39:32];
  assign _123_ = _081_ ? (* src = "aes_top.v:264" *) xram_data_in : mem_data_buf[47:40];
  assign _124_ = _082_ ? (* src = "aes_top.v:265" *) xram_data_in : mem_data_buf[55:48];
  assign _125_ = _083_ ? (* src = "aes_top.v:266" *) xram_data_in : mem_data_buf[63:56];
  assign _126_ = _084_ ? (* src = "aes_top.v:267" *) xram_data_in : mem_data_buf[71:64];
  assign _127_ = _085_ ? (* src = "aes_top.v:268" *) xram_data_in : mem_data_buf[79:72];
  assign _128_ = _086_ ? (* src = "aes_top.v:269" *) xram_data_in : mem_data_buf[87:80];
  assign _129_ = _087_ ? (* src = "aes_top.v:270" *) xram_data_in : mem_data_buf[95:88];
  assign _130_ = _088_ ? (* src = "aes_top.v:271" *) xram_data_in : mem_data_buf[103:96];
  assign _131_ = _089_ ? (* src = "aes_top.v:272" *) xram_data_in : mem_data_buf[111:104];
  assign _132_ = _090_ ? (* src = "aes_top.v:273" *) xram_data_in : mem_data_buf[119:112];
  assign _133_ = _091_ ? (* src = "aes_top.v:274" *) xram_data_in : mem_data_buf[127:120];
  assign _134_ = _074_ ? (* src = "aes_top.v:280" *) _013_ : uaes_ctr;
  assign _135_ = _066_ ? (* src = "aes_top.v:280" *) aes_reg_ctr : _134_;
  assign _136_ = _096_ ? (* src = "aes_top.v:295" *) _014_ : aes_time_counter;
  assign _137_ = _093_ ? (* src = "aes_top.v:295" *) 5'h00 : _136_;
  assign _138_ = _023_ ? (* src = "aes_top.v:324" *) _154_ : encrypted_data_buf;
  assign _139_ = _056_ ? (* src = "aes_top.v:342" *) encrypted_data_buf[119:112] : encrypted_data_buf[127:120];
  assign _140_ = _055_ ? (* src = "aes_top.v:342" *) encrypted_data_buf[111:104] : _139_;
  assign _141_ = _054_ ? (* src = "aes_top.v:342" *) encrypted_data_buf[103:96] : _140_;
  assign _142_ = _053_ ? (* src = "aes_top.v:342" *) encrypted_data_buf[95:88] : _141_;
  assign _143_ = _052_ ? (* src = "aes_top.v:342" *) encrypted_data_buf[87:80] : _142_;
  assign _144_ = _051_ ? (* src = "aes_top.v:342" *) encrypted_data_buf[79:72] : _143_;
  assign _145_ = _050_ ? (* src = "aes_top.v:342" *) encrypted_data_buf[71:64] : _144_;
  assign _146_ = _049_ ? (* src = "aes_top.v:342" *) encrypted_data_buf[63:56] : _145_;
  assign _147_ = _048_ ? (* src = "aes_top.v:342" *) encrypted_data_buf[55:48] : _146_;
  assign _148_ = _047_ ? (* src = "aes_top.v:342" *) encrypted_data_buf[47:40] : _147_;
  assign _149_ = _046_ ? (* src = "aes_top.v:342" *) encrypted_data_buf[39:32] : _148_;
  assign _150_ = _045_ ? (* src = "aes_top.v:342" *) encrypted_data_buf[31:24] : _149_;
  assign _151_ = _044_ ? (* src = "aes_top.v:342" *) encrypted_data_buf[23:16] : _150_;
  assign _152_ = _043_ ? (* src = "aes_top.v:342" *) encrypted_data_buf[15:8] : _151_;
  assign _153_ = _042_ ? (* src = "aes_top.v:342" *) encrypted_data_buf[7:0] : _152_;
  assign _154_ = aes_out ^ (* src = "aes_top.v:311" *) mem_data_buf;
  (* src = "aes_top.v:313" *)
  aes_128 aes_128_i (
    .clk(clk),
    .key(aes_curr_key),
    .out(aes_out),
    .state(uaes_ctr)
  );
  (* src = "aes_top.v:177" *)
  reg16byte aes_reg_ctr_i (
    .addr(addr[3:0]),
    .clk(clk),
    .data_in(data_in),
    .data_out(aes_ctr_dataout),
    .en(sel_reg_ctr),
    .reg_out(aes_reg_ctr),
    .rst(rst),
    .wr(_069_)
  );
  (* src = "aes_top.v:191" *)
  reg16byte aes_reg_key0_i (
    .addr(addr[3:0]),
    .clk(clk),
    .data_in(data_in),
    .data_out(aes_key0_dataout),
    .en(sel_reg_key0),
    .reg_out(aes_reg_key0),
    .rst(rst),
    .wr(_070_)
  );
  (* src = "aes_top.v:146" *)
  reg2byte aes_reg_opaddr_i (
    .addr(addr[0]),
    .clk(clk),
    .data_in(data_in),
    .data_out(aes_addr_dataout),
    .en(sel_reg_addr),
    .reg_out(aes_reg_opaddr),
    .rst(rst),
    .wr(_067_)
  );
  (* src = "aes_top.v:160" *)
  reg2byte aes_reg_oplen_i (
    .addr(addr[0]),
    .clk(clk),
    .data_in(data_in),
    .data_out(aes_len_dataout),
    .en(sel_reg_len),
    .reg_out(aes_reg_oplen),
    .rst(rst),
    .wr(_068_)
  );
  always @* begin
    _007_ = uaes_ctr;
    casez (rst)
      1'h1:
          _007_ = 128'h00000000000000000000000000000000;
      default:
          _007_ = uaes_ctr_nxt;
    endcase
  end
  always @(posedge clk) begin
      uaes_ctr <= _007_;
  end
  always @* begin
    _001_ = aes_time_counter;
    casez (rst)
      1'h1:
          _001_ = 5'h00;
      default:
          _001_ = aes_time_counter_next;
    endcase
  end
  always @(posedge clk) begin
      aes_time_counter <= _001_;
  end
  always @* begin
    _000_ = aes_reg_state;
    _006_ = operated_bytes_count;
    _002_ = block_counter;
    _003_ = byte_counter;
    _005_ = mem_data_buf;
    _004_ = encrypted_data_buf;
    casez (rst)
      1'h1:
        begin
          _000_ = 2'h0;
          _002_ = 16'h0000;
          _003_ = 4'h0;
          _006_ = 16'h0000;
        end
      default:
        begin
          _002_ = block_counter_next;
          _003_ = byte_counter_next;
          _000_ = aes_reg_state_next;
          _005_ = mem_data_buf_next;
          _004_ = encrypted_data_buf_next;
          _006_ = operated_bytes_count_next;
        end
    endcase
  end
  always @(posedge clk) begin
      aes_reg_state <= _000_;
      operated_bytes_count <= _006_;
      block_counter <= _002_;
      byte_counter <= _003_;
      mem_data_buf <= _005_;
      encrypted_data_buf <= _004_;
  end
  assign in_addr_range = _062_;
  assign ack = _063_;
  assign sel_reg_start = _015_;
  assign sel_reg_state = _016_;
  assign sel_reg_addr = _017_;
  assign sel_reg_len = _018_;
  assign sel_reg_ctr = _019_;
  assign sel_reg_key0 = _020_;
  assign aes_state = aes_reg_state;
  assign data_out = _102_;
  assign aes_state_idle = _021_;
  assign aes_state_read_data = _022_;
  assign aes_state_operate = _023_;
  assign aes_state_write_data = _024_;
  assign wren = _064_;
  assign start_op = _066_;
  assign aes_addr = aes_reg_opaddr;
  assign aes_len = aes_reg_oplen;
  assign aes_ctr = aes_reg_ctr;
  assign aes_key0 = aes_reg_key0;
  assign operated_bytes_count_next = _104_[15:0];
  assign block_counter_next = _106_[15:0];
  assign reset_byte_counter = start_op;
  assign incr_byte_counter = xram_ack;
  assign byte_counter_next = _108_[3:0];
  assign last_byte_acked = _072_;
  assign more_blocks = _074_;
  assign xram_addr = _012_;
  assign xram_stb = _092_;
  assign xram_wr = aes_state_write_data;
  assign aes_reg_state_next_idle = _109_;
  assign aes_reg_state_next_read_data = _110_;
  assign aes_reg_state_next_operate = _111_;
  assign aes_reg_state_next_write_data = _113_;
  assign aes_reg_state_next = _117_;
  assign aes_step = _097_;
  assign mem_data_buf_next[7:0] = _118_;
  assign mem_data_buf_next[15:8] = _119_;
  assign mem_data_buf_next[23:16] = _120_;
  assign mem_data_buf_next[31:24] = _121_;
  assign mem_data_buf_next[39:32] = _122_;
  assign mem_data_buf_next[47:40] = _123_;
  assign mem_data_buf_next[55:48] = _124_;
  assign mem_data_buf_next[63:56] = _125_;
  assign mem_data_buf_next[71:64] = _126_;
  assign mem_data_buf_next[79:72] = _127_;
  assign mem_data_buf_next[87:80] = _128_;
  assign mem_data_buf_next[95:88] = _129_;
  assign mem_data_buf_next[103:96] = _130_;
  assign mem_data_buf_next[111:104] = _131_;
  assign mem_data_buf_next[119:112] = _132_;
  assign mem_data_buf_next[127:120] = _133_;
  assign uaes_ctr_nxt = _135_;
  assign aes_time_counter_next = _137_;
  assign aes_time_enough = _061_;
  assign encrypted_data = _154_;
  assign aes_curr_key = aes_reg_key0;
  assign encrypted_data_buf_next = _138_;
  assign xram_data_out = _153_;
  assign _040_ = _056_;
  assign _039_ = _055_;
  assign _038_ = _054_;
  assign _037_ = _053_;
  assign _036_ = _052_;
  assign _035_ = _051_;
  assign _034_ = _050_;
  assign _033_ = _049_;
  assign _032_ = _048_;
  assign _031_ = _047_;
  assign _030_ = _046_;
  assign _029_ = _045_;
  assign _028_ = _044_;
  assign _027_ = _043_;
  assign _026_ = _042_;
  assign _025_ = _041_;
  assign _071_ = _073_;
  assign _072_ = _091_;
endmodule
